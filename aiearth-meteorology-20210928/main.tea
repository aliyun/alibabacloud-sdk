/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aiearth-meteorology', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GridQueryRequest {
  element?: string(name='element', description='要素'),
  forecastTimestamp?: string(name='forecastTimestamp', description='预报时间'),
  latitude?: double(name='latitude', description='纬度'),
  longitude?: double(name='longitude', description='经度'),
  pageNo?: int32(name='pageNo', description='分页编号'),
  pageSize?: int32(name='pageSize', description='分页大小'),
  product?: string(name='product', description='产品'),
  reportTimestamp?: string(name='reportTimestamp', description='起报时间'),
}

model GridQueryResponseBody = {
  code?: long(name='code', description='响应码'),
  message?: string(name='message', description='响应信息'),
  module?: {
    list?: [ 
      {
        dataType?: string(name='dataType', description='数据类型'),
        element?: string(name='element', description='要素'),
        elementUnit?: string(name='elementUnit', description='要素单位'),
        forecastTimestamp?: string(name='forecastTimestamp', description='预报时间'),
        latitude?: double(name='latitude', description='查询点纬度'),
        longitude?: double(name='longitude', description='查询点经度'),
        reportTimestamp?: string(name='reportTimestamp', description='起报时间'),
        value?: double(name='value', description='当前网格值'),
      }
    ](name='list', description='分页结果列表'),
    pageNo?: int32(name='pageNo', description='分页编号'),
    pageSize?: int32(name='pageSize', description='分页大小'),
  }(name='module', description='响应结果'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success', description='请求是否成功'),
}

model GridQueryResponse = {
  headers: map[string]string(name='headers'),
  body: GridQueryResponseBody(name='body'),
}

async function gridQuery(dataType: string, request: GridQueryRequest): GridQueryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return gridQueryWithOptions(dataType, request, headers, runtime);
}

async function gridQueryWithOptions(dataType: string, request: GridQueryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GridQueryResponse {
  Util.validateModel(request);
  dataType = OpenApiUtil.getEncodeParam(dataType);
  var query : map[string]any= {};
  if (!Util.isUnset(request.element)) {
    query.element = request.element;
  }
  if (!Util.isUnset(request.forecastTimestamp)) {
    query.forecastTimestamp = request.forecastTimestamp;
  }
  if (!Util.isUnset(request.latitude)) {
    query.latitude = request.latitude;
  }
  if (!Util.isUnset(request.longitude)) {
    query.longitude = request.longitude;
  }
  if (!Util.isUnset(request.pageNo)) {
    query.pageNo = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.pageSize = request.pageSize;
  }
  if (!Util.isUnset(request.product)) {
    query.product = request.product;
  }
  if (!Util.isUnset(request.reportTimestamp)) {
    query.reportTimestamp = request.reportTimestamp;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GridQuery', '2021-09-28', 'HTTPS', 'GET', 'AK', `/grid/${dataType}/v1`, 'json', req, runtime);
}

