/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'dms-yaochi-portal';
  @version = '2023-02-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CheckUserAuthRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CheckUserAuthResponseBody = {
  code?: string(name='Code', example='BizError'),
  data?: string(name='Data', example='{
    "authState": 1,
    "lastAuthDate": "2024-01-26T09:01:41.000+00:00"
  }'),
  message?: string(name='Message', example='BizError'),
  requestId?: string(name='RequestId', example='A651D79E-798B-5AC5-84CD-712F2744CF3C'),
  success?: boolean(name='Success', example='true'),
}

model CheckUserAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUserAuthResponseBody(name='body'),
}

async function checkUserAuth(request: CheckUserAuthRequest): CheckUserAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUserAuth', 'POST', '/', 'json', false, 'json', request);
}

model ListResourcesByTagRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='30', position='Query'),
  tagKeys?: [ string ](name='TagKeys', position='Query'),
  tagValues?: [ string ](name='TagValues', position='Query'),
}

model ListResourcesByTagResponseBody = {
  data?: string(name='Data', example='[
    "rm-xxxxxx",
    "rm-xxxxxx"
  ]'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='7863CA18-8FC6-5C21-BAF4-18C2A5700B94'),
  totalNumber?: int32(name='TotalNumber', example='10'),
}

model ListResourcesByTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesByTagResponseBody(name='body'),
}

async function listResourcesByTag(request: ListResourcesByTagRequest): ListResourcesByTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourcesByTag', 'POST', '/', 'json', false, 'json', request);
}

model ListTagsAllRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListTagsAllResponseBody = {
  data?: string(name='Data', example='{
    "key1": [
      "value1",
      "value2"
    ],
    "key2": [
      "value3"
    ],
    "key3": [
      "value4"
    ]
  }'),
  requestId?: string(name='RequestId', example='F1A0FF6B-4875-5573-A541-897B738C5325'),
}

model ListTagsAllResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagsAllResponseBody(name='body'),
}

async function listTagsAll(request: ListTagsAllRequest): ListTagsAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagsAll', 'POST', '/', 'json', false, 'json', request);
}

model ListTagsByResourceRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceIds?: [ string ](name='ResourceIds', position='Query'),
}

model ListTagsByResourceResponseBody = {
  data?: string(name='Data', example='{
    "rm-xxxxxx1":
    {
        "Product": "Rds",
        "owner": "zhangsan",
        "env": "daily"
    }
}'),
  requestId?: string(name='RequestId', example='DE3EC85A-3950-5A82-A1CC-4E5462FF60E0'),
}

model ListTagsByResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagsByResourceResponseBody(name='body'),
}

async function listTagsByResource(request: ListTagsByResourceRequest): ListTagsByResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagsByResource', 'POST', '/', 'json', false, 'json', request);
}

model MetaDatabaseSearchRequest {
  regionId?: string(name='RegionId', position='Host'),
  limit?: long(name='Limit', example='20', position='Query'),
  searchKey?: string(name='SearchKey', example='test', position='Query'),
  start?: long(name='Start', example='0', position='Query'),
}

model MetaDatabaseSearchResponseBody = {
  code?: string(name='Code', example='BizError'),
  data?: string(name='Data', example='{
    "searchResult": [
      {
        "dbState": 0,
        "ipPortSid": "rds:mysql:rdsmysql",
        "dbType": 8,
        "idc": "cn-hangzhou",
        "schemaName": "test",
        "sid": "",
        "catalogName": "test2",
        "instanceId": 1432432***,
        "instanceState": 0,
        "port": 3306,
        "dbId": 4324***,
        "searchName": "test@rdsmysql.com:3306 [test]",
        "tenantId": 421423***,
        "host": "rdsmysql.com",
        "instanceResourceId": "rdsmysql",
        "alias": "test"
      }
    ],
    "searchTime": 0.014801,
    "searchTotalNum": 2
  }'),
  message?: string(name='Message', example='BizError'),
  requestId?: string(name='RequestId', example='657E03FC-3A29-5790-A66C-F0B7F7729E8F'),
  success?: boolean(name='Success', example='true'),
}

model MetaDatabaseSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MetaDatabaseSearchResponseBody(name='body'),
}

async function metaDatabaseSearch(request: MetaDatabaseSearchRequest): MetaDatabaseSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MetaDatabaseSearch', 'POST', '/', 'json', false, 'json', request);
}

model MetaSearchRequest {
  regionId?: string(name='RegionId', position='Host'),
  limit?: long(name='Limit', example='20', position='Query'),
  searchKey: string(name='SearchKey', example='test', position='Query'),
  start?: long(name='Start', example='0', position='Query'),
}

model MetaSearchResponseBody = {
  code?: string(name='Code', example='BizError'),
  data?: string(name='Data', example='{
    "searchResult": [{
        "dbState": 0,
        "ipPortSid": "rds:mysql:rm-xxx",
        "dbType": 0,
        "idc": "cn-hangzhou",
        "schemaName": "test0913",
        "tableName": "__test_testeee",
        "sid": "",
        "catalogName": "def",
        "tableDescription": "testeee",
        "instanceId": 2103***,
        "instanceState": 0,
        "port": 3306,
        "dbId": 35714***,
        "searchName": "test0913@rm-xxx.mysql.rds.aliyuncs.com:3306 [rm-xxx]",
        "tenantId": 432532***,
        "host": "rm-xxx.mysql.rds.aliyuncs.com",
        "instanceResourceId": "rm-xxx",
        "tableId": 1021306***,
        "alias": "rm-bp1qp45785ab3r272"
    }],
    "searchTime": 0.05393,
    "searchTotalNum": 5000
}'),
  message?: string(name='Message', example='BizError'),
  requestId?: string(name='RequestId', example='17D76348-FD6B-5F95-B7B8-4AE9B6785B2B'),
  success?: boolean(name='Success', example='true'),
}

model MetaSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MetaSearchResponseBody(name='body'),
}

async function metaSearch(request: MetaSearchRequest): MetaSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MetaSearch', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserAuthRequest {
  regionId?: string(name='RegionId', position='Host'),
  grantState?: long(name='GrantState', example='1', position='Query'),
}

model UpdateUserAuthResponseBody = {
  code?: string(name='Code', example='BizError'),
  data?: string(name='Data', example='{\\"authState\\": 1, \\"lastAuthDate\\": \\"2023-04-13T06:26:39.574+00:00\\"}'),
  message?: string(name='Message', example='BizError'),
  requestId?: string(name='RequestId', example='A4827539-ABEC-5889-B7BF-E83FC98344D3'),
  success?: boolean(name='Success', example='true'),
}

model UpdateUserAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserAuthResponseBody(name='body'),
}

async function updateUserAuth(request: UpdateUserAuthRequest): UpdateUserAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserAuth', 'POST', '/', 'json', false, 'json', request);
}

model YaochiSuggestRequest {
  regionId?: string(name='RegionId', position='Host'),
  suggestText?: string(name='SuggestText', example='test', position='Query'),
}

model YaochiSuggestResponseBody = {
  code?: string(name='Code', example='BizError'),
  data?: string(name='Data', example='true'),
  message?: string(name='Message', example='BizError'),
  requestId?: string(name='RequestId', example='7B51D0CE-41F7-578D-BA67-5754919117F6'),
  success?: boolean(name='Success', example='true'),
}

model YaochiSuggestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: YaochiSuggestResponseBody(name='body'),
}

async function yaochiSuggest(request: YaochiSuggestRequest): YaochiSuggestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'YaochiSuggest', 'POST', '/', 'json', false, 'json', request);
}

