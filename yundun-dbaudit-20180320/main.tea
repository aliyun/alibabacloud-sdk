/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('yundun-dbaudit', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddLogMaskConfigRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  maskName?: string(name='MaskName'),
  maskRegex?: string(name='MaskRegex'),
  maskTxt?: string(name='MaskTxt'),
  maskDescription?: string(name='MaskDescription'),
}

model AddLogMaskConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddLogMaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: AddLogMaskConfigResponseBody(name='body'),
}

async function addLogMaskConfigWithOptions(request: AddLogMaskConfigRequest, runtime: Util.RuntimeOptions): AddLogMaskConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddLogMaskConfig', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addLogMaskConfig(request: AddLogMaskConfigRequest): AddLogMaskConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return addLogMaskConfigWithOptions(request, runtime);
}

model AssociateDbToRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ruleIds?: string(name='RuleIds'),
  ruleDbRelations?: string(name='RuleDbRelations'),
  operType?: string(name='OperType'),
}

model AssociateDbToRuleResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model AssociateDbToRuleResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateDbToRuleResponseBody(name='body'),
}

async function associateDbToRuleWithOptions(request: AssociateDbToRuleRequest, runtime: Util.RuntimeOptions): AssociateDbToRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateDbToRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateDbToRule(request: AssociateDbToRuleRequest): AssociateDbToRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateDbToRuleWithOptions(request, runtime);
}

model AssociateRuleToDbRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  jsonParam?: string(name='JsonParam'),
}

model AssociateRuleToDbResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    jsonResult?: string(name='JsonResult'),
  }(name='ServerData'),
}

model AssociateRuleToDbResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateRuleToDbResponseBody(name='body'),
}

async function associateRuleToDbWithOptions(request: AssociateRuleToDbRequest, runtime: Util.RuntimeOptions): AssociateRuleToDbResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateRuleToDb', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateRuleToDb(request: AssociateRuleToDbRequest): AssociateRuleToDbResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateRuleToDbWithOptions(request, runtime);
}

model ChangeAgentStatusRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  agentId?: string(name='AgentId'),
  agentStatus?: int32(name='AgentStatus'),
}

model ChangeAgentStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ChangeAgentStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeAgentStatusResponseBody(name='body'),
}

async function changeAgentStatusWithOptions(request: ChangeAgentStatusRequest, runtime: Util.RuntimeOptions): ChangeAgentStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeAgentStatus', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeAgentStatus(request: ChangeAgentStatusRequest): ChangeAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeAgentStatusWithOptions(request, runtime);
}

model ChangeLogMaskConfigStateRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  maskId?: int32(name='MaskId'),
  maskState?: int32(name='MaskState'),
}

model ChangeLogMaskConfigStateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ChangeLogMaskConfigStateResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeLogMaskConfigStateResponseBody(name='body'),
}

async function changeLogMaskConfigStateWithOptions(request: ChangeLogMaskConfigStateRequest, runtime: Util.RuntimeOptions): ChangeLogMaskConfigStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeLogMaskConfigState', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeLogMaskConfigState(request: ChangeLogMaskConfigStateRequest): ChangeLogMaskConfigStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeLogMaskConfigStateWithOptions(request, runtime);
}

model ChangeRulePriorityRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: string(name='DbId'),
  ruleInfos?: string(name='RuleInfos'),
}

model ChangeRulePriorityResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model ChangeRulePriorityResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeRulePriorityResponseBody(name='body'),
}

async function changeRulePriorityWithOptions(request: ChangeRulePriorityRequest, runtime: Util.RuntimeOptions): ChangeRulePriorityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeRulePriority', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeRulePriority(request: ChangeRulePriorityRequest): ChangeRulePriorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeRulePriorityWithOptions(request, runtime);
}

model ChangeRuleStatusRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  jsonParam?: string(name='JsonParam'),
}

model ChangeRuleStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ChangeRuleStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeRuleStatusResponseBody(name='body'),
}

async function changeRuleStatusWithOptions(request: ChangeRuleStatusRequest, runtime: Util.RuntimeOptions): ChangeRuleStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeRuleStatus', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeRuleStatus(request: ChangeRuleStatusRequest): ChangeRuleStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeRuleStatusWithOptions(request, runtime);
}

model CheckMailRegisteredRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  mail?: string(name='Mail'),
}

model CheckMailRegisteredResponseBody = {
  registered?: boolean(name='Registered'),
  requestId?: string(name='RequestId'),
}

model CheckMailRegisteredResponse = {
  headers: map[string]string(name='headers'),
  body: CheckMailRegisteredResponseBody(name='body'),
}

async function checkMailRegisteredWithOptions(request: CheckMailRegisteredRequest, runtime: Util.RuntimeOptions): CheckMailRegisteredResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckMailRegistered', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkMailRegistered(request: CheckMailRegisteredRequest): CheckMailRegisteredResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkMailRegisteredWithOptions(request, runtime);
}

model ClearAgentRecordsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  agentIds?: [ string ](name='AgentIds'),
}

model ClearAgentRecordsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ClearAgentRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ClearAgentRecordsResponseBody(name='body'),
}

async function clearAgentRecordsWithOptions(request: ClearAgentRecordsRequest, runtime: Util.RuntimeOptions): ClearAgentRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClearAgentRecords', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function clearAgentRecords(request: ClearAgentRecordsRequest): ClearAgentRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearAgentRecordsWithOptions(request, runtime);
}

model ConfigInstanceNetworkRequest {
  instanceId?: string(name='InstanceId'),
  publicAccessControl?: int32(name='PublicAccessControl'),
  regionId?: string(name='RegionId'),
  privateWhiteList?: [ string ](name='PrivateWhiteList'),
  publicWhiteList?: [ string ](name='PublicWhiteList'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model ConfigInstanceNetworkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigInstanceNetworkResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigInstanceNetworkResponseBody(name='body'),
}

async function configInstanceNetworkWithOptions(request: ConfigInstanceNetworkRequest, runtime: Util.RuntimeOptions): ConfigInstanceNetworkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfigInstanceNetwork', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function configInstanceNetwork(request: ConfigInstanceNetworkRequest): ConfigInstanceNetworkResponse {
  var runtime = new Util.RuntimeOptions{};
  return configInstanceNetworkWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbName?: string(name='DbName'),
  dbInstanceId?: string(name='DbInstanceId'),
  assetType?: int32(name='AssetType'),
  dbType?: int32(name='DbType'),
  dbVersion?: int32(name='DbVersion'),
  dbCertificate?: string(name='DbCertificate'),
  dbUsername?: string(name='DbUsername'),
  dbPassword?: string(name='DbPassword'),
  dbAddresses?: [ string ](name='DbAddresses'),
}

model CreateDataSourceResponseBody = {
  dbId?: int32(name='DbId'),
  requestId?: string(name='RequestId'),
}

model CreateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataSourceResponseBody(name='body'),
}

async function createDataSourceWithOptions(request: CreateDataSourceRequest, runtime: Util.RuntimeOptions): CreateDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDataSource', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateGradeProtectionReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model CreateGradeProtectionReportResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    fileName?: string(name='FileName'),
  }(name='ServerData'),
}

model CreateGradeProtectionReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGradeProtectionReportResponseBody(name='body'),
}

async function createGradeProtectionReportWithOptions(request: CreateGradeProtectionReportRequest, runtime: Util.RuntimeOptions): CreateGradeProtectionReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateGradeProtectionReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createGradeProtectionReport(request: CreateGradeProtectionReportRequest): CreateGradeProtectionReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGradeProtectionReportWithOptions(request, runtime);
}

model CreateIntegratedReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model CreateIntegratedReportResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    fileName?: string(name='FileName'),
  }(name='ServerData'),
}

model CreateIntegratedReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntegratedReportResponseBody(name='body'),
}

async function createIntegratedReportWithOptions(request: CreateIntegratedReportRequest, runtime: Util.RuntimeOptions): CreateIntegratedReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateIntegratedReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createIntegratedReport(request: CreateIntegratedReportRequest): CreateIntegratedReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntegratedReportWithOptions(request, runtime);
}

model CreateLogAlarmTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  taskName?: string(name='TaskName'),
  toMailList?: [ string ](name='ToMailList'),
  dbIdList?: [ string ](name='DbIdList'),
  riskLevelList?: [ string ](name='RiskLevelList'),
}

model CreateLogAlarmTaskResponseBody = {
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model CreateLogAlarmTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLogAlarmTaskResponseBody(name='body'),
}

async function createLogAlarmTaskWithOptions(request: CreateLogAlarmTaskRequest, runtime: Util.RuntimeOptions): CreateLogAlarmTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLogAlarmTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLogAlarmTask(request: CreateLogAlarmTaskRequest): CreateLogAlarmTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLogAlarmTaskWithOptions(request, runtime);
}

model CreatePCIReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model CreatePCIReportResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    fileName?: string(name='FileName'),
  }(name='ServerData'),
}

model CreatePCIReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePCIReportResponseBody(name='body'),
}

async function createPCIReportWithOptions(request: CreatePCIReportRequest, runtime: Util.RuntimeOptions): CreatePCIReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePCIReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPCIReport(request: CreatePCIReportRequest): CreatePCIReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPCIReportWithOptions(request, runtime);
}

model CreateReportPushTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  scheduleType?: string(name='ScheduleType'),
  scheduleTime?: string(name='ScheduleTime'),
  jobStatus?: int32(name='JobStatus'),
  reportType?: [ string ](name='ReportType'),
  dbList?: [ string ](name='DbList'),
  emailList?: [ string ](name='EmailList'),
}

model CreateReportPushTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateReportPushTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReportPushTaskResponseBody(name='body'),
}

async function createReportPushTaskWithOptions(request: CreateReportPushTaskRequest, runtime: Util.RuntimeOptions): CreateReportPushTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateReportPushTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createReportPushTask(request: CreateReportPushTaskRequest): CreateReportPushTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReportPushTaskWithOptions(request, runtime);
}

model CreateRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ruleInfo?: string(name='RuleInfo'),
  ruleDbRelation?: string(name='RuleDbRelation'),
  ruleGroup?: string(name='RuleGroup'),
  effectCurrentDBStatus?: string(name='EffectCurrentDBStatus'),
}

model CreateRuleResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateRuleGroupRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
}

model CreateRuleGroupResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model CreateRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleGroupResponseBody(name='body'),
}

async function createRuleGroupWithOptions(request: CreateRuleGroupRequest, runtime: Util.RuntimeOptions): CreateRuleGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRuleGroup', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRuleGroup(request: CreateRuleGroupRequest): CreateRuleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleGroupWithOptions(request, runtime);
}

model CreateSOXReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model CreateSOXReportResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    fileName?: string(name='FileName'),
  }(name='ServerData'),
}

model CreateSOXReportResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSOXReportResponseBody(name='body'),
}

async function createSOXReportWithOptions(request: CreateSOXReportRequest, runtime: Util.RuntimeOptions): CreateSOXReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSOXReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSOXReport(request: CreateSOXReportRequest): CreateSOXReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSOXReportWithOptions(request, runtime);
}

model CreateSqlRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  jsonParam?: string(name='JsonParam'),
}

model CreateSqlRuleResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    jsonResult?: string(name='JsonResult'),
  }(name='ServerData'),
}

model CreateSqlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSqlRuleResponseBody(name='body'),
}

async function createSqlRuleWithOptions(request: CreateSqlRuleRequest, runtime: Util.RuntimeOptions): CreateSqlRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSqlRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSqlRule(request: CreateSqlRuleRequest): CreateSqlRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSqlRuleWithOptions(request, runtime);
}

model CreateSystemAlarmTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  taskName?: string(name='TaskName'),
  toMailList?: [ string ](name='ToMailList'),
}

model CreateSystemAlarmTaskResponseBody = {
  taskId?: int32(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model CreateSystemAlarmTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSystemAlarmTaskResponseBody(name='body'),
}

async function createSystemAlarmTaskWithOptions(request: CreateSystemAlarmTaskRequest, runtime: Util.RuntimeOptions): CreateSystemAlarmTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSystemAlarmTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSystemAlarmTask(request: CreateSystemAlarmTaskRequest): CreateSystemAlarmTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSystemAlarmTaskWithOptions(request, runtime);
}

model DeleteAlarmTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  taskIds?: [ string ](name='TaskIds'),
}

model DeleteAlarmTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAlarmTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAlarmTaskResponseBody(name='body'),
}

async function deleteAlarmTaskWithOptions(request: DeleteAlarmTaskRequest, runtime: Util.RuntimeOptions): DeleteAlarmTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAlarmTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAlarmTask(request: DeleteAlarmTaskRequest): DeleteAlarmTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAlarmTaskWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbIds?: [ string ](name='DbIds'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDataSource', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteReportPushTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: int32(name='JobId'),
}

model DeleteReportPushTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteReportPushTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteReportPushTaskResponseBody(name='body'),
}

async function deleteReportPushTaskWithOptions(request: DeleteReportPushTaskRequest, runtime: Util.RuntimeOptions): DeleteReportPushTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteReportPushTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteReportPushTask(request: DeleteReportPushTaskRequest): DeleteReportPushTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteReportPushTaskWithOptions(request, runtime);
}

model DeleteRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ruleId?: string(name='RuleId'),
  ruleType?: string(name='RuleType'),
}

model DeleteRuleResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteRuleGroupRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  groupKeyId?: string(name='GroupKeyId'),
}

model DeleteRuleGroupResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model DeleteRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleGroupResponseBody(name='body'),
}

async function deleteRuleGroupWithOptions(request: DeleteRuleGroupRequest, runtime: Util.RuntimeOptions): DeleteRuleGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRuleGroup', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRuleGroup(request: DeleteRuleGroupRequest): DeleteRuleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleGroupWithOptions(request, runtime);
}

model DeregisterTemplatesFromRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  sentenceParam?: string(name='SentenceParam'),
}

model DeregisterTemplatesFromRuleResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model DeregisterTemplatesFromRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterTemplatesFromRuleResponseBody(name='body'),
}

async function deregisterTemplatesFromRuleWithOptions(request: DeregisterTemplatesFromRuleRequest, runtime: Util.RuntimeOptions): DeregisterTemplatesFromRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeregisterTemplatesFromRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deregisterTemplatesFromRule(request: DeregisterTemplatesFromRuleRequest): DeregisterTemplatesFromRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterTemplatesFromRuleWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  instanceAttribute?: {
    vpcId?: string(name='VpcId'),
    vswitchId?: string(name='VswitchId'),
    internetIp?: string(name='InternetIp'),
    networkType?: string(name='NetworkType'),
    imageVersionName?: string(name='ImageVersionName'),
    seriesCode?: string(name='SeriesCode'),
    description?: string(name='Description'),
    accessType?: int32(name='AccessType'),
    ecsStatus?: string(name='EcsStatus'),
    operatable?: boolean(name='Operatable'),
    planUpgradeStatus?: int32(name='PlanUpgradeStatus'),
    expireTime?: long(name='ExpireTime'),
    upgradeable?: boolean(name='Upgradeable'),
    instanceId?: string(name='InstanceId'),
    internetEndpoint?: string(name='InternetEndpoint'),
    intranetIp?: string(name='IntranetIp'),
    renewable?: boolean(name='Renewable'),
    regionId?: string(name='RegionId'),
    intranetEndpoint?: string(name='IntranetEndpoint'),
    startTime?: long(name='StartTime'),
    upgradeStatus?: int32(name='UpgradeStatus'),
    planUpgradeable?: boolean(name='PlanUpgradeable'),
    instanceStatus?: string(name='InstanceStatus'),
    licenseCode?: string(name='LicenseCode'),
    publicAccessControl?: int32(name='PublicAccessControl'),
    publicWhiteList?: [ string ](name='PublicWhiteList'),
    securityGroupIds?: [ string ](name='SecurityGroupIds'),
    privateWhiteList?: [ string ](name='PrivateWhiteList'),
  }(name='InstanceAttribute'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAttribute', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  instanceStatus?: string(name='InstanceStatus'),
  regionId?: string(name='RegionId'),
  pageNo?: int32(name='PageNo'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceId?: [ string ](name='InstanceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  instances?: [ 
    {
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
      internetIp?: string(name='InternetIp'),
      networkType?: string(name='NetworkType'),
      imageVersionName?: string(name='ImageVersionName'),
      seriesCode?: string(name='SeriesCode'),
      description?: string(name='Description'),
      ecsStatus?: string(name='EcsStatus'),
      operatable?: boolean(name='Operatable'),
      planUpgradeStatus?: int32(name='PlanUpgradeStatus'),
      expireTime?: long(name='ExpireTime'),
      upgradeable?: boolean(name='Upgradeable'),
      legacy?: boolean(name='Legacy'),
      instanceId?: string(name='InstanceId'),
      internetEndpoint?: string(name='InternetEndpoint'),
      intranetIp?: string(name='IntranetIp'),
      renewable?: boolean(name='Renewable'),
      regionId?: string(name='RegionId'),
      intranetEndpoint?: string(name='IntranetEndpoint'),
      startTime?: long(name='StartTime'),
      upgradeStatus?: int32(name='UpgradeStatus'),
      planUpgradeable?: boolean(name='PlanUpgradeable'),
      instanceStatus?: string(name='InstanceStatus'),
      licenseCode?: string(name='LicenseCode'),
    }
  ](name='Instances'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstances', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeLoginTicketRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeLoginTicketResponseBody = {
  requestId?: string(name='RequestId'),
  loginTicket?: {
    ticket?: string(name='Ticket'),
    certificate?: string(name='Certificate'),
    zones?: [ 
      {
        zoneId?: string(name='ZoneId'),
        localName?: string(name='LocalName'),
      }
    ](name='Zones'),
  }(name='LoginTicket'),
}

model DescribeLoginTicketResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLoginTicketResponseBody(name='body'),
}

async function describeLoginTicketWithOptions(request: DescribeLoginTicketRequest, runtime: Util.RuntimeOptions): DescribeLoginTicketResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLoginTicket', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLoginTicket(request: DescribeLoginTicketRequest): DescribeLoginTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoginTicketWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSyncInfoRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model DescribeSyncInfoResponseBody = {
  requestId?: string(name='RequestId'),
  instanceInfo?: {
    status?: int32(name='Status'),
    vswitchId?: string(name='VswitchId'),
    regionNo?: string(name='RegionNo'),
    ecsInstanceId?: string(name='EcsInstanceId'),
    imageVersionName?: string(name='ImageVersionName'),
    planCode?: string(name='PlanCode'),
    ecsUuid?: string(name='EcsUuid'),
    accessType?: int32(name='AccessType'),
    ecsStatus?: string(name='EcsStatus'),
    planUpgradeStatus?: int32(name='PlanUpgradeStatus'),
    zoneNo?: string(name='ZoneNo'),
    aliuid?: long(name='Aliuid'),
    productName?: string(name='ProductName'),
    ecsEip?: string(name='EcsEip'),
    expireTime?: long(name='ExpireTime'),
    ecsInternetIp?: string(name='EcsInternetIp'),
    instanceId?: string(name='InstanceId'),
    renewable?: boolean(name='Renewable'),
    ecsIntranetIp?: string(name='EcsIntranetIp'),
    startTime?: long(name='StartTime'),
    regionName?: string(name='RegionName'),
    upgradeStatus?: int32(name='UpgradeStatus'),
    planUpgradeable?: string(name='PlanUpgradeable'),
    customName?: string(name='CustomName'),
    ecsNetworkType?: string(name='EcsNetworkType'),
    publicAccessControl?: int32(name='PublicAccessControl'),
    vendorCode?: string(name='VendorCode'),
    planName?: string(name='PlanName'),
    productCode?: string(name='ProductCode'),
  }(name='InstanceInfo'),
}

model DescribeSyncInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSyncInfoResponseBody(name='body'),
}

async function describeSyncInfoWithOptions(request: DescribeSyncInfoRequest, runtime: Util.RuntimeOptions): DescribeSyncInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSyncInfo', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSyncInfo(request: DescribeSyncInfoRequest): DescribeSyncInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSyncInfoWithOptions(request, runtime);
}

model DisableLogMaskConfigsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  maskIdList?: [ string ](name='MaskIdList'),
}

model DisableLogMaskConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableLogMaskConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DisableLogMaskConfigsResponseBody(name='body'),
}

async function disableLogMaskConfigsWithOptions(request: DisableLogMaskConfigsRequest, runtime: Util.RuntimeOptions): DisableLogMaskConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableLogMaskConfigs', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableLogMaskConfigs(request: DisableLogMaskConfigsRequest): DisableLogMaskConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableLogMaskConfigsWithOptions(request, runtime);
}

model DissociateRulesFromDbRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  jsonParam?: string(name='JsonParam'),
}

model DissociateRulesFromDbResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    jsonResult?: string(name='JsonResult'),
  }(name='ServerData'),
}

model DissociateRulesFromDbResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateRulesFromDbResponseBody(name='body'),
}

async function dissociateRulesFromDbWithOptions(request: DissociateRulesFromDbRequest, runtime: Util.RuntimeOptions): DissociateRulesFromDbResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DissociateRulesFromDb', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dissociateRulesFromDb(request: DissociateRulesFromDbRequest): DissociateRulesFromDbResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateRulesFromDbWithOptions(request, runtime);
}

model DissociateTemplatesFromRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  jsonParam?: string(name='JsonParam'),
}

model DissociateTemplatesFromRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateTemplatesFromRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateTemplatesFromRuleResponseBody(name='body'),
}

async function dissociateTemplatesFromRuleWithOptions(request: DissociateTemplatesFromRuleRequest, runtime: Util.RuntimeOptions): DissociateTemplatesFromRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DissociateTemplatesFromRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dissociateTemplatesFromRule(request: DissociateTemplatesFromRuleRequest): DissociateTemplatesFromRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateTemplatesFromRuleWithOptions(request, runtime);
}

model EditLogMaskConfigRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  maskId?: int32(name='MaskId'),
  maskName?: string(name='MaskName'),
  maskRegex?: string(name='MaskRegex'),
  maskTxt?: string(name='MaskTxt'),
  maskDescription?: string(name='MaskDescription'),
}

model EditLogMaskConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model EditLogMaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: EditLogMaskConfigResponseBody(name='body'),
}

async function editLogMaskConfigWithOptions(request: EditLogMaskConfigRequest, runtime: Util.RuntimeOptions): EditLogMaskConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EditLogMaskConfig', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function editLogMaskConfig(request: EditLogMaskConfigRequest): EditLogMaskConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return editLogMaskConfigWithOptions(request, runtime);
}

model EnableLogMaskConfigsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  maskIdList?: [ string ](name='MaskIdList'),
}

model EnableLogMaskConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableLogMaskConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: EnableLogMaskConfigsResponseBody(name='body'),
}

async function enableLogMaskConfigsWithOptions(request: EnableLogMaskConfigsRequest, runtime: Util.RuntimeOptions): EnableLogMaskConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableLogMaskConfigs', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableLogMaskConfigs(request: EnableLogMaskConfigsRequest): EnableLogMaskConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableLogMaskConfigsWithOptions(request, runtime);
}

model GetAgentFileUrlRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model GetAgentFileUrlResponseBody = {
  requestId?: string(name='RequestId'),
  linuxFileUrl?: string(name='LinuxFileUrl'),
  accessToken?: string(name='AccessToken'),
  winFileUrl?: string(name='WinFileUrl'),
}

model GetAgentFileUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentFileUrlResponseBody(name='body'),
}

async function getAgentFileUrlWithOptions(request: GetAgentFileUrlRequest, runtime: Util.RuntimeOptions): GetAgentFileUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAgentFileUrl', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAgentFileUrl(request: GetAgentFileUrlRequest): GetAgentFileUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentFileUrlWithOptions(request, runtime);
}

model GetAgentListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  agentIp?: string(name='AgentIp'),
  agentStatus?: int32(name='AgentStatus'),
  agentOs?: string(name='AgentOs'),
}

model GetAgentListResponseBody = {
  requestId?: string(name='RequestId'),
  agentList?: [ 
    {
      vpcId?: string(name='VpcId'),
      privateIp?: string(name='PrivateIp'),
      rmagentMem?: int32(name='RmagentMem'),
      agentId?: string(name='AgentId'),
      rmagentCpu?: int32(name='RmagentCpu'),
      firstLoginTime?: string(name='FirstLoginTime'),
      agentOs?: string(name='AgentOs'),
      agentStatus?: int32(name='AgentStatus'),
      agentPort?: string(name='AgentPort'),
      agentVersion?: string(name='AgentVersion'),
      sendPackets?: long(name='SendPackets'),
      sendBytes?: long(name='SendBytes'),
      lastActiveTime?: string(name='LastActiveTime'),
      sendPacketCount?: long(name='SendPacketCount'),
      ecsId?: string(name='EcsId'),
      publicIp?: string(name='PublicIp'),
      sendByteCount?: long(name='SendByteCount'),
    }
  ](name='AgentList'),
}

model GetAgentListResponse = {
  headers: map[string]string(name='headers'),
  body: GetAgentListResponseBody(name='body'),
}

async function getAgentListWithOptions(request: GetAgentListRequest, runtime: Util.RuntimeOptions): GetAgentListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAgentList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAgentList(request: GetAgentListRequest): GetAgentListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAgentListWithOptions(request, runtime);
}

model GetAppointOperationRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model GetAppointOperationResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model GetAppointOperationResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppointOperationResponseBody(name='body'),
}

async function getAppointOperationWithOptions(request: GetAppointOperationRequest, runtime: Util.RuntimeOptions): GetAppointOperationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAppointOperation', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAppointOperation(request: GetAppointOperationRequest): GetAppointOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppointOperationWithOptions(request, runtime);
}

model GetAuditCountRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetAuditCountResponseBody = {
  sessionCount?: long(name='SessionCount'),
  sqlCount?: long(name='SqlCount'),
  riskCount?: long(name='RiskCount'),
  requestId?: string(name='RequestId'),
}

model GetAuditCountResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuditCountResponseBody(name='body'),
}

async function getAuditCountWithOptions(request: GetAuditCountRequest, runtime: Util.RuntimeOptions): GetAuditCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuditCount', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuditCount(request: GetAuditCountRequest): GetAuditCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuditCountWithOptions(request, runtime);
}

model GetAuditCountDistributionRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetAuditCountDistributionResponseBody = {
  requestId?: string(name='RequestId'),
  timeList?: [ 
    {
      sessionCount?: long(name='SessionCount'),
      beginDate?: string(name='BeginDate'),
      sqlCount?: long(name='SqlCount'),
      endDate?: string(name='EndDate'),
      riskCount?: long(name='RiskCount'),
    }
  ](name='TimeList'),
}

model GetAuditCountDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuditCountDistributionResponseBody(name='body'),
}

async function getAuditCountDistributionWithOptions(request: GetAuditCountDistributionRequest, runtime: Util.RuntimeOptions): GetAuditCountDistributionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuditCountDistribution', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuditCountDistribution(request: GetAuditCountDistributionRequest): GetAuditCountDistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuditCountDistributionWithOptions(request, runtime);
}

model GetBaseTemplateListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model GetBaseTemplateListResponseBody = {
  requestId?: string(name='RequestId'),
  templateList?: [ 
    {
      dbTypeName?: string(name='DbTypeName'),
      templateContent?: string(name='TemplateContent'),
      sqlTypeName?: string(name='SqlTypeName'),
      templateId?: string(name='TemplateId'),
      templateState?: string(name='TemplateState'),
    }
  ](name='TemplateList'),
}

model GetBaseTemplateListResponse = {
  headers: map[string]string(name='headers'),
  body: GetBaseTemplateListResponseBody(name='body'),
}

async function getBaseTemplateListWithOptions(request: GetBaseTemplateListRequest, runtime: Util.RuntimeOptions): GetBaseTemplateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBaseTemplateList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBaseTemplateList(request: GetBaseTemplateListRequest): GetBaseTemplateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBaseTemplateListWithOptions(request, runtime);
}

model GetDasUsageRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model GetDasUsageResponseBody = {
  over1sSqlCount?: long(name='Over1sSqlCount'),
  requestId?: string(name='RequestId'),
  sessionTotalCount?: long(name='SessionTotalCount'),
  createTime?: string(name='CreateTime'),
  sqlTotalCount?: long(name='SqlTotalCount'),
  auditAsset?: {
    dbCount?: int32(name='DbCount'),
    dbTypes?: [ 
      {
        dbType?: string(name='DbType'),
        dbCount?: int32(name='DbCount'),
      }
    ](name='DbTypes'),
  }(name='AuditAsset'),
  consoleAccess?: {
    lastAccessTime?: string(name='LastAccessTime'),
    day90AccessCount?: int32(name='Day90AccessCount'),
    day15AccessCount?: int32(name='Day15AccessCount'),
    day30AccessCount?: int32(name='Day30AccessCount'),
    day180AccessCount?: int32(name='Day180AccessCount'),
  }(name='ConsoleAccess'),
  agent?: {
    hasFlow?: boolean(name='HasFlow'),
    instState?: string(name='InstState'),
    activeCount?: int32(name='ActiveCount'),
  }(name='Agent'),
  noticeState?: {
    riskNotice?: boolean(name='RiskNotice'),
    sysNotice?: boolean(name='SysNotice'),
  }(name='NoticeState'),
  riskAsset?: {
    riskDBCount?: int32(name='RiskDBCount'),
    day30RiskDBCount?: int32(name='Day30RiskDBCount'),
  }(name='RiskAsset'),
  riskRule?: {
    day30RiskCount?: long(name='Day30RiskCount'),
    riskCount?: long(name='RiskCount'),
    maxHitRule?: {
      count?: long(name='Count'),
      ruleName?: string(name='RuleName'),
    }(name='MaxHitRule'),
    day30MaxHitRule?: {
      count?: long(name='Count'),
      ruleName?: string(name='RuleName'),
    }(name='Day30MaxHitRule'),
  }(name='RiskRule'),
  wpAsset?: {
    avgTime?: long(name='AvgTime'),
    dbName?: string(name='DbName'),
  }(name='WpAsset'),
}

model GetDasUsageResponse = {
  headers: map[string]string(name='headers'),
  body: GetDasUsageResponseBody(name='body'),
}

async function getDasUsageWithOptions(request: GetDasUsageRequest, runtime: Util.RuntimeOptions): GetDasUsageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDasUsage', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDasUsage(request: GetDasUsageRequest): GetDasUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDasUsageWithOptions(request, runtime);
}

model GetDBAuditCountListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetDBAuditCountListResponseBody = {
  requestId?: string(name='RequestId'),
  dbList?: [ 
    {
      sessionCount?: long(name='SessionCount'),
      dbId?: int32(name='DbId'),
      dbName?: string(name='DbName'),
      dbType?: int32(name='DbType'),
      sqlCount?: long(name='SqlCount'),
      dbTypeName?: string(name='DbTypeName'),
      riskCount?: long(name='RiskCount'),
      dbVersionName?: string(name='DbVersionName'),
      assetType?: int32(name='AssetType'),
      dbVersion?: int32(name='DbVersion'),
      dbAddresses?: [ string ](name='DbAddresses'),
    }
  ](name='DbList'),
}

model GetDBAuditCountListResponse = {
  headers: map[string]string(name='headers'),
  body: GetDBAuditCountListResponseBody(name='body'),
}

async function getDBAuditCountListWithOptions(request: GetDBAuditCountListRequest, runtime: Util.RuntimeOptions): GetDBAuditCountListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDBAuditCountList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDBAuditCountList(request: GetDBAuditCountListRequest): GetDBAuditCountListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDBAuditCountListWithOptions(request, runtime);
}

model GetGroupDetailRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  groupKeyId?: string(name='GroupKeyId'),
  groupType?: string(name='GroupType'),
}

model GetGroupDetailResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model GetGroupDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetGroupDetailResponseBody(name='body'),
}

async function getGroupDetailWithOptions(request: GetGroupDetailRequest, runtime: Util.RuntimeOptions): GetGroupDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetGroupDetail', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getGroupDetail(request: GetGroupDetailRequest): GetGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGroupDetailWithOptions(request, runtime);
}

model GetLicenseRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model GetLicenseResponseBody = {
  startTime?: string(name='StartTime'),
  requestId?: string(name='RequestId'),
  assetLimit?: int32(name='AssetLimit'),
  assetLimitUsed?: int32(name='AssetLimitUsed'),
}

model GetLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: GetLicenseResponseBody(name='body'),
}

async function getLicenseWithOptions(request: GetLicenseRequest, runtime: Util.RuntimeOptions): GetLicenseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLicense', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLicense(request: GetLicenseRequest): GetLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLicenseWithOptions(request, runtime);
}

model GetLogDetailRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  sqlId?: string(name='SqlId'),
}

model GetLogDetailResponseBody = {
  clientPort?: int32(name='ClientPort'),
  appClientIp?: string(name='AppClientIp'),
  execCostUS?: int32(name='ExecCostUS'),
  sessionLogoutTime?: string(name='SessionLogoutTime'),
  clientOsUser?: string(name='ClientOsUser'),
  ruleId?: int32(name='RuleId'),
  requestId?: string(name='RequestId'),
  sqlId?: string(name='SqlId'),
  sessionId?: string(name='SessionId'),
  sqlType?: string(name='SqlType'),
  appUsername?: string(name='AppUsername'),
  riskLevel?: int32(name='RiskLevel'),
  dbId?: int32(name='DbId'),
  ruleType?: int32(name='RuleType'),
  ruleKeyId?: int32(name='RuleKeyId'),
  sqlResult?: string(name='SqlResult'),
  affectRows?: int32(name='AffectRows'),
  sqlTypeName?: string(name='SqlTypeName'),
  schema?: string(name='Schema'),
  sessionLoginTime?: string(name='SessionLoginTime'),
  dbUser?: string(name='DbUser'),
  serverMac?: string(name='ServerMac'),
  dbServer?: string(name='DbServer'),
  ruleName?: string(name='RuleName'),
  responseCode?: string(name='ResponseCode'),
  sqlContent?: string(name='SqlContent'),
  instName?: string(name='InstName'),
  templateContent?: string(name='TemplateContent'),
  clientProgram?: string(name='ClientProgram'),
  captureTime?: string(name='CaptureTime'),
  clientIp?: string(name='ClientIp'),
  clientMac?: string(name='ClientMac'),
  templateId?: string(name='TemplateId'),
  responseText?: string(name='ResponseText'),
  fetchCostUS?: int32(name='FetchCostUS'),
  templateRules?: [ string ](name='TemplateRules'),
}

model GetLogDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogDetailResponseBody(name='body'),
}

async function getLogDetailWithOptions(request: GetLogDetailRequest, runtime: Util.RuntimeOptions): GetLogDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogDetail', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogDetail(request: GetLogDetailRequest): GetLogDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogDetailWithOptions(request, runtime);
}

model GetLogListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sqlId?: string(name='SqlId'),
  sqlKey?: string(name='SqlKey'),
  sessionId?: string(name='SessionId'),
  templateId?: string(name='TemplateId'),
  isSuccess?: string(name='IsSuccess'),
  minAffectRows?: int32(name='MinAffectRows'),
  maxAffectRows?: int32(name='MaxAffectRows'),
  minExecCostUS?: int32(name='MinExecCostUS'),
  maxExecCostUS?: int32(name='MaxExecCostUS'),
  ruleName?: string(name='RuleName'),
  clientIpList?: [ string ](name='ClientIpList'),
  dbUserList?: [ string ](name='DbUserList'),
  dbHostList?: [ string ](name='DbHostList'),
  riskLevelList?: [ string ](name='RiskLevelList'),
  ruleTypeList?: [ string ](name='RuleTypeList'),
  sqlTypeList?: [ string ](name='SqlTypeList'),
  clientProgramList?: [ string ](name='ClientProgramList'),
}

model GetLogListResponseBody = {
  endDate?: string(name='EndDate'),
  requestId?: string(name='RequestId'),
  beginDate?: string(name='BeginDate'),
  incomplete?: string(name='Incomplete'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  results?: [ 
    {
      clientPort?: int32(name='ClientPort'),
      execCostUS?: int32(name='ExecCostUS'),
      appClientIp?: string(name='AppClientIp'),
      sessionLogoutTime?: string(name='SessionLogoutTime'),
      clientOsUser?: string(name='ClientOsUser'),
      ruleId?: int32(name='RuleId'),
      sqlId?: string(name='SqlId'),
      sessionId?: string(name='SessionId'),
      sqlType?: string(name='SqlType'),
      riskLevel?: int32(name='RiskLevel'),
      appUsername?: string(name='AppUsername'),
      dbId?: int32(name='DbId'),
      ruleType?: int32(name='RuleType'),
      ruleKeyId?: int32(name='RuleKeyId'),
      affectRows?: int32(name='AffectRows'),
      schema?: string(name='Schema'),
      sessionLoginTime?: string(name='SessionLoginTime'),
      dbUser?: string(name='DbUser'),
      serverMac?: string(name='ServerMac'),
      dbServer?: string(name='DbServer'),
      ruleName?: string(name='RuleName'),
      sqlContent?: string(name='SqlContent'),
      responseCode?: string(name='ResponseCode'),
      instName?: string(name='InstName'),
      clientProgram?: string(name='ClientProgram'),
      captureTime?: string(name='CaptureTime'),
      clientIp?: string(name='ClientIp'),
      clientMac?: string(name='ClientMac'),
      templateId?: string(name='TemplateId'),
      fetchCostUS?: int32(name='FetchCostUS'),
      responseText?: string(name='ResponseText'),
    }
  ](name='Results'),
}

model GetLogListResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogListResponseBody(name='body'),
}

async function getLogListWithOptions(request: GetLogListRequest, runtime: Util.RuntimeOptions): GetLogListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogList(request: GetLogListRequest): GetLogListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogListWithOptions(request, runtime);
}

model GetLogMaskConfigsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  maskName?: string(name='MaskName'),
  maskType?: int32(name='MaskType'),
  maskState?: int32(name='MaskState'),
}

model GetLogMaskConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  configs?: [ 
    {
      maskDescription?: string(name='MaskDescription'),
      maskState?: int32(name='MaskState'),
      maskName?: string(name='MaskName'),
      maskRegex?: string(name='MaskRegex'),
      maskTxt?: string(name='MaskTxt'),
      maskId?: int32(name='MaskId'),
      maskType?: int32(name='MaskType'),
    }
  ](name='Configs'),
}

model GetLogMaskConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogMaskConfigsResponseBody(name='body'),
}

async function getLogMaskConfigsWithOptions(request: GetLogMaskConfigsRequest, runtime: Util.RuntimeOptions): GetLogMaskConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogMaskConfigs', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogMaskConfigs(request: GetLogMaskConfigsRequest): GetLogMaskConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogMaskConfigsWithOptions(request, runtime);
}

model GetLogQueryConditionRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  isRisk?: string(name='IsRisk'),
  isSuccess?: string(name='IsSuccess'),
}

model GetLogQueryConditionResponseBody = {
  requestId?: string(name='RequestId'),
  dbUserList?: [ string ](name='DbUserList'),
  clientIpList?: [ string ](name='ClientIpList'),
  clientProgramList?: [ string ](name='ClientProgramList'),
  dbServerList?: [ string ](name='DbServerList'),
  sqlTypeList?: [ 
    {
      sqlKeyword?: string(name='SqlKeyword'),
      sqlType?: string(name='SqlType'),
    }
  ](name='SqlTypeList'),
}

model GetLogQueryConditionResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogQueryConditionResponseBody(name='body'),
}

async function getLogQueryConditionWithOptions(request: GetLogQueryConditionRequest, runtime: Util.RuntimeOptions): GetLogQueryConditionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogQueryCondition', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogQueryCondition(request: GetLogQueryConditionRequest): GetLogQueryConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogQueryConditionWithOptions(request, runtime);
}

model GetLogStatisticsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  byDbId?: int32(name='ByDbId'),
  byClientIp?: int32(name='ByClientIp'),
  byDbUser?: int32(name='ByDbUser'),
  byDbServer?: int32(name='ByDbServer'),
  byClientProgram?: int32(name='ByClientProgram'),
  bySqlType?: int32(name='BySqlType'),
}

model GetLogStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  countList?: [ 
    {
      sqlKeyword?: string(name='SqlKeyword'),
      dbId?: int32(name='DbId'),
      dbName?: string(name='DbName'),
      clientProgram?: string(name='ClientProgram'),
      dbUser?: string(name='DbUser'),
      clientIp?: string(name='ClientIp'),
      sqlCount?: long(name='SqlCount'),
      riskCount?: long(name='RiskCount'),
      dbServer?: string(name='DbServer'),
      sqlType?: string(name='SqlType'),
    }
  ](name='CountList'),
}

model GetLogStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogStatisticsResponseBody(name='body'),
}

async function getLogStatisticsWithOptions(request: GetLogStatisticsRequest, runtime: Util.RuntimeOptions): GetLogStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogStatistics', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogStatistics(request: GetLogStatisticsRequest): GetLogStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogStatisticsWithOptions(request, runtime);
}

model GetLogTopDistributionRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetLogTopDistributionResponseBody = {
  requestId?: string(name='RequestId'),
  timeList?: [ 
    {
      beginDate?: string(name='BeginDate'),
      sqlCount?: long(name='SqlCount'),
      endDate?: string(name='EndDate'),
      topTime?: string(name='TopTime'),
    }
  ](name='TimeList'),
}

model GetLogTopDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogTopDistributionResponseBody(name='body'),
}

async function getLogTopDistributionWithOptions(request: GetLogTopDistributionRequest, runtime: Util.RuntimeOptions): GetLogTopDistributionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogTopDistribution', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogTopDistribution(request: GetLogTopDistributionRequest): GetLogTopDistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogTopDistributionWithOptions(request, runtime);
}

model GetLogTopStatisticsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  topTime?: string(name='TopTime'),
}

model GetLogTopStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  countList?: [ 
    {
      clientIp?: string(name='ClientIp'),
      dbUser?: string(name='DbUser'),
      sqlCount?: long(name='SqlCount'),
      clientProgram?: string(name='ClientProgram'),
    }
  ](name='CountList'),
}

model GetLogTopStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogTopStatisticsResponseBody(name='body'),
}

async function getLogTopStatisticsWithOptions(request: GetLogTopStatisticsRequest, runtime: Util.RuntimeOptions): GetLogTopStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogTopStatistics', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogTopStatistics(request: GetLogTopStatisticsRequest): GetLogTopStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogTopStatisticsWithOptions(request, runtime);
}

model GetLogTypeDistributionRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetLogTypeDistributionResponseBody = {
  requestId?: string(name='RequestId'),
  timeList?: [ 
    {
      endDate?: string(name='EndDate'),
      execCostUS?: string(name='ExecCostUS'),
      insertSqlCount?: int32(name='InsertSqlCount'),
      selectSqlCount?: int32(name='SelectSqlCount'),
      deleteSqlCount?: int32(name='DeleteSqlCount'),
      beginDate?: string(name='BeginDate'),
      otherSqlCount?: int32(name='OtherSqlCount'),
      sqlCount?: int32(name='SqlCount'),
      updateSqlCount?: int32(name='UpdateSqlCount'),
    }
  ](name='TimeList'),
}

model GetLogTypeDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetLogTypeDistributionResponseBody(name='body'),
}

async function getLogTypeDistributionWithOptions(request: GetLogTypeDistributionRequest, runtime: Util.RuntimeOptions): GetLogTypeDistributionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLogTypeDistribution', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLogTypeDistribution(request: GetLogTypeDistributionRequest): GetLogTypeDistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLogTypeDistributionWithOptions(request, runtime);
}

model GetNewSqlTemplateListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  templateId?: string(name='TemplateId'),
}

model GetNewSqlTemplateListResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  results?: [ 
    {
      templateContent?: string(name='TemplateContent'),
      templateId?: string(name='TemplateId'),
      firstCaptureTime?: string(name='FirstCaptureTime'),
    }
  ](name='Results'),
}

model GetNewSqlTemplateListResponse = {
  headers: map[string]string(name='headers'),
  body: GetNewSqlTemplateListResponseBody(name='body'),
}

async function getNewSqlTemplateListWithOptions(request: GetNewSqlTemplateListRequest, runtime: Util.RuntimeOptions): GetNewSqlTemplateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNewSqlTemplateList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNewSqlTemplateList(request: GetNewSqlTemplateListRequest): GetNewSqlTemplateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNewSqlTemplateListWithOptions(request, runtime);
}

model GetReportFileUrlRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  fileName?: string(name='FileName'),
}

model GetReportFileUrlResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    fileUrl?: string(name='FileUrl'),
  }(name='ServerData'),
}

model GetReportFileUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetReportFileUrlResponseBody(name='body'),
}

async function getReportFileUrlWithOptions(request: GetReportFileUrlRequest, runtime: Util.RuntimeOptions): GetReportFileUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetReportFileUrl', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getReportFileUrl(request: GetReportFileUrlRequest): GetReportFileUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getReportFileUrlWithOptions(request, runtime);
}

model GetRiskLevelDistributionRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetRiskLevelDistributionResponseBody = {
  requestId?: string(name='RequestId'),
  timeList?: [ 
    {
      middleRiskCount?: long(name='MiddleRiskCount'),
      highRiskCount?: long(name='HighRiskCount'),
      endDate?: string(name='EndDate'),
      beginDate?: string(name='BeginDate'),
      riskCount?: long(name='RiskCount'),
      lowRiskCount?: long(name='LowRiskCount'),
    }
  ](name='TimeList'),
}

model GetRiskLevelDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetRiskLevelDistributionResponseBody(name='body'),
}

async function getRiskLevelDistributionWithOptions(request: GetRiskLevelDistributionRequest, runtime: Util.RuntimeOptions): GetRiskLevelDistributionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRiskLevelDistribution', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRiskLevelDistribution(request: GetRiskLevelDistributionRequest): GetRiskLevelDistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRiskLevelDistributionWithOptions(request, runtime);
}

model GetRiskStatisticsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  byDbId?: int32(name='ByDbId'),
  byRiskLevel?: int32(name='ByRiskLevel'),
  byRuleType?: int32(name='ByRuleType'),
  byRuleId?: int32(name='ByRuleId'),
}

model GetRiskStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  timeList?: [ 
    {
      riskLevel?: int32(name='RiskLevel'),
      dbId?: int32(name='DbId'),
      dbName?: string(name='DbName'),
      ruleType?: int32(name='RuleType'),
      lastCaptureTime?: string(name='LastCaptureTime'),
      riskCount?: long(name='RiskCount'),
      ruleName?: string(name='RuleName'),
      ruleId?: string(name='RuleId'),
    }
  ](name='TimeList'),
}

model GetRiskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRiskStatisticsResponseBody(name='body'),
}

async function getRiskStatisticsWithOptions(request: GetRiskStatisticsRequest, runtime: Util.RuntimeOptions): GetRiskStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRiskStatistics', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRiskStatistics(request: GetRiskStatisticsRequest): GetRiskStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRiskStatisticsWithOptions(request, runtime);
}

model GetRuleDetailRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ruleId?: int32(name='RuleId'),
  ruleKeyId?: int32(name='RuleKeyId'),
  dbId?: int32(name='DbId'),
}

model GetRuleDetailResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    jsonResult?: string(name='JsonResult'),
  }(name='ServerData'),
}

model GetRuleDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleDetailResponseBody(name='body'),
}

async function getRuleDetailWithOptions(request: GetRuleDetailRequest, runtime: Util.RuntimeOptions): GetRuleDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRuleDetail', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRuleDetail(request: GetRuleDetailRequest): GetRuleDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleDetailWithOptions(request, runtime);
}

model GetRuleGroupNameRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
}

model GetRuleGroupNameResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model GetRuleGroupNameResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleGroupNameResponseBody(name='body'),
}

async function getRuleGroupNameWithOptions(request: GetRuleGroupNameRequest, runtime: Util.RuntimeOptions): GetRuleGroupNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRuleGroupName', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRuleGroupName(request: GetRuleGroupNameRequest): GetRuleGroupNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleGroupNameWithOptions(request, runtime);
}

model GetSessionDetailRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  sessionId?: string(name='SessionId'),
}

model GetSessionDetailResponseBody = {
  loginTime?: string(name='LoginTime'),
  dbId?: int32(name='DbId'),
  loginCode?: int32(name='LoginCode'),
  clientPort?: int32(name='ClientPort'),
  loginMessage?: string(name='LoginMessage'),
  dbUser?: string(name='DbUser'),
  logoutTime?: string(name='LogoutTime'),
  serverPort?: int32(name='ServerPort'),
  clientOsUser?: string(name='ClientOsUser'),
  serverMac?: string(name='ServerMac'),
  requestId?: string(name='RequestId'),
  clientProgram?: string(name='ClientProgram'),
  clientIp?: string(name='ClientIp'),
  serverIp?: string(name='ServerIp'),
  sessionId?: string(name='SessionId'),
  clientMac?: string(name='ClientMac'),
}

model GetSessionDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSessionDetailResponseBody(name='body'),
}

async function getSessionDetailWithOptions(request: GetSessionDetailRequest, runtime: Util.RuntimeOptions): GetSessionDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSessionDetail', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSessionDetail(request: GetSessionDetailRequest): GetSessionDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSessionDetailWithOptions(request, runtime);
}

model GetSessionDistributionRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetSessionDistributionResponseBody = {
  requestId?: string(name='RequestId'),
  timeList?: [ 
    {
      beginDate?: string(name='BeginDate'),
      loginSessionCount?: int32(name='LoginSessionCount'),
      activeSessionCount?: int32(name='ActiveSessionCount'),
      endDate?: string(name='EndDate'),
      errorSessionCount?: int32(name='ErrorSessionCount'),
    }
  ](name='TimeList'),
}

model GetSessionDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: GetSessionDistributionResponseBody(name='body'),
}

async function getSessionDistributionWithOptions(request: GetSessionDistributionRequest, runtime: Util.RuntimeOptions): GetSessionDistributionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSessionDistribution', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSessionDistribution(request: GetSessionDistributionRequest): GetSessionDistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSessionDistributionWithOptions(request, runtime);
}

model GetSessionListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sessionId?: string(name='SessionId'),
  actionList?: [ string ](name='ActionList'),
  clientIpList?: [ string ](name='ClientIpList'),
  dbUserList?: [ string ](name='DbUserList'),
  dbHostList?: [ string ](name='DbHostList'),
  clientProgramList?: [ string ](name='ClientProgramList'),
}

model GetSessionListResponseBody = {
  endDate?: string(name='EndDate'),
  requestId?: string(name='RequestId'),
  beginDate?: string(name='BeginDate'),
  incomplete?: string(name='Incomplete'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  results?: [ 
    {
      dbId?: int32(name='DbId'),
      loginCode?: int32(name='LoginCode'),
      action?: string(name='Action'),
      clientPort?: int32(name='ClientPort'),
      loginMessage?: string(name='LoginMessage'),
      dbUser?: string(name='DbUser'),
      serverPort?: int32(name='ServerPort'),
      clientOsUser?: string(name='ClientOsUser'),
      serverMac?: string(name='ServerMac'),
      clientProgram?: string(name='ClientProgram'),
      captureTime?: string(name='CaptureTime'),
      clientIp?: string(name='ClientIp'),
      serverIp?: string(name='ServerIp'),
      sessionId?: string(name='SessionId'),
      clientMac?: string(name='ClientMac'),
    }
  ](name='Results'),
}

model GetSessionListResponse = {
  headers: map[string]string(name='headers'),
  body: GetSessionListResponseBody(name='body'),
}

async function getSessionListWithOptions(request: GetSessionListRequest, runtime: Util.RuntimeOptions): GetSessionListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSessionList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSessionList(request: GetSessionListRequest): GetSessionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSessionListWithOptions(request, runtime);
}

model GetSessionQueryConditionRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GetSessionQueryConditionResponseBody = {
  requestId?: string(name='RequestId'),
  dbUserList?: [ string ](name='DbUserList'),
  clientIpList?: [ string ](name='ClientIpList'),
  clientProgramList?: [ string ](name='ClientProgramList'),
  dbServerList?: [ string ](name='DbServerList'),
}

model GetSessionQueryConditionResponse = {
  headers: map[string]string(name='headers'),
  body: GetSessionQueryConditionResponseBody(name='body'),
}

async function getSessionQueryConditionWithOptions(request: GetSessionQueryConditionRequest, runtime: Util.RuntimeOptions): GetSessionQueryConditionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSessionQueryCondition', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSessionQueryCondition(request: GetSessionQueryConditionRequest): GetSessionQueryConditionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSessionQueryConditionWithOptions(request, runtime);
}

model GetSqlTemplateListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sqlId?: string(name='SqlId'),
  templateId?: string(name='TemplateId'),
}

model GetSqlTemplateListResponseBody = {
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: long(name='TotalCount'),
  results?: [ 
    {
      templateContent?: string(name='TemplateContent'),
      lastCaptureTime?: string(name='LastCaptureTime'),
      captureCount?: long(name='CaptureCount'),
      templateId?: string(name='TemplateId'),
      sqlType?: int32(name='SqlType'),
      ruleList?: [ 
        {
          riskLevel?: int32(name='RiskLevel'),
          ruleState?: int32(name='RuleState'),
          dbId?: int32(name='DbId'),
          ruleName?: string(name='RuleName'),
          ruleId?: string(name='RuleId'),
        }
      ](name='RuleList'),
    }
  ](name='Results'),
}

model GetSqlTemplateListResponse = {
  headers: map[string]string(name='headers'),
  body: GetSqlTemplateListResponseBody(name='body'),
}

async function getSqlTemplateListWithOptions(request: GetSqlTemplateListRequest, runtime: Util.RuntimeOptions): GetSqlTemplateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSqlTemplateList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSqlTemplateList(request: GetSqlTemplateListRequest): GetSqlTemplateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSqlTemplateListWithOptions(request, runtime);
}

model GetTopSqlTemplateListRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
  orderType?: int32(name='OrderType'),
}

model GetTopSqlTemplateListResponseBody = {
  requestId?: string(name='RequestId'),
  templateList?: [ 
    {
      templateContent?: string(name='TemplateContent'),
      execCostUS?: string(name='ExecCostUS'),
      affectRows?: string(name='AffectRows'),
      execCostUSMean?: string(name='ExecCostUSMean'),
      lastCaptureTime?: string(name='LastCaptureTime'),
      templateId?: string(name='TemplateId'),
      captureCount?: string(name='CaptureCount'),
    }
  ](name='TemplateList'),
}

model GetTopSqlTemplateListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTopSqlTemplateListResponseBody(name='body'),
}

async function getTopSqlTemplateListWithOptions(request: GetTopSqlTemplateListRequest, runtime: Util.RuntimeOptions): GetTopSqlTemplateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTopSqlTemplateList', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTopSqlTemplateList(request: GetTopSqlTemplateListRequest): GetTopSqlTemplateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTopSqlTemplateListWithOptions(request, runtime);
}

model GradeProtectionReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model GradeProtectionReportResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model GradeProtectionReportResponse = {
  headers: map[string]string(name='headers'),
  body: GradeProtectionReportResponseBody(name='body'),
}

async function gradeProtectionReportWithOptions(request: GradeProtectionReportRequest, runtime: Util.RuntimeOptions): GradeProtectionReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GradeProtectionReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function gradeProtectionReport(request: GradeProtectionReportRequest): GradeProtectionReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return gradeProtectionReportWithOptions(request, runtime);
}

model ImportDataSourceRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dataJson?: string(name='DataJson'),
}

model ImportDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ImportDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ImportDataSourceResponseBody(name='body'),
}

async function importDataSourceWithOptions(request: ImportDataSourceRequest, runtime: Util.RuntimeOptions): ImportDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportDataSource', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importDataSource(request: ImportDataSourceRequest): ImportDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDataSourceWithOptions(request, runtime);
}

model IntegratedReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model IntegratedReportResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model IntegratedReportResponse = {
  headers: map[string]string(name='headers'),
  body: IntegratedReportResponseBody(name='body'),
}

async function integratedReportWithOptions(request: IntegratedReportRequest, runtime: Util.RuntimeOptions): IntegratedReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('IntegratedReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function integratedReport(request: IntegratedReportRequest): IntegratedReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return integratedReportWithOptions(request, runtime);
}

model ListAssociatedRulesRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ruleName?: string(name='RuleName'),
  ruleType?: string(name='RuleType'),
  ruleDefn?: string(name='RuleDefn'),
  dbId?: int32(name='DbId'),
}

model ListAssociatedRulesResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    jsonResult?: string(name='JsonResult'),
  }(name='ServerData'),
}

model ListAssociatedRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAssociatedRulesResponseBody(name='body'),
}

async function listAssociatedRulesWithOptions(request: ListAssociatedRulesRequest, runtime: Util.RuntimeOptions): ListAssociatedRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAssociatedRules', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAssociatedRules(request: ListAssociatedRulesRequest): ListAssociatedRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAssociatedRulesWithOptions(request, runtime);
}

model ListDataSourceAttributeRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbIds?: [ string ](name='DbIds'),
}

model ListDataSourceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  dbList?: [ 
    {
      resultAuditMode?: string(name='ResultAuditMode'),
      dbId?: int32(name='DbId'),
      resultAuditMaxSize?: int32(name='ResultAuditMaxSize'),
      auditMode?: string(name='AuditMode'),
      resultAuditMaxLine?: int32(name='ResultAuditMaxLine'),
    }
  ](name='DbList'),
}

model ListDataSourceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourceAttributeResponseBody(name='body'),
}

async function listDataSourceAttributeWithOptions(request: ListDataSourceAttributeRequest, runtime: Util.RuntimeOptions): ListDataSourceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDataSourceAttribute', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDataSourceAttribute(request: ListDataSourceAttributeRequest): ListDataSourceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceAttributeWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
}

model ListDataSourcesResponseBody = {
  requestId?: string(name='RequestId'),
  dbList?: [ 
    {
      dbId?: int32(name='DbId'),
      createTime?: string(name='CreateTime'),
      dbUsername?: string(name='DbUsername'),
      dbCertificate?: string(name='DbCertificate'),
      dbInstanceId?: string(name='DbInstanceId'),
      assetType?: int32(name='AssetType'),
      dbVersion?: int32(name='DbVersion'),
      dbName?: string(name='DbName'),
      dbType?: int32(name='DbType'),
      auditSwitch?: int32(name='AuditSwitch'),
      dbTypeName?: string(name='DbTypeName'),
      dbVersionName?: string(name='DbVersionName'),
      dbAddresses?: [ string ](name='DbAddresses'),
    }
  ](name='DbList'),
}

model ListDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourcesResponseBody(name='body'),
}

async function listDataSourcesWithOptions(request: ListDataSourcesRequest, runtime: Util.RuntimeOptions): ListDataSourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDataSources', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListLogAlarmTasksRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model ListLogAlarmTasksResponseBody = {
  requestId?: string(name='RequestId'),
  taskList?: [ 
    {
      taskStatus?: int32(name='TaskStatus'),
      taskId?: int32(name='TaskId'),
      createTime?: string(name='CreateTime'),
      taskName?: string(name='TaskName'),
      toMailList?: [ string ](name='ToMailList'),
      riskLevelList?: [ string ](name='RiskLevelList'),
      dbIdList?: [ string ](name='DbIdList'),
    }
  ](name='TaskList'),
}

model ListLogAlarmTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogAlarmTasksResponseBody(name='body'),
}

async function listLogAlarmTasksWithOptions(request: ListLogAlarmTasksRequest, runtime: Util.RuntimeOptions): ListLogAlarmTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListLogAlarmTasks', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listLogAlarmTasks(request: ListLogAlarmTasksRequest): ListLogAlarmTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLogAlarmTasksWithOptions(request, runtime);
}

model ListReportPushTasksRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model ListReportPushTasksResponseBody = {
  requestId?: string(name='RequestId'),
  taskList?: [ 
    {
      scheduleTime?: string(name='ScheduleTime'),
      jobStatus?: int32(name='JobStatus'),
      jobId?: int32(name='JobId'),
      scheduleType?: string(name='ScheduleType'),
      dbList?: [ string ](name='DbList'),
      reportType?: [ string ](name='ReportType'),
      emailList?: [ string ](name='EmailList'),
    }
  ](name='TaskList'),
}

model ListReportPushTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListReportPushTasksResponseBody(name='body'),
}

async function listReportPushTasksWithOptions(request: ListReportPushTasksRequest, runtime: Util.RuntimeOptions): ListReportPushTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListReportPushTasks', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listReportPushTasks(request: ListReportPushTasksRequest): ListReportPushTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listReportPushTasksWithOptions(request, runtime);
}

model ListRuleGroupsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ruleName?: string(name='RuleName'),
}

model ListRuleGroupsResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model ListRuleGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleGroupsResponseBody(name='body'),
}

async function listRuleGroupsWithOptions(request: ListRuleGroupsRequest, runtime: Util.RuntimeOptions): ListRuleGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRuleGroups', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRuleGroups(request: ListRuleGroupsRequest): ListRuleGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleGroupsWithOptions(request, runtime);
}

model ListRulesRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: string(name='DbId'),
  foregroundType?: string(name='ForegroundType'),
  ruleName?: string(name='RuleName'),
  ruleType?: string(name='RuleType'),
  ruleGroupId?: string(name='RuleGroupId'),
  riskLevel?: string(name='RiskLevel'),
  ruleQuote?: int32(name='RuleQuote'),
  ruleState?: int32(name='RuleState'),
}

model ListRulesResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: {
    jsonResult?: string(name='JsonResult'),
  }(name='ServerData'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRulesResponseBody(name='body'),
}

async function listRulesWithOptions(request: ListRulesRequest, runtime: Util.RuntimeOptions): ListRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRules', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRulesWithOptions(request, runtime);
}

model ListSqlTypeKeysForRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model ListSqlTypeKeysForRuleResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model ListSqlTypeKeysForRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListSqlTypeKeysForRuleResponseBody(name='body'),
}

async function listSqlTypeKeysForRuleWithOptions(request: ListSqlTypeKeysForRuleRequest, runtime: Util.RuntimeOptions): ListSqlTypeKeysForRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSqlTypeKeysForRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSqlTypeKeysForRule(request: ListSqlTypeKeysForRuleRequest): ListSqlTypeKeysForRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSqlTypeKeysForRuleWithOptions(request, runtime);
}

model ListSqlTypesForRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  typeId?: string(name='TypeId'),
  sqltype1?: string(name='Sqltype1'),
  keyWorld?: string(name='KeyWorld'),
}

model ListSqlTypesForRuleResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model ListSqlTypesForRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListSqlTypesForRuleResponseBody(name='body'),
}

async function listSqlTypesForRuleWithOptions(request: ListSqlTypesForRuleRequest, runtime: Util.RuntimeOptions): ListSqlTypesForRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSqlTypesForRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSqlTypesForRule(request: ListSqlTypesForRuleRequest): ListSqlTypesForRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSqlTypesForRuleWithOptions(request, runtime);
}

model ListSupportDbTypesRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model ListSupportDbTypesResponseBody = {
  requestId?: string(name='RequestId'),
  typeList?: [ 
    {
      dbType?: int32(name='DbType'),
      dbTypeName?: string(name='DbTypeName'),
      dbVersions?: [ 
        {
          dbVersionName?: string(name='DbVersionName'),
          dbVersion?: int32(name='DbVersion'),
        }
      ](name='DbVersions'),
    }
  ](name='TypeList'),
}

model ListSupportDbTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSupportDbTypesResponseBody(name='body'),
}

async function listSupportDbTypesWithOptions(request: ListSupportDbTypesRequest, runtime: Util.RuntimeOptions): ListSupportDbTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSupportDbTypes', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSupportDbTypes(request: ListSupportDbTypesRequest): ListSupportDbTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSupportDbTypesWithOptions(request, runtime);
}

model ListSystemAlarmsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  alarmType?: int32(name='AlarmType'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model ListSystemAlarmsResponseBody = {
  requestId?: string(name='RequestId'),
  alarms?: [ 
    {
      readMark?: int32(name='ReadMark'),
      alarmDetail?: string(name='AlarmDetail'),
      alarmType?: string(name='AlarmType'),
      alarmId?: int32(name='AlarmId'),
      createTime?: string(name='CreateTime'),
    }
  ](name='Alarms'),
}

model ListSystemAlarmsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSystemAlarmsResponseBody(name='body'),
}

async function listSystemAlarmsWithOptions(request: ListSystemAlarmsRequest, runtime: Util.RuntimeOptions): ListSystemAlarmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSystemAlarms', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSystemAlarms(request: ListSystemAlarmsRequest): ListSystemAlarmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemAlarmsWithOptions(request, runtime);
}

model ListSystemAlarmTasksRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model ListSystemAlarmTasksResponseBody = {
  requestId?: string(name='RequestId'),
  taskList?: [ 
    {
      taskStatus?: int32(name='TaskStatus'),
      taskId?: int32(name='TaskId'),
      createTime?: string(name='CreateTime'),
      taskName?: string(name='TaskName'),
      toMailList?: [ string ](name='ToMailList'),
    }
  ](name='TaskList'),
}

model ListSystemAlarmTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListSystemAlarmTasksResponseBody(name='body'),
}

async function listSystemAlarmTasksWithOptions(request: ListSystemAlarmTasksRequest, runtime: Util.RuntimeOptions): ListSystemAlarmTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSystemAlarmTasks', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSystemAlarmTasks(request: ListSystemAlarmTasksRequest): ListSystemAlarmTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSystemAlarmTasksWithOptions(request, runtime);
}

model ListTagKeysRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model ListTagKeysResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagKeys'),
}

model ListTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagKeysResponseBody(name='body'),
}

async function listTagKeysWithOptions(request: ListTagKeysRequest, runtime: Util.RuntimeOptions): ListTagKeysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagKeys', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagKeysWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      tagValue?: string(name='TagValue'),
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTemplatesForSqlRuleRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  sqlType1?: string(name='SqlType1'),
  choseCondition?: string(name='ChoseCondition'),
  dbId?: int32(name='DbId'),
  ruleId?: int32(name='RuleId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListTemplatesForSqlRuleResponseBody = {
  requestId?: string(name='RequestId'),
  serverData?: [ 
    {
      countTimely?: string(name='CountTimely'),
      blackOrWhite?: int32(name='BlackOrWhite'),
      sqlText?: string(name='SqlText'),
      sqltype1?: string(name='Sqltype1'),
      sqlId?: string(name='SqlId'),
    }
  ](name='ServerData'),
}

model ListTemplatesForSqlRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesForSqlRuleResponseBody(name='body'),
}

async function listTemplatesForSqlRuleWithOptions(request: ListTemplatesForSqlRuleRequest, runtime: Util.RuntimeOptions): ListTemplatesForSqlRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTemplatesForSqlRule', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTemplatesForSqlRule(request: ListTemplatesForSqlRuleRequest): ListTemplatesForSqlRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplatesForSqlRuleWithOptions(request, runtime);
}

model ListUsedSqlTypesRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ruleId?: string(name='RuleId'),
  ruleType?: string(name='RuleType'),
}

model ListUsedSqlTypesResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model ListUsedSqlTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsedSqlTypesResponseBody(name='body'),
}

async function listUsedSqlTypesWithOptions(request: ListUsedSqlTypesRequest, runtime: Util.RuntimeOptions): ListUsedSqlTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsedSqlTypes', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsedSqlTypes(request: ListUsedSqlTypesRequest): ListUsedSqlTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsedSqlTypesWithOptions(request, runtime);
}

model ModifyBaseTemplateStateRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  templateState?: int32(name='TemplateState'),
  templateIds?: [ string ](name='TemplateIds'),
}

model ModifyBaseTemplateStateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBaseTemplateStateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBaseTemplateStateResponseBody(name='body'),
}

async function modifyBaseTemplateStateWithOptions(request: ModifyBaseTemplateStateRequest, runtime: Util.RuntimeOptions): ModifyBaseTemplateStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBaseTemplateState', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBaseTemplateState(request: ModifyBaseTemplateStateRequest): ModifyBaseTemplateStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBaseTemplateStateWithOptions(request, runtime);
}

model ModifyCustomNameRequest {
  sourceIp?: string(name='SourceIp'),
  commodityCode?: string(name='CommodityCode'),
  instanceId?: string(name='InstanceId'),
  customName?: string(name='CustomName'),
}

model ModifyCustomNameResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCustomNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCustomNameResponseBody(name='body'),
}

async function modifyCustomNameWithOptions(request: ModifyCustomNameRequest, runtime: Util.RuntimeOptions): ModifyCustomNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCustomName', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCustomName(request: ModifyCustomNameRequest): ModifyCustomNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCustomNameWithOptions(request, runtime);
}

model ModifyDataSourceRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  dbName?: string(name='DbName'),
  dbVersion?: int32(name='DbVersion'),
  dbCertificate?: string(name='DbCertificate'),
  dbUsername?: string(name='DbUsername'),
  dbPassword?: string(name='DbPassword'),
  dbInstanceId?: string(name='DbInstanceId'),
  dbAddresses?: [ string ](name='DbAddresses'),
}

model ModifyDataSourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataSourceResponseBody(name='body'),
}

async function modifyDataSourceWithOptions(request: ModifyDataSourceRequest, runtime: Util.RuntimeOptions): ModifyDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDataSource', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataSourceWithOptions(request, runtime);
}

model ModifyDataSourceAttributeRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  auditMode?: string(name='AuditMode'),
  resultAuditMode?: string(name='ResultAuditMode'),
  resultAuditMaxLine?: int32(name='ResultAuditMaxLine'),
  resultAuditMaxSize?: int32(name='ResultAuditMaxSize'),
  dbIds?: [ string ](name='DbIds'),
}

model ModifyDataSourceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataSourceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataSourceAttributeResponseBody(name='body'),
}

async function modifyDataSourceAttributeWithOptions(request: ModifyDataSourceAttributeRequest, runtime: Util.RuntimeOptions): ModifyDataSourceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDataSourceAttribute', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDataSourceAttribute(request: ModifyDataSourceAttributeRequest): ModifyDataSourceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataSourceAttributeWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  instanceId?: string(name='InstanceId'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAttribute', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyLogAlarmTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  taskName?: string(name='TaskName'),
  taskId?: int32(name='TaskId'),
  toMailList?: [ string ](name='ToMailList'),
  dbIdList?: [ string ](name='DbIdList'),
  riskLevelList?: [ string ](name='RiskLevelList'),
}

model ModifyLogAlarmTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLogAlarmTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLogAlarmTaskResponseBody(name='body'),
}

async function modifyLogAlarmTaskWithOptions(request: ModifyLogAlarmTaskRequest, runtime: Util.RuntimeOptions): ModifyLogAlarmTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLogAlarmTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLogAlarmTask(request: ModifyLogAlarmTaskRequest): ModifyLogAlarmTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogAlarmTaskWithOptions(request, runtime);
}

model ModifyPlanRequest {
  commodityCode?: string(name='CommodityCode'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model ModifyPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPlanResponseBody(name='body'),
}

async function modifyPlanWithOptions(request: ModifyPlanRequest, runtime: Util.RuntimeOptions): ModifyPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPlan', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPlan(request: ModifyPlanRequest): ModifyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPlanWithOptions(request, runtime);
}

model ModifyReportPushTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  jobId?: int32(name='JobId'),
  scheduleType?: string(name='ScheduleType'),
  scheduleTime?: string(name='ScheduleTime'),
  jobStatus?: int32(name='JobStatus'),
  reportType?: [ string ](name='ReportType'),
  dbList?: [ string ](name='DbList'),
  emailList?: [ string ](name='EmailList'),
}

model ModifyReportPushTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyReportPushTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReportPushTaskResponseBody(name='body'),
}

async function modifyReportPushTaskWithOptions(request: ModifyReportPushTaskRequest, runtime: Util.RuntimeOptions): ModifyReportPushTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyReportPushTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyReportPushTask(request: ModifyReportPushTaskRequest): ModifyReportPushTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReportPushTaskWithOptions(request, runtime);
}

model ModifyRuleGroupRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
  groupKeyId?: string(name='GroupKeyId'),
}

model ModifyRuleGroupResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model ModifyRuleGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRuleGroupResponseBody(name='body'),
}

async function modifyRuleGroupWithOptions(request: ModifyRuleGroupRequest, runtime: Util.RuntimeOptions): ModifyRuleGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRuleGroup', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRuleGroup(request: ModifyRuleGroupRequest): ModifyRuleGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRuleGroupWithOptions(request, runtime);
}

model ModifySystemAlarmTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  taskName?: string(name='TaskName'),
  taskId?: int32(name='TaskId'),
  toMailList?: [ string ](name='ToMailList'),
}

model ModifySystemAlarmTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySystemAlarmTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySystemAlarmTaskResponseBody(name='body'),
}

async function modifySystemAlarmTaskWithOptions(request: ModifySystemAlarmTaskRequest, runtime: Util.RuntimeOptions): ModifySystemAlarmTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySystemAlarmTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySystemAlarmTask(request: ModifySystemAlarmTaskRequest): ModifySystemAlarmTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySystemAlarmTaskWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  resourceId?: string(name='ResourceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
  regionId?: string(name='RegionId'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveResourceGroup', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model PciReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model PciReportResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model PciReportResponse = {
  headers: map[string]string(name='headers'),
  body: PciReportResponseBody(name='body'),
}

async function pciReportWithOptions(request: PciReportRequest, runtime: Util.RuntimeOptions): PciReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PciReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pciReport(request: PciReportRequest): PciReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return pciReportWithOptions(request, runtime);
}

model PutLoginCountRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model PutLoginCountResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutLoginCountResponse = {
  headers: map[string]string(name='headers'),
  body: PutLoginCountResponseBody(name='body'),
}

async function putLoginCountWithOptions(request: PutLoginCountRequest, runtime: Util.RuntimeOptions): PutLoginCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutLoginCount', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putLoginCount(request: PutLoginCountRequest): PutLoginCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return putLoginCountWithOptions(request, runtime);
}

model ReadMarkSystemAlarmsRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  alarmIds?: [ string ](name='AlarmIds'),
}

model ReadMarkSystemAlarmsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReadMarkSystemAlarmsResponse = {
  headers: map[string]string(name='headers'),
  body: ReadMarkSystemAlarmsResponseBody(name='body'),
}

async function readMarkSystemAlarmsWithOptions(request: ReadMarkSystemAlarmsRequest, runtime: Util.RuntimeOptions): ReadMarkSystemAlarmsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReadMarkSystemAlarms', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function readMarkSystemAlarms(request: ReadMarkSystemAlarmsRequest): ReadMarkSystemAlarmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return readMarkSystemAlarmsWithOptions(request, runtime);
}

model RefundInstanceRequest {
  instanceId?: string(name='InstanceId'),
  serviceCode?: string(name='ServiceCode'),
  regionId?: string(name='RegionId'),
}

model RefundInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RefundInstanceResponseBody(name='body'),
}

async function refundInstanceWithOptions(request: RefundInstanceRequest, runtime: Util.RuntimeOptions): RefundInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefundInstance', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refundInstance(request: RefundInstanceRequest): RefundInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return refundInstanceWithOptions(request, runtime);
}

model RegisterNoticeMailRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  mail?: string(name='Mail'),
  vcode?: string(name='Vcode'),
}

model RegisterNoticeMailResponseBody = {
  requestId?: string(name='RequestId'),
}

model RegisterNoticeMailResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterNoticeMailResponseBody(name='body'),
}

async function registerNoticeMailWithOptions(request: RegisterNoticeMailRequest, runtime: Util.RuntimeOptions): RegisterNoticeMailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterNoticeMail', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerNoticeMail(request: RegisterNoticeMailRequest): RegisterNoticeMailResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerNoticeMailWithOptions(request, runtime);
}

model RemoveLogMaskConfigRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  maskId?: int32(name='MaskId'),
}

model RemoveLogMaskConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveLogMaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveLogMaskConfigResponseBody(name='body'),
}

async function removeLogMaskConfigWithOptions(request: RemoveLogMaskConfigRequest, runtime: Util.RuntimeOptions): RemoveLogMaskConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveLogMaskConfig', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeLogMaskConfig(request: RemoveLogMaskConfigRequest): RemoveLogMaskConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeLogMaskConfigWithOptions(request, runtime);
}

model SendVerifyCodeMailRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  mail?: string(name='Mail'),
}

model SendVerifyCodeMailResponseBody = {
  requestId?: string(name='RequestId'),
}

model SendVerifyCodeMailResponse = {
  headers: map[string]string(name='headers'),
  body: SendVerifyCodeMailResponseBody(name='body'),
}

async function sendVerifyCodeMailWithOptions(request: SendVerifyCodeMailRequest, runtime: Util.RuntimeOptions): SendVerifyCodeMailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendVerifyCodeMail', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendVerifyCodeMail(request: SendVerifyCodeMailRequest): SendVerifyCodeMailResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendVerifyCodeMailWithOptions(request, runtime);
}

model SoxReportRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dbId?: int32(name='DbId'),
  beginDate?: string(name='BeginDate'),
  endDate?: string(name='EndDate'),
}

model SoxReportResponseBody = {
  serverData?: string(name='ServerData'),
  requestId?: string(name='RequestId'),
}

model SoxReportResponse = {
  headers: map[string]string(name='headers'),
  body: SoxReportResponseBody(name='body'),
}

async function soxReportWithOptions(request: SoxReportRequest, runtime: Util.RuntimeOptions): SoxReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SoxReport', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function soxReport(request: SoxReportRequest): SoxReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return soxReportWithOptions(request, runtime);
}

model StartAlarmTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  taskIds?: [ string ](name='TaskIds'),
}

model StartAlarmTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartAlarmTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartAlarmTaskResponseBody(name='body'),
}

async function startAlarmTaskWithOptions(request: StartAlarmTaskRequest, runtime: Util.RuntimeOptions): StartAlarmTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartAlarmTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startAlarmTask(request: StartAlarmTaskRequest): StartAlarmTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return startAlarmTaskWithOptions(request, runtime);
}

model StartInstanceRequest {
  instanceId?: string(name='InstanceId'),
  vswitchId?: string(name='VswitchId'),
  regionId?: string(name='RegionId'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartInstance', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StopAlarmTaskRequest {
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  taskIds?: [ string ](name='TaskIds'),
}

model StopAlarmTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopAlarmTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StopAlarmTaskResponseBody(name='body'),
}

async function stopAlarmTaskWithOptions(request: StopAlarmTaskRequest, runtime: Util.RuntimeOptions): StopAlarmTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopAlarmTask', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopAlarmTask(request: StopAlarmTaskRequest): StopAlarmTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopAlarmTaskWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeInstanceVersionRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model UpgradeInstanceVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeInstanceVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceVersionResponseBody(name='body'),
}

async function upgradeInstanceVersionWithOptions(request: UpgradeInstanceVersionRequest, runtime: Util.RuntimeOptions): UpgradeInstanceVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeInstanceVersion', '2018-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeInstanceVersion(request: UpgradeInstanceVersionRequest): UpgradeInstanceVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeInstanceVersionWithOptions(request, runtime);
}

