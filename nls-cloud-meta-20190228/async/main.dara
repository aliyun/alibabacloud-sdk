/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'nls-cloud-meta';
  @version = '2019-02-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateTokenResponseBody = {
  errCode?: int32(name='ErrCode'),
  errMsg?: string(name='ErrMsg'),
  nlsRequestId?: string(name='NlsRequestId'),
  requestId?: string(name='RequestId'),
  token?: {
    expireTime?: int32(name='ExpireTime'),
    id?: string(name='Id'),
    userId?: string(name='UserId'),
  }(name='Token'),
}

model CreateTokenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTokenResponseBody(name='body'),
}

async function createToken(request: CreateTokenRequest): CreateTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateToken', 'POST', '/', 'json', false, 'json', request);
}

