/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('computenest', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ContinueDeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken'),
  serviceInstanceId?: string(name='ServiceInstanceId'),
  regionId?: string(name='RegionId'),
  parameters?: string(name='Parameters'),
}

model ContinueDeployServiceInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ContinueDeployServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ContinueDeployServiceInstanceResponseBody(name='body'),
}

async function continueDeployServiceInstanceWithOptions(request: ContinueDeployServiceInstanceRequest, runtime: Util.RuntimeOptions): ContinueDeployServiceInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ContinueDeployServiceInstance', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function continueDeployServiceInstance(request: ContinueDeployServiceInstanceRequest): ContinueDeployServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return continueDeployServiceInstanceWithOptions(request, runtime);
}

model CreateServiceInstanceRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceVersion?: string(name='ServiceVersion'),
  parameters?: map[string]any(name='Parameters'),
  clientToken?: string(name='ClientToken'),
  enableInstanceOps?: boolean(name='EnableInstanceOps'),
  enableAccountOps?: boolean(name='EnableAccountOps'),
  templateName?: string(name='TemplateName'),
}

model CreateServiceInstanceShrinkRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceVersion?: string(name='ServiceVersion'),
  parametersShrink?: string(name='Parameters'),
  clientToken?: string(name='ClientToken'),
  enableInstanceOps?: boolean(name='EnableInstanceOps'),
  enableAccountOps?: boolean(name='EnableAccountOps'),
  templateName?: string(name='TemplateName'),
}

model CreateServiceInstanceResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  serviceInstanceId?: string(name='ServiceInstanceId'),
}

model CreateServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServiceInstanceResponseBody(name='body'),
}

async function createServiceInstanceWithOptions(tmpReq: CreateServiceInstanceRequest, runtime: Util.RuntimeOptions): CreateServiceInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateServiceInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateServiceInstance', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createServiceInstance(request: CreateServiceInstanceRequest): CreateServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServiceInstanceWithOptions(request, runtime);
}

model DeleteServiceInstancesRequest {
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  serviceInstanceId?: [ string ](name='ServiceInstanceId'),
}

model DeleteServiceInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstancesWithOptions(request: DeleteServiceInstancesRequest, runtime: Util.RuntimeOptions): DeleteServiceInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteServiceInstances', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteServiceInstancesWithOptions(request, runtime);
}

model DeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken'),
  serviceInstanceId?: string(name='ServiceInstanceId'),
  regionId?: string(name='RegionId'),
}

model DeployServiceInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeployServiceInstanceResponseBody(name='body'),
}

async function deployServiceInstanceWithOptions(request: DeployServiceInstanceRequest, runtime: Util.RuntimeOptions): DeployServiceInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeployServiceInstance', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deployServiceInstance(request: DeployServiceInstanceRequest): DeployServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployServiceInstanceWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: [ 
    {
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model GetServiceRequest {
  regionId?: string(name='RegionId'),
  serviceId?: string(name='ServiceId'),
  serviceVersion?: string(name='ServiceVersion'),
}

model GetServiceResponseBody = {
  status?: string(name='Status'),
  deployMetadata?: string(name='DeployMetadata'),
  publishTime?: string(name='PublishTime'),
  requestId?: string(name='RequestId'),
  version?: string(name='Version'),
  deployType?: string(name='DeployType'),
  serviceId?: string(name='ServiceId'),
  supplierUrl?: string(name='SupplierUrl'),
  serviceType?: string(name='ServiceType'),
  supplierName?: string(name='SupplierName'),
  serviceInfos?: [ 
    {
      locale?: string(name='Locale'),
      image?: string(name='Image'),
      name?: string(name='Name'),
      shortDescription?: string(name='ShortDescription'),
    }
  ](name='ServiceInfos'),
  commodityCode?: string(name='CommodityCode'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceResponseBody(name='body'),
}

async function getServiceWithOptions(request: GetServiceRequest, runtime: Util.RuntimeOptions): GetServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetService', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceWithOptions(request, runtime);
}

model GetServiceInstanceRequest {
  serviceInstanceId?: string(name='ServiceInstanceId'),
  regionId?: string(name='RegionId'),
}

model GetServiceInstanceResponseBody = {
  outputs?: string(name='Outputs'),
  status?: string(name='Status'),
  updateTime?: string(name='UpdateTime'),
  parameters?: string(name='Parameters'),
  requestId?: string(name='RequestId'),
  serviceInstanceId?: string(name='ServiceInstanceId'),
  createTime?: string(name='CreateTime'),
  statusDetail?: string(name='StatusDetail'),
  resources?: string(name='Resources'),
  service?: {
    status?: string(name='Status'),
    publishTime?: string(name='PublishTime'),
    version?: string(name='Version'),
    deployType?: string(name='DeployType'),
    serviceId?: string(name='ServiceId'),
    supplierUrl?: string(name='SupplierUrl'),
    serviceType?: string(name='ServiceType'),
    supplierName?: string(name='SupplierName'),
    serviceInfos?: [ 
      {
        locale?: string(name='Locale'),
        image?: string(name='Image'),
        name?: string(name='Name'),
        shortDescription?: string(name='ShortDescription'),
      }
    ](name='ServiceInfos'),
    deployMetadata?: string(name='DeployMetadata'),
  }(name='Service'),
  progress?: long(name='Progress'),
  templateName?: string(name='TemplateName'),
}

model GetServiceInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetServiceInstanceResponseBody(name='body'),
}

async function getServiceInstanceWithOptions(request: GetServiceInstanceRequest, runtime: Util.RuntimeOptions): GetServiceInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetServiceInstance', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getServiceInstance(request: GetServiceInstanceRequest): GetServiceInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getServiceInstanceWithOptions(request, runtime);
}

model ListInuseServicesRequest {
  regionId?: string(name='RegionId'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  filter?: [ 
    {
      value?: [ string ](name='Value'),
      name?: string(name='Name'),
    }
  ](name='Filter'),
}

model ListInuseServicesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  maxResults?: string(name='MaxResults'),
  services?: [ 
    {
      status?: string(name='Status'),
      publishTime?: string(name='PublishTime'),
      version?: string(name='Version'),
      deployType?: string(name='DeployType'),
      serviceId?: string(name='ServiceId'),
      supplierUrl?: string(name='SupplierUrl'),
      serviceType?: string(name='ServiceType'),
      supplierName?: string(name='SupplierName'),
      serviceInfos?: [ 
        {
          locale?: string(name='Locale'),
          image?: string(name='Image'),
          name?: string(name='Name'),
          shortDescription?: string(name='ShortDescription'),
        }
      ](name='ServiceInfos'),
      commodityCode?: string(name='CommodityCode'),
    }
  ](name='Services'),
}

model ListInuseServicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInuseServicesResponseBody(name='body'),
}

async function listInuseServicesWithOptions(request: ListInuseServicesRequest, runtime: Util.RuntimeOptions): ListInuseServicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListInuseServices', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listInuseServices(request: ListInuseServicesRequest): ListInuseServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInuseServicesWithOptions(request, runtime);
}

model ListServiceInstancesRequest {
  regionId?: string(name='RegionId'),
  maxResults?: string(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  filter?: [ 
    {
      value?: [ string ](name='Value'),
      name?: string(name='Name'),
    }
  ](name='Filter'),
}

model ListServiceInstancesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  maxResults?: string(name='MaxResults'),
  serviceInstances?: [ 
    {
      status?: string(name='Status'),
      outputs?: string(name='Outputs'),
      updateTime?: string(name='UpdateTime'),
      parameters?: string(name='Parameters'),
      serviceInstanceId?: string(name='ServiceInstanceId'),
      createTime?: string(name='CreateTime'),
      statusDetail?: string(name='StatusDetail'),
      resources?: string(name='Resources'),
      service?: {
        status?: string(name='Status'),
        publishTime?: string(name='PublishTime'),
        version?: string(name='Version'),
        deployType?: string(name='DeployType'),
        serviceId?: string(name='ServiceId'),
        supplierUrl?: string(name='SupplierUrl'),
        serviceType?: string(name='ServiceType'),
        supplierName?: string(name='SupplierName'),
        serviceInfos?: [ 
          {
            locale?: string(name='Locale'),
            image?: string(name='Image'),
            name?: string(name='Name'),
            shortDescription?: string(name='ShortDescription'),
          }
        ](name='ServiceInfos'),
      }(name='Service'),
      progress?: long(name='Progress'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ServiceInstances'),
}

model ListServiceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstancesWithOptions(request: ListServiceInstancesRequest, runtime: Util.RuntimeOptions): ListServiceInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListServiceInstances', '2021-06-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listServiceInstancesWithOptions(request, runtime);
}

