/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ComputeNest';
  @version = '2021-06-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', example='rg-acfmzmhzo******', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', example='si-5dc794a7fd254e******', position='Query'),
  resourceType?: string(name='ResourceType', example='service', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', example='464C8CB6-A548-5206-B83C-D32A8E43EC21'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ContinueDeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  option?: [ string ](name='Option', position='Query'),
  parameters?: string(name='Parameters', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-0e6fca6a51a54420****', position='Query'),
}

model ContinueDeployServiceInstanceResponseBody = {
  dryRunResult?: {
    parametersAllowedToBeModified?: [ string ](name='ParametersAllowedToBeModified'),
    parametersConditionallyAllowedToBeModified?: [ string ](name='ParametersConditionallyAllowedToBeModified'),
    parametersNotAllowedToBeModified?: [ string ](name='ParametersNotAllowedToBeModified'),
  }(name='DryRunResult'),
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
}

model ContinueDeployServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinueDeployServiceInstanceResponseBody(name='body'),
}

async function continueDeployServiceInstance(request: ContinueDeployServiceInstanceRequest): ContinueDeployServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinueDeployServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  commodity?: {
    autoPay?: boolean(name='AutoPay'),
    autoRenew?: boolean(name='AutoRenew'),
    payPeriod?: long(name='PayPeriod', example='1'),
    payPeriodUnit?: string(name='PayPeriodUnit', example='Year'),
  }(name='Commodity', position='Query'),
  contactGroup?: string(name='ContactGroup', description='接收告警的云监控联系人组。', example='云账号报警联系人', position='Query'),
  dryRun?: boolean(name='DryRun', example='false', position='Query'),
  enableInstanceOps?: boolean(name='EnableInstanceOps', example='true', position='Query'),
  enableUserPrometheus?: boolean(name='EnableUserPrometheus', example='true', position='Query'),
  name?: string(name='Name', description='服务实例名称。格式要求如下：

- 长度不超过64个字符。

- 必须以数字或英文字母开头，可包含数字、英文字母、短划线（-）和下划线（_）。', example='TestName', position='Query'),
  operationMetadata?: {
    endTime?: string(name='EndTime', example='2022-01-28T06:48:56Z'),
    extraInfo?: string(name='ExtraInfo', example='```json
  {
    "vncInfo": [
      {
        "instanceId": "i-001",
        "username": "admin",
        "password": "******",
        "vncPassword": "******"
      }
    ]
  }
  ```'),
    resources?: string(name='Resources', example='{   "RegionId": "cn-hangzhou",   "Type": "ResourceIds",   "ResourceIds": {     "ALIYUN::ECS::INSTANCE": ["i-xxx", "i-yyy"],     "ALIYUN::RDS::INSTANCE": ["rm-xxx", "rm-yyy"],     "ALIYUN::VPC::VPC": ["vpc-xxx", "vpc-yyy"],     "ALIYUN::SLB::INSTANCE": ["lb-xxx", "lb-yyy"]   } }'),
    serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
    startTime?: string(name='StartTime', example='2021-12-29T06:48:56Z'),
  }(name='OperationMetadata', position='Query'),
  parameters?: map[string]any(name='Parameters', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}', shrink='json', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****', position='Query'),
  serviceId: string(name='ServiceId', example='service-0e6fca6a51a54420****', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='1', position='Query'),
  specificationCode?: string(name='SpecificationCode', example='yuncode5425200001', position='Query'),
  specificationName?: string(name='SpecificationName', description='套餐规格名称。', example='套餐一', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键。', example='key1'),
      value?: string(name='Value', description='标签值。', example='value1'),
    }
  ](name='Tag', description='用户自定义标签。', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
  trialType?: string(name='TrialType', description='使用类型。可选值：

- Trial：支持试用。

- NotTrial：不支持试用。', example='Trial', position='Query'),
}

model CreateServiceInstanceResponseBody = {
  marketInstanceId?: string(name='MarketInstanceId', example='786***45'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D****'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  status?: string(name='Status', example='Created'),
}

model CreateServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceInstanceResponseBody(name='body'),
}

async function createServiceInstance(request: CreateServiceInstanceRequest): CreateServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceInstancesRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: [ string ](name='ServiceInstanceId', position='Query'),
}

model DeleteServiceInstancesResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
}

model DeleteServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceInstances', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceInstanceRequest {
  marketInstanceId?: string(name='MarketInstanceId', example='704***59', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model GetServiceInstanceResponseBody = {
  bizStatus?: string(name='BizStatus'),
  components?: string(name='Components', description='云市场额外计费项。', example='{"TiKVServerCount":"3","package_version":"yuncode5398300001","PDServerCount":"3","TiDBServerCount":"2"}'),
  createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
  enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
  enableUserPrometheus?: boolean(name='EnableUserPrometheus', example='true'),
  endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
  grafanaDashBoardUrl?: string(name='GrafanaDashBoardUrl'),
  isOperated?: boolean(name='IsOperated', example='true'),
  licenseEndTime?: string(name='LicenseEndTime', example='2022-01-01T12:00:00'),
  marketInstanceId?: string(name='MarketInstanceId', example='704***59'),
  name?: string(name='Name', example='TestName'),
  networkConfig?: {
    endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
    privateVpcConnections?: [ 
      {
        connectionConfigs?: [ 
          {
            connectBandwidth?: int32(name='ConnectBandwidth'),
            domainName?: string(name='DomainName', description='域名名称。', example='ie-569a9be34f5534f6bc6559b5c1xxxxxx.service-51f80502802e48xxxxxx.cn-hangzhou.computenest.aliyuncs.com'),
            endpointIps?: [ string ](name='EndpointIps'),
            ingressEndpointStatus?: string(name='IngressEndpointStatus', example='Ready'),
            networkServiceStatus?: string(name='NetworkServiceStatus', example='Ready'),
            regionId?: string(name='RegionId', example='cn-beijing'),
            securityGroups?: [ string ](name='SecurityGroups'),
            vSwitches?: [ string ](name='VSwitches'),
            vpcId?: string(name='VpcId', example='vpc-bp1vwnn14rqpyiczj****'),
          }
        ](name='ConnectionConfigs'),
        endpointId?: string(name='EndpointId', example='ep-m5ei37240541816b****'),
        privateZoneId?: string(name='PrivateZoneId', example='cb7f214f80ac348d87daaeac1f35****'),
        privateZoneName?: string(name='PrivateZoneName', example='test.computenest.aliyuncs.com'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
      }
    ](name='PrivateVpcConnections'),
    privateZoneId?: string(name='PrivateZoneId', example='cb7f214f80ac348d87daaeac1f35****'),
    reversePrivateVpcConnections?: [ 
      {
        endpointId?: string(name='EndpointId', example='ep-m5ei42370541816b****'),
      }
    ](name='ReversePrivateVpcConnections'),
  }(name='NetworkConfig'),
  operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  operationEndTime?: string(name='OperationEndTime', example='2022-01-28T06:48:56Z'),
  operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
  outputs?: string(name='Outputs', example='{"InstanceIds":["i-hp38ofxl0dsyfi7z****"]}'),
  parameters?: string(name='Parameters', example='{"param":"value"}'),
  payType?: string(name='PayType', example='Subscription'),
  predefinedParameterName?: string(name='PredefinedParameterName', description='套餐名称。', example='套餐一'),
  progress?: long(name='Progress', example='90'),
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****'),
  resources?: string(name='Resources', example='[{"StackId": "stack-xxx"}]'),
  service?: {
    deployMetadata?: string(name='DeployMetadata'),
    deployType?: string(name='DeployType', example='ros'),
    publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
    serviceDocUrl?: string(name='ServiceDocUrl', example='http://example.com'),
    serviceId?: string(name='ServiceId', example='service-9c8a3522528b4fe8****'),
    serviceInfos?: [ 
      {
        image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
        locale?: string(name='Locale', example='zh-CN'),
        name?: string(name='Name'),
        shortDescription?: string(name='ShortDescription'),
      }
    ](name='ServiceInfos'),
    serviceProductUrl?: string(name='ServiceProductUrl', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com'),
    serviceType?: string(name='ServiceType', example='private'),
    status?: string(name='Status', example='Online'),
    supplierName?: string(name='SupplierName'),
    supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
    upgradableServiceVersions?: [ string ](name='UpgradableServiceVersions'),
    upgradeMetadata?: string(name='UpgradeMetadata'),
    version?: string(name='Version', example='1'),
    versionName?: string(name='VersionName'),
  }(name='Service'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
  serviceType?: string(name='ServiceType', example='private'),
  source?: string(name='Source', example='User'),
  status?: string(name='Status', example='Deployed'),
  statusDetail?: string(name='StatusDetail', example='deploy successfully'),
  supplierUid?: long(name='SupplierUid', example='158927391332*****'),
  tags?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tags'),
  templateName?: string(name='TemplateName'),
  updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
  userId?: long(name='UserId', example='130920852836****'),
}

model GetServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceInstanceResponseBody(name='body'),
}

async function getServiceInstance(request: GetServiceInstanceRequest): GetServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceTemplateParameterConstraintsRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  deployRegionId: string(name='DeployRegionId', example='cn-hangzhou', position='Query'),
  enablePrivateVpcConnection?: boolean(name='EnablePrivateVpcConnection', example='true', position='Query'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', example='InstanceType'),
      parameterValue?: string(name='ParameterValue', example='cn-hangzhou-j'),
    }
  ](name='Parameters', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', example='service-731f788406024axxxxxx', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', example='si-461ee95f46ca46xxxxxx', position='Query'),
  serviceVersion?: string(name='ServiceVersion', example='1', position='Query'),
  specificationName?: string(name='SpecificationName', position='Query'),
  templateName: string(name='TemplateName', position='Query'),
  trialType?: string(name='TrialType', example='NotTrial', position='Query'),
}

model GetServiceTemplateParameterConstraintsResponseBody = {
  familyConstraints?: [ string ](name='FamilyConstraints'),
  parameterConstraints?: [ 
    {
      allowedValues?: [ string ](name='AllowedValues'),
      associationParameterNames?: [ string ](name='AssociationParameterNames'),
      behavior?: string(name='Behavior', example='NoLimit'),
      behaviorReason?: string(name='BehaviorReason', example='No resource property refer to the parameter'),
      originalConstraints?: [ 
        {
          allowedValues?: [ string ](name='AllowedValues'),
          propertyName?: string(name='PropertyName', example='ZoneId'),
          resourceName?: string(name='ResourceName', example='MyECS'),
          resourceType?: string(name='ResourceType', example='ALIYUN::ECS::InstanceGroup'),
        }
      ](name='OriginalConstraints'),
      parameterKey?: string(name='ParameterKey', example='ZoneInfo'),
      queryErrors?: [ 
        {
          errorMessage?: string(name='ErrorMessage'),
          resourceName?: string(name='ResourceName'),
          resourceType?: string(name='ResourceType'),
        }
      ](name='QueryErrors'),
      type?: string(name='Type', example='String'),
    }
  ](name='ParameterConstraints'),
  requestId?: string(name='RequestId', example='449DC03D-A039-56A6-8D6F-6EBCCCE0EE2C'),
}

model GetServiceTemplateParameterConstraintsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceTemplateParameterConstraintsResponseBody(name='body'),
}

async function getServiceTemplateParameterConstraints(request: GetServiceTemplateParameterConstraintsRequest): GetServiceTemplateParameterConstraintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceTemplateParameterConstraints', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstanceLogsRequest {
  logSource?: string(name='LogSource', position='Query'),
  logstore?: string(name='Logstore', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-70a3b15bb626435b****', position='Query'),
}

model ListServiceInstanceLogsResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', example='51945B04-6AA6-410D-93BA-236E0248B104'),
  serviceInstancesLogs?: [ 
    {
      content?: string(name='Content', example='Start creating service instance'),
      logType?: string(name='LogType', example='serviceInstance'),
      resourceId?: string(name='ResourceId', example='si-5c6525c0589545c3****'),
      resourceType?: string(name='ResourceType', example='ROS.Stack'),
      source?: string(name='Source', example='ros'),
      status?: string(name='Status', example='Creating'),
      timestamp?: string(name='Timestamp', example='2021-05-21T00:00:00Z'),
    }
  ](name='ServiceInstancesLogs'),
}

model ListServiceInstanceLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstanceLogsResponseBody(name='body'),
}

async function listServiceInstanceLogs(request: ListServiceInstanceLogsRequest): ListServiceInstanceLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstanceLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstanceResourcesRequest {
  expireTimeEnd?: string(name='ExpireTimeEnd', example='2022-03-01T12:00:00', position='Query'),
  expireTimeStart?: string(name='ExpireTimeStart', example='2022-01-01T12:00:00', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbAx7BkQzyYC+ONO+WudHGKEdB0uWSY7AGnM3qCgm/Ynge7zU6NWdbj0Tegyajyqyc=', position='Query'),
  payType?: string(name='PayType', example='Subscription', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceARN?: [ string ](name='ResourceARN', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-d8a0cc2a1ee04dce****', position='Query'),
  serviceInstanceResourceType?: string(name='ServiceInstanceResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model ListServiceInstanceResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbAx7BkQzyYC+ONO+WudHGKEdB0uWSY7AGnM3qCgm/Ynge7zU6NWdbj0Tegyajyqyc='),
  requestId?: string(name='RequestId', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  resources?: [ 
    {
      createTime?: string(name='CreateTime', example='2022-01-01T12:00:00'),
      expireTime?: string(name='ExpireTime', example='2022-03-01T12:00:00'),
      payType?: string(name='PayType', example='Subscription'),
      productCode?: string(name='ProductCode', example='rds'),
      productType?: string(name='ProductType', example='RDS'),
      renewStatus?: string(name='RenewStatus', example='AutoRenewal'),
      renewalPeriod?: int32(name='RenewalPeriod', example='1'),
      renewalPeriodUnit?: string(name='RenewalPeriodUnit', example='Month'),
      resourceARN?: string(name='ResourceARN', example='arn:acs:sag:cn-hangzhou:130920852836****:ccn/ccn-b3qf0q439sq2de****'),
      status?: string(name='Status'),
    }
  ](name='Resources'),
}

model ListServiceInstanceResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstanceResourcesResponseBody(name='body'),
}

async function listServiceInstanceResources(request: ListServiceInstanceResourcesRequest): ListServiceInstanceResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstanceResources', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceInstanceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-bp67acfmxazb4p****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model ListServiceInstancesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', example='E50287CB-AABF-4877-92C0-289B339A1546'),
  serviceInstances?: [ 
    {
      bizStatus?: string(name='BizStatus'),
      createTime?: string(name='CreateTime', example='2021-05-20T00:00:00Z'),
      enableInstanceOps?: boolean(name='EnableInstanceOps', example='true'),
      endTime?: string(name='EndTime', example='2022-01-01T12:00:00'),
      marketInstanceId?: string(name='MarketInstanceId', example='5827****'),
      name?: string(name='Name', example='TestName'),
      operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      operationEndTime?: string(name='OperationEndTime', example='2022-01-28T06:48:56Z'),
      operationStartTime?: string(name='OperationStartTime', example='2021-12-29T06:48:56Z'),
      orderId?: string(name='OrderId'),
      outputs?: string(name='Outputs', example='{"managementUrl": "http://xx.xx"}'),
      parameters?: string(name='Parameters', example='{"param":"value"}'),
      payType?: string(name='PayType', example='Subscription'),
      progress?: long(name='Progress', example='90'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-aekz6scpcxxxxxx'),
      resources?: string(name='Resources', example='[{"StackId": "stack-xxx"}]'),
      service?: {
        commodity?: {
          saasBoostMetadata?: string(name='SaasBoostMetadata'),
          type?: string(name='Type'),
        }(name='Commodity'),
        deployType?: string(name='DeployType', example='ros'),
        publishTime?: string(name='PublishTime', example='2021-05-21T00:00:00Z'),
        serviceId?: string(name='ServiceId', example='service-0e6fca6a51a54420****'),
        serviceInfos?: [ 
          {
            image?: string(name='Image', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
            locale?: string(name='Locale', example='zh-CN'),
            name?: string(name='Name'),
            shortDescription?: string(name='ShortDescription'),
          }
        ](name='ServiceInfos'),
        serviceType?: string(name='ServiceType', example='private'),
        status?: string(name='Status', example='Online'),
        supplierName?: string(name='SupplierName'),
        supplierUrl?: string(name='SupplierUrl', example='http://example.com'),
        version?: string(name='Version', example='1.0'),
        versionName?: string(name='VersionName'),
      }(name='Service'),
      serviceInstanceId?: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****'),
      serviceType?: string(name='ServiceType', example='private'),
      source?: string(name='Source', example='Supplier'),
      status?: string(name='Status', example='Deployed'),
      statusDetail?: string(name='StatusDetail', example='deploy successfully'),
      tags?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Tags'),
      templateName?: string(name='TemplateName'),
      updateTime?: string(name='UpdateTime', example='2021-05-20T00:00:00Z'),
    }
  ](name='ServiceInstances'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstances', 'POST', '/', 'json', false, 'json', request);
}

model RestartServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model RestartServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='13FE89A5-C036-56BF-A0FF-A31C59819FD7'),
}

model RestartServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartServiceInstanceResponseBody(name='body'),
}

async function restartServiceInstance(request: RestartServiceInstanceRequest): RestartServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model StartServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='464C8CB6-A548-5206-B83C-D32A8E43EC21'),
}

model StartServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartServiceInstanceResponseBody(name='body'),
}

async function startServiceInstance(request: StartServiceInstanceRequest): StartServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopServiceInstanceRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', example='si-b58c874912fc4294****', position='Query'),
}

model StopServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
}

model StopServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopServiceInstanceResponseBody(name='body'),
}

async function stopServiceInstance(request: StopServiceInstanceRequest): StopServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

