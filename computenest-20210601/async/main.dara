/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ComputeNest';
  @version = '2021-06-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelServiceUsageRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  needDelete?: boolean(name='NeedDelete', example='true', position='Query'),
  serviceId: string(name='ServiceId', example='service-d6fc5f949a9246xxxxxx', position='Query'),
}

model CancelServiceUsageResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
}

model CancelServiceUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelServiceUsageResponseBody(name='body'),
}

async function cancelServiceUsage(request: CancelServiceUsageRequest): CancelServiceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelServiceUsage', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', description='The ID of the new resource group.

You can view resource group IDs in the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) .', example='rg-acfmzmhzo******', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the cloud resource that you want to move to a new resource group.', example='si-5dc794a7fd254e******', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   service: service
*   serviceinstance: service instance', example='service', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='464C8CB6-A548-5206-B83C-D32A8E43EC21'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ContinueDeployServiceInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run for the request to check information such as the permissions and instance status. Valid values:

*   true: performs a dry run for the request, but does not create a service instance.
*   false: performs a dry run for the request, and creates a service instance if the request passes the dry run.', example='false', position='Query'),
  option?: [ string ](name='Option', description='The options that the system adopts when the system continues to create the service instance.', position='Query'),
  parameters?: string(name='Parameters', description='The parameters configured for the service instance.', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-0e6fca6a51a54420****', position='Query'),
}

model ContinueDeployServiceInstanceResponseBody = {
  dryRunResult?: {
    parametersAllowedToBeModified?: [ string ](name='ParametersAllowedToBeModified', description='The parameters that can be modified. The operation that is performed to modify the parameters does not cause a validation error.

> This parameter is returned only if DryRun is set to true.'),
    parametersConditionallyAllowedToBeModified?: [ string ](name='ParametersConditionallyAllowedToBeModified', description='The parameters that can be modified under specific conditions. The new values of the parameters determine whether the operation that is performed to modify the parameters causes a validation error.

> This parameter is returned only if DryRun is set to true.'),
    parametersNotAllowedToBeModified?: [ string ](name='ParametersNotAllowedToBeModified', description='The parameters that cannot be modified. The operation that is performed to modify the parameters causes a validation error.

> This parameter is returned only if DryRun is set to true.'),
  }(name='DryRunResult', description='The dry run result.'),
  requestId?: string(name='RequestId', description='The request ID.', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  serviceInstanceId?: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-d6ab3a63ccbb4b17****'),
}

model ContinueDeployServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinueDeployServiceInstanceResponseBody(name='body'),
}

/**
  * This operation is available only for service instances that belong to private services deployed by using Resource Orchestration Service (ROS).
  *
 */
async function continueDeployServiceInstance(request: ContinueDeployServiceInstanceRequest): ContinueDeployServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinueDeployServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  commodity?: {
    autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   **true**
*   **false**', example='false'),
    autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. Valid values:

*   **true**
*   **false**', example='false'),
    payPeriod?: long(name='PayPeriod', description='The subscription duration.', example='1'),
    payPeriodUnit?: string(name='PayPeriodUnit', description='The unit of the subscription duration. Valid values:

*   Year
*   Month
*   Day', example='Year'),
  }(name='Commodity', description='The information about the order placed in Alibaba Cloud Marketplace. You do not need to specify this parameter if the service is not published in Alibaba Cloud Marketplace or uses the pay-as-you-go billing method.', position='Query'),
  contactGroup?: string(name='ContactGroup', description='The alert contact group.', example='云账号报警联系人', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. 
*   **false** (default): sends the request.', example='false', position='Query'),
  enableInstanceOps?: boolean(name='EnableInstanceOps', description='Indicates whether the service instance supports the operation feature.', example='true', position='Query'),
  enableUserPrometheus?: boolean(name='EnableUserPrometheus', description='Whether to enable Prometheus monitoring.', example='true', position='Query'),
  name?: string(name='Name', description='The serviceInstance name.', example='TestName', position='Query'),
  operationMetadata?: {
    endTime?: string(name='EndTime', description='The operation end time.', example='2022-01-28T06:48:56Z'),
    extraInfo?: string(name='ExtraInfo', description='The additional information.', example='```json
  {
    "vncInfo": [
      {
        "instanceId": "i-001",
        "username": "admin",
        "password": "******",
        "vncPassword": "******"
      }
    ]
  }
  ```'),
    resources?: string(name='Resources', description='Imported resource.', example='{   "RegionId": "cn-hangzhou",   "Type": "ResourceIds",   "ResourceIds": {     "ALIYUN::ECS::INSTANCE": ["i-xxx", "i-yyy"],     "ALIYUN::RDS::INSTANCE": ["rm-xxx", "rm-yyy"],     "ALIYUN::VPC::VPC": ["vpc-xxx", "vpc-yyy"],     "ALIYUN::SLB::INSTANCE": ["lb-xxx", "lb-yyy"]   } }'),
    serviceInstanceId?: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-d6ab3a63ccbb4b17****'),
    startTime?: string(name='StartTime', description='The operation start time.', example='2021-12-29T06:48:56Z'),
  }(name='OperationMetadata', description='The operation metadata.', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The parameters that the customer specifies to deploy the service instance.

>  If region information is required to create a service instance, you must specify the region ID in the value of Parameters.', example='{"NodeCount": 3, "SystemDiskSize": 40, "InstancePassword": "******"}', shrink='json', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Valid values:

*   cn-hangzhou: China (Hangzhou).
*   ap-southeast-1: Singapore.', example='cn-hangzhou', position='Query'),
  resourceAutoPay?: boolean(name='ResourceAutoPay', description='Whether the resource pays automatically.Valid values:
- true
- false', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-bp67acfmxazb4p****', position='Query'),
  serviceId: string(name='ServiceId', description='The service ID.', example='service-0e6fca6a51a54420****', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The service version.', example='1', position='Query'),
  specificationCode?: string(name='SpecificationCode', description='Specification code.', example='yuncode5425200001', position='Query'),
  specificationName?: string(name='SpecificationName', description='The package name.', example='套餐一', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template.', example='模板1', position='Query'),
  trialType?: string(name='TrialType', description='The trial type of serviceInstance. 
Valid values:

- Created: 
- Deploying
- DeployedFailed
- Deployed', example='Trial', position='Query'),
}

model CreateServiceInstanceResponseBody = {
  marketInstanceId?: string(name='MarketInstanceId', description='The MartketInstance ID.', example='786***45'),
  orderId?: string(name='OrderId', description='The order ID.', example='2306175xxxxxxxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D****'),
  serviceInstanceId?: string(name='ServiceInstanceId', description='The service instance ID.', example='si-d6ab3a63ccbb4b17****'),
  status?: string(name='Status', description='Indicates whether the synchronization task was created. Valid values:

*   **1**: Created.
*   **0**: Creation failed. The tables in the synchronization task are duplicate. The duplicate tables are returned for the **RepeatedDbs** parameter.
*   **-1**: Creation failed. The cause why the creation failed is returned for the **ErrorMsg** parameter.', example='Created'),
}

model CreateServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceInstanceResponseBody(name='body'),
}

async function createServiceInstance(request: CreateServiceInstanceRequest): CreateServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateServiceUsageRequest {
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  serviceId: string(name='ServiceId', example='service-d6fc5f949a9246xxxxxx', position='Query'),
  userInformation?: map[string]string(name='UserInformation', shrink='json', position='Query'),
}

model CreateServiceUsageResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
}

model CreateServiceUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceUsageResponseBody(name='body'),
}

async function createServiceUsage(request: CreateServiceUsageRequest): CreateServiceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServiceUsage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteServiceInstancesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceInstanceId: [ string ](name='ServiceInstanceId', description='The IDs of the service instances.', position='Query'),
}

model DeleteServiceInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
}

model DeleteServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteServiceInstancesResponseBody(name='body'),
}

async function deleteServiceInstances(request: DeleteServiceInstancesRequest): DeleteServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteServiceInstances', 'POST', '/', 'json', false, 'json', request);
}

model GenerateServicePolicyRequest {
  operationTypes?: [ string ](name='OperationTypes', description='The type of operation N for which you want to generate the policy information.

Valid values:

*   CreateServiceInstance: creates a serviceInstance by calling the CreateServiceInstance operation.
*   UpdateServiceInstance: updates a serviceInstance by calling the UpdateServiceInstance operation.
*   DeleteServiceInstance: deletes a serviceInstance by calling the DeleteServiceInstance operation.

>  The default value is the combination of all valid values.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', description='The service ID.', example='service-b3e9ed878b0c4xxxxxx', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The service version.', example='draft', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template.', example='GPU-单机版', position='Query'),
  trialType?: string(name='TrialType', description='The trial policy. Valid values:

*   Trial: Trials are supported.
*   NotTrial: Trials are not supported.', example='NotTrial', position='Query'),
}

model GenerateServicePolicyResponseBody = {
  missingPolicy?: [ 
    {
      action?: [ string ](name='Action', description='Operations on specific resources.'),
      resource?: string(name='Resource', description='The specific objects authorized. An asterisk (*) denotes all resources.', example='*'),
      serviceName?: string(name='ServiceName', description='The name of the service.', example='ecs'),
    }
  ](name='MissingPolicy', description='The policies that are missing.'),
  policy?: string(name='Policy', description='The RAM policy.', example='{Statement": [{ "Action": ["oos:*"], "Effect": "Allow", "Resource": "*"},{ "Action": ["ecs:DescribeInstances"], "Effect": "Allow", "Resource": "*"},{ "Action": ["ecs:RunInstance"], "Effect": "Allow", "Resource": "*"}], "Version": "1"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='5040BE9E-8DA2-5C9D-9B70-0EE6027A14BC'),
}

model GenerateServicePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateServicePolicyResponseBody(name='body'),
}

async function generateServicePolicy(request: GenerateServicePolicyRequest): GenerateServicePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateServicePolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceEstimateCostRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='qwertyuiop', position='Query'),
  commodity?: {
    payPeriod?: int32(name='PayPeriod', description='The subscription duration.', example='1'),
    payPeriodUnit?: string(name='PayPeriodUnit', description='The unit of the subscription duration. Valid values:

*   Year
*   Month
*   Day', example='Year'),
  }(name='Commodity', description='The commodity details.', shrink='json', position='Query'),
  operationName?: string(name='OperationName', description='The name of the configuration update operation.', example='修改游戏参数', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The parameters that are specified for service instance deployment.

>  If you want to specify the region in which the service instance is deployed, you must specify the information in Parameters.', example='{ \\"RegionId\\": \\"cn-hangzhou\\", \\"InstanceType\\": \\"ecs.g5.large\\"}', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', description='The service ID.', example='service-12xxxxxx', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', description='The service instance ID.', example='si-d6ab3a63ccbb4b17xxxx', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The service version.', example='1', position='Query'),
  specificationName?: string(name='SpecificationName', description='The package name.', example='自定义套餐', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template. This parameter is returned only if you specify TemplateId.

> -   If you specify TemplateVersion, the name of the template whose version is specified by TemplateVersion is returned.
> -  If you not specify TemplateVersion, the name of the template whose version is the default version is returned.', example='模板1', position='Query'),
  trialType?: string(name='TrialType', description='The trial policy. Valid values:

*   Trial: Trials are supported.
*   NotTrial: Trials are not supported.', example='NotTrial', position='Query'),
}

model GetServiceEstimateCostResponseBody = {
  commodity?: map[string]any(name='Commodity', description='Estimated commodity cost.', example='{\\"cmgj00059839\\": {\\"Result\\": {\\"InquiryType\\": \\"Buy\\", \\"Order\\": {\\"Currency\\": \\"CNY\\", \\"DiscountAmount\\": \\"0.0\\", \\"TradeAmount\\": \\"0.01\\", \\"OriginalAmount\\": \\"0.01\\"}}}}'),
  requestId?: string(name='RequestId', description='The request ID.', example='08ABBB67-39C9-5EE7-98E5-80486F75CE8D'),
  resources?: map[string]any(name='Resources', description='Estimated resource cost.', example='{
    "EcsInstance" : {
      "Type" : "ALIYUN::ECS::Instance",
      "Success" : true,
      "Result" : {
        "Order" : {
          "Currency" : "CNY",
          "RuleIds" : [ "102111101338****" ],
          "DetailInfos" : {
            "ResourcePriceModel" : [ {
              "OriginalPrice" : 0,
              "DiscountPrice" : 0,
              "SubRules" : {
                "Rule" : [ ]
              },
              "Resource" : "bandwidth",
              "TradePrice" : 0
            }, {
              "OriginalPrice" : 0,
              "DiscountPrice" : 0,
              "SubRules" : {
                "Rule" : [ ]
              },
              "Resource" : "image",
              "TradePrice" : 0
            }, {
              "OriginalPrice" : 0.366666,
              "DiscountPrice" : 0.249012,
              "SubRules" : {
                "Rule" : [ ]
              },
              "Resource" : "instanceType",
              "TradePrice" : 0.117654
            }, {
              "OriginalPrice" : 0.055555,
              "DiscountPrice" : 0.037729,
              "SubRules" : {
                "Rule" : [ ]
              },
              "Resource" : "systemDisk",
              "TradePrice" : 0.017826
            } ]
          },
          "TradeAmount" : 0.135,
          "OriginalAmount" : 0.422,
          "Coupons" : {
            "Coupon" : [ ]
          },
          "DiscountAmount" : 0.287
        },
        "OrderSupplement" : {
          "PriceUnit" : "/Hour",
          "ChargeType" : "PostPaid",
          "Quantity" : 1,
          "PriceType" : "Total"
        },
        "Rules" : {
          "Rule" : [ {
            "RuleDescId" : "102111101338****",
            "Name" : "合同优惠_多计费项优惠_3.208750折"
          } ]
        }
      }
    }
  }'),
}

model GetServiceEstimateCostResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceEstimateCostResponseBody(name='body'),
}

async function getServiceEstimateCost(request: GetServiceEstimateCostRequest): GetServiceEstimateCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceEstimateCost', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceInstanceRequest {
  marketInstanceId?: string(name='MarketInstanceId', description='The MarketInstance ID.', example='704***59', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', description='The service instance ID.

>  You must specify either `ServiceInstanceId` or `MarketInstanceId`. Otherwise, the operation fails.', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model GetServiceInstanceResponseBody = {
  bizStatus?: string(name='BizStatus', description='The business state of the service instance. Valid values:

*   Normal
*   Renewing
*   RenewFailed
*   Expired', example='Normal'),
  components?: string(name='Components', description='Cloud Marketplace additional billing items.', example='{"TiKVServerCount":"3","package_version":"yuncode5398300001","PDServerCount":"3","TiDBServerCount":"2"}'),
  createTime?: string(name='CreateTime', description='The time when the serviceInstance was created.', example='2021-05-20T00:00:00Z'),
  enableInstanceOps?: boolean(name='EnableInstanceOps', description='Indicates whether the service instance supports the operation feature. Valid values:

*   true
*   false', example='true'),
  enableUserPrometheus?: boolean(name='EnableUserPrometheus', description='Whether to enable Prometheus monitoring.', example='true'),
  endTime?: string(name='EndTime', description='The expiration time of service instance.', example='2022-01-01T12:00:00'),
  grafanaDashBoardUrl?: string(name='GrafanaDashBoardUrl', description='The URL of the Grafana dashboard.', example='https://g.console.aliyun.com/d/xxxxxxxx-cn-mariadb/mysql-xxxxxx-xxxxxxxx-and-dashboard?orgId=355401&refresh=10s'),
  isOperated?: boolean(name='IsOperated', description='Indicates whether the hosted O\\&M feature is enabled for the service instance. Valid values:

*   true
*   false', example='true'),
  licenseEndTime?: string(name='LicenseEndTime', description='The expiration time of licence.', example='2022-01-01T12:00:00'),
  marketInstanceId?: string(name='MarketInstanceId', description='The market Instance ID.', example='704***59'),
  name?: string(name='Name', description='The name of the service instance.', example='TestName'),
  networkConfig?: {
    endpointId?: string(name='EndpointId', description='The ID of the endpoint for the private connection.

>  This parameter is discontinued.', example='ep-m5ei37240541816b****'),
    privateVpcConnections?: [ 
      {
        connectionConfigs?: [ 
          {
            connectBandwidth?: int32(name='ConnectBandwidth', description='The bandwidth limit for the private connection established based on the private network interconnection mode of Compute Nest.', example='1536Mbps'),
            domainName?: string(name='DomainName', description='The domain name.', example='ie-569a9be34f5534f6bc6559b5c1xxxxxx.service-51f80502802e48xxxxxx.cn-hangzhou.computenest.aliyuncs.com'),
            endpointIps?: [ string ](name='EndpointIps', description='The IP addresses of the endpoints of the private connections.'),
            ingressEndpointStatus?: string(name='IngressEndpointStatus', description='The state of the ingress endpoint. Valid values:

*   Ready: The ingress endpoint is connected.
*   Pending: The ingress endpoint is being connected.
*   Failed: The ingress endpoint fails to be connected.
*   Deleted: The ingress endpoint is deleted.
*   Deleting: The ingress endpoint is being deleted.', example='Ready'),
            networkServiceStatus?: string(name='NetworkServiceStatus', description='The state of the network service. Valid values:

*   Ready: The network service is connected.
*   Pending: The network service is being connected.
*   Failed: The network service fails to be connected.
*   Deleted: The network service is deleted.
*   Deleting: The network service is being deleted.', example='Ready'),
            regionId?: string(name='RegionId', description='The region ID of the VPC to which the endpoint of the private connection established based on the private network interconnection mode of Compute Nest belongs.', example='cn-beijing'),
            securityGroups?: [ string ](name='SecurityGroups', description='The names of the security groups.'),
            vSwitches?: [ string ](name='VSwitches', description='The names of the vSwitches.'),
            vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp1vwnn14rqpyiczj****'),
          }
        ](name='ConnectionConfigs', description='The network configurations, which are mainly used for private connections.'),
        endpointId?: string(name='EndpointId', description='The endpoint ID of the private connection.', example='ep-m5ei37240541816b****'),
        privateZoneId?: string(name='PrivateZoneId', description='The ID of the private zone of the custom private domain name.', example='cb7f214f80ac348d87daaeac1f35****'),
        privateZoneName?: string(name='PrivateZoneName', description='The custom domain name.', example='test.computenest.aliyuncs.com'),
        regionId?: string(name='RegionId', description='The region ID of the endpoint of the PrivateLink connection.', example='cn-hangzhou'),
      }
    ](name='PrivateVpcConnections', description='The information about private connections.'),
    privateZoneId?: string(name='PrivateZoneId', description='The PrivateZone ID.', example='cb7f214f80ac348d87daaeac1f35****'),
    reversePrivateVpcConnections?: [ 
      {
        endpointId?: string(name='EndpointId', description='The endpoint ID of the reverse private connection.', example='ep-m5ei42370541816b****'),
      }
    ](name='ReversePrivateVpcConnections', description='The information about the reverse private connection.'),
  }(name='NetworkConfig', description='The network configurations.

>  This parameter is discontinued.'),
  operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', description='The serviceInstance  to be operated.', example='si-d6ab3a63ccbb4b17****'),
  operationEndTime?: string(name='OperationEndTime', description='The operation end time.', example='2022-01-28T06:48:56Z'),
  operationStartTime?: string(name='OperationStartTime', description='The operation start time.', example='2021-12-29T06:48:56Z'),
  outputs?: string(name='Outputs', description='The outputs returned from creating the service instance.

*   If the service is deployed by using a ROS template, all output fields of the template are returned.
*   If the service is deployed by calling an SPI operation, the output fields of the service provider and for the Compute Nest additional features are returned.', example='{"InstanceIds":["i-hp38ofxl0dsyfi7z****"]}'),
  parameters?: string(name='Parameters', description='The parameters configured for the service instance.', example='{"param":"value"}'),
  payType?: string(name='PayType', description='The billing method of the instance for market. Valid values:

*   Permanent: Permanent purchase
*   Subscription: Subscription.
*   PayAsYouGo: Pay-as-you-go.
*   CustomFixTime: Merchant custom fixed duration.', example='Subscription'),
  predefinedParameterName?: string(name='PredefinedParameterName', description='The package name.', example='套餐一'),
  progress?: long(name='Progress', description='The deployment progress of the service instance. Unit: percentage.', example='90'),
  requestId?: string(name='RequestId', description='The request ID.', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-bp67acfmxazb4p****'),
  resources?: string(name='Resources', description='The resources.', example='[{"StackId": "stack-xxx"}]'),
  service?: {
    deployMetadata?: string(name='DeployMetadata', description='The storage configurations of the service. The format in which the deployment information of a service is stored varies based on the deployment type of the service. In this case, the deployment information is stored in the JSON string format.', example='{"EstimateTime":null,"SupplierDeployMetadata":{"DeployTimeout":null},"TemplateConfigs":[{"Name":"模板1","Url":"https://service-info-private.oss-cn-hangzhou.aliyuncs.com/130920852836****/template/af11ec5a-09a0-4aa7-970c-09b51e2a****.json","PredefinedParameters":[],"AllowedRegions":["cn-hangzhou"]}]}'),
    deployType?: string(name='DeployType', description='The deployment type of the service. Valid values:

*   ros: The service is deployed by using Resource Orchestration Service (ROS).
*   terraform: The service is deployed by using Terraform.
*   ack: The service is deployed by using Container Service for Kubernetes (ACK).
*   spi: The service is deployed by calling a service provider interface (SPI).
*   operation: The service is deployed by using a hosted O\\&M service.', example='ros'),
    publishTime?: string(name='PublishTime', description='The time when the service version was published.', example='2021-05-21T00:00:00Z'),
    serviceDocUrl?: string(name='ServiceDocUrl', description='The URL of the service documentation.', example='http://example.com'),
    serviceId?: string(name='ServiceId', description='The service ID.', example='service-9c8a3522528b4fe8****'),
    serviceInfos?: [ 
      {
        image?: string(name='Image', description='The URL of the service icon.', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
        locale?: string(name='Locale', description='The language of the service instance.', example='zh-CN'),
        name?: string(name='Name', description='The name of the service.', example='B数据库'),
        shortDescription?: string(name='ShortDescription', description='The description of the service.', example='B是A公司自主设计并研发的开源分布式的关系型数据库'),
      }
    ](name='ServiceInfos', description='The information about the service.'),
    serviceProductUrl?: string(name='ServiceProductUrl', description='The URL of the service page.', example='https://service-info-private.oss-cn-hangzhou.aliyuncs.com'),
    serviceType?: string(name='ServiceType', description='The type of the service. Valid values:

*   private: The service is a private service and is deployed within the account of a customer.
*   managed: The service is a fully managed service and is deployed within the account of a service provider.
*   operation: The service is a hosted O\\&M service.', example='private'),
    status?: string(name='Status', description='The status of the service. Valid values:

*   Draft
*   Submited
*   Approved
*   Online
*   Offline
*   Deleted
*   Launching
*   Beta', example='Online'),
    supplierName?: string(name='SupplierName', description='The name of the service provider.', example='A公司'),
    supplierUrl?: string(name='SupplierUrl', description='The URL of the service provider.', example='http://example.com'),
    upgradableServiceVersions?: [ string ](name='UpgradableServiceVersions', description='The service version that can be updated.'),
    upgradeMetadata?: string(name='UpgradeMetadata', description='The metadata about the upgrade.', example='{\\"Description\\":\\"开启服务升级\\",\\"SupportRollback\\":true,\\"SupportUpgradeFromVersions\\":[],\\"UpgradeComponents\\":[\\"Configuration\\",\\"Resource\\"]}'),
    version?: string(name='Version', description='The service version.', example='1'),
    versionName?: string(name='VersionName', description='The custom version name defined by the service provider.', example='1.1.0'),
  }(name='Service', description='The information about the service to which the service instance belongs.'),
  serviceInstanceId?: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-d6ab3a63ccbb4b17****'),
  serviceType?: string(name='ServiceType', description='The type of the service. Valid values:

- private: The service is a private service and is deployed within the account of a customer.
- managed: The service is a fully managed service and is deployed within the account of a service provider.
- operation: The service is a hosted O&M service.', example='private'),
  source?: string(name='Source', description='The source of the serviceInstance. Valid values:
- User
- Market
- Supplier', example='User'),
  status?: string(name='Status', description='The deploy status of the serviceInstance. Valid values:
- Created
- Deploying
- DeployedFailed
- Deployed
- Upgrading
- Deleting
- Deleted
- DeletedFailed', example='Deployed'),
  statusDetail?: string(name='StatusDetail', description='The description of the deployment state of the service instance.', example='deploy successfully'),
  supplierUid?: long(name='SupplierUid', description='The Alibaba Cloud account ID of the service provider.', example='158927391332*****'),
  tags?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tags', description='The tags.'),
  templateName?: string(name='TemplateName', description='The template name.', example='模板1'),
  updateTime?: string(name='UpdateTime', description='The time when the serviceInstance  was last updated.', example='2021-05-20T00:00:00Z'),
  userId?: long(name='UserId', description='The AliUid of the user.', example='130920852836****'),
}

model GetServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceInstanceResponseBody(name='body'),
}

async function getServiceInstance(request: GetServiceInstanceRequest): GetServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceProvisionsRequest {
  parameters?: map[string]any(name='Parameters', description='The parameters configured for the service instance.', example='{\\"RegionId\\":\\"cn-hangzhou\\",\\"ZoneId\\":\\"cn-hangzhou-g\\",\\"EcsInstanceType\\":\\"ecs.g5.large\\",\\"InstancePassword\\":\\"xxxxxxxx\\",\\"PayType\\":\\"PostPaid\\",\\"PayPeriodUnit\\":\\"Month\\",\\"PayPeriod\\":1}', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', description='The service ID.', example='service-0efc0db451794bxxxxxx', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The version of the service.', example='1', position='Query'),
  templateName?: string(name='TemplateName', description='The template name.', example='ECS', position='Query'),
  trialType?: string(name='TrialType', description='The trial policy. Valid values:

*   Trial: Trials are supported.
*   NotTrial: Trials are not supported.', example='Trial', position='Query'),
}

model GetServiceProvisionsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8C27145F-C9F4-545D-A355-DCDDAD63D548'),
  serviceProvisions?: [ 
    {
      autoEnableService?: boolean(name='AutoEnableService', description='Indicates whether automatic activation for the service is defined in the template. Valid values:

*   true: Automatic activation for the service is defined in the template.
*   false: Manual activation for the service is defined in the template.', example='true'),
      enableURL?: string(name='EnableURL', description='The URL that points to the activation page of the service.

> This parameter is returned if Status is set to Disabled.', example='https://common-buy.aliyun.com/?commodityCode=sls'),
      roleProvision?: {
        authorizationURL?: string(name='AuthorizationURL', description='The authorization URL of the RAM role.

> This parameter is returned if Created is set to false.', example='https://ram.console.aliyun.com/role/authorization?request={"Services":[{"Service":"CS","Roles":[{"RoleName":"AliyunCSManagedVKRole","TemplateId":"AliyunCSManagedVKRole"},{"RoleName":"AliyunCSDefaultRole","TemplateId":"Default"}]}],"ReturnUrl":"https://cs.console.aliyun.com/"}'),
        roles?: [ 
          {
            apiForCreation?: {
              apiName?: string(name='ApiName', description='The name of the API operation.', example='CreateServiceLinkedRole'),
              apiProductId?: string(name='ApiProductId', description='The ID of the Alibaba Cloud service to which the API operation belongs.', example='rds'),
              apiType?: string(name='ApiType', description='The type of the API operation. Valid values:

*   Open: public
*   Inner: private', example='Open'),
              parameters?: map[string]any(name='parameters', description='The ROS parameters of the cluster.', example='{ "ServiceLinkedRole": "AliyunServiceRoleForRdsPgsqlOnEcs", "RegionId": "${RegionId}" }'),
            }(name='ApiForCreation', description='The information about the API operation that is used to create the RAM role.'),
            created?: boolean(name='Created', description='Indicates whether the RAM role is created. Valid values:

*   true
*   false', example='true'),
            function?: string(name='Function', description='The purpose for which the RAM role is used. Default value: Default. A value of Default indicates that the RAM role is the default role of the service.', example='Default'),
            roleName?: string(name='RoleName', description='The name of the role.', example='AliyunCSManagedVKRole'),
          }
        ](name='Roles', description='The RAM roles of the service.'),
      }(name='RoleProvision', description='The information about the RAM roles of the service. If this parameter is empty, no RAM role is associated with the service.'),
      serviceName?: string(name='ServiceName', description='The service name.', example='CS'),
      status?: string(name='Status', description='The activation status of the service. Valid values:

*   Enabled: The service is activated.
*   Disabled: The service is not activated.
*   Unknown: The activation status of the service is unknown.', example='Enabled'),
      statusReason?: string(name='StatusReason', description='The reason why the service is in the Disabled or Unknown state.

> This parameter is returned if Status is set to Disabled or Unknown.', example='No permission'),
    }
  ](name='ServiceProvisions', description='The information about the services.'),
}

model GetServiceProvisionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceProvisionsResponseBody(name='body'),
}

async function getServiceProvisions(request: GetServiceProvisionsRequest): GetServiceProvisionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceProvisions', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceTemplateParameterConstraintsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  deployRegionId: string(name='DeployRegionId', description='The region ID of the service instance.', example='cn-hangzhou', position='Query'),
  enablePrivateVpcConnection?: boolean(name='EnablePrivateVpcConnection', description='Specifies whether to enable the private connection. Valid values:

*   true
*   false', example='true', position='Query'),
  parameters?: [ 
    {
      parameterKey?: string(name='ParameterKey', description='The name of the parameter. If you do not specify Parameters, the parameters and values in the template are used.

>  Parameters is an optional parameter. ParameterKey is required if you specify Parameters.', example='InstanceType'),
      parameterValue?: string(name='ParameterValue', description='The parameter value that is defined in the template.

>  Parameters is an optional parameter. ParameterValue is required if you specify Parameters.', example='cn-hangzhou-j'),
    }
  ](name='Parameters', description='The configuration parameters of the service instance.', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  serviceId: string(name='ServiceId', description='The service ID.', example='service-731f788406024axxxxxx', position='Query'),
  serviceInstanceId?: string(name='ServiceInstanceId', description='The service instance ID.', example='si-461ee95f46ca46xxxxxx', position='Query'),
  serviceVersion?: string(name='ServiceVersion', description='The service version.', example='1', position='Query'),
  specificationName?: string(name='SpecificationName', description='The name of the specification package.', example='套餐一', position='Query'),
  templateName: string(name='TemplateName', description='The template name.', example='模板1', position='Query'),
  trialType?: string(name='TrialType', description='The trial policy. Valid values:

*   Trial: Trials are supported.
*   NotTrial: Trials are not supported.', example='NotTrial', position='Query'),
}

model GetServiceTemplateParameterConstraintsResponseBody = {
  familyConstraints?: [ string ](name='FamilyConstraints', description='The package family constraints.'),
  parameterConstraints?: [ 
    {
      allowedValues?: [ string ](name='AllowedValues', description='The valid values of the parameter.'),
      associationParameterNames?: [ string ](name='AssociationParameterNames', description='The names of the associated parameters.'),
      behavior?: string(name='Behavior', description='The behavior of the parameter. Valid values:

*   NoLimit: No limit is imposed on the value of this parameter.
*   NotSupport: The value of this parameter cannot be queried.
*   QueryError: This parameter failed to be queried.

>  If AllowedValues is not returned, Behavior and BehaviorReason are returned, which indicate the behavior of the parameter and the reason for the behavior.', example='NoLimit'),
      behaviorReason?: string(name='BehaviorReason', description='The reason why the behavior of the parameter is returned.', example='No resource property refer to the parameter'),
      originalConstraints?: [ 
        {
          allowedValues?: [ string ](name='AllowedValues', description='The valid values of the parameter.'),
          propertyName?: string(name='PropertyName', description='The property name.', example='ZoneId'),
          resourceName?: string(name='ResourceName', description='The name of the resource that is defined in the template.', example='MyECS'),
          resourceType?: string(name='ResourceType', description='The resource type.', example='ALIYUN::ECS::InstanceGroup'),
        }
      ](name='OriginalConstraints', description='The original constraint information.'),
      parameterKey?: string(name='ParameterKey', description='The name of the parameter.', example='ZoneInfo'),
      queryErrors?: [ 
        {
          errorMessage?: string(name='ErrorMessage', description='The error message.', example='record not exist'),
          resourceName?: string(name='ResourceName', description='The resource name.', example='MyECS'),
          resourceType?: string(name='ResourceType', description='The resource type.', example='ALIYUN::ECS::InstanceGroup'),
        }
      ](name='QueryErrors', description='The error details that are returned if the request fails.'),
      type?: string(name='Type', description='The data type of the parameter.', example='String'),
    }
  ](name='ParameterConstraints', description='The constraints on the parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='449DC03D-A039-56A6-8D6F-6EBCCCE0EE2C'),
}

model GetServiceTemplateParameterConstraintsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceTemplateParameterConstraintsResponseBody(name='body'),
}

async function getServiceTemplateParameterConstraints(request: GetServiceTemplateParameterConstraintsRequest): GetServiceTemplateParameterConstraintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceTemplateParameterConstraints', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceCategoriesRequest {
}

model ListServiceCategoriesResponseBody = {
  categories?: [ string ](name='Categories', description='The category list of the service.'),
  requestId?: string(name='RequestId', description='The request ID.', example='13FE89A5-C036-56BF-A0FF-A31C59819FD7'),
}

model ListServiceCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceCategoriesResponseBody(name='body'),
}

async function listServiceCategories(request: ListServiceCategoriesRequest): ListServiceCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceCategories', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstanceLogsRequest {
  logSource?: string(name='LogSource', description='The log source. Valid values:

*   computeNest (default): logs of the deployment and upgrade of the service instance.
*   application: logs generated by the application.', example='computeNest', position='Query'),
  logstore?: string(name='Logstore', description='The Logstore. You must specify this parameter if you set LogSource to application.', example='logabc', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId: string(name='RegionId', description='The region ID. Valid values:

*   cn-hangzhou: China (Hangzhou).
*   ap-southeast-1: Singapore.', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-70a3b15bb626435b****', position='Query'),
}

model ListServiceInstanceLogsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 20.', example='20'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', description='The request ID.', example='51945B04-6AA6-410D-93BA-236E0248B104'),
  serviceInstancesLogs?: [ 
    {
      content?: string(name='Content', description='The log content.', example='Start creating service instance'),
      logType?: string(name='LogType', description='The log type. Valid values:

*   serviceInstance: log generated by the service instance.
*   resource: log generated by ROS resources.', example='serviceInstance'),
      resourceId?: string(name='ResourceId', description='The resource ID.', example='si-5c6525c0589545c3****'),
      resourceType?: string(name='ResourceType', description='The resource type.', example='ROS.Stack'),
      source?: string(name='Source', description='The source of the service instance log. Valid values:

*   ros: The log is generated by Resource Orchestration Service (ROS).
*   computeNest: The log is generated by Compute Nest.', example='ros'),
      status?: string(name='Status', description='The state of the service instance. Valid values:

*   Creating: The service instance is being created.
*   Created: The service instance is created.
*   Deploying: The service instance is being deployed.
*   Deployed: The service instance is deployed.
*   DeployedFailed: The service instance failed to be deployed.
*   Expired: The service instance expired.
*   ExtendSuccess: The service instance is renewed.
*   Upgrading: The service instance is being updated.
*   UpgradeSuccess: The service instance is updated.', example='Creating'),
      timestamp?: string(name='Timestamp', description='The timestamp of the service instance log.', example='2021-05-21T00:00:00Z'),
    }
  ](name='ServiceInstancesLogs', description='The logs of the service instance.'),
}

model ListServiceInstanceLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstanceLogsResponseBody(name='body'),
}

async function listServiceInstanceLogs(request: ListServiceInstanceLogsRequest): ListServiceInstanceLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstanceLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstanceResourcesRequest {
  expireTimeEnd?: string(name='ExpireTimeEnd', description='End time of resource usage. 
<notice>Note: Only supports querying service instances on private deployments.></notice>', example='2022-03-01T12:00:00', position='Query'),
  expireTimeStart?: string(name='ExpireTimeStart', description='Start time of resource usage. 
<notice>Note: Only supports querying service instances on private deployments.></notice>', example='2022-01-01T12:00:00', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If **NextToken** is not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbAx7BkQzyYC+ONO+WudHGKEdB0uWSY7AGnM3qCgm/Ynge7zU6NWdbj0Tegyajyqyc=', position='Query'),
  payType?: string(name='PayType', description='The billing method of the read-only instance. Valid values:

*   **Postpaid**: pay-as-you-go
*   **Prepaid**: subscription', example='Subscription', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Valid values:

*   cn-hangzhou: China (Hangzhou).
*   ap-southeast-1: Singapore.', example='cn-hangzhou', position='Query'),
  resourceARN?: [ string ](name='ResourceARN', description='The Alibaba Cloud Resource Name (ARN) of a resource.', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-d8a0cc2a1ee04dce****', position='Query'),
  serviceInstanceResourceType?: string(name='ServiceInstanceResourceType', description='Service Instance resource type，include AliyunResource and ContainerResource.', example='AliyunResource', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tag', description='The tag key and value.', position='Query'),
}

model ListServiceInstanceResourcesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 20.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='AAAAAc3HCuYhJi/wvpk4xOr0VLbAx7BkQzyYC+ONO+WudHGKEdB0uWSY7AGnM3qCgm/Ynge7zU6NWdbj0Tegyajyqyc='),
  requestId?: string(name='RequestId', description='The request ID.', example='B288A0BE-D927-4888-B0F7-B35EF84B6E6F'),
  resources?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the resource was created.', example='2022-01-01T12:00:00'),
      expireTime?: string(name='ExpireTime', description='The time when the resource expires.', example='2022-03-01T12:00:00'),
      payType?: string(name='PayType', description='The billing method. Valid values:

*   Subscription
*   PayAsYouGo', example='Subscription'),
      productCode?: string(name='ProductCode', description='The code of the cloud service.', example='rds'),
      productType?: string(name='ProductType', description='The type of the cloud service.', example='RDS'),
      renewStatus?: string(name='RenewStatus', description='The renewal state. Valid values:

*   AutoRenewal
*   ManualRenewal
*   NotRenewal', example='AutoRenewal'),
      renewalPeriod?: int32(name='RenewalPeriod', description='The renewal period.', example='1'),
      renewalPeriodUnit?: string(name='RenewalPeriodUnit', description='The unit of the renewal period. Valid values:

*   Month
*   Year', example='Month'),
      resourceARN?: string(name='ResourceARN', description='The ARN of the resource.', example='arn:acs:sag:cn-hangzhou:130920852836****:ccn/ccn-b3qf0q439sq2de****'),
      status?: string(name='Status', description='The state of the resource. Valid values:

*   running
*   waiting
*   terminated

>  This parameter is returned only for containers.', example='running'),
    }
  ](name='Resources', description='The resources.'),
}

model ListServiceInstanceResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstanceResourcesResponseBody(name='body'),
}

async function listServiceInstanceResources(request: ListServiceInstanceResourcesRequest): ListServiceInstanceResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstanceResources', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceInstancesRequest {
  filter?: [ 
    {
      name?: string(name='Name', description='The parameter name of the filter. You can specify one or more parameter names to query services. Valid values:

- Name：Query by service name.
- ServiceInstanceName：Query by service  instance name.
- ServiceInstanceId：Query by service  instance ID.
- ServiceId：Query by service ID.
- Version：Query by service version.
- Status：Query by service status.
- DeployType: Query by service deployType.
- ServiceType：Query by service deployType.', example='ServiceInstanceId'),
      value?: [ string ](name='Value', description='The parameter values of the filter.'),
    }
  ](name='Filter', description='The filter.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries page. Valid values: 1 to 100. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='BBBAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-bp67acfmxazb4p****', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='key1'),
      value?: string(name='Value', description='The tag value.', example='value1'),
    }
  ](name='Tag', description='The tag key and value.', position='Query'),
}

model ListServiceInstancesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 20.', example='20'),
  nextToken?: string(name='NextToken', description='A pagination token.', example='AAAAAfu+XtuBE55iRLHEYYuojI4='),
  requestId?: string(name='RequestId', description='The request ID.', example='E50287CB-AABF-4877-92C0-289B339A1546'),
  serviceInstances?: [ 
    {
      bizStatus?: string(name='BizStatus', description='The business state of the service instance. Valid values:

*   Normal
*   Renewing
*   RenewFailed
*   Expired', example='Normal'),
      createTime?: string(name='CreateTime', description='The time when the service instance was created.', example='2021-05-20T00:00:00Z'),
      enableInstanceOps?: boolean(name='EnableInstanceOps', description='Indicates whether the service instance supports the hosted O\\&M feature. Valid values:

*   true
*   false', example='true'),
      endTime?: string(name='EndTime', description='The time when the service instance expires.', example='2022-01-01T12:00:00'),
      marketInstanceId?: string(name='MarketInstanceId', description='The ID of the Alibaba Cloud Marketplace instance.', example='5827****'),
      name?: string(name='Name', description='The name of the service instance.', example='TestName'),
      operatedServiceInstanceId?: string(name='OperatedServiceInstanceId', description='The ID of the managed service instance.', example='si-d6ab3a63ccbb4b17****'),
      operationEndTime?: string(name='OperationEndTime', description='The end of the time range during which hosted O\\&M is implemented.', example='2022-01-28T06:48:56Z'),
      operationStartTime?: string(name='OperationStartTime', description='The beginning of the time range during which hosted O\\&M is implemented.', example='2021-12-29T06:48:56Z'),
      orderId?: string(name='OrderId', description='The order ID.', example='2306175xxxxxxxx'),
      outputs?: string(name='Outputs', description='The information returned after the service instance is created.', example='{"managementUrl": "http://xx.xx"}'),
      parameters?: string(name='Parameters', description='The parameters of the service instance.', example='{"param":"value"}'),
      payType?: string(name='PayType', description='The billing method. Valid values:

*   Permanent: Once you purchase the service, you can use it permanently.
*   Subscription: You purchase the service from Alibaba Cloud Marketplace and are charged for the service on a subscription basis.
*   PayAsYouGo: You purchase the service from Alibaba Cloud Marketplace and are charged for the service on a pay-as-you-go basis.
*   CustomFixTime: You are charged for the service based on a custom duration fixed by the service provider.', example='Subscription'),
      progress?: long(name='Progress', description='The deployment progress of the service instance, in percentage.', example='90'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aekz6scpcxxxxxx'),
      resources?: string(name='Resources', description='The resources.', example='[{"StackId": "stack-xxx"}]'),
      service?: {
        commodity?: {
          saasBoostMetadata?: string(name='SaasBoostMetadata', description='The configuration metadata related to SaaS Boost.', example='{ // Specifies whether to associate the service with the SaaS Boost commodity. Default value: false. "Enabled":true/false // The public endpoint of the SaaS Boost instance. "PublicAccessUrl":"https://example.com" }'),
          type?: string(name='Type', description='The platform type. Valid values:

*   marketplace: Alibaba Cloud Marketplace.
*   Css: Lingxiao.
*   SaasBoost: SaaS Boost.', example='Marketplace'),
        }(name='Commodity', description='The commodity details.'),
        deployType?: string(name='DeployType', description='The deployment type of the service. Valid values:

*   ros: The service is deployed by using Resource Orchestration Service (ROS).
*   terraform: The service is deployed by using Terraform.
*   ack: The service is deployed by using Alibaba Cloud Container Service for Kubernetes (ACK).
*   spi: The service is deployed by calling the Service Provider Interface (SPI).
*   operation: The service is deployed by using a hosted O\\&M service.', example='ros'),
        publishTime?: string(name='PublishTime', description='The time when the service was published.', example='2021-05-21T00:00:00Z'),
        serviceId?: string(name='ServiceId', description='The service ID.', example='service-0e6fca6a51a54420****'),
        serviceInfos?: [ 
          {
            image?: string(name='Image', description='The URL of the service icon.', example='https://example.com/service-image/c1c4a559-cc60-4af1-b976-98f356602462.png'),
            locale?: string(name='Locale', description='The language of the service instance.', example='zh-CN'),
            name?: string(name='Name', description='The name of the service.', example='wordpress'),
            shortDescription?: string(name='ShortDescription', description='The description of the service.', example='B是A公司自主设计并研发的开源分布式的关系型数据库'),
          }
        ](name='ServiceInfos', description='The information about the service.'),
        serviceType?: string(name='ServiceType', description='The type of the service. Valid values:

*   private: The service is a private service and is deployed within the account of a customer.
*   managed: The service is a fully managed service and is deployed within the account of a service provider.
*   operation: The service is a hosted O\\&M service.', example='private'),
        status?: string(name='Status', description='The service state.', example='Online'),
        supplierName?: string(name='SupplierName', description='The name of the service provider.', example='Alibaba Cloud'),
        supplierUrl?: string(name='SupplierUrl', description='The URL of the service provider.', example='http://example.com'),
        version?: string(name='Version', description='The service version.', example='1.0'),
        versionName?: string(name='VersionName', description='The custom version name defined by the service provider.', example='1.1.0'),
      }(name='Service', description='The services.'),
      serviceInstanceId?: string(name='ServiceInstanceId', description='The service instance ID.', example='si-d6ab3a63ccbb4b17****'),
      serviceType?: string(name='ServiceType', description='The type of the service. Valid values:

*   private: The service is a private service and is deployed within the account of a customer.
*   managed: The service is a fully managed service and is deployed within the account of a service provider.
*   operation: The service is a hosted O\\&M service.
*   poc: The service is a trial service.', example='private'),
      source?: string(name='Source', description='The source from which the service instance is created.', example='Supplier'),
      status?: string(name='Status', description='The state of the service instance. Valid values:

*   Created
*   Deploying
*   DeployedFailed
*   Deployed
*   Upgrading
*   Deleting
*   Deleted
*   DeletedFailed', example='Deployed'),
      statusDetail?: string(name='StatusDetail', description='The description of the deployment of the service instance.', example='deploy successfully'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='key1'),
          value?: string(name='Value', description='The tag value.', example='value1'),
        }
      ](name='Tags', description='The custom tags.'),
      templateName?: string(name='TemplateName', description='The template name.', example='模板1'),
      updateTime?: string(name='UpdateTime', description='The time when the service instance was updated.', example='2021-05-20T00:00:00Z'),
    }
  ](name='ServiceInstances', description='The information about the service instances.'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListServiceInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceInstancesResponseBody(name='body'),
}

async function listServiceInstances(request: ListServiceInstancesRequest): ListServiceInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceUsagesRequest {
  filter?: [ 
    {
      name?: string(name='Name', example='ServiceId'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAWns8w4MmhzeptXVRG0PUEU=', position='Query'),
}

model ListServiceUsagesResponseBody = {
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='AAAAAYChudnQUoBH+mGWFpb6oP0='),
  requestId?: string(name='RequestId', example='18AD0960-A9FE-1AC8-ADF8-22131Fxxxxxx'),
  serviceUsages?: [ 
    {
      comments?: string(name='Comments'),
      createTime?: string(name='CreateTime', example='2022-05-25T02:02:02Z'),
      serviceId?: string(name='ServiceId', example='service-c9f36ec6d19b4exxxxxx'),
      serviceName?: string(name='ServiceName'),
      status?: string(name='Status', example='Submitted'),
      supplierName?: string(name='SupplierName'),
      updateTime?: string(name='UpdateTime', example='2022-05-25T02:02:02Z'),
      userAliUid?: long(name='UserAliUid', example='127383705958xxxx'),
      userInformation?: map[string]string(name='UserInformation'),
    }
  ](name='ServiceUsages'),
}

model ListServiceUsagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceUsagesResponseBody(name='body'),
}

async function listServiceUsages(request: ListServiceUsagesRequest): ListServiceUsagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceUsages', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  nextToken?: string(name='NextToken', example='AAAAAfu+XtuBE55iRLHEYYuojI4=', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', example='service', position='Query'),
}

model ListTagKeysResponseBody = {
  keys?: [ string ](name='Keys'),
  nextToken?: string(name='NextToken', example='AAAAAZ9FmxgN6wKfeK/GOKRnnjU='),
  requestId?: string(name='RequestId', example='8872ACE6-0297-54A4-8AAD-3A8623EC6C5D'),
}

model ListTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagKeysResponseBody(name='body'),
}

async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  key: string(name='Key', example='ECS', position='Query'),
  nextToken?: string(name='NextToken', example='AAAAAfmTH5rcd4YFfob4P0uDAAc=', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', example='service', position='Query'),
}

model ListTagValuesResponseBody = {
  nextToken?: string(name='NextToken', example='AAAAAVz7BQqj2xtiNSC3d3RAD38='),
  requestId?: string(name='RequestId', example='0631D623-D917-1C2D-ACD6-5B3B19XXXXXX'),
  values?: [ string ](name='Values'),
}

model ListTagValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagValuesResponseBody(name='body'),
}

async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model RestartServiceInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId: string(name='RegionId', description='The region ID where the service instance resides.', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model RestartServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='13FE89A5-C036-56BF-A0FF-A31C59819FD7'),
}

model RestartServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartServiceInstanceResponseBody(name='body'),
}

async function restartServiceInstance(request: RestartServiceInstanceRequest): RestartServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model StartServiceInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId: string(name='RegionId', description='The region ID where the service instance resides.', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model StartServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='464C8CB6-A548-5206-B83C-D32A8E43EC21'),
}

model StartServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartServiceInstanceResponseBody(name='body'),
}

async function startServiceInstance(request: StartServiceInstanceRequest): StartServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model StopServiceInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  regionId: string(name='RegionId', description='The region where the service instance resides.', example='cn-hangzhou', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', description='The ID of the service instance.', example='si-b58c874912fc4294****', position='Query'),
}

model StopServiceInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
}

model StopServiceInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopServiceInstanceResponseBody(name='body'),
}

async function stopServiceInstance(request: StopServiceInstanceRequest): StopServiceInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopServiceInstance', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='service', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='Key1'),
      value?: string(name='Value', example='Value1'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='06BF8F22-02DC-4750-83DF-3FFC11C065EA'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='service', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='06BF8F22-02DC-4750-83DF-3FFC11C065EA'),
}

model UnTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnTagResourcesResponseBody(name='body'),
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceInstanceSpecRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  commodity?: {
    autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   **true**
*   **false**', example='true'),
  }(name='Commodity', description='The information about the order placed in Alibaba Cloud Marketplace. You do not need to specify this parameter if the service is not published in Alibaba Cloud Marketplace or uses the pay-as-you-go billing method.', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run for the request to check information such as the permissions and instance status. Valid values:

*   **true: performs a dry run for the request, but does not create a service instance.**
*   **false: performs a dry run for the request, and creates a service instance if the request passes the dry run.**', example='true', position='Query'),
  enableUserPrometheus?: boolean(name='EnableUserPrometheus', description='Specifies whether to enable Prometheus on the customer side. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  operationName?: string(name='OperationName', description='The name of the configuration update operation.', example='package modify', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The configuration parameters of the service instance.', example='{
  "InstanceType": "ecs.g8ise.2xlarge"
}', shrink='json', position='Query'),
  predefinedParametersName?: string(name='PredefinedParametersName', description='The name of the specification package.', example='package One', position='Query'),
  serviceInstanceId: string(name='ServiceInstanceId', description='The service instance ID.', example='si-d6ab3a63ccbb4b17****', position='Query'),
}

model UpdateServiceInstanceSpecResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='23396265896****'),
  requestId?: string(name='RequestId', description='The request ID.', example='06BF8F22-02DC-4750-83DF-3FFC11C065EA'),
}

model UpdateServiceInstanceSpecResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceInstanceSpecResponseBody(name='body'),
}

async function updateServiceInstanceSpec(request: UpdateServiceInstanceSpecRequest): UpdateServiceInstanceSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceInstanceSpec', 'POST', '/', 'json', false, 'json', request);
}

model UpdateServiceUsageRequest {
  clientToken?: string(name='ClientToken', example='AAAAAYChudnQUoBH+mGWFpb6oP0=', position='Query'),
  serviceId: string(name='ServiceId', example='service-39f4f251e94843xxxxxx', position='Query'),
  userInformation?: map[string]string(name='UserInformation', shrink='json', position='Query'),
}

model UpdateServiceUsageResponseBody = {
  requestId?: string(name='RequestId', example='4DB0F536-B3BE-4F0D-BD29-E83FB56D550C'),
}

model UpdateServiceUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceUsageResponseBody(name='body'),
}

async function updateServiceUsage(request: UpdateServiceUsageRequest): UpdateServiceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceUsage', 'POST', '/', 'json', false, 'json', request);
}

