/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Baas';
  @version = '2018-07-31';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'baas.aliyuncs.com',
    'cn-beijing' = 'baas.aliyuncs.com',
    'cn-zhangjiakou' = 'baas.aliyuncs.com',
    'cn-huhehaote' = 'baas.aliyuncs.com',
    'cn-shanghai' = 'baas.aliyuncs.com',
    'cn-shenzhen' = 'baas.aliyuncs.com',
    'cn-hongkong' = 'baas.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'baas.ap-southeast-1.aliyuncs.com',
    'ap-northeast-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'us-west-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'eu-central-1' = 'baas.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'baas.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AntChainPurposeResponse {
  chainPurposeExtend?: string(name='ChainPurposeExtend'),
  chainPurposeItem?: string(name='ChainPurposeItem'),
  createTime?: string(name='CreateTime'),
  purpose?: string(name='Purpose'),
  recordList?: [
    ChainPurpose
  ](name='RecordList'),
  status?: string(name='Status'),
}

model AntChainPurposeResponseAli {
  recordList?: [
    ChainPurposeInfoAli
  ](name='RecordList'),
  status?: string(name='Status'),
}

model ChainPurpose {
  extend?: boolean(name='Extend'),
  id?: string(name='Id'),
  item?: boolean(name='Item'),
  key?: string(name='Key'),
  name?: string(name='Name'),
  purposeItem?: string(name='PurposeItem'),
  status?: string(name='Status'),
  time?: string(name='Time'),
}

model ChainPurposeInfoAli {
  chainPurposeExtend?: string(name='ChainPurposeExtend'),
  chainPurposeItem?: string(name='ChainPurposeItem'),
  id?: string(name='Id'),
  key?: string(name='Key'),
  purpose?: string(name='Purpose'),
  status?: string(name='Status'),
  time?: string(name='Time'),
}

model ChainPurposeListAli {
  extend?: boolean(name='Extend', example='false'),
  id?: string(name='Id', example='10001'),
  item?: boolean(name='Item', example='false'),
  key?: string(name='Key', example='FIN'),
  purpose?: string(name='Purpose', example='金融'),
}

model CheckPointStructBody {
  errorCount?: string(name='ErrorCount'),
  height?: string(name='Height'),
  index?: string(name='Index'),
  lastError?: string(name='LastError'),
  totalCount?: string(name='TotalCount'),
  type?: string(name='Type'),
}

model CommonResponsePageableStructBody {
  current?: string(name='Current'),
  list?: [
    TriggerLogDTOStructBody
  ](name='List'),
  pageSize?: string(name='PageSize'),
  total?: string(name='Total'),
}

model PositionStructBody {
  errorCount?: string(name='ErrorCount'),
  height?: string(name='Height'),
  index?: string(name='Index'),
  lastError?: string(name='LastError'),
  type?: string(name='Type'),
}

model TriggerDTOStructBody {
  checkpoint?: CheckPointStructBody(name='Checkpoint'),
  createTime?: string(name='CreateTime'),
  errorMessage?: string(name='ErrorMessage'),
  name?: string(name='Name'),
  option?: string(name='Option'),
  pendingErrorLogs?: string(name='PendingErrorLogs'),
  source?: string(name='Source'),
  status?: string(name='Status'),
  type?: string(name='Type'),
}

model TriggerLogDTOStructBody {
  createTime?: string(name='CreateTime'),
  modifyTime?: string(name='ModifyTime'),
  position?: PositionStructBody(name='Position'),
  status?: string(name='Status'),
  uuid?: string(name='Uuid'),
}

model AcceptEthereumInvitationRequest {
  regionId?: string(name='RegionId', position='Host'),
  code: string(name='Code', position='Body'),
  token: string(name='Token', position='Body'),
}

model AcceptEthereumInvitationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model AcceptEthereumInvitationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptEthereumInvitationResponseBody(name='body'),
}

async function acceptEthereumInvitation(request: AcceptEthereumInvitationRequest): AcceptEthereumInvitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptEthereumInvitation', 'POST', '/', 'json', true, 'form', request);
}

model AcceptInvitationRequest {
  code: string(name='Code', example='bank', position='Body'),
  isAccepted?: boolean(name='IsAccepted', example='true', position='Body'),
}

model AcceptInvitationResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='3240E00A-F7B6-4B27-B8B9-E3F459071376'),
  success?: boolean(name='Success', example='true'),
}

model AcceptInvitationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptInvitationResponseBody(name='body'),
}

async function acceptInvitation(request: AcceptInvitationRequest): AcceptInvitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptInvitation', 'POST', '/', 'json', true, 'form', request);
}

model AddAntChainSubnetMemberCheckRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
}

model AddAntChainSubnetMemberCheckResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    consortiumMemberInfoList?: [ 
      {
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
      }
    ](name='ConsortiumMemberInfoList'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model AddAntChainSubnetMemberCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAntChainSubnetMemberCheckResponseBody(name='body'),
}

async function addAntChainSubnetMemberCheck(request: AddAntChainSubnetMemberCheckRequest): AddAntChainSubnetMemberCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAntChainSubnetMemberCheck', 'POST', '/', 'json', true, 'form', request);
}

model AddAntChainSubnetNodeCheckRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
}

model AddAntChainSubnetNodeCheckResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      nodeId?: string(name='NodeId'),
      nodeName?: string(name='NodeName'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model AddAntChainSubnetNodeCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAntChainSubnetNodeCheckResponseBody(name='body'),
}

async function addAntChainSubnetNodeCheck(request: AddAntChainSubnetNodeCheckRequest): AddAntChainSubnetNodeCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAntChainSubnetNodeCheck', 'POST', '/', 'json', true, 'form', request);
}

model AddEthereumNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  ethereumId: string(name='EthereumId', position='Body'),
  externalNode?: boolean(name='ExternalNode', position='Body'),
  nodeName?: string(name='NodeName', position='Body'),
}

model AddEthereumNodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    ethereumId?: string(name='EthereumId'),
    ethereumName?: string(name='EthereumName'),
    id?: string(name='Id'),
    networkId?: string(name='NetworkId'),
    nodeName?: string(name='NodeName'),
    publicIp?: string(name='PublicIp'),
    regionId?: string(name='RegionId'),
    rpcPort?: int32(name='RpcPort'),
    state?: string(name='State'),
    wsPort?: int32(name='WsPort'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model AddEthereumNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddEthereumNodeResponseBody(name='body'),
}

async function addEthereumNode(request: AddEthereumNodeRequest): AddEthereumNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddEthereumNode', 'POST', '/', 'json', true, 'form', request);
}

model AddFabricExternalOrganizationToChannelRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  description?: string(name='Description', position='Body'),
  joinRequest: string(name='JoinRequest', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model AddFabricExternalOrganizationToChannelResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    content?: {
      addedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='AddedOrganizations'),
      chaincodeSpecPkg?: {
        cs?: {
          input?: string(name='Input'),
          name?: string(name='Name'),
          path?: string(name='Path'),
          type?: int32(name='Type'),
          version?: string(name='Version'),
        }(name='Cs'),
        policy?: string(name='Policy'),
        sha256?: string(name='Sha256'),
      }(name='ChaincodeSpecPkg'),
      ordererConfig?: {
        batchTimeout?: string(name='BatchTimeout'),
        maxMessageCount?: int32(name='MaxMessageCount'),
        preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      }(name='OrdererConfig'),
      raw?: string(name='Raw'),
      removedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='RemovedOrganizations'),
      rwSets?: string(name='RwSets'),
    }(name='Content'),
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model AddFabricExternalOrganizationToChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFabricExternalOrganizationToChannelResponseBody(name='body'),
}

async function addFabricExternalOrganizationToChannel(request: AddFabricExternalOrganizationToChannelRequest): AddFabricExternalOrganizationToChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFabricExternalOrganizationToChannel', 'POST', '/', 'json', true, 'form', request);
}

model AddFabricOrganizationToExternalChannelRequest {
  regionId?: string(name='RegionId', position='Host'),
  joinResponse: string(name='JoinResponse', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model AddFabricOrganizationToExternalChannelResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      m?: int32(name='M'),
      n?: int32(name='N'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model AddFabricOrganizationToExternalChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFabricOrganizationToExternalChannelResponseBody(name='body'),
}

async function addFabricOrganizationToExternalChannel(request: AddFabricOrganizationToExternalChannelRequest): AddFabricOrganizationToExternalChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFabricOrganizationToExternalChannel', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  uploadReq?: string(name='UploadReq', position='Body'),
}

model ApplyAntChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyAntChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAntChainResponseBody(name='body'),
}

async function applyAntChain(request: ApplyAntChainRequest): ApplyAntChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChain', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  uploadReq: string(name='UploadReq', position='Body'),
}

model ApplyAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyAntChainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAntChainCertificateResponseBody(name='body'),
}

async function applyAntChainCertificate(request: ApplyAntChainCertificateRequest): ApplyAntChainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChainCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainCertificateWithKeyAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  commonName: string(name='CommonName', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  countryName: string(name='CountryName', position='Body'),
  localityName: string(name='LocalityName', position='Body'),
  organizationName: string(name='OrganizationName', position='Body'),
  organizationUnitName: string(name='OrganizationUnitName', position='Body'),
  password: string(name='Password', position='Body'),
  stateOrProvinceName: string(name='StateOrProvinceName', position='Body'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    downloadPath?: {
      caCrtUrl?: string(name='CaCrtUrl'),
      clientCrtUrl?: string(name='ClientCrtUrl'),
      sdkUrl?: string(name='SdkUrl'),
      trustCaUrl?: string(name='TrustCaUrl'),
    }(name='DownloadPath'),
    privateKey?: string(name='PrivateKey'),
  }(name='Result'),
}

model ApplyAntChainCertificateWithKeyAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAntChainCertificateWithKeyAutoCreationResponseBody(name='body'),
}

async function applyAntChainCertificateWithKeyAutoCreation(request: ApplyAntChainCertificateWithKeyAutoCreationRequest): ApplyAntChainCertificateWithKeyAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChainCertificateWithKeyAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model ApplyAntChainWithKeyAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  commonName: string(name='CommonName', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  countryName: string(name='CountryName', position='Body'),
  localityName: string(name='LocalityName', position='Body'),
  organizationName: string(name='OrganizationName', position='Body'),
  organizationUnitName: string(name='OrganizationUnitName', position='Body'),
  password: string(name='Password', position='Body'),
  stateOrProvinceName: string(name='StateOrProvinceName', position='Body'),
}

model ApplyAntChainWithKeyAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    downloadPath?: {
      caCrtUrl?: string(name='CaCrtUrl'),
      clientCrtUrl?: string(name='ClientCrtUrl'),
      sdkUrl?: string(name='SdkUrl'),
      trustCaUrl?: string(name='TrustCaUrl'),
    }(name='DownloadPath'),
    privateKey?: string(name='PrivateKey'),
  }(name='Result'),
}

model ApplyAntChainWithKeyAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyAntChainWithKeyAutoCreationResponseBody(name='body'),
}

async function applyAntChainWithKeyAutoCreation(request: ApplyAntChainWithKeyAutoCreationRequest): ApplyAntChainWithKeyAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyAntChainWithKeyAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model ApplyBlockchainRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  accountPubKey?: string(name='AccountPubKey', position='Body'),
  accountRecoverPubKey?: string(name='AccountRecoverPubKey', position='Body'),
  blockchain?: string(name='Blockchain', position='Body'),
  uploadReq?: string(name='UploadReq', position='Body'),
}

model ApplyBlockchainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyBlockchainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyBlockchainResponseBody(name='body'),
}

async function applyBlockchain(request: ApplyBlockchainRequest): ApplyBlockchainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyBlockchain', 'POST', '/', 'json', true, 'form', request);
}

model ApplyBlockchainWithKeyAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  commonName?: string(name='CommonName', position='Body'),
  countryName?: string(name='CountryName', position='Body'),
  localityName?: string(name='LocalityName', position='Body'),
  organizationName?: string(name='OrganizationName', position='Body'),
  organizationUnitName?: string(name='OrganizationUnitName', position='Body'),
  password?: string(name='Password', position='Body'),
  stateOrProvinceName?: string(name='StateOrProvinceName', position='Body'),
}

model ApplyBlockchainWithKeyAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    downloadPath?: {
      bizviewUrl?: string(name='BizviewUrl'),
      certUrl?: string(name='CertUrl'),
      sdkUrl?: string(name='SdkUrl'),
    }(name='DownloadPath'),
    privateKey?: string(name='PrivateKey'),
  }(name='Result'),
}

model ApplyBlockchainWithKeyAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyBlockchainWithKeyAutoCreationResponseBody(name='body'),
}

async function applyBlockchainWithKeyAutoCreation(request: ApplyBlockchainWithKeyAutoCreationRequest): ApplyBlockchainWithKeyAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyBlockchainWithKeyAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model ApplyPublicAntChainRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  uploadReq?: string(name='UploadReq', position='Body'),
}

model ApplyPublicAntChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ApplyPublicAntChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyPublicAntChainResponseBody(name='body'),
}

async function applyPublicAntChain(request: ApplyPublicAntChainRequest): ApplyPublicAntChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyPublicAntChain', 'POST', '/', 'json', true, 'form', request);
}

model ApplyPublicAntChainWithKeyAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  commonName?: string(name='CommonName', position='Body'),
  countryName?: string(name='CountryName', position='Body'),
  localityName?: string(name='LocalityName', position='Body'),
  organizationName?: string(name='OrganizationName', position='Body'),
  organizationUnitName?: string(name='OrganizationUnitName', position='Body'),
  password?: string(name='Password', position='Body'),
  stateOrProvinceName?: string(name='StateOrProvinceName', position='Body'),
}

model ApplyPublicAntChainWithKeyAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    downloadPath?: {
      caCrtUrl?: string(name='CaCrtUrl'),
      clientCrtUrl?: string(name='ClientCrtUrl'),
      sdkUrl?: string(name='SdkUrl'),
      trustCaUrl?: string(name='TrustCaUrl'),
    }(name='DownloadPath'),
    privateKey?: string(name='PrivateKey'),
  }(name='Result'),
}

model ApplyPublicAntChainWithKeyAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyPublicAntChainWithKeyAutoCreationResponseBody(name='body'),
}

async function applyPublicAntChainWithKeyAutoCreation(request: ApplyPublicAntChainWithKeyAutoCreationRequest): ApplyPublicAntChainWithKeyAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyPublicAntChainWithKeyAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model ApproveEthereumInviteeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', position='Body'),
  invitee: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Invitee', position='Body'),
}

model ApproveEthereumInviteeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model ApproveEthereumInviteeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveEthereumInviteeResponseBody(name='body'),
}

async function approveEthereumInvitee(request: ApproveEthereumInviteeRequest): ApproveEthereumInviteeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveEthereumInvitee', 'POST', '/', 'json', true, 'form', request);
}

model ApproveFabricChaincodeDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId?: string(name='ChaincodeId', position='Body'),
  chaincodePackageId?: string(name='ChaincodePackageId', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model ApproveFabricChaincodeDefinitionResponseBody = {
  chaincodeDefinitionId?: string(name='ChaincodeDefinitionId'),
  chaincodePackageId?: string(name='ChaincodePackageId'),
  errorCode?: int32(name='ErrorCode'),
  initRequired?: boolean(name='InitRequired'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    name?: string(name='Name'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
    version?: string(name='Version'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ApproveFabricChaincodeDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApproveFabricChaincodeDefinitionResponseBody(name='body'),
}

async function approveFabricChaincodeDefinition(request: ApproveFabricChaincodeDefinitionRequest): ApproveFabricChaincodeDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApproveFabricChaincodeDefinition', 'POST', '/', 'json', true, 'form', request);
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  phoneList: map[string]any(name='PhoneList', shrink='json', position='Body'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function batchAddAntChainMiniAppQRCodeAuthorizedUsers(request: BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest): BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddAntChainMiniAppQRCodeAuthorizedUsers', 'POST', '/', 'json', true, 'form', request);
}

model BindFabricManagementChaincodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', position='Body'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model BindFabricManagementChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    input?: string(name='Input'),
    name?: string(name='Name'),
    path?: long(name='Path'),
    type?: int32(name='Type'),
    version?: string(name='Version'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model BindFabricManagementChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindFabricManagementChaincodeResponseBody(name='body'),
}

async function bindFabricManagementChaincode(request: BindFabricManagementChaincodeRequest): BindFabricManagementChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindFabricManagementChaincode', 'POST', '/', 'json', true, 'form', request);
}

model CheckConsortiumDomainRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domainCode: string(name='DomainCode', example='bank', position='Body'),
}

model CheckConsortiumDomainResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='CD264CC8-B892-4CDC-BD31-7D179EE6E396'),
  result?: {
    domain?: string(name='Domain', example='bank'),
    prompt?: string(name='Prompt', example='OK'),
    valid?: boolean(name='Valid', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CheckConsortiumDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckConsortiumDomainResponseBody(name='body'),
}

async function checkConsortiumDomain(request: CheckConsortiumDomainRequest): CheckConsortiumDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckConsortiumDomain', 'POST', '/', 'json', true, 'form', request);
}

model CheckOrganizationDomainRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  domain?: string(name='Domain', example='bank', position='Body'),
  domainCode?: string(name='DomainCode', example='bank', position='Body'),
}

model CheckOrganizationDomainResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='CD264CC8-B892-4CDC-BD31-7D179EE6E396'),
  result?: {
    domain?: string(name='Domain', example='bank'),
    prompt?: string(name='Prompt', example='OK'),
    valid?: boolean(name='Valid', example='true'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CheckOrganizationDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckOrganizationDomainResponseBody(name='body'),
}

async function checkOrganizationDomain(request: CheckOrganizationDomainRequest): CheckOrganizationDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckOrganizationDomain', 'POST', '/', 'json', true, 'form', request);
}

model ConfirmConsortiumMemberRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Query'),
  organization: [ 
    {
      id?: string(name='Id', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
}

model ConfirmConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='50B3ACF3-CE12-433C-A834-9E8C657A4934'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmConsortiumMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ConfirmConsortiumMemberResponseBody(name='body'),
}

async function confirmConsortiumMember(request: ConfirmConsortiumMemberRequest): ConfirmConsortiumMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmConsortiumMember', 'POST', '/', 'json', false, 'json', request);
}

model CopyAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectDescription?: string(name='ProjectDescription', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  projectName: string(name='ProjectName', position='Body'),
  projectVersion: string(name='ProjectVersion', position='Body'),
}

model CopyAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    createTime?: long(name='CreateTime'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
    updateTime?: long(name='UpdateTime'),
  }(name='Result'),
}

model CopyAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyAntChainContractProjectResponseBody(name='body'),
}

async function copyAntChainContractProject(request: CopyAntChainContractProjectRequest): CopyAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateAccessTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  accessTokenLifetime: string(name='AccessTokenLifetime', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  refreshTokenLifetime: string(name='RefreshTokenLifetime', position='Body'),
  scope: string(name='Scope', position='Body'),
}

model CreateAccessTokenResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    accessToken?: string(name='AccessToken'),
    expiresIn?: long(name='ExpiresIn'),
    refreshToken?: string(name='RefreshToken'),
    tokenType?: string(name='TokenType'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateAccessTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccessTokenResponseBody(name='body'),
}

async function createAccessToken(request: CreateAccessTokenRequest): CreateAccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccessToken', 'POST', '/', 'json', true, 'form', request);
}

model CreateAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  accountPubKey?: string(name='AccountPubKey', position='Body'),
  accountRecoverPubKey?: string(name='AccountRecoverPubKey', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
}

model CreateAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountResponseBody(name='body'),
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccount', 'POST', '/', 'json', true, 'form', request);
}

model CreateAccountWithKeyPairAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  password?: string(name='Password', position='Body'),
}

model CreateAccountWithKeyPairAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accountPrivateKey?: string(name='AccountPrivateKey'),
    accountPublicKey?: string(name='AccountPublicKey'),
    accountRecoverPrivateKey?: string(name='AccountRecoverPrivateKey'),
    accountRecoverPublicKey?: string(name='AccountRecoverPublicKey'),
  }(name='Result'),
}

model CreateAccountWithKeyPairAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAccountWithKeyPairAutoCreationResponseBody(name='body'),
}

async function createAccountWithKeyPairAutoCreation(request: CreateAccountWithKeyPairAutoCreationRequest): CreateAccountWithKeyPairAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAccountWithKeyPairAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainName: string(name='AntChainName', position='Body'),
  blockchainRegionId: string(name='BlockchainRegionId', position='Body'),
  cipherSuit: string(name='CipherSuit', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  liveTime: int32(name='LiveTime', position='Body'),
  merkleTreeSuit: string(name='MerkleTreeSuit', position='Body'),
  nodeNum: int32(name='NodeNum', position='Body'),
  resourceSize: int32(name='ResourceSize', position='Body'),
  tlsAlgo: string(name='TlsAlgo', position='Body'),
}

model CreateAntChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
  }(name='Result'),
}

model CreateAntChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainResponseBody(name='body'),
}

async function createAntChain(request: CreateAntChainRequest): CreateAntChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChain', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  accountPubKey?: string(name='AccountPubKey', position='Body'),
  accountRecoverPubKey?: string(name='AccountRecoverPubKey', position='Body'),
  antChainId?: string(name='AntChainId', position='Body'),
}

model CreateAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    account?: string(name='Account'),
    antChainId?: string(name='AntChainId'),
  }(name='Result'),
}

model CreateAntChainAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainAccountResponseBody(name='body'),
}

async function createAntChainAccount(request: CreateAntChainAccountRequest): CreateAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainAccountWithKeyPairAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  antChainId?: string(name='AntChainId', position='Body'),
  password?: string(name='Password', position='Body'),
  recoverPassword?: string(name='RecoverPassword', position='Body'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    account?: string(name='Account'),
    accountPrivateKey?: string(name='AccountPrivateKey'),
    accountPublicKey?: string(name='AccountPublicKey'),
    accountRecoverPrivateKey?: string(name='AccountRecoverPrivateKey'),
    accountRecoverPublicKey?: string(name='AccountRecoverPublicKey'),
    antChainId?: string(name='AntChainId'),
  }(name='Result'),
}

model CreateAntChainAccountWithKeyPairAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainAccountWithKeyPairAutoCreationResponseBody(name='body'),
}

async function createAntChainAccountWithKeyPairAutoCreation(request: CreateAntChainAccountWithKeyPairAutoCreationRequest): CreateAntChainAccountWithKeyPairAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainAccountWithKeyPairAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumDescription?: string(name='ConsortiumDescription', position='Body'),
  consortiumName: string(name='ConsortiumName', position='Body'),
}

model CreateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
  }(name='Result'),
}

model CreateAntChainConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainConsortiumResponseBody(name='body'),
}

async function createAntChainConsortium(request: CreateAntChainConsortiumRequest): CreateAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainContractContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content?: string(name='Content', position='Body'),
  contentName: string(name='ContentName', position='Body'),
  isDirectory: boolean(name='IsDirectory', position='Body'),
  parentContentId?: string(name='ParentContentId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model CreateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    content?: string(name='Content'),
    contentId?: string(name='ContentId'),
    contentName?: string(name='ContentName'),
    createTime?: string(name='CreateTime'),
    isDirectory?: boolean(name='IsDirectory'),
    parentContentId?: string(name='ParentContentId'),
    projectId?: string(name='ProjectId'),
    updateTime?: string(name='UpdateTime'),
  }(name='Result'),
}

model CreateAntChainContractContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainContractContentResponseBody(name='body'),
}

async function createAntChainContractContent(request: CreateAntChainContractContentRequest): CreateAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model CreateAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  projectDescription?: string(name='ProjectDescription', position='Body'),
  projectName: string(name='ProjectName', position='Body'),
  projectVersion: string(name='ProjectVersion', position='Body'),
}

model CreateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    createTime?: long(name='CreateTime'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
    updateTime?: long(name='UpdateTime'),
  }(name='Result'),
}

model CreateAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAntChainContractProjectResponseBody(name='body'),
}

async function createAntChainContractProject(request: CreateAntChainContractProjectRequest): CreateAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model CreateBlockchainRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  blockchainRegionId?: string(name='BlockchainRegionId', position='Body'),
  blockchainType?: string(name='BlockchainType', position='Body'),
  cipherSuit?: string(name='CipherSuit', position='Body'),
  liveTime?: int32(name='LiveTime', position='Body'),
  machineNum?: int32(name='MachineNum', position='Body'),
  merkleTreeSuit?: string(name='MerkleTreeSuit', position='Body'),
  size?: int32(name='Size', position='Body'),
  tlsAlgo?: string(name='TlsAlgo', position='Body'),
}

model CreateBlockchainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateBlockchainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBlockchainResponseBody(name='body'),
}

async function createBlockchain(request: CreateBlockchainRequest): CreateBlockchainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBlockchain', 'POST', '/', 'json', true, 'form', request);
}

model CreateBlockchainApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  blockchainRegionId?: string(name='BlockchainRegionId', position='Body'),
  blockchainType?: string(name='BlockchainType', position='Body'),
  cipherSuit?: string(name='CipherSuit', position='Body'),
  liveTime?: int32(name='LiveTime', position='Body'),
  machineNum?: int32(name='MachineNum', position='Body'),
  merkleTreeSuit?: string(name='MerkleTreeSuit', position='Body'),
  size?: int32(name='Size', position='Body'),
  tlsAlgo?: string(name='TlsAlgo', position='Body'),
}

model CreateBlockchainApplicationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateBlockchainApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBlockchainApplicationResponseBody(name='body'),
}

async function createBlockchainApplication(request: CreateBlockchainApplicationRequest): CreateBlockchainApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBlockchainApplication', 'POST', '/', 'json', true, 'form', request);
}

model CreateBlockchainApplyRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  liveTime?: int32(name='LiveTime', position='Body'),
  machineNum?: int32(name='MachineNum', position='Body'),
  size?: int32(name='Size', position='Body'),
}

model CreateBlockchainApplyResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateBlockchainApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBlockchainApplyResponseBody(name='body'),
}

async function createBlockchainApply(request: CreateBlockchainApplyRequest): CreateBlockchainApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBlockchainApply', 'POST', '/', 'json', true, 'form', request);
}

model CreateChaincodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  channelId: string(name='ChannelId', example='chan-first-channel-1w55v3u39x2xz', position='Body'),
  consortiumId?: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d046jtl', position='Body'),
  ossBucket: string(name='OssBucket', example='https://chaincode.oss-cn-beijing.aliyuncs.com', position='Body'),
  ossUrl: string(name='OssUrl', example='aaaaaa1/a0cf8729-7d47-44c9-9ed5-6d2fdfc8dc2c/sacc.cc', position='Body'),
}

model CreateChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='CD264CC8-B892-4CDC-BD31-7D179EE6E396'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jmo0np'),
    channelName?: string(name='ChannelName', example='first-channel'),
    consortiumId?: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd'),
    createTime?: string(name='CreateTime', example='1544766801000'),
    deployTime?: string(name='DeployTime', example='1544766801000'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
    input?: string(name='Input', example='string'),
    install?: boolean(name='Install', example='true'),
    message?: string(name='Message', example='string'),
    name?: string(name='Name', example='sacc'),
    path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
    providerId?: string(name='ProviderId', example='peers-aaaaaa1-1oxw31d046jtl'),
    providerName?: string(name='ProviderName', example='peers-aaaaaa1-1oxw31d046jtl'),
    state?: string(name='State', example='Instantiatable'),
    type?: int32(name='Type', example='1'),
    version?: string(name='Version', example='1.0'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChaincodeResponseBody(name='body'),
}

async function createChaincode(request: CreateChaincodeRequest): CreateChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChaincode', 'POST', '/', 'json', true, 'form', request);
}

model CreateChannelRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  batchTimeout?: int32(name='BatchTimeout', example='2', position='Body'),
  channelName: string(name='ChannelName', example='channelx', position='Query'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Query'),
  maxMessageCount?: int32(name='MaxMessageCount', example='2', position='Body'),
  organization: [ 
    {
      id?: string(name='Id', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
  preferredMaxBytes?: int32(name='PreferredMaxBytes', example='2', position='Body'),
}

model CreateChannelResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    batchTimeout?: int32(name='BatchTimeout', example='2'),
    blockCount?: int32(name='BlockCount', example='2'),
    chaincodeCount?: int32(name='ChaincodeCount', example='2'),
    channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
    consortiumId?: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd'),
    consortiumName?: string(name='ConsortiumName', example='aaaaaa'),
    createTime?: string(name='CreateTime', example='1544768139624'),
    maxMessageCount?: int32(name='MaxMessageCount', example='2'),
    memberCount?: int32(name='MemberCount', example='1'),
    name?: string(name='Name', example='channelx'),
    ownerBid?: string(name='OwnerBid', example='26842'),
    ownerName?: string(name='OwnerName', example='uid-'),
    ownerUid?: int32(name='OwnerUid', example='1234'),
    preferredMaxBytes?: int32(name='PreferredMaxBytes', example='2'),
    requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
    state?: string(name='State', example='Pending'),
    supportConfig?: boolean(name='SupportConfig', example='true'),
    updateTime?: string(name='UpdateTime', example='1544768139624'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChannelResponseBody(name='body'),
}

async function createChannel(request: CreateChannelRequest): CreateChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChannel', 'POST', '/', 'json', true, 'form', request);
}

model CreateChannelMemberRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  channelId: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo', position='Query'),
  organization: [ 
    {
      id?: string(name='Id', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
}

model CreateChannelMemberResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model CreateChannelMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChannelMemberResponseBody(name='body'),
}

async function createChannelMember(request: CreateChannelMemberRequest): CreateChannelMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChannelMember', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudIntegrationServiceTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
  service: string(name='Service', position='Query'),
}

model CreateCloudIntegrationServiceTokenResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model CreateCloudIntegrationServiceTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCloudIntegrationServiceTokenResponseBody(name='body'),
}

async function createCloudIntegrationServiceToken(request: CreateCloudIntegrationServiceTokenRequest): CreateCloudIntegrationServiceTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudIntegrationServiceToken', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudServiceIntegrationRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model CreateCloudServiceIntegrationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CreateCloudServiceIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCloudServiceIntegrationResponseBody(name='body'),
}

async function createCloudServiceIntegration(request: CreateCloudServiceIntegrationRequest): CreateCloudServiceIntegrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudServiceIntegration', 'POST', '/', 'json', false, 'json', request);
}

model CreateCloudServiceSessionRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model CreateCloudServiceSessionResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model CreateCloudServiceSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCloudServiceSessionResponseBody(name='body'),
}

async function createCloudServiceSession(request: CreateCloudServiceSessionRequest): CreateCloudServiceSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCloudServiceSession', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsortiumRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  channelPolicy: string(name='ChannelPolicy', example='Any', position='Body'),
  description?: string(name='Description', example='some', position='Body'),
  domain: string(name='Domain', example='helloworld', position='Body'),
  duration?: int32(name='Duration', example='24', position='Body'),
  location: string(name='Location', example='cn-hangzhou', position='Body'),
  majorVersion?: string(name='MajorVersion', position='Body'),
  name: string(name='Name', example='helloworld', position='Body'),
  ordererType: string(name='OrdererType', example='Kafka', position='Body'),
  orderersCount?: int32(name='OrderersCount', example='2', position='Body'),
  organization?: [ 
    {
      id?: string(name='Id', example='peers-yidio-1tuigx42b1goc'),
    }
  ](name='Organization', position='Body'),
  peersCount?: int32(name='PeersCount', example='2', position='Body'),
  pricingCycle?: string(name='PricingCycle', example='12', position='Body'),
  specName: string(name='SpecName', example='basic', position='Body'),
  zoneId?: string(name='ZoneId', example='zone', position='Body'),
}

model CreateConsortiumResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    channelCount?: int32(name='ChannelCount', example='0'),
    channelPolicy?: string(name='ChannelPolicy', example='Any'),
    clusterState?: string(name='ClusterState', example='Pending'),
    codeName?: string(name='CodeName', example='lianmenyumingyi'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    createTime?: string(name='CreateTime', example='1544086901984'),
    description?: string(name='Description', example='string'),
    domain?: string(name='Domain', example='hello'),
    memberCount?: int32(name='MemberCount', example='2'),
    name?: string(name='Name', example='hello'),
    ordererCount?: int32(name='OrdererCount', example='1'),
    ordererType?: string(name='OrdererType', example='Kafka'),
    ownerBid?: string(name='OwnerBid', example='26842'),
    ownerUid?: long(name='OwnerUid', example='1019556'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    serviceState?: string(name='ServiceState', example='Pending'),
    specName?: string(name='SpecName', example='basic'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsortiumResponseBody(name='body'),
}

async function createConsortium(request: CreateConsortiumRequest): CreateConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsortium', 'POST', '/', 'json', true, 'form', request);
}

model CreateConsortiumMemberRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  code?: string(name='Code', example='200', position='Query'),
  consortiumId: string(name='ConsortiumId', example='consortium-aaaaaa-akpcsjjac2jd', position='Query'),
  organization: [ 
    {
      id?: string(name='Id', example='peers-aaaaaa1-1oxw31d046jtl'),
    }
  ](name='Organization', position='Query'),
}

model CreateConsortiumMemberResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsortiumMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConsortiumMemberResponseBody(name='body'),
}

async function createConsortiumMember(request: CreateConsortiumMemberRequest): CreateConsortiumMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsortiumMember', 'POST', '/', 'json', false, 'json', request);
}

model CreateEcosphereRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  channelPolicy: string(name='ChannelPolicy', example='Any', position='Body'),
  consortiumName: string(name='ConsortiumName', example='Name', position='Body'),
  description?: string(name='Description', example='string', position='Body'),
  duration?: int32(name='Duration', example='12', position='Body'),
  location: string(name='Location', example='cn-hangzhou', position='Body'),
  majorVersion?: string(name='MajorVersion', position='Body'),
  ordererDomain: string(name='OrdererDomain', example='hello', position='Body'),
  ordererType: string(name='OrdererType', example='Kafka', position='Body'),
  orderersCount?: int32(name='OrderersCount', example='2', position='Body'),
  organization: [ 
    {
      description?: string(name='Description', example='string'),
      domain?: string(name='Domain', example='domain1'),
      name?: string(name='Name', example='name1'),
    }
  ](name='Organization', position='Body'),
  peersCount?: int32(name='PeersCount', example='2', position='Body'),
  pricingCycle?: string(name='PricingCycle', position='Body'),
  specName: string(name='SpecName', example='basic', position='Body'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou', position='Body'),
}

model CreateEcosphereResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  errorMessage?: string(name='ErrorMessage', example='ok'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    channelCount?: int32(name='ChannelCount', example='2'),
    channelPolicy?: string(name='ChannelPolicy', example='Any'),
    clusterState?: string(name='ClusterState', example='Pending'),
    code?: string(name='Code', example='200'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    createTime?: string(name='CreateTime', example='1544411108000'),
    description?: string(name='Description', example='hello'),
    domain?: string(name='Domain', example='hello'),
    memberCount?: int32(name='MemberCount', example='2'),
    name?: string(name='Name', example='hello'),
    ordererCount?: int32(name='OrdererCount', example='2'),
    ordererType?: string(name='OrdererType', example='Kafka'),
    organizations?: [ 
      {
        clusterState?: string(name='ClusterState', example='Pending'),
        code?: string(name='Code', example='200'),
        createTime?: string(name='CreateTime', example='1544411108000'),
        description?: string(name='Description', example='string'),
        domain?: string(name='Domain', example='string'),
        name?: string(name='Name', example='string'),
        serviceState?: string(name='ServiceState', example='Pending'),
      }
    ](name='Organizations'),
    ownerBid?: string(name='OwnerBid', example='26842'),
    ownerUid?: long(name='OwnerUid', example='144566'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    serviceState?: string(name='ServiceState', example='Pending'),
    specName?: string(name='SpecName', example='basic'),
    specification?: {
      name?: string(name='Name', example='basic'),
      numOfNodes?: int32(name='NumOfNodes', example='2'),
      title?: string(name='Title', example='basic'),
    }(name='Specification'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateEcosphereResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEcosphereResponseBody(name='body'),
}

async function createEcosphere(request: CreateEcosphereRequest): CreateEcosphereResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEcosphere', 'POST', '/', 'json', true, 'form', request);
}

model CreateEthereumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consensus: string(name='Consensus', position='Body'),
  description?: string(name='Description', position='Body'),
  difficulty?: string(name='Difficulty', position='Body'),
  gas?: string(name='Gas', position='Body'),
  name: string(name='Name', position='Body'),
  networkId?: string(name='NetworkId', position='Body'),
  node: [ 
    {
      name?: string(name='Name'),
    }
  ](name='Node', position='Body'),
  region?: string(name='Region', position='Body'),
}

model CreateEthereumResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consensus?: string(name='Consensus'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    networkId?: string(name='NetworkId'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateEthereumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEthereumResponseBody(name='body'),
}

async function createEthereum(request: CreateEthereumRequest): CreateEthereumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEthereum', 'POST', '/', 'json', true, 'form', request);
}

model CreateEthereumInvitationRequest {
  regionId?: string(name='RegionId', position='Host'),
  ethereumId: string(name='EthereumId', position='Body'),
}

model CreateEthereumInvitationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    code?: string(name='Code'),
    createTime?: string(name='CreateTime'),
    expireTime?: string(name='ExpireTime'),
    token?: string(name='Token'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateEthereumInvitationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEthereumInvitationResponseBody(name='body'),
}

async function createEthereumInvitation(request: CreateEthereumInvitationRequest): CreateEthereumInvitationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEthereumInvitation', 'POST', '/', 'json', true, 'form', request);
}

model CreateFabricChaincodePackageRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  ossBucket: string(name='OssBucket', position='Body'),
  ossUrl: string(name='OssUrl', position='Body'),
}

model CreateFabricChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodePackageId?: int32(name='ChaincodePackageId'),
    checksum?: string(name='Checksum'),
    deleteTime?: long(name='DeleteTime'),
    deleted?: boolean(name='Deleted'),
    installTime?: long(name='InstallTime'),
    label?: string(name='Label'),
    md5sum?: string(name='Md5sum'),
    organizationId?: string(name='OrganizationId'),
    ossBucket?: string(name='OssBucket'),
    ossURL?: string(name='OssURL'),
    providerBid?: string(name='ProviderBid'),
    providerUid?: long(name='ProviderUid'),
    state?: string(name='State'),
    type?: string(name='Type'),
    typeString?: boolean(name='TypeString'),
    uploadTime?: long(name='UploadTime'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateFabricChaincodePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFabricChaincodePackageResponseBody(name='body'),
}

async function createFabricChaincodePackage(request: CreateFabricChaincodePackageRequest): CreateFabricChaincodePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFabricChaincodePackage', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrganizationRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  description?: string(name='Description', example='description', position='Query'),
  domain: string(name='Domain', example='domain', position='Query'),
  duration?: int32(name='Duration', example='24', position='Query'),
  location: string(name='Location', example='cn-hangzhou', position='Query'),
  majorVersion?: string(name='MajorVersion', position='Body'),
  name: string(name='Name', example='name', position='Query'),
  peersCount?: int32(name='PeersCount', example='2', minimum=2, maximum=9, position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  specName: string(name='SpecName', example='basic', position='Query'),
}

model CreateOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    clusterState?: string(name='ClusterState', example='Pending'),
    codeName?: string(name='CodeName', example='name'),
    consortiumCount?: int32(name='ConsortiumCount', example='2'),
    createTime?: string(name='CreateTime', example='1533025590'),
    description?: string(name='Description', example='Description'),
    domain?: string(name='Domain', example='Domain'),
    name?: string(name='Name', example='Name'),
    organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
    ownerBid?: string(name='OwnerBid', example='2544'),
    ownerName?: string(name='OwnerName', example='uid-23434'),
    ownerUid?: int32(name='OwnerUid', example='23434'),
    peerCount?: int32(name='PeerCount', example='2'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
    serviceState?: string(name='ServiceState', example='Running'),
    specName?: string(name='SpecName', example='basic'),
    userCount?: int32(name='UserCount', example='2'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrganizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrganizationResponseBody(name='body'),
}

async function createOrganization(request: CreateOrganizationRequest): CreateOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrganization', 'POST', '/', 'json', true, 'form', request);
}

model CreateOrganizationUserRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  attrs?: string(name='Attrs', example='a', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-yidio-1tuigx42b****', position='Body'),
  password?: string(name='Password', example='password', position='Body'),
  username: string(name='Username', example='username', position='Body'),
}

model CreateOrganizationUserResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    createTime?: string(name='CreateTime', example='1544086901984'),
    expireTime?: string(name='ExpireTime', example='1544411108000'),
    fullname?: string(name='Fullname', example='fullname'),
    organizationId?: string(name='OrganizationId', example='peers-yidio-1tuigx42b****'),
    password?: string(name='Password', example='password'),
    username?: string(name='Username', example='username'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model CreateOrganizationUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrganizationUserResponseBody(name='body'),
}

async function createOrganizationUser(request: CreateOrganizationUserRequest): CreateOrganizationUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrganizationUser', 'POST', '/', 'json', true, 'form', request);
}

model CreateOwnAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  identity?: string(name='Identity', position='Body'),
  publicKey?: string(name='PublicKey', position='Body'),
  recoveryKey?: string(name='RecoveryKey', position='Body'),
}

model CreateOwnAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreateOwnAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOwnAccountResponseBody(name='body'),
}

async function createOwnAccount(request: CreateOwnAccountRequest): CreateOwnAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOwnAccount', 'POST', '/', 'json', true, 'form', request);
}

model CreatePublicAccountWithKeyPairAutoCreationRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  password?: string(name='Password', position='Body'),
  recoverPassword?: string(name='RecoverPassword', position='Body'),
}

model CreatePublicAccountWithKeyPairAutoCreationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accountPrivateKey?: string(name='AccountPrivateKey'),
    accountPublicKey?: string(name='AccountPublicKey'),
    accountRecoverPrivateKey?: string(name='AccountRecoverPrivateKey'),
    accountRecoverPublicKey?: string(name='AccountRecoverPublicKey'),
  }(name='Result'),
}

model CreatePublicAccountWithKeyPairAutoCreationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePublicAccountWithKeyPairAutoCreationResponseBody(name='body'),
}

async function createPublicAccountWithKeyPairAutoCreation(request: CreatePublicAccountWithKeyPairAutoCreationRequest): CreatePublicAccountWithKeyPairAutoCreationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePublicAccountWithKeyPairAutoCreation', 'POST', '/', 'json', true, 'form', request);
}

model CreatePublicAntChainAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  accountPubKey?: string(name='AccountPubKey', position='Body'),
  accountRecoverPubKey?: string(name='AccountRecoverPubKey', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
}

model CreatePublicAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model CreatePublicAntChainAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePublicAntChainAccountResponseBody(name='body'),
}

async function createPublicAntChainAccount(request: CreatePublicAntChainAccountRequest): CreatePublicAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePublicAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model CreateSmartContractJobRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateSmartContractJobResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    accessId?: string(name='AccessId'),
    dir?: int32(name='Dir'),
    expire?: long(name='Expire'),
    host?: string(name='Host'),
    jobID?: string(name='JobID'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateSmartContractJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSmartContractJobResponseBody(name='body'),
}

async function createSmartContractJob(request: CreateSmartContractJobRequest): CreateSmartContractJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSmartContractJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateTriggerRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  name: string(name='Name', position='Body'),
  options?: string(name='Options', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  source: string(name='Source', position='Body'),
  status?: string(name='Status', position='Body'),
  type: string(name='Type', position='Body'),
}

model CreateTriggerResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelId?: string(name='ChannelId'),
    channelName?: string(name='ChannelName'),
    createTime?: long(name='CreateTime'),
    errorMessage?: string(name='ErrorMessage'),
    name?: string(name='Name'),
    options?: string(name='Options'),
    source?: string(name='Source'),
    status?: int32(name='Status'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model CreateTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTriggerResponseBody(name='body'),
}

async function createTrigger(request: CreateTriggerRequest): CreateTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrigger', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
}

model DeleteAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainConsortiumResponseBody(name='body'),
}

async function deleteAntChainConsortium(request: DeleteAntChainConsortiumRequest): DeleteAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainContractContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  contentId: string(name='ContentId', position='Body'),
}

model DeleteAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainContractContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainContractContentResponseBody(name='body'),
}

async function deleteAntChainContractContent(request: DeleteAntChainContractContentRequest): DeleteAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', position='Body'),
}

model DeleteAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainContractProjectResponseBody(name='body'),
}

async function deleteAntChainContractProject(request: DeleteAntChainContractProjectRequest): DeleteAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  phone: string(name='Phone', position='Body'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DeleteAntChainMiniAppQRCodeAuthorizedUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody(name='body'),
}

async function deleteAntChainMiniAppQRCodeAuthorizedUser(request: DeleteAntChainMiniAppQRCodeAuthorizedUserRequest): DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAntChainMiniAppQRCodeAuthorizedUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteChaincodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jm****', position='Body'),
}

model DeleteChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='@guid'),
  success?: boolean(name='Success', example='true'),
}

model DeleteChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChaincodeResponseBody(name='body'),
}

async function deleteChaincode(request: DeleteChaincodeRequest): DeleteChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChaincode', 'POST', '/', 'json', true, 'form', request);
}

model DeleteGovernanceTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model DeleteGovernanceTaskResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelName?: string(name='ChannelName'),
    content?: {
      addedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='AddedOrganizations'),
      chaincodeSpecPkg?: {
        cs?: {
          input?: string(name='Input'),
          name?: string(name='Name'),
          path?: string(name='Path'),
          type?: int32(name='Type'),
          version?: string(name='Version'),
        }(name='Cs'),
        policy?: string(name='Policy'),
        sha256?: string(name='Sha256'),
      }(name='ChaincodeSpecPkg'),
      ordererConfig?: {
        batchTimeout?: string(name='BatchTimeout'),
        maxMessageCount?: int32(name='MaxMessageCount'),
        preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      }(name='OrdererConfig'),
      raw?: string(name='Raw'),
      removedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='RemovedOrganizations'),
      rwSets?: string(name='RwSets'),
    }(name='Content'),
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DeleteGovernanceTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGovernanceTaskResponseBody(name='body'),
}

async function deleteGovernanceTask(request: DeleteGovernanceTaskRequest): DeleteGovernanceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGovernanceTask', 'POST', '/', 'json', true, 'form', request);
}

model DeleteTriggerRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Query'),
  name: string(name='Name', position='Query'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DeleteTriggerResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelId?: string(name='ChannelId'),
    channelName?: string(name='ChannelName'),
    checkpoint?: {
      errorCount?: long(name='ErrorCount'),
      height?: long(name='Height'),
      index?: long(name='Index'),
      type?: string(name='Type'),
    }(name='Checkpoint'),
    createTime?: long(name='CreateTime'),
    errorMessage?: string(name='ErrorMessage'),
    name?: string(name='Name'),
    options?: string(name='Options'),
    source?: string(name='Source'),
    status?: int32(name='Status'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DeleteTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTriggerResponseBody(name='body'),
}

async function deleteTrigger(request: DeleteTriggerRequest): DeleteTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrigger', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAntChainAccountsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model DescribeAntChainAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account'),
        accountPublicKey?: string(name='AccountPublicKey'),
        accountRecoveryKey?: string(name='AccountRecoveryKey'),
        accountStatus?: string(name='AccountStatus'),
        antChainId?: string(name='AntChainId'),
      }
    ](name='Accounts'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainAccountsResponseBody(name='body'),
}

async function describeAntChainAccounts(request: DescribeAntChainAccountsRequest): DescribeAntChainAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainAccounts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainAccountsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainAccountsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    accounts?: [ 
      {
        account?: string(name='Account'),
        accountPublicKey?: string(name='AccountPublicKey'),
        accountRecoveryKey?: string(name='AccountRecoveryKey'),
        accountStatus?: string(name='AccountStatus'),
        antChainId?: string(name='AntChainId'),
        createTime?: long(name='CreateTime'),
        memberName?: string(name='MemberName'),
      }
    ](name='Accounts'),
    consortiumAdmin?: boolean(name='ConsortiumAdmin'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainAccountsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainAccountsNewResponseBody(name='body'),
}

async function describeAntChainAccountsNew(request: DescribeAntChainAccountsNewRequest): DescribeAntChainAccountsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainAccountsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainApplicationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  current?: int32(name='Current', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  status?: string(name='Status', position='Body'),
}

model DescribeAntChainApplicationsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    applyHistoryList?: [ 
      {
        bizid?: string(name='Bizid'),
        createtime?: long(name='Createtime'),
        id?: int32(name='Id'),
        rejectReason?: string(name='RejectReason'),
        reqAddr?: string(name='ReqAddr'),
        signedAddr?: string(name='SignedAddr'),
        status?: int32(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='ApplyHistoryList'),
    pagination?: {
      current?: int32(name='Current'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainApplicationsResponseBody(name='body'),
}

async function describeAntChainApplications(request: DescribeAntChainApplicationsRequest): DescribeAntChainApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainApplications', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainBlockRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  height: long(name='Height', position='Body'),
}

model DescribeAntChainBlockResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: string(name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
    version?: long(name='Version'),
  }(name='Result'),
}

model DescribeAntChainBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainBlockResponseBody(name='body'),
}

async function describeAntChainBlock(request: DescribeAntChainBlockRequest): DescribeAntChainBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainBlock', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainBlockNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  height: long(name='Height', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeAntChainBlockNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: [ 
      {
        alias?: string(name='Alias'),
        blockHash?: string(name='BlockHash'),
        category?: int32(name='Category'),
        createTime?: long(name='CreateTime'),
        from?: string(name='From'),
        gasUsed?: long(name='GasUsed'),
        hash?: string(name='Hash'),
        height?: long(name='Height'),
        referenceCount?: int32(name='ReferenceCount'),
        to?: string(name='To'),
        transTypeV10?: string(name='TransTypeV10'),
        transTypeV6?: string(name='TransTypeV6'),
      }
    ](name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
    version?: long(name='Version'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainBlockNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainBlockNewResponseBody(name='body'),
}

async function describeAntChainBlockNew(request: DescribeAntChainBlockNewRequest): DescribeAntChainBlockNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainBlockNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainCertificateApplicationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  status: string(name='Status', position='Body'),
}

model DescribeAntChainCertificateApplicationsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId'),
        bid?: string(name='Bid'),
        createtime?: long(name='Createtime'),
        status?: string(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainCertificateApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainCertificateApplicationsResponseBody(name='body'),
}

async function describeAntChainCertificateApplications(request: DescribeAntChainCertificateApplicationsRequest): DescribeAntChainCertificateApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainCertificateApplications', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainCertificateApplicationsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=9223372036854775807, position='Body'),
  status: string(name='Status', position='Body'),
}

model DescribeAntChainCertificateApplicationsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    certificateApplications?: [ 
      {
        antChainId?: string(name='AntChainId'),
        bid?: string(name='Bid'),
        createtime?: long(name='Createtime'),
        status?: string(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='CertificateApplications'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainCertificateApplicationsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainCertificateApplicationsNewResponseBody(name='body'),
}

async function describeAntChainCertificateApplicationsNew(request: DescribeAntChainCertificateApplicationsNewRequest): DescribeAntChainCertificateApplicationsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainCertificateApplicationsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainConfigOptionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  purpose?: string(name='Purpose', position='Query'),
}

model DescribeAntChainConfigOptionsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model DescribeAntChainConfigOptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainConfigOptionsResponseBody(name='body'),
}

async function describeAntChainConfigOptions(request: DescribeAntChainConfigOptionsRequest): DescribeAntChainConfigOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainConfigOptions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAntChainConsortiumsRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model DescribeAntChainConsortiumsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum'),
        consortiumDescription?: string(name='ConsortiumDescription'),
        consortiumId?: string(name='ConsortiumId'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime'),
        isEmptyConsortium?: boolean(name='IsEmptyConsortium'),
        memberNum?: long(name='MemberNum'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainConsortiumsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainConsortiumsResponseBody(name='body'),
}

async function describeAntChainConsortiums(request: DescribeAntChainConsortiumsRequest): DescribeAntChainConsortiumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainConsortiums', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainConsortiumsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainConsortiumsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antConsortiums?: [ 
      {
        chainNum?: long(name='ChainNum'),
        consortiumDescription?: string(name='ConsortiumDescription'),
        consortiumId?: string(name='ConsortiumId'),
        consortiumName?: string(name='ConsortiumName'),
        createTime?: long(name='CreateTime'),
        isEmptyConsortium?: boolean(name='IsEmptyConsortium'),
        memberNum?: long(name='MemberNum'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='AntConsortiums'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainConsortiumsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainConsortiumsNewResponseBody(name='body'),
}

async function describeAntChainConsortiumsNew(request: DescribeAntChainConsortiumsNewRequest): DescribeAntChainConsortiumsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainConsortiumsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectContentTreeRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectId: string(name='ProjectId', position='Body'),
}

model DescribeAntChainContractProjectContentTreeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    children?: [  map[string]any ](name='Children'),
    projectDescription?: string(name='ProjectDescription'),
    projectId?: string(name='ProjectId'),
    projectName?: string(name='ProjectName'),
    projectVersion?: string(name='ProjectVersion'),
  }(name='Result'),
}

model DescribeAntChainContractProjectContentTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectContentTreeResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTree(request: DescribeAntChainContractProjectContentTreeRequest): DescribeAntChainContractProjectContentTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectContentTree', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectContentTreeNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model DescribeAntChainContractProjectContentTreeNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainContractProjectContentTreeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectContentTreeNewResponseBody(name='body'),
}

async function describeAntChainContractProjectContentTreeNew(request: DescribeAntChainContractProjectContentTreeNewRequest): DescribeAntChainContractProjectContentTreeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectContentTreeNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectsRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model DescribeAntChainContractProjectsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId'),
        createTime?: long(name='CreateTime'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: string(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        projectVersion?: string(name='ProjectVersion'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainContractProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectsResponseBody(name='body'),
}

async function describeAntChainContractProjects(request: DescribeAntChainContractProjectsRequest): DescribeAntChainContractProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjects', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainContractProjectsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeAntChainContractProjectsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    contractProjects?: [ 
      {
        consortiumId?: string(name='ConsortiumId'),
        createTime?: long(name='CreateTime'),
        projectDescription?: string(name='ProjectDescription'),
        projectId?: string(name='ProjectId'),
        projectName?: string(name='ProjectName'),
        projectVersion?: string(name='ProjectVersion'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='ContractProjects'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainContractProjectsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainContractProjectsNewResponseBody(name='body'),
}

async function describeAntChainContractProjectsNew(request: DescribeAntChainContractProjectsNewRequest): DescribeAntChainContractProjectsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainContractProjectsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainDownloadPathsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
}

model DescribeAntChainDownloadPathsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl'),
    clientCrtUrl?: string(name='ClientCrtUrl'),
    sdkUrl?: string(name='SdkUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
}

model DescribeAntChainDownloadPathsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainDownloadPathsResponseBody(name='body'),
}

async function describeAntChainDownloadPaths(request: DescribeAntChainDownloadPathsRequest): DescribeAntChainDownloadPathsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainDownloadPaths', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainDownloadPathsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainDownloadPathsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl'),
    clientCrtUrl?: string(name='ClientCrtUrl'),
    sdkUrl?: string(name='SdkUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainDownloadPathsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainDownloadPathsNewResponseBody(name='body'),
}

async function describeAntChainDownloadPathsNew(request: DescribeAntChainDownloadPathsNewRequest): DescribeAntChainDownloadPathsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainDownloadPathsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainInformationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
}

model DescribeAntChainInformationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    antChainId?: string(name='AntChainId'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    isRole?: boolean(name='IsRole'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
}

model DescribeAntChainInformationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainInformationResponseBody(name='body'),
}

async function describeAntChainInformation(request: DescribeAntChainInformationRequest): DescribeAntChainInformationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainInformation', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainInformationNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainInformationNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    antChainId?: string(name='AntChainId'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    isRole?: boolean(name='IsRole'),
    nodeInfos?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfos'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainInformationNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainInformationNewResponseBody(name='body'),
}

async function describeAntChainInformationNew(request: DescribeAntChainInformationNewRequest): DescribeAntChainInformationNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainInformationNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestBlocksRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
}

model DescribeAntChainLatestBlocksResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestBlocksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestBlocksResponseBody(name='body'),
}

async function describeAntChainLatestBlocks(request: DescribeAntChainLatestBlocksRequest): DescribeAntChainLatestBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestBlocks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestBlocksNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainLatestBlocksNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alias?: string(name='Alias'),
      bizData?: string(name='BizData'),
      blockHash?: string(name='BlockHash'),
      createTime?: long(name='CreateTime'),
      height?: long(name='Height'),
      previousHash?: string(name='PreviousHash'),
      rootTxHash?: string(name='RootTxHash'),
      size?: long(name='Size'),
      transactionSize?: long(name='TransactionSize'),
      version?: long(name='Version'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainLatestBlocksNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestBlocksNewResponseBody(name='body'),
}

async function describeAntChainLatestBlocksNew(request: DescribeAntChainLatestBlocksNewRequest): DescribeAntChainLatestBlocksNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestBlocksNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestTransactionDigestsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
}

model DescribeAntChainLatestTransactionDigestsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeAntChainLatestTransactionDigestsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestTransactionDigestsResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigests(request: DescribeAntChainLatestTransactionDigestsRequest): DescribeAntChainLatestTransactionDigestsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestTransactionDigests', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainLatestTransactionDigestsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainLatestTransactionDigestsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainLatestTransactionDigestsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainLatestTransactionDigestsNewResponseBody(name='body'),
}

async function describeAntChainLatestTransactionDigestsNew(request: DescribeAntChainLatestTransactionDigestsNewRequest): DescribeAntChainLatestTransactionDigestsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainLatestTransactionDigestsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model DescribeAntChainMembersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMembersResponseBody(name='body'),
}

async function describeAntChainMembers(request: DescribeAntChainMembersRequest): DescribeAntChainMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMembersNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainMembersNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    members?: [ 
      {
        joinTime?: long(name='JoinTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='Members'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMembersNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMembersNewResponseBody(name='body'),
}

async function describeAntChainMembersNew(request: DescribeAntChainMembersNewRequest): DescribeAntChainMembersNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMembersNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount'),
    accessCount?: long(name='AccessCount'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLog(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest): DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAccessLog', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount'),
    accessCount?: long(name='AccessCount'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAccessLogNew(request: DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest): DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAccessLogNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized'),
        phone?: string(name='Phone'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsers(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=9223372036854775807, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=9223372036854775807, position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    authorizedUserList?: [ 
      {
        gmtAuthorized?: string(name='GmtAuthorized'),
        phone?: string(name='Phone'),
        userId?: long(name='UserId'),
      }
    ](name='AuthorizedUserList'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserQRCodeAuthorizedUsersNew(request: DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest): DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  transactionHash: string(name='TransactionHash', position='Body'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    base64QRCodePNG?: string(name='Base64QRCodePNG'),
    QRCodeContent?: string(name='QRCodeContent'),
    transactionHash?: string(name='TransactionHash'),
  }(name='Result'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCode(request: DescribeAntChainMiniAppBrowserTransactionQRCodeRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserTransactionQRCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  contractId?: string(name='ContractId', position='Body'),
  transactionHash: string(name='TransactionHash', position='Body'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    base64QRCodePNG?: string(name='Base64QRCodePNG'),
    QRCodeContent?: string(name='QRCodeContent'),
    transactionHash?: string(name='TransactionHash'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody(name='body'),
}

async function describeAntChainMiniAppBrowserTransactionQRCodeNew(request: DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest): DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainMiniAppBrowserTransactionQRCodeNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainNodesNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainNodesNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainNodesNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainNodesNewResponseBody(name='body'),
}

async function describeAntChainNodesNew(request: DescribeAntChainNodesNewRequest): DescribeAntChainNodesNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainNodesNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainQRCodeAuthorizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
}

model DescribeAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
}

model DescribeAntChainQRCodeAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorization(request: DescribeAntChainQRCodeAuthorizationRequest): DescribeAntChainQRCodeAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainQRCodeAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainQRCodeAuthorizationNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
}

model DescribeAntChainQRCodeAuthorizationNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    authorizationType?: string(name='AuthorizationType'),
    QRCodeType?: string(name='QRCodeType'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainQRCodeAuthorizationNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainQRCodeAuthorizationNewResponseBody(name='body'),
}

async function describeAntChainQRCodeAuthorizationNew(request: DescribeAntChainQRCodeAuthorizationNewRequest): DescribeAntChainQRCodeAuthorizationNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainQRCodeAuthorizationNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainRegionNamesRequest {
  regionId?: string(name='RegionId', position='Host'),
  locale?: string(name='Locale', position='Body'),
}

model DescribeAntChainRegionNamesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      regionId?: string(name='RegionId'),
      regionName?: string(name='RegionName'),
    }
  ](name='Result'),
}

model DescribeAntChainRegionNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainRegionNamesResponseBody(name='body'),
}

async function describeAntChainRegionNames(request: DescribeAntChainRegionNamesRequest): DescribeAntChainRegionNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainRegionNames', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainRegionsForSaleRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainRegionsForSaleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      regionId?: string(name='RegionId'),
      typeList?: [ string ](name='TypeList'),
    }
  ](name='Result'),
}

model DescribeAntChainRegionsForSaleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainRegionsForSaleResponseBody(name='body'),
}

async function describeAntChainRegionsForSale(request: DescribeAntChainRegionsForSaleRequest): DescribeAntChainRegionsForSaleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainRegionsForSale', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAntChainResourceTypesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAntChainResourceTypesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      cpu?: int32(name='Cpu'),
      disk?: int32(name='Disk'),
      memory?: int32(name='Memory'),
      typeId?: int32(name='TypeId'),
    }
  ](name='Result'),
}

model DescribeAntChainResourceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainResourceTypesResponseBody(name='body'),
}

async function describeAntChainResourceTypes(request: DescribeAntChainResourceTypesRequest): DescribeAntChainResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainResourceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAntChainRestRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainRestResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      accessId?: string(name='AccessId'),
      createTime?: long(name='CreateTime'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainRestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainRestResponseBody(name='body'),
}

async function describeAntChainRest(request: DescribeAntChainRestRequest): DescribeAntChainRestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainRest', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainSubnetListRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainSubnetListResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChainId?: string(name='AntChainId'),
    blockchainName?: string(name='BlockchainName'),
    blockchainSubnetList?: [ 
      {
        antChainId?: string(name='AntChainId'),
        blockHeight?: long(name='BlockHeight'),
        consortiumMember?: boolean(name='ConsortiumMember'),
        createTime?: long(name='CreateTime'),
        groupId?: string(name='GroupId'),
        monitor?: boolean(name='Monitor'),
        name?: string(name='Name'),
        nodeSum?: int32(name='NodeSum'),
        rest?: string(name='Rest'),
        status?: string(name='Status'),
        transactionSum?: long(name='TransactionSum'),
      }
    ](name='BlockchainSubnetList'),
    consortiumAdmin?: boolean(name='ConsortiumAdmin'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainSubnetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainSubnetListResponseBody(name='body'),
}

async function describeAntChainSubnetList(request: DescribeAntChainSubnetListRequest): DescribeAntChainSubnetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainSubnetList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainSubnetMemberListRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
}

model DescribeAntChainSubnetMemberListResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    consortiumAdmin?: boolean(name='ConsortiumAdmin'),
    consortiumMemberInfoList?: [ 
      {
        joinTime?: long(name='JoinTime'),
        memberId?: string(name='MemberId'),
        memberName?: string(name='MemberName'),
        role?: string(name='Role'),
        status?: string(name='Status'),
      }
    ](name='ConsortiumMemberInfoList'),
    pagination?: {
      pageNumber?: long(name='PageNumber'),
      pageSize?: long(name='PageSize'),
      totalCount?: long(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainSubnetMemberListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainSubnetMemberListResponseBody(name='body'),
}

async function describeAntChainSubnetMemberList(request: DescribeAntChainSubnetMemberListRequest): DescribeAntChainSubnetMemberListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainSubnetMemberList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainSubnetNodeListRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
}

model DescribeAntChainSubnetNodeListResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      chainNodeInfoList?: [ 
        {
          diskTotal?: string(name='DiskTotal'),
          diskUse?: string(name='DiskUse'),
          nodeId?: string(name='NodeId'),
          nodeIp?: string(name='NodeIp'),
          nodeName?: string(name='NodeName'),
          nodePort?: string(name='NodePort'),
          nodeSource?: string(name='NodeSource'),
          nodeState?: string(name='NodeState'),
          nodeType?: string(name='NodeType'),
          publicKey?: string(name='PublicKey'),
        }
      ](name='ChainNodeInfoList'),
      consortiumAdmin?: boolean(name='ConsortiumAdmin'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainSubnetNodeListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainSubnetNodeListResponseBody(name='body'),
}

async function describeAntChainSubnetNodeList(request: DescribeAntChainSubnetNodeListRequest): DescribeAntChainSubnetNodeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainSubnetNodeList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  hash: string(name='Hash', position='Body'),
}

model DescribeAntChainTransactionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: string(name='BlockVersion'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    transaction?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='Transaction'),
  }(name='Result'),
}

model DescribeAntChainTransactionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionResponseBody(name='body'),
}

async function describeAntChainTransaction(request: DescribeAntChainTransactionRequest): DescribeAntChainTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransaction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  hash: string(name='Hash', position='Body'),
}

model DescribeAntChainTransactionNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: string(name='BlockVersion'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    transaction?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatures?: [ string ](name='Signatures'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='Transaction'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionNewResponseBody(name='body'),
}

async function describeAntChainTransactionNew(request: DescribeAntChainTransactionNewRequest): DescribeAntChainTransactionNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionReceiptNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  hash: string(name='Hash', position='Body'),
}

model DescribeAntChainTransactionReceiptNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    data?: string(name='Data'),
    gasUsed?: string(name='GasUsed'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionReceiptNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionReceiptNewResponseBody(name='body'),
}

async function describeAntChainTransactionReceiptNew(request: DescribeAntChainTransactionReceiptNewRequest): DescribeAntChainTransactionReceiptNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionReceiptNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  end?: long(name='End', position='Body'),
  start?: long(name='Start', position='Body'),
}

model DescribeAntChainTransactionStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId'),
      creatTime?: long(name='CreatTime'),
      dt?: long(name='Dt'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight'),
      transCount?: long(name='TransCount'),
    }
  ](name='Result'),
}

model DescribeAntChainTransactionStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionStatisticsResponseBody(name='body'),
}

async function describeAntChainTransactionStatistics(request: DescribeAntChainTransactionStatisticsRequest): DescribeAntChainTransactionStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionStatistics', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainTransactionStatisticsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  consortiumId?: string(name='ConsortiumId', position='Body'),
  end?: long(name='End', minimum=0, maximum=9223372036854775807, position='Body'),
  start?: long(name='Start', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeAntChainTransactionStatisticsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      antChainId?: string(name='AntChainId'),
      creatTime?: long(name='CreatTime'),
      dt?: long(name='Dt'),
      lastSumBlockHeight?: long(name='LastSumBlockHeight'),
      transCount?: long(name='TransCount'),
    }
  ](name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainTransactionStatisticsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainTransactionStatisticsNewResponseBody(name='body'),
}

async function describeAntChainTransactionStatisticsNew(request: DescribeAntChainTransactionStatisticsNewRequest): DescribeAntChainTransactionStatisticsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainTransactionStatisticsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainsRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model DescribeAntChainsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType'),
        cipherSuit?: string(name='CipherSuit'),
        createTime?: long(name='CreateTime'),
        expireTime?: long(name='ExpireTime'),
        isAdmin?: boolean(name='IsAdmin'),
        memberStatus?: string(name='MemberStatus'),
        merkleTreeSuit?: string(name='MerkleTreeSuit'),
        network?: string(name='Network'),
        nodeNum?: int32(name='NodeNum'),
        regionId?: string(name='RegionId'),
        resourceSize?: string(name='ResourceSize'),
        tlsAlgo?: string(name='TlsAlgo'),
        version?: string(name='Version'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAntChainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainsResponseBody(name='body'),
}

async function describeAntChains(request: DescribeAntChainsRequest): DescribeAntChainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChains', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntChainsNewRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=2147483647, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=2147483647, position='Body'),
}

model DescribeAntChainsNewResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    antChains?: [ 
      {
        antChainId?: string(name='AntChainId'),
        antChainName?: string(name='AntChainName'),
        chainType?: string(name='ChainType'),
        cipherSuit?: string(name='CipherSuit'),
        createTime?: long(name='CreateTime'),
        expireTime?: long(name='ExpireTime'),
        instanceId?: string(name='InstanceId'),
        isAdmin?: boolean(name='IsAdmin'),
        memberStatus?: string(name='MemberStatus'),
        merkleTreeSuit?: string(name='MerkleTreeSuit'),
        monitorStatus?: boolean(name='MonitorStatus'),
        network?: string(name='Network'),
        nodeNum?: int32(name='NodeNum'),
        regionId?: string(name='RegionId'),
        resourceSize?: string(name='ResourceSize'),
        restStatus?: string(name='RestStatus'),
        tlsAlgo?: string(name='TlsAlgo'),
        version?: string(name='Version'),
      }
    ](name='AntChains'),
    isExist?: boolean(name='IsExist'),
    pagination?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      totalCount?: int32(name='TotalCount'),
    }(name='Pagination'),
  }(name='Result'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
  success?: boolean(name='Success'),
}

model DescribeAntChainsNewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntChainsNewResponseBody(name='body'),
}

async function describeAntChainsNew(request: DescribeAntChainsNewRequest): DescribeAntChainsNewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntChainsNew', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAntRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  locale?: string(name='Locale', position='Body'),
}

model DescribeAntRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Result'),
}

model DescribeAntRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAntRegionsResponseBody(name='body'),
}

async function describeAntRegions(request: DescribeAntRegionsRequest): DescribeAntRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAntRegions', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAppliesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  current?: int32(name='Current', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  status?: string(name='Status', position='Body'),
}

model DescribeAppliesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    applyHistoryList?: [ 
      {
        bizid?: string(name='Bizid'),
        createtime?: long(name='Createtime'),
        id?: int32(name='Id'),
        rejectReason?: string(name='RejectReason'),
        reqAddr?: string(name='ReqAddr'),
        signedAddr?: string(name='SignedAddr'),
        status?: int32(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='ApplyHistoryList'),
    pagination?: {
      current?: int32(name='Current'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeAppliesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppliesResponseBody(name='body'),
}

async function describeApplies(request: DescribeAppliesRequest): DescribeAppliesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApplies', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBcSchemaRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeBcSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model DescribeBcSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBcSchemaResponseBody(name='body'),
}

async function describeBcSchema(request: DescribeBcSchemaRequest): DescribeBcSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBcSchema', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  height?: long(name='Height', position='Body'),
}

model DescribeBlockResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    alias?: string(name='Alias'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: string(name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
    version?: long(name='Version'),
  }(name='Result'),
}

model DescribeBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockResponseBody(name='body'),
}

async function describeBlock(request: DescribeBlockRequest): DescribeBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlock', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockchainApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  current?: int32(name='Current', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  status?: string(name='Status', position='Body'),
}

model DescribeBlockchainApplicationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    applyHistoryList?: [ 
      {
        bizid?: string(name='Bizid'),
        createtime?: long(name='Createtime'),
        id?: int32(name='Id'),
        rejectReason?: string(name='RejectReason'),
        reqAddr?: string(name='ReqAddr'),
        signedAddr?: string(name='SignedAddr'),
        status?: int32(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='ApplyHistoryList'),
    pagination?: {
      current?: int32(name='Current'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeBlockchainApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainApplicationResponseBody(name='body'),
}

async function describeBlockchainApplication(request: DescribeBlockchainApplicationRequest): DescribeBlockchainApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainApplication', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockchainConfigOptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  purpose?: string(name='Purpose', position='Query'),
}

model DescribeBlockchainConfigOptionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model DescribeBlockchainConfigOptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainConfigOptionResponseBody(name='body'),
}

async function describeBlockchainConfigOption(request: DescribeBlockchainConfigOptionRequest): DescribeBlockchainConfigOptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainConfigOption', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBlockchainCreateTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  current?: int32(name='Current', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model DescribeBlockchainCreateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockchainCreateTasks?: [ 
      {
        bizid?: string(name='Bizid'),
        createTime?: long(name='CreateTime'),
        memo?: string(name='Memo'),
        name?: string(name='Name'),
        status?: string(name='Status'),
      }
    ](name='BlockchainCreateTasks'),
    pagination?: {
      current?: int32(name='Current'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeBlockchainCreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainCreateTaskResponseBody(name='body'),
}

async function describeBlockchainCreateTask(request: DescribeBlockchainCreateTaskRequest): DescribeBlockchainCreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainCreateTask', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockchainCreationConfigOptionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  purpose?: string(name='Purpose', position='Query'),
}

model DescribeBlockchainCreationConfigOptionsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model DescribeBlockchainCreationConfigOptionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainCreationConfigOptionsResponseBody(name='body'),
}

async function describeBlockchainCreationConfigOptions(request: DescribeBlockchainCreationConfigOptionsRequest): DescribeBlockchainCreationConfigOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainCreationConfigOptions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBlockchainInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeBlockchainInfoResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    bizid?: string(name='Bizid'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    isRole?: boolean(name='IsRole'),
    nodeInfoList?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfoList'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
}

model DescribeBlockchainInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainInfoResponseBody(name='body'),
}

async function describeBlockchainInfo(request: DescribeBlockchainInfoRequest): DescribeBlockchainInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainInfo', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockchainSchemaRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeBlockchainSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model DescribeBlockchainSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainSchemaResponseBody(name='body'),
}

async function describeBlockchainSchema(request: DescribeBlockchainSchemaRequest): DescribeBlockchainSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainSchema', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockchainSchemaDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  schemaId?: long(name='SchemaId', position='Body'),
}

model DescribeBlockchainSchemaDetailResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model DescribeBlockchainSchemaDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainSchemaDetailResponseBody(name='body'),
}

async function describeBlockchainSchemaDetail(request: DescribeBlockchainSchemaDetailRequest): DescribeBlockchainSchemaDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainSchemaDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockchainSchemaFileOSSPropertiesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeBlockchainSchemaFileOSSPropertiesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    bucketName?: string(name='BucketName'),
    endpoint?: string(name='Endpoint'),
    folderName?: string(name='FolderName'),
  }(name='Result'),
}

model DescribeBlockchainSchemaFileOSSPropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainSchemaFileOSSPropertiesResponseBody(name='body'),
}

async function describeBlockchainSchemaFileOSSProperties(request: DescribeBlockchainSchemaFileOSSPropertiesRequest): DescribeBlockchainSchemaFileOSSPropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainSchemaFileOSSProperties', 'POST', '/', 'json', true, 'form', request);
}

model DescribeBlockchainSchemaTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeBlockchainSchemaTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    schemaList?: [ 
      {
        createTime?: long(name='CreateTime'),
        description?: string(name='Description'),
        id?: long(name='Id'),
        isTemplate?: int32(name='IsTemplate'),
        name?: string(name='Name'),
        updateTime?: long(name='UpdateTime'),
        version?: long(name='Version'),
      }
    ](name='SchemaList'),
  }(name='Result'),
}

model DescribeBlockchainSchemaTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlockchainSchemaTemplatesResponseBody(name='body'),
}

async function describeBlockchainSchemaTemplates(request: DescribeBlockchainSchemaTemplatesRequest): DescribeBlockchainSchemaTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockchainSchemaTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCSIGatewayEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DescribeCSIGatewayEndpointResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeCSIGatewayEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCSIGatewayEndpointResponseBody(name='body'),
}

async function describeCSIGatewayEndpoint(request: DescribeCSIGatewayEndpointRequest): DescribeCSIGatewayEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCSIGatewayEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCandidateOrganizationsRequest {
  regionId?: string(name='RegionId', example='DescribeCandidateOrganizations', position='Host'),
  location?: string(name='Location', example='DescribeCandidateOrganizations', position='Body'),
}

model DescribeCandidateOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      clusterState?: string(name='ClusterState', example='Running'),
      organizationId?: string(name='OrganizationId', example='peers-1oxw31d04****'),
      organizationName?: string(name='OrganizationName', example='org1'),
      serviceState?: string(name='ServiceState', example='Running'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCandidateOrganizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCandidateOrganizationsResponseBody(name='body'),
}

async function describeCandidateOrganizations(request: DescribeCandidateOrganizationsRequest): DescribeCandidateOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCandidateOrganizations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeChaincodeCollectionConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', position='Body'),
  location?: string(name='Location', position='Body'),
}

model DescribeChaincodeCollectionConfigResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeChaincodeCollectionConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChaincodeCollectionConfigResponseBody(name='body'),
}

async function describeChaincodeCollectionConfig(request: DescribeChaincodeCollectionConfigRequest): DescribeChaincodeCollectionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChaincodeCollectionConfig', 'POST', '/', 'json', true, 'form', request);
}

model DescribeChaincodeDefinitionTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeChaincodeDefinitionTaskResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    approvers?: [ string ](name='Approvers'),
    channelName?: string(name='ChannelName'),
    content?: {
      chaincodeDefinition?: {
        chaincodePackageId?: string(name='ChaincodePackageId'),
        collectionConfig?: string(name='CollectionConfig'),
        endorsementPolicy?: string(name='EndorsementPolicy'),
        initRequired?: boolean(name='InitRequired'),
        name?: string(name='Name'),
        sequence?: long(name='Sequence'),
        version?: string(name='Version'),
      }(name='ChaincodeDefinition'),
    }(name='Content'),
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeChaincodeDefinitionTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChaincodeDefinitionTaskResponseBody(name='body'),
}

async function describeChaincodeDefinitionTask(request: DescribeChaincodeDefinitionTaskRequest): DescribeChaincodeDefinitionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChaincodeDefinitionTask', 'POST', '/', 'json', true, 'form', request);
}

model DescribeChaincodeUploadPolicyRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d04****', position='Body'),
}

model DescribeChaincodeUploadPolicyResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    accessId?: string(name='AccessId', example='accessId'),
    dir?: string(name='Dir', example='test3/4bd1de21-2fff-4405-a8e9-f864c4bee24f'),
    expire?: int32(name='Expire', example='1533025590'),
    host?: string(name='Host', example='https://chaincode.oss-cn-beijing.aliyuncs.com'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAxOC0wNy0zMVQwODoyNjozMC40NzdaIiwiY29uZGl'),
    signature?: string(name='Signature', example='signature'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeChaincodeUploadPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChaincodeUploadPolicyResponseBody(name='body'),
}

async function describeChaincodeUploadPolicy(request: DescribeChaincodeUploadPolicyRequest): DescribeChaincodeUploadPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChaincodeUploadPolicy', 'POST', '/', 'json', true, 'form', request);
}

model DescribeChannelChaincodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeChannelChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      binding?: boolean(name='Binding'),
      chaincodeId?: string(name='ChaincodeId'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      consortiumId?: string(name='ConsortiumId'),
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      deployTime?: string(name='DeployTime'),
      endorsePolicy?: string(name='EndorsePolicy'),
      installed?: string(name='Installed'),
      management?: boolean(name='Management'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      state?: string(name='State'),
      version?: string(name='Version'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeChannelChaincodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelChaincodesResponseBody(name='body'),
}

async function describeChannelChaincodes(request: DescribeChannelChaincodesRequest): DescribeChannelChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeChannelMembersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  channelId: string(name='ChannelId', example='chan-channelx-1l1hmckuu****', position='Query'),
  organizationId?: string(name='OrganizationId', position='Query'),
}

model DescribeChannelMembersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime', example='1544411108000'),
      channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
      description?: string(name='Description', example='description'),
      domain?: string(name='Domain', example='hello'),
      inviteTime?: string(name='InviteTime', example='1544411108000'),
      name?: string(name='Name', example='name'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa1-1oxw31d046jtl'),
      state?: string(name='State', example='Running'),
      withPeer?: boolean(name='WithPeer', example='true'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeChannelMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelMembersResponseBody(name='body'),
}

async function describeChannelMembers(request: DescribeChannelMembersRequest): DescribeChannelMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelMembers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChannelTriggersRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Query'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DescribeChannelTriggersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      checkpoint?: {
        errorCount?: long(name='ErrorCount'),
        height?: long(name='Height'),
        index?: long(name='Index'),
        type?: string(name='Type'),
      }(name='Checkpoint'),
      createTime?: long(name='CreateTime'),
      errorMessage?: string(name='ErrorMessage'),
      name?: string(name='Name'),
      options?: string(name='Options'),
      source?: string(name='Source'),
      status?: int32(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeChannelTriggersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeChannelTriggersResponseBody(name='body'),
}

async function describeChannelTriggers(request: DescribeChannelTriggersRequest): DescribeChannelTriggersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannelTriggers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudIntegrationServiceTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Body'),
  service: string(name='Service', position='Body'),
}

model DescribeCloudIntegrationServiceTokenResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    history?: [ 
      {
        service?: string(name='Service'),
        token?: string(name='Token'),
        type?: string(name='Type'),
      }
    ](name='History'),
    service?: string(name='Service'),
    token?: string(name='Token'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeCloudIntegrationServiceTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudIntegrationServiceTokenResponseBody(name='body'),
}

async function describeCloudIntegrationServiceToken(request: DescribeCloudIntegrationServiceTokenRequest): DescribeCloudIntegrationServiceTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudIntegrationServiceToken', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCloudServiceOrganizationStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DescribeCloudServiceOrganizationStatusResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      grantPrivilegeUrl?: string(name='GrantPrivilegeUrl'),
      organizationId?: string(name='OrganizationId'),
      serviceOpenStatus?: boolean(name='ServiceOpenStatus'),
      serviceOpenUrl?: string(name='ServiceOpenUrl'),
      servicePrivilegeStatus?: boolean(name='ServicePrivilegeStatus'),
      serviceType?: string(name='ServiceType'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeCloudServiceOrganizationStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudServiceOrganizationStatusResponseBody(name='body'),
}

async function describeCloudServiceOrganizationStatus(request: DescribeCloudServiceOrganizationStatusRequest): DescribeCloudServiceOrganizationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudServiceOrganizationStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCloudServiceTypeStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Body'),
  serviceType: string(name='ServiceType', position='Body'),
}

model DescribeCloudServiceTypeStatusResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    grantPrivilegeUrl?: string(name='GrantPrivilegeUrl'),
    organizationId?: string(name='OrganizationId'),
    serviceOpenStatus?: boolean(name='ServiceOpenStatus'),
    serviceOpenUrl?: string(name='ServiceOpenUrl'),
    servicePrivilegeStatus?: boolean(name='ServicePrivilegeStatus'),
    serviceType?: string(name='ServiceType'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeCloudServiceTypeStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCloudServiceTypeStatusResponseBody(name='body'),
}

async function describeCloudServiceTypeStatus(request: DescribeCloudServiceTypeStatusRequest): DescribeCloudServiceTypeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCloudServiceTypeStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumAdminStatusRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeConsortiumAdminStatusResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      consortiumAdministrator?: boolean(name='ConsortiumAdministrator', example='true'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumAdminStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumAdminStatusResponseBody(name='body'),
}

async function describeConsortiumAdminStatus(request: DescribeConsortiumAdminStatusRequest): DescribeConsortiumAdminStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumAdminStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumChaincodesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeConsortiumChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jmo0np'),
      channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
      channelName?: string(name='ChannelName', example='cname'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      createTime?: string(name='CreateTime', example='1544411108000'),
      deployTime?: string(name='DeployTime', example='1544411108000'),
      endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
      input?: string(name='Input', example='input'),
      install?: boolean(name='Install', example='true'),
      management?: boolean(name='Management'),
      message?: string(name='Message', example='ok'),
      name?: string(name='Name', example='sacc'),
      path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
      providerId?: string(name='ProviderId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      providerName?: string(name='ProviderName', example='name'),
      state?: string(name='State', example='Instantiatable'),
      type?: int32(name='Type', example='1'),
      version?: string(name='Version', example='1.0'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumChaincodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumChaincodesResponseBody(name='body'),
}

async function describeConsortiumChaincodes(request: DescribeConsortiumChaincodesRequest): DescribeConsortiumChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumChannelsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeConsortiumChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout', example='2'),
      blockCount?: int32(name='BlockCount', example='2'),
      chaincodeCount?: int32(name='ChaincodeCount', example='2'),
      channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      createTime?: string(name='CreateTime', example='1544411108000'),
      deleteTime?: string(name='DeleteTime', example='1544411108000'),
      deleted?: boolean(name='Deleted', example='true'),
      hybird?: boolean(name='Hybird'),
      id?: int32(name='Id', description='Id', example='2'),
      maxMessageCount?: int32(name='MaxMessageCount', example='2'),
      memberCount?: int32(name='MemberCount', example='2'),
      memberJoinedCount?: string(name='MemberJoinedCount', example='3'),
      name?: string(name='Name', example='name'),
      needJoined?: boolean(name='NeedJoined', example='true'),
      ownerBid?: string(name='OwnerBid', example='26842'),
      ownerName?: string(name='OwnerName', example='uid-*'),
      ownerUid?: int32(name='OwnerUid', example='212'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes', example='2'),
      requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      state?: string(name='State', example='Running'),
      supportChannelConfig?: boolean(name='SupportChannelConfig', example='true'),
      updateTime?: string(name='UpdateTime', example='1544411108000'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumChannelsResponseBody(name='body'),
}

async function describeConsortiumChannels(request: DescribeConsortiumChannelsRequest): DescribeConsortiumChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumConfigRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeConsortiumConfigResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    channelPolicy?: [ string ](name='ChannelPolicy'),
    ordererType?: [ string ](name='OrdererType'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumConfigResponseBody(name='body'),
}

async function describeConsortiumConfig(request: DescribeConsortiumConfigRequest): DescribeConsortiumConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsortiumDeletableRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeConsortiumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    codeName?: string(name='CodeName', example='codename'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    deletable?: boolean(name='Deletable', example='true'),
    description?: string(name='Description', example='description'),
    domain?: string(name='Domain', example='domain'),
    name?: string(name='Name', example='name'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    state?: string(name='State', example='Running'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumDeletableResponseBody(name='body'),
}

async function describeConsortiumDeletable(request: DescribeConsortiumDeletableRequest): DescribeConsortiumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumMemberApprovalRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeConsortiumMemberApprovalResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      channelCreatePolicy?: string(name='ChannelCreatePolicy', example='Any'),
      confirmTime?: string(name='ConfirmTime', example='1544411108000'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      domainName?: string(name='DomainName', example='domain'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      organizationName?: string(name='OrganizationName', example='orgname'),
      state?: string(name='State', example='Running'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumMemberApprovalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumMemberApprovalResponseBody(name='body'),
}

async function describeConsortiumMemberApproval(request: DescribeConsortiumMemberApprovalRequest): DescribeConsortiumMemberApprovalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumMemberApproval', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumMembersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeConsortiumMembersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      description?: string(name='Description', example='Description'),
      domain?: string(name='Domain', example='Domain'),
      joinedTime?: string(name='JoinedTime', example='1544411108000'),
      name?: string(name='Name', example='name'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumMembersResponseBody(name='body'),
}

async function describeConsortiumMembers(request: DescribeConsortiumMembersRequest): DescribeConsortiumMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumOrderersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='DescribeConsortiumOrderers', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model DescribeConsortiumOrderersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      domain?: string(name='Domain', example='domain'),
      instanceType?: string(name='InstanceType', example='ecs.n1.small'),
      name?: string(name='Name', example='order1'),
      port?: int32(name='Port', example='7050'),
      updateTime?: string(name='UpdateTime', example='1544411108000'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumOrderersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumOrderersResponseBody(name='body'),
}

async function describeConsortiumOrderers(request: DescribeConsortiumOrderersRequest): DescribeConsortiumOrderersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumOrderers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeConsortiumSpecsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeConsortiumSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      enable?: boolean(name='Enable', example='true'),
      name?: string(name='Name', example='basic'),
      title?: string(name='Title'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumSpecsResponseBody(name='body'),
}

async function describeConsortiumSpecs(request: DescribeConsortiumSpecsRequest): DescribeConsortiumSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiumSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeConsortiumsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeConsortiumsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      CAName?: string(name='CAName'),
      CAUrl?: string(name='CAUrl'),
      channelCount?: int32(name='ChannelCount', example='2'),
      channelPolicy?: string(name='ChannelPolicy', example='any'),
      codeName?: string(name='CodeName', example='code'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
      createTime?: string(name='CreateTime', example='1544411108000'),
      domain?: string(name='Domain', example='domain'),
      expireState?: string(name='ExpireState'),
      expiredTime?: string(name='ExpiredTime', example='1544411108000'),
      hybrid?: boolean(name='Hybrid', example='true'),
      MSP?: string(name='MSP'),
      majorVersion?: string(name='MajorVersion'),
      name?: string(name='Name', example='name'),
      ordererCount?: int32(name='OrdererCount'),
      organizationCount?: int32(name='OrganizationCount', example='2'),
      ownerBid?: string(name='OwnerBid', example='26842'),
      ownerName?: string(name='OwnerName', example='ownername'),
      ownerUid?: long(name='OwnerUid', example='1287126'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      specName?: string(name='SpecName', example='basic'),
      state?: string(name='State', example='Pending'),
      supportChannelConfig?: boolean(name='SupportChannelConfig', example='true'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeConsortiumsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeConsortiumsResponseBody(name='body'),
}

async function describeConsortiums(request: DescribeConsortiumsRequest): DescribeConsortiumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeConsortiums', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDownloadPathsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeDownloadPathsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    bizviewUrl?: string(name='BizviewUrl'),
    certUrl?: string(name='CertUrl'),
    sdkUrl?: string(name='SdkUrl'),
  }(name='Result'),
}

model DescribeDownloadPathsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadPathsResponseBody(name='body'),
}

async function describeDownloadPaths(request: DescribeDownloadPathsRequest): DescribeDownloadPathsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadPaths', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDownloadPathsOfContractChainRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeDownloadPathsOfContractChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    caUrl?: string(name='CaUrl'),
    certUrl?: string(name='CertUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
}

model DescribeDownloadPathsOfContractChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadPathsOfContractChainResponseBody(name='body'),
}

async function describeDownloadPathsOfContractChain(request: DescribeDownloadPathsOfContractChainRequest): DescribeDownloadPathsOfContractChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadPathsOfContractChain', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDownloadPathsOfNotaryChainRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeDownloadPathsOfNotaryChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    bizviewUrl?: string(name='BizviewUrl'),
    certUrl?: string(name='CertUrl'),
    sdkUrl?: string(name='SdkUrl'),
  }(name='Result'),
}

model DescribeDownloadPathsOfNotaryChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadPathsOfNotaryChainResponseBody(name='body'),
}

async function describeDownloadPathsOfNotaryChain(request: DescribeDownloadPathsOfNotaryChainRequest): DescribeDownloadPathsOfNotaryChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDownloadPathsOfNotaryChain', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEcosphereSpecsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeEcosphereSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      enable?: boolean(name='Enable', example='true'),
      name?: string(name='Name', example='enterprise'),
      title?: string(name='Title'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeEcosphereSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEcosphereSpecsResponseBody(name='body'),
}

async function describeEcosphereSpecs(request: DescribeEcosphereSpecsRequest): DescribeEcosphereSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEcosphereSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEthereumRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', position='Body'),
}

model DescribeEthereumResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consensus?: string(name='Consensus'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    networkId?: string(name='NetworkId'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumResponseBody(name='body'),
}

async function describeEthereum(request: DescribeEthereumRequest): DescribeEthereumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereum', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumClientUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', position='Body'),
}

model DescribeEthereumClientUsersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      username?: string(name='Username'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumClientUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumClientUsersResponseBody(name='body'),
}

async function describeEthereumClientUsers(request: DescribeEthereumClientUsersRequest): DescribeEthereumClientUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumClientUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumDeletableRequest {
  regionId?: string(name='RegionId', position='Host'),
  ethereumId: string(name='EthereumId', position='Body'),
}

model DescribeEthereumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    deletable?: boolean(name='Deletable'),
    ethereumId?: string(name='EthereumId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumDeletableResponseBody(name='body'),
}

async function describeEthereumDeletable(request: DescribeEthereumDeletableRequest): DescribeEthereumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumInvitaionRequest {
  regionId?: string(name='RegionId', position='Host'),
  token: string(name='Token', position='Body'),
}

model DescribeEthereumInvitaionResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consensus?: string(name='Consensus'),
    createTime?: string(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    networkId?: string(name='NetworkId'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumInvitaionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumInvitaionResponseBody(name='body'),
}

async function describeEthereumInvitaion(request: DescribeEthereumInvitaionRequest): DescribeEthereumInvitaionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumInvitaion', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumInviteeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', position='Body'),
}

model DescribeEthereumInviteeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      description?: string(name='Description'),
      ethereumId?: string(name='EthereumId'),
      ethereumName?: string(name='EthereumName'),
      id?: string(name='Id'),
      networkId?: long(name='NetworkId'),
      nodeName?: string(name='NodeName'),
      publicIp?: string(name='PublicIp'),
      regionId?: string(name='RegionId'),
      rpcPort?: string(name='RpcPort'),
      state?: string(name='State'),
      wsPort?: string(name='WsPort'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumInviteeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumInviteeResponseBody(name='body'),
}

async function describeEthereumInvitee(request: DescribeEthereumInviteeRequest): DescribeEthereumInviteeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumInvitee', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', position='Body'),
}

model DescribeEthereumNodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    ethereumId?: string(name='EthereumId'),
    ethereumName?: string(name='EthereumName'),
    id?: string(name='Id'),
    networkId?: string(name='NetworkId'),
    nodeName?: string(name='NodeName'),
    publicIp?: string(name='PublicIp'),
    regionId?: string(name='RegionId'),
    rpcPort?: int32(name='RpcPort'),
    state?: string(name='State'),
    wsPort?: int32(name='WsPort'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumNodeResponseBody(name='body'),
}

async function describeEthereumNode(request: DescribeEthereumNodeRequest): DescribeEthereumNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumNode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumNodeConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', position='Body'),
}

model DescribeEthereumNodeConfigurationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      genesisJson?: string(name='GenesisJson'),
      ip?: string(name='IP'),
      nodePub?: string(name='NodePub'),
      p2pPort?: int32(name='P2pPort'),
      permissionedNodesJson?: string(name='PermissionedNodesJson'),
      raftPort?: int32(name='RaftPort'),
      rpcPort?: int32(name='RpcPort'),
      staticNodesJson?: string(name='StaticNodesJson'),
      TMJson?: string(name='TMJson'),
      TMPort?: int32(name='TMPort'),
      TMPub?: string(name='TMPub'),
      WSPort?: int32(name='WSPort'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumNodeConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumNodeConfigurationResponseBody(name='body'),
}

async function describeEthereumNodeConfiguration(request: DescribeEthereumNodeConfigurationRequest): DescribeEthereumNodeConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumNodeConfiguration', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumNodeInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', position='Body'),
}

model DescribeEthereumNodeInfoResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumNodeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumNodeInfoResponseBody(name='body'),
}

async function describeEthereumNodeInfo(request: DescribeEthereumNodeInfoRequest): DescribeEthereumNodeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumNodeInfo', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumNodeLogsRequest {
  regionId?: string(name='RegionId', position='Host'),
  lines?: string(name='Lines', position='Body'),
  nodeId: string(name='NodeId', position='Body'),
  target?: string(name='Target', position='Body'),
}

model DescribeEthereumNodeLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumNodeLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumNodeLogsResponseBody(name='body'),
}

async function describeEthereumNodeLogs(request: DescribeEthereumNodeLogsRequest): DescribeEthereumNodeLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumNodeLogs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeEthereumNodesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeEthereumNodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consensus?: string(name='Consensus'),
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      description?: string(name='Description'),
      ethereumId?: string(name='EthereumId'),
      ethereumName?: string(name='EthereumName'),
      external?: boolean(name='External'),
      id?: string(name='Id'),
      networkId?: long(name='NetworkId'),
      nodeName?: string(name='NodeName'),
      publicIp?: string(name='PublicIp'),
      regionId?: string(name='RegionId'),
      rpcPort?: string(name='RpcPort'),
      state?: string(name='State'),
      validator?: boolean(name='Validator'),
      wsPort?: string(name='WsPort'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumNodesResponseBody(name='body'),
}

async function describeEthereumNodes(request: DescribeEthereumNodesRequest): DescribeEthereumNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereumNodes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEthereumsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeEthereumsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consensus?: string(name='Consensus'),
      createTime?: long(name='CreateTime'),
      creator?: string(name='Creator'),
      deletable?: boolean(name='Deletable'),
      description?: string(name='Description'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      networkId?: string(name='NetworkId'),
      nodeNumber?: int32(name='NodeNumber'),
      regionId?: string(name='RegionId'),
      state?: string(name='State'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeEthereumsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeEthereumsResponseBody(name='body'),
}

async function describeEthereums(request: DescribeEthereumsRequest): DescribeEthereumsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEthereums', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExplorerRequest {
  regionId?: string(name='RegionId', position='Host'),
  exBody?: string(name='ExBody', position='Query'),
  exMethod: string(name='ExMethod', position='Query'),
  exUrl?: string(name='ExUrl', position='Query'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeExplorerResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeExplorerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExplorerResponseBody(name='body'),
}

async function describeExplorer(request: DescribeExplorerRequest): DescribeExplorerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExplorer', 'POST', '/', 'json', true, 'form', request);
}

model DescribeExplorerURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', position='Body'),
}

model DescribeExplorerURLResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeExplorerURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeExplorerURLResponseBody(name='body'),
}

async function describeExplorerURL(request: DescribeExplorerURLRequest): DescribeExplorerURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExplorerURL', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChaincodeEndorsePolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeName: string(name='ChaincodeName', position='Body'),
  channelId?: string(name='ChannelId', position='Body'),
  organizationId?: string(name='OrganizationId', position='Body'),
}

model DescribeFabricChaincodeEndorsePolicyResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChaincodeEndorsePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChaincodeEndorsePolicyResponseBody(name='body'),
}

async function describeFabricChaincodeEndorsePolicy(request: DescribeFabricChaincodeEndorsePolicyRequest): DescribeFabricChaincodeEndorsePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChaincodeEndorsePolicy', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChaincodeLogsRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId?: string(name='ChaincodeId', position='Query'),
  lines?: string(name='Lines', position='Query'),
  offset?: int32(name='Offset', position='Query'),
  organizationId: string(name='OrganizationId', position='Query'),
  peerName: string(name='PeerName', position='Query'),
}

model DescribeFabricChaincodeLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChaincodeLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChaincodeLogsResponseBody(name='body'),
}

async function describeFabricChaincodeLogs(request: DescribeFabricChaincodeLogsRequest): DescribeFabricChaincodeLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChaincodeLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricChannelConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricChannelConfigResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    absoluteMaxBytes?: long(name='AbsoluteMaxBytes'),
    batchTimeout?: string(name='BatchTimeout'),
    maxMessageCount?: long(name='MaxMessageCount'),
    preferredMaxBytes?: long(name='PreferredMaxBytes'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChannelConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChannelConfigResponseBody(name='body'),
}

async function describeFabricChannelConfig(request: DescribeFabricChannelConfigRequest): DescribeFabricChannelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChannelConfig', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChannelOrdererRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricChannelOrdererResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      address?: string(name='Address'),
      certificate?: string(name='Certificate'),
      key?: string(name='Key'),
      tlsroot?: string(name='Tlsroot'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChannelOrdererResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChannelOrdererResponseBody(name='body'),
}

async function describeFabricChannelOrderer(request: DescribeFabricChannelOrdererRequest): DescribeFabricChannelOrdererResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChannelOrderer', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricChannelOrganizationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricChannelOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    anchorPeers?: [ 
      {
        host?: string(name='Host'),
        port?: int32(name='Port'),
      }
    ](name='AnchorPeers'),
    crls?: string(name='Crls'),
    mspId?: string(name='MspId'),
    mspType?: string(name='MspType'),
    orderer?: boolean(name='Orderer'),
    ordererNodes?: [ 
      {
        address?: string(name='Address'),
        certificate?: string(name='Certificate'),
        key?: string(name='Key'),
        tlsroot?: string(name='Tlsroot'),
      }
    ](name='OrdererNodes'),
    rootCertificates?: string(name='RootCertificates'),
    tlsRootCertificates?: string(name='TlsRootCertificates'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricChannelOrganizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricChannelOrganizationsResponseBody(name='body'),
}

async function describeFabricChannelOrganizations(request: DescribeFabricChannelOrganizationsRequest): DescribeFabricChannelOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricChannelOrganizations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricJoinRequestRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricJoinRequestResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricJoinRequestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricJoinRequestResponseBody(name='body'),
}

async function describeFabricJoinRequest(request: DescribeFabricJoinRequestRequest): DescribeFabricJoinRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricJoinRequest', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricJoinResponseRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricJoinResponseResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricJoinResponseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricJoinResponseResponseBody(name='body'),
}

async function describeFabricJoinResponse(request: DescribeFabricJoinResponseRequest): DescribeFabricJoinResponseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricJoinResponse', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricManagementChaincodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricManagementChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      input?: string(name='Input'),
      name?: string(name='Name'),
      path?: long(name='Path'),
      type?: int32(name='Type'),
      version?: string(name='Version'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricManagementChaincodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricManagementChaincodesResponseBody(name='body'),
}

async function describeFabricManagementChaincodes(request: DescribeFabricManagementChaincodesRequest): DescribeFabricManagementChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricManagementChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationChaincodePackageRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricOrganizationChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationChaincodePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationChaincodePackageResponseBody(name='body'),
}

async function describeFabricOrganizationChaincodePackage(request: DescribeFabricOrganizationChaincodePackageRequest): DescribeFabricOrganizationChaincodePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationChaincodePackage', 'POST', '/', 'json', true, 'form', request);
}

model DescribeFabricOrganizationEgressRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DescribeFabricOrganizationEgressResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricOrganizationEgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricOrganizationEgressResponseBody(name='body'),
}

async function describeFabricOrganizationEgress(request: DescribeFabricOrganizationEgressRequest): DescribeFabricOrganizationEgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricOrganizationEgress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFabricPeerChannelsRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeFabricPeerChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeFabricPeerChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFabricPeerChannelsResponseBody(name='body'),
}

async function describeFabricPeerChannels(request: DescribeFabricPeerChannelsRequest): DescribeFabricPeerChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFabricPeerChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeGovernanceTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model DescribeGovernanceTaskResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelName?: string(name='ChannelName'),
    content?: {
      addedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='AddedOrganizations'),
      chaincodeSpecPkg?: {
        cs?: {
          input?: string(name='Input'),
          name?: string(name='Name'),
          path?: string(name='Path'),
          type?: int32(name='Type'),
          version?: string(name='Version'),
        }(name='Cs'),
        policy?: string(name='Policy'),
        sha256?: string(name='Sha256'),
      }(name='ChaincodeSpecPkg'),
      ordererConfig?: {
        batchTimeout?: string(name='BatchTimeout'),
        maxMessageCount?: int32(name='MaxMessageCount'),
        preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      }(name='OrdererConfig'),
      raw?: string(name='Raw'),
      removedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='RemovedOrganizations'),
      rwSets?: string(name='RwSets'),
    }(name='Content'),
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeGovernanceTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGovernanceTaskResponseBody(name='body'),
}

async function describeGovernanceTask(request: DescribeGovernanceTaskRequest): DescribeGovernanceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGovernanceTask', 'POST', '/', 'json', true, 'form', request);
}

model DescribeGovernanceTasksRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeGovernanceTasksResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      channelName?: string(name='ChannelName'),
      content?: {
        addedOrganizations?: [ 
          {
            anchorPeers?: [ 
              {
                host?: string(name='Host'),
                port?: int32(name='Port'),
              }
            ](name='AnchorPeers'),
            crls?: string(name='Crls'),
            mspId?: string(name='MspId'),
            mspType?: string(name='MspType'),
            orderer?: boolean(name='Orderer'),
            ordererNodes?: [ 
              {
                address?: string(name='Address'),
                certificate?: string(name='Certificate'),
                key?: string(name='Key'),
                tlsroot?: string(name='Tlsroot'),
              }
            ](name='OrdererNodes'),
            rootCertificates?: string(name='RootCertificates'),
            tlsRootCertificates?: string(name='TlsRootCertificates'),
          }
        ](name='AddedOrganizations'),
        chaincodeSpecPkg?: {
          cs?: {
            input?: string(name='Input'),
            name?: string(name='Name'),
            path?: string(name='Path'),
            type?: int32(name='Type'),
            version?: string(name='Version'),
          }(name='Cs'),
          policy?: string(name='Policy'),
          sha256?: string(name='Sha256'),
        }(name='ChaincodeSpecPkg'),
        ordererConfig?: {
          batchTimeout?: string(name='BatchTimeout'),
          maxMessageCount?: int32(name='MaxMessageCount'),
          preferredMaxBytes?: int32(name='PreferredMaxBytes'),
        }(name='OrdererConfig'),
        raw?: string(name='Raw'),
        removedOrganizations?: [ 
          {
            anchorPeers?: [ 
              {
                host?: string(name='Host'),
                port?: int32(name='Port'),
              }
            ](name='AnchorPeers'),
            crls?: string(name='Crls'),
            mspId?: string(name='MspId'),
            mspType?: string(name='MspType'),
            orderer?: boolean(name='Orderer'),
            ordererNodes?: [ 
              {
                address?: string(name='Address'),
                certificate?: string(name='Certificate'),
                key?: string(name='Key'),
                tlsroot?: string(name='Tlsroot'),
              }
            ](name='OrdererNodes'),
            rootCertificates?: string(name='RootCertificates'),
            tlsRootCertificates?: string(name='TlsRootCertificates'),
          }
        ](name='RemovedOrganizations'),
        rwSets?: string(name='RwSets'),
      }(name='Content'),
      createTime?: long(name='CreateTime'),
      creator?: string(name='Creator'),
      description?: string(name='Description'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
      type?: string(name='Type'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeGovernanceTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeGovernanceTasksResponseBody(name='body'),
}

async function describeGovernanceTasks(request: DescribeGovernanceTasksRequest): DescribeGovernanceTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGovernanceTasks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInvitationCodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Body'),
}

model DescribeInvitationCodeResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='11'),
  dynamicMessage?: string(name='DynamicMessage', example='11'),
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    accepted?: boolean(name='Accepted', example='true'),
    code?: string(name='Code', example='code'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    email?: string(name='Email', example='abc@126.com'),
    expireTime?: string(name='ExpireTime', example='1544411108000'),
    id?: int32(name='Id', description='Id', example='2'),
    sendTime?: string(name='SendTime', example='1544411108000'),
    senderBid?: string(name='SenderBid', example='27534'),
    senderId?: long(name='SenderId', example='26345345'),
    senderName?: string(name='SenderName', example='uid-35324'),
    url?: string(name='Url', description='URL', example='http://baas.console.aliyun.test/invite?code=92e7ef1934892'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInvitationCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvitationCodeResponseBody(name='body'),
}

async function describeInvitationCode(request: DescribeInvitationCodeRequest): DescribeInvitationCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvitationCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInvitationListRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  consortiumId: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****', position='Body'),
}

model DescribeInvitationListResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      code?: string(name='Code', example='200'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      email?: string(name='Email', example='abc@alibaba.com'),
      expireTime?: string(name='ExpireTime', example='1544411108000'),
      sendTime?: string(name='SendTime', example='1544411108000'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInvitationListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvitationListResponseBody(name='body'),
}

async function describeInvitationList(request: DescribeInvitationListRequest): DescribeInvitationListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvitationList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInviterRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  code: string(name='Code', example='200', position='Body'),
}

model DescribeInviterResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
    consortiumName?: string(name='ConsortiumName', example='name'),
    expireTime?: string(name='ExpireTime', example='1544411108000'),
    inviterId?: long(name='InviterId', example='3524234'),
    inviterName?: string(name='InviterName', example='name'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInviterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInviterResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function describeInviter(request: DescribeInviterRequest): DescribeInviterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInviter', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLatest15BlocksRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeLatest15BlocksResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeLatest15BlocksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLatest15BlocksResponseBody(name='body'),
}

async function describeLatest15Blocks(request: DescribeLatest15BlocksRequest): DescribeLatest15BlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLatest15Blocks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLatest15TransDigestsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeLatest15TransDigestsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeLatest15TransDigestsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLatest15TransDigestsResponseBody(name='body'),
}

async function describeLatest15TransDigests(request: DescribeLatest15TransDigestsRequest): DescribeLatest15TransDigestsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLatest15TransDigests', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLatestBlocksRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeLatestBlocksResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeLatestBlocksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLatestBlocksResponseBody(name='body'),
}

async function describeLatestBlocks(request: DescribeLatestBlocksRequest): DescribeLatestBlocksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLatestBlocks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeLatestTransactionDigestsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeLatestTransactionDigestsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model DescribeLatestTransactionDigestsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLatestTransactionDigestsResponseBody(name='body'),
}

async function describeLatestTransactionDigests(request: DescribeLatestTransactionDigestsRequest): DescribeLatestTransactionDigestsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLatestTransactionDigests', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMemberRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeMemberRoleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    role?: int32(name='Role'),
  }(name='Result'),
}

model DescribeMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMemberRoleResponseBody(name='body'),
}

async function describeMemberRole(request: DescribeMemberRoleRequest): DescribeMemberRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMemberRole', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMembersRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  current?: int32(name='Current', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model DescribeMembersResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    memberList?: [ string ](name='MemberList'),
    pagination?: {
      current?: int32(name='Current'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='Pagination'),
  }(name='Result'),
}

model DescribeMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMembersResponseBody(name='body'),
}

async function describeMembers(request: DescribeMembersRequest): DescribeMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMetricRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Query'),
  innerIp?: string(name='InnerIp', position='Body'),
  metric?: string(name='Metric', position='Body'),
  period?: string(name='Period', position='Body'),
  port?: string(name='Port', position='Body'),
  timeArea?: string(name='TimeArea', position='Body'),
}

model DescribeMetricResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DescribeMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMetricResponseBody(name='body'),
}

async function describeMetric(request: DescribeMetricRequest): DescribeMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetric', 'POST', '/', 'json', true, 'form', request);
}

model DescribeMyBlockchainsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeMyBlockchainsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      bizid?: string(name='Bizid'),
      createtime?: long(name='Createtime'),
      id?: int32(name='Id'),
      rejectReason?: string(name='RejectReason'),
      reqAddr?: string(name='ReqAddr'),
      signedAddr?: string(name='SignedAddr'),
      status?: int32(name='Status'),
      updatetime?: long(name='Updatetime'),
      username?: string(name='Username'),
    }
  ](name='Result'),
}

model DescribeMyBlockchainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMyBlockchainsResponseBody(name='body'),
}

async function describeMyBlockchains(request: DescribeMyBlockchainsRequest): DescribeMyBlockchainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMyBlockchains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMyBlockchanInfosRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeMyBlockchanInfosResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      abnormalNodes?: int32(name='AbnormalNodes'),
      bizid?: string(name='Bizid'),
      blockHeight?: int32(name='BlockHeight'),
      createTime?: long(name='CreateTime'),
      isRole?: boolean(name='IsRole'),
      name?: string(name='Name'),
      nodeInfoList?: [ 
        {
          blockHeight?: long(name='BlockHeight'),
          nodeName?: string(name='NodeName'),
          status?: boolean(name='Status'),
          version?: string(name='Version'),
        }
      ](name='NodeInfoList'),
      nodeNumber?: int32(name='NodeNumber'),
      normal?: boolean(name='Normal'),
      transactionSum?: int32(name='TransactionSum'),
      version?: string(name='Version'),
    }
  ](name='Result'),
}

model DescribeMyBlockchanInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMyBlockchanInfosResponseBody(name='body'),
}

async function describeMyBlockchanInfos(request: DescribeMyBlockchanInfosRequest): DescribeMyBlockchanInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMyBlockchanInfos', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMySuccessAppliesRequest {
}

model DescribeMySuccessAppliesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      abnormalNodes?: int32(name='AbnormalNodes'),
      bizid?: string(name='Bizid'),
      blockHeight?: int32(name='BlockHeight'),
      createTime?: long(name='CreateTime'),
      isRole?: boolean(name='IsRole'),
      name?: string(name='Name'),
      nodeInfoList?: [ 
        {
          blockHeight?: long(name='BlockHeight'),
          nodeName?: string(name='NodeName'),
          status?: boolean(name='Status'),
          version?: string(name='Version'),
        }
      ](name='NodeInfoList'),
      nodeNumber?: int32(name='NodeNumber'),
      normal?: boolean(name='Normal'),
      transactionSum?: int32(name='TransactionSum'),
      version?: string(name='Version'),
    }
  ](name='Result'),
}

model DescribeMySuccessAppliesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMySuccessAppliesResponseBody(name='body'),
}

async function describeMySuccessApplies(request: DescribeMySuccessAppliesRequest): DescribeMySuccessAppliesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMySuccessApplies', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMySuccessfulApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeMySuccessfulApplicationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      abnormalNodes?: int32(name='AbnormalNodes'),
      bizid?: string(name='Bizid'),
      blockHeight?: int32(name='BlockHeight'),
      createTime?: long(name='CreateTime'),
      isRole?: boolean(name='IsRole'),
      name?: string(name='Name'),
      nodeInfoList?: [ 
        {
          blockHeight?: long(name='BlockHeight'),
          nodeName?: string(name='NodeName'),
          status?: boolean(name='Status'),
          version?: string(name='Version'),
        }
      ](name='NodeInfoList'),
      nodeNumber?: int32(name='NodeNumber'),
      normal?: boolean(name='Normal'),
      transactionSum?: int32(name='TransactionSum'),
      version?: string(name='Version'),
    }
  ](name='Result'),
}

model DescribeMySuccessfulApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeMySuccessfulApplicationResponseBody(name='body'),
}

async function describeMySuccessfulApplication(request: DescribeMySuccessfulApplicationRequest): DescribeMySuccessfulApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMySuccessfulApplication', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetstatURLRequest {
  regionId?: string(name='RegionId', position='Host'),
  id: string(name='Id', position='Body'),
}

model DescribeNetstatURLResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeNetstatURLResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetstatURLResponseBody(name='body'),
}

async function describeNetstatURL(request: DescribeNetstatURLRequest): DescribeNetstatURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetstatURL', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrdererLogsRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Query'),
  lines?: string(name='Lines', position='Query'),
  ordererName: string(name='OrdererName', position='Query'),
}

model DescribeOrdererLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeOrdererLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrdererLogsResponseBody(name='body'),
}

async function describeOrdererLogs(request: DescribeOrdererLogsRequest): DescribeOrdererLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrdererLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOrganizationRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeOrganizationResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    CAName?: string(name='CAName', example='ca'),
    CAUrl?: string(name='CAUrl', example='asad'),
    codeName?: string(name='CodeName', example='name'),
    consortiumCount?: int32(name='ConsortiumCount', example='2'),
    createTime?: string(name='CreateTime', example='1533025590'),
    description?: string(name='Description', example='Description'),
    domain?: string(name='Domain', example='Domain'),
    expiredTime?: string(name='ExpiredTime'),
    MSP?: string(name='MSP', example='name'),
    name?: string(name='Name', example='Name'),
    organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
    ownerBid?: string(name='OwnerBid', example='2544'),
    ownerName?: string(name='OwnerName', example='uid-23434'),
    ownerUid?: long(name='OwnerUid', example='23434'),
    peerCount?: int32(name='PeerCount', example='2'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
    specName?: string(name='SpecName', example='basic'),
    state?: string(name='State', example='Running'),
    tags?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tags'),
    userCount?: int32(name='UserCount', example='2'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationResponseBody(name='body'),
}

async function describeOrganization(request: DescribeOrganizationRequest): DescribeOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganization', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationChaincodesRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model DescribeOrganizationChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      binding?: boolean(name='Binding'),
      chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jmo0np'),
      chaincodePackageId?: string(name='ChaincodePackageId'),
      channelId?: string(name='ChannelId', example='chan-first-channel-31hlgpen5k5lig'),
      channelName?: string(name='ChannelName', example='first-channel'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      createTime?: string(name='CreateTime', example='1533025590'),
      creator?: string(name='Creator', example='uid-23425'),
      deployTime?: string(name='DeployTime', example='1533025590'),
      endorsePolicy?: string(name='EndorsePolicy', example='OR (&#39;perf9141MSP.member&#39;)'),
      installed?: string(name='Installed', example='Installed'),
      management?: boolean(name='Management'),
      message?: string(name='Message', example='OK'),
      name?: string(name='Name', example='mycc'),
      state?: string(name='State', example='Running'),
      version?: string(name='Version', example='0.3'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationChaincodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationChaincodesResponseBody(name='body'),
}

async function describeOrganizationChaincodes(request: DescribeOrganizationChaincodesRequest): DescribeOrganizationChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationChannelsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5****', position='Query'),
}

model DescribeOrganizationChannelsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      batchTimeout?: int32(name='BatchTimeout', example='2'),
      blockCount?: int32(name='BlockCount', example='3'),
      chaincodeCount?: int32(name='ChaincodeCount', example='2'),
      channelId?: string(name='ChannelId', example='chan-channelx-1l1hmckuuisxo'),
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      createTime?: string(name='CreateTime', example='1533025590'),
      deleteTime?: string(name='DeleteTime', example='1533025590'),
      deleted?: boolean(name='Deleted', example='true'),
      hybird?: boolean(name='Hybird'),
      maxMessageCount?: int32(name='MaxMessageCount', example='3'),
      memberCount?: int32(name='MemberCount', example='3'),
      name?: string(name='Name', example='name'),
      ownerBid?: string(name='OwnerBid', example='253'),
      ownerName?: string(name='OwnerName', example='uid-5324'),
      ownerUid?: int32(name='OwnerUid', example='5324'),
      preferredMaxBytes?: int32(name='PreferredMaxBytes', example='4'),
      requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      state?: string(name='State', example='Running'),
      supportChannelConfig?: boolean(name='SupportChannelConfig', example='true'),
      updateTime?: string(name='UpdateTime', example='1533025590'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationChannelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationChannelsResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function describeOrganizationChannels(request: DescribeOrganizationChannelsRequest): DescribeOrganizationChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationDeletableRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
}

model DescribeOrganizationDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    codeName?: string(name='CodeName', example='name'),
    deletable?: boolean(name='Deletable', example='false'),
    description?: string(name='Description', example='desc'),
    domain?: string(name='Domain', example='domain'),
    name?: string(name='Name', example='orgname'),
    organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    state?: string(name='State', example='Running'),
    zoneId?: string(name='ZoneId', example='zone'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationDeletableResponseBody(name='body'),
}

async function describeOrganizationDeletable(request: DescribeOrganizationDeletableRequest): DescribeOrganizationDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationDeletable', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationMembersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model DescribeOrganizationMembersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
      consortiumName?: string(name='ConsortiumName', example='name'),
      description?: string(name='Description', example='desc'),
      domain?: string(name='Domain', example='domain'),
      id?: string(name='Id', description='Id', example='3'),
      joinedTime?: string(name='JoinedTime', example='1533025590'),
      name?: string(name='Name', example='name'),
      state?: string(name='State', example='Running'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationMembersResponseBody(name='body'),
}

async function describeOrganizationMembers(request: DescribeOrganizationMembersRequest): DescribeOrganizationMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationMembers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationPeersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
}

model DescribeOrganizationPeersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', example='1533025590'),
      domain?: string(name='Domain', example='domain'),
      instanceType?: string(name='InstanceType', example='basic'),
      internetIp?: string(name='InternetIp', example='10.0.0.2'),
      intranetIp?: string(name='IntranetIp', example='10.0.0.2'),
      isAnchor?: boolean(name='IsAnchor', example='false'),
      name?: string(name='Name', example='name'),
      port?: int32(name='Port', example='1234'),
      updateTime?: string(name='UpdateTime', example='1533025590'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationPeersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationPeersResponseBody(name='body'),
}

async function describeOrganizationPeers(request: DescribeOrganizationPeersRequest): DescribeOrganizationPeersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationPeers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationSpecsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeOrganizationSpecsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      enable?: boolean(name='Enable', example='true'),
      name?: string(name='Name', example='basic'),
      title?: string(name='Title'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationSpecsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationSpecsResponseBody(name='body'),
}

async function describeOrganizationSpecs(request: DescribeOrganizationSpecsRequest): DescribeOrganizationSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOrganizationTriggersRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DescribeOrganizationTriggersResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      checkpoint?: {
        errorCount?: long(name='ErrorCount'),
        height?: long(name='Height'),
        index?: long(name='Index'),
        type?: string(name='Type'),
      }(name='Checkpoint'),
      createTime?: long(name='CreateTime'),
      errorMessage?: string(name='ErrorMessage'),
      name?: string(name='Name'),
      options?: string(name='Options'),
      source?: string(name='Source'),
      status?: int32(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeOrganizationTriggersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationTriggersResponseBody(name='body'),
}

async function describeOrganizationTriggers(request: DescribeOrganizationTriggersRequest): DescribeOrganizationTriggersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationTriggers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOrganizationUserCertsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
  username: string(name='Username', example='username', position='Body'),
}

model DescribeOrganizationUserCertsResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='11'),
  dynamicMessage?: string(name='DynamicMessage', example='11'),
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    certificates?: [ 
      {
        certData?: string(name='CertData', example='aa'),
        issuer?: string(name='Issuer', example='aa'),
        name?: string(name='Name', example='aa'),
        scope?: string(name='Scope', example='aa'),
        subject?: string(name='Subject', example='aa'),
        validFrom?: string(name='ValidFrom', example='aa'),
        validTo?: string(name='ValidTo', example='aaa'),
      }
    ](name='Certificates'),
    keyPair?: {
      privateKey?: string(name='PrivateKey', example='aa'),
      publicKey?: string(name='PublicKey', example='aa'),
    }(name='KeyPair'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationUserCertsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationUserCertsResponseBody(name='body'),
}

async function describeOrganizationUserCerts(request: DescribeOrganizationUserCertsRequest): DescribeOrganizationUserCertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationUserCerts', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationUsersRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
}

model DescribeOrganizationUsersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      attrs?: string(name='Attrs', example='a'),
      callerBid?: string(name='CallerBid', example='23425'),
      callerUid?: long(name='CallerUid', example='35645'),
      createTime?: string(name='CreateTime', example='1533025590'),
      expireTime?: string(name='ExpireTime', example='1533025590'),
      fullName?: string(name='FullName', example='name'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      username?: string(name='Username', example='username'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationUsersResponseBody(name='body'),
}

async function describeOrganizationUsers(request: DescribeOrganizationUsersRequest): DescribeOrganizationUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizationUsers', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrganizationsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  tag?: [ 
    {
      key: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeOrganizationsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      codeName?: string(name='CodeName', example='name'),
      consortiumCount?: int32(name='ConsortiumCount', example='2'),
      createTime?: string(name='CreateTime', example='1533025590'),
      description?: string(name='Description', example='desc'),
      domain?: string(name='Domain', example='domain'),
      expireState?: string(name='ExpireState'),
      expiredTime?: string(name='ExpiredTime', example='1533025590'),
      hybrid?: boolean(name='Hybrid', example='true'),
      majorVersion?: string(name='MajorVersion'),
      name?: string(name='Name', example='name'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      ownerBid?: string(name='OwnerBid', example='bid'),
      ownerName?: string(name='OwnerName', example='name'),
      ownerUid?: long(name='OwnerUid', example='1232'),
      peerCount?: int32(name='PeerCount', example='2'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
      specName?: string(name='SpecName', example='basic'),
      state?: string(name='State', example='Running'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      userCount?: int32(name='UserCount', example='3'),
      zoneId?: string(name='ZoneId', example='zone'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeOrganizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrganizationsResponseBody(name='body'),
}

async function describeOrganizations(request: DescribeOrganizationsRequest): DescribeOrganizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrganizations', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOrgnaizationChaincodesRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DescribeOrgnaizationChaincodesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      chaincodeId?: string(name='ChaincodeId'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      deployTime?: string(name='DeployTime'),
      endorsePolicy?: string(name='EndorsePolicy'),
      installed?: string(name='Installed'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      state?: string(name='State'),
      version?: string(name='Version'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeOrgnaizationChaincodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOrgnaizationChaincodesResponseBody(name='body'),
}

async function describeOrgnaizationChaincodes(request: DescribeOrgnaizationChaincodesRequest): DescribeOrgnaizationChaincodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrgnaizationChaincodes', 'POST', '/', 'json', true, 'form', request);
}

model DescribeOssPropertiesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeOssPropertiesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    bucketName?: string(name='BucketName'),
    endpoint?: string(name='Endpoint'),
    folderName?: string(name='FolderName'),
  }(name='Result'),
}

model DescribeOssPropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOssPropertiesResponseBody(name='body'),
}

async function describeOssProperties(request: DescribeOssPropertiesRequest): DescribeOssPropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOssProperties', 'POST', '/', 'json', true, 'form', request);
}

model DescribePeerLogsRequest {
  regionId?: string(name='RegionId', position='Host'),
  lines?: string(name='Lines', position='Query'),
  organizationId: string(name='OrganizationId', position='Query'),
  peerName: string(name='PeerName', position='Query'),
}

model DescribePeerLogsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribePeerLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePeerLogsResponseBody(name='body'),
}

async function describePeerLogs(request: DescribePeerLogsRequest): DescribePeerLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePeerLogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribePublicAntChainContractProjectContentTreeRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribePublicAntChainContractProjectContentTreeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    children?: [  map[string]any ](name='Children'),
  }(name='Result'),
}

model DescribePublicAntChainContractProjectContentTreeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePublicAntChainContractProjectContentTreeResponseBody(name='body'),
}

async function describePublicAntChainContractProjectContentTree(request: DescribePublicAntChainContractProjectContentTreeRequest): DescribePublicAntChainContractProjectContentTreeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublicAntChainContractProjectContentTree', 'POST', '/', 'json', false, 'json', request);
}

model DescribePublicAntChainDownloadPathsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribePublicAntChainDownloadPathsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    caCrtUrl?: string(name='CaCrtUrl'),
    clientCrtUrl?: string(name='ClientCrtUrl'),
    sdkUrl?: string(name='SdkUrl'),
    trustCaUrl?: string(name='TrustCaUrl'),
  }(name='Result'),
}

model DescribePublicAntChainDownloadPathsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePublicAntChainDownloadPathsResponseBody(name='body'),
}

async function describePublicAntChainDownloadPaths(request: DescribePublicAntChainDownloadPathsRequest): DescribePublicAntChainDownloadPathsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublicAntChainDownloadPaths', 'POST', '/', 'json', true, 'form', request);
}

model DescribePublicCloudIDEEnvConfigsRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribePublicCloudIDEEnvConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      bizid?: string(name='Bizid'),
      name?: string(name='Name'),
      trialAccount?: string(name='TrialAccount'),
      trialAccountPrivateKey?: string(name='TrialAccountPrivateKey'),
      version?: string(name='Version'),
    }
  ](name='Result'),
}

model DescribePublicCloudIDEEnvConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePublicCloudIDEEnvConfigsResponseBody(name='body'),
}

async function describePublicCloudIDEEnvConfigs(request: DescribePublicCloudIDEEnvConfigsRequest): DescribePublicCloudIDEEnvConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublicCloudIDEEnvConfigs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeQRCodeAccessLogRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeQRCodeAccessLogResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accessAlipayAccountCount?: long(name='AccessAlipayAccountCount'),
    accessCount?: long(name='AccessCount'),
  }(name='Result'),
}

model DescribeQRCodeAccessLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQRCodeAccessLogResponseBody(name='body'),
}

async function describeQRCodeAccessLog(request: DescribeQRCodeAccessLogRequest): DescribeQRCodeAccessLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQRCodeAccessLog', 'POST', '/', 'json', true, 'form', request);
}

model DescribeQRCodeAuthorityRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DescribeQRCodeAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DescribeQRCodeAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeQRCodeAuthorityResponseBody(name='body'),
}

async function describeQRCodeAuthority(request: DescribeQRCodeAuthorityRequest): DescribeQRCodeAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeQRCodeAuthority', 'POST', '/', 'json', true, 'form', request);
}

model DescribeRegionsRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeRegionsResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='29857326-A574-49A7-897C-E428471D79D6'),
  result?: [ 
    {
      id?: int32(name='Id', description='Id', example='1'),
      online?: boolean(name='Online', example='true'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      title?: string(name='Title'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeResourceTypeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      cpu?: int32(name='Cpu'),
      disk?: int32(name='Disk'),
      memory?: int32(name='Memory'),
      typeId?: int32(name='TypeId'),
      typeName?: string(name='TypeName'),
    }
  ](name='Result'),
}

model DescribeResourceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceTypeResponseBody(name='body'),
}

async function describeResourceType(request: DescribeResourceTypeRequest): DescribeResourceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceTypesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeResourceTypesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      cpu?: int32(name='Cpu'),
      disk?: int32(name='Disk'),
      memory?: int32(name='Memory'),
      typeId?: int32(name='TypeId'),
      typeName?: string(name='TypeName'),
    }
  ](name='Result'),
}

model DescribeResourceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceTypesResponseBody(name='body'),
}

async function describeResourceTypes(request: DescribeResourceTypesRequest): DescribeResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceTypes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRootDomainRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeRootDomainResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: string(name='Result', example='onaliyunbaas.com'),
  success?: boolean(name='Success', example='true'),
}

model DescribeRootDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRootDomainResponseBody(name='body'),
}

async function describeRootDomain(request: DescribeRootDomainRequest): DescribeRootDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRootDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSchemaDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  schemaId?: long(name='SchemaId', position='Body'),
}

model DescribeSchemaDetailResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model DescribeSchemaDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSchemaDetailResponseBody(name='body'),
}

async function describeSchemaDetail(request: DescribeSchemaDetailRequest): DescribeSchemaDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSchemaDetail', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSmartContractJobStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: string(name='JobId', position='Body'),
}

model DescribeSmartContractJobStatusResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeSmartContractJobStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartContractJobStatusResponseBody(name='body'),
}

async function describeSmartContractJobStatus(request: DescribeSmartContractJobStatusRequest): DescribeSmartContractJobStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartContractJobStatus', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSmartContractJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  size: int32(name='Size', position='Body'),
  start: int32(name='Start', position='Body'),
}

model DescribeSmartContractJobsResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    content?: [ 
      {
        createTime?: long(name='CreateTime'),
        finishedTime?: long(name='FinishedTime'),
        jobId?: string(name='JobId'),
        name?: string(name='Name'),
        sourceType?: string(name='SourceType'),
        status?: string(name='Status'),
        userBid?: string(name='UserBid'),
        userId?: long(name='UserId'),
      }
    ](name='Content'),
    first?: boolean(name='First'),
    last?: boolean(name='Last'),
    numberOfElements?: int32(name='NumberOfElements'),
    size?: int32(name='Size'),
    totalElements?: int32(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeSmartContractJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartContractJobsResponseBody(name='body'),
}

async function describeSmartContractJobs(request: DescribeSmartContractJobsRequest): DescribeSmartContractJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartContractJobs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSmartContractJobsByNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  name?: string(name='Name', position='Body'),
  size?: int32(name='Size', position='Body'),
  start: int32(name='Start', position='Body'),
}

model DescribeSmartContractJobsByNameResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    content?: [ 
      {
        createTime?: long(name='CreateTime'),
        finishedTime?: long(name='FinishedTime'),
        jobId?: string(name='JobId'),
        name?: string(name='Name'),
        sourceType?: string(name='SourceType'),
        status?: string(name='Status'),
        userBid?: string(name='UserBid'),
        userId?: string(name='UserId'),
      }
    ](name='Content'),
    first?: boolean(name='First'),
    last?: boolean(name='Last'),
    numberOfElements?: int32(name='NumberOfElements'),
    size?: int32(name='Size'),
    totalElements?: int32(name='TotalElements'),
    totalPages?: int32(name='TotalPages'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeSmartContractJobsByNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartContractJobsByNameResponseBody(name='body'),
}

async function describeSmartContractJobsByName(request: DescribeSmartContractJobsByNameRequest): DescribeSmartContractJobsByNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartContractJobsByName', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSmartContractResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: string(name='JobId', position='Body'),
}

model DescribeSmartContractResultResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeSmartContractResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartContractResultResponseBody(name='body'),
}

async function describeSmartContractResult(request: DescribeSmartContractResultRequest): DescribeSmartContractResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartContractResult', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSmartContractResultContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: string(name='JobId', position='Body'),
}

model DescribeSmartContractResultContentResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      diagnostics?: [ 
        {
          advice?: string(name='Advice'),
          code?: string(name='Code'),
          detail?: string(name='Detail'),
          message?: string(name='Message'),
          range?: [ 
            {
              character?: int32(name='Character'),
              line?: int32(name='Line'),
            }
          ](name='Range'),
          severity?: int32(name='Severity'),
          source?: string(name='Source'),
          trace?: [ 
            {
              location?: {
                range?: [ 
                  {
                    character?: int32(name='Character'),
                    line?: int32(name='Line'),
                  }
                ](name='Range'),
                uri?: string(name='Uri'),
              }(name='Location'),
              message?: string(name='Message'),
            }
          ](name='Trace'),
        }
      ](name='Diagnostics'),
      uri?: string(name='Uri'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DescribeSmartContractResultContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSmartContractResultContentResponseBody(name='body'),
}

async function describeSmartContractResultContent(request: DescribeSmartContractResultContentRequest): DescribeSmartContractResultContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSmartContractResultContent', 'POST', '/', 'json', true, 'form', request);
}

model DescribeSubscribeCloudServiceIntegrationStateRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DescribeSubscribeCloudServiceIntegrationStateResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeSubscribeCloudServiceIntegrationStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSubscribeCloudServiceIntegrationStateResponseBody(name='body'),
}

async function describeSubscribeCloudServiceIntegrationState(request: DescribeSubscribeCloudServiceIntegrationStateRequest): DescribeSubscribeCloudServiceIntegrationStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSubscribeCloudServiceIntegrationState', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTasksRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
}

model DescribeTasksResponseBody = {
  dynamicCode?: string(name='DynamicCode', example='111'),
  dynamicMessage?: string(name='DynamicMessage', example='111'),
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      action?: string(name='Action', example='action'),
      assignee?: string(name='Assignee'),
      handled?: boolean(name='Handled', example='false'),
      operationType?: string(name='OperationType', example='type'),
      requestTime?: long(name='RequestTime', example='1533025590'),
      responseTime?: string(name='ResponseTime', example='1533025590'),
      result?: string(name='Result', example='result'),
      sender?: string(name='Sender', example='sender'),
      target?: string(name='Target', example='target'),
      taskId?: int32(name='TaskId', example='33'),
      taskState?: string(name='TaskState'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DescribeTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTasksResponseBody(name='body'),
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTemplatesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    schemaList?: [ 
      {
        createTime?: long(name='CreateTime'),
        description?: string(name='Description'),
        id?: long(name='Id'),
        isTemplate?: int32(name='IsTemplate'),
        name?: string(name='Name'),
        updateTime?: long(name='UpdateTime'),
        version?: long(name='Version'),
      }
    ](name='SchemaList'),
  }(name='Result'),
}

model DescribeTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTemplatesResponseBody(name='body'),
}

async function describeTemplates(request: DescribeTemplatesRequest): DescribeTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTransactionRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  hash?: string(name='Hash', position='Body'),
}

model DescribeTransactionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: int32(name='BlockVersion'),
    category?: int32(name='Category'),
    content?: string(name='Content'),
    contentHash?: string(name='ContentHash'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    keyName?: string(name='KeyName'),
    keyWrap?: string(name='KeyWrap'),
    nonce?: string(name='Nonce'),
    referenceCount?: int32(name='ReferenceCount'),
    referenceList?: [ string ](name='ReferenceList'),
    transTypeV6?: string(name='TransTypeV6'),
    transactionV10?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatureList?: [ string ](name='SignatureList'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='TransactionV10'),
  }(name='Result'),
}

model DescribeTransactionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTransactionResponseBody(name='body'),
}

async function describeTransaction(request: DescribeTransactionRequest): DescribeTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransaction', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTransactionFor2CBrowserRequest {
  regionId?: string(name='RegionId', position='Host'),
  alipayAuthCode: string(name='AlipayAuthCode', position='Body'),
  bizid: string(name='Bizid', position='Body'),
  hash: string(name='Hash', position='Body'),
}

model DescribeTransactionFor2CBrowserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockHash?: string(name='BlockHash'),
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: int32(name='BlockVersion'),
    category?: int32(name='Category'),
    content?: string(name='Content'),
    contentHash?: string(name='ContentHash'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    keyName?: string(name='KeyName'),
    keyWrap?: string(name='KeyWrap'),
    nonce?: string(name='Nonce'),
    referenceCount?: int32(name='ReferenceCount'),
    referenceList?: [ string ](name='ReferenceList'),
    transTypeV6?: string(name='TransTypeV6'),
    transactionV10?: {
      data?: string(name='Data'),
      extentions?: [ string ](name='Extentions'),
      from?: string(name='From'),
      gas?: string(name='Gas'),
      hash?: string(name='Hash'),
      nonce?: string(name='Nonce'),
      period?: long(name='Period'),
      signatureList?: [ string ](name='SignatureList'),
      timestamp?: long(name='Timestamp'),
      to?: string(name='To'),
      txType?: string(name='TxType'),
      value?: string(name='Value'),
    }(name='TransactionV10'),
  }(name='Result'),
}

model DescribeTransactionFor2CBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTransactionFor2CBrowserResponseBody(name='body'),
}

async function describeTransactionFor2CBrowser(request: DescribeTransactionFor2CBrowserRequest): DescribeTransactionFor2CBrowserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransactionFor2CBrowser', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTransactionQRCodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  hash?: string(name='Hash', position='Body'),
}

model DescribeTransactionQRCodeResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DescribeTransactionQRCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTransactionQRCodeResponseBody(name='body'),
}

async function describeTransactionQRCode(request: DescribeTransactionQRCodeRequest): DescribeTransactionQRCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransactionQRCode', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTransactionReceiptFor2CBrowserRequest {
  regionId?: string(name='RegionId', position='Host'),
  alipayAuthCode?: string(name='AlipayAuthCode', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  hash?: string(name='Hash', position='Body'),
}

model DescribeTransactionReceiptFor2CBrowserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    data?: string(name='Data'),
    gasUsed?: string(name='GasUsed'),
    logs?: [ string ](name='Logs'),
    result?: long(name='Result'),
  }(name='Result'),
}

model DescribeTransactionReceiptFor2CBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTransactionReceiptFor2CBrowserResponseBody(name='body'),
}

async function describeTransactionReceiptFor2CBrowser(request: DescribeTransactionReceiptFor2CBrowserRequest): DescribeTransactionReceiptFor2CBrowserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransactionReceiptFor2CBrowser', 'POST', '/', 'json', true, 'form', request);
}

model DescribeTriggerRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Query'),
  name: string(name='Name', position='Query'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model DescribeTriggerResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelId?: string(name='ChannelId'),
    channelName?: string(name='ChannelName'),
    checkpoint?: {
      errorCount?: long(name='ErrorCount'),
      height?: long(name='Height'),
      index?: long(name='Index'),
      type?: string(name='Type'),
    }(name='Checkpoint'),
    createTime?: long(name='CreateTime'),
    errorMessage?: string(name='ErrorMessage'),
    name?: string(name='Name'),
    options?: string(name='Options'),
    source?: string(name='Source'),
    status?: int32(name='Status'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTriggerResponseBody(name='body'),
}

async function describeTrigger(request: DescribeTriggerRequest): DescribeTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrigger', 'POST', '/', 'json', false, 'json', request);
}

model DestroyConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
}

model DestroyConsortiumResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    name?: string(name='Name'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DestroyConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DestroyConsortiumResponseBody(name='body'),
}

async function destroyConsortium(request: DestroyConsortiumRequest): DestroyConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyConsortium', 'POST', '/', 'json', true, 'form', request);
}

model DestroyEthereumRequest {
  regionId?: string(name='RegionId', position='Host'),
  ethereumId: string(name='EthereumId', position='Body'),
}

model DestroyEthereumResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consensus?: string(name='Consensus'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    networkId?: string(name='NetworkId'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DestroyEthereumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DestroyEthereumResponseBody(name='body'),
}

async function destroyEthereum(request: DestroyEthereumRequest): DestroyEthereumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyEthereum', 'POST', '/', 'json', true, 'form', request);
}

model DestroyOrganizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model DestroyOrganizationResponseBody = {
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    name?: string(name='Name'),
    organizationId?: string(name='OrganizationId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model DestroyOrganizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DestroyOrganizationResponseBody(name='body'),
}

async function destroyOrganization(request: DestroyOrganizationRequest): DestroyOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DestroyOrganization', 'POST', '/', 'json', true, 'form', request);
}

model DownloadAllRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DownloadAllResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    bizviewUrl?: string(name='BizviewUrl'),
    certUrl?: string(name='CertUrl'),
    sdkUrl?: string(name='SdkUrl'),
  }(name='Result'),
}

model DownloadAllResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadAllResponseBody(name='body'),
}

async function downloadAll(request: DownloadAllRequest): DownloadAllResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadAll', 'POST', '/', 'json', true, 'form', request);
}

model DownloadBizviewRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DownloadBizviewResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DownloadBizviewResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadBizviewResponseBody(name='body'),
}

async function downloadBizview(request: DownloadBizviewRequest): DownloadBizviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadBizview', 'POST', '/', 'json', true, 'form', request);
}

model DownloadFabricChannelSDKRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId?: string(name='ChannelId', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
  username: string(name='Username', position='Query'),
}

model DownloadFabricChannelSDKResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      content?: string(name='Content'),
      path?: string(name='Path'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model DownloadFabricChannelSDKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadFabricChannelSDKResponseBody(name='body'),
}

async function downloadFabricChannelSDK(request: DownloadFabricChannelSDKRequest): DownloadFabricChannelSDKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadFabricChannelSDK', 'POST', '/', 'json', true, 'form', request);
}

model DownloadOrganizationSDKRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Query'),
  username?: string(name='Username', example='user', position='Query'),
}

model DownloadOrganizationSDKResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      content?: string(name='Content', example='base64string'),
      path?: string(name='Path', example='dir/file'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model DownloadOrganizationSDKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadOrganizationSDKResponseBody(name='body'),
}

async function downloadOrganizationSDK(request: DownloadOrganizationSDKRequest): DownloadOrganizationSDKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadOrganizationSDK', 'POST', '/', 'json', true, 'form', request);
}

model DownloadSDK2Request {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model DownloadSDK2ResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DownloadSDK2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadSDK2ResponseBody(name='body'),
}

async function downloadSDK2(request: DownloadSDK2Request): DownloadSDK2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadSDK2', 'POST', '/', 'json', true, 'form', request);
}

model DownloadSdkRequest {
  bizid?: string(name='Bizid', position='Body'),
}

model DownloadSdkResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DownloadSdkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadSdkResponseBody(name='body'),
}

async function downloadSdk(request: DownloadSdkRequest): DownloadSdkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadSdk', 'POST', '/', 'json', true, 'form', request);
}

model DownloadSignedDataRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  path?: string(name='Path', position='Body'),
}

model DownloadSignedDataResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DownloadSignedDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadSignedDataResponseBody(name='body'),
}

async function downloadSignedData(request: DownloadSignedDataRequest): DownloadSignedDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadSignedData', 'POST', '/', 'json', true, 'form', request);
}

model DuplicateAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  name?: string(name='Name', position='Body'),
  projectId?: string(name='ProjectId', position='Body'),
  projectVersion?: string(name='ProjectVersion', position='Body'),
}

model DuplicateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    consortiumId?: string(name='ConsortiumId'),
    description?: string(name='Description'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    version?: string(name='Version'),
  }(name='Result'),
}

model DuplicateAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DuplicateAntChainContractProjectResponseBody(name='body'),
}

async function duplicateAntChainContractProject(request: DuplicateAntChainContractProjectRequest): DuplicateAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DuplicateAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model FreezeAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
}

model FreezeAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model FreezeAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FreezeAccountResponseBody(name='body'),
}

async function freezeAccount(request: FreezeAccountRequest): FreezeAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FreezeAccount', 'POST', '/', 'json', true, 'form', request);
}

model FreezeAntChainAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account: string(name='Account', position='Body'),
  antChainId: string(name='AntChainId', position='Body'),
}

model FreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model FreezeAntChainAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FreezeAntChainAccountResponseBody(name='body'),
}

async function freezeAntChainAccount(request: FreezeAntChainAccountRequest): FreezeAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FreezeAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model GetAppliesRequest {
  bizid?: string(name='Bizid', position='Body'),
  current?: int32(name='Current', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  status?: string(name='Status', position='Body'),
}

model GetAppliesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    applyHistoryList?: [ 
      {
        bizid?: string(name='Bizid'),
        createtime?: long(name='Createtime'),
        id?: int32(name='Id'),
        rejectReason?: string(name='RejectReason'),
        reqAddr?: string(name='ReqAddr'),
        signedAddr?: string(name='SignedAddr'),
        status?: int32(name='Status'),
        updatetime?: long(name='Updatetime'),
        username?: string(name='Username'),
      }
    ](name='ApplyHistoryList'),
    pagination?: {
      current?: int32(name='Current'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='Pagination'),
  }(name='Result'),
}

model GetAppliesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppliesResponseBody(name='body'),
}

async function getApplies(request: GetAppliesRequest): GetAppliesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplies', 'POST', '/', 'json', true, 'form', request);
}

model GetBcSchemaRequest {
  bizid?: string(name='Bizid', position='Body'),
}

model GetBcSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model GetBcSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBcSchemaResponseBody(name='body'),
}

async function getBcSchema(request: GetBcSchemaRequest): GetBcSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBcSchema', 'POST', '/', 'json', true, 'form', request);
}

model GetBlockchainCreateTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  current?: int32(name='Current', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model GetBlockchainCreateTaskResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockchainCreateTasks?: {
      blockchainCreateTasks?: [ 
      {
        bizid?: string(name='Bizid'),
        createTime?: long(name='CreateTime'),
        memo?: string(name='Memo'),
        name?: string(name='Name'),
        status?: string(name='Status'),
      }
    ](name='BlockchainCreateTasks')
    }(name='BlockchainCreateTasks'),
    pagination?: {
      current?: int32(name='Current'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
    }(name='Pagination'),
  }(name='Result'),
}

model GetBlockchainCreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBlockchainCreateTaskResponseBody(name='body'),
}

async function getBlockchainCreateTask(request: GetBlockchainCreateTaskRequest): GetBlockchainCreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBlockchainCreateTask', 'POST', '/', 'json', true, 'form', request);
}

model GetBlockchainInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model GetBlockchainInfoResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    abnormalNodes?: int32(name='AbnormalNodes'),
    bizid?: string(name='Bizid'),
    blockHeight?: int32(name='BlockHeight'),
    createTime?: long(name='CreateTime'),
    isRole?: boolean(name='IsRole'),
    nodeInfoList?: [ 
      {
        blockHeight?: long(name='BlockHeight'),
        nodeName?: string(name='NodeName'),
        status?: boolean(name='Status'),
        version?: string(name='Version'),
      }
    ](name='NodeInfoList'),
    nodeNumber?: int32(name='NodeNumber'),
    normal?: boolean(name='Normal'),
    transactionSum?: int32(name='TransactionSum'),
    version?: string(name='Version'),
  }(name='Result'),
}

model GetBlockchainInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBlockchainInfoResponseBody(name='body'),
}

async function getBlockchainInfo(request: GetBlockchainInfoRequest): GetBlockchainInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBlockchainInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetMyBlockchainsRequest {
}

model GetMyBlockchainsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      bizid?: string(name='Bizid'),
      createtime?: long(name='Createtime'),
      id?: int32(name='Id'),
      rejectReason?: string(name='RejectReason'),
      reqAddr?: string(name='ReqAddr'),
      signedAddr?: string(name='SignedAddr'),
      status?: int32(name='Status'),
      updatetime?: long(name='Updatetime'),
      username?: string(name='Username'),
    }
  ](name='Result'),
}

model GetMyBlockchainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMyBlockchainsResponseBody(name='body'),
}

async function getMyBlockchains(request: GetMyBlockchainsRequest): GetMyBlockchainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMyBlockchains', 'POST', '/', 'json', false, 'json', request);
}

model GetMySuccessAppliesRequest {
}

model GetMySuccessAppliesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      abnormalNodes?: int32(name='AbnormalNodes'),
      bizid?: string(name='Bizid'),
      blockHeight?: int32(name='BlockHeight'),
      createTime?: long(name='CreateTime'),
      isRole?: boolean(name='IsRole'),
      name?: string(name='Name'),
      nodeInfoList?: [ 
        {
          blockHeight?: long(name='BlockHeight'),
          nodeName?: string(name='NodeName'),
          status?: boolean(name='Status'),
          version?: string(name='Version'),
        }
      ](name='NodeInfoList'),
      nodeNumber?: int32(name='NodeNumber'),
      normal?: boolean(name='Normal'),
      transactionSum?: int32(name='TransactionSum'),
      version?: string(name='Version'),
    }
  ](name='Result'),
}

model GetMySuccessAppliesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMySuccessAppliesResponseBody(name='body'),
}

async function getMySuccessApplies(request: GetMySuccessAppliesRequest): GetMySuccessAppliesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMySuccessApplies', 'POST', '/', 'json', false, 'json', request);
}

model GetOssPropertiesRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model GetOssPropertiesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    bucketName?: string(name='BucketName'),
    endpoint?: string(name='Endpoint'),
    folderName?: string(name='FolderName'),
  }(name='Result'),
}

model GetOssPropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssPropertiesResponseBody(name='body'),
}

async function getOssProperties(request: GetOssPropertiesRequest): GetOssPropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssProperties', 'POST', '/', 'json', true, 'form', request);
}

model GetTemplatesRequest {
}

model GetTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    schemaList?: [ 
      {
        createTime?: long(name='CreateTime'),
        description?: string(name='Description'),
        id?: long(name='Id'),
        isTemplate?: int32(name='IsTemplate'),
        name?: string(name='Name'),
        updateTime?: long(name='UpdateTime'),
        version?: long(name='Version'),
      }
    ](name='SchemaList'),
  }(name='Result'),
}

model GetTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplatesResponseBody(name='body'),
}

async function getTemplates(request: GetTemplatesRequest): GetTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplates', 'POST', '/', 'json', false, 'json', request);
}

model InstallChaincodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='chan-channelx-1l1hmckuuisxo', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3', position='Body'),
}

model InstallChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='cc-198jejf8f8chi8'),
    channelName?: string(name='ChannelName', example='mychannel'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    createTime?: string(name='CreateTime', example='1533025590'),
    deployTime?: string(name='DeployTime', example='1533025590'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR ("perf9141MSP.member")'),
    input?: string(name='Input', example='input'),
    install?: boolean(name='Install', example='false'),
    message?: string(name='Message', example='ok'),
    name?: string(name='Name', example='sacc'),
    path?: string(name='Path', example='github.com/hyperledger/fabric-samples/chaincode/sacc'),
    providerId?: string(name='ProviderId', example='providerid'),
    providerName?: string(name='ProviderName', example='prividername'),
    state?: string(name='State', example='Pending'),
    type?: int32(name='Type', example='1'),
    version?: string(name='Version', example='1.0'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model InstallChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallChaincodeResponseBody(name='body'),
}

async function installChaincode(request: InstallChaincodeRequest): InstallChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallChaincode', 'POST', '/', 'json', true, 'form', request);
}

model InstallFabricChaincodePackageRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodePackageId: string(name='ChaincodePackageId', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model InstallFabricChaincodePackageResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodePackageId?: string(name='ChaincodePackageId'),
    checksum?: string(name='Checksum'),
    deleteTime?: long(name='DeleteTime'),
    deleted?: boolean(name='Deleted'),
    installTime?: long(name='InstallTime'),
    label?: string(name='Label'),
    md5sum?: string(name='Md5sum'),
    organizationId?: string(name='OrganizationId'),
    ossBucket?: string(name='OssBucket'),
    ossURL?: string(name='OssURL'),
    providerBid?: string(name='ProviderBid'),
    providerUid?: long(name='ProviderUid'),
    state?: string(name='State'),
    type?: int32(name='Type'),
    typeName?: string(name='TypeName'),
    uploadTime?: long(name='UploadTime'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model InstallFabricChaincodePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallFabricChaincodePackageResponseBody(name='body'),
}

async function installFabricChaincodePackage(request: InstallFabricChaincodePackageRequest): InstallFabricChaincodePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallFabricChaincodePackage', 'POST', '/', 'json', true, 'form', request);
}

model InstantiateChaincodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='cc-198jejf8f8****', position='Body'),
  collectionConfig?: string(name='CollectionConfig', example='string', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', example='OR (&#39;perf9141MSP.member&#39;)', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model InstantiateChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='cc-198jejf8f8chi8'),
    channelName?: string(name='ChannelName', example='channelname'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwlulg7'),
    createTime?: string(name='CreateTime', example='1533025590'),
    deployTime?: string(name='DeployTime', example='1533025590'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
    input?: string(name='Input', example='input'),
    install?: boolean(name='Install', example='false'),
    message?: string(name='Message', example='ok'),
    name?: string(name='Name', example='sacc'),
    path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
    providerId?: string(name='ProviderId', example='id'),
    providerName?: string(name='ProviderName', example='name'),
    state?: string(name='State', example='Running'),
    type?: int32(name='Type', example='1'),
    version?: string(name='Version', example='1.0'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model InstantiateChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstantiateChaincodeResponseBody(name='body'),
}

async function instantiateChaincode(request: InstantiateChaincodeRequest): InstantiateChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstantiateChaincode', 'POST', '/', 'json', true, 'form', request);
}

model InviteUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  bid?: string(name='Bid', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  userEmail?: string(name='UserEmail', position='Body'),
  userId?: long(name='UserId', position='Body'),
}

model InviteUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    bid?: string(name='Bid'),
    bizid?: string(name='Bizid'),
    code?: string(name='Code'),
    createTime?: long(name='CreateTime'),
    email?: string(name='Email'),
    fromBid?: string(name='FromBid'),
    fromUserId?: int32(name='FromUserId'),
    status?: int32(name='Status'),
    updateTime?: long(name='UpdateTime'),
    userId?: int32(name='UserId'),
  }(name='Result'),
}

model InviteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InviteUserResponseBody(name='body'),
}

async function inviteUser(request: InviteUserRequest): InviteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InviteUser', 'POST', '/', 'json', true, 'form', request);
}

model JoinChannelRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  channelId: string(name='ChannelId', example='chan-channelx-1l1hmckuu****', position='Query'),
  do: string(name='Do', example='accept', position='Query'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
}

model JoinChannelResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: [ 
    {
      acceptTime?: string(name='AcceptTime', example='1533025590'),
      approveTime?: string(name='ApproveTime', example='1533025590'),
      channelId?: string(name='ChannelId', example='channelid'),
      confirmTime?: string(name='ConfirmTime', example='1533025590'),
      destroyTime?: string(name='DestroyTime', example='1533025590'),
      inviteTime?: string(name='InviteTime', example='1533025590'),
      organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w9dt3'),
      state?: string(name='State', example='Running'),
      withPeer?: boolean(name='WithPeer', example='true'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model JoinChannelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: JoinChannelResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function joinChannel(request: JoinChannelRequest): JoinChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'JoinChannel', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  nextToken?: string(name='NextToken', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTriggerRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  name: string(name='Name', position='Body'),
  options?: string(name='Options', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  source?: string(name='Source', position='Body'),
  status: string(name='Status', position='Body'),
}

model ModifyTriggerResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelId?: string(name='ChannelId'),
    channelName?: string(name='ChannelName'),
    checkpoint?: {
      errorCount?: long(name='ErrorCount'),
      height?: long(name='Height'),
      index?: long(name='Index'),
      type?: string(name='Type'),
    }(name='Checkpoint'),
    createTime?: long(name='CreateTime'),
    errorMessage?: string(name='ErrorMessage'),
    name?: string(name='Name'),
    options?: string(name='Options'),
    source?: string(name='Source'),
    status?: int32(name='Status'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model ModifyTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTriggerResponseBody(name='body'),
}

async function modifyTrigger(request: ModifyTriggerRequest): ModifyTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTrigger', 'POST', '/', 'json', true, 'form', request);
}

model OperateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  bid?: string(name='Bid', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  operation?: int32(name='Operation', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model OperateUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model OperateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateUserResponseBody(name='body'),
}

async function operateUser(request: OperateUserRequest): OperateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OperateUser', 'POST', '/', 'json', true, 'form', request);
}

model ProcessCloudIDEContractTransactionRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  transaction: string(name='Transaction', position='Body'),
}

model ProcessCloudIDEContractTransactionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ProcessCloudIDEContractTransactionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProcessCloudIDEContractTransactionResponseBody(name='body'),
}

async function processCloudIDEContractTransaction(request: ProcessCloudIDEContractTransactionRequest): ProcessCloudIDEContractTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ProcessCloudIDEContractTransaction', 'POST', '/', 'json', true, 'form', request);
}

model ProcessPublicCloudIDEContractTransactionRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  transaction?: string(name='Transaction', position='Body'),
}

model ProcessPublicCloudIDEContractTransactionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ProcessPublicCloudIDEContractTransactionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProcessPublicCloudIDEContractTransactionResponseBody(name='body'),
}

async function processPublicCloudIDEContractTransaction(request: ProcessPublicCloudIDEContractTransactionRequest): ProcessPublicCloudIDEContractTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ProcessPublicCloudIDEContractTransaction', 'POST', '/', 'json', true, 'form', request);
}

model QueryBlockRequest {
  bizid?: string(name='Bizid', position='Body'),
  height?: long(name='Height', position='Body'),
}

model QueryBlockResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    alias?: string(name='Alias'),
    blockHash?: string(name='BlockHash'),
    createTime?: long(name='CreateTime'),
    height?: int32(name='Height'),
    previousHash?: string(name='PreviousHash'),
    rootTxHash?: string(name='RootTxHash'),
    transSummaryList?: string(name='TransSummaryList'),
    transactionSize?: int32(name='TransactionSize'),
  }(name='Result'),
}

model QueryBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBlockResponseBody(name='body'),
}

async function queryBlock(request: QueryBlockRequest): QueryBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBlock', 'POST', '/', 'json', true, 'form', request);
}

model QueryConsortiumDeletableRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Query'),
  location?: string(name='Location', position='Body'),
}

model QueryConsortiumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    codeName?: string(name='CodeName'),
    consortiumId?: string(name='ConsortiumId'),
    deletable?: boolean(name='Deletable'),
    description?: string(name='Description'),
    domain?: string(name='Domain'),
    name?: string(name='Name'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model QueryConsortiumDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryConsortiumDeletableResponseBody(name='body'),
}

async function queryConsortiumDeletable(request: QueryConsortiumDeletableRequest): QueryConsortiumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConsortiumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model QueryEthereumDeletableRequest {
  regionId?: string(name='RegionId', position='Host'),
  ethereumId: string(name='EthereumId', position='Body'),
}

model QueryEthereumDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    deletable?: boolean(name='Deletable'),
    ethereumId?: string(name='EthereumId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model QueryEthereumDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEthereumDeletableResponseBody(name='body'),
}

async function queryEthereumDeletable(request: QueryEthereumDeletableRequest): QueryEthereumDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEthereumDeletable', 'POST', '/', 'json', true, 'form', request);
}

model QueryMetricRequest {
  bizid?: string(name='Bizid', position='Query'),
  innerIp?: string(name='InnerIp', position='Body'),
  metric?: string(name='Metric', position='Body'),
  period?: string(name='Period', position='Body'),
  port?: string(name='Port', position='Body'),
  timeArea?: string(name='TimeArea', position='Body'),
}

model QueryMetricResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model QueryMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMetricResponseBody(name='body'),
}

async function queryMetric(request: QueryMetricRequest): QueryMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMetric', 'POST', '/', 'json', true, 'form', request);
}

model QueryOrganizationDeletableRequest {
  regionId?: string(name='RegionId', position='Host'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Query'),
}

model QueryOrganizationDeletableResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    codeName?: string(name='CodeName'),
    deletable?: boolean(name='Deletable'),
    description?: string(name='Description'),
    domain?: string(name='Domain'),
    name?: string(name='Name'),
    organizationId?: string(name='OrganizationId'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
    zoneId?: string(name='ZoneId'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model QueryOrganizationDeletableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrganizationDeletableResponseBody(name='body'),
}

async function queryOrganizationDeletable(request: QueryOrganizationDeletableRequest): QueryOrganizationDeletableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrganizationDeletable', 'POST', '/', 'json', true, 'form', request);
}

model QueryTransactionRequest {
  bizid?: string(name='Bizid', position='Body'),
  hash?: string(name='Hash', position='Body'),
}

model QueryTransactionResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    blockHeight?: long(name='BlockHeight'),
    blockVersion?: int32(name='BlockVersion'),
    category?: int32(name='Category'),
    content?: string(name='Content'),
    contentHash?: string(name='ContentHash'),
    createTime?: long(name='CreateTime'),
    hash?: string(name='Hash'),
    keyName?: string(name='KeyName'),
    keyWrap?: string(name='KeyWrap'),
    nonce?: string(name='Nonce'),
    referenceCount?: int32(name='ReferenceCount'),
    referenceList?: {
      data?: string(name='Data'),
      length?: int32(name='Length'),
      type?: int32(name='Type'),
    }(name='ReferenceList'),
    type?: int32(name='Type'),
  }(name='Result'),
}

model QueryTransactionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTransactionResponseBody(name='body'),
}

async function queryTransaction(request: QueryTransactionRequest): QueryTransactionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTransaction', 'POST', '/', 'json', true, 'form', request);
}

model RejectUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  bid?: string(name='Bid', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  reason?: string(name='Reason', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model RejectUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model RejectUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectUserResponseBody(name='body'),
}

async function rejectUser(request: RejectUserRequest): RejectUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectUser', 'POST', '/', 'json', true, 'form', request);
}

model RenameBlockchainRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  newName?: string(name='NewName', position='Body'),
}

model RenameBlockchainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model RenameBlockchainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenameBlockchainResponseBody(name='body'),
}

async function renameBlockchain(request: RenameBlockchainRequest): RenameBlockchainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenameBlockchain', 'POST', '/', 'json', true, 'form', request);
}

model ResetAntChainCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
}

model ResetAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetAntChainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAntChainCertificateResponseBody(name='body'),
}

async function resetAntChainCertificate(request: ResetAntChainCertificateRequest): ResetAntChainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAntChainCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetAntChainUserCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  bid: string(name='Bid', position='Body'),
  operation: int32(name='Operation', position='Body'),
  username: string(name='Username', position='Body'),
}

model ResetAntChainUserCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetAntChainUserCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAntChainUserCertificateResponseBody(name='body'),
}

async function resetAntChainUserCertificate(request: ResetAntChainUserCertificateRequest): ResetAntChainUserCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAntChainUserCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model ResetCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetCertificateResponseBody(name='body'),
}

async function resetCertificate(request: ResetCertificateRequest): ResetCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetOrganizationUserPasswordRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  location?: string(name='Location', example='username', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
  password?: string(name='Password', example='password', position='Body'),
  username: string(name='Username', example='username', position='Body'),
}

model ResetOrganizationUserPasswordResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    createTime?: string(name='CreateTime', example='1533025590'),
    expireTime?: string(name='ExpireTime', example='1533025590'),
    fullname?: string(name='Fullname', example='username'),
    organizationId?: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****'),
    password?: string(name='Password', example='password'),
    username?: string(name='Username', example='username'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ResetOrganizationUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetOrganizationUserPasswordResponseBody(name='body'),
}

async function resetOrganizationUserPassword(request: ResetOrganizationUserPasswordRequest): ResetOrganizationUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetOrganizationUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model ResetPublicAntChainCertificateRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
}

model ResetPublicAntChainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetPublicAntChainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetPublicAntChainCertificateResponseBody(name='body'),
}

async function resetPublicAntChainCertificate(request: ResetPublicAntChainCertificateRequest): ResetPublicAntChainCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetPublicAntChainCertificate', 'POST', '/', 'json', true, 'form', request);
}

model ResetUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  bid?: string(name='Bid', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  operation?: int32(name='Operation', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model ResetUserResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ResetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetUserResponseBody(name='body'),
}

async function resetUser(request: ResetUserRequest): ResetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetUser', 'POST', '/', 'json', true, 'form', request);
}

model SchemaDetailRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  schemaId?: long(name='SchemaId', position='Body'),
}

model SchemaDetailResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model SchemaDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SchemaDetailResponseBody(name='body'),
}

async function schemaDetail(request: SchemaDetailRequest): SchemaDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SchemaDetail', 'POST', '/', 'json', true, 'form', request);
}

model StartSmartContractJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  jobId: string(name='JobId', position='Body'),
  jobName: string(name='JobName', position='Body'),
  sourceOpt?: string(name='SourceOpt', position='Body'),
  sourceType: string(name='SourceType', position='Body'),
}

model StartSmartContractJobResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model StartSmartContractJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartSmartContractJobResponseBody(name='body'),
}

async function startSmartContractJob(request: StartSmartContractJobRequest): StartSmartContractJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartSmartContractJob', 'POST', '/', 'json', true, 'form', request);
}

model SubmitFabricChaincodeDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodePackageId: string(name='ChaincodePackageId', position='Body'),
  chaincodeVersion: string(name='ChaincodeVersion', position='Body'),
  channelId: string(name='ChannelId', position='Body'),
  collectionConfig?: string(name='CollectionConfig', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', position='Body'),
  initRequired?: boolean(name='InitRequired', position='Body'),
  location?: string(name='Location', position='Body'),
  name: string(name='Name', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model SubmitFabricChaincodeDefinitionResponseBody = {
  chaincodeDefinitionId?: string(name='ChaincodeDefinitionId'),
  chaincodePackageId?: string(name='ChaincodePackageId'),
  errorCode?: int32(name='ErrorCode'),
  initRequired?: boolean(name='InitRequired'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    name?: string(name='Name'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
    version?: string(name='Version'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model SubmitFabricChaincodeDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitFabricChaincodeDefinitionResponseBody(name='body'),
}

async function submitFabricChaincodeDefinition(request: SubmitFabricChaincodeDefinitionRequest): SubmitFabricChaincodeDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitFabricChaincodeDefinition', 'POST', '/', 'json', true, 'form', request);
}

model SyncFabricChaincodeStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model SyncFabricChaincodeStatusResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    input?: string(name='Input'),
    name?: string(name='Name'),
    path?: long(name='Path'),
    state?: string(name='State'),
    type?: int32(name='Type'),
    version?: string(name='Version'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model SyncFabricChaincodeStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncFabricChaincodeStatusResponseBody(name='body'),
}

async function syncFabricChaincodeStatus(request: SyncFabricChaincodeStatusRequest): SyncFabricChaincodeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncFabricChaincodeStatus', 'POST', '/', 'json', true, 'form', request);
}

model SynchronizeChaincodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-1pr09q7jm****', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-aaaaaa2-1eqnj5o5w****', position='Body'),
}

model SynchronizeChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='code-sacc-1pr09q7jm****'),
    channelName?: string(name='ChannelName', example='chan-channelx-1l1hmckuuisxo'),
    consortiumId?: string(name='ConsortiumId', example='consortium-lianmenyumingyi-hc5d1bwl****'),
    createTime?: string(name='CreateTime', example='1533025590'),
    deployTime?: string(name='DeployTime', example='1533025590'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR (\\"aaaaaa1MSP.peer\\")'),
    input?: string(name='Input', example='input'),
    install?: boolean(name='Install', example='false'),
    message?: string(name='Message', example='ok'),
    name?: string(name='Name', example='sacc'),
    path?: string(name='Path', example='go-sdk-demo/chaincode/src'),
    providerId?: string(name='ProviderId', example='provider'),
    providerName?: string(name='ProviderName', example='name'),
    state?: string(name='State', example='Running'),
    type?: int32(name='Type', example='1'),
    version?: string(name='Version', example='1.0'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model SynchronizeChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SynchronizeChaincodeResponseBody(name='body'),
}

async function synchronizeChaincode(request: SynchronizeChaincodeRequest): SynchronizeChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SynchronizeChaincode', 'POST', '/', 'json', true, 'form', request);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnfreezeAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account?: string(name='Account', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
}

model UnfreezeAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UnfreezeAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnfreezeAccountResponseBody(name='body'),
}

async function unfreezeAccount(request: UnfreezeAccountRequest): UnfreezeAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnfreezeAccount', 'POST', '/', 'json', true, 'form', request);
}

model UnfreezeAntChainAccountRequest {
  regionId?: string(name='RegionId', position='Host'),
  account: string(name='Account', position='Body'),
  antChainId: string(name='AntChainId', position='Body'),
}

model UnfreezeAntChainAccountResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UnfreezeAntChainAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnfreezeAntChainAccountResponseBody(name='body'),
}

async function unfreezeAntChainAccount(request: UnfreezeAntChainAccountRequest): UnfreezeAntChainAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnfreezeAntChainAccount', 'POST', '/', 'json', true, 'form', request);
}

model UntagResourcesRequest {
  regionId?: string(name='RegionId', position='Host'),
  all?: boolean(name='All', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAntChainRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  antChainName: string(name='AntChainName', position='Body'),
}

model UpdateAntChainResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainResponseBody(name='body'),
}

async function updateAntChain(request: UpdateAntChainRequest): UpdateAntChainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChain', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainConsortiumRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumDescription?: string(name='ConsortiumDescription', position='Body'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  consortiumName: string(name='ConsortiumName', position='Body'),
}

model UpdateAntChainConsortiumResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainConsortiumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainConsortiumResponseBody(name='body'),
}

async function updateAntChainConsortium(request: UpdateAntChainConsortiumRequest): UpdateAntChainConsortiumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainConsortium', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainContractContentRequest {
  regionId?: string(name='RegionId', position='Host'),
  content?: string(name='Content', position='Body'),
  contentId: string(name='ContentId', position='Body'),
  contentName?: string(name='ContentName', position='Body'),
  parentContentId?: string(name='ParentContentId', position='Body'),
}

model UpdateAntChainContractContentResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainContractContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainContractContentResponseBody(name='body'),
}

async function updateAntChainContractContent(request: UpdateAntChainContractContentRequest): UpdateAntChainContractContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainContractContent', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainContractProjectRequest {
  regionId?: string(name='RegionId', position='Host'),
  projectDescription?: string(name='ProjectDescription', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  projectName?: string(name='ProjectName', position='Body'),
  projectVersion?: string(name='ProjectVersion', position='Body'),
}

model UpdateAntChainContractProjectResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainContractProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainContractProjectResponseBody(name='body'),
}

async function updateAntChainContractProject(request: UpdateAntChainContractProjectRequest): UpdateAntChainContractProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainContractProject', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainMemberRequest {
  regionId?: string(name='RegionId', position='Host'),
  consortiumId: string(name='ConsortiumId', position='Body'),
  memberId: string(name='MemberId', position='Body'),
  memberName: string(name='MemberName', position='Body'),
}

model UpdateAntChainMemberResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainMemberResponseBody(name='body'),
}

async function updateAntChainMember(request: UpdateAntChainMemberRequest): UpdateAntChainMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainMember', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAntChainQRCodeAuthorizationRequest {
  regionId?: string(name='RegionId', position='Host'),
  antChainId: string(name='AntChainId', position='Body'),
  authorizationType: string(name='AuthorizationType', position='Body'),
  QRCodeType: string(name='QRCodeType', position='Body'),
}

model UpdateAntChainQRCodeAuthorizationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateAntChainQRCodeAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAntChainQRCodeAuthorizationResponseBody(name='body'),
}

async function updateAntChainQRCodeAuthorization(request: UpdateAntChainQRCodeAuthorizationRequest): UpdateAntChainQRCodeAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAntChainQRCodeAuthorization', 'POST', '/', 'json', true, 'form', request);
}

model UpdateBlockchainSchemaRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  categoryConfigs?: string(name='CategoryConfigs', position='Body'),
  description?: string(name='Description', position='Body'),
  schemaId?: long(name='SchemaId', position='Body'),
  schemaName?: string(name='SchemaName', position='Body'),
}

model UpdateBlockchainSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model UpdateBlockchainSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBlockchainSchemaResponseBody(name='body'),
}

async function updateBlockchainSchema(request: UpdateBlockchainSchemaRequest): UpdateBlockchainSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBlockchainSchema', 'POST', '/', 'json', true, 'form', request);
}

model UpdateChannelConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  batchTimeout: int32(name='BatchTimeout', position='Body'),
  channelId: string(name='ChannelId', position='Body'),
  maxMessageCount: int32(name='MaxMessageCount', position='Body'),
  organizationId?: string(name='OrganizationId', position='Body'),
  preferredMaxBytes: int32(name='PreferredMaxBytes', position='Body'),
}

model UpdateChannelConfigResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    batchTimeout?: int32(name='BatchTimeout'),
    blockCount?: int32(name='BlockCount'),
    chaincodeCount?: int32(name='ChaincodeCount'),
    channelId?: string(name='ChannelId'),
    consortiumId?: string(name='ConsortiumId'),
    consortiumName?: string(name='ConsortiumName'),
    createTime?: string(name='CreateTime'),
    maxMessageCount?: int32(name='MaxMessageCount'),
    memberCount?: int32(name='MemberCount'),
    name?: string(name='Name'),
    ownerBid?: string(name='OwnerBid'),
    ownerName?: string(name='OwnerName'),
    ownerUid?: int32(name='OwnerUid'),
    preferredMaxBytes?: int32(name='PreferredMaxBytes'),
    requestId?: string(name='RequestId'),
    state?: string(name='State'),
    supportConfig?: boolean(name='SupportConfig'),
    updateTime?: string(name='UpdateTime'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateChannelConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChannelConfigResponseBody(name='body'),
}

async function updateChannelConfig(request: UpdateChannelConfigRequest): UpdateChannelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChannelConfig', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEthereumRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  ethereumId: string(name='EthereumId', position='Body'),
  name?: string(name='Name', position='Body'),
}

model UpdateEthereumResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    consensus?: string(name='Consensus'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    networkId?: string(name='NetworkId'),
    regionId?: string(name='RegionId'),
    state?: string(name='State'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateEthereumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEthereumResponseBody(name='body'),
}

async function updateEthereum(request: UpdateEthereumRequest): UpdateEthereumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEthereum', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEthereumClientUserPasswordRequest {
  regionId?: string(name='RegionId', position='Host'),
  nodeId: string(name='NodeId', position='Body'),
  password: string(name='Password', position='Body'),
  username: string(name='Username', position='Body'),
}

model UpdateEthereumClientUserPasswordResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateEthereumClientUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEthereumClientUserPasswordResponseBody(name='body'),
}

async function updateEthereumClientUserPassword(request: UpdateEthereumClientUserPasswordRequest): UpdateEthereumClientUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEthereumClientUserPassword', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEthereumNodeRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', position='Body'),
  nodeId: string(name='NodeId', position='Body'),
  nodeName?: string(name='NodeName', position='Body'),
}

model UpdateEthereumNodeResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    ethereumId?: string(name='EthereumId'),
    ethereumName?: string(name='EthereumName'),
    id?: string(name='Id'),
    networkId?: string(name='NetworkId'),
    nodeName?: string(name='NodeName'),
    publicIp?: string(name='PublicIp'),
    regionId?: string(name='RegionId'),
    rpcPort?: int32(name='RpcPort'),
    state?: string(name='State'),
    wsPort?: int32(name='WsPort'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateEthereumNodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEthereumNodeResponseBody(name='body'),
}

async function updateEthereumNode(request: UpdateEthereumNodeRequest): UpdateEthereumNodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEthereumNode', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEthereumNodeConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  ip: string(name='IP', position='Body'),
  nodeId: string(name='NodeId', position='Body'),
  nodePub: string(name='NodePub', position='Body'),
  p2pPort: int32(name='P2pPort', position='Body'),
  raftPort?: int32(name='RaftPort', position='Body'),
  rpcPort?: int32(name='RpcPort', position='Body'),
  TMPort: int32(name='TMPort', position='Body'),
  TMPub: string(name='TMPub', position='Body'),
  WSPort?: int32(name='WSPort', position='Body'),
}

model UpdateEthereumNodeConfigurationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateEthereumNodeConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEthereumNodeConfigurationResponseBody(name='body'),
}

async function updateEthereumNodeConfiguration(request: UpdateEthereumNodeConfigurationRequest): UpdateEthereumNodeConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEthereumNodeConfiguration', 'POST', '/', 'json', true, 'form', request);
}

model UpdateGovernanceTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  channelId: string(name='ChannelId', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
  taskAction: string(name='TaskAction', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model UpdateGovernanceTaskResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  result?: {
    channelName?: string(name='ChannelName'),
    content?: {
      addedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='AddedOrganizations'),
      chaincodeSpecPkg?: {
        cs?: {
          input?: string(name='Input'),
          name?: string(name='Name'),
          path?: string(name='Path'),
          type?: int32(name='Type'),
          version?: string(name='Version'),
        }(name='Cs'),
        policy?: string(name='Policy'),
        sha256?: string(name='Sha256'),
      }(name='ChaincodeSpecPkg'),
      ordererConfig?: {
        batchTimeout?: string(name='BatchTimeout'),
        maxMessageCount?: int32(name='MaxMessageCount'),
        preferredMaxBytes?: int32(name='PreferredMaxBytes'),
      }(name='OrdererConfig'),
      raw?: string(name='Raw'),
      removedOrganizations?: [ 
        {
          anchorPeers?: [ 
            {
              host?: string(name='Host'),
              port?: int32(name='Port'),
            }
          ](name='AnchorPeers'),
          crls?: string(name='Crls'),
          mspId?: string(name='MspId'),
          mspType?: string(name='MspType'),
          orderer?: boolean(name='Orderer'),
          ordererNodes?: [ 
            {
              address?: string(name='Address'),
              certificate?: string(name='Certificate'),
              key?: string(name='Key'),
              tlsroot?: string(name='Tlsroot'),
            }
          ](name='OrdererNodes'),
          rootCertificates?: string(name='RootCertificates'),
          tlsRootCertificates?: string(name='TlsRootCertificates'),
        }
      ](name='RemovedOrganizations'),
      rwSets?: string(name='RwSets'),
    }(name='Content'),
    createTime?: long(name='CreateTime'),
    creator?: string(name='Creator'),
    description?: string(name='Description'),
    status?: string(name='Status'),
    taskId?: string(name='TaskId'),
    type?: string(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model UpdateGovernanceTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGovernanceTaskResponseBody(name='body'),
}

async function updateGovernanceTask(request: UpdateGovernanceTaskRequest): UpdateGovernanceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGovernanceTask', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMemberRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
  bid?: string(name='Bid', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
  role?: int32(name='Role', position='Body'),
  userId?: long(name='UserId', position='Body'),
}

model UpdateMemberRoleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateMemberRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemberRoleResponseBody(name='body'),
}

async function updateMemberRole(request: UpdateMemberRoleRequest): UpdateMemberRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMemberRole', 'POST', '/', 'json', true, 'form', request);
}

model UpdateQRCodeAuthorityRequest {
  regionId?: string(name='RegionId', position='Host'),
  authorized?: boolean(name='Authorized', position='Body'),
  bizid?: string(name='Bizid', position='Body'),
}

model UpdateQRCodeAuthorityResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model UpdateQRCodeAuthorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQRCodeAuthorityResponseBody(name='body'),
}

async function updateQRCodeAuthority(request: UpdateQRCodeAuthorityRequest): UpdateQRCodeAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQRCodeAuthority', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSchemaRequest {
  regionId?: string(name='RegionId', position='Host'),
  bizid?: string(name='Bizid', position='Body'),
  categoryConfigs?: string(name='CategoryConfigs', position='Body'),
  description?: string(name='Description', position='Body'),
  schemaId?: long(name='SchemaId', position='Body'),
  schemaName?: string(name='SchemaName', position='Body'),
}

model UpdateSchemaResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    responses?: [ 
      {
        category?: string(name='Category'),
        categoryName?: string(name='CategoryName'),
        description?: string(name='Description'),
        properties?: {
          count?: int32(name='Count'),
          dataSource?: [ 
            {
              allowNull?: int32(name='AllowNull'),
              annotation?: string(name='Annotation'),
              field?: string(name='Field'),
              indexes?: int32(name='Indexes'),
              key?: int32(name='Key'),
              length?: int32(name='Length'),
              reg?: string(name='Reg'),
              type?: string(name='Type'),
            }
          ](name='DataSource'),
        }(name='Properties'),
      }
    ](name='Responses'),
    schema?: {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      isTemplate?: boolean(name='IsTemplate'),
      name?: string(name='Name'),
      updateTime?: long(name='UpdateTime'),
      version?: long(name='Version'),
    }(name='Schema'),
  }(name='Result'),
}

model UpdateSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSchemaResponseBody(name='body'),
}

async function updateSchema(request: UpdateSchemaRequest): UpdateSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSchema', 'POST', '/', 'json', true, 'form', request);
}

model UpgradeChaincodeRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  chaincodeId: string(name='ChaincodeId', example='code-sacc-fk9z4r97****', position='Body'),
  collectionConfig?: string(name='CollectionConfig', example='string', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', example='OR ("wholesalerMSP.peer")', position='Body'),
  location?: string(name='Location', example='cn-hangzhou', position='Body'),
  organizationId: string(name='OrganizationId', example='peers-wholesaler-15ix77tof****', position='Body'),
}

model UpgradeChaincodeResponseBody = {
  errorCode?: int32(name='ErrorCode', example='200'),
  requestId?: string(name='RequestId', example='A6CC6C63-2D71-4D0C-AEBE-E95F0127C514'),
  result?: {
    chaincodeId?: string(name='ChaincodeId', example='code-sacc-fk9z4r97****'),
    channelName?: string(name='ChannelName', example='cc'),
    consortiumId?: string(name='ConsortiumId', example='consortium-supplychain-1pxzsp5tb****'),
    createTime?: string(name='CreateTime', example='1545215617000'),
    deployTime?: string(name='DeployTime', example='1545215617000'),
    endorsePolicy?: string(name='EndorsePolicy', example='OR ("wholesalerMSP.peer")'),
    input?: string(name='Input', example='{}'),
    install?: boolean(name='Install', example='true'),
    message?: string(name='Message', example='OK'),
    name?: string(name='Name', example='sacc'),
    path?: string(name='Path', example='github.com/sacc'),
    providerId?: string(name='ProviderId', example='1928592'),
    providerName?: string(name='ProviderName', example='uid-1928592'),
    state?: string(name='State', example='Running'),
    type?: int32(name='Type', example='1'),
    version?: string(name='Version', example='1.0'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeChaincodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeChaincodeResponseBody(name='body'),
}

async function upgradeChaincode(request: UpgradeChaincodeRequest): UpgradeChaincodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeChaincode', 'POST', '/', 'json', true, 'form', request);
}

model UpgradeFabricChaincodeDefinitionRequest {
  regionId?: string(name='RegionId', position='Host'),
  chaincodeId: string(name='ChaincodeId', position='Body'),
  chaincodePackageId: string(name='ChaincodePackageId', position='Body'),
  chaincodeVersion: string(name='ChaincodeVersion', position='Body'),
  channelId?: string(name='ChannelId', position='Body'),
  collectionConfig?: string(name='CollectionConfig', position='Body'),
  endorsePolicy?: string(name='EndorsePolicy', position='Body'),
  initRequired?: boolean(name='InitRequired', position='Body'),
  location?: string(name='Location', position='Body'),
  organizationId: string(name='OrganizationId', position='Body'),
}

model UpgradeFabricChaincodeDefinitionResponseBody = {
  chaincodeDefinitionId?: string(name='ChaincodeDefinitionId'),
  chaincodePackageId?: string(name='ChaincodePackageId'),
  errorCode?: int32(name='ErrorCode'),
  initRequired?: boolean(name='InitRequired'),
  requestId?: string(name='RequestId'),
  result?: {
    chaincodeId?: string(name='ChaincodeId'),
    chaincodeVersion?: string(name='ChaincodeVersion'),
    channelName?: string(name='ChannelName'),
    consortiumId?: string(name='ConsortiumId'),
    createTime?: string(name='CreateTime'),
    deployTime?: string(name='DeployTime'),
    endorsePolicy?: string(name='EndorsePolicy'),
    input?: string(name='Input'),
    install?: boolean(name='Install'),
    message?: string(name='Message'),
    name?: string(name='Name'),
    path?: string(name='Path'),
    providerId?: string(name='ProviderId'),
    providerName?: string(name='ProviderName'),
    state?: string(name='State'),
    type?: int32(name='Type'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model UpgradeFabricChaincodeDefinitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeFabricChaincodeDefinitionResponseBody(name='body'),
}

async function upgradeFabricChaincodeDefinition(request: UpgradeFabricChaincodeDefinitionRequest): UpgradeFabricChaincodeDefinitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeFabricChaincodeDefinition', 'POST', '/', 'json', true, 'form', request);
}

