/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'partnerintl';
  @version = '2018-12-27';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeProductRequest {
  callerBid?: string(name='CallerBid', position='Body'),
  callerParentId?: long(name='CallerParentId', position='Body'),
  callerType?: string(name='CallerType', position='Body'),
  callerUid?: long(name='CallerUid', position='Body'),
  clientIp?: string(name='ClientIp', position='Body'),
  code?: string(name='Code', position='Body'),
  eagleEyeRpcId?: string(name='EagleEyeRpcId', position='Body'),
  eagleEyeTraceId?: string(name='EagleEyeTraceId', position='Body'),
  eagleEyeUserData?: string(name='EagleEyeUserData', position='Body'),
  ownerId?: long(name='OwnerId', position='Body'),
  queryDraft?: boolean(name='QueryDraft', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  securityToken?: string(name='SecurityToken', position='Body'),
  sourceIp?: string(name='SourceIp', position='Body'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', position='Body'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', position='Body'),
  stsTokenPrincipalId?: string(name='StsTokenPrincipalId', position='Body'),
  stsTokenRoleId?: long(name='StsTokenRoleId', position='Body'),
  stsTokenUserId?: long(name='StsTokenUserId', position='Body'),
  userId?: long(name='UserId', position='Body'),
}

model DescribeProductResponseBody = {
  code?: string(name='Code'),
  errorCode?: string(name='ErrorCode'),
  forceFatal?: boolean(name='ForceFatal'),
  httpCode?: string(name='HttpCode'),
  isSuccess?: boolean(name='IsSuccess'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    auditFailMsg?: string(name='AuditFailMsg'),
    auditStatus?: string(name='AuditStatus'),
    auditTime?: long(name='AuditTime'),
    code?: string(name='Code'),
    description?: string(name='Description'),
    frontCategoryId?: long(name='FrontCategoryId'),
    gmtCreated?: long(name='GmtCreated'),
    gmtModified?: long(name='GmtModified'),
    name?: string(name='Name'),
    picUrl?: string(name='PicUrl'),
    productExtras?: [ 
      {
        key?: string(name='Key'),
        label?: string(name='Label'),
        order?: int32(name='Order'),
        type?: string(name='Type'),
        values?: any(name='Values'),
      }
    ](name='ProductExtras'),
    productSkus?: [ 
      {
        chargeType?: string(name='ChargeType'),
        code?: string(name='Code'),
        constraints?: string(name='Constraints'),
        hidden?: boolean(name='Hidden'),
        modules?: [ 
          {
            code?: string(name='Code'),
            id?: string(name='Id'),
            name?: string(name='Name'),
            properties?: [ 
              {
                conversion?: string(name='Conversion'),
                customContaint?: string(name='CustomContaint'),
                displayName?: string(name='DisplayName'),
                displayUnit?: string(name='DisplayUnit'),
                group?: string(name='Group'),
                isNeedTransmit?: boolean(name='IsNeedTransmit'),
                isShow?: boolean(name='IsShow'),
                isUpgrade?: boolean(name='IsUpgrade'),
                key?: string(name='Key'),
                name?: string(name='Name'),
                order?: long(name='Order'),
                propertyValues?: [ 
                  {
                    displayName?: string(name='DisplayName'),
                    max?: string(name='Max'),
                    min?: string(name='Min'),
                    remark?: string(name='Remark'),
                    step?: string(name='Step'),
                    type?: string(name='Type'),
                    value?: string(name='Value'),
                  }
                ](name='PropertyValues'),
                remark?: string(name='Remark'),
                showType?: string(name='ShowType'),
                unit?: string(name='Unit'),
              }
            ](name='Properties'),
          }
        ](name='Modules'),
        name?: string(name='Name'),
        orderPeriods?: [ 
          {
            name?: string(name='Name'),
            periodType?: string(name='PeriodType'),
          }
        ](name='OrderPeriods'),
        properties?: map[string]any(name='Properties'),
        salePrices?: [ 
          {
            period?: string(name='Period'),
            quota?: string(name='Quota'),
            salePriceItems?: [ 
              {
                price?: float(name='Price'),
                priceType?: string(name='PriceType'),
                tradeType?: string(name='TradeType'),
              }
            ](name='SalePriceItems'),
            sortId?: int32(name='SortId'),
            type?: string(name='Type'),
          }
        ](name='SalePrices'),
        sortId?: int32(name='SortId'),
      }
    ](name='ProductSkus'),
    score?: double(name='Score'),
    shopInfo?: {
      emails?: string(name='Emails'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      telephones?: [ string ](name='Telephones'),
      wangWangs?: [ 
        {
          remark?: string(name='Remark'),
          userName?: string(name='UserName'),
        }
      ](name='WangWangs'),
    }(name='ShopInfo'),
    shortDescription?: string(name='ShortDescription'),
    status?: string(name='Status'),
    supplierPk?: long(name='SupplierPk'),
    type?: string(name='Type'),
    useCount?: long(name='UseCount'),
    version?: string(name='Version'),
  }(name='Result'),
  synchro?: boolean(name='Synchro'),
}

model DescribeProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProductResponseBody(name='body'),
}

async function describeProduct(request: DescribeProductRequest): DescribeProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProduct', 'POST', '/', 'json', true, 'form', request);
}

model QueryCommodityByServiceIdRequest {
  pageIndex?: int32(name='PageIndex', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  serviceIds?: string(name='ServiceIds', position='Body'),
}

model QueryCommodityByServiceIdResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  forceFatal?: boolean(name='ForceFatal'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
  success?: boolean(name='Success'),
}

model QueryCommodityByServiceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCommodityByServiceIdResponseBody(name='body'),
}

async function queryCommodityByServiceId(request: QueryCommodityByServiceIdRequest): QueryCommodityByServiceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCommodityByServiceId', 'POST', '/', 'json', true, 'form', request);
}

model QueryCommodityBySupplierUidRequest {
  pageIndex?: int32(name='PageIndex', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  supplierUid?: string(name='SupplierUid', position='Body'),
}

model QueryCommodityBySupplierUidResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  forceFatal?: boolean(name='ForceFatal'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      code?: string(name='Code'),
      iconUrl?: string(name='IconUrl'),
      name?: string(name='Name'),
      versionList?: [ string ](name='VersionList'),
    }
  ](name='Result'),
  success?: boolean(name='Success'),
}

model QueryCommodityBySupplierUidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCommodityBySupplierUidResponseBody(name='body'),
}

async function queryCommodityBySupplierUid(request: QueryCommodityBySupplierUidRequest): QueryCommodityBySupplierUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCommodityBySupplierUid', 'POST', '/', 'json', true, 'form', request);
}

model QueryCommodityInfoRequest {
  commodityCode?: string(name='CommodityCode', position='Body'),
}

model QueryCommodityInfoResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  forceFatal?: boolean(name='ForceFatal'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    commodityBaseInfo?: {
      auditStatus?: int32(name='AuditStatus'),
      channel?: int32(name='Channel'),
      code?: string(name='Code'),
      gmtPublished?: string(name='GmtPublished'),
      name?: string(name='Name'),
      saleMode?: int32(name='SaleMode'),
      saleWay?: int32(name='SaleWay'),
      specList?: [ 
        {
          code?: string(name='Code'),
          commodityId?: long(name='CommodityId'),
          description?: string(name='Description'),
          gmtCreated?: string(name='GmtCreated'),
          gmtModified?: string(name='GmtModified'),
          id?: long(name='Id'),
          moduleList?: [ 
            {
              code?: string(name='Code'),
              commodityId?: long(name='CommodityId'),
              description?: string(name='Description'),
              gmtCreated?: string(name='GmtCreated'),
              gmtModified?: string(name='GmtModified'),
              id?: long(name='Id'),
              name?: string(name='Name'),
              properties?: map[string]string(name='Properties'),
              saleWay?: int32(name='SaleWay'),
              sortIndex?: int32(name='SortIndex'),
              specId?: long(name='SpecId'),
            }
          ](name='ModuleList'),
          name?: string(name='Name'),
          properties?: map[string]string(name='Properties'),
          sortIndex?: int32(name='SortIndex'),
        }
      ](name='SpecList'),
      status?: int32(name='Status'),
      supplierPK?: string(name='SupplierPK'),
      type?: int32(name='Type'),
    }(name='CommodityBaseInfo'),
    supplierBaseInfo?: {
      aliyunId?: string(name='Aliyun_id'),
      aliyunKp?: string(name='Aliyun_kp'),
      city?: int32(name='City'),
      companyName?: string(name='Company_name'),
      createdOn?: string(name='Created_on'),
      id?: long(name='Id'),
      isvKey?: string(name='Isv_key'),
      province?: int32(name='Province'),
      saleMode?: int32(name='SaleMode'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
    }(name='SupplierBaseInfo'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model QueryCommodityInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCommodityInfoResponseBody(name='body'),
}

async function queryCommodityInfo(request: QueryCommodityInfoRequest): QueryCommodityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCommodityInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryImageIdRequest {
  commodityCode?: string(name='CommodityCode', position='Body'),
  imageVersion?: string(name='ImageVersion', position='Body'),
  pageIndex?: int32(name='PageIndex', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  regionNo?: string(name='RegionNo', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
}

model QueryImageIdResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  forceFatal?: boolean(name='ForceFatal'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
  success?: boolean(name='Success'),
}

model QueryImageIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryImageIdResponseBody(name='body'),
}

async function queryImageId(request: QueryImageIdRequest): QueryImageIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryImageId', 'POST', '/', 'json', true, 'form', request);
}

model QuerySupplierDetailBySupplierUidRequest {
  pageIndex?: int32(name='PageIndex', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  requestId?: string(name='RequestId', position='Body'),
  supplierUids?: string(name='SupplierUids', position='Body'),
}

model QuerySupplierDetailBySupplierUidResponseBody = {
  code?: string(name='Code'),
  dynamicMessage?: string(name='DynamicMessage'),
  forceFatal?: boolean(name='ForceFatal'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]ResultValue(name='Result'),
  success?: boolean(name='Success'),
}

model QuerySupplierDetailBySupplierUidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySupplierDetailBySupplierUidResponseBody(name='body'),
}

async function querySupplierDetailBySupplierUid(request: QuerySupplierDetailBySupplierUidRequest): QuerySupplierDetailBySupplierUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySupplierDetailBySupplierUid', 'POST', '/', 'json', true, 'form', request);
}

model ResultValue = {
  supplierName?: string(name='SupplierName'),
  supplierWebSite?: string(name='SupplierWebSite'),
  supplierDescription?: string(name='SupplierDescription'),
}

