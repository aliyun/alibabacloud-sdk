/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'umeng-finplus';
  @version = '2021-11-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GetMessageStatusRequest {
  taskId: string(name='TaskId', position='Query'),
}

model GetMessageStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    mobile?: string(name='mobile'),
    requestId?: string(name='requestId'),
    status?: string(name='status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMessageStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMessageStatusResponseBody(name='body'),
}

async function getMessageStatus(request: GetMessageStatusRequest): GetMessageStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMessageStatus', 'GET', '/sms/message/status', 'json', false, 'json', request);
}

model SendBatchMessageRequest {
  batchFlag?: string(name='BatchFlag', position='Body'),
  extendInfo?: string(name='ExtendInfo', position='Body'),
  idType: string(name='IdType', position='Body'),
  phoneNumberJson: string(name='PhoneNumberJson', position='Body'),
  signNameJson: string(name='SignNameJson', position='Body'),
  specificChannel?: string(name='SpecificChannel', position='Body'),
  templateCode: string(name='TemplateCode', position='Body'),
  templateParamJson: string(name='TemplateParamJson', position='Body'),
}

model SendBatchMessageResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      mobile?: string(name='mobile'),
      taskId?: string(name='taskId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendBatchMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendBatchMessageResponseBody(name='body'),
}

async function sendBatchMessage(request: SendBatchMessageRequest): SendBatchMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendBatchMessage', 'POST', '/sms/message/send', 'json', true, 'form', request);
}

