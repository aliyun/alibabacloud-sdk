/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'MindLive';
  @version = '2021-03-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model LoginDeviceRequest {
  userId: string(name='UserId', position='Query'),
  userSource: string(name='UserSource', position='Query'),
}

model LoginDeviceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LoginDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LoginDeviceResponseBody(name='body'),
}

async function loginDevice(request: LoginDeviceRequest): LoginDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LoginDevice', 'POST', '/', 'json', false, 'json', request);
}

model LogoutDeviceRequest {
  userId: string(name='UserId', position='Query'),
  userSource: string(name='UserSource', position='Query'),
}

model LogoutDeviceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model LogoutDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LogoutDeviceResponseBody(name='body'),
}

async function logoutDevice(request: LogoutDeviceRequest): LogoutDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LogoutDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryItemBackgroundsRequest {
  itemIds: map[string]any(name='ItemIds', shrink='json', position='Query'),
}

model QueryItemBackgroundsResponseBody = {
  data?: map[string]any(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryItemBackgroundsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryItemBackgroundsResponseBody(name='body'),
}

async function queryItemBackgrounds(request: QueryItemBackgroundsRequest): QueryItemBackgroundsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryItemBackgrounds', 'POST', '/', 'json', false, 'json', request);
}

model ReportCurrentBackgroundRequest {
  bgConfig?: map[string]any(name='BgConfig', shrink='json', position='Query'),
  mode: string(name='Mode', position='Query'),
  open: boolean(name='Open', position='Query'),
  resourceUuid?: string(name='ResourceUuid', position='Query'),
}

model ReportCurrentBackgroundResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportCurrentBackgroundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportCurrentBackgroundResponseBody(name='body'),
}

async function reportCurrentBackground(request: ReportCurrentBackgroundRequest): ReportCurrentBackgroundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportCurrentBackground', 'POST', '/', 'json', false, 'json', request);
}

model ReportDevConfigRequest {
  configs?: string(name='Configs', position='Query'),
}

model ReportDevConfigResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDevConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportDevConfigResponseBody(name='body'),
}

async function reportDevConfig(request: ReportDevConfigRequest): ReportDevConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportDevConfig', 'POST', '/', 'json', false, 'json', request);
}

model ReportLiveStateRequest {
  anchorId: string(name='AnchorId', position='Query'),
  id?: string(name='Id', position='Query'),
  liveMode?: string(name='LiveMode', position='Query'),
  liveState: string(name='LiveState', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  type: string(name='Type', position='Query'),
}

model ReportLiveStateResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportLiveStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportLiveStateResponseBody(name='body'),
}

async function reportLiveState(request: ReportLiveStateRequest): ReportLiveStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportLiveState', 'POST', '/', 'json', false, 'json', request);
}

model ReportScreenRequest {
  ossBucketName: string(name='OssBucketName', position='Query'),
  ossObjectKey: string(name='OssObjectKey', position='Query'),
}

model ReportScreenResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportScreenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportScreenResponseBody(name='body'),
}

async function reportScreen(request: ReportScreenRequest): ReportScreenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportScreen', 'POST', '/', 'json', false, 'json', request);
}

model ReportUserConfigRequest {
  key: string(name='Key', position='Query'),
  value?: string(name='Value', position='Query'),
}

model ReportUserConfigResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReportUserConfigResponseBody(name='body'),
}

async function reportUserConfig(request: ReportUserConfigRequest): ReportUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReportUserConfig', 'POST', '/', 'json', false, 'json', request);
}

model RequestAuthorizationDataRequest {
}

model RequestAuthorizationDataResponseBody = {
  data?: {
    url?: string(name='Url'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestAuthorizationDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestAuthorizationDataResponseBody(name='body'),
}

async function requestAuthorizationData(request: RequestAuthorizationDataRequest): RequestAuthorizationDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestAuthorizationData', 'POST', '/', 'json', false, 'json', request);
}

model RequestBackgroundRequest {
}

model RequestBackgroundResponseBody = {
  data?: {
    bgConfig?: map[string]any(name='BgConfig'),
    downloadUrl?: string(name='DownloadUrl'),
    fileType?: string(name='FileType'),
    mode?: string(name='Mode'),
    open?: boolean(name='Open'),
    resourceUuid?: string(name='ResourceUuid'),
    scope?: string(name='Scope'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestBackgroundResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestBackgroundResponseBody(name='body'),
}

async function requestBackground(request: RequestBackgroundRequest): RequestBackgroundResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestBackground', 'POST', '/', 'json', false, 'json', request);
}

model RequestBindDataRequest {
  liveSource: string(name='LiveSource', position='Query'),
}

model RequestBindDataResponseBody = {
  data?: {
    code?: string(name='Code'),
    maxKeepSeconds?: int32(name='MaxKeepSeconds'),
    shortUrl?: string(name='ShortUrl'),
    url?: string(name='Url'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestBindDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestBindDataResponseBody(name='body'),
}

async function requestBindData(request: RequestBindDataRequest): RequestBindDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestBindData', 'POST', '/', 'json', false, 'json', request);
}

model RequestBindingStateRequest {
}

model RequestBindingStateResponseBody = {
  data?: {
    bindAt?: long(name='BindAt'),
    deviceId?: string(name='DeviceId'),
    userAvatar?: string(name='UserAvatar'),
    userId?: string(name='UserId'),
    userNick?: string(name='UserNick'),
    userSource?: string(name='UserSource'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestBindingStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestBindingStateResponseBody(name='body'),
}

async function requestBindingState(request: RequestBindingStateRequest): RequestBindingStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestBindingState', 'POST', '/', 'json', false, 'json', request);
}

model RequestDeviceInfoRequest {
}

model RequestDeviceInfoResponseBody = {
  data?: {
    deviceId?: string(name='DeviceId'),
    deviceName?: string(name='DeviceName'),
    deviceSn?: string(name='DeviceSn'),
    publicIp?: string(name='PublicIp'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestDeviceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestDeviceInfoResponseBody(name='body'),
}

async function requestDeviceInfo(request: RequestDeviceInfoRequest): RequestDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model RequestIotTriadRequest {
}

model RequestIotTriadResponseBody = {
  data?: {
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
    productKey?: string(name='ProductKey'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestIotTriadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestIotTriadResponseBody(name='body'),
}

async function requestIotTriad(request: RequestIotTriadRequest): RequestIotTriadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestIotTriad', 'POST', '/', 'json', false, 'json', request);
}

model RequestLiveSellPointStateRequest {
}

model RequestLiveSellPointStateResponseBody = {
  data?: {
    display?: boolean(name='Display'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestLiveSellPointStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestLiveSellPointStateResponseBody(name='body'),
}

async function requestLiveSellPointState(request: RequestLiveSellPointStateRequest): RequestLiveSellPointStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestLiveSellPointState', 'GET', '/', 'json', false, 'json', request);
}

model RequestLiveTeleprompterStateRequest {
}

model RequestLiveTeleprompterStateResponseBody = {
  data?: {
    display?: boolean(name='Display'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestLiveTeleprompterStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestLiveTeleprompterStateResponseBody(name='body'),
}

async function requestLiveTeleprompterState(request: RequestLiveTeleprompterStateRequest): RequestLiveTeleprompterStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestLiveTeleprompterState', 'GET', '/', 'json', false, 'json', request);
}

model RequestOssStsRequest {
  appCode: string(name='AppCode', position='Query'),
  expireSeconds: long(name='ExpireSeconds', position='Query'),
}

model RequestOssStsResponseBody = {
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    bucket?: string(name='Bucket'),
    endPoint?: string(name='EndPoint'),
    expire?: string(name='Expire'),
    objectKeyPrefix?: string(name='ObjectKeyPrefix'),
    securityToken?: string(name='SecurityToken'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestOssStsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestOssStsResponseBody(name='body'),
}

async function requestOssSts(request: RequestOssStsRequest): RequestOssStsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestOssSts', 'POST', '/', 'json', false, 'json', request);
}

model RequestPasterRequest {
}

model RequestPasterResponseBody = {
  data?: [ 
    {
      configs?: map[string]any(name='Configs'),
      downloadUrl?: string(name='DownloadUrl'),
      resourceUuid?: string(name='ResourceUuid'),
    }
  ](name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestPasterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestPasterResponseBody(name='body'),
}

async function requestPaster(request: RequestPasterRequest): RequestPasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestPaster', 'POST', '/', 'json', false, 'json', request);
}

model RequestResetDataRequest {
  liveSource: string(name='LiveSource', position='Query'),
}

model RequestResetDataResponseBody = {
  data?: {
    fullUrl?: string(name='FullUrl'),
    url?: string(name='Url'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestResetDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestResetDataResponseBody(name='body'),
}

async function requestResetData(request: RequestResetDataRequest): RequestResetDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestResetData', 'POST', '/', 'json', false, 'json', request);
}

model RequestServiceInfoRequest {
}

model RequestServiceInfoResponseBody = {
  data?: {
    serviceEffectAt?: long(name='ServiceEffectAt'),
    serviceExpireAt?: long(name='ServiceExpireAt'),
    servicePackName?: string(name='ServicePackName'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestServiceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestServiceInfoResponseBody(name='body'),
}

async function requestServiceInfo(request: RequestServiceInfoRequest): RequestServiceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestServiceInfo', 'GET', '/', 'json', false, 'json', request);
}

model RequestUserConfigRequest {
  key: string(name='Key', position='Query'),
}

model RequestUserConfigResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestUserConfigResponseBody(name='body'),
}

async function requestUserConfig(request: RequestUserConfigRequest): RequestUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestUserConfig', 'POST', '/', 'json', false, 'json', request);
}

model RequestUserSellPointTemplateRequest {
}

model RequestUserSellPointTemplateResponseBody = {
  data?: {
    displayConfig?: map[string]any(name='DisplayConfig'),
    templateConfig?: map[string]any(name='TemplateConfig'),
    templateUuid?: string(name='TemplateUuid'),
    url?: string(name='Url'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestUserSellPointTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestUserSellPointTemplateResponseBody(name='body'),
}

async function requestUserSellPointTemplate(request: RequestUserSellPointTemplateRequest): RequestUserSellPointTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestUserSellPointTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ResetDeviceRequest {
  code: string(name='Code', position='Query'),
}

model ResetDeviceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResetDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetDeviceResponseBody(name='body'),
}

async function resetDevice(request: ResetDeviceRequest): ResetDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDevice', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCurrentItemRequest {
  itemId: string(name='ItemId', position='Query'),
}

model UpdateCurrentItemResponseBody = {
  data?: {
    itemBackground?: {
      downloadUrl?: string(name='DownloadUrl'),
      fileType?: string(name='FileType'),
      itemId?: string(name='ItemId'),
      resourceUuid?: string(name='ResourceUuid'),
      scope?: string(name='Scope'),
    }(name='ItemBackground'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCurrentItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCurrentItemResponseBody(name='body'),
}

async function updateCurrentItem(request: UpdateCurrentItemRequest): UpdateCurrentItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCurrentItem', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveSellPointStateRequest {
  display?: boolean(name='Display', position='Query'),
}

model UpdateLiveSellPointStateResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateLiveSellPointStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveSellPointStateResponseBody(name='body'),
}

async function updateLiveSellPointState(request: UpdateLiveSellPointStateRequest): UpdateLiveSellPointStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveSellPointState', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLiveTeleprompterStateRequest {
  display?: boolean(name='Display', position='Query'),
}

model UpdateLiveTeleprompterStateResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateLiveTeleprompterStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLiveTeleprompterStateResponseBody(name='body'),
}

async function updateLiveTeleprompterState(request: UpdateLiveTeleprompterStateRequest): UpdateLiveTeleprompterStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLiveTeleprompterState', 'POST', '/', 'json', false, 'json', request);
}

