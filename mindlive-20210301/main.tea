/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mindlive', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model UpdateLiveSellPointStateRequest {
  display?: boolean(name='Display'),
}

model UpdateLiveSellPointStateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model UpdateLiveSellPointStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveSellPointStateResponseBody(name='body'),
}

async function updateLiveSellPointStateWithOptions(request: UpdateLiveSellPointStateRequest, runtime: Util.RuntimeOptions): UpdateLiveSellPointStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveSellPointState', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveSellPointState(request: UpdateLiveSellPointStateRequest): UpdateLiveSellPointStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveSellPointStateWithOptions(request, runtime);
}

model UpdateLiveTeleprompterStateRequest {
  display?: boolean(name='Display'),
}

model UpdateLiveTeleprompterStateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model UpdateLiveTeleprompterStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLiveTeleprompterStateResponseBody(name='body'),
}

async function updateLiveTeleprompterStateWithOptions(request: UpdateLiveTeleprompterStateRequest, runtime: Util.RuntimeOptions): UpdateLiveTeleprompterStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateLiveTeleprompterState', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateLiveTeleprompterState(request: UpdateLiveTeleprompterStateRequest): UpdateLiveTeleprompterStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLiveTeleprompterStateWithOptions(request, runtime);
}

model RequestBindDataRequest {
  liveSource?: string(name='LiveSource'),
}

model RequestBindDataResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    code?: string(name='Code'),
    maxKeepSeconds?: int32(name='MaxKeepSeconds'),
    url?: string(name='Url'),
    shortUrl?: string(name='ShortUrl'),
  }(name='Data'),
}

model RequestBindDataResponse = {
  headers: map[string]string(name='headers'),
  body: RequestBindDataResponseBody(name='body'),
}

async function requestBindDataWithOptions(request: RequestBindDataRequest, runtime: Util.RuntimeOptions): RequestBindDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RequestBindData', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestBindData(request: RequestBindDataRequest): RequestBindDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestBindDataWithOptions(request, runtime);
}

model LogoutDeviceRequest {
  userSource?: string(name='UserSource'),
  userId?: string(name='UserId'),
}

model LogoutDeviceResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model LogoutDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: LogoutDeviceResponseBody(name='body'),
}

async function logoutDeviceWithOptions(request: LogoutDeviceRequest, runtime: Util.RuntimeOptions): LogoutDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LogoutDevice', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function logoutDevice(request: LogoutDeviceRequest): LogoutDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return logoutDeviceWithOptions(request, runtime);
}

model ReportDevConfigRequest {
  configs?: string(name='Configs'),
}

model ReportDevConfigResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model ReportDevConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDevConfigResponseBody(name='body'),
}

async function reportDevConfigWithOptions(request: ReportDevConfigRequest, runtime: Util.RuntimeOptions): ReportDevConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportDevConfig', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportDevConfig(request: ReportDevConfigRequest): ReportDevConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDevConfigWithOptions(request, runtime);
}

model RequestBackgroundResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    bgConfig?: map[string]any(name='BgConfig'),
    downloadUrl?: string(name='DownloadUrl'),
    fileType?: string(name='FileType'),
    open?: boolean(name='Open'),
    scope?: string(name='Scope'),
    mode?: string(name='Mode'),
    resourceUuid?: string(name='ResourceUuid'),
  }(name='Data'),
}

model RequestBackgroundResponse = {
  headers: map[string]string(name='headers'),
  body: RequestBackgroundResponseBody(name='body'),
}

async function requestBackgroundWithOptions(runtime: Util.RuntimeOptions): RequestBackgroundResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestBackground', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestBackground(): RequestBackgroundResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestBackgroundWithOptions(runtime);
}

model RequestBindingStateResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    userAvatar?: string(name='UserAvatar'),
    deviceId?: string(name='DeviceId'),
    userSource?: string(name='UserSource'),
    userId?: string(name='UserId'),
    bindAt?: long(name='BindAt'),
    userNick?: string(name='UserNick'),
  }(name='Data'),
}

model RequestBindingStateResponse = {
  headers: map[string]string(name='headers'),
  body: RequestBindingStateResponseBody(name='body'),
}

async function requestBindingStateWithOptions(runtime: Util.RuntimeOptions): RequestBindingStateResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestBindingState', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestBindingState(): RequestBindingStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestBindingStateWithOptions(runtime);
}

model QueryItemBackgroundsRequest {
  itemIds?: map[string]any(name='ItemIds'),
}

model QueryItemBackgroundsShrinkRequest {
  itemIdsShrink?: string(name='ItemIds'),
}

model QueryItemBackgroundsResponseBody = {
  data?: map[string]any(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  success?: boolean(name='Success'),
}

model QueryItemBackgroundsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryItemBackgroundsResponseBody(name='body'),
}

async function queryItemBackgroundsWithOptions(tmpReq: QueryItemBackgroundsRequest, runtime: Util.RuntimeOptions): QueryItemBackgroundsResponse {
  Util.validateModel(tmpReq);
  var request = new QueryItemBackgroundsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.itemIds)) {
    request.itemIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.itemIds, 'ItemIds', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryItemBackgrounds', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryItemBackgrounds(request: QueryItemBackgroundsRequest): QueryItemBackgroundsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryItemBackgroundsWithOptions(request, runtime);
}

model RequestAuthorizationDataResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    url?: string(name='Url'),
  }(name='Data'),
}

model RequestAuthorizationDataResponse = {
  headers: map[string]string(name='headers'),
  body: RequestAuthorizationDataResponseBody(name='body'),
}

async function requestAuthorizationDataWithOptions(runtime: Util.RuntimeOptions): RequestAuthorizationDataResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestAuthorizationData', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestAuthorizationData(): RequestAuthorizationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestAuthorizationDataWithOptions(runtime);
}

model RequestPasterResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: [ 
    {
      resourceUuid?: string(name='ResourceUuid'),
      downloadUrl?: string(name='DownloadUrl'),
      configs?: map[string]any(name='Configs'),
    }
  ](name='Data'),
}

model RequestPasterResponse = {
  headers: map[string]string(name='headers'),
  body: RequestPasterResponseBody(name='body'),
}

async function requestPasterWithOptions(runtime: Util.RuntimeOptions): RequestPasterResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestPaster', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestPaster(): RequestPasterResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestPasterWithOptions(runtime);
}

model RequestUserConfigRequest {
  key?: string(name='Key'),
}

model RequestUserConfigResponseBody = {
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  errorCode?: string(name='ErrorCode'),
  success?: boolean(name='Success'),
}

model RequestUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: RequestUserConfigResponseBody(name='body'),
}

async function requestUserConfigWithOptions(request: RequestUserConfigRequest, runtime: Util.RuntimeOptions): RequestUserConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RequestUserConfig', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestUserConfig(request: RequestUserConfigRequest): RequestUserConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestUserConfigWithOptions(request, runtime);
}

model RequestOssStsRequest {
  appCode?: string(name='AppCode'),
  expireSeconds?: long(name='ExpireSeconds'),
}

model RequestOssStsResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    objectKeyPrefix?: string(name='ObjectKeyPrefix'),
    securityToken?: string(name='SecurityToken'),
    accessKeySecret?: string(name='AccessKeySecret'),
    expire?: string(name='Expire'),
    endPoint?: string(name='EndPoint'),
    accessKeyId?: string(name='AccessKeyId'),
    bucket?: string(name='Bucket'),
  }(name='Data'),
}

model RequestOssStsResponse = {
  headers: map[string]string(name='headers'),
  body: RequestOssStsResponseBody(name='body'),
}

async function requestOssStsWithOptions(request: RequestOssStsRequest, runtime: Util.RuntimeOptions): RequestOssStsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RequestOssSts', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestOssSts(request: RequestOssStsRequest): RequestOssStsResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestOssStsWithOptions(request, runtime);
}

model ResetDeviceRequest {
  code?: string(name='Code'),
}

model ResetDeviceResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model ResetDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDeviceResponseBody(name='body'),
}

async function resetDeviceWithOptions(request: ResetDeviceRequest, runtime: Util.RuntimeOptions): ResetDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetDevice', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetDevice(request: ResetDeviceRequest): ResetDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDeviceWithOptions(request, runtime);
}

model RequestDeviceInfoResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    publicIp?: string(name='PublicIp'),
    deviceName?: string(name='DeviceName'),
    deviceId?: string(name='DeviceId'),
  }(name='Data'),
}

model RequestDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: RequestDeviceInfoResponseBody(name='body'),
}

async function requestDeviceInfoWithOptions(runtime: Util.RuntimeOptions): RequestDeviceInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestDeviceInfo', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestDeviceInfo(): RequestDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestDeviceInfoWithOptions(runtime);
}

model RequestResetDataRequest {
  liveSource?: string(name='LiveSource'),
}

model RequestResetDataResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    fullUrl?: string(name='FullUrl'),
    url?: string(name='Url'),
  }(name='Data'),
}

model RequestResetDataResponse = {
  headers: map[string]string(name='headers'),
  body: RequestResetDataResponseBody(name='body'),
}

async function requestResetDataWithOptions(request: RequestResetDataRequest, runtime: Util.RuntimeOptions): RequestResetDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RequestResetData', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestResetData(request: RequestResetDataRequest): RequestResetDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestResetDataWithOptions(request, runtime);
}

model LoginDeviceRequest {
  userSource?: string(name='UserSource'),
  userId?: string(name='UserId'),
}

model LoginDeviceResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model LoginDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: LoginDeviceResponseBody(name='body'),
}

async function loginDeviceWithOptions(request: LoginDeviceRequest, runtime: Util.RuntimeOptions): LoginDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LoginDevice', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function loginDevice(request: LoginDeviceRequest): LoginDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return loginDeviceWithOptions(request, runtime);
}

model ReportUserConfigRequest {
  key?: string(name='Key'),
  value?: string(name='Value'),
}

model ReportUserConfigResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model ReportUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ReportUserConfigResponseBody(name='body'),
}

async function reportUserConfigWithOptions(request: ReportUserConfigRequest, runtime: Util.RuntimeOptions): ReportUserConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportUserConfig', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportUserConfig(request: ReportUserConfigRequest): ReportUserConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportUserConfigWithOptions(request, runtime);
}

model UpdateCurrentItemRequest {
  itemId?: string(name='ItemId'),
}

model UpdateCurrentItemResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    itemBackground?: {
      scope?: string(name='Scope'),
      itemId?: string(name='ItemId'),
      resourceUuid?: string(name='ResourceUuid'),
      downloadUrl?: string(name='DownloadUrl'),
      fileType?: string(name='FileType'),
    }(name='ItemBackground'),
  }(name='Data'),
}

model UpdateCurrentItemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCurrentItemResponseBody(name='body'),
}

async function updateCurrentItemWithOptions(request: UpdateCurrentItemRequest, runtime: Util.RuntimeOptions): UpdateCurrentItemResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCurrentItem', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCurrentItem(request: UpdateCurrentItemRequest): UpdateCurrentItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCurrentItemWithOptions(request, runtime);
}

model RequestLiveSellPointStateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: {
    display?: boolean(name='Display', description='whether display'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', description='error code'),
  errorMessage?: string(name='ErrorMessage', description='error detail'),
  success?: boolean(name='Success', description='whether succeeds'),
}

model RequestLiveSellPointStateResponse = {
  headers: map[string]string(name='headers'),
  body: RequestLiveSellPointStateResponseBody(name='body'),
}

async function requestLiveSellPointStateWithOptions(runtime: Util.RuntimeOptions): RequestLiveSellPointStateResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestLiveSellPointState', '2021-03-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function requestLiveSellPointState(): RequestLiveSellPointStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestLiveSellPointStateWithOptions(runtime);
}

model RequestServiceInfoResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: {
    serviceEffectAt?: long(name='ServiceEffectAt', description='Service start time'),
    serviceExpireAt?: long(name='ServiceExpireAt', description='Service end time'),
    servicePackName?: string(name='ServicePackName', description='Name of service'),
  }(name='Data', description='Service pack info'),
  errorCode?: string(name='ErrorCode', description='Error code'),
  errorMessage?: string(name='ErrorMessage', description='Error message'),
  success?: boolean(name='Success', description='Whether request succeeds'),
}

model RequestServiceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: RequestServiceInfoResponseBody(name='body'),
}

async function requestServiceInfoWithOptions(runtime: Util.RuntimeOptions): RequestServiceInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestServiceInfo', '2021-03-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function requestServiceInfo(): RequestServiceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestServiceInfoWithOptions(runtime);
}

model ReportCurrentBackgroundRequest {
  open?: boolean(name='Open'),
  mode?: string(name='Mode'),
  resourceUuid?: string(name='ResourceUuid'),
  bgConfig?: map[string]any(name='BgConfig'),
}

model ReportCurrentBackgroundShrinkRequest {
  open?: boolean(name='Open'),
  mode?: string(name='Mode'),
  resourceUuid?: string(name='ResourceUuid'),
  bgConfigShrink?: string(name='BgConfig'),
}

model ReportCurrentBackgroundResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model ReportCurrentBackgroundResponse = {
  headers: map[string]string(name='headers'),
  body: ReportCurrentBackgroundResponseBody(name='body'),
}

async function reportCurrentBackgroundWithOptions(tmpReq: ReportCurrentBackgroundRequest, runtime: Util.RuntimeOptions): ReportCurrentBackgroundResponse {
  Util.validateModel(tmpReq);
  var request = new ReportCurrentBackgroundShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bgConfig)) {
    request.bgConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bgConfig, 'BgConfig', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportCurrentBackground', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportCurrentBackground(request: ReportCurrentBackgroundRequest): ReportCurrentBackgroundResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportCurrentBackgroundWithOptions(request, runtime);
}

model ReportScreenRequest {
  ossBucketName?: string(name='OssBucketName'),
  ossObjectKey?: string(name='OssObjectKey'),
}

model ReportScreenResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model ReportScreenResponse = {
  headers: map[string]string(name='headers'),
  body: ReportScreenResponseBody(name='body'),
}

async function reportScreenWithOptions(request: ReportScreenRequest, runtime: Util.RuntimeOptions): ReportScreenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportScreen', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportScreen(request: ReportScreenRequest): ReportScreenResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportScreenWithOptions(request, runtime);
}

model RequestIotTriadResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    productKey?: string(name='ProductKey'),
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
  }(name='Data'),
}

model RequestIotTriadResponse = {
  headers: map[string]string(name='headers'),
  body: RequestIotTriadResponseBody(name='body'),
}

async function requestIotTriadWithOptions(runtime: Util.RuntimeOptions): RequestIotTriadResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestIotTriad', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestIotTriad(): RequestIotTriadResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestIotTriadWithOptions(runtime);
}

model RequestUserSellPointTemplateResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
  data?: {
    url?: string(name='Url'),
    templateConfig?: map[string]any(name='TemplateConfig'),
    templateUuid?: string(name='TemplateUuid'),
    displayConfig?: map[string]any(name='DisplayConfig'),
  }(name='Data'),
}

model RequestUserSellPointTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: RequestUserSellPointTemplateResponseBody(name='body'),
}

async function requestUserSellPointTemplateWithOptions(runtime: Util.RuntimeOptions): RequestUserSellPointTemplateResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestUserSellPointTemplate', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function requestUserSellPointTemplate(): RequestUserSellPointTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestUserSellPointTemplateWithOptions(runtime);
}

model ReportLiveStateRequest {
  type?: string(name='Type'),
  id?: string(name='Id'),
  anchorId?: string(name='AnchorId'),
  liveState?: string(name='LiveState'),
  liveMode?: string(name='LiveMode'),
  startTime?: long(name='StartTime'),
}

model ReportLiveStateResponseBody = {
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorCode?: string(name='ErrorCode'),
}

model ReportLiveStateResponse = {
  headers: map[string]string(name='headers'),
  body: ReportLiveStateResponseBody(name='body'),
}

async function reportLiveStateWithOptions(request: ReportLiveStateRequest, runtime: Util.RuntimeOptions): ReportLiveStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportLiveState', '2021-03-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportLiveState(request: ReportLiveStateRequest): ReportLiveStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportLiveStateWithOptions(request, runtime);
}

model RequestLiveTeleprompterStateResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  data?: {
    display?: boolean(name='Display'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  success?: boolean(name='Success'),
}

model RequestLiveTeleprompterStateResponse = {
  headers: map[string]string(name='headers'),
  body: RequestLiveTeleprompterStateResponseBody(name='body'),
}

async function requestLiveTeleprompterStateWithOptions(runtime: Util.RuntimeOptions): RequestLiveTeleprompterStateResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('RequestLiveTeleprompterState', '2021-03-01', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function requestLiveTeleprompterState(): RequestLiveTeleprompterStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestLiveTeleprompterStateWithOptions(runtime);
}

