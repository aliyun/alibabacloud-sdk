/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'umeng-push';
  @version = '2022-02-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Alert {
  body?: string(name='body'),
  subtitle?: string(name='subtitle'),
  title?: string(name='title'),
}

model AndroidPayload {
  body?: Body(name='body'),
  displayType?: string(name='displayType'),
  extra?: map[string]any(name='extra'),
}

model Aps {
  alert?: Alert(name='alert'),
  badge?: string(name='badge', example='+1(自增)，-1(自减)，4(设置数字)'),
  category?: string(name='category'),
  contentAvailable?: int32(name='contentAvailable'),
  interruptionLevel?: string(name='interruptionLevel'),
  sound?: string(name='sound'),
  threadID?: string(name='threadID'),
}

model Body {
  activity?: string(name='activity'),
  addBadge?: int32(name='addBadge'),
  afterOpen?: string(name='afterOpen', maxLength=16),
  builderId?: long(name='builderId'),
  custom?: string(name='custom'),
  expandImage?: string(name='expandImage'),
  icon?: string(name='icon', maxLength=1024),
  img?: string(name='img', maxLength=1024),
  playLights?: boolean(name='playLights'),
  playSound?: boolean(name='playSound'),
  playVibrate?: boolean(name='playVibrate'),
  rePop?: int32(name='rePop'),
  setBadge?: int32(name='setBadge'),
  sound?: string(name='sound'),
  text?: string(name='text', maxLength=1024),
  title?: string(name='title', maxLength=1024),
  url?: string(name='url'),
}

model ChannelProperties {
  channelActivity?: string(name='channelActivity', maxLength=1024),
  channelFcm?: string(name='channelFcm'),
  huaweiChannelCategory?: string(name='huaweiChannelCategory'),
  huaweiChannelImportance?: string(name='huaweiChannelImportance'),
  mainActivity?: string(name='mainActivity', maxLength=1024),
  oppoChannelId?: string(name='oppoChannelId', maxLength=1024),
  vivoAddBadge?: string(name='vivoAddBadge', example='"true",默认"false"'),
  vivoCategory?: string(name='vivoCategory'),
  xiaomiChannelId?: string(name='xiaomiChannelId', maxLength=1024),
}

model IosPayload {
  aps?: Aps(name='aps'),
  extra?: map[string]any(name='extra'),
}

model Policy {
  expireTime?: string(name='expireTime', example='yyyy-MM-dd HH:mm:ss', minLength=19, maxLength=19),
  outerBizNo?: string(name='outerBizNo', maxLength=512),
  speed?: int32(name='speed', example='5000', minimum=1000),
  startTime?: string(name='startTime', example='yyyy-MM-dd HH:mm:ss', minLength=19, maxLength=19),
}

model CancelByMsgIdRequest {
  msgId?: string(name='MsgId', example='ucj0242167047014687101', position='Body'),
}

model CancelByMsgIdResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    msgId?: string(name='MsgId', example='ucj0242167047014687101'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model CancelByMsgIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelByMsgIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelByMsgId  CancelByMsgIdRequest
  * @return CancelByMsgIdResponse
 */
async function cancelByMsgId(request: CancelByMsgIdRequest): CancelByMsgIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelByMsgId', 'POST', '/CancelByMsgId', 'json', true, 'form', request);
}

model QueryMsgStatRequest {
  msgId?: string(name='MsgId', example='ufe29y2167046828041801', position='Body'),
}

model QueryMsgStatResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    accept?: long(name='Accept', example='1'),
    arrive?: long(name='Arrive', example='1'),
    closePush?: long(name='ClosePush', example='0'),
    dismiss?: long(name='Dismiss', example='0'),
    msgId?: string(name='MsgId', example='ufe29y2167046828041801'),
    open?: long(name='Open', example='1'),
    sent?: long(name='Sent', example='1'),
    status?: int32(name='Status', example='2'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model QueryMsgStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMsgStatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMsgStat  QueryMsgStatRequest
  * @return QueryMsgStatResponse
 */
async function queryMsgStat(request: QueryMsgStatRequest): QueryMsgStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryMsgStat', 'POST', '/QueryMsgStat', 'json', true, 'form', request);
}

model SendByAliasRequest {
  alias: string(name='Alias', description='This parameter is required.', example='test', position='Body'),
  aliasType?: string(name='AliasType', position='Body'),
  androidPayload?: AndroidPayload(name='AndroidPayload', shrink='json', position='Body'),
  channelProperties?: ChannelProperties(name='ChannelProperties', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  iosPayload?: IosPayload(name='IosPayload', shrink='json', position='Body'),
  policy?: Policy(name='Policy', shrink='json', position='Body'),
  productionMode?: boolean(name='ProductionMode', example='true', position='Body'),
  receiptType?: int32(name='ReceiptType', position='Body'),
  receiptUrl?: string(name='ReceiptUrl', example='https://msg.umeng.com/upush/receipt', position='Body'),
  thirdPartyId?: string(name='ThirdPartyId', position='Body'),
}

model SendByAliasResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    msgId?: string(name='MsgId', example='uacxo27167041814609201'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model SendByAliasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendByAliasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendByAlias  SendByAliasRequest
  * @return SendByAliasResponse
 */
async function sendByAlias(request: SendByAliasRequest): SendByAliasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendByAlias', 'POST', '/SendByAlias', 'json', true, 'form', request);
}

model SendByAliasFileIdRequest {
  aliasType?: string(name='AliasType', position='Body'),
  androidPayload?: AndroidPayload(name='AndroidPayload', shrink='json', position='Body'),
  channelProperties?: ChannelProperties(name='ChannelProperties', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  fileId: string(name='FileId', description='This parameter is required.', example='PF835431668603208261', position='Body'),
  iosPayload?: IosPayload(name='IosPayload', shrink='json', position='Body'),
  policy?: Policy(name='Policy', shrink='json', position='Body'),
  productionMode?: boolean(name='ProductionMode', example='true', position='Body'),
  receiptType?: int32(name='ReceiptType', position='Body'),
  receiptUrl?: string(name='ReceiptUrl', example='https://msg.umeng.com/upush/receipt', position='Body'),
  thirdPartyId?: string(name='ThirdPartyId', position='Body'),
}

model SendByAliasFileIdResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    msgId?: string(name='MsgId', example='ucj0242167047014687101'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model SendByAliasFileIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendByAliasFileIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendByAliasFileId  SendByAliasFileIdRequest
  * @return SendByAliasFileIdResponse
 */
async function sendByAliasFileId(request: SendByAliasFileIdRequest): SendByAliasFileIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendByAliasFileId', 'POST', '/SendByAliasFileId', 'json', true, 'form', request);
}

model SendByAppRequest {
  androidPayload?: AndroidPayload(name='AndroidPayload', shrink='json', position='Body'),
  channelProperties?: ChannelProperties(name='ChannelProperties', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  iosPayload?: IosPayload(name='IosPayload', shrink='json', position='Body'),
  policy?: Policy(name='Policy', shrink='json', position='Body'),
  productionMode?: boolean(name='ProductionMode', example='true', position='Body'),
  receiptType?: int32(name='ReceiptType', position='Body'),
  receiptUrl?: string(name='ReceiptUrl', example='https://msg.umeng.com/upush/receipt', position='Body'),
  thirdPartyId?: string(name='ThirdPartyId', position='Body'),
}

model SendByAppResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    msgId?: string(name='MsgId', example='um3zlgb166876370784300'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model SendByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendByAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendByApp  SendByAppRequest
  * @return SendByAppResponse
 */
async function sendByApp(request: SendByAppRequest): SendByAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendByApp', 'POST', '/SendByApp', 'json', true, 'form', request);
}

model SendByDeviceRequest {
  androidPayload?: AndroidPayload(name='AndroidPayload', shrink='json', position='Body'),
  channelProperties?: ChannelProperties(name='ChannelProperties', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  deviceTokens: string(name='DeviceTokens', description='This parameter is required.', example='ArdNyIzFCH2K3szXA8arpu0Y7ywOdA67mCSumtpnMnmf', position='Body'),
  iosPayload?: IosPayload(name='IosPayload', shrink='json', position='Body'),
  policy?: Policy(name='Policy', shrink='json', position='Body'),
  productionMode?: boolean(name='ProductionMode', example='true', position='Body'),
  receiptType?: int32(name='ReceiptType', position='Body'),
  receiptUrl?: string(name='ReceiptUrl', example='https://msg.umeng.com/upush/receipt', position='Body'),
  thirdPartyId?: string(name='ThirdPartyId', position='Body'),
}

model SendByDeviceResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    msgId?: string(name='MsgId', example='ula4wbu166876119986400'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='内部错误'),
  requestId?: string(name='RequestId', example='74808AA4-A044-102F-8F5F-AFE4D97A0F26'),
  success?: boolean(name='Success', example='true'),
}

model SendByDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendByDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendByDevice  SendByDeviceRequest
  * @return SendByDeviceResponse
 */
async function sendByDevice(request: SendByDeviceRequest): SendByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendByDevice', 'POST', '/SendByDevice', 'json', true, 'form', request);
}

model SendByDeviceFileIdRequest {
  androidPayload?: AndroidPayload(name='AndroidPayload', shrink='json', position='Body'),
  channelProperties?: ChannelProperties(name='ChannelProperties', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  fileId: string(name='FileId', description='This parameter is required.', example='PF835431668603208261', position='Body'),
  iosPayload?: IosPayload(name='IosPayload', shrink='json', position='Body'),
  policy?: Policy(name='Policy', shrink='json', position='Body'),
  productionMode?: boolean(name='ProductionMode', example='true', position='Body'),
  receiptType?: int32(name='ReceiptType', position='Body'),
  receiptUrl?: string(name='ReceiptUrl', example='https://msg.umeng.com/upush/receipt', position='Body'),
  thirdPartyId?: string(name='ThirdPartyId', position='Body'),
}

model SendByDeviceFileIdResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    msgId?: string(name='MsgId', example='ufe29y2167046828041801'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model SendByDeviceFileIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendByDeviceFileIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendByDeviceFileId  SendByDeviceFileIdRequest
  * @return SendByDeviceFileIdResponse
 */
async function sendByDeviceFileId(request: SendByDeviceFileIdRequest): SendByDeviceFileIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendByDeviceFileId', 'POST', '/SendByDeviceFileId', 'json', true, 'form', request);
}

model SendByFilterRequest {
  androidPayload?: AndroidPayload(name='AndroidPayload', shrink='json', position='Body'),
  channelProperties?: ChannelProperties(name='ChannelProperties', shrink='json', position='Body'),
  description?: string(name='Description', position='Body'),
  filter?: string(name='Filter', example='"where":{"and":[{"or":[{"app_version":">=1.0"}]}]}', position='Body'),
  iosPayload?: IosPayload(name='IosPayload', shrink='json', position='Body'),
  policy?: Policy(name='Policy', shrink='json', position='Body'),
  productionMode?: boolean(name='ProductionMode', example='true', position='Body'),
  receiptType?: int32(name='ReceiptType', position='Body'),
  receiptUrl?: string(name='ReceiptUrl', example='https://msg.umeng.com/upush/receipt', position='Body'),
  thirdPartyId?: string(name='ThirdPartyId', position='Body'),
}

model SendByFilterResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    msgId?: string(name='MsgId', example='usouag1167056659161101'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model SendByFilterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendByFilterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendByFilter  SendByFilterRequest
  * @return SendByFilterResponse
 */
async function sendByFilter(request: SendByFilterRequest): SendByFilterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendByFilter', 'POST', '/SendByFilter', 'json', true, 'form', request);
}

model UploadDeviceRequest {
  deviceTokens?: string(name='DeviceTokens', example='device_token_1\\ndevice_token_2\\ndevice_token_3\\n...
alias1\\nalias2\\nalias3\\n...', position='Body'),
}

model UploadDeviceResponseBody = {
  code?: string(name='Code', example='0'),
  data?: {
    fileId?: string(name='FileId', example='PF835431668603208261'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='86C4236B-D6C2-1E31-8370-2FAEC5CFE012'),
  success?: boolean(name='Success', example='true'),
}

model UploadDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadDevice  UploadDeviceRequest
  * @return UploadDeviceResponse
 */
async function uploadDevice(request: UploadDeviceRequest): UploadDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UploadDevice', 'POST', '/UploadDevice', 'json', true, 'form', request);
}

