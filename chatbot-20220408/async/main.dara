/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Chatbot';
  @version = '2022-04-08';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AssociateRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
  perspective?: [ string ](name='Perspective', description='视角编码，用于调用同一知识标题下不同视角的答案。在拼装请求参数时，需要以Perspective={视角编码}的格式传递参数。如：&Perspective=["FZJBY3raWr"]。使用SDK时以SDK中定义的参数为准。目前仅支持一个视角答案的调用。       （公有云）', example='["qyzzVfyFfa"]', shrink='json', position='Query'),
  recommendNum?: long(name='RecommendNum', description='推荐问题数量，1-10，当出推荐的时候才生效，返回不大于RecommendN', example='8', position='Query'),
  sessionId?: string(name='SessionId', description='会话ID，用于标识一个访问者的会话和保持上下文信息。对于一个新的访问者，首次调用Chat接口时无需传递此字段，机器人会开启一个会话，并在Chat接口的响应中返回该会话的SessionId。对于该访问者的后续轮次的会话，调用Chat接口时传递当前会话的SessionId，机器人即可基于SessionId继续该轮次会话。', example='7c3cec23cc8940bc9db4a318c8f4f0aa', position='Query'),
  utterance?: string(name='Utterance', description='用户表述', example='公积金提取', position='Query'),
}

model AssociateResponseBody = {
  associate?: [ 
    {
      meta?: string(name='Meta', description='附带信息', example='{}'),
      title?: string(name='Title', description='关联问题的标题', example='公积金提取的政策'),
    }
  ](name='Associate', description='联想的列表'),
  messageId?: string(name='MessageId', description='本条会话应答消息的ID', example='5ADF0EBD-7C50-1922-A28B-43215B47CC1A'),
  requestId?: string(name='RequestId', description='请求id', example='5C20F0D4-9721-178A-8236-3BF990634962'),
  sessionId?: string(name='SessionId', description='本次会话的ID', example='1531ded6b3df4afca4be63943f708bb7'),
}

model AssociateResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateResponseBody(name='body'),
}

async function associate(request: AssociateRequest): AssociateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Associate', 'POST', '/', 'json', false, 'json', request);
}

model BeginSessionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model BeginSessionResponseBody = {
  requestId?: string(name='RequestId', description='请求id', example='149C7528-C104-1B50-A4F9-0C5907A8AD9D'),
  welcomeMessage?: string(name='WelcomeMessage', description='欢迎语', example='智能对话机器人为您服务，请问有什么可以帮您？'),
}

model BeginSessionResponse = {
  headers: map[string]string(name='headers'),
  body: BeginSessionResponseBody(name='body'),
}

async function beginSession(request: BeginSessionRequest): BeginSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BeginSession', 'POST', '/', 'json', false, 'json', request);
}

model CancelInstancePublishTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  id?: long(name='Id', description='任务ID', example='8521', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model CancelInstancePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2022-04-12T06:30:17Z'),
  error?: string(name='Error', description='job失败信息'),
  id?: long(name='Id', description='任务Id', example='8522'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间', example='2022-04-12T06:30:33Z'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: string(name='Response', description='任务Id', example='8522'),
  status?: string(name='Status', description='任务状态', example='FE_ABORTED'),
}

model CancelInstancePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelInstancePublishTaskResponseBody(name='body'),
}

async function cancelInstancePublishTask(request: CancelInstancePublishTaskRequest): CancelInstancePublishTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelInstancePublishTask', 'POST', '/', 'json', false, 'json', request);
}

model CancelPublishTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  id?: long(name='Id', description='发布任务Id', example='8521', position='Query'),
}

model CancelPublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2022-04-12T06:30:17Z'),
  error?: string(name='Error', description='发布任务失败信息'),
  id?: long(name='Id', description='发布任务Id', example='8522'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间', example='2022-04-12T06:30:33Z'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: string(name='Response', description='发布任务Id，冗余字段，建议使用Id字段获取发布任务Id', example='8522'),
  status?: string(name='Status', description='任务状态（ FE_RUNNING：正在发布中 FE_SUCCESS：发布成功 FE_FAILED：发布失败 FE_ABORTED：发布取消）', example='FE_ABORTED'),
}

model CancelPublishTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPublishTaskResponseBody(name='body'),
}

async function cancelPublishTask(request: CancelPublishTaskRequest): CancelPublishTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelPublishTask', 'POST', '/', 'json', false, 'json', request);
}

model ChatRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人实例ID。登录云小蜜控制台，机器人详情->会话接口，查看机器人实例信息，可获得该实例ID。', example='chatbot-cn-mp90s2lrk00050', position='Query'),
  intentName?: string(name='IntentName', description='对话流中意图名称。 若指定此名称，机器人会直接进入此意图做问答', position='Query'),
  knowledgeId?: string(name='KnowledgeId', description='知识库中知识标题的ID。若指定此ID，那么机器人会直接返回指定知识标题的答案', example='30002406051', position='Query'),
  perspective?: [ string ](name='Perspective', description='视角编码，用于调用同一知识标题下不同视角的答案。如：Perspective=["FZJBY3raWr"]。使用SDK时以SDK中定义的参数为准', shrink='json', position='Query'),
  senderId?: string(name='SenderId', description='访问者ID。用于识别当前会话中的用户', example='custumer_123456', position='Query'),
  senderNick?: string(name='SenderNick', description='当前会话中访问的昵称', position='Query'),
  sessionId?: string(name='SessionId', description='会话ID，用于标识一个访问者的会话和保持上下文信息。对于一个新的访问者，首次调用Chat接口时无需传递此字段，机器人会开启一个会话，并在Chat接口的响应中返回该会话的SessionId。对于该访问者的后续轮次的会话，调用Chat接口时传递当前会话的SessionId，机器人即可基于SessionId继续该轮次会话。长度限制是64个字符', example='9c6ebdc6e66f46ecadab3434314f6959', position='Query'),
  utterance?: string(name='Utterance', description='机器人访问者的输入', position='Query'),
  vendorParam?: string(name='VendorParam', example='{"phone":123456789}', position='Query'),
}

model ChatResponseBody = {
  messageId?: string(name='MessageId', description='本条会话应答消息的ID', example='A2315C4B-A872-5DEE-9DAD-D73B194A4AEC'),
  messages?: [ 
    {
      answerSource?: string(name='AnswerSource', description='当AnswerType为Recommend时，此字段表示推荐的答案来源', example='KNOWLEDGE'),
      answerType?: string(name='AnswerType', description='本条消息的类型', example='Text'),
      knowledge?: {
        answerSource?: string(name='AnswerSource', description='区分答案类型。
KnowledgeBase:知识库条；', example='KnowledgeBase'),
        category?: string(name='Category', description='知识类目'),
        content?: string(name='Content', description='命中问题的内容'),
        contentType?: string(name='ContentType', description='纯文本/富文本答案的标示', example='PLAIN_TEXT'),
        hitStatement?: string(name='HitStatement', description='命中语句'),
        id?: string(name='Id', description='命中问题在知识库中的ID', example='735898'),
        relatedKnowledges?: [ 
          {
            knowledgeId?: string(name='KnowledgeId', description='知识关联知识的ID', example='735899'),
            title?: string(name='Title', description='知识的关联知识的标题'),
          }
        ](name='RelatedKnowledges', description='关联知识列表'),
        score?: double(name='Score', description='分数', example='0.998'),
        summary?: string(name='Summary', description='命中问题的简介'),
        title?: string(name='Title', description='命中问题的标题'),
      }(name='Knowledge', description='当AnswerType为Knowledge时，此字段包含机器人返回的Knowledge对象'),
      recommends?: [ 
        {
          answerSource?: string(name='AnswerSource', description='澄清来源的标识', example='KNOWLEDGE'),
          knowledgeId?: string(name='KnowledgeId', description='澄清的知识id', example='4548'),
          score?: double(name='Score', description='推荐内容的分数，当AnswerSource为KNOWLEDGE时，此字段有值', example='0.46'),
          title?: string(name='Title', description='澄清内容，可能是
图谱问答的实体、
知识问答的知识标题、
表格问答的列值'),
        }
      ](name='Recommends', description='当AnswerType为Recommend时，此字段包含机器人返回的Recommend的列表'),
      text?: {
        answerSource?: string(name='AnswerSource', description='区分答案类型', example='BotFramework'),
        articleTitle?: string(name='ArticleTitle', description='当AnswerSource为MACHINE_READ时，此字段返回命中文章标题'),
        commands?: map[string]any(name='Commands', description='指令参数，如转人工指令的转人工技能组', example='{
	"sysToAgent": "{\\"skillGroup\\":\\"12\\"}"
}'),
        content?: string(name='Content', description='文本消息的内容'),
        contentType?: string(name='ContentType', description='纯文本/富文本答案的标示', example='PLAIN_TEXT'),
        dialogName?: string(name='DialogName', description='当AnswerSource为BotFramework时，此字段返回对话单元名称'),
        ext?: map[string]any(name='Ext', description='此字段返回透传参数'),
        externalFlags?: map[string]any(name='ExternalFlags', description='当AnswerSource为BotFramework时，此字段返回透传参数'),
        hitStatement?: string(name='HitStatement', description='命中语句'),
        intentName?: string(name='IntentName', description='当AnswerSource为BotFramework时，此字段返回意图名称'),
        metaData?: string(name='MetaData'),
        nodeId?: string(name='NodeId', description='当AnswerSource为BotFramework时，此字段返回节点Id', example='1410-c7a72a78.__city'),
        nodeName?: string(name='NodeName', description='当AnswerSource为BotFramework时，此字段返回节点名称'),
        responseType?: string(name='ResponseType', description='当AnswerSource=BotFramework，ResponseType=SSML时，表示命中对话工厂交互式填槽；否则字段不存在', example='SSML'),
        score?: double(name='Score', description='分数', example='100.0'),
        slots?: [ 
          {
            hit?: boolean(name='Hit', example='false'),
            name?: string(name='Name'),
            origin?: string(name='Origin'),
            value?: string(name='Value'),
          }
        ](name='Slots', description='当AnswerSource为BotFramework时，此字段返回专有名词列表'),
        userDefinedChatTitle?: string(name='UserDefinedChatTitle', description='自定义闲聊主题title'),
      }(name='Text', description='当AnswerType为Text时，此字段包含机器人返回的Text对象'),
      title?: string(name='Title', description='当AnswerType为Recommend时，此字段表示推荐或者反问的标题话术'),
      voiceTitle?: string(name='VoiceTitle', description='当AnswerType为Recommend时，并且问答的机器人为语音机器人，此字段表示列表型答案在语音场景渲染之后的答案内容'),
    }
  ](name='Messages', description='消息的列表'),
  querySegList?: [ string ](name='QuerySegList', description='query的分词结果，可能为空'),
  requestId?: string(name='RequestId', description='请求id', example='A2315C4B-A872-5DEE-9DAD-D73B194A4AEC'),
  sessionId?: string(name='SessionId', description='本次会话的ID', example='a6f216a0685c4c8baa0e8beb6d5ec6db'),
}

model ChatResponse = {
  headers: map[string]string(name='headers'),
  body: ChatResponseBody(name='body'),
}

async function chat(request: ChatRequest): ChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Chat', 'POST', '/', 'json', false, 'json', request);
}

model ContinueInstancePublishTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  id?: long(name='Id', description='任务ID', example='8521', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model ContinueInstancePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2022-04-12T06:30:17Z'),
  error?: string(name='Error', description='job失败信息'),
  errors?: map[string]any(name='Errors', description='各子发布模块的错误信息，key是子发布模块，value是错误信息', example='{}'),
  id?: long(name='Id', description='任务Id', example='8522'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间', example='2022-04-12T06:30:33Z'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: string(name='Response', description='任务Id', example='8522'),
  status?: string(name='Status', description='任务状态', example='FE_RUNNING'),
  warnings?: map[string]any(name='Warnings', description='各子发布模块的警告信息，key是子发布模块，value是警告信息', example='{         "category_bind_faq": [             "以下类目没有发布到正式环境: 项目交付信息汇总"         ]     }'),
}

model ContinueInstancePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ContinueInstancePublishTaskResponseBody(name='body'),
}

async function continueInstancePublishTask(request: ContinueInstancePublishTaskRequest): ContinueInstancePublishTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinueInstancePublishTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  name: string(name='Name', description='类目名称', position='Body'),
  parentCategoryId?: long(name='ParentCategoryId', description='父类目ID，默认-1，对应根目录', example='-1', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model CreateCategoryResponseBody = {
  category?: {
    categoryId?: long(name='CategoryId', description='类目ID', example='30000049006'),
    name?: string(name='Name'),
    parentCategoryId?: long(name='ParentCategoryId', example='-1'),
    status?: int32(name='Status', example='0'),
  }(name='Category', description='类目信息'),
  requestId?: string(name='RequestId', example='A629A28F-F25E-5572-A679-FA46FB0151D6'),
}

model CreateCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCategoryResponseBody(name='body'),
}

async function createCategory(request: CreateCategoryRequest): CreateCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCategory', 'POST', '/', 'json', true, 'form', request);
}

model CreateConnQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  connQuestionId: long(name='ConnQuestionId', example='30002654628', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  knowledgeId: long(name='KnowledgeId', example='30002174773', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model CreateConnQuestionResponseBody = {
  outlineId?: long(name='OutlineId', description='关联关系ID', example='1000002123'),
  requestId?: string(name='RequestId', example='C191B48B-9268-4FB1-A3C2-5143B4A91D0C'),
}

model CreateConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConnQuestionResponseBody(name='body'),
}

async function createConnQuestion(request: CreateConnQuestionRequest): CreateConnQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConnQuestion', 'POST', '/', 'json', true, 'form', request);
}

model CreateDSEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  entityName: string(name='EntityName', description='实体名称，仅支持中文、大小写字母、数字、下划线', example='实体名称', position='Query'),
  entityType?: string(name='EntityType', description='实体类型：详见:,EntityTypeEnum[synonyms(同义词),regex(正则)]', example='synonyms', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
}

model CreateDSEntityResponseBody = {
  entityId?: long(name='EntityId', example='23436345'),
  requestId?: string(name='RequestId', example='adfad2343f1f2r'),
}

model CreateDSEntityResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDSEntityResponseBody(name='body'),
}

async function createDSEntity(request: CreateDSEntityRequest): CreateDSEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDSEntity', 'POST', '/', 'json', false, 'json', request);
}

model CreateDSEntityValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  content: string(name='Content', example='ada', position='Query'),
  entityId: long(name='EntityId', description='实体ID，修改实体成员时可为空', example='12', minimum=0, maximum=9223372036854775807, position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  synonyms?: [ string ](name='Synonyms', shrink='json', position='Body'),
}

model CreateDSEntityValueResponseBody = {
  entityValueId?: long(name='EntityValueId', example='2434543453'),
  requestId?: string(name='RequestId', example='g763hg48j3f3'),
}

model CreateDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDSEntityValueResponseBody(name='body'),
}

async function createDSEntityValue(request: CreateDSEntityValueRequest): CreateDSEntityValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDSEntityValue', 'POST', '/', 'json', true, 'form', request);
}

model CreateFaqRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  categoryId: long(name='CategoryId', description='知识的类目ID', example='1000053274', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  endDate?: string(name='EndDate', description='失效时间', example='2030-12-31T16:00:00Z', position='Body'),
  solutionContent?: string(name='SolutionContent', description='默认答案内容', position='Body'),
  solutionType?: int32(name='SolutionType', description='默认答案类型', example='0', position='Body'),
  startDate?: string(name='StartDate', description='生效时间', example='2022-05-25T16:28:36Z', position='Body'),
  title: string(name='Title', description='知识标题', position='Body'),
}

model CreateFaqResponseBody = {
  knowledgeId?: long(name='KnowledgeId', description='知识ID', example='30001979424'),
  requestId?: string(name='RequestId', example='28805A7C-D695-548C-A31B-67E52C2C274F'),
}

model CreateFaqResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFaqResponseBody(name='body'),
}

async function createFaq(request: CreateFaqRequest): CreateFaqResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFaq', 'POST', '/', 'json', true, 'form', request);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  introduction?: string(name='Introduction', description='机器人备注，不超过50字', example='用于手机app的小蜜机器人', position='Query'),
  languageCode?: string(name='LanguageCode', description='机器人服务的语言，如zh-cn、en-us，参考 http://www.lingoes.net/zh/translator/langcode.htm   入参全小写，当前只支持 zh-cn、en-us', example='zh-cn', position='Query'),
  name?: string(name='Name', description='机器人名称，不超过50字', example='小蜜机器人', position='Query'),
  robotType?: string(name='RobotType', description='机器人类型', example='scenario_im', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='机器人唯一标识', example='chatbot-cn-mp90s2lrk00050'),
  requestId?: string(name='RequestId', description='Id of the request', example='F2E2C40D-AB09-45A1-B5C5-EB9F5C4E4E4A'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstancePublishTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人唯一标识', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model CreateInstancePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2022-04-12T06:30:17Z'),
  error?: string(name='Error', description='job失败信息'),
  id?: long(name='Id', description='任务Id', example='8522'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间', example='2022-04-12T06:30:33Z'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: string(name='Response', description='任务Id', example='8522'),
  status?: string(name='Status', description='任务状态', example='FE_RUNNING'),
}

model CreateInstancePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstancePublishTaskResponseBody(name='body'),
}

async function createInstancePublishTask(request: CreateInstancePublishTaskRequest): CreateInstancePublishTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstancePublishTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentDefinition?: {
    aliasName?: string(name='AliasName', description='意图别名'),
    intentName: string(name='IntentName', description='意图名称'),
    slotInfos?: [ 
      {
        array?: boolean(name='Array', description='是否数组', example='false'),
        encrypt?: boolean(name='Encrypt', description='是否脱敏', example='false'),
        interactive?: boolean(name='Interactive', description='是否交互式', example='false'),
        name: string(name='Name', description='槽位名'),
        slotId: string(name='SlotId', example='fg452dfg3df23'),
        value: string(name='Value', description='关联的实体名'),
      }
    ](name='SlotInfos', description='槽位信息'),
  }(name='IntentDefinition', description='意图定义结构体', shrink='json', position='Query'),
}

model CreateIntentResponseBody = {
  intentId?: long(name='IntentId', example='43546474'),
  requestId?: string(name='RequestId', example='df56gjh5et34g3g3'),
}

model CreateIntentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntentResponseBody(name='body'),
}

async function createIntent(request: CreateIntentRequest): CreateIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntent', 'POST', '/', 'json', false, 'json', request);
}

model CreateLgfRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  lgfDefinition?: {
    intentId: long(name='IntentId', description='意图ID', example='4675678567'),
    ruleText: string(name='RuleText', description='LGF配置'),
  }(name='LgfDefinition', shrink='json', position='Query'),
}

model CreateLgfResponseBody = {
  lgfId?: long(name='LgfId', description='LGF ID', example='123453433453'),
  requestId?: string(name='RequestId', example='af5fg3sdf457j5'),
}

model CreateLgfResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLgfResponseBody(name='body'),
}

async function createLgf(request: CreateLgfRequest): CreateLgfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLgf', 'POST', '/', 'json', false, 'json', request);
}

model CreatePerspectiveRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  description?: string(name='Description', description='视角描述', example='用于购物APP的移动端视角', position='Query'),
  name?: string(name='Name', description='视角名称，长度不超过50字', example='移动端视角', position='Query'),
}

model CreatePerspectiveResponseBody = {
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）', example='3001'),
  requestId?: string(name='RequestId', description='请求Id', example='F285D735-D580-18A8-B97F-B2E72B00F101'),
}

model CreatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePerspectiveResponseBody(name='body'),
}

async function createPerspective(request: CreatePerspectiveRequest): CreatePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePerspective', 'POST', '/', 'json', false, 'json', request);
}

model CreatePublishTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key，若不指定则请求默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  bizType?: string(name='BizType', description='发布任务的业务类型，若发布机器人请使用 CreateInstancePublishTask API', example='faq', position='Query'),
  dataIdList?: [ string ](name='DataIdList', description='业务类型附加信息，当前仅支持BizType为faq的传参，此字段指定faq类目Id列表，表示只发布指定类目下面的faq知识', example='["8521"]', shrink='json', position='Query'),
}

model CreatePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2022-04-12T06:30:17Z'),
  error?: string(name='Error', description='发布任务失败信息'),
  id?: long(name='Id', description='发布任务Id', example='8522'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间', example='2022-04-12T06:30:33Z'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: string(name='Response', description='发布任务Id，冗余字段，建议使用Id字段获取发布任务Id', example='8522'),
  status?: string(name='Status', description='任务状态（ FE_RUNNING：正在发布中 FE_SUCCESS：发布成功 FE_FAILED：发布失败 FE_ABORTED：发布取消）', example='FE_RUNNING'),
}

model CreatePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePublishTaskResponseBody(name='body'),
}

async function createPublishTask(request: CreatePublishTaskRequest): CreatePublishTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePublishTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  knowledgeId: long(name='KnowledgeId', description='知识ID', example='30001905617', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  title: string(name='Title', description='相似问标题，字数上限-120', position='Body'),
}

model CreateSimQuestionResponseBody = {
  requestId?: string(name='RequestId', example='16AC1B3C-66E0-438B-BB7C-71B692407B67'),
  simQuestionId?: long(name='SimQuestionId', description='相似问ID', example='1000002788'),
}

model CreateSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSimQuestionResponseBody(name='body'),
}

async function createSimQuestion(request: CreateSimQuestionRequest): CreateSimQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimQuestion', 'POST', '/', 'json', true, 'form', request);
}

model CreateSolutionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  content: string(name='Content', description='答案内容', position='Query'),
  contentType?: int32(name='ContentType', description='答案类型', example='1', position='Query'),
  knowledgeId: long(name='KnowledgeId', description='知识ID', example='30001905617', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  perspectiveCodes: [ string ](name='PerspectiveCodes', description='视角code列表', position='Query'),
}

model CreateSolutionResponseBody = {
  requestId?: string(name='RequestId', example='F55D90C1-31BE-4B2A-AA3F-25EFC36F9419'),
  solutionId?: long(name='SolutionId', description='答案ID', example='100001089003'),
}

model CreateSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSolutionResponseBody(name='body'),
}

async function createSolution(request: CreateSolutionRequest): CreateSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSolution', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserSayRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  userSayDefinition?: {
    content: string(name='Content', description='用户话术'),
    intentId: long(name='IntentId', description='意图ID', example='123232'),
    slotInfos?: [ 
      {
        endIndex?: int32(name='EndIndex', description='槽位在意图话术中的结束下标（不含）', example='6'),
        slotId?: string(name='SlotId', description='划槽ID', example='fb34adf2fv43f2'),
        startIndex?: int32(name='StartIndex', description='槽位在意图话术中的起始下标', example='4'),
      }
    ](name='SlotInfos', description='划槽信息'),
  }(name='UserSayDefinition', shrink='json', position='Query'),
}

model CreateUserSayResponseBody = {
  requestId?: string(name='RequestId', example='8g4n8bnd236fg79'),
  userSayId?: long(name='UserSayId', example='46456176856'),
}

model CreateUserSayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserSayResponseBody(name='body'),
}

async function createUserSay(request: CreateUserSayRequest): CreateUserSayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserSay', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  categoryId: long(name='CategoryId', description='类目ID', example='30000049006', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId', example='4B3E0DE3-DC57-5BFE-88D4-ADD8ED024F55'),
}

model DeleteCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCategory', 'POST', '/', 'json', true, 'form', request);
}

model DeleteConnQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  outlineId: long(name='OutlineId', example='877397683', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model DeleteConnQuestionResponseBody = {
  requestId?: string(name='RequestId', example='FC323352-3AD7-59A1-9088-A64470BAFC9D'),
}

model DeleteConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConnQuestionResponseBody(name='body'),
}

async function deleteConnQuestion(request: DeleteConnQuestionRequest): DeleteConnQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConnQuestion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDSEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  entityId: long(name='EntityId', description='实体ID', example='123', minimum=0, maximum=9223372036854775807, position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
}

model DeleteDSEntityResponseBody = {
  entityId?: long(name='EntityId', example='123'),
  requestId?: string(name='RequestId', example='4dfghf56235asdf452'),
}

model DeleteDSEntityResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDSEntityResponseBody(name='body'),
}

async function deleteDSEntity(request: DeleteDSEntityRequest): DeleteDSEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDSEntity', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDSEntityValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  entityId: long(name='EntityId', description='实体ID', example='345346223452', minimum=0, maximum=9223372036854775807, position='Query'),
  entityValueId: long(name='EntityValueId', description='实体成员ID', example='3453453452', minimum=0, maximum=9223372036854775807, position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
}

model DeleteDSEntityValueResponseBody = {
  entityValueId?: long(name='EntityValueId', example='3453453452'),
  requestId?: string(name='RequestId', example='dfdf2t3rfvb45y'),
}

model DeleteDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDSEntityValueResponseBody(name='body'),
}

async function deleteDSEntityValue(request: DeleteDSEntityValueRequest): DeleteDSEntityValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDSEntityValue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFaqRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  knowledgeId: long(name='KnowledgeId', description='知识ID，创建知识该值为空', example='30001905617', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model DeleteFaqResponseBody = {
  requestId?: string(name='RequestId', example='F79E7305-5314-5069-A701-9591AD051902'),
}

model DeleteFaqResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFaqResponseBody(name='body'),
}

async function deleteFaq(request: DeleteFaqRequest): DeleteFaqResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFaq', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model DeleteInstanceResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2021-09-11T09:26:14Z'),
  createUserId?: long(name='CreateUserId', description='任务创建人Id', example='9052'),
  createUserName?: string(name='CreateUserName', description='任务创建人', example='xuqiang_test'),
  error?: string(name='Error', description='错误信息'),
  id?: long(name='Id', description='任务id', example='8521'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: long(name='Response', description='任务id', example='8521'),
  status?: string(name='Status', description='任务状态，可以在GetInstancePublishTaskState API 了解更多的状态', example='FE_RUNNING'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIntentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentId: long(name='IntentId', description='意图ID', example='12345', minimum=0, maximum=9223372036854775807, position='Query'),
}

model DeleteIntentResponseBody = {
  intentId?: long(name='IntentId', example='12345'),
  requestId?: string(name='RequestId', example='3464dfg3qwr34tf34'),
}

model DeleteIntentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIntentResponseBody(name='body'),
}

async function deleteIntent(request: DeleteIntentRequest): DeleteIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIntent', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLgfRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentId: long(name='IntentId', example='23242342', minimum=0, maximum=9223372036854775807, position='Query'),
  lgfId: long(name='LgfId', description='lgf Id', example='2342424', minimum=0, maximum=9223372036854775807, position='Query'),
}

model DeleteLgfResponseBody = {
  lgfId?: long(name='LgfId', description='LGF ID', example='2342424'),
  requestId?: string(name='RequestId', example='dgw2342424qw42'),
}

model DeleteLgfResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLgfResponseBody(name='body'),
}

async function deleteLgf(request: DeleteLgfRequest): DeleteLgfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLgf', 'POST', '/', 'json', false, 'json', request);
}

model DeletePerspectiveRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）', example='3001', position='Query'),
}

model DeletePerspectiveResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='FC384CE1-8D42-1900-84E1-F33F990F2B5E'),
  result?: boolean(name='Result', description='删除视角的结果', example='true'),
}

model DeletePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePerspectiveResponseBody(name='body'),
}

async function deletePerspective(request: DeletePerspectiveRequest): DeletePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePerspective', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSimQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  simQuestionId: long(name='SimQuestionId', description='相似问ID', example='1000002788', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model DeleteSimQuestionResponseBody = {
  requestId?: string(name='RequestId', example='6419BA93-D111-5225-8998-13E63E6D3940'),
}

model DeleteSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSimQuestionResponseBody(name='body'),
}

async function deleteSimQuestion(request: DeleteSimQuestionRequest): DeleteSimQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSimQuestion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSolutionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  solutionId: long(name='SolutionId', description='答案ID', example='100001321580', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model DeleteSolutionResponseBody = {
  requestId?: string(name='RequestId', example='F79E7305-5314-5069-A701-9591AD051902'),
}

model DeleteSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSolutionResponseBody(name='body'),
}

async function deleteSolution(request: DeleteSolutionRequest): DeleteSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSolution', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserSayRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', example='343df2sdf23', position='Query'),
  intentId: long(name='IntentId', example='5564564546', minimum=0, maximum=9223372036854775807, position='Query'),
  userSayId: long(name='UserSayId', example='4562121234', minimum=0, maximum=9223372036854775807, position='Query'),
}

model DeleteUserSayResponseBody = {
  requestId?: string(name='RequestId', example='dfgdg324gf34t34g34g3'),
  userSayId?: long(name='UserSayId', example='4562121234'),
}

model DeleteUserSayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserSayResponseBody(name='body'),
}

async function deleteUserSay(request: DeleteUserSayRequest): DeleteUserSayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserSay', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  categoryId: long(name='CategoryId', description='类目ID', example='30000049006', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model DescribeCategoryResponseBody = {
  category?: {
    categoryId?: long(name='CategoryId', description='类目ID', example='30000049006'),
    name?: string(name='Name'),
    parentCategoryId?: long(name='ParentCategoryId', example='-1'),
    status?: int32(name='Status', example='0'),
  }(name='Category', description='类目信息'),
  requestId?: string(name='RequestId', example='2B0304FD-3804-5C06-9A83-77F5523664AF'),
}

model DescribeCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCategoryResponseBody(name='body'),
}

async function describeCategory(request: DescribeCategoryRequest): DescribeCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCategory', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDSEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  entityId: long(name='EntityId', description='实体ID', example='123', minimum=0, maximum=9223372036854775807, position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
}

model DescribeDSEntityResponseBody = {
  createTime?: string(name='CreateTime', example='2021-08-12T16:00:01Z'),
  createUserId?: string(name='CreateUserId', example='123231'),
  createUserName?: string(name='CreateUserName', example='test'),
  entityId?: long(name='EntityId', description='实体ID', example='123'),
  entityName?: string(name='EntityName', description='实体名称，仅支持中文、大小写字母、数字、下划线'),
  entityType?: string(name='EntityType', description='实体类型：详见:,EntityTypeEnum[synonyms(同义词),regex(正则)]', example='synonyms'),
  modifyTime?: string(name='ModifyTime', example='2021-08-12T16:00:01Z'),
  modifyUserId?: string(name='ModifyUserId', example='123231'),
  modifyUserName?: string(name='ModifyUserName', example='test'),
  requestId?: string(name='RequestId', example='ad23234dsf234fga'),
  sysEntityCode?: string(name='SysEntityCode', description='系统实体code，如@sys.date', example='@sys.date'),
}

model DescribeDSEntityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDSEntityResponseBody(name='body'),
}

async function describeDSEntity(request: DescribeDSEntityRequest): DescribeDSEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDSEntity', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFaqRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  knowledgeId: long(name='KnowledgeId', description='知识ID', example='30001979424', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model DescribeFaqResponseBody = {
  categoryId?: long(name='CategoryId', description='类目ID', example='30000055617'),
  createTime?: string(name='CreateTime', description='创建时间（UTC时间）', example='2020-11-30T03:03:37Z'),
  createUserName?: string(name='CreateUserName', description='创建人', example='test01'),
  effectStatus?: int32(name='EffectStatus', description='知识生效状态,根据StartDate, EndDate计算出来: 20-生效中, 21-已失效, 22-待生效', example='20'),
  endDate?: string(name='EndDate', description='失效时间（UTC时间）', example='2023-04-27T06:08:54Z'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID', example='30001979424'),
  modifyTime?: string(name='ModifyTime', description='修改时间（UTC时间）', example='2020-12-02T06:35:50Z'),
  modifyUserName?: string(name='ModifyUserName', description='修改人', example='test01'),
  outlines?: [ 
    {
      connQuestionId?: long(name='ConnQuestionId', description='关联知识ID', example='1000098002'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)', example='2022-05-26T10:24:00Z'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)', example='2022-05-26T18:12:02Z'),
      outlineId?: long(name='OutlineId', description='关联关系ID', example='797'),
      title?: string(name='Title', description='关联知识标题'),
    }
  ](name='Outlines', description='关联问列表'),
  requestId?: string(name='RequestId', example='8AD9FA10-7780-5E12-B701-13C928524F32'),
  simQuestions?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)', example='2022-05-26T10:24:00Z'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)', example='2022-05-29T03:55:07Z'),
      simQuestionId?: long(name='SimQuestionId', description='相似问ID', example='10000000581'),
      title?: string(name='Title', description='相似问标题'),
    }
  ](name='SimQuestions', description='相似问列表'),
  solutions?: [ 
    {
      content?: string(name='Content', description='答案内容'),
      contentType?: int32(name='ContentType', description='答案类型(0纯文本，1富文本）', example='0'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)', example='2022-05-26T10:24:00Z'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)', example='2022-05-29T07:07:13Z'),
      perspectiveCodes?: [ string ](name='PerspectiveCodes', description='视角code列表'),
      plainText?: string(name='PlainText', description='答案纯文本内容'),
      solutionId?: long(name='SolutionId', description='答案ID', example='10000003071'),
    }
  ](name='Solutions', description='答案列表'),
  startDate?: string(name='StartDate', description='生效时间（UTC时间）', example='2022-04-27T07:04:39Z'),
  status?: int32(name='Status', description='知识状态: -1-已删除未发布, 1-未发布, 2-已发布, 3-已更新未发布', example='3'),
  title?: string(name='Title', description='标题'),
}

model DescribeFaqResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFaqResponseBody(name='body'),
}

async function describeFaq(request: DescribeFaqRequest): DescribeFaqResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFaq', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model DescribeInstanceResponseBody = {
  avatar?: string(name='Avatar', description='机器人头像的URL', example='/alimefe/meebot/robot/0.0.5/img/xxx-90-97.png'),
  categories?: [ 
    {
      categoryId?: long(name='CategoryId', description='类目id', example='30000066832'),
      name?: string(name='Name', description='类目名称', example='杭州市防疫政策'),
      parentCategoryId?: long(name='ParentCategoryId', description='父类目id，-1表示根目录', example='-1'),
    }
  ](name='Categories', description='类目列表'),
  createTime?: string(name='CreateTime', description='机器人创建的 UTC 时间', example='2021-08-12T16:00:01Z'),
  editStatus?: string(name='EditStatus', description='机器人状态： EDITING(编辑中)、 PUBLISHED(已发布)', example='PUBLISHED'),
  instanceId?: string(name='InstanceId', description='机器人唯一标识', example='chatbot-cn-mp90s2lrk00050'),
  introduction?: string(name='Introduction', description='机器人备注', example='用于C端问答的机器人'),
  languageCode?: string(name='LanguageCode', description='机器人服务的语言，如zh-cn、en-us', example='zh-cn'),
  name?: string(name='Name', description='机器人名称', example='智能客服-小C'),
  requestId?: string(name='RequestId', description='请求Id', example='907AA5F2-0521-49AB-80AB-1ADEFAB2B901'),
  robotType?: string(name='RobotType', description='机器人类型', example='scenario_im'),
  timeZone?: string(name='TimeZone', description='机器人的时区，参考《公共-时区码》', example='Asia/Chongqing'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIntentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentId: long(name='IntentId', description='意图ID', example='123', minimum=0, maximum=9223372036854775807, position='Body'),
}

model DescribeIntentResponseBody = {
  aliasName?: string(name='AliasName'),
  createTime?: string(name='CreateTime', example='2021-08-12T16:00:01Z'),
  createUserId?: string(name='CreateUserId', example='123231'),
  createUserName?: string(name='CreateUserName', example='test'),
  intentId?: long(name='IntentId', example='84243341'),
  intentName?: string(name='IntentName'),
  modifyTime?: string(name='ModifyTime', example='2021-08-12T16:00:01Z'),
  modifyUserId?: string(name='ModifyUserId', example='123231'),
  modifyUserName?: string(name='ModifyUserName', example='test'),
  requestId?: string(name='RequestId', example='a22afaf2adfasf2gr345fga45ada'),
  slotInfos?: [ 
    {
      array?: boolean(name='Array', example='false'),
      encrypt?: boolean(name='Encrypt', example='false'),
      interactive?: boolean(name='Interactive', example='false'),
      name?: string(name='Name'),
      slotId?: string(name='SlotId', example='aa4d2a343a3ad4afad'),
      value?: string(name='Value'),
    }
  ](name='SlotInfos'),
}

model DescribeIntentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIntentResponseBody(name='body'),
}

async function describeIntent(request: DescribeIntentRequest): DescribeIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIntent', 'POST', '/', 'json', true, 'form', request);
}

model DescribePerspectiveRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  perspectiveId?: string(name='PerspectiveId', description='视角Id', example='3001', position='Query'),
}

model DescribePerspectiveResponseBody = {
  createTime?: string(name='CreateTime', description='创建时间 UTC时间', example='2021-07-27T07:05:37Z'),
  modifyTime?: string(name='ModifyTime', description='修改时间 UTC时间', example='2021-07-26T07:05:37Z'),
  name?: string(name='Name', description='视角名称', example='移动端视角'),
  perspectiveCode?: string(name='PerspectiveCode', description='视角编码（用于问答api）', example='FZJBY3raWr'),
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）', example='3001'),
  requestId?: string(name='RequestId', description='请求Id', example='F285D735-D580-18A8-B97F-B2E72B00F101'),
  selfDefine?: boolean(name='SelfDefine', description='是否自定义', example='true'),
  status?: int32(name='Status', description='数据状态：3：选中；1：未选中', example='1'),
}

model DescribePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePerspectiveResponseBody(name='body'),
}

async function describePerspective(request: DescribePerspectiveRequest): DescribePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePerspective', 'POST', '/', 'json', false, 'json', request);
}

model FeedbackRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  feedback?: string(name='Feedback', description='good-点赞、bad-点踩', example='good', position='Query'),
  feedbackContent?: string(name='FeedbackContent', description='点赞、点踩的内容', example='这个回答很棒', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
  messageId?: string(name='MessageId', description='会话窗单次会话标识', example='5ca40988-4f99-47ad-ac96-9060d0f81db9', position='Query'),
  sessionId?: string(name='SessionId', description='会话Session标识，标识：IM唯一标识会话', example='7c3cec23cc8940bc9db4a318c8f4f0aa', position='Query'),
}

model FeedbackResponseBody = {
  feedback?: string(name='Feedback', description='good-点赞、bad-点踩', example='good'),
  messageId?: string(name='MessageId', description='会话窗单次会话标识', example='5ca40988-4f99-47ad-ac96-9060d0f81db9'),
  requestId?: string(name='RequestId', description='请求id', example='4e5eea71-f326-450c-8849-49515473ef64'),
}

model FeedbackResponse = {
  headers: map[string]string(name='headers'),
  body: FeedbackResponseBody(name='body'),
}

async function feedback(request: FeedbackRequest): FeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Feedback', 'POST', '/', 'json', false, 'json', request);
}

model GenerateUserAccessTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  email?: string(name='Email', example='a***bcx@gmail.com', position='Query'),
  expireTime?: int32(name='ExpireTime', example='1000', minimum=0, maximum=3600, position='Query'),
  extraInfo?: string(name='ExtraInfo', position='Query'),
  foreignId?: string(name='ForeignId', example='8882022040000000171', position='Query'),
  nick?: string(name='Nick', position='Query'),
  telephone?: string(name='Telephone', example='1381111****', position='Query'),
}

model GenerateUserAccessTokenResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='DDEXEDAFWAGASDFWAEFFAWEFAWFWEAFWAFWAEF'),
  message?: string(name='Message', example='Parameter.Invalid'),
  requestId?: string(name='RequestId', description='Id of the request', example='E6988CE6-41CF-1103-9BEC-2B20D26C0B51'),
  success?: boolean(name='Success', example='true'),
}

model GenerateUserAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateUserAccessTokenResponseBody(name='body'),
}

async function generateUserAccessToken(request: GenerateUserAccessTokenRequest): GenerateUserAccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUserAccessToken', 'POST', '/', 'json', false, 'json', request);
}

model GetAsyncResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  taskId: string(name='TaskId', description='从Chat接口返回参数中获取TASK_ID', position='Query'),
}

model GetAsyncResultResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId', example='F79E7305-5314-5069-A701-9591AD051902'),
  status?: string(name='Status', example='Success'),
}

model GetAsyncResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncResultResponseBody(name='body'),
}

async function getAsyncResult(request: GetAsyncResultRequest): GetAsyncResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncResult', 'POST', '/', 'json', false, 'json', request);
}

model GetInstancePublishTaskStateRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  id?: long(name='Id', description='任务ID', example='8521', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model GetInstancePublishTaskStateResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2022-04-12T06:30:17Z'),
  error?: string(name='Error', description='job失败信息'),
  errors?: map[string]any(name='Errors', description='各子发布模块的错误信息，key是子发布模块，value是错误信息'),
  id?: long(name='Id', description='任务Id', example='8522'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间', example='2022-04-12T06:30:33Z'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: string(name='Response', description='任务Id', example='8522'),
  status?: string(name='Status', description='任务状态', example='FE_RUNNING'),
  warnings?: map[string]any(name='Warnings', description='各子发布模块的警告信息，key是子发布模块，value是警告信息'),
}

model GetInstancePublishTaskStateResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstancePublishTaskStateResponseBody(name='body'),
}

async function getInstancePublishTaskState(request: GetInstancePublishTaskStateRequest): GetInstancePublishTaskStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstancePublishTaskState', 'POST', '/', 'json', false, 'json', request);
}

model GetPublishTaskStateRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  id?: long(name='Id', description='发布任务Id', example='8521', position='Query'),
}

model GetPublishTaskStateResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间', example='2022-04-12T06:30:17Z'),
  error?: string(name='Error', description='发布任务失败信息'),
  errors?: map[string]any(name='Errors', description='各子发布模块的错误信息，key是子发布模块，value是错误信息'),
  id?: long(name='Id', description='发布任务Id', example='8522'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间', example='2022-04-12T06:30:33Z'),
  requestId?: string(name='RequestId', description='请求Id', example='5CBF0581-EAE7-1DC4-95C6-A089656A1E2D'),
  response?: string(name='Response', description='发布任务Id，冗余字段，建议使用Id字段获取发布任务Id', example='8522'),
  status?: string(name='Status', description='任务状态（ FE_RUNNING：正在发布中 FE_SUCCESS：发布成功 FE_FAILED：发布失败 FE_ABORTED：发布取消）', example='FE_RUNNING'),
  warnings?: map[string]any(name='Warnings', description='各子发布模块的警告信息，key是子发布模块，value是警告信息'),
}

model GetPublishTaskStateResponse = {
  headers: map[string]string(name='headers'),
  body: GetPublishTaskStateResponseBody(name='body'),
}

async function getPublishTaskState(request: GetPublishTaskStateRequest): GetPublishTaskStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPublishTaskState', 'POST', '/', 'json', false, 'json', request);
}

model InitIMConnectRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  from: string(name='From', example='8XNBzDucJv', position='Query'),
  userAccessToken?: string(name='UserAccessToken', example='QUM4SndaY3VPMjhkQldDZUNOR0ZaTmZ5R3NBY0FKWHJ4OGc4dERZbEJzcjNIKzFiS1RyTjhXRUpBYmVpQlpsakprNDRFVkdxcy9HWVk2RXZvalU3bHhxRkJlc1NBUXZwdHFKOTE2UTNwamQ4b1U4N3dEbmhyRjc4R2hOQStvMnMrYkV2dlVpSHNvWC96SEVNZWRqMjBuMXdjNklpamJzaDNWYllnUldDZGhJPQ==', position='Query'),
}

model InitIMConnectResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='{     "imDomain": "im.alimebot.com",     "appKey": "WDg2VfNv",     "token": "QUM4SndaY3VPMjhkQldDZUNOR0ZaTmZ5R3NBY0FKWHJ4OGc4dERZbEJzcjNIKzFiS1RyTjhXRUpBYmVpQlpsakprNDRFVkdxcy9HWVk2RXZvalU3bHhxRkJlc1NBUXZwdHFKOTE2UTNwamQ4b1U4N3dEbmhyRjc4R2hOQStvMnMrYkV2dlVpSHNvWC96SEVNZWRqMjBuMXdjNklpamJzaDNWYllnUldDZGhJPQ=="   }'),
  message?: string(name='Message', example='Parameter.Invalid'),
  requestId?: string(name='RequestId', description='Id of the request', example='E6988CE6-41CF-1103-9BEC-2B20D26C0B52'),
  success?: boolean(name='Success', example='true'),
}

model InitIMConnectResponse = {
  headers: map[string]string(name='headers'),
  body: InitIMConnectResponseBody(name='body'),
}

async function initIMConnect(request: InitIMConnectRequest): InitIMConnectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitIMConnect', 'POST', '/', 'json', false, 'json', request);
}

model LinkInstanceCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  categoryIds?: string(name='CategoryIds', description='知识类目Id', example='[\\"30000065789\\"]', position='Body'),
  instanceId?: string(name='InstanceId', description='机器人唯一标识', example='chatbot-cn-mp90s2lrk00050', position='Query'),
}

model LinkInstanceCategoryResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='D8C96601-E645-1BD7-99F3-04EADAB84E29'),
}

model LinkInstanceCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: LinkInstanceCategoryResponseBody(name='body'),
}

async function linkInstanceCategory(request: LinkInstanceCategoryRequest): LinkInstanceCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LinkInstanceCategory', 'POST', '/', 'json', true, 'form', request);
}

model ListAgentRequest {
  agentName?: string(name='AgentName', position='Query'),
  goodsCodes?: string(name='GoodsCodes', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListAgentResponseBody = {
  data?: [ 
    {
      agentId?: long(name='AgentId', example='881'),
      agentKey?: string(name='AgentKey', example='4e7400028e6f4a7393ed3acf6a7b8927_p_beebot_public'),
      agentName?: string(name='AgentName'),
      instanceInfos?: map[string]any(name='InstanceInfos'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', description='Id of the request', example='F55D90C1-31BE-4B2A-AA3F-25EFC36F9419'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListAgentResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentResponseBody(name='body'),
}

async function listAgent(request: ListAgentRequest): ListAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgent', 'POST', '/', 'json', false, 'json', request);
}

model ListCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  parentCategoryId?: long(name='ParentCategoryId', description='父类目ID', example='-1', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model ListCategoryResponseBody = {
  categories?: [ 
    {
      categoryId?: long(name='CategoryId', description='类目ID', example='231001028593'),
      name?: string(name='Name'),
      parentCategoryId?: long(name='ParentCategoryId', example='-1'),
      status?: int32(name='Status', example='0'),
    }
  ](name='Categories', description='list结果'),
  requestId?: string(name='RequestId', example='9C5F8186-2D22-433E-9545-606D344F30B5'),
}

model ListCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: ListCategoryResponseBody(name='body'),
}

async function listCategory(request: ListCategoryRequest): ListCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCategory', 'POST', '/', 'json', true, 'form', request);
}

model ListConnQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  knowledgeId: long(name='KnowledgeId', example='30001905617', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model ListConnQuestionResponseBody = {
  outlines?: [ 
    {
      connQuestionId?: long(name='ConnQuestionId', description='关联知识ID', example='30001979424'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)', example='2022-02-25T02:47:18Z'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)', example='2022-05-26T10:18:15Z'),
      outlineId?: long(name='OutlineId', description='关联关系ID', example='797'),
      title?: string(name='Title', description='关联知识题目'),
    }
  ](name='Outlines'),
  requestId?: string(name='RequestId', example='92B81548-42B9-4B34-924B-4E778AEB412B'),
}

model ListConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: ListConnQuestionResponseBody(name='body'),
}

async function listConnQuestion(request: ListConnQuestionRequest): ListConnQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConnQuestion', 'POST', '/', 'json', true, 'form', request);
}

model ListDSEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  entityType?: string(name='EntityType', description='为空：全量自定义实体（默认）', example='synonyms', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  keyword?: string(name='Keyword', description='筛选项，contains匹配，范围：实体名称（未来扩展：实体成员、同义词）', example='实体', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListDSEntityResponseBody = {
  entities?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-08-12T16:00:01Z'),
      createUserId?: string(name='CreateUserId', example='123231'),
      createUserName?: string(name='CreateUserName', example='test'),
      entityId?: long(name='EntityId', example='234564567445'),
      entityName?: string(name='EntityName'),
      entityType?: string(name='EntityType', example='synonyms'),
      modifyTime?: string(name='ModifyTime', example='2021-08-12T16:00:01Z'),
      modifyUserId?: string(name='ModifyUserId', example='123231'),
      modifyUserName?: string(name='ModifyUserName', example='test'),
      sysEntityCode?: string(name='SysEntityCode', description='系统实体code，如@sys.date', example='@sys_date'),
    }
  ](name='Entities'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='ga4h345defgwet2sdf223'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListDSEntityResponse = {
  headers: map[string]string(name='headers'),
  body: ListDSEntityResponseBody(name='body'),
}

async function listDSEntity(request: ListDSEntityRequest): ListDSEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDSEntity', 'POST', '/', 'json', false, 'json', request);
}

model ListDSEntityValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  entityId: long(name='EntityId', description='实体ID', example='123', minimum=0, maximum=9223372036854775807, position='Body'),
  entityValueId?: long(name='EntityValueId', description='实体成员ID', example='234', minimum=0, maximum=9223372036854775807, position='Body'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  keyword?: string(name='Keyword', description='实体成员名称搜索关键词', position='Body'),
  pageNumber?: int32(name='PageNumber', description='页码', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='分页大小', example='10', position='Query'),
}

model ListDSEntityValueResponseBody = {
  entityValues?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime', example='2021-08-12T16:00:01Z'),
      entityId?: long(name='EntityId', example='34313785463'),
      entityValueId?: long(name='EntityValueId', example='3467858234534534532'),
      modifyTime?: string(name='ModifyTime', example='2021-08-12T16:00:01Z'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='EntityValues'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='n3fg34gbfj8adf2gj923'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  body: ListDSEntityValueResponseBody(name='body'),
}

async function listDSEntityValue(request: ListDSEntityValueRequest): ListDSEntityValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDSEntityValue', 'POST', '/', 'json', true, 'form', request);
}

model ListInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  name?: string(name='Name', description='按机器人名称模糊搜索', example='scenario_im', position='Query'),
  pageNumber?: long(name='PageNumber', description='分页-第几页，默认1', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='分页-页面大小，默认10', example='10', position='Query'),
  robotType?: string(name='RobotType', description='按机器人类型筛选', example='scenario_im', position='Query'),
}

model ListInstanceResponseBody = {
  instances?: [ 
    {
      avatar?: string(name='Avatar', description='机器人头像的URL', example='/alimefe/meebot/robot/0.0.5/img/xxx-90-97.png'),
      createTime?: string(name='CreateTime', description='机器人创建的 UTC 时间', example='2021-08-12T16:00:01Z'),
      instanceId?: string(name='InstanceId', description='机器人唯一标识', example='chatbot-cn-mp90s2lrk00050'),
      introduction?: string(name='Introduction', description='机器人备注', example='用于C端问答的机器人'),
      languageCode?: string(name='LanguageCode', description='机器人服务的语言', example='zh-cn'),
      name?: string(name='Name', description='机器人名称', example='智能客服-小C'),
      robotType?: string(name='RobotType', description='机器人类型', example='scenario_im'),
    }
  ](name='Instances', description='机器人列表信息'),
  pageNumber?: long(name='PageNumber', description='分页-第几页', example='1'),
  pageSize?: long(name='PageSize', description='分页-页面大小', example='5'),
  requestId?: string(name='RequestId', description='请求Id', example='92B81548-42B9-4B34-924B-4E778AEB412B'),
  totalCount?: long(name='TotalCount', description='总条数', example='23'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstance', 'POST', '/', 'json', false, 'json', request);
}

model ListIntentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentName?: string(name='IntentName', description='意图名称', example='查天气', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=999999, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
}

model ListIntentResponseBody = {
  intents?: [ 
    {
      aliasName?: string(name='AliasName'),
      createTime?: string(name='CreateTime', example='2021-08-12T16:00:01Z'),
      createUserId?: string(name='CreateUserId', example='123231'),
      createUserName?: string(name='CreateUserName', example='test'),
      intentId?: long(name='IntentId', example='234234234234'),
      intentName?: string(name='IntentName'),
      modifyTime?: string(name='ModifyTime', example='2021-08-12T16:00:01Z'),
      modifyUserId?: string(name='ModifyUserId', example='123231'),
      modifyUserName?: string(name='ModifyUserName', example='test'),
      slotInfos?: [ 
        {
          array?: boolean(name='Array', description='是否数组', example='false'),
          encrypt?: boolean(name='Encrypt', description='是否敏感', example='false'),
          interactive?: boolean(name='Interactive', description='是否交互式收集', example='false'),
          name?: string(name='Name', description='槽位名'),
          slotId?: string(name='SlotId', description='槽位ID', example='12134223'),
          value?: string(name='Value', description='槽位值（实体名）'),
        }
      ](name='SlotInfos'),
    }
  ](name='Intents'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='23dsfa34r2s2s2sd12'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListIntentResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntentResponseBody(name='body'),
}

async function listIntent(request: ListIntentRequest): ListIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntent', 'POST', '/', 'json', false, 'json', request);
}

model ListLgfRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentId: long(name='IntentId', description='意图ID', example='123', minimum=0, maximum=9223372036854775807, position='Query'),
  lgfText?: string(name='LgfText', description='筛选语义配置内容', example='.{0,5}北京天气', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListLgfResponseBody = {
  lgfs?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间', example='2021-08-12T16:00:01Z'),
      intentId?: long(name='IntentId', description='意图ID', example='256756734345'),
      lgfId?: long(name='LgfId', description='LGF ID', example='123'),
      modifyTime?: string(name='ModifyTime', description='修改时间', example='2021-08-12T16:00:01Z'),
      ruleText?: string(name='RuleText', description='LGF规则'),
    }
  ](name='Lgfs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='34fg57h2gh5783'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListLgfResponse = {
  headers: map[string]string(name='headers'),
  body: ListLgfResponseBody(name='body'),
}

async function listLgf(request: ListLgfRequest): ListLgfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLgf', 'POST', '/', 'json', false, 'json', request);
}

model ListSimQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  knowledgeId: long(name='KnowledgeId', description='知识ID', example='30002299537', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model ListSimQuestionResponseBody = {
  requestId?: string(name='RequestId', example='15CD94CC-CBEB-4189-806C-A132D1F45D51'),
  simQuestions?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)', example='2022-05-30T02:08:33Z'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)', example='2022-05-13T03:49:28Z'),
      simQuestionId?: long(name='SimQuestionId', description='相似问ID', example='30001979424'),
      title?: string(name='Title', description='相似问标题'),
    }
  ](name='SimQuestions', description='相似问列表'),
}

model ListSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: ListSimQuestionResponseBody(name='body'),
}

async function listSimQuestion(request: ListSimQuestionRequest): ListSimQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSimQuestion', 'POST', '/', 'json', true, 'form', request);
}

model ListSolutionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  knowledgeId: long(name='KnowledgeId', description='知识ID', example='30001905617', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model ListSolutionResponseBody = {
  requestId?: string(name='RequestId', example='5B29DB5E-251D-5A73-84B5-A12DF795F231'),
  solutions?: [ 
    {
      content?: string(name='Content', description='答案内容'),
      contentType?: int32(name='ContentType', description='答案类型(0纯文本，1富文本）', example='1'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)', example='2022-03-29T03:55:04Z'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)', example='2022-03-29T06:23:53Z'),
      perspectiveCodes?: [ string ](name='PerspectiveCodes', description='视角code列表'),
      plainText?: string(name='PlainText', description='答案纯文本内容'),
      solutionId?: long(name='SolutionId', description='答案ID', example='496'),
    }
  ](name='Solutions', description='答案列表'),
}

model ListSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: ListSolutionResponseBody(name='body'),
}

async function listSolution(request: ListSolutionRequest): ListSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSolution', 'POST', '/', 'json', true, 'form', request);
}

model ListUserSayRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  content?: string(name='Content', description='筛选用户话术', example='您做核酸了嘛', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentId: long(name='IntentId', description='意图ID', example='232', minimum=0, maximum=9223372036854775807, position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListUserSayResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='fs1fg4512v43572v23'),
  totalCount?: int32(name='TotalCount', example='1'),
  userSays?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime', example='2021-08-12T16:00:01Z'),
      intentId?: long(name='IntentId', example='235564564'),
      modifyTime?: string(name='ModifyTime', example='2021-08-12T16:00:01Z'),
      slotInfos?: [ 
        {
          endIndex?: int32(name='EndIndex', description='槽位在意图话术中的下标', example='4'),
          slotId?: string(name='SlotId', description='意图槽位ID', example='3456sdfg3tu'),
          startIndex?: int32(name='StartIndex', description='槽位在意图话术中的下标', example='2'),
        }
      ](name='SlotInfos'),
      userSayId?: long(name='UserSayId', example='3453452138'),
    }
  ](name='UserSays'),
}

model ListUserSayResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserSayResponseBody(name='body'),
}

async function listUserSay(request: ListUserSayRequest): ListUserSayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserSay', 'POST', '/', 'json', false, 'json', request);
}

model NluRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
  utterance?: string(name='Utterance', description='用户表述', example='北京的天气怎么样', position='Query'),
}

model NluResponseBody = {
  messageId?: string(name='MessageId', description='本条语言理解应答消息的ID', example='2828708A-2C7A-1BAE-B810-87DB9DA9C661'),
  messages?: [ 
    {
      dialogHubNluInfo?: {
        globalDictList?: [ 
          {
            standardWord?: string(name='StandardWord', description='名词', example='天气'),
            word?: string(name='Word', description='同义词', example='天气'),
          }
        ](name='GlobalDictList', description='全局名词列表'),
        globalSensitiveWordList?: [ 
          {
            standardWord?: string(name='StandardWord', description='名词', example='天气'),
            word?: string(name='Word', description='同义词', example='天气'),
          }
        ](name='GlobalSensitiveWordList', description='全局敏感词列表'),
      }(name='DialogHubNluInfo', description='对话中控的nlu信息'),
      dsNluInfo?: {
        entityList?: [ 
          {
            name?: string(name='Name', description='实体名称', example='@城市'),
            origin?: string(name='Origin', description='实体原词（实体成员）', example='北京'),
            type?: string(name='Type', description='实体类型，当前只有text类型', example='text'),
            value?: string(name='Value', description='实体同义词', example='首都'),
          }
        ](name='EntityList', description='实体列表'),
        intentList?: [ 
          {
            intentId?: long(name='IntentId', description='意图id', example='724387'),
            matchDetail?: string(name='MatchDetail', description='匹配详情（匹配过程）', example='classifierType=Fewshot,from=Fewshot,content=[我要查北京的天气, 帮我查北京的天气, 北京天气怎么样, 北京今天下雨吗, 北京今天多少度]'),
            matchType?: string(name='MatchType', description='匹配类型，其枚举值含义如下：  Similarity：query与意图通过意图话术相似度匹配 Lgf：query与意图通过LGF匹配 Classify：query与意图通过模型训练匹配 FewShotLearning：query与意图通过系统内置fewshot模型匹配 BuildIn： query与系统内置意图匹配', example='FewShotLearning'),
            name?: string(name='Name', description='意图名称', example='查天气意图'),
            score?: double(name='Score', description='分数', example='0.995'),
            slotList?: [ 
              {
                name?: string(name='Name', description='实体名称', example='@城市'),
                origin?: string(name='Origin', description='实体原词（实体成员）', example='北京'),
                type?: string(name='Type', description='实体类型，当前只有text类型', example='text'),
                value?: string(name='Value', description='实体同义词', example='首都'),
              }
            ](name='SlotList', description='命中意图的槽位列表'),
          }
        ](name='IntentList', description='意图列表'),
      }(name='DsNluInfo', description='对话工厂的nlu信息'),
    }
  ](name='Messages', description='消息的列表'),
  requestId?: string(name='RequestId', description='请求id', example='A6357C1B-1D79-1382-B259-BD9E80751B42'),
}

model NluResponse = {
  headers: map[string]string(name='headers'),
  body: NluResponseBody(name='body'),
}

async function nlu(request: NluRequest): NluResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Nlu', 'POST', '/', 'json', false, 'json', request);
}

model QueryPerspectivesRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
}

model QueryPerspectivesResponseBody = {
  perspectives?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间 UTC时间', example='2022-04-12T06:30:17Z'),
      modifyTime?: string(name='ModifyTime', description='修改时间 UTC时间', example='2022-04-29T03:38:54Z'),
      name?: string(name='Name', description='视角名称', example='移动端视角'),
      perspectiveCode?: string(name='PerspectiveCode', description='视角编码（用于问答api）', example='FZJBY3raWr'),
      perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）', example='3001'),
      selfDefine?: boolean(name='SelfDefine', description='是否自定义', example='true'),
      status?: int32(name='Status', description='数据状态：3：选中；1：未选中', example='1'),
    }
  ](name='Perspectives', description='视角列表'),
  requestId?: string(name='RequestId', description='请求Id', example='F285D735-D580-18A8-B97F-B2E72B00F101'),
}

model QueryPerspectivesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPerspectivesResponseBody(name='body'),
}

async function queryPerspectives(request: QueryPerspectivesRequest): QueryPerspectivesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPerspectives', 'POST', '/', 'json', false, 'json', request);
}

model SearchFaqRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  categoryIds?: [ long ](name='CategoryIds', description='类目唯一标识', shrink='json', position='Body'),
  createTimeBegin?: string(name='CreateTimeBegin', description='创建开始时间', example='2022-04-02T03:09:30Z', position='Body'),
  createTimeEnd?: string(name='CreateTimeEnd', description='创建结束时间', example='2022-05-02T03:09:30Z', position='Body'),
  createUserName?: string(name='CreateUserName', description='创建人', example='test01', position='Body'),
  endTimeBegin?: string(name='EndTimeBegin', description='失效开始时间', example='2023-04-02T03:09:30Z', position='Body'),
  endTimeEnd?: string(name='EndTimeEnd', description='失效结束时间', example='2023-05-02T03:09:30Z', position='Body'),
  keyword?: string(name='Keyword', description='关键字', position='Body'),
  modifyTimeBegin?: string(name='ModifyTimeBegin', description='修改开始时间', example='2023-04-02T03:09:30Z', position='Body'),
  modifyTimeEnd?: string(name='ModifyTimeEnd', description='修改结束时间', example='2023-05-02T03:09:30Z', position='Body'),
  modifyUserName?: string(name='ModifyUserName', description='修改人', example='test01', position='Body'),
  pageNumber?: int32(name='PageNumber', description='页码 默认1', example='1', position='Body'),
  pageSize?: int32(name='PageSize', description='每页数量，默认10，最大50', example='10', position='Body'),
  searchScope?: int32(name='SearchScope', description='搜索范围： 1-搜索标题相似问, 2-搜索答案, 3-搜索全部', example='1', position='Body'),
  startTimeBegin?: string(name='StartTimeBegin', description='生效开始时间', example='2022-04-02T03:09:30Z', position='Body'),
  startTimeEnd?: string(name='StartTimeEnd', description='生效结束时间', example='2022-04-03T03:09:30Z', position='Body'),
  status?: int32(name='Status', description='知识状态: -1-已删除未发布, 1-未发布, 2-已发布, 3-已更新未发布', example='1', position='Body'),
}

model SearchFaqResponseBody = {
  faqHits?: [ 
    {
      categoryId?: long(name='CategoryId', description='类目ID', example='30000055639'),
      createTime?: string(name='CreateTime', description='创建时间（UTC时间）', example='2022-04-02T03:09:30Z'),
      createUserId?: long(name='CreateUserId', description='创建人ID', example='18453'),
      createUserName?: string(name='CreateUserName', description='创建人', example='test01'),
      effectStatus?: int32(name='EffectStatus', description='知识生效状态,根据StartDate, EndDate计算出来: 20-生效中, 21-已失效, 22-待生效', example='20'),
      hitSimilarTitles?: [ string ](name='HitSimilarTitles', description='命中的相似问'),
      hitSolutions?: [ string ](name='HitSolutions', description='命中的答案'),
      knowledgeId?: long(name='KnowledgeId', description='知识ID', example='30002145804'),
      modifyTime?: string(name='ModifyTime', description='修改时间（UTC时间）', example='2022-04-02T03:09:30Z'),
      modifyUserId?: long(name='ModifyUserId', description='修改人ID', example='18453'),
      modifyUserName?: string(name='ModifyUserName', description='修改人', example='test01'),
      status?: int32(name='Status', description='知识状态: -1-已删除未发布, 1-未发布, 2-已发布, 3-已更新未发布', example='3'),
      title?: string(name='Title', description='标题'),
    }
  ](name='FaqHits'),
  pageNumber?: int32(name='PageNumber', description='页码 默认1', example='1'),
  pageSize?: int32(name='PageSize', description='每页数量，默认10，最大500', example='10'),
  requestId?: string(name='RequestId', example='E45491D5-7E0A-42C6-9B21-91D1066B1475'),
  totalCount?: int32(name='TotalCount', description='总条数', example='1075'),
}

model SearchFaqResponse = {
  headers: map[string]string(name='headers'),
  body: SearchFaqResponseBody(name='body'),
}

async function searchFaq(request: SearchFaqRequest): SearchFaqResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchFaq', 'POST', '/', 'json', true, 'form', request);
}

model UpdateCategoryRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  categoryId: long(name='CategoryId', description='类目ID', example='231001028593', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  name: string(name='Name', description='类目名称', position='Body'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId', example='F79E7305-5314-5069-A701-9591AD051902'),
}

model UpdateCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCategoryResponseBody(name='body'),
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCategory', 'POST', '/', 'json', true, 'form', request);
}

model UpdateConnQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  connQuestionId: long(name='ConnQuestionId', example='1000000295', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  outlineId: long(name='OutlineId', example='877397683', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model UpdateConnQuestionResponseBody = {
  requestId?: string(name='RequestId', example='004EB5C0-9DEB-53BF-A57A-0407A6D6B3C9'),
}

model UpdateConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConnQuestionResponseBody(name='body'),
}

async function updateConnQuestion(request: UpdateConnQuestionRequest): UpdateConnQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConnQuestion', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDSEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  entityId: long(name='EntityId', description='实体ID', example='123', minimum=0, maximum=9223372036854775807, position='Query'),
  entityName: string(name='EntityName', description='实体名称，仅支持中文、大小写字母、数字、下划线', example='实体名称', position='Query'),
  entityType?: string(name='EntityType', description='实体类型：详见:,EntityTypeEnum[synonyms(同义词),regex(正则)]', example='synonyms', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
}

model UpdateDSEntityResponseBody = {
  entityId?: long(name='EntityId', example='123'),
  requestId?: string(name='RequestId', example='df23fgh4hyj67hn56'),
}

model UpdateDSEntityResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDSEntityResponseBody(name='body'),
}

async function updateDSEntity(request: UpdateDSEntityRequest): UpdateDSEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDSEntity', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDSEntityValueRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  content: string(name='Content', description='实体类型为synonyms时，表示实体归一化值；当实体类型为regex时，表示正则表达式文本', position='Query'),
  entityId: long(name='EntityId', description='实体ID，修改实体成员时可为空', example='223423423', minimum=0, maximum=9223372036854775807, position='Query'),
  entityValueId: long(name='EntityValueId', description='实体成员ID，创建实体成员时为空', example='2342377423', minimum=0, maximum=9223372036854775807, position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  synonyms?: [ string ](name='Synonyms', description='实体同义词', shrink='json', position='Body'),
}

model UpdateDSEntityValueResponseBody = {
  entityValueId?: long(name='EntityValueId', example='2342377423'),
  requestId?: string(name='RequestId', example='sDag3g43wesf2'),
}

model UpdateDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDSEntityValueResponseBody(name='body'),
}

async function updateDSEntityValue(request: UpdateDSEntityValueRequest): UpdateDSEntityValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDSEntityValue', 'POST', '/', 'json', true, 'form', request);
}

model UpdateFaqRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  categoryId: long(name='CategoryId', description='知识的类目ID', example='30000049006', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  endDate?: string(name='EndDate', description='失效时间', example='2030-12-31T16:00:00Z', position='Body'),
  knowledgeId: long(name='KnowledgeId', description='知识ID', example='30001905617', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  startDate?: string(name='StartDate', description='生效时间', example='2022-05-27T05:18:20Z', position='Body'),
  title: string(name='Title', description='知识标题', position='Body'),
}

model UpdateFaqResponseBody = {
  requestId?: string(name='RequestId', example='736994BD-AA35-4742-88C9-E64BE4BAA14B'),
}

model UpdateFaqResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFaqResponseBody(name='body'),
}

async function updateFaq(request: UpdateFaqRequest): UpdateFaqResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFaq', 'POST', '/', 'json', true, 'form', request);
}

model UpdateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId?: string(name='InstanceId', description='机器人ID', example='chatbot-cn-mp90s2lrk00050', position='Query'),
  introduction?: string(name='Introduction', description='要修改的机器人备注', example='用于C端问答的机器人', position='Query'),
  name?: string(name='Name', description='要修改的机器人名称', example='智能客服-小C', position='Query'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='C45BFEE4-F657-1332-8B47-2C757B94C972'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIntentRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  intentDefinition?: {
    aliasName?: string(name='AliasName', description='意图别名'),
    intentName: string(name='IntentName', description='意图名称'),
    slotInfos?: [ 
      {
        array?: boolean(name='Array', description='是否数组', example='false'),
        encrypt?: boolean(name='Encrypt', description='是否脱敏', example='false'),
        interactive?: boolean(name='Interactive', description='是否交互式', example='false'),
        name: string(name='Name', description='槽位名'),
        slotId: string(name='SlotId', example='dgadf23dfg2f'),
        value: string(name='Value', description='关联的实体名'),
      }
    ](name='SlotInfos', description='槽位信息'),
  }(name='IntentDefinition', description='意图定义结构体', shrink='json', position='Query'),
  intentId: long(name='IntentId', description='意图ID', example='234234234534', minimum=0, maximum=9223372036854775807, position='Query'),
}

model UpdateIntentResponseBody = {
  intentId?: long(name='IntentId', example='234234234534'),
  requestId?: string(name='RequestId', example='dfaf23dfas234234234534'),
}

model UpdateIntentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIntentResponseBody(name='body'),
}

async function updateIntent(request: UpdateIntentRequest): UpdateIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIntent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateLgfRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  lgfDefinition: {
    intentId: long(name='IntentId', description='意图ID', example='23234523522', minimum=0, maximum=9223372036854775807),
    ruleText: string(name='RuleText', description='LGF配置'),
  }(name='LgfDefinition', shrink='json', position='Query'),
  lgfId: long(name='LgfId', description='LGF ID', example='12121', minimum=0, maximum=9223372036854775807, position='Query'),
}

model UpdateLgfResponseBody = {
  lgfId?: long(name='LgfId', example='2342556223532'),
  requestId?: string(name='RequestId', example='289dfa131adf23wqe2r'),
}

model UpdateLgfResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateLgfResponseBody(name='body'),
}

async function updateLgf(request: UpdateLgfRequest): UpdateLgfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateLgf', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePerspectiveRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  name?: string(name='Name', description='视角名称', example='客户端视角', position='Query'),
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）', example='3001', position='Query'),
}

model UpdatePerspectiveResponseBody = {
  requestId?: string(name='RequestId', description='请求Id', example='FC384CE1-8D42-1900-84E1-F33F990F2B5E'),
}

model UpdatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePerspectiveResponseBody(name='body'),
}

async function updatePerspective(request: UpdatePerspectiveRequest): UpdatePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePerspective', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSimQuestionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  simQuestionId: long(name='SimQuestionId', description='相似问ID', example='1000002788', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
  title: string(name='Title', description='相似问标题，字数上限-120', position='Body'),
}

model UpdateSimQuestionResponseBody = {
  requestId?: string(name='RequestId', example='DFB71B34-4188-4EA2-9988-EF3014E75910'),
}

model UpdateSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSimQuestionResponseBody(name='body'),
}

async function updateSimQuestion(request: UpdateSimQuestionRequest): UpdateSimQuestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSimQuestion', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSolutionRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  content: string(name='Content', description='答案内容', position='Body'),
  contentType?: int32(name='ContentType', description='答案类型', example='1', position='Body'),
  perspectiveCodes: [ string ](name='PerspectiveCodes', description='视角code列表', position='Body'),
  solutionId: long(name='SolutionId', description='答案ID', example='100001333260', minimum=-9223372036854775808, maximum=9223372036854775807, position='Body'),
}

model UpdateSolutionResponseBody = {
  requestId?: string(name='RequestId', example='8B8F098D-A338-54DD-B19C-24BBBCBD8498'),
}

model UpdateSolutionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSolutionResponseBody(name='body'),
}

async function updateSolution(request: UpdateSolutionRequest): UpdateSolutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSolution', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserSayRequest {
  regionId?: string(name='RegionId', position='Host'),
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取', example='ac627989eb4f8a98ed05fd098bbae5_p_beebot_public', position='Query'),
  instanceId: string(name='InstanceId', description='机器人ID', example='chatbot-cn-yjzbyrEvqd', position='Query'),
  userSayDefinition?: {
    content: string(name='Content', description='用户话术'),
    intentId: long(name='IntentId', description='意图ID', example='123', minimum=0, maximum=9223372036854775807),
    slotInfos?: [ 
      {
        endIndex?: int32(name='EndIndex', description='槽位在意图话术中的结束下标（不含）', example='3'),
        slotId?: string(name='SlotId', description='划槽ID', example='346ffg3q23dv'),
        startIndex?: int32(name='StartIndex', description='槽位在意图话术中的起始下标', example='1'),
      }
    ](name='SlotInfos', description='划槽信息'),
  }(name='UserSayDefinition', shrink='json', position='Query'),
  userSayId: long(name='UserSayId', description='用户话术ID', example='34512323', minimum=0, maximum=9223372036854775807, position='Query'),
}

model UpdateUserSayResponseBody = {
  requestId?: string(name='RequestId', example='2356fg3wf34634vdt23wef2'),
  userSayId?: long(name='UserSayId', example='34512323'),
}

model UpdateUserSayResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserSayResponseBody(name='body'),
}

async function updateUserSay(request: UpdateUserSayRequest): UpdateUserSayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserSay', 'POST', '/', 'json', false, 'json', request);
}

