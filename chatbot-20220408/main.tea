/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('chatbot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AssociateRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  perspective?: [ string ](name='Perspective', description='视角编码，用于调用同一知识标题下不同视角的答案。在拼装请求参数时，需要以Perspective={视角编码}的格式传递参数。如：&Perspective=["FZJBY3raWr"]。使用SDK时以SDK中定义的参数为准。目前仅支持一个视角答案的调用。       （公有云）'),
  recommendNum?: long(name='RecommendNum', description='推荐问题数量，1-10，当出推荐的时候才生效，返回不大于RecommendN'),
  sessionId?: string(name='SessionId', description='会话ID，用于标识一个访问者的会话和保持上下文信息。对于一个新的访问者，首次调用Chat接口时无需传递此字段，机器人会开启一个会话，并在Chat接口的响应中返回该会话的SessionId。对于该访问者的后续轮次的会话，调用Chat接口时传递当前会话的SessionId，机器人即可基于SessionId继续该轮次会话。'),
  utterance?: string(name='Utterance', description='用户表述'),
}

model AssociateShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  perspectiveShrink?: string(name='Perspective', description='视角编码，用于调用同一知识标题下不同视角的答案。在拼装请求参数时，需要以Perspective={视角编码}的格式传递参数。如：&Perspective=["FZJBY3raWr"]。使用SDK时以SDK中定义的参数为准。目前仅支持一个视角答案的调用。       （公有云）'),
  recommendNum?: long(name='RecommendNum', description='推荐问题数量，1-10，当出推荐的时候才生效，返回不大于RecommendN'),
  sessionId?: string(name='SessionId', description='会话ID，用于标识一个访问者的会话和保持上下文信息。对于一个新的访问者，首次调用Chat接口时无需传递此字段，机器人会开启一个会话，并在Chat接口的响应中返回该会话的SessionId。对于该访问者的后续轮次的会话，调用Chat接口时传递当前会话的SessionId，机器人即可基于SessionId继续该轮次会话。'),
  utterance?: string(name='Utterance', description='用户表述'),
}

model AssociateResponseBody = {
  associate?: [ 
    {
      meta?: string(name='Meta', description='附带信息'),
      title?: string(name='Title', description='关联问题的标题'),
    }
  ](name='Associate', description='联想的列表'),
  messageId?: string(name='MessageId', description='本条会话应答消息的ID'),
  requestId?: string(name='RequestId', description='请求id'),
  sessionId?: string(name='SessionId', description='本次会话的ID'),
}

model AssociateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateResponseBody(name='body'),
}

async function associateWithOptions(tmpReq: AssociateRequest, runtime: Util.RuntimeOptions): AssociateResponse {
  Util.validateModel(tmpReq);
  var request = new AssociateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    query['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.recommendNum)) {
    query['RecommendNum'] = request.recommendNum;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    query['Utterance'] = request.utterance;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Associate',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associate(request: AssociateRequest): AssociateResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateWithOptions(request, runtime);
}

model BeginSessionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model BeginSessionResponseBody = {
  requestId?: string(name='RequestId', description='请求id'),
  welcomeMessage?: string(name='WelcomeMessage', description='欢迎语'),
}

model BeginSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeginSessionResponseBody(name='body'),
}

async function beginSessionWithOptions(request: BeginSessionRequest, runtime: Util.RuntimeOptions): BeginSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BeginSession',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function beginSession(request: BeginSessionRequest): BeginSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return beginSessionWithOptions(request, runtime);
}

model CancelInstancePublishTaskRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  id?: long(name='Id', description='任务ID'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model CancelInstancePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  error?: string(name='Error', description='job失败信息'),
  id?: long(name='Id', description='任务Id'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: string(name='Response', description='任务Id'),
  status?: string(name='Status', description='任务状态'),
}

model CancelInstancePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelInstancePublishTaskResponseBody(name='body'),
}

async function cancelInstancePublishTaskWithOptions(request: CancelInstancePublishTaskRequest, runtime: Util.RuntimeOptions): CancelInstancePublishTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelInstancePublishTask',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelInstancePublishTask(request: CancelInstancePublishTaskRequest): CancelInstancePublishTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelInstancePublishTaskWithOptions(request, runtime);
}

model CancelPublishTaskRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  id?: long(name='Id', description='任务ID'),
}

model CancelPublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  error?: string(name='Error', description='job失败信息'),
  id?: long(name='Id', description='任务Id'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: string(name='Response', description='任务Id'),
  status?: string(name='Status', description='任务状态'),
}

model CancelPublishTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelPublishTaskResponseBody(name='body'),
}

async function cancelPublishTaskWithOptions(request: CancelPublishTaskRequest, runtime: Util.RuntimeOptions): CancelPublishTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelPublishTask',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelPublishTask(request: CancelPublishTaskRequest): CancelPublishTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPublishTaskWithOptions(request, runtime);
}

model ChatRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人实例ID。登录云小蜜控制台，机器人详情->会话接口，查看机器人实例信息，可获得该实例ID。'),
  intentName?: string(name='IntentName', description='对话流中意图名称。 若指定此名称，机器人会直接进入此意图做问答'),
  knowledgeId?: string(name='KnowledgeId', description='知识库中知识标题的ID。若指定此ID，那么机器人会直接返回指定知识标题的答案'),
  perspective?: [ string ](name='Perspective', description='视角编码，用于调用同一知识标题下不同视角的答案。如：Perspective=["FZJBY3raWr"]。使用SDK时以SDK中定义的参数为准'),
  senderId?: string(name='SenderId', description='访问者ID。用于识别当前会话中的用户'),
  senderNick?: string(name='SenderNick', description='当前会话中访问的昵称'),
  sessionId?: string(name='SessionId', description='会话ID，用于标识一个访问者的会话和保持上下文信息。对于一个新的访问者，首次调用Chat接口时无需传递此字段，机器人会开启一个会话，并在Chat接口的响应中返回该会话的SessionId。对于该访问者的后续轮次的会话，调用Chat接口时传递当前会话的SessionId，机器人即可基于SessionId继续该轮次会话。长度限制是64个字符'),
  utterance?: string(name='Utterance', description='机器人访问者的输入'),
  vendorParam?: string(name='VendorParam'),
}

model ChatShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人实例ID。登录云小蜜控制台，机器人详情->会话接口，查看机器人实例信息，可获得该实例ID。'),
  intentName?: string(name='IntentName', description='对话流中意图名称。 若指定此名称，机器人会直接进入此意图做问答'),
  knowledgeId?: string(name='KnowledgeId', description='知识库中知识标题的ID。若指定此ID，那么机器人会直接返回指定知识标题的答案'),
  perspectiveShrink?: string(name='Perspective', description='视角编码，用于调用同一知识标题下不同视角的答案。如：Perspective=["FZJBY3raWr"]。使用SDK时以SDK中定义的参数为准'),
  senderId?: string(name='SenderId', description='访问者ID。用于识别当前会话中的用户'),
  senderNick?: string(name='SenderNick', description='当前会话中访问的昵称'),
  sessionId?: string(name='SessionId', description='会话ID，用于标识一个访问者的会话和保持上下文信息。对于一个新的访问者，首次调用Chat接口时无需传递此字段，机器人会开启一个会话，并在Chat接口的响应中返回该会话的SessionId。对于该访问者的后续轮次的会话，调用Chat接口时传递当前会话的SessionId，机器人即可基于SessionId继续该轮次会话。长度限制是64个字符'),
  utterance?: string(name='Utterance', description='机器人访问者的输入'),
  vendorParam?: string(name='VendorParam'),
}

model ChatResponseBody = {
  messageId?: string(name='MessageId', description='本条会话应答消息的ID'),
  messages?: [ 
    {
      answerSource?: string(name='AnswerSource', description='当AnswerType为Recommend时，此字段表示推荐的答案来源'),
      answerType?: string(name='AnswerType', description='本条消息的类型'),
      knowledge?: {
        answerSource?: string(name='AnswerSource', description='区分答案类型。
KnowledgeBase:知识库条；'),
        category?: string(name='Category', description='知识类目'),
        content?: string(name='Content', description='命中问题的内容'),
        contentType?: string(name='ContentType', description='纯文本/富文本答案的标示'),
        hitStatement?: string(name='HitStatement', description='命中语句'),
        id?: string(name='Id', description='命中问题在知识库中的ID'),
        relatedKnowledges?: [ 
          {
            knowledgeId?: string(name='KnowledgeId', description='知识关联知识的ID'),
            title?: string(name='Title', description='知识的关联知识的标题'),
          }
        ](name='RelatedKnowledges', description='关联知识列表'),
        score?: double(name='Score', description='分数'),
        summary?: string(name='Summary', description='命中问题的简介'),
        title?: string(name='Title', description='命中问题的标题'),
      }(name='Knowledge', description='当AnswerType为Knowledge时，此字段包含机器人返回的Knowledge对象'),
      recommends?: [ 
        {
          answerSource?: string(name='AnswerSource', description='澄清来源的标识'),
          knowledgeId?: string(name='KnowledgeId', description='澄清的知识id'),
          score?: double(name='Score', description='推荐内容的分数，当AnswerSource为KNOWLEDGE时，此字段有值'),
          title?: string(name='Title', description='澄清内容，可能是
图谱问答的实体、
知识问答的知识标题、
表格问答的列值'),
        }
      ](name='Recommends', description='当AnswerType为Recommend时，此字段包含机器人返回的Recommend的列表'),
      text?: {
        answerSource?: string(name='AnswerSource', description='区分答案类型'),
        articleTitle?: string(name='ArticleTitle', description='当AnswerSource为MACHINE_READ时，此字段返回命中文章标题'),
        commands?: map[string]any(name='Commands', description='指令参数，如转人工指令的转人工技能组'),
        content?: string(name='Content', description='文本消息的内容'),
        contentType?: string(name='ContentType', description='纯文本/富文本答案的标示'),
        dialogName?: string(name='DialogName', description='当AnswerSource为BotFramework时，此字段返回对话单元名称'),
        ext?: map[string]any(name='Ext', description='此字段返回透传参数'),
        externalFlags?: map[string]any(name='ExternalFlags', description='当AnswerSource为BotFramework时，此字段返回透传参数'),
        hitStatement?: string(name='HitStatement', description='命中语句'),
        intentName?: string(name='IntentName', description='当AnswerSource为BotFramework时，此字段返回意图名称'),
        metaData?: string(name='MetaData'),
        nodeId?: string(name='NodeId', description='当AnswerSource为BotFramework时，此字段返回节点Id'),
        nodeName?: string(name='NodeName', description='当AnswerSource为BotFramework时，此字段返回节点名称'),
        score?: double(name='Score', description='分数'),
        slots?: [ 
          {
            hit?: boolean(name='Hit'),
            name?: string(name='Name'),
            origin?: string(name='Origin'),
            value?: string(name='Value'),
          }
        ](name='Slots', description='当AnswerSource为BotFramework时，此字段返回专有名词列表'),
        userDefinedChatTitle?: string(name='UserDefinedChatTitle', description='自定义闲聊主题title'),
      }(name='Text', description='当AnswerType为Text时，此字段包含机器人返回的Text对象'),
      title?: string(name='Title', description='当AnswerType为Recommend时，此字段表示推荐或者反问的标题话术'),
      voiceTitle?: string(name='VoiceTitle', description='当AnswerType为Recommend时，并且问答的机器人为语音机器人，此字段表示列表型答案在语音场景渲染之后的答案内容'),
    }
  ](name='Messages', description='消息的列表'),
  querySegList?: [ string ](name='QuerySegList', description='query的分词结果，可能为空'),
  requestId?: string(name='RequestId', description='请求id'),
  sessionId?: string(name='SessionId', description='本次会话的ID'),
}

model ChatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatResponseBody(name='body'),
}

async function chatWithOptions(tmpReq: ChatRequest, runtime: Util.RuntimeOptions): ChatResponse {
  Util.validateModel(tmpReq);
  var request = new ChatShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentName)) {
    query['IntentName'] = request.intentName;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    query['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.senderId)) {
    query['SenderId'] = request.senderId;
  }
  if (!Util.isUnset(request.senderNick)) {
    query['SenderNick'] = request.senderNick;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    query['Utterance'] = request.utterance;
  }
  if (!Util.isUnset(request.vendorParam)) {
    query['VendorParam'] = request.vendorParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Chat',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chat(request: ChatRequest): ChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatWithOptions(request, runtime);
}

model ContinueInstancePublishTaskRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  id?: long(name='Id', description='任务ID'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model ContinueInstancePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  error?: string(name='Error', description='job失败信息'),
  errors?: map[string]any(name='Errors', description='各子发布模块的错误信息，key是子发布模块，value是错误信息'),
  id?: long(name='Id', description='任务Id'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: string(name='Response', description='任务Id'),
  status?: string(name='Status', description='任务状态'),
  warnings?: map[string]any(name='Warnings', description='各子发布模块的警告信息，key是子发布模块，value是警告信息'),
}

model ContinueInstancePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ContinueInstancePublishTaskResponseBody(name='body'),
}

async function continueInstancePublishTaskWithOptions(request: ContinueInstancePublishTaskRequest, runtime: Util.RuntimeOptions): ContinueInstancePublishTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ContinueInstancePublishTask',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function continueInstancePublishTask(request: ContinueInstancePublishTaskRequest): ContinueInstancePublishTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return continueInstancePublishTaskWithOptions(request, runtime);
}

model CreateCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  name?: string(name='Name', description='类目名称'),
  parentCategoryId?: long(name='ParentCategoryId', description='父类目ID，默认-1，对应根目录'),
}

model CreateCategoryResponseBody = {
  category?: {
    categoryId?: long(name='CategoryId', description='类目ID'),
    name?: string(name='Name'),
    parentCategoryId?: long(name='ParentCategoryId'),
    status?: int32(name='Status'),
  }(name='Category', description='类目信息'),
  requestId?: string(name='RequestId'),
}

model CreateCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCategoryResponseBody(name='body'),
}

async function createCategoryWithOptions(request: CreateCategoryRequest, runtime: Util.RuntimeOptions): CreateCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    body['ParentCategoryId'] = request.parentCategoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCategory',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCategory(request: CreateCategoryRequest): CreateCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCategoryWithOptions(request, runtime);
}

model CreateConnQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  connQuestionId?: long(name='ConnQuestionId'),
  knowledgeId?: long(name='KnowledgeId'),
}

model CreateConnQuestionResponseBody = {
  outlineId?: long(name='OutlineId', description='关联关系ID'),
  requestId?: string(name='RequestId'),
}

model CreateConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConnQuestionResponseBody(name='body'),
}

async function createConnQuestionWithOptions(request: CreateConnQuestionRequest, runtime: Util.RuntimeOptions): CreateConnQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.connQuestionId)) {
    body['ConnQuestionId'] = request.connQuestionId;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConnQuestion(request: CreateConnQuestionRequest): CreateConnQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConnQuestionWithOptions(request, runtime);
}

model CreateDSEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityName?: string(name='EntityName', description='实体名称，仅支持中文、大小写字母、数字、下划线'),
  entityType?: string(name='EntityType', description='实体类型：详见:,EntityTypeEnum[synonyms(同义词),regex(正则)]'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model CreateDSEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model CreateDSEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDSEntityResponseBody(name='body'),
}

async function createDSEntityWithOptions(request: CreateDSEntityRequest, runtime: Util.RuntimeOptions): CreateDSEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityName)) {
    query['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDSEntity',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDSEntity(request: CreateDSEntityRequest): CreateDSEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDSEntityWithOptions(request, runtime);
}

model CreateDSEntityValueRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  content?: string(name='Content'),
  entityId?: long(name='EntityId', description='实体ID，修改实体成员时可为空'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  synonyms?: [ string ](name='Synonyms'),
}

model CreateDSEntityValueShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  content?: string(name='Content'),
  entityId?: long(name='EntityId', description='实体ID，修改实体成员时可为空'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  synonymsShrink?: string(name='Synonyms'),
}

model CreateDSEntityValueResponseBody = {
  entityValueId?: long(name='EntityValueId'),
  requestId?: string(name='RequestId'),
}

model CreateDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDSEntityValueResponseBody(name='body'),
}

async function createDSEntityValueWithOptions(tmpReq: CreateDSEntityValueRequest, runtime: Util.RuntimeOptions): CreateDSEntityValueResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDSEntityValueShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.synonyms)) {
    request.synonymsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.synonyms, 'Synonyms', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.synonymsShrink)) {
    body['Synonyms'] = request.synonymsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDSEntityValue',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDSEntityValue(request: CreateDSEntityValueRequest): CreateDSEntityValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDSEntityValueWithOptions(request, runtime);
}

model CreateFaqRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId', description='知识的类目ID'),
  endDate?: string(name='EndDate', description='失效时间'),
  solutionContent?: string(name='SolutionContent', description='默认答案内容'),
  solutionType?: int32(name='SolutionType', description='默认答案类型'),
  startDate?: string(name='StartDate', description='生效时间'),
  title?: string(name='Title', description='知识标题'),
}

model CreateFaqResponseBody = {
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
  requestId?: string(name='RequestId'),
}

model CreateFaqResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFaqResponseBody(name='body'),
}

async function createFaqWithOptions(request: CreateFaqRequest, runtime: Util.RuntimeOptions): CreateFaqResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.solutionContent)) {
    body['SolutionContent'] = request.solutionContent;
  }
  if (!Util.isUnset(request.solutionType)) {
    body['SolutionType'] = request.solutionType;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFaq',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFaq(request: CreateFaqRequest): CreateFaqResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFaqWithOptions(request, runtime);
}

model CreateInstanceRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  introduction?: string(name='Introduction', description='机器人备注，不超过50字'),
  languageCode?: string(name='LanguageCode', description='机器人服务的语言，如zh-cn、en-us，参考 http://www.lingoes.net/zh/translator/langcode.htm   入参全小写，当前只支持 zh-cn、en-us'),
  name?: string(name='Name', description='机器人名称，不超过50字'),
  robotType?: string(name='RobotType', description='机器人类型'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='机器人唯一标识'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.introduction)) {
    query['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.languageCode)) {
    query['LanguageCode'] = request.languageCode;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.robotType)) {
    query['RobotType'] = request.robotType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateInstancePublishTaskRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人唯一标识'),
}

model CreateInstancePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  error?: string(name='Error', description='job失败信息'),
  id?: long(name='Id', description='任务Id'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: string(name='Response', description='任务Id'),
  status?: string(name='Status', description='任务状态'),
}

model CreateInstancePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstancePublishTaskResponseBody(name='body'),
}

async function createInstancePublishTaskWithOptions(request: CreateInstancePublishTaskRequest, runtime: Util.RuntimeOptions): CreateInstancePublishTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstancePublishTask',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstancePublishTask(request: CreateInstancePublishTaskRequest): CreateInstancePublishTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstancePublishTaskWithOptions(request, runtime);
}

model CreateIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentDefinition?: {
    aliasName?: string(name='AliasName', description='意图别名'),
    intentName?: string(name='IntentName', description='意图名称'),
    slotInfos?: [ 
      {
        array?: boolean(name='Array', description='是否数组'),
        encrypt?: boolean(name='Encrypt', description='是否脱敏'),
        interactive?: boolean(name='Interactive', description='是否交互式'),
        name?: string(name='Name', description='槽位名'),
        slotId?: string(name='SlotId'),
        value?: string(name='Value', description='关联的实体名'),
      }
    ](name='SlotInfos', description='槽位信息'),
  }(name='IntentDefinition', description='意图定义结构体'),
}

model CreateIntentShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentDefinitionShrink?: string(name='IntentDefinition', description='意图定义结构体'),
}

model CreateIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model CreateIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIntentResponseBody(name='body'),
}

async function createIntentWithOptions(tmpReq: CreateIntentRequest, runtime: Util.RuntimeOptions): CreateIntentResponse {
  Util.validateModel(tmpReq);
  var request = new CreateIntentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.intentDefinition)) {
    request.intentDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.intentDefinition, 'IntentDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentDefinitionShrink)) {
    query['IntentDefinition'] = request.intentDefinitionShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIntent',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIntent(request: CreateIntentRequest): CreateIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntentWithOptions(request, runtime);
}

model CreateLgfRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  lgfDefinition?: {
    intentId?: long(name='IntentId', description='意图ID'),
    ruleText?: string(name='RuleText', description='LGF配置'),
  }(name='LgfDefinition'),
}

model CreateLgfShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  lgfDefinitionShrink?: string(name='LgfDefinition'),
}

model CreateLgfResponseBody = {
  lgfId?: long(name='LgfId'),
  requestId?: string(name='RequestId'),
}

model CreateLgfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLgfResponseBody(name='body'),
}

async function createLgfWithOptions(tmpReq: CreateLgfRequest, runtime: Util.RuntimeOptions): CreateLgfResponse {
  Util.validateModel(tmpReq);
  var request = new CreateLgfShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lgfDefinition)) {
    request.lgfDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lgfDefinition, 'LgfDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lgfDefinitionShrink)) {
    query['LgfDefinition'] = request.lgfDefinitionShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLgf',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLgf(request: CreateLgfRequest): CreateLgfResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLgfWithOptions(request, runtime);
}

model CreatePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  description?: string(name='Description', description='视角描述'),
  name?: string(name='Name', description='视角名称，长度不超过50字'),
}

model CreatePerspectiveResponseBody = {
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePerspectiveResponseBody(name='body'),
}

async function createPerspectiveWithOptions(request: CreatePerspectiveRequest, runtime: Util.RuntimeOptions): CreatePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePerspective',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPerspective(request: CreatePerspectiveRequest): CreatePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPerspectiveWithOptions(request, runtime);
}

model CreatePublishTaskRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  bizType?: string(name='BizType', description='发布单元类型，机器人发布请使用 CreateInstancePublishTask API'),
  dataIdList?: [ string ](name='DataIdList', description='附加发布信息，当前支持：如果BizType是faq，此字段填写类目Id，表示只发布这些类目下面的知识'),
}

model CreatePublishTaskShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  bizType?: string(name='BizType', description='发布单元类型，机器人发布请使用 CreateInstancePublishTask API'),
  dataIdListShrink?: string(name='DataIdList', description='附加发布信息，当前支持：如果BizType是faq，此字段填写类目Id，表示只发布这些类目下面的知识'),
}

model CreatePublishTaskResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  error?: string(name='Error', description='job失败信息'),
  id?: long(name='Id', description='任务Id'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: string(name='Response', description='任务Id'),
  status?: string(name='Status', description='任务状态'),
}

model CreatePublishTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePublishTaskResponseBody(name='body'),
}

async function createPublishTaskWithOptions(tmpReq: CreatePublishTaskRequest, runtime: Util.RuntimeOptions): CreatePublishTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePublishTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dataIdList)) {
    request.dataIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataIdList, 'DataIdList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.dataIdListShrink)) {
    query['DataIdList'] = request.dataIdListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePublishTask',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPublishTask(request: CreatePublishTaskRequest): CreatePublishTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPublishTaskWithOptions(request, runtime);
}

model CreateSimQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
  title?: string(name='Title', description='相似问标题，字数上限-120'),
}

model CreateSimQuestionResponseBody = {
  requestId?: string(name='RequestId'),
  simQuestionId?: long(name='SimQuestionId', description='相似问ID'),
}

model CreateSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimQuestionResponseBody(name='body'),
}

async function createSimQuestionWithOptions(request: CreateSimQuestionRequest, runtime: Util.RuntimeOptions): CreateSimQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSimQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSimQuestion(request: CreateSimQuestionRequest): CreateSimQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimQuestionWithOptions(request, runtime);
}

model CreateSolutionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  content?: string(name='Content', description='答案内容'),
  contentType?: int32(name='ContentType', description='答案类型'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
  perspectiveCodes?: [ string ](name='PerspectiveCodes', description='视角code列表'),
}

model CreateSolutionResponseBody = {
  requestId?: string(name='RequestId'),
  solutionId?: long(name='SolutionId', description='答案ID'),
}

model CreateSolutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSolutionResponseBody(name='body'),
}

async function createSolutionWithOptions(request: CreateSolutionRequest, runtime: Util.RuntimeOptions): CreateSolutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.perspectiveCodes)) {
    query['PerspectiveCodes'] = request.perspectiveCodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSolution',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSolution(request: CreateSolutionRequest): CreateSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSolutionWithOptions(request, runtime);
}

model CreateUserSayRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  userSayDefinition?: {
    content?: string(name='Content', description='用户话术'),
    intentId?: long(name='IntentId', description='意图ID'),
    slotInfos?: [ 
      {
        endIndex?: int32(name='EndIndex', description='槽位在意图话术中的结束下标（不含）'),
        slotId?: string(name='SlotId', description='划槽ID'),
        startIndex?: int32(name='StartIndex', description='槽位在意图话术中的起始下标'),
      }
    ](name='SlotInfos', description='划槽信息'),
  }(name='UserSayDefinition'),
}

model CreateUserSayShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  userSayDefinitionShrink?: string(name='UserSayDefinition'),
}

model CreateUserSayResponseBody = {
  requestId?: string(name='RequestId'),
  userSayId?: long(name='UserSayId'),
}

model CreateUserSayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserSayResponseBody(name='body'),
}

async function createUserSayWithOptions(tmpReq: CreateUserSayRequest, runtime: Util.RuntimeOptions): CreateUserSayResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUserSayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userSayDefinition)) {
    request.userSayDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userSayDefinition, 'UserSayDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userSayDefinitionShrink)) {
    query['UserSayDefinition'] = request.userSayDefinitionShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserSay',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserSay(request: CreateUserSayRequest): CreateUserSayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserSayWithOptions(request, runtime);
}

model DeleteCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId', description='类目ID'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategoryWithOptions(request: DeleteCategoryRequest, runtime: Util.RuntimeOptions): DeleteCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCategory',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCategoryWithOptions(request, runtime);
}

model DeleteConnQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  outlineId?: long(name='OutlineId'),
}

model DeleteConnQuestionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConnQuestionResponseBody(name='body'),
}

async function deleteConnQuestionWithOptions(request: DeleteConnQuestionRequest, runtime: Util.RuntimeOptions): DeleteConnQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.outlineId)) {
    body['OutlineId'] = request.outlineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConnQuestion(request: DeleteConnQuestionRequest): DeleteConnQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConnQuestionWithOptions(request, runtime);
}

model DeleteDSEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId', description='实体ID'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model DeleteDSEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model DeleteDSEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDSEntityResponseBody(name='body'),
}

async function deleteDSEntityWithOptions(request: DeleteDSEntityRequest, runtime: Util.RuntimeOptions): DeleteDSEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDSEntity',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDSEntity(request: DeleteDSEntityRequest): DeleteDSEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDSEntityWithOptions(request, runtime);
}

model DeleteDSEntityValueRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId', description='实体ID'),
  entityValueId?: long(name='EntityValueId', description='实体成员ID'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model DeleteDSEntityValueResponseBody = {
  entityValueId?: long(name='EntityValueId'),
  requestId?: string(name='RequestId'),
}

model DeleteDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDSEntityValueResponseBody(name='body'),
}

async function deleteDSEntityValueWithOptions(request: DeleteDSEntityValueRequest, runtime: Util.RuntimeOptions): DeleteDSEntityValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityValueId)) {
    query['EntityValueId'] = request.entityValueId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDSEntityValue',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDSEntityValue(request: DeleteDSEntityValueRequest): DeleteDSEntityValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDSEntityValueWithOptions(request, runtime);
}

model DeleteFaqRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID，创建知识该值为空'),
}

model DeleteFaqResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteFaqResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFaqResponseBody(name='body'),
}

async function deleteFaqWithOptions(request: DeleteFaqRequest, runtime: Util.RuntimeOptions): DeleteFaqResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFaq',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFaq(request: DeleteFaqRequest): DeleteFaqResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFaqWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model DeleteInstanceResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  createUserId?: long(name='CreateUserId', description='任务创建人Id'),
  createUserName?: string(name='CreateUserName', description='任务创建人'),
  error?: string(name='Error', description='错误信息'),
  id?: long(name='Id', description='任务id'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: long(name='Response', description='任务id'),
  status?: string(name='Status', description='任务状态，可以在GetInstancePublishTaskState API 了解更多的状态'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentId?: long(name='IntentId', description='意图ID'),
}

model DeleteIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model DeleteIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIntentResponseBody(name='body'),
}

async function deleteIntentWithOptions(request: DeleteIntentRequest, runtime: Util.RuntimeOptions): DeleteIntentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIntent',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIntent(request: DeleteIntentRequest): DeleteIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIntentWithOptions(request, runtime);
}

model DeleteLgfRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentId?: long(name='IntentId'),
  lgfId?: long(name='LgfId'),
}

model DeleteLgfResponseBody = {
  lgfId?: long(name='LgfId'),
  requestId?: string(name='RequestId'),
}

model DeleteLgfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLgfResponseBody(name='body'),
}

async function deleteLgfWithOptions(request: DeleteLgfRequest, runtime: Util.RuntimeOptions): DeleteLgfResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  if (!Util.isUnset(request.lgfId)) {
    query['LgfId'] = request.lgfId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLgf',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLgf(request: DeleteLgfRequest): DeleteLgfResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLgfWithOptions(request, runtime);
}

model DeletePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）'),
}

model DeletePerspectiveResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
  result?: boolean(name='Result', description='删除视角的结果'),
}

model DeletePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePerspectiveResponseBody(name='body'),
}

async function deletePerspectiveWithOptions(request: DeletePerspectiveRequest, runtime: Util.RuntimeOptions): DeletePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.perspectiveId)) {
    query['PerspectiveId'] = request.perspectiveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePerspective',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePerspective(request: DeletePerspectiveRequest): DeletePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePerspectiveWithOptions(request, runtime);
}

model DeleteSimQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  simQuestionId?: long(name='SimQuestionId', description='相似问ID'),
}

model DeleteSimQuestionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSimQuestionResponseBody(name='body'),
}

async function deleteSimQuestionWithOptions(request: DeleteSimQuestionRequest, runtime: Util.RuntimeOptions): DeleteSimQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.simQuestionId)) {
    body['SimQuestionId'] = request.simQuestionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSimQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSimQuestion(request: DeleteSimQuestionRequest): DeleteSimQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSimQuestionWithOptions(request, runtime);
}

model DeleteSolutionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  solutionId?: long(name='SolutionId', description='答案ID'),
}

model DeleteSolutionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSolutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSolutionResponseBody(name='body'),
}

async function deleteSolutionWithOptions(request: DeleteSolutionRequest, runtime: Util.RuntimeOptions): DeleteSolutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.solutionId)) {
    body['SolutionId'] = request.solutionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSolution',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSolution(request: DeleteSolutionRequest): DeleteSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSolutionWithOptions(request, runtime);
}

model DeleteUserSayRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId'),
  intentId?: long(name='IntentId'),
  userSayId?: long(name='UserSayId'),
}

model DeleteUserSayResponseBody = {
  requestId?: string(name='RequestId'),
  userSayId?: long(name='UserSayId'),
}

model DeleteUserSayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserSayResponseBody(name='body'),
}

async function deleteUserSayWithOptions(request: DeleteUserSayRequest, runtime: Util.RuntimeOptions): DeleteUserSayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  if (!Util.isUnset(request.userSayId)) {
    query['UserSayId'] = request.userSayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserSay',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserSay(request: DeleteUserSayRequest): DeleteUserSayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserSayWithOptions(request, runtime);
}

model DescribeCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId', description='类目ID'),
}

model DescribeCategoryResponseBody = {
  category?: {
    categoryId?: long(name='CategoryId', description='类目ID'),
    name?: string(name='Name'),
    parentCategoryId?: long(name='ParentCategoryId'),
    status?: int32(name='Status'),
  }(name='Category', description='类目信息'),
  requestId?: string(name='RequestId'),
}

model DescribeCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCategoryResponseBody(name='body'),
}

async function describeCategoryWithOptions(request: DescribeCategoryRequest, runtime: Util.RuntimeOptions): DescribeCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCategory',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCategory(request: DescribeCategoryRequest): DescribeCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCategoryWithOptions(request, runtime);
}

model DescribeDSEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId', description='实体ID'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model DescribeDSEntityResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  entityId?: long(name='EntityId', description='实体ID'),
  entityName?: string(name='EntityName', description='实体名称，仅支持中文、大小写字母、数字、下划线'),
  entityType?: string(name='EntityType', description='实体类型：详见:,EntityTypeEnum[synonyms(同义词),regex(正则)]'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  requestId?: string(name='RequestId'),
  sysEntityCode?: string(name='SysEntityCode', description='系统实体code，如@sys.date'),
}

model DescribeDSEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDSEntityResponseBody(name='body'),
}

async function describeDSEntityWithOptions(request: DescribeDSEntityRequest, runtime: Util.RuntimeOptions): DescribeDSEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDSEntity',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDSEntity(request: DescribeDSEntityRequest): DescribeDSEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDSEntityWithOptions(request, runtime);
}

model DescribeFaqRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
}

model DescribeFaqResponseBody = {
  categoryId?: long(name='CategoryId', description='类目ID'),
  createTime?: string(name='CreateTime', description='创建时间（UTC时间）'),
  createUserName?: string(name='CreateUserName', description='创建人'),
  effectStatus?: int32(name='EffectStatus', description='知识生效状态,根据StartDate, EndDate计算出来: 20-生效中, 21-已失效, 22-待生效'),
  endDate?: string(name='EndDate', description='失效时间（UTC时间）'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
  modifyTime?: string(name='ModifyTime', description='修改时间（UTC时间）'),
  modifyUserName?: string(name='ModifyUserName', description='修改人'),
  outlines?: [ 
    {
      connQuestionId?: long(name='ConnQuestionId', description='关联知识ID'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)'),
      outlineId?: long(name='OutlineId', description='关联关系ID'),
      title?: string(name='Title', description='关联知识标题'),
    }
  ](name='Outlines', description='关联问列表'),
  requestId?: string(name='RequestId'),
  simQuestions?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)'),
      simQuestionId?: long(name='SimQuestionId', description='相似问ID'),
      title?: string(name='Title', description='相似问标题'),
    }
  ](name='SimQuestions', description='相似问列表'),
  solutions?: [ 
    {
      content?: string(name='Content', description='答案内容'),
      contentType?: int32(name='ContentType', description='答案类型(0纯文本，1富文本）'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)'),
      perspectiveCodes?: [ string ](name='PerspectiveCodes', description='视角code列表'),
      plainText?: string(name='PlainText', description='答案纯文本内容'),
      solutionId?: long(name='SolutionId', description='答案ID'),
    }
  ](name='Solutions', description='答案列表'),
  startDate?: string(name='StartDate', description='生效时间（UTC时间）'),
  status?: int32(name='Status', description='知识状态: -1-已删除未发布, 1-未发布, 2-已发布, 3-已更新未发布'),
  title?: string(name='Title', description='标题'),
}

model DescribeFaqResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeFaqResponseBody(name='body'),
}

async function describeFaqWithOptions(request: DescribeFaqRequest, runtime: Util.RuntimeOptions): DescribeFaqResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFaq',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFaq(request: DescribeFaqRequest): DescribeFaqResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFaqWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model DescribeInstanceResponseBody = {
  avatar?: string(name='Avatar', description='机器人头像的URL'),
  categories?: [ 
    {
      categoryId?: long(name='CategoryId', description='类目id'),
      name?: string(name='Name', description='类目名称'),
      parentCategoryId?: long(name='ParentCategoryId', description='父类目id，-1表示根目录'),
    }
  ](name='Categories', description='类目列表'),
  createTime?: string(name='CreateTime', description='机器人创建的 UTC 时间'),
  editStatus?: string(name='EditStatus', description='机器人状态： EDITING(编辑中)、 PUBLISHED(已发布)'),
  instanceId?: string(name='InstanceId', description='机器人唯一标识'),
  introduction?: string(name='Introduction', description='机器人备注'),
  languageCode?: string(name='LanguageCode', description='机器人服务的语言，如zh-cn、en-us'),
  name?: string(name='Name', description='机器人名称'),
  requestId?: string(name='RequestId', description='请求Id'),
  robotType?: string(name='RobotType', description='机器人类型'),
  timeZone?: string(name='TimeZone', description='机器人的时区，参考《公共-时区码》'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentId?: long(name='IntentId', description='意图ID'),
}

model DescribeIntentResponseBody = {
  aliasName?: string(name='AliasName'),
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  intentId?: long(name='IntentId'),
  intentName?: string(name='IntentName'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  requestId?: string(name='RequestId'),
  slotInfos?: [ 
    {
      array?: boolean(name='Array'),
      encrypt?: boolean(name='Encrypt'),
      interactive?: boolean(name='Interactive'),
      name?: string(name='Name'),
      slotId?: string(name='SlotId'),
      value?: string(name='Value'),
    }
  ](name='SlotInfos'),
}

model DescribeIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIntentResponseBody(name='body'),
}

async function describeIntentWithOptions(request: DescribeIntentRequest, runtime: Util.RuntimeOptions): DescribeIntentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.intentId)) {
    body['IntentId'] = request.intentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIntent',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIntent(request: DescribeIntentRequest): DescribeIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIntentWithOptions(request, runtime);
}

model DescribePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  perspectiveId?: string(name='PerspectiveId', description='视角Id'),
}

model DescribePerspectiveResponseBody = {
  createTime?: string(name='CreateTime', description='创建时间 UTC时间'),
  modifyTime?: string(name='ModifyTime', description='修改时间 UTC时间'),
  name?: string(name='Name', description='视角名称'),
  perspectiveCode?: string(name='PerspectiveCode', description='视角编码（用于问答api）'),
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）'),
  requestId?: string(name='RequestId', description='请求Id'),
  selfDefine?: boolean(name='SelfDefine', description='是否自定义'),
  status?: int32(name='Status', description='数据状态：3：选中；1：未选中'),
}

model DescribePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePerspectiveResponseBody(name='body'),
}

async function describePerspectiveWithOptions(request: DescribePerspectiveRequest, runtime: Util.RuntimeOptions): DescribePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.perspectiveId)) {
    query['PerspectiveId'] = request.perspectiveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePerspective',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePerspective(request: DescribePerspectiveRequest): DescribePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePerspectiveWithOptions(request, runtime);
}

model FeedbackRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  feedback?: string(name='Feedback', description='good-点赞、bad-点踩'),
  feedbackContent?: string(name='FeedbackContent', description='点赞、点踩的内容'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  messageId?: string(name='MessageId', description='会话窗单次会话标识'),
  sessionId?: string(name='SessionId', description='会话Session标识，标识：IM唯一标识会话'),
}

model FeedbackResponseBody = {
  feedback?: string(name='Feedback', description='good-点赞、bad-点踩'),
  messageId?: string(name='MessageId', description='会话窗单次会话标识'),
  requestId?: string(name='RequestId', description='请求id'),
}

model FeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FeedbackResponseBody(name='body'),
}

async function feedbackWithOptions(request: FeedbackRequest, runtime: Util.RuntimeOptions): FeedbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!Util.isUnset(request.feedbackContent)) {
    query['FeedbackContent'] = request.feedbackContent;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Feedback',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function feedback(request: FeedbackRequest): FeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return feedbackWithOptions(request, runtime);
}

model GenerateUserAccessTokenRequest {
  agentKey?: string(name='AgentKey'),
  email?: string(name='Email'),
  expireTime?: int32(name='ExpireTime'),
  extraInfo?: string(name='ExtraInfo'),
  foreignId?: string(name='ForeignId'),
  nick?: string(name='Nick'),
  telephone?: string(name='Telephone'),
}

model GenerateUserAccessTokenResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model GenerateUserAccessTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateUserAccessTokenResponseBody(name='body'),
}

async function generateUserAccessTokenWithOptions(request: GenerateUserAccessTokenRequest, runtime: Util.RuntimeOptions): GenerateUserAccessTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.extraInfo)) {
    query['ExtraInfo'] = request.extraInfo;
  }
  if (!Util.isUnset(request.foreignId)) {
    query['ForeignId'] = request.foreignId;
  }
  if (!Util.isUnset(request.nick)) {
    query['Nick'] = request.nick;
  }
  if (!Util.isUnset(request.telephone)) {
    query['Telephone'] = request.telephone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateUserAccessToken',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateUserAccessToken(request: GenerateUserAccessTokenRequest): GenerateUserAccessTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateUserAccessTokenWithOptions(request, runtime);
}

model GetAsyncResultRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  taskId?: string(name='TaskId', description='从Chat接口返回参数中获取TASK_ID'),
}

model GetAsyncResultResponseBody = {
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model GetAsyncResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncResultResponseBody(name='body'),
}

async function getAsyncResultWithOptions(request: GetAsyncResultRequest, runtime: Util.RuntimeOptions): GetAsyncResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncResult',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncResult(request: GetAsyncResultRequest): GetAsyncResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncResultWithOptions(request, runtime);
}

model GetInstancePublishTaskStateRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  id?: long(name='Id', description='任务ID'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model GetInstancePublishTaskStateResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  error?: string(name='Error', description='job失败信息'),
  errors?: map[string]any(name='Errors', description='各子发布模块的错误信息，key是子发布模块，value是错误信息'),
  id?: long(name='Id', description='任务Id'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: string(name='Response', description='任务Id'),
  status?: string(name='Status', description='任务状态'),
  warnings?: map[string]any(name='Warnings', description='各子发布模块的警告信息，key是子发布模块，value是警告信息'),
}

model GetInstancePublishTaskStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstancePublishTaskStateResponseBody(name='body'),
}

async function getInstancePublishTaskStateWithOptions(request: GetInstancePublishTaskStateRequest, runtime: Util.RuntimeOptions): GetInstancePublishTaskStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstancePublishTaskState',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstancePublishTaskState(request: GetInstancePublishTaskStateRequest): GetInstancePublishTaskStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstancePublishTaskStateWithOptions(request, runtime);
}

model GetPublishTaskStateRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  id?: long(name='Id', description='任务ID'),
}

model GetPublishTaskStateResponseBody = {
  bizTypeList?: [ string ](name='BizTypeList', description='业务类型列表'),
  createTime?: string(name='CreateTime', description='任务创建的 UTC 时间'),
  error?: string(name='Error', description='job失败信息'),
  errors?: map[string]any(name='Errors', description='各子发布模块的错误信息，key是子发布模块，value是错误信息'),
  id?: long(name='Id', description='任务Id'),
  modifyTime?: string(name='ModifyTime', description='任务修改的 UTC 时间'),
  requestId?: string(name='RequestId', description='请求Id'),
  response?: string(name='Response', description='任务Id'),
  status?: string(name='Status', description='任务状态'),
  warnings?: map[string]any(name='Warnings', description='各子发布模块的警告信息，key是子发布模块，value是警告信息'),
}

model GetPublishTaskStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPublishTaskStateResponseBody(name='body'),
}

async function getPublishTaskStateWithOptions(request: GetPublishTaskStateRequest, runtime: Util.RuntimeOptions): GetPublishTaskStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPublishTaskState',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPublishTaskState(request: GetPublishTaskStateRequest): GetPublishTaskStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPublishTaskStateWithOptions(request, runtime);
}

model LinkInstanceCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryIds?: string(name='CategoryIds', description='知识类目Id'),
  instanceId?: string(name='InstanceId', description='机器人唯一标识'),
}

model LinkInstanceCategoryResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model LinkInstanceCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LinkInstanceCategoryResponseBody(name='body'),
}

async function linkInstanceCategoryWithOptions(request: LinkInstanceCategoryRequest, runtime: Util.RuntimeOptions): LinkInstanceCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryIds)) {
    body['CategoryIds'] = request.categoryIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LinkInstanceCategory',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function linkInstanceCategory(request: LinkInstanceCategoryRequest): LinkInstanceCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return linkInstanceCategoryWithOptions(request, runtime);
}

model ListAgentRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListAgentResponseBody = {
  data?: [ 
    {
      agentId?: long(name='AgentId'),
      agentKey?: string(name='AgentKey'),
      agentName?: string(name='AgentName'),
    }
  ](name='Data'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId', description='Id of the request'),
  totalCount?: int32(name='TotalCount'),
}

model ListAgentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAgentResponseBody(name='body'),
}

async function listAgentWithOptions(request: ListAgentRequest, runtime: Util.RuntimeOptions): ListAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgent',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAgent(request: ListAgentRequest): ListAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentWithOptions(request, runtime);
}

model ListCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  parentCategoryId?: long(name='ParentCategoryId', description='父类目ID'),
}

model ListCategoryResponseBody = {
  categories?: [ 
    {
      categoryId?: long(name='CategoryId', description='类目ID'),
      name?: string(name='Name'),
      parentCategoryId?: long(name='ParentCategoryId'),
      status?: int32(name='Status'),
    }
  ](name='Categories', description='list结果'),
  requestId?: string(name='RequestId'),
}

model ListCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCategoryResponseBody(name='body'),
}

async function listCategoryWithOptions(request: ListCategoryRequest, runtime: Util.RuntimeOptions): ListCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.parentCategoryId)) {
    body['ParentCategoryId'] = request.parentCategoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCategory',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCategory(request: ListCategoryRequest): ListCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCategoryWithOptions(request, runtime);
}

model ListConnQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId'),
}

model ListConnQuestionResponseBody = {
  outlines?: [ 
    {
      connQuestionId?: long(name='ConnQuestionId', description='关联知识ID'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)'),
      outlineId?: long(name='OutlineId', description='关联关系ID'),
      title?: string(name='Title', description='关联知识题目'),
    }
  ](name='Outlines'),
  requestId?: string(name='RequestId'),
}

model ListConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConnQuestionResponseBody(name='body'),
}

async function listConnQuestionWithOptions(request: ListConnQuestionRequest, runtime: Util.RuntimeOptions): ListConnQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListConnQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConnQuestion(request: ListConnQuestionRequest): ListConnQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConnQuestionWithOptions(request, runtime);
}

model ListDSEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityType?: string(name='EntityType', description='为空：全量自定义实体（默认）'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  keyword?: string(name='Keyword', description='筛选项，contains匹配，范围：实体名称（未来扩展：实体成员、同义词）'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDSEntityResponseBody = {
  entities?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      entityId?: long(name='EntityId'),
      entityName?: string(name='EntityName'),
      entityType?: string(name='EntityType'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      sysEntityCode?: string(name='SysEntityCode', description='系统实体code，如@sys.date'),
    }
  ](name='Entities'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDSEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDSEntityResponseBody(name='body'),
}

async function listDSEntityWithOptions(request: ListDSEntityRequest, runtime: Util.RuntimeOptions): ListDSEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDSEntity',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDSEntity(request: ListDSEntityRequest): ListDSEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDSEntityWithOptions(request, runtime);
}

model ListDSEntityValueRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId', description='实体ID'),
  entityValueId?: long(name='EntityValueId', description='实体成员ID'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  keyword?: string(name='Keyword', description='实体成员名称搜索关键词'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='分页大小'),
}

model ListDSEntityValueResponseBody = {
  entityValues?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime'),
      entityId?: long(name='EntityId'),
      entityValueId?: long(name='EntityValueId'),
      modifyTime?: string(name='ModifyTime'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='EntityValues'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDSEntityValueResponseBody(name='body'),
}

async function listDSEntityValueWithOptions(request: ListDSEntityValueRequest, runtime: Util.RuntimeOptions): ListDSEntityValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.entityId)) {
    body['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityValueId)) {
    body['EntityValueId'] = request.entityValueId;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDSEntityValue',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDSEntityValue(request: ListDSEntityValueRequest): ListDSEntityValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDSEntityValueWithOptions(request, runtime);
}

model ListInstanceRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  name?: string(name='Name', description='按机器人名称模糊搜索'),
  pageNumber?: long(name='PageNumber', description='分页-第几页，默认1'),
  pageSize?: long(name='PageSize', description='分页-页面大小，默认10'),
  robotType?: string(name='RobotType', description='按机器人类型筛选'),
}

model ListInstanceResponseBody = {
  instances?: [ 
    {
      avatar?: string(name='Avatar', description='机器人头像的URL'),
      createTime?: string(name='CreateTime', description='机器人创建的 UTC 时间'),
      instanceId?: string(name='InstanceId', description='机器人唯一标识'),
      introduction?: string(name='Introduction', description='机器人备注'),
      languageCode?: string(name='LanguageCode', description='机器人服务的语言'),
      name?: string(name='Name', description='机器人名称'),
      robotType?: string(name='RobotType', description='机器人类型'),
    }
  ](name='Instances', description='机器人列表信息'),
  pageNumber?: long(name='PageNumber', description='分页-第几页'),
  pageSize?: long(name='PageSize', description='分页-页面大小'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='总条数'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstanceWithOptions(request: ListInstanceRequest, runtime: Util.RuntimeOptions): ListInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.robotType)) {
    query['RobotType'] = request.robotType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstance',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstanceWithOptions(request, runtime);
}

model ListIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentName?: string(name='IntentName', description='意图名称'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListIntentResponseBody = {
  intents?: [ 
    {
      aliasName?: string(name='AliasName'),
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      intentId?: long(name='IntentId'),
      intentName?: string(name='IntentName'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      slotInfos?: [ 
        {
          array?: boolean(name='Array', description='是否数组'),
          encrypt?: boolean(name='Encrypt', description='是否敏感'),
          interactive?: boolean(name='Interactive', description='是否交互式收集'),
          name?: string(name='Name', description='槽位名'),
          slotId?: string(name='SlotId', description='槽位ID'),
          value?: string(name='Value', description='槽位值（实体名）'),
        }
      ](name='SlotInfos'),
    }
  ](name='Intents'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIntentResponseBody(name='body'),
}

async function listIntentWithOptions(request: ListIntentRequest, runtime: Util.RuntimeOptions): ListIntentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentName)) {
    query['IntentName'] = request.intentName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIntent',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIntent(request: ListIntentRequest): ListIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntentWithOptions(request, runtime);
}

model ListLgfRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentId?: long(name='IntentId', description='意图ID'),
  lgfText?: string(name='LgfText', description='筛选语义配置内容'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListLgfResponseBody = {
  lgfs?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      intentId?: long(name='IntentId', description='意图ID'),
      lgfId?: long(name='LgfId', description='LGF ID'),
      modifyTime?: string(name='ModifyTime', description='修改时间'),
      ruleText?: string(name='RuleText', description='LGF规则'),
    }
  ](name='Lgfs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListLgfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListLgfResponseBody(name='body'),
}

async function listLgfWithOptions(request: ListLgfRequest, runtime: Util.RuntimeOptions): ListLgfResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  if (!Util.isUnset(request.lgfText)) {
    query['LgfText'] = request.lgfText;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListLgf',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listLgf(request: ListLgfRequest): ListLgfResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLgfWithOptions(request, runtime);
}

model ListSimQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
}

model ListSimQuestionResponseBody = {
  requestId?: string(name='RequestId'),
  simQuestions?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)'),
      simQuestionId?: long(name='SimQuestionId', description='相似问ID'),
      title?: string(name='Title', description='相似问标题'),
    }
  ](name='SimQuestions', description='相似问列表'),
}

model ListSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSimQuestionResponseBody(name='body'),
}

async function listSimQuestionWithOptions(request: ListSimQuestionRequest, runtime: Util.RuntimeOptions): ListSimQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSimQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSimQuestion(request: ListSimQuestionRequest): ListSimQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSimQuestionWithOptions(request, runtime);
}

model ListSolutionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
}

model ListSolutionResponseBody = {
  requestId?: string(name='RequestId'),
  solutions?: [ 
    {
      content?: string(name='Content', description='答案内容'),
      contentType?: int32(name='ContentType', description='答案类型(0纯文本，1富文本）'),
      createTime?: string(name='CreateTime', description='创建时间(UTC 时间)'),
      modifyTime?: string(name='ModifyTime', description='修改时间(UTC 时间)'),
      perspectiveCodes?: [ string ](name='PerspectiveCodes', description='视角code列表'),
      plainText?: string(name='PlainText', description='答案纯文本内容'),
      solutionId?: long(name='SolutionId', description='答案ID'),
    }
  ](name='Solutions', description='答案列表'),
}

model ListSolutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSolutionResponseBody(name='body'),
}

async function listSolutionWithOptions(request: ListSolutionRequest, runtime: Util.RuntimeOptions): ListSolutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSolution',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSolution(request: ListSolutionRequest): ListSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSolutionWithOptions(request, runtime);
}

model ListUserSayRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  content?: string(name='Content', description='筛选用户话术'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentId?: long(name='IntentId', description='意图ID'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListUserSayResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  userSays?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime'),
      intentId?: long(name='IntentId'),
      modifyTime?: string(name='ModifyTime'),
      slotInfos?: [ 
        {
          endIndex?: int32(name='EndIndex', description='槽位在意图话术中的下标'),
          slotId?: string(name='SlotId', description='意图槽位ID'),
          startIndex?: int32(name='StartIndex', description='槽位在意图话术中的下标'),
        }
      ](name='SlotInfos'),
      userSayId?: long(name='UserSayId'),
    }
  ](name='UserSays'),
}

model ListUserSayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserSayResponseBody(name='body'),
}

async function listUserSayWithOptions(request: ListUserSayRequest, runtime: Util.RuntimeOptions): ListUserSayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserSay',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserSay(request: ListUserSayRequest): ListUserSayResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserSayWithOptions(request, runtime);
}

model NluRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  utterance?: string(name='Utterance', description='用户表述'),
}

model NluResponseBody = {
  messageId?: string(name='MessageId', description='本条语言理解应答消息的ID'),
  messages?: [ 
    {
      dialogHubNluInfo?: {
        globalDictList?: [ 
          {
            standardWord?: string(name='StandardWord', description='名词'),
            word?: string(name='Word', description='同义词'),
          }
        ](name='GlobalDictList', description='全局名词列表'),
        globalSensitiveWordList?: [ 
          {
            standardWord?: string(name='StandardWord', description='名词'),
            word?: string(name='Word', description='同义词'),
          }
        ](name='GlobalSensitiveWordList', description='全局敏感词列表'),
      }(name='DialogHubNluInfo', description='对话中控的nlu信息'),
      dsNluInfo?: {
        entityList?: [ 
          {
            name?: string(name='Name', description='实体名称'),
            origin?: string(name='Origin', description='实体原词（实体成员）'),
            type?: string(name='Type', description='实体类型，当前只有text类型'),
            value?: string(name='Value', description='实体同义词'),
          }
        ](name='EntityList', description='实体列表'),
        intentList?: [ 
          {
            intentId?: long(name='IntentId', description='意图id'),
            matchDetail?: string(name='MatchDetail', description='匹配详情（匹配过程）'),
            matchType?: string(name='MatchType', description='匹配类型，其枚举值含义如下：  Similarity：query与意图通过意图话术相似度匹配 Lgf：query与意图通过LGF匹配 Classify：query与意图通过模型训练匹配 FewShotLearning：query与意图通过系统内置fewshot模型匹配 BuildIn： query与系统内置意图匹配'),
            name?: string(name='Name', description='意图名称'),
            score?: double(name='Score', description='分数'),
            slotList?: [ 
              {
                name?: string(name='Name', description='实体名称'),
                origin?: string(name='Origin', description='实体原词（实体成员）'),
                type?: string(name='Type', description='实体类型，当前只有text类型'),
                value?: string(name='Value', description='实体同义词'),
              }
            ](name='SlotList', description='命中意图的槽位列表'),
          }
        ](name='IntentList', description='意图列表'),
      }(name='DsNluInfo', description='对话工厂的nlu信息'),
    }
  ](name='Messages', description='消息的列表'),
  requestId?: string(name='RequestId', description='请求id'),
}

model NluResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NluResponseBody(name='body'),
}

async function nluWithOptions(request: NluRequest, runtime: Util.RuntimeOptions): NluResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.utterance)) {
    query['Utterance'] = request.utterance;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Nlu',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function nlu(request: NluRequest): NluResponse {
  var runtime = new Util.RuntimeOptions{};
  return nluWithOptions(request, runtime);
}

model QueryPerspectivesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
}

model QueryPerspectivesResponseBody = {
  perspectives?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间 UTC时间'),
      modifyTime?: string(name='ModifyTime', description='修改时间 UTC时间'),
      name?: string(name='Name', description='视角名称'),
      perspectiveCode?: string(name='PerspectiveCode', description='视角编码（用于问答api）'),
      perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）'),
      selfDefine?: boolean(name='SelfDefine', description='是否自定义'),
      status?: int32(name='Status', description='数据状态：3：选中；1：未选中'),
    }
  ](name='Perspectives', description='视角列表'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model QueryPerspectivesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPerspectivesResponseBody(name='body'),
}

async function queryPerspectivesWithOptions(request: QueryPerspectivesRequest, runtime: Util.RuntimeOptions): QueryPerspectivesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPerspectives',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPerspectives(request: QueryPerspectivesRequest): QueryPerspectivesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPerspectivesWithOptions(request, runtime);
}

model SearchFaqRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryIds?: [ long ](name='CategoryIds', description='类目唯一标识'),
  createTimeBegin?: string(name='CreateTimeBegin', description='创建开始时间'),
  createTimeEnd?: string(name='CreateTimeEnd', description='创建结束时间'),
  createUserName?: string(name='CreateUserName', description='创建人'),
  endTimeBegin?: string(name='EndTimeBegin', description='失效开始时间'),
  endTimeEnd?: string(name='EndTimeEnd', description='失效结束时间'),
  keyword?: string(name='Keyword', description='关键字'),
  modifyTimeBegin?: string(name='ModifyTimeBegin', description='修改开始时间'),
  modifyTimeEnd?: string(name='ModifyTimeEnd', description='修改结束时间'),
  modifyUserName?: string(name='ModifyUserName', description='修改人'),
  pageNumber?: int32(name='PageNumber', description='页码 默认1'),
  pageSize?: int32(name='PageSize', description='每页数量，默认10，最大50'),
  searchScope?: int32(name='SearchScope', description='搜索范围： 1-搜索标题相似问, 2-搜索答案, 3-搜索全部'),
  startTimeBegin?: string(name='StartTimeBegin', description='生效开始时间'),
  startTimeEnd?: string(name='StartTimeEnd', description='生效结束时间'),
  status?: int32(name='Status', description='知识状态: -1-已删除未发布, 1-未发布, 2-已发布, 3-已更新未发布'),
}

model SearchFaqShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryIdsShrink?: string(name='CategoryIds', description='类目唯一标识'),
  createTimeBegin?: string(name='CreateTimeBegin', description='创建开始时间'),
  createTimeEnd?: string(name='CreateTimeEnd', description='创建结束时间'),
  createUserName?: string(name='CreateUserName', description='创建人'),
  endTimeBegin?: string(name='EndTimeBegin', description='失效开始时间'),
  endTimeEnd?: string(name='EndTimeEnd', description='失效结束时间'),
  keyword?: string(name='Keyword', description='关键字'),
  modifyTimeBegin?: string(name='ModifyTimeBegin', description='修改开始时间'),
  modifyTimeEnd?: string(name='ModifyTimeEnd', description='修改结束时间'),
  modifyUserName?: string(name='ModifyUserName', description='修改人'),
  pageNumber?: int32(name='PageNumber', description='页码 默认1'),
  pageSize?: int32(name='PageSize', description='每页数量，默认10，最大50'),
  searchScope?: int32(name='SearchScope', description='搜索范围： 1-搜索标题相似问, 2-搜索答案, 3-搜索全部'),
  startTimeBegin?: string(name='StartTimeBegin', description='生效开始时间'),
  startTimeEnd?: string(name='StartTimeEnd', description='生效结束时间'),
  status?: int32(name='Status', description='知识状态: -1-已删除未发布, 1-未发布, 2-已发布, 3-已更新未发布'),
}

model SearchFaqResponseBody = {
  faqHits?: [ 
    {
      categoryId?: long(name='CategoryId', description='类目ID'),
      createTime?: string(name='CreateTime', description='创建时间（UTC时间）'),
      createUserId?: long(name='CreateUserId', description='创建人ID'),
      createUserName?: string(name='CreateUserName', description='创建人'),
      effectStatus?: int32(name='EffectStatus', description='知识生效状态,根据StartDate, EndDate计算出来: 20-生效中, 21-已失效, 22-待生效'),
      hitSimilarTitles?: [ string ](name='HitSimilarTitles', description='命中的相似问'),
      hitSolutions?: [ string ](name='HitSolutions', description='命中的答案'),
      knowledgeId?: long(name='KnowledgeId', description='知识ID'),
      modifyTime?: string(name='ModifyTime', description='修改时间（UTC时间）'),
      modifyUserId?: long(name='ModifyUserId', description='修改人ID'),
      modifyUserName?: string(name='ModifyUserName', description='修改人'),
      status?: int32(name='Status', description='知识状态: -1-已删除未发布, 1-未发布, 2-已发布, 3-已更新未发布'),
      title?: string(name='Title', description='标题'),
    }
  ](name='FaqHits'),
  pageNumber?: int32(name='PageNumber', description='页码 默认1'),
  pageSize?: int32(name='PageSize', description='每页数量，默认10，最大500'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount', description='总条数'),
}

model SearchFaqResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchFaqResponseBody(name='body'),
}

async function searchFaqWithOptions(tmpReq: SearchFaqRequest, runtime: Util.RuntimeOptions): SearchFaqResponse {
  Util.validateModel(tmpReq);
  var request = new SearchFaqShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.categoryIds)) {
    request.categoryIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.categoryIds, 'CategoryIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryIdsShrink)) {
    body['CategoryIds'] = request.categoryIdsShrink;
  }
  if (!Util.isUnset(request.createTimeBegin)) {
    body['CreateTimeBegin'] = request.createTimeBegin;
  }
  if (!Util.isUnset(request.createTimeEnd)) {
    body['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createUserName)) {
    body['CreateUserName'] = request.createUserName;
  }
  if (!Util.isUnset(request.endTimeBegin)) {
    body['EndTimeBegin'] = request.endTimeBegin;
  }
  if (!Util.isUnset(request.endTimeEnd)) {
    body['EndTimeEnd'] = request.endTimeEnd;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.modifyTimeBegin)) {
    body['ModifyTimeBegin'] = request.modifyTimeBegin;
  }
  if (!Util.isUnset(request.modifyTimeEnd)) {
    body['ModifyTimeEnd'] = request.modifyTimeEnd;
  }
  if (!Util.isUnset(request.modifyUserName)) {
    body['ModifyUserName'] = request.modifyUserName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchScope)) {
    body['SearchScope'] = request.searchScope;
  }
  if (!Util.isUnset(request.startTimeBegin)) {
    body['StartTimeBegin'] = request.startTimeBegin;
  }
  if (!Util.isUnset(request.startTimeEnd)) {
    body['StartTimeEnd'] = request.startTimeEnd;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchFaq',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchFaq(request: SearchFaqRequest): SearchFaqResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchFaqWithOptions(request, runtime);
}

model UpdateCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId', description='类目ID'),
  name?: string(name='Name', description='类目名称'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCategoryResponseBody(name='body'),
}

async function updateCategoryWithOptions(request: UpdateCategoryRequest, runtime: Util.RuntimeOptions): UpdateCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCategory',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCategoryWithOptions(request, runtime);
}

model UpdateConnQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  connQuestionId?: long(name='ConnQuestionId'),
  outlineId?: long(name='OutlineId'),
}

model UpdateConnQuestionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateConnQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConnQuestionResponseBody(name='body'),
}

async function updateConnQuestionWithOptions(request: UpdateConnQuestionRequest, runtime: Util.RuntimeOptions): UpdateConnQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.connQuestionId)) {
    body['ConnQuestionId'] = request.connQuestionId;
  }
  if (!Util.isUnset(request.outlineId)) {
    body['OutlineId'] = request.outlineId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConnQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConnQuestion(request: UpdateConnQuestionRequest): UpdateConnQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConnQuestionWithOptions(request, runtime);
}

model UpdateDSEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId', description='实体ID'),
  entityName?: string(name='EntityName', description='实体名称，仅支持中文、大小写字母、数字、下划线'),
  entityType?: string(name='EntityType', description='实体类型：详见:,EntityTypeEnum[synonyms(同义词),regex(正则)]'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
}

model UpdateDSEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model UpdateDSEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDSEntityResponseBody(name='body'),
}

async function updateDSEntityWithOptions(request: UpdateDSEntityRequest, runtime: Util.RuntimeOptions): UpdateDSEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityName)) {
    query['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDSEntity',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDSEntity(request: UpdateDSEntityRequest): UpdateDSEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDSEntityWithOptions(request, runtime);
}

model UpdateDSEntityValueRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  content?: string(name='Content', description='实体类型为synonyms时，表示实体归一化值；当实体类型为regex时，表示正则表达式文本'),
  entityId?: long(name='EntityId', description='实体ID，修改实体成员时可为空'),
  entityValueId?: long(name='EntityValueId', description='实体成员ID，创建实体成员时为空'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  synonyms?: [ string ](name='Synonyms', description='实体同义词'),
}

model UpdateDSEntityValueShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  content?: string(name='Content', description='实体类型为synonyms时，表示实体归一化值；当实体类型为regex时，表示正则表达式文本'),
  entityId?: long(name='EntityId', description='实体ID，修改实体成员时可为空'),
  entityValueId?: long(name='EntityValueId', description='实体成员ID，创建实体成员时为空'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  synonymsShrink?: string(name='Synonyms', description='实体同义词'),
}

model UpdateDSEntityValueResponseBody = {
  entityValueId?: long(name='EntityValueId'),
  requestId?: string(name='RequestId'),
}

model UpdateDSEntityValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDSEntityValueResponseBody(name='body'),
}

async function updateDSEntityValueWithOptions(tmpReq: UpdateDSEntityValueRequest, runtime: Util.RuntimeOptions): UpdateDSEntityValueResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDSEntityValueShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.synonyms)) {
    request.synonymsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.synonyms, 'Synonyms', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityValueId)) {
    query['EntityValueId'] = request.entityValueId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.synonymsShrink)) {
    body['Synonyms'] = request.synonymsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDSEntityValue',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDSEntityValue(request: UpdateDSEntityValueRequest): UpdateDSEntityValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDSEntityValueWithOptions(request, runtime);
}

model UpdateFaqRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId', description='知识的类目ID'),
  endDate?: string(name='EndDate', description='失效时间'),
  knowledgeId?: long(name='KnowledgeId', description='知识ID'),
  startDate?: string(name='StartDate', description='生效时间'),
  title?: string(name='Title', description='知识标题'),
}

model UpdateFaqResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateFaqResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFaqResponseBody(name='body'),
}

async function updateFaqWithOptions(request: UpdateFaqRequest, runtime: Util.RuntimeOptions): UpdateFaqResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.categoryId)) {
    body['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFaq',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateFaq(request: UpdateFaqRequest): UpdateFaqResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFaqWithOptions(request, runtime);
}

model UpdateInstanceRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  introduction?: string(name='Introduction', description='要修改的机器人备注'),
  name?: string(name='Name', description='要修改的机器人名称'),
}

model UpdateInstanceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceResponseBody(name='body'),
}

async function updateInstanceWithOptions(request: UpdateInstanceRequest, runtime: Util.RuntimeOptions): UpdateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.introduction)) {
    query['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstance',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstance(request: UpdateInstanceRequest): UpdateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceWithOptions(request, runtime);
}

model UpdateIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentDefinition?: {
    aliasName?: string(name='AliasName', description='意图别名'),
    intentName?: string(name='IntentName', description='意图名称'),
    slotInfos?: [ 
      {
        array?: boolean(name='Array', description='是否数组'),
        encrypt?: boolean(name='Encrypt', description='是否脱敏'),
        interactive?: boolean(name='Interactive', description='是否交互式'),
        name?: string(name='Name', description='槽位名'),
        slotId?: string(name='SlotId'),
        value?: string(name='Value', description='关联的实体名'),
      }
    ](name='SlotInfos', description='槽位信息'),
  }(name='IntentDefinition', description='意图定义结构体'),
  intentId?: long(name='IntentId', description='意图ID'),
}

model UpdateIntentShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  intentDefinitionShrink?: string(name='IntentDefinition', description='意图定义结构体'),
  intentId?: long(name='IntentId', description='意图ID'),
}

model UpdateIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model UpdateIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIntentResponseBody(name='body'),
}

async function updateIntentWithOptions(tmpReq: UpdateIntentRequest, runtime: Util.RuntimeOptions): UpdateIntentResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateIntentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.intentDefinition)) {
    request.intentDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.intentDefinition, 'IntentDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentDefinitionShrink)) {
    query['IntentDefinition'] = request.intentDefinitionShrink;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIntent',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIntent(request: UpdateIntentRequest): UpdateIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIntentWithOptions(request, runtime);
}

model UpdateLgfRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  lgfDefinition?: {
    intentId?: long(name='IntentId', description='意图ID'),
    ruleText?: string(name='RuleText', description='LGF配置'),
  }(name='LgfDefinition'),
  lgfId?: long(name='LgfId', description='LGF ID'),
}

model UpdateLgfShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  lgfDefinitionShrink?: string(name='LgfDefinition'),
  lgfId?: long(name='LgfId', description='LGF ID'),
}

model UpdateLgfResponseBody = {
  lgfId?: long(name='LgfId'),
  requestId?: string(name='RequestId'),
}

model UpdateLgfResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateLgfResponseBody(name='body'),
}

async function updateLgfWithOptions(tmpReq: UpdateLgfRequest, runtime: Util.RuntimeOptions): UpdateLgfResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateLgfShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.lgfDefinition)) {
    request.lgfDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.lgfDefinition, 'LgfDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lgfDefinitionShrink)) {
    query['LgfDefinition'] = request.lgfDefinitionShrink;
  }
  if (!Util.isUnset(request.lgfId)) {
    query['LgfId'] = request.lgfId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateLgf',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateLgf(request: UpdateLgfRequest): UpdateLgfResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateLgfWithOptions(request, runtime);
}

model UpdatePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  name?: string(name='Name', description='视角名称'),
  perspectiveId?: string(name='PerspectiveId', description='视角主键（code_id）'),
}

model UpdatePerspectiveResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model UpdatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePerspectiveResponseBody(name='body'),
}

async function updatePerspectiveWithOptions(request: UpdatePerspectiveRequest, runtime: Util.RuntimeOptions): UpdatePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.perspectiveId)) {
    query['PerspectiveId'] = request.perspectiveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePerspective',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePerspective(request: UpdatePerspectiveRequest): UpdatePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePerspectiveWithOptions(request, runtime);
}

model UpdateSimQuestionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  simQuestionId?: long(name='SimQuestionId', description='相似问ID'),
  title?: string(name='Title', description='相似问标题，字数上限-120'),
}

model UpdateSimQuestionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSimQuestionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSimQuestionResponseBody(name='body'),
}

async function updateSimQuestionWithOptions(request: UpdateSimQuestionRequest, runtime: Util.RuntimeOptions): UpdateSimQuestionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.simQuestionId)) {
    body['SimQuestionId'] = request.simQuestionId;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSimQuestion',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSimQuestion(request: UpdateSimQuestionRequest): UpdateSimQuestionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSimQuestionWithOptions(request, runtime);
}

model UpdateSolutionRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  content?: string(name='Content', description='答案内容'),
  contentType?: int32(name='ContentType', description='答案类型'),
  perspectiveCodes?: [ string ](name='PerspectiveCodes', description='视角code列表'),
  solutionId?: long(name='SolutionId', description='答案ID'),
}

model UpdateSolutionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateSolutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSolutionResponseBody(name='body'),
}

async function updateSolutionWithOptions(request: UpdateSolutionRequest, runtime: Util.RuntimeOptions): UpdateSolutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    body['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.perspectiveCodes)) {
    body['PerspectiveCodes'] = request.perspectiveCodes;
  }
  if (!Util.isUnset(request.solutionId)) {
    body['SolutionId'] = request.solutionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSolution',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSolution(request: UpdateSolutionRequest): UpdateSolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSolutionWithOptions(request, runtime);
}

model UpdateUserSayRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  userSayDefinition?: {
    content?: string(name='Content', description='用户话术'),
    intentId?: long(name='IntentId', description='意图ID'),
    slotInfos?: [ 
      {
        endIndex?: int32(name='EndIndex', description='槽位在意图话术中的结束下标（不含）'),
        slotId?: string(name='SlotId', description='划槽ID'),
        startIndex?: int32(name='StartIndex', description='槽位在意图话术中的起始下标'),
      }
    ](name='SlotInfos', description='划槽信息'),
  }(name='UserSayDefinition'),
  userSayId?: long(name='UserSayId', description='用户话术ID'),
}

model UpdateUserSayShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId', description='机器人ID'),
  userSayDefinitionShrink?: string(name='UserSayDefinition'),
  userSayId?: long(name='UserSayId', description='用户话术ID'),
}

model UpdateUserSayResponseBody = {
  requestId?: string(name='RequestId'),
  userSayId?: long(name='UserSayId'),
}

model UpdateUserSayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserSayResponseBody(name='body'),
}

async function updateUserSayWithOptions(tmpReq: UpdateUserSayRequest, runtime: Util.RuntimeOptions): UpdateUserSayResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateUserSayShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userSayDefinition)) {
    request.userSayDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userSayDefinition, 'UserSayDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userSayDefinitionShrink)) {
    query['UserSayDefinition'] = request.userSayDefinitionShrink;
  }
  if (!Util.isUnset(request.userSayId)) {
    query['UserSayId'] = request.userSayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserSay',
    version = '2022-04-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUserSay(request: UpdateUserSayRequest): UpdateUserSayResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserSayWithOptions(request, runtime);
}

