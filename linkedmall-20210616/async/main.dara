/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'linkedmall';
  @version = '2021-06-16';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'linkedmall.aliyuncs.com',
    cn-shanghai = 'linkedmall.aliyuncs.com',
    ap-northeast-1 = 'linkedmall.aliyuncs.com',
    ap-northeast-2-pop = 'linkedmall.aliyuncs.com',
    ap-south-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-2 = 'linkedmall.aliyuncs.com',
    ap-southeast-3 = 'linkedmall.aliyuncs.com',
    ap-southeast-5 = 'linkedmall.aliyuncs.com',
    cn-beijing = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-pop = 'linkedmall.aliyuncs.com',
    cn-beijing-gov-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkedmall.aliyuncs.com',
    cn-chengdu = 'linkedmall.aliyuncs.com',
    cn-edge-1 = 'linkedmall.aliyuncs.com',
    cn-fujian = 'linkedmall.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-finance = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkedmall.aliyuncs.com',
    cn-hongkong = 'linkedmall.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkedmall.aliyuncs.com',
    cn-huhehaote = 'linkedmall.aliyuncs.com',
    cn-north-2-gov-1 = 'linkedmall.aliyuncs.com',
    cn-qingdao = 'linkedmall.aliyuncs.com',
    cn-qingdao-nebula = 'linkedmall.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shanghai-inner = 'linkedmall.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen = 'linkedmall.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-inner = 'linkedmall.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkedmall.aliyuncs.com',
    cn-wuhan = 'linkedmall.aliyuncs.com',
    cn-yushanfang = 'linkedmall.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkedmall.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkedmall.aliyuncs.com',
    eu-central-1 = 'linkedmall.aliyuncs.com',
    eu-west-1 = 'linkedmall.aliyuncs.com',
    eu-west-1-oxs = 'linkedmall.aliyuncs.com',
    me-east-1 = 'linkedmall.aliyuncs.com',
    rus-west-1-pop = 'linkedmall.aliyuncs.com',
    us-east-1 = 'linkedmall.aliyuncs.com',
    us-west-1 = 'linkedmall.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AssignPermissionsToRoleRequest {
  permissionCodes?: map[string]any(name='PermissionCodes', shrink='json', position='Query'),
  permissionIds?: map[string]any(name='PermissionIds', shrink='json', position='Query'),
  roleCode?: string(name='RoleCode', position='Query'),
  roleId?: string(name='RoleId', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model AssignPermissionsToRoleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AssignPermissionsToRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssignPermissionsToRoleResponseBody(name='body'),
}

async function assignPermissionsToRole(request: AssignPermissionsToRoleRequest): AssignPermissionsToRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignPermissionsToRole', 'POST', '/', 'json', false, 'json', request);
}

model AssignResourcesToPermissionRequest {
  permissionCode?: string(name='PermissionCode', position='Query'),
  permissionId?: string(name='PermissionId', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  resourceCodes?: map[string]any(name='ResourceCodes', shrink='json', position='Query'),
  resourceIds?: map[string]any(name='ResourceIds', shrink='json', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model AssignResourcesToPermissionResponseBody = {
  code?: string(name='Code'),
  isSuccess?: boolean(name='IsSuccess'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AssignResourcesToPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssignResourcesToPermissionResponseBody(name='body'),
}

async function assignResourcesToPermission(request: AssignResourcesToPermissionRequest): AssignResourcesToPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignResourcesToPermission', 'POST', '/', 'json', false, 'json', request);
}

model CheckPermissionOfRoleRequest {
  permissionCode?: string(name='PermissionCode', position='Query'),
  permissionId?: string(name='PermissionId', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  roleCode?: string(name='RoleCode', position='Query'),
  roleId?: string(name='RoleId', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model CheckPermissionOfRoleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CheckPermissionOfRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckPermissionOfRoleResponseBody(name='body'),
}

async function checkPermissionOfRole(request: CheckPermissionOfRoleRequest): CheckPermissionOfRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckPermissionOfRole', 'GET', '/', 'json', false, 'json', request);
}

model CreatePermissionRequest {
  actionType?: string(name='ActionType', position='Query'),
  code: string(name='Code', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
  permissionItemId?: string(name='PermissionItemId', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
  type: string(name='Type', position='Query'),
  urlForApply?: string(name='UrlForApply', position='Query'),
}

model CreatePermissionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  permissionId?: string(name='PermissionId'),
  requestId?: string(name='RequestId'),
}

model CreatePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePermissionResponseBody(name='body'),
}

async function createPermission(request: CreatePermissionRequest): CreatePermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePermission', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourceRequest {
  code: string(name='Code', position='Query'),
  content?: string(name='Content', position='Query'),
  creator: string(name='Creator', position='Query'),
  description?: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  resourceAttributeList?: map[string]any(name='ResourceAttributeList', shrink='json', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
  type?: string(name='Type', position='Query'),
}

model CreateResourceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  resourceId?: string(name='ResourceId'),
}

model CreateResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourceResponseBody(name='body'),
}

async function createResource(request: CreateResourceRequest): CreateResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResource', 'POST', '/', 'json', false, 'json', request);
}

model CreateRoleRequest {
  code: string(name='Code', position='Query'),
  description?: string(name='Description', position='Query'),
  extendRoleIds?: map[string]any(name='ExtendRoleIds', shrink='json', position='Query'),
  mutexRoleIds?: map[string]any(name='MutexRoleIds', shrink='json', position='Query'),
  name: string(name='Name', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model CreateRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  roleId?: string(name='RoleId'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRole', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllPermissionOfRoleRequest {
  roleCode?: string(name='RoleCode', position='Query'),
  roleId?: string(name='RoleId', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model QueryAllPermissionOfRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  permissionList?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      permissionId?: string(name='PermissionId'),
      permissionItemList?: [ 
        {
          actionType?: string(name='ActionType'),
          permissionItemId?: string(name='PermissionItemId'),
          permissionType?: string(name='PermissionType'),
        }
      ](name='PermissionItemList'),
    }
  ](name='PermissionList'),
  requestId?: string(name='RequestId'),
}

model QueryAllPermissionOfRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAllPermissionOfRoleResponseBody(name='body'),
}

async function queryAllPermissionOfRole(request: QueryAllPermissionOfRoleRequest): QueryAllPermissionOfRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllPermissionOfRole', 'GET', '/', 'json', false, 'json', request);
}

model QueryAllResourcesWithPermissionsRequest {
  tenantId: string(name='TenantId', position='Query'),
}

model QueryAllResourcesWithPermissionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      content?: string(name='Content'),
      creator?: string(name='Creator'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      permissionOfResourceList?: [ 
        {
          code?: string(name='Code'),
          description?: string(name='Description'),
          name?: string(name='Name'),
          permissionId?: string(name='PermissionId'),
          permissionItemList?: [ 
            {
              actionType?: string(name='ActionType'),
              permissionItemId?: string(name='PermissionItemId'),
              permissionType?: string(name='PermissionType'),
            }
          ](name='PermissionItemList'),
        }
      ](name='PermissionOfResourceList'),
      resourceAttributeList?: [  map[string]any ](name='ResourceAttributeList'),
      resourceId?: string(name='ResourceId'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model QueryAllResourcesWithPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAllResourcesWithPermissionsResponseBody(name='body'),
}

async function queryAllResourcesWithPermissions(request: QueryAllResourcesWithPermissionsRequest): QueryAllResourcesWithPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllResourcesWithPermissions', 'GET', '/', 'json', false, 'json', request);
}

model QueryPermissionsRequest {
  resourceCode?: string(name='ResourceCode', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  roleCode?: string(name='RoleCode', position='Query'),
  roleId?: string(name='RoleId', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model QueryPermissionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  permissionItemList?: [ 
    {
      actionType?: string(name='ActionType'),
      permissionItemId?: string(name='PermissionItemId'),
      permissionType?: string(name='PermissionType'),
    }
  ](name='PermissionItemList'),
  permissionList?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      permissionId?: string(name='PermissionId'),
    }
  ](name='PermissionList'),
  requestId?: string(name='RequestId'),
}

model QueryPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPermissionsResponseBody(name='body'),
}

async function queryPermissions(request: QueryPermissionsRequest): QueryPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPermissions', 'GET', '/', 'json', false, 'json', request);
}

model QueryRolesByPartialRoleCodeRequest {
  partialRoleCode: string(name='PartialRoleCode', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model QueryRolesByPartialRoleCodeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  roleList?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      roleId?: string(name='RoleId'),
    }
  ](name='RoleList'),
}

model QueryRolesByPartialRoleCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRolesByPartialRoleCodeResponseBody(name='body'),
}

async function queryRolesByPartialRoleCode(request: QueryRolesByPartialRoleCodeRequest): QueryRolesByPartialRoleCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRolesByPartialRoleCode', 'GET', '/', 'json', false, 'json', request);
}

model RemovePermissionsOfRoleRequest {
  permissionCodes?: map[string]any(name='PermissionCodes', shrink='json', position='Query'),
  permissionIds?: map[string]any(name='PermissionIds', shrink='json', position='Query'),
  roleCode?: string(name='RoleCode', position='Query'),
  roleId?: string(name='RoleId', position='Query'),
  tenantId: string(name='TenantId', position='Query'),
}

model RemovePermissionsOfRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemovePermissionsOfRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemovePermissionsOfRoleResponseBody(name='body'),
}

async function removePermissionsOfRole(request: RemovePermissionsOfRoleRequest): RemovePermissionsOfRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemovePermissionsOfRole', 'POST', '/', 'json', false, 'json', request);
}

