/**
 *
 */
import Util;
import SPI;
import GatewayClient;
import OpenApi;
import OpenApiUtil;

extends OpenApi;

type @client = SPI

init(config: OpenApi.Config){
  super(config);
  @client = new GatewayClient();
  @spi = @client;
  @signatureAlgorithm = 'v2';
  @endpointRule = '';
  }

model AccountLinkInfo {
  authenticationType?: string(name='authentication_type'),
  createdAt?: long(name='created_at'),
  displayName?: string(name='display_name'),
  domainId?: string(name='domain_id'),
  extra?: string(name='extra'),
  identity?: string(name='identity'),
  userId?: string(name='user_id'),
}

model Activity {
  activityId?: string(name='activity_id'),
  device?: string(name='device'),
  driveId?: string(name='drive_id'),
  eventType?: int32(name='event_type'),
  latestEventTime?: string(name='latest_event_time'),
  resourceCategory?: int32(name='resource_category'),
  resourceList?: [  map[string]any ](name='resource_list'),
  totalResourceCount?: long(name='total_resource_count'),
  userId?: string(name='user_id'),
}

model Address {
  city?: string(name='city'),
  country?: string(name='country'),
  district?: string(name='district'),
  province?: string(name='province'),
  township?: string(name='township'),
}

model AddressGroup {
  addressDetail?: Address(name='address_detail'),
  count?: long(name='count'),
  coverFileId?: string(name='cover_file_id'),
  coverUrl?: string(name='cover_url'),
  location?: string(name='location'),
  name?: string(name='name'),
}

model App {
  appId?: string(name='app_id'),
  appName?: string(name='app_name'),
  appSecret?: string(name='app_secret'),
  createdAt?: string(name='created_at'),
  description?: string(name='description'),
  logo?: string(name='logo'),
  provider?: string(name='provider'),
  redirectUri?: string(name='redirect_uri'),
  scope?: [ string ](name='scope'),
  stage?: string(name='stage'),
  type?: string(name='type'),
  updatedAt?: string(name='updated_at'),
}

model AppAccessStrategy {
  effect?: string(name='effect'),
  exceptAppIdList?: [ string ](name='except_app_id_list'),
}

model AudioPreviewPlayInfo {
  meta?: {
    duration?: double(name='duration'),
  }(name='meta'),
  offlineAudioList?: [ 
    {
      status?: string(name='status'),
      templateId?: string(name='template_id'),
      url?: string(name='url'),
    }
  ](name='offline_audio_list'),
}

model BenefitPkgDeliveryInfo {
  amount?: long(name='amount'),
  createdAt?: string(name='created_at'),
  expireTime?: string(name='expire_time'),
  isPermanent?: boolean(name='is_permanent'),
}

model CdnFileDownloadCallbackInfo {
  bucket?: string(name='bucket', example='ccp-bj1-bj-1234'),
  domainId?: string(name='domain_id'),
  driveId?: string(name='drive_id'),
  expire?: long(name='expire'),
  fileId?: string(name='file_id'),
  object?: string(name='object'),
  token?: string(name='token', example='md5.Sum([]byte(fmt.Sprintf("%v%v%v%v%v%v...%v", 		req.Object, req.Range, req.DomainID, req.DriveID, req.UserID, req.FileID, req.Expire)))'),
  userId?: string(name='user_id'),
}

model Condition {
  intEquals?: [ long ](name='int_equals'),
  intNotEquals?: [ long ](name='int_not_equals'),
  stringEquals?: [ string ](name='string_equals'),
  stringNotEquals?: [ string ](name='string_not_equals'),
}

model CsiCondition {
  fileDataPunish?: Condition(name='file_data_punish'),
}

model Domain {
  createdAt?: string(name='created_at'),
  description?: string(name='description'),
  domainId?: string(name='domain_id'),
  domainName?: string(name='domain_name'),
  initDriveEnable?: boolean(name='init_drive_enable'),
  initDriveSize?: long(name='init_drive_size'),
  parentDomainId?: string(name='parent_domain_id'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sizeQuota?: long(name='size_quota'),
  sizeQuotaUsed?: long(name='size_quota_used'),
  status?: long(name='status'),
  updatedAt?: string(name='updated_at'),
  usedSize?: long(name='used_size'),
  userCountQuota?: long(name='user_count_quota'),
}

model Drive {
  createdAt?: string(name='created_at'),
  creator?: string(name='creator'),
  description?: string(name='description'),
  domainId?: string(name='domain_id'),
  driveId?: string(name='drive_id'),
  driveName?: string(name='drive_name'),
  driveType?: string(name='drive_type'),
  owner?: string(name='owner'),
  ownerType?: string(name='owner_type'),
  status?: string(name='status'),
  totalSize?: long(name='total_size'),
  usedSize?: long(name='used_size'),
}

model FaceGroup {
  createdAt?: string(name='created_at'),
  groupCoverFaceBoundary?: {
    height?: int32(name='height'),
    left?: int32(name='left'),
    top?: int32(name='top'),
    width?: int32(name='width'),
  }(name='group_cover_face_boundary'),
  groupCoverFileId?: string(name='group_cover_file_id'),
  groupCoverHeight?: long(name='group_cover_height'),
  groupCoverUrl?: string(name='group_cover_url'),
  groupCoverWidth?: long(name='group_cover_width'),
  groupId?: string(name='group_id'),
  groupName?: string(name='group_name'),
  imageCount?: long(name='image_count'),
  remarks?: string(name='remarks'),
  updatedAt?: string(name='updated_at'),
}

model FaceThumbnail {
  faceGroupId?: string(name='face_group_id', example='Cluster-e3b7fb52-22b3-44f2-9746-8c1804bd6af0'),
  faceId?: string(name='face_id', example='a9a66a86-73dd-4c95-8b79-1d8a49db5226'),
  faceThumbnail?: string(name='face_thumbnail', example='https://pds-domain.region.aliyuncs.com/QieGeH98%2F1001%2F63e5e551ee621482ab934a0687c6cda75fc07864%2F642a8a40c00f1ad379df421694713ee65170f09b?security-token=CAIS%2BgF1q6Ft5B2yfSjIr5bjHPCNnrdR8aSaSW7woVlmVd1Bt5HorDz2IHpPfHdoBe0btvU%2BlWxX6fwZlq5rR4QAXlDfNSyFeX20qFHPWZHInuDox55m4cTXNAr%2BIhr%2F29CoEIedZdjBe%2FCrRknZnytou9XTfimjWFrXWv%2Fgy%2BQQDLItUxK%2FcCBNCfpPOwJms7V6D3bKMuu3OROY6Qi5TmgQ41En1DIlt%2FXuk5DCtkqB12eXkLFF%2B97DRbG%2FdNRpMZtFVNO44fd7bKKp0lQLsUMSqv8q0fEcqGaW4o7CWQJLnzyCMvvJ9OVDFyN0aKEnH7J%2Bq%2FzxhTPrMnpkSlacGoABPMvZ8rSESUEP96Vbf%2Bk0JRg9Qb1MnaIJqWAgo8K6K0UP1CtqL2zrUtugpKKDHOYiKbq2O0S5yLUPVX5vBHqEi%2FFc7i6ZnHCMcXLJs4rKDKwRBEhovUXXlklq2q43OSVtLrXkBy9Xs1ers%2FhJhcxpNA0Vl3EWfJxa2BTylEdnLOQ%3D&x-oss-access-key-id=STS.NUVWJ9shpFfqKHAEY3YRmXTCN&x-oss-expires=1686455451&x-oss-process=image%2Fcrop%2Cx_1128%2Cy_1211%2Cw_914%2Ch_914%2Fformat%2Cjpg&x-oss-signature=jmhOz91Tww1ciMEwadDiioU7d93FDiBNr8s8mHyMqW0%3D&x-oss-signature-version=OSS2', deprecated='true'),
}

model File {
  category?: string(name='category'),
  contentHash?: string(name='content_hash'),
  contentHashName?: string(name='content_hash_name'),
  contentType?: string(name='content_type'),
  crc64Hash?: string(name='crc64_hash'),
  createdAt?: string(name='created_at'),
  description?: string(name='description'),
  domainId?: string(name='domain_id'),
  downloadUrl?: string(name='download_url'),
  driveId?: string(name='drive_id'),
  fileExtension?: string(name='file_extension'),
  fileId?: string(name='file_id'),
  hidden?: boolean(name='hidden'),
  investigationInfo?: {
    status?: long(name='status'),
    suggestion?: string(name='suggestion'),
  }(name='investigation_info'),
  labels?: [ string ](name='labels'),
  localCreatedAt?: string(name='local_created_at'),
  localModifiedAt?: string(name='local_modified_at'),
  name?: string(name='name'),
  parentFileId?: string(name='parent_file_id'),
  revisionId?: string(name='revision_id'),
  size?: long(name='size'),
  starred?: boolean(name='starred'),
  status?: string(name='status'),
  thumbnail?: string(name='thumbnail'),
  thumbnailUrls?: map[string]string(name='thumbnail_urls'),
  trashedAt?: string(name='trashed_at'),
  type?: string(name='type'),
  updatedAt?: string(name='updated_at'),
  uploadId?: string(name='upload_id'),
  userTags?: map[string]string(name='user_tags'),
}

model FileDownloadCallbackInfo {
  bucket?: string(name='bucket', example='ccp-bj1-bj-1234'),
  domainId?: string(name='domain_id'),
  driveId?: string(name='drive_id'),
  fileId?: string(name='file_id'),
  object?: string(name='object'),
  userId?: string(name='user_id'),
}

model FilePermissionMember {
  actionList?: [ string ](name='action_list'),
  disinheritSubGroup?: boolean(name='disinherit_sub_group'),
  expireTime?: long(name='expire_time'),
  identity?: Identity(name='identity'),
  roleId?: string(name='role_id'),
}

model FileStreamInfo {
  contentHash?: string(name='content_hash'),
  contentHashName?: string(name='content_hash_name'),
  contentMd5?: string(name='content_md5'),
  partInfoList?: UploadPartInfo(name='part_info_list'),
  preHash?: string(name='pre_hash'),
  proofCode?: string(name='proof_code'),
  proofVersion?: string(name='proof_version'),
  size?: long(name='size'),
}

model GetOfficeEditUrlOption {
  copy?: boolean(name='copy'),
  print?: boolean(name='print'),
  readonly?: boolean(name='readonly'),
}

model GetOfficeEditUrlWatermark {
  fillstyle?: string(name='fillstyle'),
  font?: string(name='font'),
  horizontal?: long(name='horizontal'),
  rotate?: double(name='rotate'),
  type?: int32(name='type'),
  value?: string(name='value'),
  vertical?: long(name='vertical'),
}

model GetOfficePreviewUrlOption {
  copy?: boolean(name='copy'),
  print?: boolean(name='print'),
}

model Group {
  createdAt?: long(name='created_at'),
  creator?: string(name='creator'),
  description?: string(name='description'),
  domainId?: string(name='domain_id'),
  groupId?: string(name='group_id'),
  groupName?: string(name='group_name'),
  updatedAt?: long(name='updated_at'),
}

model Identity {
  identityId?: string(name='identity_id'),
  identityType?: string(name='identity_type', example='IT_User'),
}

model IdentityToBenefitPkgMapping {
  benefitPkgComputationRule?: string(name='benefit_pkg_computation_rule'),
  benefitPkgId?: string(name='benefit_pkg_id'),
  benefitPkgName?: string(name='benefit_pkg_name'),
  benefitPkgOwnerId?: string(name='benefit_pkg_owner_id'),
  benefitPkgPriority?: long(name='benefit_pkg_priority'),
  benefitPkgType?: string(name='benefit_pkg_type'),
  createdAt?: string(name='created_at'),
  deliveryInfoList?: [
    BenefitPkgDeliveryInfo
  ](name='delivery_info_list'),
  identityId?: string(name='identity_id'),
  identityType?: string(name='identity_type'),
  updatedAt?: string(name='updated_at'),
}

model ImageMediaMetadata {
  addressLine?: string(name='address_line', example='浙江省杭州市滨江区西兴街道江陵路'),
  city?: string(name='city', example='杭州市'),
  country?: string(name='country', example='中国'),
  district?: string(name='district', example='滨江区'),
  exif?: string(name='exif', example='{"Compression":{"value":"6"},"DateTime":{"value":"2020:08:19 17:11:11"}}'),
  faces?: string(name='faces', example='[{"FaceId":"a9a66a86-73dd-4c95-8b79-1d8a49db5226","GroupId":"Cluster-e3b7fb52-22b3-44f2-9746-8c1804bd6af0","FaceConfidence":0.999,"Age":13,"AgeConfidence":4,"Gender":"female","GenderConfidence":1,"Emotion":"none","EmotionConfidence":0.672,"FaceAttributes":{"Mask":"none","MaskConfidence":0.894,"Beard":"none","BeardConfidence":0.997,"Glasses":"none","GlassesConfidence":0.999,"Mouth":"close","MouthConfidence":0.937,"Hat":"none","HatConfidence":0.998,"HeadPose":{"Pitch":10.684,"Roll":-10.707,"Yaw":-20.094},"FaceBoundary":{"Width":457,"Height":687,"Top":1324,"Left":1356}}}]', deprecated='true'),
  facesThumbnail?: [
    FaceThumbnail
  ](name='faces_thumbnail'),
  height?: long(name='height', example='1080'),
  imageQuality?: ImageQuality(name='image_quality'),
  imageTags?: [
    SystemTag
  ](name='image_tags'),
  location?: string(name='location', example='30.185453,120.218522'),
  province?: string(name='province', example='浙江省'),
  time?: string(name='time', example='2006-01-02T15:04:05.000Z07:00'),
  township?: string(name='township', example='西兴街道'),
  width?: long(name='width', example='1920'),
}

model ImageProcess {
  imageThumbnailProcess?: string(name='image_thumbnail_process'),
  officeThumbnailProcess?: string(name='office_thumbnail_process'),
  videoThumbnailProcess?: string(name='video_thumbnail_process'),
}

model ImageQuality {
  overallScore?: double(name='overall_score', example='0.736'),
}

model ImageTag {
  count?: long(name='count'),
  coverFileCategory?: string(name='cover_file_category'),
  coverFileId?: string(name='cover_file_id'),
  coverOverallScore?: float(name='cover_overall_score'),
  coverTagConfidence?: float(name='cover_tag_confidence'),
  coverUrl?: string(name='cover_url'),
  name?: string(name='name'),
}

model InvestigationInfo {
  status?: long(name='status'),
  suggestion?: string(name='suggestion'),
  videoDetail?: {
    blockFrames?: [ 
      {
        label?: string(name='label'),
        offset?: long(name='offset'),
        rate?: double(name='rate'),
      }
    ](name='block_frames'),
  }(name='video_detail'),
}

model JWTPayload {
  aud?: string(name='aud'),
  autoCreate?: boolean(name='auto_create'),
  exp?: long(name='exp'),
  iat?: long(name='iat'),
  iss?: string(name='iss'),
  jti?: string(name='jti'),
  nbf?: long(name='nbf'),
  sub?: string(name='sub'),
  subType?: string(name='sub_type'),
}

model LocationDateCluster {
  address?: Address(name='address'),
  clusterId?: string(name='cluster_id'),
  createdAt?: string(name='created_at'),
  customLabels?: map[string]string(name='custom_labels'),
  driveId?: string(name='drive_id'),
  endTime?: string(name='end_time'),
  level?: string(name='level'),
  startTime?: string(name='start_time'),
  title?: string(name='title'),
  updatedAt?: string(name='updated_at'),
}

model NameCheckResult {
  existFileId?: string(name='exist_file_id'),
  existFileType?: string(name='exist_file_type'),
}

model Revision {
  contentHash?: string(name='content_hash'),
  contentHashName?: string(name='content_hash_name'),
  crc64Hash?: string(name='crc64_hash'),
  createdAt?: string(name='created_at'),
  domainId?: string(name='domain_id'),
  downloadUrl?: string(name='download_url'),
  driveId?: string(name='drive_id'),
  fileExtension?: string(name='file_extension'),
  fileId?: string(name='file_id'),
  isLatestVersion?: boolean(name='is_latest_version'),
  keepForever?: boolean(name='keep_forever'),
  revisionDescription?: string(name='revision_description'),
  revisionId?: string(name='revision_id'),
  revisionName?: string(name='revision_name'),
  revisionVersion?: long(name='revision_version'),
  size?: long(name='size'),
  thumbnail?: string(name='thumbnail'),
  updatedAt?: string(name='updated_at'),
  url?: string(name='url'),
}

model ShareLink {
  accessCount?: long(name='access_count'),
  createdAt?: string(name='created_at'),
  creator?: string(name='creator'),
  description?: string(name='description'),
  disableDownload?: boolean(name='disable_download'),
  disablePreview?: boolean(name='disable_preview'),
  disableSave?: boolean(name='disable_save'),
  downloadCount?: long(name='download_count'),
  downloadLimit?: long(name='download_limit'),
  driveId?: string(name='drive_id'),
  expiration?: string(name='expiration'),
  expired?: boolean(name='expired'),
  fileIdList?: [ string ](name='file_id_list'),
  previewCount?: long(name='preview_count'),
  previewLimit?: long(name='preview_limit'),
  reportCount?: long(name='report_count'),
  saveCount?: long(name='save_count'),
  saveLimit?: long(name='save_limit'),
  shareAllFiles?: boolean(name='share_all_files'),
  shareId?: string(name='share_id'),
  shareName?: string(name='share_name'),
  sharePwd?: string(name='share_pwd'),
  status?: string(name='status'),
  updatedAt?: string(name='updated_at'),
  videoPreviewCount?: long(name='video_preview_count'),
}

model SimpleStreamInfo {
  contentHash?: string(name='content_hash'),
  contentHashName?: string(name='content_hash_name'),
  crc64Hash?: string(name='crc64_hash'),
  downloadUrl?: string(name='download_url'),
  size?: long(name='size'),
  thumbnail?: string(name='thumbnail'),
  url?: string(name='url'),
}

model Story {
  coverFileId?: string(name='cover_file_id'),
  coverFileThumbnailUrl?: string(name='cover_file_thumbnail_url'),
  createdAt?: string(name='created_at'),
  customLabels?: map[string]any(name='custom_labels'),
  faceGroupIds?: [ string ](name='face_group_ids'),
  storyEndTime?: string(name='story_end_time'),
  storyFileList?: [
    File
  ](name='story_file_list'),
  storyId?: string(name='story_id'),
  storyName?: string(name='story_name'),
  storyStartTime?: string(name='story_start_time'),
  storySubType?: string(name='story_sub_type'),
  storyType?: string(name='story_type'),
  updatedAt?: string(name='updated_at'),
}

model StreamUploadInfo {
  location?: string(name='location', example='cn-beijing'),
  partInfoList?: [
    UploadPartInfo
  ](name='part_info_list'),
  preRapidUpload?: boolean(name='pre_rapid_upload', example='false'),
  rapidUpload?: boolean(name='rapid_upload', example='false'),
  uploadId?: string(name='upload_id', example='abcd'),
}

model SystemTag {
  centricScore?: float(name='centric_score', example='0.877'),
  confidence?: float(name='confidence', example='0.98'),
  name?: string(name='name', example='篮球'),
  parentName?: string(name='parent_name', example='运动'),
  tagLevel?: int32(name='tag_level', example='3'),
}

model TimeRange {
  end?: string(name='end'),
  start?: string(name='start'),
}

model Token {
  accessToken?: string(name='access_token'),
  avatar?: string(name='avatar'),
  defaultDriveId?: string(name='default_drive_id'),
  deviceId?: string(name='device_id'),
  deviceName?: string(name='device_name'),
  domainId?: string(name='domain_id'),
  expireTime?: string(name='expire_time'),
  expiresIn?: long(name='expires_in'),
  isFirstLogin?: boolean(name='is_first_login'),
  nickName?: string(name='nick_name'),
  refreshToken?: string(name='refresh_token'),
  role?: string(name='role'),
  status?: string(name='status'),
  tokenType?: string(name='token_type'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
}

model UncompressedFileInfo {
  driveId?: string(name='drive_id'),
  fileId?: string(name='file_id'),
  isFolder?: boolean(name='is_folder'),
  items?: [
    UncompressedFileInfo
  ](name='items'),
  name?: string(name='name'),
  size?: long(name='size'),
  updatedAt?: long(name='updated_at'),
}

model UploadFormInfo {
  bucketName?: string(name='bucket_name'),
  objectKey?: string(name='object_key'),
  ossAccessKeyId?: string(name='oss_access_key_id'),
  ossEndPoint?: string(name='oss_end_point'),
  ossSecurityToken?: string(name='oss_security_token'),
  policy?: string(name='policy'),
  signature?: string(name='signature'),
}

model UploadPartInfo {
  etag?: string(name='etag', example='0CC175B9C0F1B6A831C399E269772661'),
  internalUploadUrl?: string(name='internal_upload_url'),
  parallelSha1Ctx?: {
    h?: [ long ](name='h'),
    partOffset?: long(name='part_offset'),
  }(name='parallel_sha1_ctx'),
  partNumber?: int32(name='part_number', example='1'),
  partSize?: long(name='part_size', example='1024'),
  uploadUrl?: string(name='upload_url'),
}

model User {
  avatar?: string(name='avatar'),
  createdAt?: long(name='created_at'),
  creator?: string(name='creator'),
  defaultDriveId?: string(name='default_drive_id'),
  description?: string(name='description'),
  domainId?: string(name='domain_id'),
  email?: string(name='email'),
  nickName?: string(name='nick_name'),
  phone?: string(name='phone'),
  role?: string(name='role'),
  status?: string(name='status'),
  updatedAt?: long(name='updated_at'),
  userData?: map[string]string(name='user_data'),
  userId?: string(name='user_id'),
  userName?: string(name='user_name'),
}

model UserTag {
  value?: string(name='Value'),
  key?: string(name='key'),
}

model VideoMediaMetadata {
  duration?: string(name='duration'),
  takenAt?: string(name='taken_at'),
}

model VideoPreviewPlayInfo {
  category?: string(name='category', example='live_transcoding'),
  liveTranscodingTaskList?: [ 
    {
      keepOriginalResolution?: boolean(name='keep_original_resolution'),
      status?: string(name='status'),
      templateId?: string(name='template_id'),
      url?: string(name='url'),
    }
  ](name='live_transcoding_task_list'),
  meta?: {
    duration?: double(name='duration'),
    height?: long(name='height'),
    width?: long(name='width'),
  }(name='meta'),
}

model VideoPreviewPlayMeta {
  category?: string(name='category', example='live_transcoding'),
  liveTranscodingTaskList?: [ 
    {
      keepOriginalResolution?: boolean(name='keep_original_resolution'),
      status?: string(name='status'),
      templateId?: string(name='template_id', example='264_720p'),
    }
  ](name='live_transcoding_task_list'),
  meta?: {
    duration?: double(name='duration', example='10'),
    height?: long(name='height', example='720'),
    width?: long(name='width', example='1280'),
  }(name='meta'),
}

model View {
  category?: string(name='category'),
  createdAt?: string(name='created_at'),
  description?: string(name='description'),
  exFieldsInfo?: map[string]any(name='ex_fields_info'),
  fileCount?: long(name='file_count'),
  name?: string(name='name'),
  owner?: string(name='owner'),
  updatedAt?: string(name='updated_at'),
  viewId?: string(name='view_id'),
}

model ViewFile {
  category?: string(name='category'),
  contentHash?: string(name='content_hash'),
  contentHashName?: string(name='content_hash_name'),
  contentType?: string(name='content_type'),
  crc64Hash?: string(name='crc64_hash'),
  createdAt?: string(name='created_at'),
  description?: string(name='description'),
  domainId?: string(name='domain_id'),
  downloadUrl?: string(name='download_url'),
  driveId?: string(name='drive_id'),
  fields?: map[string]any(name='fields'),
  fileExtension?: string(name='file_extension'),
  fileId?: string(name='file_id'),
  fileRevisionId?: string(name='file_revision_id'),
  hidden?: boolean(name='hidden'),
  investigationInfo?: {
    status?: long(name='status'),
    suggestion?: string(name='suggestion'),
  }(name='investigation_info'),
  joinedAt?: long(name='joined_at'),
  labels?: [ string ](name='labels'),
  localCreatedAt?: string(name='local_created_at'),
  localModifiedAt?: string(name='local_modified_at'),
  name?: string(name='name'),
  parentFileId?: string(name='parent_file_id'),
  revisionId?: string(name='revision_id'),
  size?: long(name='size'),
  starred?: boolean(name='starred'),
  status?: string(name='status'),
  thumbnail?: string(name='thumbnail'),
  thumbnailUrls?: map[string]string(name='thumbnail_urls'),
  trashedAt?: string(name='trashed_at'),
  type?: string(name='type'),
  updatedAt?: string(name='updated_at'),
  uploadId?: string(name='upload_id'),
  viewId?: string(name='view_id'),
}

model AddGroupMemberRequest {
  groupId?: string(name='group_id', example='3e5***2c2'),
  memberId?: string(name='member_id', example='2e4***1b1'),
  memberType?: string(name='member_type', example='user'),
}

model AddGroupMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function addGroupMemberWithOptions(request: AddGroupMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddGroupMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['group_id'] = request.groupId;
  }
  if (!Util.isUnset(request.memberId)) {
    body['member_id'] = request.memberId;
  }
  if (!Util.isUnset(request.memberType)) {
    body['member_type'] = request.memberType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddGroupMember',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/add_member`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function addGroupMember(request: AddGroupMemberRequest): AddGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addGroupMemberWithOptions(request, headers, runtime);
}

model AddStoryFilesRequest {
  driveId?: string(name='drive_id', example='1'),
  files?: [ 
    {
      fileId?: string(name='file_id', example='63e5e4340f76cb3ead5f40f68163f0f967c1a7bf'),
      revisionId?: string(name='revision_id', example='642a88dd06e49d9c0a14411ebae606f70edd9a59'),
    }
  ](name='files'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
}

model AddStoryFilesResponseBody = {
  driveId?: string(name='drive_id', example='1'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
}

model AddStoryFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddStoryFilesResponseBody(name='body'),
}

async function addStoryFilesWithOptions(request: AddStoryFilesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddStoryFilesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.files)) {
    body['files'] = request.files;
  }
  if (!Util.isUnset(request.storyId)) {
    body['story_id'] = request.storyId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddStoryFiles',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/add_story_files`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function addStoryFiles(request: AddStoryFilesRequest): AddStoryFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addStoryFilesWithOptions(request, headers, runtime);
}

model AssignRoleRequest {
  identity?: Identity(name='identity'),
  manageResourceId?: string(name='manage_resource_id', example='105***b82'),
  manageResourceType?: string(name='manage_resource_type', example='RT_Group'),
  roleId?: string(name='role_id', example='SystemGroupAdmin'),
}

model AssignRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function assignRoleWithOptions(request: AssignRoleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AssignRoleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.identity)) {
    body['identity'] = request.identity;
  }
  if (!Util.isUnset(request.manageResourceId)) {
    body['manage_resource_id'] = request.manageResourceId;
  }
  if (!Util.isUnset(request.manageResourceType)) {
    body['manage_resource_type'] = request.manageResourceType;
  }
  if (!Util.isUnset(request.roleId)) {
    body['role_id'] = request.roleId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AssignRole',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/role/assign`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function assignRole(request: AssignRoleRequest): AssignRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return assignRoleWithOptions(request, headers, runtime);
}

model AuthorizeRequest {
  clientId?: string(name='client_id', example='47eUHhrzgWBvlLWj'),
  hideConsent?: boolean(name='hide_consent', example='true'),
  loginType?: string(name='login_type', example='default'),
  redirectUri?: string(name='redirect_uri', example='https://www.aliyunpds.com/sign/callback'),
  responseType?: string(name='response_type', example='code'),
  scope?: [ string ](name='scope'),
  state?: string(name='state', example='customdata'),
}

model AuthorizeShrinkRequest {
  clientId?: string(name='client_id', example='47eUHhrzgWBvlLWj'),
  hideConsent?: boolean(name='hide_consent', example='true'),
  loginType?: string(name='login_type', example='default'),
  redirectUri?: string(name='redirect_uri', example='https://www.aliyunpds.com/sign/callback'),
  responseType?: string(name='response_type', example='code'),
  scopeShrink?: string(name='scope'),
  state?: string(name='state', example='customdata'),
}

model AuthorizeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function authorizeWithOptions(tmpReq: AuthorizeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AuthorizeResponse {
  Util.validateModel(tmpReq);
  var request = new AuthorizeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scope)) {
    request.scopeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scope, 'scope', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.clientId)) {
    query['client_id'] = request.clientId;
  }
  if (!Util.isUnset(request.hideConsent)) {
    query['hide_consent'] = request.hideConsent;
  }
  if (!Util.isUnset(request.loginType)) {
    query['login_type'] = request.loginType;
  }
  if (!Util.isUnset(request.redirectUri)) {
    query['redirect_uri'] = request.redirectUri;
  }
  if (!Util.isUnset(request.responseType)) {
    query['response_type'] = request.responseType;
  }
  if (!Util.isUnset(request.scopeShrink)) {
    query['scope'] = request.scopeShrink;
  }
  if (!Util.isUnset(request.state)) {
    query['state'] = request.state;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Authorize',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/oauth/authorize`,
    method = 'GET',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function authorize(request: AuthorizeRequest): AuthorizeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return authorizeWithOptions(request, headers, runtime);
}

model BatchRequest {
  requests?: [ 
    {
      body?: map[string]string(name='body'),
      headers?: map[string]string(name='headers'),
      id?: string(name='id', example='93433894994ad2e1'),
      method?: string(name='method', example='POST'),
      url?: string(name='url', example='/file/get'),
    }
  ](name='requests'),
  resource?: string(name='resource', example='file'),
}

model BatchResponseBody = {
  responses?: [ 
    {
      body?: map[string]string(name='body'),
      id?: string(name='id', example='93433894994ad2e1'),
      status?: int32(name='status', example='200'),
    }
  ](name='responses'),
}

model BatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchResponseBody(name='body'),
}

async function batchWithOptions(request: BatchRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.requests)) {
    body['requests'] = request.requests;
  }
  if (!Util.isUnset(request.resource)) {
    body['resource'] = request.resource;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Batch',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/batch`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function batch(request: BatchRequest): BatchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return batchWithOptions(request, headers, runtime);
}

model CancelAssignRoleRequest {
  identity?: Identity(name='identity'),
  manageResourceId?: string(name='manage_resource_id', example='105***b82'),
  manageResourceType?: string(name='manage_resource_type', example='RT_Group'),
  roleId?: string(name='role_id', example='SystemGroupAdmin'),
}

model CancelAssignRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelAssignRoleWithOptions(request: CancelAssignRoleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelAssignRoleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.identity)) {
    body['identity'] = request.identity;
  }
  if (!Util.isUnset(request.manageResourceId)) {
    body['manage_resource_id'] = request.manageResourceId;
  }
  if (!Util.isUnset(request.manageResourceType)) {
    body['manage_resource_type'] = request.manageResourceType;
  }
  if (!Util.isUnset(request.roleId)) {
    body['role_id'] = request.roleId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelAssignRole',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/role/cancel_assign`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function cancelAssignRole(request: CancelAssignRoleRequest): CancelAssignRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelAssignRoleWithOptions(request, headers, runtime);
}

model CancelShareLinkRequest {
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
}

model CancelShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function cancelShareLinkWithOptions(request: CancelShareLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelShareLinkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CancelShareLink',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/cancel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function cancelShareLink(request: CancelShareLinkRequest): CancelShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelShareLinkWithOptions(request, headers, runtime);
}

model ClearRecyclebinRequest {
  driveId?: string(name='drive_id', example='1'),
}

model ClearRecyclebinResponseBody = {
  asyncTaskId?: string(name='async_task_id', example='13ebd3a24dba4166b1527add676ef2866051b4d5dele16'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
}

model ClearRecyclebinResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearRecyclebinResponseBody(name='body'),
}

async function clearRecyclebinWithOptions(request: ClearRecyclebinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ClearRecyclebinResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ClearRecyclebin',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/recyclebin/clear`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function clearRecyclebin(request: ClearRecyclebinRequest): ClearRecyclebinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return clearRecyclebinWithOptions(request, headers, runtime);
}

model CompleteFileRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  uploadId?: string(name='upload_id', example='C9DCFE5A82644AC7A02DB74C30C934A6'),
}

model CompleteFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: File  
}

async function completeFileWithOptions(request: CompleteFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CompleteFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.uploadId)) {
    body['upload_id'] = request.uploadId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CompleteFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/complete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function completeFile(request: CompleteFileRequest): CompleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return completeFileWithOptions(request, headers, runtime);
}

model CopyFileRequest {
  autoRename?: boolean(name='auto_rename', example='true'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43c255edc4463bf3a6f5f5d317406'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  toDriveId?: string(name='to_drive_id', example='1'),
  toParentFileId?: string(name='to_parent_file_id', example='6520943DC261'),
}

model CopyFileResponseBody = {
  asyncTaskId?: string(name='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43a255edc4463bffa6f5f5d317401'),
}

model CopyFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyFileResponseBody(name='body'),
}

async function copyFileWithOptions(request: CopyFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CopyFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoRename)) {
    body['auto_rename'] = request.autoRename;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.toDriveId)) {
    body['to_drive_id'] = request.toDriveId;
  }
  if (!Util.isUnset(request.toParentFileId)) {
    body['to_parent_file_id'] = request.toParentFileId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CopyFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/copy`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function copyFile(request: CopyFileRequest): CopyFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return copyFileWithOptions(request, headers, runtime);
}

model CreateCustomizedStoryRequest {
  customLabels?: map[string]string(name='custom_labels', deprecated='true'),
  driveId?: string(name='drive_id', example='1'),
  storyCover?: {
    fileId?: string(name='file_id', example='63e5e4340f76cb3ead5f40f68163f0f967c1a7bf'),
    revisionId?: string(name='revision_id', example='642a88d4aff041ee68fd4fc89beb80e1119da343'),
  }(name='story_cover'),
  storyFiles?: [ 
    {
      fileId?: string(name='file_id', example='63e5e4340f76cb3ead5f40f68163f0f967c1a7bf'),
      revisionId?: string(name='revision_id', example='642a88d4aff041ee68fd4fc89beb80e1119da343'),
    }
  ](name='story_files'),
  storyName?: string(name='story_name', example='test_name'),
  storySubType?: string(name='story_sub_type', example='user_created'),
  storyType?: string(name='story_type', example='user_created'),
}

model CreateCustomizedStoryResponseBody = {
  driveId?: string(name='drive_id', example='1'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
}

model CreateCustomizedStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCustomizedStoryResponseBody(name='body'),
}

async function createCustomizedStoryWithOptions(request: CreateCustomizedStoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCustomizedStoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.customLabels)) {
    body['custom_labels'] = request.customLabels;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.storyCover)) {
    body['story_cover'] = request.storyCover;
  }
  if (!Util.isUnset(request.storyFiles)) {
    body['story_files'] = request.storyFiles;
  }
  if (!Util.isUnset(request.storyName)) {
    body['story_name'] = request.storyName;
  }
  if (!Util.isUnset(request.storySubType)) {
    body['story_sub_type'] = request.storySubType;
  }
  if (!Util.isUnset(request.storyType)) {
    body['story_type'] = request.storyType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomizedStory',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/create_customized_story`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createCustomizedStory(request: CreateCustomizedStoryRequest): CreateCustomizedStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCustomizedStoryWithOptions(request, headers, runtime);
}

model CreateDomainRequest {
  description?: string(name='description'),
  domainName?: string(name='domain_name'),
  initDriveEnable?: boolean(name='init_drive_enable', example='true'),
  initDriveSize?: long(name='init_drive_size', example='1073741824'),
  parentDomainId?: string(name='parent_domain_id', example='bj1'),
  sizeQuota?: long(name='size_quota', example='1099511627776'),
  userCountQuota?: long(name='user_count_quota', example='50'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Domain  
}

async function createDomainWithOptions(request: CreateDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDomainResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.domainName)) {
    body['domain_name'] = request.domainName;
  }
  if (!Util.isUnset(request.initDriveEnable)) {
    body['init_drive_enable'] = request.initDriveEnable;
  }
  if (!Util.isUnset(request.initDriveSize)) {
    body['init_drive_size'] = request.initDriveSize;
  }
  if (!Util.isUnset(request.parentDomainId)) {
    body['parent_domain_id'] = request.parentDomainId;
  }
  if (!Util.isUnset(request.sizeQuota)) {
    body['size_quota'] = request.sizeQuota;
  }
  if (!Util.isUnset(request.userCountQuota)) {
    body['user_count_quota'] = request.userCountQuota;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDomain',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/domain/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDomainWithOptions(request, headers, runtime);
}

model CreateDriveRequest {
  default?: boolean(name='default', example='true'),
  description?: string(name='description'),
  driveName?: string(name='drive_name', example='my_drive'),
  driveType?: string(name='drive_type', example='normal'),
  owner?: string(name='owner'),
  ownerType?: string(name='owner_type', example='user'),
  status?: string(name='status', example='enabled'),
  totalSize?: long(name='total_size', example='1024'),
}

model CreateDriveResponseBody = {
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
}

model CreateDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDriveResponseBody(name='body'),
}

async function createDriveWithOptions(request: CreateDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.default)) {
    body['default'] = request.default;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.driveName)) {
    body['drive_name'] = request.driveName;
  }
  if (!Util.isUnset(request.driveType)) {
    body['drive_type'] = request.driveType;
  }
  if (!Util.isUnset(request.owner)) {
    body['owner'] = request.owner;
  }
  if (!Util.isUnset(request.ownerType)) {
    body['owner_type'] = request.ownerType;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.totalSize)) {
    body['total_size'] = request.totalSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createDrive(request: CreateDriveRequest): CreateDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDriveWithOptions(request, headers, runtime);
}

model CreateFileRequest {
  checkNameMode?: string(name='check_name_mode', example='ignore'),
  contentHash?: string(name='content_hash', example='7C4A8D09CA3762AF61E59520943DC26494F8941B'),
  contentHashName?: string(name='content_hash_name', example='sha1'),
  contentType?: string(name='content_type', example='application/json'),
  description?: string(name='description', example='重要文件'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  hidden?: boolean(name='hidden', example='false'),
  imageMediaMetadata?: ImageMediaMetadata(name='image_media_metadata'),
  localCreatedAt?: string(name='local_created_at', example='2019-08-20T06:51:27.292Z'),
  localModifiedAt?: string(name='local_modified_at', example='2019-08-20T06:51:27.292Z'),
  name?: string(name='name', example='a.txt'),
  parallelUpload?: boolean(name='parallel_upload', example='true'),
  parentFileId?: string(name='parent_file_id', example='fileid1'),
  partInfoList?: [ 
    {
      contentMd5?: string(name='content_md5'),
      partNumber?: int32(name='part_number', example='1'),
    }
  ](name='part_info_list'),
  preHash?: string(name='pre_hash', example='7C4A8D09CA3762AF61E59520943DC26494F89411'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  size?: long(name='size', example='1024'),
  type?: string(name='type', example='file'),
  userTags?: [
    UserTag
  ](name='user_tags'),
  videoMediaMetadata?: VideoMediaMetadata(name='video_media_metadata'),
}

model CreateFileResponseBody = {
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  exist?: boolean(name='exist', example='false'),
  fileId?: string(name='file_id', example='fileid1'),
  fileName?: string(name='file_name', example='a.txt'),
  parentFileId?: string(name='parent_file_id', example='fileid5'),
  partInfoList?: [
    UploadPartInfo
  ](name='part_info_list'),
  rapidUpload?: boolean(name='rapid_upload', example='true'),
  status?: string(name='status', example='uploading'),
  type?: string(name='type', example='file'),
  uploadId?: string(name='upload_id', example='uploadid1'),
}

model CreateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateFileResponseBody(name='body'),
}

async function createFileWithOptions(request: CreateFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkNameMode)) {
    body['check_name_mode'] = request.checkNameMode;
  }
  if (!Util.isUnset(request.contentHash)) {
    body['content_hash'] = request.contentHash;
  }
  if (!Util.isUnset(request.contentHashName)) {
    body['content_hash_name'] = request.contentHashName;
  }
  if (!Util.isUnset(request.contentType)) {
    body['content_type'] = request.contentType;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.hidden)) {
    body['hidden'] = request.hidden;
  }
  if (!Util.isUnset(request.imageMediaMetadata)) {
    body['image_media_metadata'] = request.imageMediaMetadata;
  }
  if (!Util.isUnset(request.localCreatedAt)) {
    body['local_created_at'] = request.localCreatedAt;
  }
  if (!Util.isUnset(request.localModifiedAt)) {
    body['local_modified_at'] = request.localModifiedAt;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.parallelUpload)) {
    body['parallel_upload'] = request.parallelUpload;
  }
  if (!Util.isUnset(request.parentFileId)) {
    body['parent_file_id'] = request.parentFileId;
  }
  if (!Util.isUnset(request.partInfoList)) {
    body['part_info_list'] = request.partInfoList;
  }
  if (!Util.isUnset(request.preHash)) {
    body['pre_hash'] = request.preHash;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.size)) {
    body['size'] = request.size;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.userTags)) {
    body['user_tags'] = request.userTags;
  }
  if (!Util.isUnset(request.videoMediaMetadata)) {
    body['video_media_metadata'] = request.videoMediaMetadata;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createFile(request: CreateFileRequest): CreateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createFileWithOptions(request, headers, runtime);
}

model CreateGroupRequest {
  description?: string(name='description'),
  groupName?: string(name='group_name'),
  isRoot?: boolean(name='is_root', example='false'),
  parentGroupId?: string(name='parent_group_id', example='2e43ec8427dd45f19431b7504649a1b3'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Group  
}

async function createGroupWithOptions(request: CreateGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    body['group_name'] = request.groupName;
  }
  if (!Util.isUnset(request.isRoot)) {
    body['is_root'] = request.isRoot;
  }
  if (!Util.isUnset(request.parentGroupId)) {
    body['parent_group_id'] = request.parentGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateGroup',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createGroupWithOptions(request, headers, runtime);
}

model CreateIdentityToBenefitPkgMappingRequest {
  amount?: long(name='amount', example='1'),
  benefitPkgId?: string(name='benefit_pkg_id', example='40cb7794c9294'),
  expireTime?: long(name='expire_time', example='1633167071000'),
  identityId?: string(name='identity_id', example='user123'),
  identityType?: string(name='identity_type', example='user'),
}

model CreateIdentityToBenefitPkgMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function createIdentityToBenefitPkgMappingWithOptions(request: CreateIdentityToBenefitPkgMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateIdentityToBenefitPkgMappingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.amount)) {
    body['amount'] = request.amount;
  }
  if (!Util.isUnset(request.benefitPkgId)) {
    body['benefit_pkg_id'] = request.benefitPkgId;
  }
  if (!Util.isUnset(request.expireTime)) {
    body['expire_time'] = request.expireTime;
  }
  if (!Util.isUnset(request.identityId)) {
    body['identity_id'] = request.identityId;
  }
  if (!Util.isUnset(request.identityType)) {
    body['identity_type'] = request.identityType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateIdentityToBenefitPkgMapping',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/benefit/identity_to_benefit_pkg_mapping/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createIdentityToBenefitPkgMapping(request: CreateIdentityToBenefitPkgMappingRequest): CreateIdentityToBenefitPkgMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createIdentityToBenefitPkgMappingWithOptions(request, headers, runtime);
}

model CreateShareLinkRequest {
  description?: string(name='description'),
  disableDownload?: boolean(name='disable_download', example='false'),
  disablePreview?: boolean(name='disable_preview', example='false'),
  disableSave?: boolean(name='disable_save', example='false'),
  downloadLimit?: long(name='download_limit', example='100'),
  driveId?: string(name='drive_id', example='1'),
  expiration?: string(name='expiration', example='2020-06-28T11:33:00.000+08:00'),
  fileIdList?: [ string ](name='file_id_list', example='["520b217f13adf4fc24f2191991b1664ce045b393"]'),
  officeEditable?: boolean(name='office_editable'),
  previewLimit?: long(name='preview_limit', example='100'),
  saveLimit?: long(name='save_limit', example='100'),
  shareAllFiles?: boolean(name='share_all_files', example='true'),
  shareName?: string(name='share_name'),
  sharePwd?: string(name='share_pwd', example='abcF123x'),
  userId?: string(name='user_id', example='u123'),
}

model CreateShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShareLink  
}

async function createShareLinkWithOptions(request: CreateShareLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateShareLinkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.disableDownload)) {
    body['disable_download'] = request.disableDownload;
  }
  if (!Util.isUnset(request.disablePreview)) {
    body['disable_preview'] = request.disablePreview;
  }
  if (!Util.isUnset(request.disableSave)) {
    body['disable_save'] = request.disableSave;
  }
  if (!Util.isUnset(request.downloadLimit)) {
    body['download_limit'] = request.downloadLimit;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.expiration)) {
    body['expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.fileIdList)) {
    body['file_id_list'] = request.fileIdList;
  }
  if (!Util.isUnset(request.officeEditable)) {
    body['office_editable'] = request.officeEditable;
  }
  if (!Util.isUnset(request.previewLimit)) {
    body['preview_limit'] = request.previewLimit;
  }
  if (!Util.isUnset(request.saveLimit)) {
    body['save_limit'] = request.saveLimit;
  }
  if (!Util.isUnset(request.shareAllFiles)) {
    body['share_all_files'] = request.shareAllFiles;
  }
  if (!Util.isUnset(request.shareName)) {
    body['share_name'] = request.shareName;
  }
  if (!Util.isUnset(request.sharePwd)) {
    body['share_pwd'] = request.sharePwd;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateShareLink',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createShareLink(request: CreateShareLinkRequest): CreateShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createShareLinkWithOptions(request, headers, runtime);
}

model CreateSimilarImageClusterTaskRequest {
  driveId?: string(name='drive_id', example='123'),
}

model CreateSimilarImageClusterTaskResponseBody = {
  taskId?: string(name='task_id', example='i:SimilarImageClustering-b67d53e7-2fe8-460f-9b95-1e93636923eb'),
}

model CreateSimilarImageClusterTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimilarImageClusterTaskResponseBody(name='body'),
}

async function createSimilarImageClusterTaskWithOptions(request: CreateSimilarImageClusterTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateSimilarImageClusterTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSimilarImageClusterTask',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/create_similar_image_cluster_task`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createSimilarImageClusterTask(request: CreateSimilarImageClusterTaskRequest): CreateSimilarImageClusterTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createSimilarImageClusterTaskWithOptions(request, headers, runtime);
}

model CreateStoryRequest {
  address?: Address(name='address'),
  customLabels?: map[string]string(name='custom_labels', deprecated='true'),
  driveId?: string(name='drive_id', example='1'),
  maxImageCount?: long(name='max_image_count', example='30'),
  minImageCount?: long(name='min_image_count', example='1'),
  storyEndTime?: string(name='story_end_time', example='2022-12-30T16:00:00Z'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
  storyName?: string(name='story_name'),
  storyStartTime?: string(name='story_start_time', example='2016-12-30T16:00:00Z'),
  storySubType?: string(name='story_sub_type', example='Food'),
  storyType?: string(name='story_type', example='TagMemory'),
}

model CreateStoryResponseBody = {
  driveId?: string(name='drive_id', example='1'),
}

model CreateStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStoryResponseBody(name='body'),
}

async function createStoryWithOptions(request: CreateStoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateStoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.address)) {
    body['address'] = request.address;
  }
  if (!Util.isUnset(request.customLabels)) {
    body['custom_labels'] = request.customLabels;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.maxImageCount)) {
    body['max_image_count'] = request.maxImageCount;
  }
  if (!Util.isUnset(request.minImageCount)) {
    body['min_image_count'] = request.minImageCount;
  }
  if (!Util.isUnset(request.storyEndTime)) {
    body['story_end_time'] = request.storyEndTime;
  }
  if (!Util.isUnset(request.storyId)) {
    body['story_id'] = request.storyId;
  }
  if (!Util.isUnset(request.storyName)) {
    body['story_name'] = request.storyName;
  }
  if (!Util.isUnset(request.storyStartTime)) {
    body['story_start_time'] = request.storyStartTime;
  }
  if (!Util.isUnset(request.storySubType)) {
    body['story_sub_type'] = request.storySubType;
  }
  if (!Util.isUnset(request.storyType)) {
    body['story_type'] = request.storyType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateStory',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/create_story`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createStory(request: CreateStoryRequest): CreateStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createStoryWithOptions(request, headers, runtime);
}

model CreateUserRequest {
  avatar?: string(name='avatar', example='http://a.b.c/pds.jpg'),
  description?: string(name='description', example='VIP用户'),
  email?: string(name='email', example='123@pds.com'),
  groupInfoList?: [ 
    {
      groupId?: string(name='group_id', example='g123'),
    }
  ](name='group_info_list'),
  nickName?: string(name='nick_name', example='pdsuer'),
  phone?: string(name='phone', example='13900001111'),
  role?: string(name='role', example='user'),
  status?: string(name='status', example='enabled'),
  userData?: string(name='user_data', example='md'),
  userId?: string(name='user_id', example='pdsuserid1'),
  userName?: string(name='user_name', example='pdsusername'),
}

model CreateUserResponseBody = {
  avatar?: string(name='avatar', example='http://aa.com/1.jpg'),
  createdAt?: long(name='created_at', example='1639762579768'),
  creator?: string(name='creator', example='user1'),
  defaultDriveId?: string(name='default_drive_id', example='1'),
  description?: string(name='description', example='vipuser'),
  domainId?: string(name='domain_id', example='bj1'),
  email?: string(name='email', example='a@a.com'),
  nickName?: string(name='nick_name', example='001'),
  phone?: string(name='phone', example='13900001111'),
  role?: string(name='role', example='admin'),
  status?: string(name='status', example='enabled'),
  updatedAt?: long(name='updated_at', example='1639762579768'),
  userData?: map[string]string(name='user_data'),
  userId?: string(name='user_id', example='dingding_abc001'),
  userName?: string(name='user_name', example='pds'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserResponseBody(name='body'),
}

async function createUserWithOptions(request: CreateUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.avatar)) {
    body['avatar'] = request.avatar;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.groupInfoList)) {
    body['group_info_list'] = request.groupInfoList;
  }
  if (!Util.isUnset(request.nickName)) {
    body['nick_name'] = request.nickName;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.role)) {
    body['role'] = request.role;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateUser',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/user/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createUserWithOptions(request, headers, runtime);
}

model CsiGetFileInfoRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  urlExpireSec?: int32(name='url_expire_sec', example='100'),
}

model CsiGetFileInfoResponseBody = {
  investigationInfo?: InvestigationInfo(name='investigation_info'),
  url?: string(name='url', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
}

model CsiGetFileInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CsiGetFileInfoResponseBody(name='body'),
}

async function csiGetFileInfoWithOptions(request: CsiGetFileInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CsiGetFileInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.urlExpireSec)) {
    body['url_expire_sec'] = request.urlExpireSec;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CsiGetFileInfo',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/csi/get_file_info`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function csiGetFileInfo(request: CsiGetFileInfoRequest): CsiGetFileInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return csiGetFileInfoWithOptions(request, headers, runtime);
}

model DeleteDomainRequest {
  domainId?: string(name='domain_id', description='domain id', example='bj1'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainId)) {
    body['domain_id'] = request.domainId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/domain/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDomainWithOptions(request, headers, runtime);
}

model DeleteDriveRequest {
  driveId?: string(name='drive_id', example='1'),
}

model DeleteDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteDriveWithOptions(request: DeleteDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteDrive(request: DeleteDriveRequest): DeleteDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteDriveWithOptions(request, headers, runtime);
}

model DeleteFileRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
}

model DeleteFileResponseBody = {
  asyncTaskId?: string(name='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
}

model DeleteFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFileResponseBody(name='body'),
}

async function deleteFileWithOptions(request: DeleteFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteFileWithOptions(request, headers, runtime);
}

model DeleteGroupRequest {
  groupId?: string(name='group_id', example='g123'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteGroupWithOptions(request: DeleteGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['group_id'] = request.groupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroup',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteGroupWithOptions(request, headers, runtime);
}

model DeleteRevisionRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  revisionId?: string(name='revision_id', example='40CB7794C929'),
}

model DeleteRevisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteRevisionWithOptions(request: DeleteRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRevisionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.revisionId)) {
    body['revision_id'] = request.revisionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRevision',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/revision/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteRevision(request: DeleteRevisionRequest): DeleteRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRevisionWithOptions(request, headers, runtime);
}

model DeleteStoryRequest {
  driveId?: string(name='drive_id', example='1'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
}

model DeleteStoryResponseBody = {
  driveId?: string(name='drive_id', example='1'),
}

model DeleteStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStoryResponseBody(name='body'),
}

async function deleteStoryWithOptions(request: DeleteStoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteStoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.storyId)) {
    body['story_id'] = request.storyId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStory',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/delete_story`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteStory(request: DeleteStoryRequest): DeleteStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteStoryWithOptions(request, headers, runtime);
}

model DeleteUserRequest {
  userId?: string(name='user_id', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUser',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/user/delete`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteUserWithOptions(request, headers, runtime);
}

model DeltaGetLastCursorRequest {
  driveId?: string(name='drive_id', example='1'),
  syncRootId?: string(name='sync_root_id', example='622fb09598ae66777c7040109a16f49381f6abe1'),
}

model DeltaGetLastCursorResponseBody = {
  cursor?: string(name='cursor', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model DeltaGetLastCursorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeltaGetLastCursorResponseBody(name='body'),
}

async function deltaGetLastCursorWithOptions(request: DeltaGetLastCursorRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeltaGetLastCursorResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.syncRootId)) {
    body['sync_root_id'] = request.syncRootId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeltaGetLastCursor',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/get_last_cursor`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function deltaGetLastCursor(request: DeltaGetLastCursorRequest): DeltaGetLastCursorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deltaGetLastCursorWithOptions(request, headers, runtime);
}

model DownloadFileRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  imageThumbnailProcess?: string(name='image_thumbnail_process', example='image/resize,m_fill,h_128,w_128,limit_0'),
  officeThumbnailProcess?: string(name='office_thumbnail_process', example='image/resize,w_200'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  videoThumbnailProcess?: string(name='video_thumbnail_process', example='video/snapshot,t_7000,f_jpg,w_800,h_600,m_fast'),
}

model DownloadFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function downloadFileWithOptions(request: DownloadFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DownloadFileResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    query['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    query['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.imageThumbnailProcess)) {
    query['image_thumbnail_process'] = request.imageThumbnailProcess;
  }
  if (!Util.isUnset(request.officeThumbnailProcess)) {
    query['office_thumbnail_process'] = request.officeThumbnailProcess;
  }
  if (!Util.isUnset(request.shareId)) {
    query['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.videoThumbnailProcess)) {
    query['video_thumbnail_process'] = request.videoThumbnailProcess;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DownloadFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/download`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'binary',
  };
  return execute(params, req, runtime);
}

async function downloadFile(request: DownloadFileRequest): DownloadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return downloadFileWithOptions(request, headers, runtime);
}

model FileAddPermissionRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43c255edc4463bf3a6f5f5d317406'),
  memberList?: [
    FilePermissionMember
  ](name='member_list'),
}

model FileAddPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function fileAddPermissionWithOptions(request: FileAddPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FileAddPermissionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.memberList)) {
    body['member_list'] = request.memberList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FileAddPermission',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/add_permission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function fileAddPermission(request: FileAddPermissionRequest): FileAddPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fileAddPermissionWithOptions(request, headers, runtime);
}

model FileDeleteUserTagsRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  keyList?: [ string ](name='key_list'),
}

model FileDeleteUserTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function fileDeleteUserTagsWithOptions(request: FileDeleteUserTagsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FileDeleteUserTagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.keyList)) {
    body['key_list'] = request.keyList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FileDeleteUserTags',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/delete_usertags`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function fileDeleteUserTags(request: FileDeleteUserTagsRequest): FileDeleteUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fileDeleteUserTagsWithOptions(request, headers, runtime);
}

model FileListPermissionRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43a255edc4463bffa6f5f5d317401'),
}

model FileListPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    FilePermissionMember
  ](name='body'),
}

async function fileListPermissionWithOptions(request: FileListPermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FileListPermissionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FileListPermission',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/list_permission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return execute(params, req, runtime);
}

async function fileListPermission(request: FileListPermissionRequest): FileListPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fileListPermissionWithOptions(request, headers, runtime);
}

model FilePutUserTagsRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  userTags?: [ 
    {
      key?: string(name='key', example='tag'),
      value?: string(name='value', example='value'),
    }
  ](name='user_tags'),
}

model FilePutUserTagsResponseBody = {
  fileId?: string(name='file_id', example='9520943DC264'),
}

model FilePutUserTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FilePutUserTagsResponseBody(name='body'),
}

async function filePutUserTagsWithOptions(request: FilePutUserTagsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FilePutUserTagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.userTags)) {
    body['user_tags'] = request.userTags;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FilePutUserTags',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/put_usertags`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function filePutUserTags(request: FilePutUserTagsRequest): FilePutUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return filePutUserTagsWithOptions(request, headers, runtime);
}

model FileRemovePermissionRequest {
  driveId?: string(name='drive_id', description='空间id', example='1'),
  fileId?: string(name='file_id', description='文件id', example='4221bf6e6ab43c255edc4463bf3a6f5f5d317406'),
  memberList?: [ 
    {
      identity?: Identity(name='identity', description='可授权对象，表示一个用户或者一个群组'),
      roleId?: string(name='role_id', description='目前支持两种方式设置权限，一种是通过指定角色设置权限，另一种是自定义操作权限，此字段用于指定角色设置权限，与action\\_list互斥，当两个字段同时设置时，以此字段为准

目前支持：

SystemFileOwner（文件协同）

SystemFileDownloader（下载者）

SystemFileEditor（编辑者）

SystemFileEditorWithoutDelete（无删除编辑者）

SystemFileEditorWithoutShareLink（无分享编辑者）

SystemFileMetaViewer（可见列表）

SystemFileUploader（上传者）、SystemFileUploaderAndDownloader（上传/下载者）

SystemFileDownloaderWithShareLink（下载/分享者）

SystemFileUploaderAndDownloaderWithShareLink（上传/下载/分享者）

SystemFileUploaderAndViewer（预览/上传者）

SystemFileUploaderWithShareLink（上传/分享者）

SystemFileViewer（预览者）', example='SystemFileDownloader'),
    }
  ](name='member_list', description='共享的用户对象集合'),
}

model FileRemovePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function fileRemovePermissionWithOptions(request: FileRemovePermissionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FileRemovePermissionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.memberList)) {
    body['member_list'] = request.memberList;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'FileRemovePermission',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/remove_permission`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function fileRemovePermission(request: FileRemovePermissionRequest): FileRemovePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fileRemovePermissionWithOptions(request, headers, runtime);
}

model GetAsyncTaskRequest {
  asyncTaskId?: string(name='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
}

model GetAsyncTaskResponseBody = {
  asyncTaskId?: string(name='async_task_id', example='000e89fb-cf8f-11e9-8ab4-b6e980803a3b'),
  category?: string(name='category'),
  consumedProcess?: long(name='consumed_process', example='100'),
  createdAt?: string(name='created_at'),
  errCode?: long(name='err_code', example='InternalError'),
  errorCode?: string(name='error_code'),
  errorMessage?: string(name='error_message'),
  finishedAt?: string(name='finished_at'),
  message?: string(name='message', example='The request has been failed due to some unknown error. Please try again later.'),
  startedAt?: string(name='started_at'),
  state?: string(name='state'),
  status?: string(name='status', example='Succeed'),
  totalProcess?: long(name='total_process', example='1000'),
  uncompressFileList?: [
    UncompressedFileInfo
  ](name='uncompress_file_list'),
  url?: string(name='url', example='https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx'),
}

model GetAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncTaskResponseBody(name='body'),
}

async function getAsyncTaskWithOptions(request: GetAsyncTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAsyncTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.asyncTaskId)) {
    body['async_task_id'] = request.asyncTaskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncTask',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/async_task/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getAsyncTask(request: GetAsyncTaskRequest): GetAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAsyncTaskWithOptions(request, headers, runtime);
}

model GetDefaultDriveRequest {
  userId?: string(name='user_id', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
}

model GetDefaultDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Drive  
}

async function getDefaultDriveWithOptions(request: GetDefaultDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDefaultDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDefaultDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/get_default_drive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getDefaultDrive(request: GetDefaultDriveRequest): GetDefaultDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDefaultDriveWithOptions(request, headers, runtime);
}

model GetDomainRequest {
  domainId?: string(name='domain_id', description='domain id', example='bj1'),
  getQuotaUsed?: boolean(name='get_quota_used', example='true'),
}

model GetDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Domain  
}

async function getDomainWithOptions(request: GetDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDomainResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.domainId)) {
    body['domain_id'] = request.domainId;
  }
  if (!Util.isUnset(request.getQuotaUsed)) {
    body['get_quota_used'] = request.getQuotaUsed;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDomain',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/domain/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getDomain(request: GetDomainRequest): GetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDomainWithOptions(request, headers, runtime);
}

model GetDownloadUrlRequest {
  driveId?: string(name='drive_id', example='1'),
  expireSec?: int32(name='expire_sec', example='100'),
  fileId?: string(name='file_id', example='9520943DC264'),
  fileName?: string(name='file_name', example='1.txt'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
}

model GetDownloadUrlResponseBody = {
  cdnUrl?: string(name='cdn_url', example='https://data-cdn.aliyunpds.com/hz22%2F5d79219b0aa9a7c995a94a96993ba3205cd91c5a%2F5d79219bf3261a5d38744da0834ed489b677a27a?Expires=xxxOSSAccessKeyId=xxx&Signature=xxx&response-content-disposition=attachment%3Bfilename%3DtBiZAoJPC2c8b13450eda4292b7f5f8010618e078.txt'),
  contentHash?: string(name='content_hash', example='EA4942AA8761213890A5C386F88E6464D2C31CA1'),
  contentHashName?: string(name='content_hash_name', example='sha1'),
  crc64Hash?: string(name='crc64_hash', example='5498595269368962671'),
  expiration?: string(name='expiration', example='2022-01-02T15:04:05.999Z07:00'),
  internalUrl?: string(name='internal_url', example='https://data-vpc.aliyunpds.com/hz22%2F5d79219b0aa9a7c995a94a96993ba3205cd91c5a%2F5d79219bf3261a5d38744da0834ed489b677a27a?Expires=xxxOSSAccessKeyId=xxx&Signature=xxx&response-content-disposition=attachment%3Bfilename%3DtBiZAoJPC2c8b13450eda4292b7f5f8010618e078.txt'),
  size?: long(name='size', example='10'),
  url?: string(name='url', example='https://data.aliyunpds.com/hz22%2F5d79219b0aa9a7c995a94a96993ba3205cd91c5a%2F5d79219bf3261a5d38744da0834ed489b677a27a?Expires=xxxOSSAccessKeyId=xxx&Signature=xxx&response-content-disposition=attachment%3Bfilename%3DtBiZAoJPC2c8b13450eda4292b7f5f8010618e078.txt'),
}

model GetDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDownloadUrlResponseBody(name='body'),
}

async function getDownloadUrlWithOptions(request: GetDownloadUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDownloadUrlResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.expireSec)) {
    body['expire_sec'] = request.expireSec;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.fileName)) {
    body['file_name'] = request.fileName;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDownloadUrl',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/get_download_url`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getDownloadUrl(request: GetDownloadUrlRequest): GetDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDownloadUrlWithOptions(request, headers, runtime);
}

model GetDriveRequest {
  driveId?: string(name='drive_id', example='1'),
}

model GetDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Drive  
}

async function getDriveWithOptions(request: GetDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getDrive(request: GetDriveRequest): GetDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getDriveWithOptions(request, headers, runtime);
}

model GetFileRequest {
  driveId?: string(name='drive_id', example='1'),
  fields?: string(name='fields', example='*'),
  fileId?: string(name='file_id', example='9520943DC264'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  urlExpireSec?: int32(name='url_expire_sec', example='100'),
}

model GetFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: File  
}

async function getFileWithOptions(request: GetFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fields)) {
    body['fields'] = request.fields;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.urlExpireSec)) {
    body['url_expire_sec'] = request.urlExpireSec;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getFile(request: GetFileRequest): GetFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getFileWithOptions(request, headers, runtime);
}

model GetGroupRequest {
  groupId?: string(name='group_id', example='2e43ec8427dd45f19431b7504649a1b1'),
}

model GetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Group  
}

async function getGroupWithOptions(request: GetGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['group_id'] = request.groupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetGroup',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getGroup(request: GetGroupRequest): GetGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getGroupWithOptions(request, headers, runtime);
}

model GetIdentityToBenefitPkgMappingRequest {
  benefitPkgId?: string(name='benefit_pkg_id', example='40cb7794c9294'),
  identityId?: string(name='identity_id', example='user123'),
  identityType?: string(name='identity_type', example='user'),
}

model GetIdentityToBenefitPkgMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IdentityToBenefitPkgMapping  
}

async function getIdentityToBenefitPkgMappingWithOptions(request: GetIdentityToBenefitPkgMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetIdentityToBenefitPkgMappingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.benefitPkgId)) {
    body['benefit_pkg_id'] = request.benefitPkgId;
  }
  if (!Util.isUnset(request.identityId)) {
    body['identity_id'] = request.identityId;
  }
  if (!Util.isUnset(request.identityType)) {
    body['identity_type'] = request.identityType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetIdentityToBenefitPkgMapping',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/benefit/identity_to_benefit_pkg_mapping/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getIdentityToBenefitPkgMapping(request: GetIdentityToBenefitPkgMappingRequest): GetIdentityToBenefitPkgMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getIdentityToBenefitPkgMappingWithOptions(request, headers, runtime);
}

model GetLinkInfoRequest {
  extra?: string(name='extra'),
  identity?: string(name='identity', example='130***'),
  type?: string(name='type', example='mobile'),
}

model GetLinkInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AccountLinkInfo  
}

async function getLinkInfoWithOptions(request: GetLinkInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLinkInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.extra)) {
    body['extra'] = request.extra;
  }
  if (!Util.isUnset(request.identity)) {
    body['identity'] = request.identity;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLinkInfo',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/account/get_link_info`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getLinkInfo(request: GetLinkInfoRequest): GetLinkInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLinkInfoWithOptions(request, headers, runtime);
}

model GetLinkInfoByUserIdRequest {
  userId?: string(name='user_id', example='xxx'),
}

model GetLinkInfoByUserIdResponseBody = {
  items?: [
    AccountLinkInfo
  ](name='items'),
}

model GetLinkInfoByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLinkInfoByUserIdResponseBody(name='body'),
}

async function getLinkInfoByUserIdWithOptions(request: GetLinkInfoByUserIdRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetLinkInfoByUserIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetLinkInfoByUserId',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/account/get_link_info_by_user_id`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getLinkInfoByUserId(request: GetLinkInfoByUserIdRequest): GetLinkInfoByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getLinkInfoByUserIdWithOptions(request, headers, runtime);
}

model GetRevisionRequest {
  driveId?: string(name='drive_id', example='1'),
  fields?: string(name='fields', example='*'),
  fileId?: string(name='file_id', example='9520943DC264'),
  revisionId?: string(name='revision_id', example='40CB7794C929'),
  urlExpireSec?: long(name='url_expire_sec', example='900'),
}

model GetRevisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Revision  
}

async function getRevisionWithOptions(request: GetRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRevisionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fields)) {
    body['fields'] = request.fields;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.revisionId)) {
    body['revision_id'] = request.revisionId;
  }
  if (!Util.isUnset(request.urlExpireSec)) {
    body['url_expire_sec'] = request.urlExpireSec;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetRevision',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/revision/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getRevision(request: GetRevisionRequest): GetRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRevisionWithOptions(request, headers, runtime);
}

model GetShareLinkRequest {
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
}

model GetShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShareLink  
}

async function getShareLinkWithOptions(request: GetShareLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetShareLinkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShareLink',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getShareLink(request: GetShareLinkRequest): GetShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getShareLinkWithOptions(request, headers, runtime);
}

model GetShareLinkByAnonymousRequest {
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
}

model GetShareLinkByAnonymousResponseBody = {
  accessCount?: long(name='access_count', example='30'),
  avatar?: string(name='avatar', example='https://aliyunpds.com/a.jpg'),
  creatorId?: string(name='creator_id', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
  creatorName?: string(name='creator_name', example='AB***CD'),
  creatorPhone?: string(name='creator_phone', example='136****00'),
  disableDownload?: boolean(name='disable_download', example='false'),
  disablePreview?: boolean(name='disable_preview', example='false'),
  disableSave?: boolean(name='disable_save', example='false'),
  downloadCount?: long(name='download_count', example='50'),
  downloadLimit?: long(name='download_limit', example='100'),
  expiration?: string(name='expiration', example='2020-08-20T06:51:27.292Z'),
  previewCount?: long(name='preview_count', example='80'),
  previewLimit?: long(name='preview_limit', example='100'),
  reportCount?: long(name='report_count', example='0'),
  saveCount?: long(name='save_count', example='2'),
  saveDownloadLimit?: long(name='save_download_limit', example='200'),
  saveLimit?: long(name='save_limit', example='100'),
  shareName?: string(name='share_name'),
  updatedAt?: string(name='updated_at', example='2019-08-20T06:51:27.292Z'),
  videoPreviewCount?: long(name='video_preview_count', example='5'),
}

model GetShareLinkByAnonymousResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShareLinkByAnonymousResponseBody(name='body'),
}

async function getShareLinkByAnonymousWithOptions(request: GetShareLinkByAnonymousRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetShareLinkByAnonymousResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShareLinkByAnonymous',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/get_by_anonymous`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getShareLinkByAnonymous(request: GetShareLinkByAnonymousRequest): GetShareLinkByAnonymousResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getShareLinkByAnonymousWithOptions(request, headers, runtime);
}

model GetShareLinkTokenRequest {
  expireSec?: int32(name='expire_sec', example='7200'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  sharePwd?: string(name='share_pwd', example='abcF123x'),
}

model GetShareLinkTokenResponseBody = {
  expiresIn?: long(name='expires_in', example='7200'),
  shareToken?: string(name='share_token', example='eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjOWI3YTVhYTA0ZDE0YWUzODY3ZmRjODg2ZmEwMWRhNCIsImN1c3RvbUpzb24iOiJ7XCJjbGllbnRJZFwiOlwiMjVkelgzdmJZcWt0Vnh5WFwiLFwiZG9tYWluSWRcIjpcImJqMjlcIixcInNjb3BlXCI6W1wiRFJJVkUuQUxMXCIsXCJTSEFSRS5BTExcIixcIkZJTEUuQUxMXCIsXCJVU0VSLkFMTFwiLFwiVklFVy5BTExcIixcIlNUT1JBR0UuQUxMXCIsXCJTVE9SQUdFRklMRS5MSVNUXCIsXCJCQVRDSFwiLFwiT0FVVEguQUxMXCIsXCJJTUFHRS5BTExcIixcIklOVklURS5BTExcIixcIkFDQ09VTlQuQUxMXCJdLFwicm9sZVwiOlwidXNlclwiLFwicmVmXCI6XCJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vXCIsXCJkZXZpY2VfaWRcIjpcImIyODIwNWU1YzU5NzRjY2JiODI3MDNiNjhkYjhjNDUxXCJ9IiwiZXhwIjoxNjQ4NjE0NDkzLCJpYXQiOjE2NDg2MDcyMzN9.d3HVLvv_LFw2QhPrhvjH_kICWQJX9sKKt7NjQEqI_xE2JO_b7D8rPsFTZz93PLvZ7MhCmudTjGImUpd-ehFnI4Go-1S7BGaKaHFILvP-sWy18Wpikowjxx9mSbzBM_cO6D1LI-kyYhXKWHgVdADfVIPniTDA7-ffhUpi7cAebEs'),
}

model GetShareLinkTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShareLinkTokenResponseBody(name='body'),
}

async function getShareLinkTokenWithOptions(request: GetShareLinkTokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetShareLinkTokenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.expireSec)) {
    body['expire_sec'] = request.expireSec;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.sharePwd)) {
    body['share_pwd'] = request.sharePwd;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShareLinkToken',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/get_share_token`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getShareLinkToken(request: GetShareLinkTokenRequest): GetShareLinkTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getShareLinkTokenWithOptions(request, headers, runtime);
}

model GetStoryRequest {
  coverImageThumbnailProcess?: string(name='cover_image_thumbnail_process', example='image/resize,m_fill,h_128,w_128,limit_0/format,jpg', deprecated='true'),
  coverVideoThumbnailProcess?: string(name='cover_video_thumbnail_process', example='video/snapshot,t_1000,f_jpg,w_0,h_0,m_fast,ar_auto', deprecated='true'),
  driveId?: string(name='drive_id', example='1'),
  imageThumbnailProcess?: string(name='image_thumbnail_process', example='image/resize,m_fill,h_128,w_128,limit_0/format,jpg', deprecated='true'),
  imageUrlProcess?: string(name='image_url_process', example='image/resize,m_fill,h_128,w_128,limit_0/format,jpg', deprecated='true'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
  urlExpireSec?: long(name='url_expire_sec', example='900', deprecated='true'),
  videoThumbnailProcess?: string(name='video_thumbnail_process', example='video/snapshot,t_1000,f_jpg,w_0,h_0,m_fast,ar_auto', deprecated='true'),
}

model GetStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Story  
}

async function getStoryWithOptions(request: GetStoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetStoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverImageThumbnailProcess)) {
    body['cover_image_thumbnail_process'] = request.coverImageThumbnailProcess;
  }
  if (!Util.isUnset(request.coverVideoThumbnailProcess)) {
    body['cover_video_thumbnail_process'] = request.coverVideoThumbnailProcess;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.imageThumbnailProcess)) {
    body['image_thumbnail_process'] = request.imageThumbnailProcess;
  }
  if (!Util.isUnset(request.imageUrlProcess)) {
    body['image_url_process'] = request.imageUrlProcess;
  }
  if (!Util.isUnset(request.storyId)) {
    body['story_id'] = request.storyId;
  }
  if (!Util.isUnset(request.urlExpireSec)) {
    body['url_expire_sec'] = request.urlExpireSec;
  }
  if (!Util.isUnset(request.videoThumbnailProcess)) {
    body['video_thumbnail_process'] = request.videoThumbnailProcess;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStory',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/get_story`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getStory(request: GetStoryRequest): GetStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getStoryWithOptions(request, headers, runtime);
}

model GetTaskStatusRequest {
  driveId?: string(name='drive_id', example='1'),
  taskId?: string(name='task_id', example='i:SimilarImageClustering-b67d53e7-2fe8-460f-9b95-1e93636923eb'),
}

model GetTaskStatusResponseBody = {
  status?: string(name='status', example='running'),
}

model GetTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskStatusResponseBody(name='body'),
}

async function getTaskStatusWithOptions(request: GetTaskStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.taskId)) {
    body['task_id'] = request.taskId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskStatus',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/get_task_status`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskStatusWithOptions(request, headers, runtime);
}

model GetUploadUrlRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d'),
  partInfoList?: [ 
    {
      contentMd5?: string(name='content_md5'),
      contentType?: string(name='content_type'),
      parallelSha1Ctx?: {
        h?: [ long ](name='h'),
        partOffset?: long(name='part_offset', example='10240'),
      }(name='parallel_sha1_ctx'),
      partNumber?: int32(name='part_number', example='1'),
    }
  ](name='part_info_list'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  uploadId?: string(name='upload_id', example='10166D06127B413BA1EC8ABB1144D111'),
}

model GetUploadUrlResponseBody = {
  createAt?: string(name='create_at', example='2019-09-11T16:34:36.977Z'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='5d5b846942cf94fa72324c14a4bda34e81da635d'),
  partInfoList?: [
    UploadPartInfo
  ](name='part_info_list'),
  uploadId?: string(name='upload_id', example='10166D06127B413BA1EC8ABB1144D111'),
}

model GetUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUploadUrlResponseBody(name='body'),
}

async function getUploadUrlWithOptions(request: GetUploadUrlRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUploadUrlResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.partInfoList)) {
    body['part_info_list'] = request.partInfoList;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.uploadId)) {
    body['upload_id'] = request.uploadId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUploadUrl',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/get_upload_url`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getUploadUrl(request: GetUploadUrlRequest): GetUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUploadUrlWithOptions(request, headers, runtime);
}

model GetUserRequest {
  userId?: string(name='user_id', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: User  
}

async function getUserWithOptions(request: GetUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/user/get`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getUserWithOptions(request, headers, runtime);
}

model GetVideoPreviewPlayInfoRequest {
  category?: string(name='category', example='live_transcoding'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  getWithoutUrl?: boolean(name='get_without_url', example='true'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  templateId?: string(name='template_id', example='264_480p'),
  urlExpireSec?: long(name='url_expire_sec', description='url超时时间，单位：秒。
默认15分钟，最大4小时。', example='3600'),
}

model GetVideoPreviewPlayInfoResponseBody = {
  code?: string(name='code'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='fileid1'),
  message?: string(name='message'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  videoPreviewPlayInfo?: VideoPreviewPlayInfo(name='video_preview_play_info'),
}

model GetVideoPreviewPlayInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVideoPreviewPlayInfoResponseBody(name='body'),
}

async function getVideoPreviewPlayInfoWithOptions(request: GetVideoPreviewPlayInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetVideoPreviewPlayInfoResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['category'] = request.category;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.getWithoutUrl)) {
    body['get_without_url'] = request.getWithoutUrl;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['template_id'] = request.templateId;
  }
  if (!Util.isUnset(request.urlExpireSec)) {
    body['url_expire_sec'] = request.urlExpireSec;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetVideoPreviewPlayInfo',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/get_video_preview_play_info`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getVideoPreviewPlayInfo(request: GetVideoPreviewPlayInfoRequest): GetVideoPreviewPlayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVideoPreviewPlayInfoWithOptions(request, headers, runtime);
}

model GetVideoPreviewPlayMetaRequest {
  category?: string(name='category', example='live_transcoding'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
}

model GetVideoPreviewPlayMetaResponseBody = {
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='fileid1'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  videoPreviewPlayMeta?: VideoPreviewPlayMeta(name='video_preview_play_meta'),
}

model GetVideoPreviewPlayMetaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVideoPreviewPlayMetaResponseBody(name='body'),
}

async function getVideoPreviewPlayMetaWithOptions(request: GetVideoPreviewPlayMetaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetVideoPreviewPlayMetaResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['category'] = request.category;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetVideoPreviewPlayMeta',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/get_video_preview_play_meta`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function getVideoPreviewPlayMeta(request: GetVideoPreviewPlayMetaRequest): GetVideoPreviewPlayMetaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getVideoPreviewPlayMetaWithOptions(request, headers, runtime);
}

model ImportUserRequest {
  authenticationDisplayName?: string(name='authentication_display_name', example='10000'),
  authenticationType?: string(name='authentication_type', example='mobile'),
  autoCreateDrive?: boolean(name='auto_create_drive', example='false'),
  driveTotalSize?: long(name='drive_total_size', example='10240'),
  extra?: string(name='extra', example='1'),
  identity?: string(name='identity', example='130****'),
  nickName?: string(name='nick_name', example='pdsuer'),
  parentGroupId?: string(name='parent_group_id', example='g12'),
}

model ImportUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: User  
}

async function importUserWithOptions(request: ImportUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ImportUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.authenticationDisplayName)) {
    body['authentication_display_name'] = request.authenticationDisplayName;
  }
  if (!Util.isUnset(request.authenticationType)) {
    body['authentication_type'] = request.authenticationType;
  }
  if (!Util.isUnset(request.autoCreateDrive)) {
    body['auto_create_drive'] = request.autoCreateDrive;
  }
  if (!Util.isUnset(request.driveTotalSize)) {
    body['drive_total_size'] = request.driveTotalSize;
  }
  if (!Util.isUnset(request.extra)) {
    body['extra'] = request.extra;
  }
  if (!Util.isUnset(request.identity)) {
    body['identity'] = request.identity;
  }
  if (!Util.isUnset(request.nickName)) {
    body['nick_name'] = request.nickName;
  }
  if (!Util.isUnset(request.parentGroupId)) {
    body['parent_group_id'] = request.parentGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportUser',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/user/import`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function importUser(request: ImportUserRequest): ImportUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return importUserWithOptions(request, headers, runtime);
}

model InvestigateFileRequest {
  driveFileIds?: [ 
    {
      driveId?: string(name='drive_id', example='1'),
      fileId?: string(name='file_id', example='9520943DC264'),
    }
  ](name='drive_file_ids'),
}

model InvestigateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function investigateFileWithOptions(request: InvestigateFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): InvestigateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveFileIds)) {
    body['drive_file_ids'] = request.driveFileIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvestigateFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/csi/investigate_file`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function investigateFile(request: InvestigateFileRequest): InvestigateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return investigateFileWithOptions(request, headers, runtime);
}

model LinkAccountRequest {
  extra?: string(name='extra', example='86'),
  identity?: string(name='identity'),
  type?: string(name='type'),
  userId?: string(name='user_id', example='xxx'),
}

model LinkAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Token  
}

async function linkAccountWithOptions(request: LinkAccountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): LinkAccountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.extra)) {
    body['extra'] = request.extra;
  }
  if (!Util.isUnset(request.identity)) {
    body['identity'] = request.identity;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'LinkAccount',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/account/link`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function linkAccount(request: LinkAccountRequest): LinkAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return linkAccountWithOptions(request, headers, runtime);
}

model ListAddressGroupsRequest {
  driveId?: string(name='drive_id', example='1'),
  imageThumbnailProcess?: string(name='image_thumbnail_process', example='image/resize,w_200'),
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  videoThumbnailProcess?: string(name='video_thumbnail_process', example='video_thumbnail_process'),
}

model ListAddressGroupsResponseBody = {
  items?: [
    AddressGroup
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListAddressGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAddressGroupsResponseBody(name='body'),
}

async function listAddressGroupsWithOptions(request: ListAddressGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAddressGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.imageThumbnailProcess)) {
    body['image_thumbnail_process'] = request.imageThumbnailProcess;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.videoThumbnailProcess)) {
    body['video_thumbnail_process'] = request.videoThumbnailProcess;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAddressGroups',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/list_address_groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listAddressGroups(request: ListAddressGroupsRequest): ListAddressGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAddressGroupsWithOptions(request, headers, runtime);
}

model ListAssignmentRequest {
  limit?: int32(name='limit', example='50'),
  manageResourceId?: string(name='manage_resource_id', example='105***b82'),
  manageResourceType?: string(name='manage_resource_type', example='RT_Group'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListAssignmentResponseBody = {
  assignmentList?: [ 
    {
      createdAt?: long(name='created_at', example='1622682267564'),
      creator?: string(name='creator', example='216***c83'),
      domainId?: string(name='domain_id', example='hz1'),
      identity?: Identity(name='identity'),
      manageResourceId?: string(name='manage_resource_id', example='105***b82'),
      manageResourceType?: string(name='manage_resource_type', example='RT_Group'),
      roleId?: string(name='role_id', example='SystemGroupAdmin'),
    }
  ](name='assignment_list'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListAssignmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAssignmentResponseBody(name='body'),
}

async function listAssignmentWithOptions(request: ListAssignmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAssignmentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.manageResourceId)) {
    body['manage_resource_id'] = request.manageResourceId;
  }
  if (!Util.isUnset(request.manageResourceType)) {
    body['manage_resource_type'] = request.manageResourceType;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAssignment',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/role/list_assignment`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listAssignment(request: ListAssignmentRequest): ListAssignmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAssignmentWithOptions(request, headers, runtime);
}

model ListDeltaRequest {
  cursor?: string(name='cursor', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  driveId?: string(name='drive_id', example='1'),
  limit?: int32(name='limit', example='50'),
  syncRootId?: string(name='sync_root_id', example='622fb09598ae66777c7040109a16f49381f6abe1'),
}

model ListDeltaResponseBody = {
  cursor?: string(name='cursor', example='1WQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  hasMore?: boolean(name='has_more', example='true'),
  items?: [ 
    {
      file?: File(name='file'),
      fileId?: string(name='file_id', example='122fb09598ae66777c7040109a16f49381f6abe2'),
      op?: string(name='op', example='create'),
    }
  ](name='items'),
}

model ListDeltaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeltaResponseBody(name='body'),
}

async function listDeltaWithOptions(request: ListDeltaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDeltaResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cursor)) {
    body['cursor'] = request.cursor;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.syncRootId)) {
    body['sync_root_id'] = request.syncRootId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDelta',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/list_delta`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listDelta(request: ListDeltaRequest): ListDeltaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDeltaWithOptions(request, headers, runtime);
}

model ListDomainsRequest {
  limit?: long(name='limit', example='60'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  parentDomainId?: string(name='parent_domain_id', example='bj1'),
}

model ListDomainsResponseBody = {
  items?: [
    Domain
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomainsWithOptions(request: ListDomainsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDomainsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.parentDomainId)) {
    body['parent_domain_id'] = request.parentDomainId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDomains',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/domain/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDomainsWithOptions(request, headers, runtime);
}

model ListDriveRequest {
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  owner?: string(name='owner', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
  ownerType?: string(name='owner_type', example='user'),
}

model ListDriveResponseBody = {
  items?: [
    Drive
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDriveResponseBody(name='body'),
}

async function listDriveWithOptions(request: ListDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.owner)) {
    body['owner'] = request.owner;
  }
  if (!Util.isUnset(request.ownerType)) {
    body['owner_type'] = request.ownerType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listDrive(request: ListDriveRequest): ListDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDriveWithOptions(request, headers, runtime);
}

model ListFacegroupsRequest {
  driveId?: string(name='drive_id', example='1'),
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  remarks?: string(name='remarks'),
  returnTotalCount?: boolean(name='return_total_count'),
}

model ListFacegroupsResponseBody = {
  items?: [
    FaceGroup
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  totalCount?: long(name='total_count'),
}

model ListFacegroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFacegroupsResponseBody(name='body'),
}

async function listFacegroupsWithOptions(request: ListFacegroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFacegroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.remarks)) {
    body['remarks'] = request.remarks;
  }
  if (!Util.isUnset(request.returnTotalCount)) {
    body['return_total_count'] = request.returnTotalCount;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFacegroups',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/list_facegroups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listFacegroups(request: ListFacegroupsRequest): ListFacegroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFacegroupsWithOptions(request, headers, runtime);
}

model ListFileRequest {
  category?: string(name='category', example='image'),
  driveId?: string(name='drive_id', example='1'),
  fields?: string(name='fields', example='*'),
  limit?: int32(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  orderBy?: string(name='order_by', example='updated_at'),
  orderDirection?: string(name='order_direction', example='ASC'),
  parentFileId?: string(name='parent_file_id', example='root'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  status?: string(name='status', example='available'),
  thumbnailProcesses?: map[string]ImageProcess(name='thumbnail_processes'),
  type?: string(name='type', example='file'),
}

model ListFileResponseBody = {
  items?: [
    File
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFileResponseBody(name='body'),
}

async function listFileWithOptions(request: ListFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['category'] = request.category;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fields)) {
    body['fields'] = request.fields;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['order_by'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderDirection)) {
    body['order_direction'] = request.orderDirection;
  }
  if (!Util.isUnset(request.parentFileId)) {
    body['parent_file_id'] = request.parentFileId;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.thumbnailProcesses)) {
    body['thumbnail_processes'] = request.thumbnailProcesses;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listFile(request: ListFileRequest): ListFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFileWithOptions(request, headers, runtime);
}

model ListGroupRequest {
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListGroupResponseBody = {
  items?: [
    Group
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupResponseBody(name='body'),
}

async function listGroupWithOptions(request: ListGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListGroup',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listGroup(request: ListGroupRequest): ListGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listGroupWithOptions(request, headers, runtime);
}

model ListGroupMemberRequest {
  groupId?: string(name='group_id', example='3e5***2c2'),
  limit?: int32(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  memberType?: string(name='member_type', example='user'),
}

model ListGroupMemberResponseBody = {
  groupItems?: [
    Group
  ](name='group_items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhM1'),
  userItems?: [
    User
  ](name='user_items'),
}

model ListGroupMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupMemberResponseBody(name='body'),
}

async function listGroupMemberWithOptions(request: ListGroupMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListGroupMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['group_id'] = request.groupId;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.memberType)) {
    body['member_type'] = request.memberType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListGroupMember',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/list_member`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listGroupMember(request: ListGroupMemberRequest): ListGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listGroupMemberWithOptions(request, headers, runtime);
}

model ListIdentityToBenefitPkgMappingRequest {
  identityId?: string(name='identity_id', example='user123'),
  identityType?: string(name='identity_type', example='user'),
  includeExpired?: boolean(name='include_expired', example='false'),
}

model ListIdentityToBenefitPkgMappingResponseBody = {
  items?: [
    IdentityToBenefitPkgMapping
  ](name='items'),
}

model ListIdentityToBenefitPkgMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIdentityToBenefitPkgMappingResponseBody(name='body'),
}

async function listIdentityToBenefitPkgMappingWithOptions(request: ListIdentityToBenefitPkgMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListIdentityToBenefitPkgMappingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.identityId)) {
    body['identity_id'] = request.identityId;
  }
  if (!Util.isUnset(request.identityType)) {
    body['identity_type'] = request.identityType;
  }
  if (!Util.isUnset(request.includeExpired)) {
    body['include_expired'] = request.includeExpired;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListIdentityToBenefitPkgMapping',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/benefit/identity_to_benefit_pkg_mapping/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listIdentityToBenefitPkgMapping(request: ListIdentityToBenefitPkgMappingRequest): ListIdentityToBenefitPkgMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listIdentityToBenefitPkgMappingWithOptions(request, headers, runtime);
}

model ListMyDrivesRequest {
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListMyDrivesResponseBody = {
  items?: [
    Drive
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListMyDrivesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMyDrivesResponseBody(name='body'),
}

async function listMyDrivesWithOptions(request: ListMyDrivesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMyDrivesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMyDrives',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/list_my_drives`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listMyDrives(request: ListMyDrivesRequest): ListMyDrivesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMyDrivesWithOptions(request, headers, runtime);
}

model ListMyGroupDriveRequest {
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListMyGroupDriveResponseBody = {
  items?: [
    Drive
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListMyGroupDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMyGroupDriveResponseBody(name='body'),
}

async function listMyGroupDriveWithOptions(request: ListMyGroupDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMyGroupDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMyGroupDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/list_my_group_drive`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listMyGroupDrive(request: ListMyGroupDriveRequest): ListMyGroupDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMyGroupDriveWithOptions(request, headers, runtime);
}

model ListReceivedFileRequest {
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='eym***'),
}

model ListReceivedFileResponseBody = {
  items?: [
    File
  ](name='items'),
  nextMarker?: string(name='next_marker', example='eym***'),
}

model ListReceivedFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListReceivedFileResponseBody(name='body'),
}

async function listReceivedFileWithOptions(request: ListReceivedFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListReceivedFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListReceivedFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/list_received_file`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listReceivedFile(request: ListReceivedFileRequest): ListReceivedFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listReceivedFileWithOptions(request, headers, runtime);
}

model ListRecyclebinRequest {
  driveId?: string(name='drive_id', example='1'),
  fields?: string(name='fields', example='*'),
  limit?: int32(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListRecyclebinResponseBody = {
  items?: [
    File
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhM1'),
}

model ListRecyclebinResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRecyclebinResponseBody(name='body'),
}

async function listRecyclebinWithOptions(request: ListRecyclebinRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRecyclebinResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fields)) {
    body['fields'] = request.fields;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRecyclebin',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/recyclebin/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listRecyclebin(request: ListRecyclebinRequest): ListRecyclebinResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRecyclebinWithOptions(request, headers, runtime);
}

model ListRevisionRequest {
  driveId?: string(name='drive_id', example='1'),
  fields?: string(name='fields', example='*'),
  fileId?: string(name='file_id', example='9520943DC264'),
  limit?: long(name='limit', example='100'),
  marker?: string(name='marker', example='40CB7794C929'),
}

model ListRevisionResponseBody = {
  items?: [
    Revision
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListRevisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRevisionResponseBody(name='body'),
}

async function listRevisionWithOptions(request: ListRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRevisionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fields)) {
    body['fields'] = request.fields;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRevision',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/revision/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listRevision(request: ListRevisionRequest): ListRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRevisionWithOptions(request, headers, runtime);
}

model ListShareLinkRequest {
  creator?: string(name='creator', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
  includeCancelled?: boolean(name='include_cancelled', example='true'),
  limit?: int32(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  orderBy?: string(name='order_by', example='share_name'),
  orderDirection?: string(name='order_direction', example='ASC'),
}

model ListShareLinkResponseBody = {
  items?: [
    ShareLink
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShareLinkResponseBody(name='body'),
}

async function listShareLinkWithOptions(request: ListShareLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListShareLinkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creator)) {
    body['creator'] = request.creator;
  }
  if (!Util.isUnset(request.includeCancelled)) {
    body['include_cancelled'] = request.includeCancelled;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['order_by'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderDirection)) {
    body['order_direction'] = request.orderDirection;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShareLink',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listShareLink(request: ListShareLinkRequest): ListShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listShareLinkWithOptions(request, headers, runtime);
}

model ListTagsRequest {
  driveId?: string(name='drive_id', example='1'),
  imageThumbnailProcess?: string(name='image_thumbnail_process', example='image/resize,w_200'),
  videoThumbnailProcess?: string(name='video_thumbnail_process', example='video/snapshot,t_7000,f_jpg,w_800,h_600,m_fast'),
}

model ListTagsResponseBody = {
  tags?: [
    ImageTag
  ](name='tags'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagsResponseBody(name='body'),
}

async function listTagsWithOptions(request: ListTagsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTagsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.imageThumbnailProcess)) {
    body['image_thumbnail_process'] = request.imageThumbnailProcess;
  }
  if (!Util.isUnset(request.videoThumbnailProcess)) {
    body['video_thumbnail_process'] = request.videoThumbnailProcess;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTags',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/list_tags`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTagsWithOptions(request, headers, runtime);
}

model ListUploadedPartsRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='322fb07b975f4b0ae1b543fe8475eee4c19eb2b2'),
  limit?: int32(name='limit', example='100'),
  partNumberMarker?: int32(name='part_number_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  uploadId?: string(name='upload_id', example='00166D06127B413BA1EC8ABB1144D101'),
}

model ListUploadedPartsResponseBody = {
  fileId?: string(name='file_id', example='322fb07b975f4b0ae1b543fe8475eee4c19eb2b2'),
  nextPartNumberMarker?: string(name='next_part_number_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  parallelUpload?: boolean(name='parallel_upload', example='false'),
  uploadId?: string(name='upload_id', example='00166D06127B413BA1EC8ABB1144D101'),
  uploadedParts?: [
    UploadPartInfo
  ](name='uploaded_parts'),
}

model ListUploadedPartsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUploadedPartsResponseBody(name='body'),
}

async function listUploadedPartsWithOptions(request: ListUploadedPartsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUploadedPartsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.partNumberMarker)) {
    body['part_number_marker'] = request.partNumberMarker;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.uploadId)) {
    body['upload_id'] = request.uploadId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUploadedParts',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/list_uploaded_parts`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listUploadedParts(request: ListUploadedPartsRequest): ListUploadedPartsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUploadedPartsWithOptions(request, headers, runtime);
}

model ListUserRequest {
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListUserResponseBody = {
  items?: [
    User
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ListUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserResponseBody(name='body'),
}

async function listUserWithOptions(request: ListUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListUser',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/user/list`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function listUser(request: ListUserRequest): ListUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUserWithOptions(request, headers, runtime);
}

model MoveFileRequest {
  checkNameMode?: string(name='check_name_mode', example='ignore'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  toParentFileId?: string(name='to_parent_file_id', example='6520943DC261'),
}

model MoveFileResponseBody = {
  asyncTaskId?: string(name='async_task_id', example='23ebd1a24dba4166b1527add476ef2866051b4d5del106'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  exist?: boolean(name='exist', example='false'),
  fileId?: string(name='file_id', example='fileid1'),
}

model MoveFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveFileResponseBody(name='body'),
}

async function moveFileWithOptions(request: MoveFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): MoveFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkNameMode)) {
    body['check_name_mode'] = request.checkNameMode;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.toParentFileId)) {
    body['to_parent_file_id'] = request.toParentFileId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'MoveFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/move`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function moveFile(request: MoveFileRequest): MoveFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return moveFileWithOptions(request, headers, runtime);
}

model RemoveFaceGroupFileRequest {
  driveId?: string(name='drive_id', example='123'),
  faceGroupId?: string(name='face_group_id', example='Cluster-abc'),
  fileId?: string(name='file_id', example='abcd'),
}

model RemoveFaceGroupFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function removeFaceGroupFileWithOptions(request: RemoveFaceGroupFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveFaceGroupFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.faceGroupId)) {
    body['face_group_id'] = request.faceGroupId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveFaceGroupFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/albums/unassign_facegroup_item`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function removeFaceGroupFile(request: RemoveFaceGroupFileRequest): RemoveFaceGroupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeFaceGroupFileWithOptions(request, headers, runtime);
}

model RemoveGroupMemberRequest {
  groupId?: string(name='group_id', example='3e5***2c2'),
  memberId?: string(name='member_id', example='2e4***1b1'),
  memberType?: string(name='member_type', example='user'),
}

model RemoveGroupMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function removeGroupMemberWithOptions(request: RemoveGroupMemberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveGroupMemberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupId)) {
    body['group_id'] = request.groupId;
  }
  if (!Util.isUnset(request.memberId)) {
    body['member_id'] = request.memberId;
  }
  if (!Util.isUnset(request.memberType)) {
    body['member_type'] = request.memberType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveGroupMember',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/remove_member`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function removeGroupMember(request: RemoveGroupMemberRequest): RemoveGroupMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeGroupMemberWithOptions(request, headers, runtime);
}

model RemoveStoryFilesRequest {
  driveId?: string(name='drive_id', example='1'),
  files?: [ 
    {
      fileId?: string(name='file_id', example='63e5e4340f76cb3ead5f40f68163f0f967c1a7bf'),
      revisionId?: string(name='revision_id', example='642a88dd06e49d9c0a14411ebae606f70edd9a59'),
    }
  ](name='files'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
}

model RemoveStoryFilesResponseBody = {
  driveId?: string(name='drive_id', example='1'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
}

model RemoveStoryFilesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveStoryFilesResponseBody(name='body'),
}

async function removeStoryFilesWithOptions(request: RemoveStoryFilesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveStoryFilesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.files)) {
    body['files'] = request.files;
  }
  if (!Util.isUnset(request.storyId)) {
    body['story_id'] = request.storyId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveStoryFiles',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/remove_story_files`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function removeStoryFiles(request: RemoveStoryFilesRequest): RemoveStoryFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeStoryFilesWithOptions(request, headers, runtime);
}

model RestoreFileRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43a255edc4463bffa6f5f5d317401'),
}

model RestoreFileResponseBody = {
  asyncTaskId?: string(name='async_task_id', example='4221bf6e6ab43c255edc4463bf3a6f5f5d317406'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43a255edc4463bffa6f5f5d317401'),
}

model RestoreFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestoreFileResponseBody(name='body'),
}

async function restoreFileWithOptions(request: RestoreFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RestoreFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestoreFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/recyclebin/restore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function restoreFile(request: RestoreFileRequest): RestoreFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return restoreFileWithOptions(request, headers, runtime);
}

model RestoreRevisionRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  revisionId?: string(name='revision_id', example='40CB7794C929'),
}

model RestoreRevisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Revision  
}

async function restoreRevisionWithOptions(request: RestoreRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RestoreRevisionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.revisionId)) {
    body['revision_id'] = request.revisionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestoreRevision',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/revision/restore`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function restoreRevision(request: RestoreRevisionRequest): RestoreRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return restoreRevisionWithOptions(request, headers, runtime);
}

model ScanFileRequest {
  driveId?: string(name='drive_id', example='1'),
  fields?: string(name='fields', example='*'),
  limit?: int32(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ScanFileResponseBody = {
  items?: [
    File
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model ScanFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScanFileResponseBody(name='body'),
}

async function scanFileWithOptions(request: ScanFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ScanFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fields)) {
    body['fields'] = request.fields;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ScanFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/scan`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function scanFile(request: ScanFileRequest): ScanFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return scanFileWithOptions(request, headers, runtime);
}

model SearchAddressGroupsRequest {
  addressLevel?: string(name='address_level'),
  addressNames?: [ string ](name='address_names'),
  brGeoPoint?: string(name='br_geo_point', example='40.121,105.2121'),
  driveId?: string(name='drive_id', example='1'),
  imageThumbnailProcess?: string(name='image_thumbnail_process', example='image/resize,w_200'),
  tlGeoPoint?: string(name='tl_geo_point', example='39.121,101.2121'),
  videoThumbnailProcess?: string(name='video_thumbnail_process', example='video/snapshot,t_7000,f_jpg,w_800,h_600,m_fast'),
}

model SearchAddressGroupsResponseBody = {
  items?: [
    AddressGroup
  ](name='items'),
}

model SearchAddressGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchAddressGroupsResponseBody(name='body'),
}

async function searchAddressGroupsWithOptions(request: SearchAddressGroupsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchAddressGroupsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.addressLevel)) {
    body['address_level'] = request.addressLevel;
  }
  if (!Util.isUnset(request.addressNames)) {
    body['address_names'] = request.addressNames;
  }
  if (!Util.isUnset(request.brGeoPoint)) {
    body['br_geo_point'] = request.brGeoPoint;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.imageThumbnailProcess)) {
    body['image_thumbnail_process'] = request.imageThumbnailProcess;
  }
  if (!Util.isUnset(request.tlGeoPoint)) {
    body['tl_geo_point'] = request.tlGeoPoint;
  }
  if (!Util.isUnset(request.videoThumbnailProcess)) {
    body['video_thumbnail_process'] = request.videoThumbnailProcess;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchAddressGroups',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/search_address_groups`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchAddressGroups(request: SearchAddressGroupsRequest): SearchAddressGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchAddressGroupsWithOptions(request, headers, runtime);
}

model SearchDomainsRequest {
  limit?: long(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  name?: string(name='name'),
  orderBy?: string(name='order_by', example='created_at'),
}

model SearchDomainsResponseBody = {
  items?: [
    Domain
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model SearchDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchDomainsResponseBody(name='body'),
}

async function searchDomainsWithOptions(request: SearchDomainsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchDomainsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['order_by'] = request.orderBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchDomains',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/domain/search`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchDomains(request: SearchDomainsRequest): SearchDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchDomainsWithOptions(request, headers, runtime);
}

model SearchDriveRequest {
  driveName?: string(name='drive_name'),
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  owner?: string(name='owner', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
  ownerType?: string(name='owner_type', example='user'),
}

model SearchDriveResponseBody = {
  items?: [
    Drive
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model SearchDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchDriveResponseBody(name='body'),
}

async function searchDriveWithOptions(request: SearchDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveName)) {
    body['drive_name'] = request.driveName;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.owner)) {
    body['owner'] = request.owner;
  }
  if (!Util.isUnset(request.ownerType)) {
    body['owner_type'] = request.ownerType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/search`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchDrive(request: SearchDriveRequest): SearchDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchDriveWithOptions(request, headers, runtime);
}

model SearchFileRequest {
  driveId?: string(name='drive_id', example='1'),
  limit?: int32(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  orderBy?: string(name='order_by', example='name'),
  query?: string(name='query', example='not name=123'),
  returnTotalCount?: boolean(name='return_total_count', example='true'),
}

model SearchFileResponseBody = {
  items?: [
    File
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  totalCount?: long(name='total_count', example='1022'),
}

model SearchFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchFileResponseBody(name='body'),
}

async function searchFileWithOptions(request: SearchFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['order_by'] = request.orderBy;
  }
  if (!Util.isUnset(request.query)) {
    body['query'] = request.query;
  }
  if (!Util.isUnset(request.returnTotalCount)) {
    body['return_total_count'] = request.returnTotalCount;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/search`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchFile(request: SearchFileRequest): SearchFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchFileWithOptions(request, headers, runtime);
}

model SearchShareLinkRequest {
  creators?: [ string ](name='creators'),
  limit?: int32(name='limit', example='50'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  orderBy?: string(name='order_by', example='created_at'),
  orderDirection?: string(name='order_direction', example='ASC'),
  query?: string(name='query', example='created_at>=\\"2022-01-18T02:50:00\\" and created_at<\\"2022-01-19T09:45:28\\" and share_name_for_fuzzy match \\"HD.mp4\\" and status in [\\"enabled\\", \\"disabled\\"] and expired_time=\\"1970-01-01T00:00:00\\"'),
  returnTotalCount?: boolean(name='return_total_count', example='false'),
}

model SearchShareLinkResponseBody = {
  items?: [
    ShareLink
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  totalCount?: long(name='total_count', example='101'),
}

model SearchShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchShareLinkResponseBody(name='body'),
}

async function searchShareLinkWithOptions(request: SearchShareLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchShareLinkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.creators)) {
    body['creators'] = request.creators;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.orderBy)) {
    body['order_by'] = request.orderBy;
  }
  if (!Util.isUnset(request.orderDirection)) {
    body['order_direction'] = request.orderDirection;
  }
  if (!Util.isUnset(request.query)) {
    body['query'] = request.query;
  }
  if (!Util.isUnset(request.returnTotalCount)) {
    body['return_total_count'] = request.returnTotalCount;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchShareLink',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/search`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchShareLink(request: SearchShareLinkRequest): SearchShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchShareLinkWithOptions(request, headers, runtime);
}

model SearchSimilarImageClustersRequest {
  driveId?: string(name='drive_id', example='1'),
  imageThumbnailProcess?: string(name='image_thumbnail_process', example='image/resize,m_fill,h_128,w_128,limit_0/format,jpg', deprecated='true'),
  limit?: long(name='limit', example='50'),
  marker?: string(name='marker', example='YWRzX3VzZXJfcHJvZmlsZV9je1bnQh***'),
  order?: string(name='order', example='desc'),
}

model SearchSimilarImageClustersResponseBody = {
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0***'),
  similarImageClusters?: [ 
    {
      files?: [
        File
      ](name='files'),
    }
  ](name='similar_image_clusters'),
}

model SearchSimilarImageClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchSimilarImageClustersResponseBody(name='body'),
}

async function searchSimilarImageClustersWithOptions(request: SearchSimilarImageClustersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchSimilarImageClustersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.imageThumbnailProcess)) {
    body['image_thumbnail_process'] = request.imageThumbnailProcess;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.order)) {
    body['order'] = request.order;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchSimilarImageClusters',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/query_similar_image_clusters`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchSimilarImageClusters(request: SearchSimilarImageClustersRequest): SearchSimilarImageClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchSimilarImageClustersWithOptions(request, headers, runtime);
}

model SearchStoriesRequest {
  coverImageThumbnailProcess?: string(name='cover_image_thumbnail_process', example='image/resize,m_fill,h_128,w_128,limit_0/format,jpg', deprecated='true'),
  coverVideoThumbnailProcess?: string(name='cover_video_thumbnail_process', example='video/snapshot,t_1000,f_jpg,w_0,h_0,m_fast,ar_auto', deprecated='true'),
  createTimeRange?: {
    end?: string(name='end', example='2022-12-31T00:00:00+08:00'),
    start?: string(name='start', example='2016-12-31T00:00:00+08:00'),
  }(name='create_time_range'),
  customLabels?: string(name='custom_labels', example='key1=value1,key2!=value2', deprecated='true'),
  driveId?: string(name='drive_id', example='1'),
  faceGroupIds?: [ string ](name='face_group_ids'),
  limit?: long(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDODBhNDQ2Nzhl***'),
  order?: string(name='order', example='desc'),
  sort?: string(name='sort', example='CreateTime'),
  storyEndTimeRange?: {
    end?: string(name='end', example='2022-12-31T00:00:00+08:00'),
    start?: string(name='start', example='2016-12-31T00:00:00+08:00'),
  }(name='story_end_time_range'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
  storyName?: string(name='story_name'),
  storyStartTimeRange?: {
    end?: string(name='end', example='2022-12-31T00:00:00+08:00'),
    start?: string(name='start', example='2016-12-31T00:00:00+08:00'),
  }(name='story_start_time_range'),
  storyType?: string(name='story_type', example='PeopleMemory'),
  urlExpireSec?: long(name='url_expire_sec', example='900', deprecated='true'),
  withEmptyStories?: boolean(name='with_empty_stories', example='false'),
}

model SearchStoriesResponseBody = {
  items?: [
    Story
  ](name='items'),
  nextMarker?: string(name='next_marker', example='Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJ***'),
}

model SearchStoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchStoriesResponseBody(name='body'),
}

async function searchStoriesWithOptions(request: SearchStoriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchStoriesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.coverImageThumbnailProcess)) {
    body['cover_image_thumbnail_process'] = request.coverImageThumbnailProcess;
  }
  if (!Util.isUnset(request.coverVideoThumbnailProcess)) {
    body['cover_video_thumbnail_process'] = request.coverVideoThumbnailProcess;
  }
  if (!Util.isUnset(request.createTimeRange)) {
    body['create_time_range'] = request.createTimeRange;
  }
  if (!Util.isUnset(request.customLabels)) {
    body['custom_labels'] = request.customLabels;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.faceGroupIds)) {
    body['face_group_ids'] = request.faceGroupIds;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.order)) {
    body['order'] = request.order;
  }
  if (!Util.isUnset(request.sort)) {
    body['sort'] = request.sort;
  }
  if (!Util.isUnset(request.storyEndTimeRange)) {
    body['story_end_time_range'] = request.storyEndTimeRange;
  }
  if (!Util.isUnset(request.storyId)) {
    body['story_id'] = request.storyId;
  }
  if (!Util.isUnset(request.storyName)) {
    body['story_name'] = request.storyName;
  }
  if (!Util.isUnset(request.storyStartTimeRange)) {
    body['story_start_time_range'] = request.storyStartTimeRange;
  }
  if (!Util.isUnset(request.storyType)) {
    body['story_type'] = request.storyType;
  }
  if (!Util.isUnset(request.urlExpireSec)) {
    body['url_expire_sec'] = request.urlExpireSec;
  }
  if (!Util.isUnset(request.withEmptyStories)) {
    body['with_empty_stories'] = request.withEmptyStories;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchStories',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/find_stories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchStories(request: SearchStoriesRequest): SearchStoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchStoriesWithOptions(request, headers, runtime);
}

model SearchUserRequest {
  email?: string(name='email', example='123@pds.com'),
  limit?: int32(name='limit', example='100'),
  marker?: string(name='marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
  nickName?: string(name='nick_name', example='pdsuer'),
  nickNameForFuzzy?: string(name='nick_name_for_fuzzy', example='la'),
  phone?: string(name='phone', example='13900001111'),
  role?: string(name='role', example='user'),
  status?: string(name='status', example='enabled'),
  userName?: string(name='user_name', example='pds'),
}

model SearchUserResponseBody = {
  items?: [
    User
  ](name='items'),
  nextMarker?: string(name='next_marker', example='NWQ1Yjk4YmI1ZDRlYmU1Y2E0YWE0NmJhYWJmODBhNDQ2NzhlMTRhMg'),
}

model SearchUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchUserResponseBody(name='body'),
}

async function searchUserWithOptions(request: SearchUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SearchUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.limit)) {
    body['limit'] = request.limit;
  }
  if (!Util.isUnset(request.marker)) {
    body['marker'] = request.marker;
  }
  if (!Util.isUnset(request.nickName)) {
    body['nick_name'] = request.nickName;
  }
  if (!Util.isUnset(request.nickNameForFuzzy)) {
    body['nick_name_for_fuzzy'] = request.nickNameForFuzzy;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.role)) {
    body['role'] = request.role;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.userName)) {
    body['user_name'] = request.userName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchUser',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/user/search`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function searchUser(request: SearchUserRequest): SearchUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return searchUserWithOptions(request, headers, runtime);
}

model TokenRequest {
  assertion?: string(name='assertion', example='ey***asd'),
  clientId?: string(name='client_id', example='1Zu***flH'),
  clientSecret?: string(name='client_secret', example='80D***3i5'),
  code?: string(name='code', example='0045157fa8e24f4f9a0d9e3ff158c1e0'),
  grantType?: string(name='grant_type', example='refresh_token'),
  redirectUri?: string(name='redirect_uri', example='https://aliyun.com/pds'),
  refreshToken?: string(name='refresh_token', example='399623e13353490391266c7d48a13ed1'),
}

model TokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Token  
}

async function tokenWithOptions(request: TokenRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TokenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.assertion)) {
    body['assertion'] = request.assertion;
  }
  if (!Util.isUnset(request.clientId)) {
    body['client_id'] = request.clientId;
  }
  if (!Util.isUnset(request.clientSecret)) {
    body['client_secret'] = request.clientSecret;
  }
  if (!Util.isUnset(request.code)) {
    body['code'] = request.code;
  }
  if (!Util.isUnset(request.grantType)) {
    body['grant_type'] = request.grantType;
  }
  if (!Util.isUnset(request.redirectUri)) {
    body['redirect_uri'] = request.redirectUri;
  }
  if (!Util.isUnset(request.refreshToken)) {
    body['refresh_token'] = request.refreshToken;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Token',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/oauth/token`,
    method = 'POST',
    authType = 'Anonymous',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function token(request: TokenRequest): TokenResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return tokenWithOptions(request, headers, runtime);
}

model TrashFileRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43c255edc4463bf3a6f5f5d317406'),
}

model TrashFileResponseBody = {
  asyncTaskId?: string(name='async_task_id', example='13ebd3a24dba4166b1527add676ef2866051b4d5dele16'),
  domainId?: string(name='domain_id', example='bj1'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='4221bf6e6ab43c255edc4463bf3a6f5f5d317406'),
}

model TrashFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TrashFileResponseBody(name='body'),
}

async function trashFileWithOptions(request: TrashFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TrashFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TrashFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/recyclebin/trash`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function trashFile(request: TrashFileRequest): TrashFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return trashFileWithOptions(request, headers, runtime);
}

model UnLinkAcountRequest {
  extra?: string(name='extra', example='86'),
  identity?: string(name='identity', example='139****'),
  type?: string(name='type', example='ding'),
  userId?: string(name='user_id', example='xxx'),
}

model UnLinkAcountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function unLinkAcountWithOptions(request: UnLinkAcountRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UnLinkAcountResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.extra)) {
    body['extra'] = request.extra;
  }
  if (!Util.isUnset(request.identity)) {
    body['identity'] = request.identity;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnLinkAcount',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/account/unlink`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function unLinkAcount(request: UnLinkAcountRequest): UnLinkAcountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return unLinkAcountWithOptions(request, headers, runtime);
}

model UpdateDomainRequest {
  description?: string(name='description'),
  domainId?: string(name='domain_id', description='domain id', example='bj1'),
  domainName?: string(name='domain_name'),
  initDriveEnable?: boolean(name='init_drive_enable', example='true'),
  initDriveSize?: long(name='init_drive_size', example='1073741824'),
  publishedAppAccessStrategy?: AppAccessStrategy(name='published_app_access_strategy'),
  sizeQuota?: long(name='size_quota', example='1099511627776'),
  userCountQuota?: long(name='user_count_quota', example='50'),
}

model UpdateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Domain  
}

async function updateDomainWithOptions(request: UpdateDomainRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDomainResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.domainId)) {
    body['domain_id'] = request.domainId;
  }
  if (!Util.isUnset(request.domainName)) {
    body['domain_name'] = request.domainName;
  }
  if (!Util.isUnset(request.initDriveEnable)) {
    body['init_drive_enable'] = request.initDriveEnable;
  }
  if (!Util.isUnset(request.initDriveSize)) {
    body['init_drive_size'] = request.initDriveSize;
  }
  if (!Util.isUnset(request.publishedAppAccessStrategy)) {
    body['published_app_access_strategy'] = request.publishedAppAccessStrategy;
  }
  if (!Util.isUnset(request.sizeQuota)) {
    body['size_quota'] = request.sizeQuota;
  }
  if (!Util.isUnset(request.userCountQuota)) {
    body['user_count_quota'] = request.userCountQuota;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDomain',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/domain/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateDomain(request: UpdateDomainRequest): UpdateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDomainWithOptions(request, headers, runtime);
}

model UpdateDriveRequest {
  description?: string(name='description'),
  driveId?: string(name='drive_id', example='1'),
  driveName?: string(name='drive_name', example='my_drive'),
  owner?: string(name='owner', description='归属者
注意，当前只允许通过 ak 来修改个人 drive 的所有者。', example='user1'),
  status?: string(name='status', example='enabled'),
  totalSize?: long(name='total_size', example='10240'),
}

model UpdateDriveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Drive  
}

async function updateDriveWithOptions(request: UpdateDriveRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateDriveResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.driveName)) {
    body['drive_name'] = request.driveName;
  }
  if (!Util.isUnset(request.owner)) {
    body['owner'] = request.owner;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.totalSize)) {
    body['total_size'] = request.totalSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDrive',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/drive/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateDrive(request: UpdateDriveRequest): UpdateDriveResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateDriveWithOptions(request, headers, runtime);
}

model UpdateFacegroupRequest {
  driveId?: string(name='drive_id', example='1'),
  groupCoverFaceId?: string(name='group_cover_face_id', example='face1'),
  groupId?: string(name='group_id', example='group-abc'),
  groupName?: string(name='group_name'),
  remarks?: string(name='remarks'),
}

model UpdateFacegroupResponseBody = {
  driveId?: string(name='drive_id', example='1'),
  groupId?: string(name='group_id', example='group-abc'),
}

model UpdateFacegroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateFacegroupResponseBody(name='body'),
}

async function updateFacegroupWithOptions(request: UpdateFacegroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFacegroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.groupCoverFaceId)) {
    body['group_cover_face_id'] = request.groupCoverFaceId;
  }
  if (!Util.isUnset(request.groupId)) {
    body['group_id'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    body['group_name'] = request.groupName;
  }
  if (!Util.isUnset(request.remarks)) {
    body['remarks'] = request.remarks;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFacegroup',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/update_facegroup_info`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateFacegroup(request: UpdateFacegroupRequest): UpdateFacegroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFacegroupWithOptions(request, headers, runtime);
}

model UpdateFileRequest {
  checkNameMode?: string(name='check_name_mode', example='ignore'),
  description?: string(name='description'),
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  hidden?: boolean(name='hidden', example='true'),
  labels?: [ string ](name='labels'),
  localModifiedAt?: string(name='local_modified_at', example='2019-08-20T06:51:27.292Z'),
  name?: string(name='name', example='a.jpg'),
  starred?: boolean(name='starred', example='true'),
}

model UpdateFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: File  
}

async function updateFileWithOptions(request: UpdateFileRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateFileResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkNameMode)) {
    body['check_name_mode'] = request.checkNameMode;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.hidden)) {
    body['hidden'] = request.hidden;
  }
  if (!Util.isUnset(request.labels)) {
    body['labels'] = request.labels;
  }
  if (!Util.isUnset(request.localModifiedAt)) {
    body['local_modified_at'] = request.localModifiedAt;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.starred)) {
    body['starred'] = request.starred;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFile',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateFile(request: UpdateFileRequest): UpdateFileResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateFileWithOptions(request, headers, runtime);
}

model UpdateGroupRequest {
  description?: string(name='description'),
  groupId?: string(name='group_id', example='2e43ec8427dd45f19431b7504649a1b4'),
  groupName?: string(name='group_name'),
}

model UpdateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Group  
}

async function updateGroupWithOptions(request: UpdateGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    body['group_id'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    body['group_name'] = request.groupName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGroup',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/group/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateGroupWithOptions(request, headers, runtime);
}

model UpdateIdentityToBenefitPkgMappingRequest {
  amount?: long(name='amount', example='1'),
  benefitPkgId?: string(name='benefit_pkg_id', example='40cb7794c9294'),
  expireTime?: long(name='expire_time', example='1633167071000'),
  identityId?: string(name='identity_id', example='user123'),
  identityType?: string(name='identity_type', example='user'),
}

model UpdateIdentityToBenefitPkgMappingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function updateIdentityToBenefitPkgMappingWithOptions(request: UpdateIdentityToBenefitPkgMappingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateIdentityToBenefitPkgMappingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.amount)) {
    body['amount'] = request.amount;
  }
  if (!Util.isUnset(request.benefitPkgId)) {
    body['benefit_pkg_id'] = request.benefitPkgId;
  }
  if (!Util.isUnset(request.expireTime)) {
    body['expire_time'] = request.expireTime;
  }
  if (!Util.isUnset(request.identityId)) {
    body['identity_id'] = request.identityId;
  }
  if (!Util.isUnset(request.identityType)) {
    body['identity_type'] = request.identityType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIdentityToBenefitPkgMapping',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/benefit/identity_to_benefit_pkg_mapping/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateIdentityToBenefitPkgMapping(request: UpdateIdentityToBenefitPkgMappingRequest): UpdateIdentityToBenefitPkgMappingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateIdentityToBenefitPkgMappingWithOptions(request, headers, runtime);
}

model UpdateRevisionRequest {
  driveId?: string(name='drive_id', example='1'),
  fileId?: string(name='file_id', example='9520943DC264'),
  keepForever?: boolean(name='keep_forever', example='true'),
  revisionDescription?: string(name='revision_description', example='aaa'),
  revisionId?: string(name='revision_id', example='40CB7794C929'),
}

model UpdateRevisionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Revision  
}

async function updateRevisionWithOptions(request: UpdateRevisionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateRevisionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.fileId)) {
    body['file_id'] = request.fileId;
  }
  if (!Util.isUnset(request.keepForever)) {
    body['keep_forever'] = request.keepForever;
  }
  if (!Util.isUnset(request.revisionDescription)) {
    body['revision_description'] = request.revisionDescription;
  }
  if (!Util.isUnset(request.revisionId)) {
    body['revision_id'] = request.revisionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRevision',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/file/revision/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateRevision(request: UpdateRevisionRequest): UpdateRevisionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateRevisionWithOptions(request, headers, runtime);
}

model UpdateShareLinkRequest {
  description?: string(name='description'),
  disableDownload?: boolean(name='disable_download', example='false'),
  disablePreview?: boolean(name='disable_preview', example='false'),
  disableSave?: boolean(name='disable_save', example='false'),
  downloadCount?: long(name='download_count', example='30'),
  downloadLimit?: long(name='download_limit', example='100'),
  expiration?: string(name='expiration', example='2020-06-28T11:33:00.000+08:00'),
  previewCount?: long(name='preview_count', example='3'),
  previewLimit?: long(name='preview_limit', example='100'),
  reportCount?: long(name='report_count', example='1'),
  saveCount?: long(name='save_count', example='5'),
  saveLimit?: long(name='save_limit', example='100'),
  shareId?: string(name='share_id', example='7JQX1FswpQ8'),
  shareName?: string(name='share_name'),
  sharePwd?: string(name='share_pwd', example='abcF123x'),
  status?: string(name='status', example='enabled'),
  videoPreviewCount?: long(name='video_preview_count', example='100'),
}

model UpdateShareLinkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShareLink  
}

async function updateShareLinkWithOptions(request: UpdateShareLinkRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateShareLinkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.disableDownload)) {
    body['disable_download'] = request.disableDownload;
  }
  if (!Util.isUnset(request.disablePreview)) {
    body['disable_preview'] = request.disablePreview;
  }
  if (!Util.isUnset(request.disableSave)) {
    body['disable_save'] = request.disableSave;
  }
  if (!Util.isUnset(request.downloadCount)) {
    body['download_count'] = request.downloadCount;
  }
  if (!Util.isUnset(request.downloadLimit)) {
    body['download_limit'] = request.downloadLimit;
  }
  if (!Util.isUnset(request.expiration)) {
    body['expiration'] = request.expiration;
  }
  if (!Util.isUnset(request.previewCount)) {
    body['preview_count'] = request.previewCount;
  }
  if (!Util.isUnset(request.previewLimit)) {
    body['preview_limit'] = request.previewLimit;
  }
  if (!Util.isUnset(request.reportCount)) {
    body['report_count'] = request.reportCount;
  }
  if (!Util.isUnset(request.saveCount)) {
    body['save_count'] = request.saveCount;
  }
  if (!Util.isUnset(request.saveLimit)) {
    body['save_limit'] = request.saveLimit;
  }
  if (!Util.isUnset(request.shareId)) {
    body['share_id'] = request.shareId;
  }
  if (!Util.isUnset(request.shareName)) {
    body['share_name'] = request.shareName;
  }
  if (!Util.isUnset(request.sharePwd)) {
    body['share_pwd'] = request.sharePwd;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.videoPreviewCount)) {
    body['video_preview_count'] = request.videoPreviewCount;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateShareLink',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/share_link/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateShareLink(request: UpdateShareLinkRequest): UpdateShareLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateShareLinkWithOptions(request, headers, runtime);
}

model UpdateStoryRequest {
  cover?: {
    fileId?: string(name='file_id', example='63e5e4340f76cb3ead5f40f68163f0f967c1a7bf'),
    revisionId?: string(name='revision_id', example='642a88dd06e49d9c0a14411ebae606f70edd9a59'),
  }(name='cover'),
  customLabels?: map[string]string(name='custom_labels', deprecated='true'),
  driveId?: string(name='drive_id', example='1'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
  storyName?: string(name='story_name', example='name1'),
}

model UpdateStoryResponseBody = {
  driveId?: string(name='drive_id', example='1'),
  storyId?: string(name='story_id', example='9132e0d8-fe92-4e56-86c3-f5f112308003'),
}

model UpdateStoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateStoryResponseBody(name='body'),
}

async function updateStoryWithOptions(request: UpdateStoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateStoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cover)) {
    body['cover'] = request.cover;
  }
  if (!Util.isUnset(request.customLabels)) {
    body['custom_labels'] = request.customLabels;
  }
  if (!Util.isUnset(request.driveId)) {
    body['drive_id'] = request.driveId;
  }
  if (!Util.isUnset(request.storyId)) {
    body['story_id'] = request.storyId;
  }
  if (!Util.isUnset(request.storyName)) {
    body['story_name'] = request.storyName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateStory',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/image/update_story`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateStory(request: UpdateStoryRequest): UpdateStoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateStoryWithOptions(request, headers, runtime);
}

model UpdateUserRequest {
  avatar?: string(name='avatar', example='http://a.b.c/pds.jpg'),
  description?: string(name='description'),
  email?: string(name='email', example='a@aliyunpds.com'),
  groupInfoList?: [ 
    {
      groupId?: string(name='group_id', example='g123'),
    }
  ](name='group_info_list'),
  nickName?: string(name='nick_name', example='pdsuer'),
  phone?: string(name='phone', example='13900001111'),
  role?: string(name='role', example='user'),
  status?: string(name='status', example='enabled'),
  userData?: map[string]string(name='user_data'),
  userId?: string(name='user_id', example='c9b7a5aa04d14ae3867fdc886fa01da4'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: User  
}

async function updateUserWithOptions(request: UpdateUserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.avatar)) {
    body['avatar'] = request.avatar;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.email)) {
    body['email'] = request.email;
  }
  if (!Util.isUnset(request.groupInfoList)) {
    body['group_info_list'] = request.groupInfoList;
  }
  if (!Util.isUnset(request.nickName)) {
    body['nick_name'] = request.nickName;
  }
  if (!Util.isUnset(request.phone)) {
    body['phone'] = request.phone;
  }
  if (!Util.isUnset(request.role)) {
    body['role'] = request.role;
  }
  if (!Util.isUnset(request.status)) {
    body['status'] = request.status;
  }
  if (!Util.isUnset(request.userData)) {
    body['user_data'] = request.userData;
  }
  if (!Util.isUnset(request.userId)) {
    body['user_id'] = request.userId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUser',
    version = '2022-03-01',
    protocol = 'HTTPS',
    pathname = `/v2/user/update`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return execute(params, req, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateUserWithOptions(request, headers, runtime);
}

