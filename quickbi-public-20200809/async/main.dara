/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'quickbi-public';
  @version = '2020-08-09';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelCollectionRequest {
  userId: string(name='UserId', example='121344444790****', position='Query'),
  worksId: string(name='WorksId', example='d23e84a1-82a0-4292-bfdb-521306c3****', position='Query'),
}

model CancelCollectionResponseBody = {
  requestId?: string(name='RequestId', example='68383D95-D623-4059-AF1B-2310957FA332'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model CancelCollectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCollectionResponseBody(name='body'),
}

/**
  * **true******
  *
 */
async function cancelCollection(request: CancelCollectionRequest): CancelCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCollection', 'POST', '/', 'json', false, 'json', request);
}

model ListCollectionsRequest {
  userId: string(name='UserId', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model ListCollectionsResponseBody = {
  requestId?: string(name='RequestId', example='C67ABB01-F057-48A5-899E-D72682B0B214'),
  result?: [ 
    {
      favoriteId?: int32(name='FavoriteId', example='12373'),
      ownerId?: string(name='OwnerId', example='fe67f61a35a94b7da1a34ba174a7****'),
      worksId?: string(name='WorksId', example='355dd2c5-ffe2-4692-bd12-a2696b43****'),
      worksName?: string(name='WorksName'),
      worksType?: string(name='WorksType', example='dashboardOfflineQuery'),
      workspaceId?: string(name='WorkspaceId', example='9337d121-a78f-4c1b-a8bc-f81de117****'),
      workspaceName?: string(name='WorkspaceName'),
    }
  ](name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ListCollectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCollectionsResponseBody(name='body'),
}

async function listCollections(request: ListCollectionsRequest): ListCollectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCollections', 'POST', '/', 'json', false, 'json', request);
}

model ListFavoriteReportsRequest {
  keyword?: string(name='Keyword', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  treeType?: string(name='TreeType', example='PAGE', position='Query'),
  userId: string(name='UserId', example='b5d8fd9348cc4327****afb604', position='Query'),
}

model ListFavoriteReportsResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        favorite?: boolean(name='Favorite', example='true'),
        gmtCreate?: string(name='GmtCreate', example='1640088615000'),
        gmtModified?: string(name='GmtModified', example='1640595729000'),
        hasEditAuth?: boolean(name='HasEditAuth', example='true'),
        hasViewAuth?: boolean(name='HasViewAuth', example='true'),
        name?: string(name='Name'),
        ownerName?: string(name='OwnerName'),
        ownerNum?: string(name='OwnerNum', example='1365*****238860'),
        publishStatus?: int32(name='PublishStatus', example='1'),
        treeId?: string(name='TreeId', example='977c7698-****-****-****-44b7304d20fc'),
        type?: string(name='Type', example='PAGE'),
        workspaceId?: string(name='WorkspaceId', example='523793cb-****-****-****-aa71c65ffa39'),
        workspaceName?: string(name='WorkspaceName'),
      }
    ](name='Data'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalNum?: int32(name='TotalNum', example='10'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ListFavoriteReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFavoriteReportsResponseBody(name='body'),
}

async function listFavoriteReports(request: ListFavoriteReportsRequest): ListFavoriteReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFavoriteReports', 'POST', '/', 'json', false, 'json', request);
}

model ListRecentViewReportsRequest {
  keyword?: string(name='Keyword', position='Query'),
  offsetDay?: int32(name='OffsetDay', example='10', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  queryMode?: string(name='QueryMode', example='1', position='Query'),
  treeType?: string(name='TreeType', example='PAGE', position='Query'),
  userId: string(name='UserId', example='b5d8fd9348cc4327****afb604', position='Query'),
}

model ListRecentViewReportsResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        favorite?: boolean(name='Favorite', example='true'),
        gmtCreate?: string(name='GmtCreate', example='1640088615000'),
        gmtModified?: string(name='GmtModified', example='1640595729000'),
        hasEditAuth?: boolean(name='HasEditAuth', example='true'),
        hasViewAuth?: boolean(name='HasViewAuth', example='true'),
        latestViewTime?: string(name='LatestViewTime', example='1642067498000'),
        name?: string(name='Name'),
        ownerName?: string(name='OwnerName'),
        ownerNum?: string(name='OwnerNum', example='1365*****238860'),
        publishStatus?: int32(name='PublishStatus', example='1'),
        treeId?: string(name='TreeId', example='977c7698-****-****-****-44b7304d20fc'),
        type?: string(name='Type', example='PAGE'),
        viewCount?: long(name='ViewCount', example='7'),
        workspaceId?: string(name='WorkspaceId', example='523793cb-****-****-****-aa71c65ffa39'),
        workspaceName?: string(name='WorkspaceName'),
      }
    ](name='Data'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalNum?: int32(name='TotalNum', example='2'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ListRecentViewReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRecentViewReportsResponseBody(name='body'),
}

async function listRecentViewReports(request: ListRecentViewReportsRequest): ListRecentViewReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRecentViewReports', 'POST', '/', 'json', false, 'json', request);
}

model ListSharedReportsRequest {
  keyword?: string(name='Keyword', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  treeType?: string(name='TreeType', example='PAGE', position='Query'),
  userId: string(name='UserId', example='b5d8fd9348cc4327****afb604', position='Query'),
}

model ListSharedReportsResponseBody = {
  requestId?: string(name='RequestId', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        favorite?: boolean(name='Favorite', example='true'),
        gmtCreate?: string(name='GmtCreate', example='1640088615000'),
        gmtModified?: string(name='GmtModified', example='1640595729000'),
        hasEditAuth?: boolean(name='HasEditAuth', example='true'),
        hasViewAuth?: boolean(name='HasViewAuth', example='true'),
        name?: string(name='Name'),
        ownerName?: string(name='OwnerName'),
        ownerNum?: string(name='OwnerNum', example='1365*****238860'),
        publishStatus?: int32(name='PublishStatus', example='1'),
        treeId?: string(name='TreeId', example='977c7698-****-****-****-44b7304d20fc'),
        type?: string(name='Type', example='PAGE'),
        workspaceId?: string(name='WorkspaceId', example='523793cb-****-****-****-aa71c65ffa39'),
        workspaceName?: string(name='WorkspaceName'),
      }
    ](name='Data'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalNum?: int32(name='TotalNum', example='2'),
    totalPages?: int32(name='TotalPages', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model ListSharedReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSharedReportsResponseBody(name='body'),
}

async function listSharedReports(request: ListSharedReportsRequest): ListSharedReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSharedReports', 'POST', '/', 'json', false, 'json', request);
}

model SaveFavoritesRequest {
  userId: string(name='UserId', example='121344444790****', position='Query'),
  worksId: string(name='WorksId', example='d23e84a1-82a0-4292-bfdb-521306c3****', position='Query'),
}

model SaveFavoritesResponseBody = {
  requestId?: string(name='RequestId', example='68383D95-D623-4059-AF1B-2310957FA332'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model SaveFavoritesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveFavoritesResponseBody(name='body'),
}

async function saveFavorites(request: SaveFavoritesRequest): SaveFavoritesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveFavorites', 'POST', '/', 'json', false, 'json', request);
}

