/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('vcs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model UnbindPersonRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  profileId?: long(name='ProfileId'),
}

model UnbindPersonResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model UnbindPersonResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPersonResponseBody(name='body'),
}

async function unbindPersonWithOptions(request: UnbindPersonRequest, runtime: Util.RuntimeOptions): UnbindPersonResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindPerson', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindPerson(request: UnbindPersonRequest): UnbindPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindPersonWithOptions(request, runtime);
}

model ListUsersRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userName?: string(name='UserName'),
  userGroupId?: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  address?: string(name='Address'),
  age?: int32(name='Age'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  personList?: map[string]any(name='PersonList'),
  userList?: map[string]any(name='UserList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
}

model ListUsersShrinkRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userName?: string(name='UserName'),
  userGroupId?: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  address?: string(name='Address'),
  age?: int32(name='Age'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  personListShrink?: string(name='PersonList'),
  userListShrink?: string(name='UserList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
}

model ListUsersResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    success?: long(name='Success'),
    records?: [ 
      {
        isvSubId?: string(name='IsvSubId'),
        gender?: string(name='Gender'),
        faceImageUrl?: string(name='FaceImageUrl'),
        userGroupId?: int32(name='UserGroupId'),
        userId?: int32(name='UserId'),
        matchingRate?: string(name='MatchingRate'),
        bizId?: string(name='BizId'),
        attachment?: string(name='Attachment'),
        age?: string(name='Age'),
        idNumber?: string(name='IdNumber'),
        personId?: string(name='PersonId'),
        userName?: string(name='UserName'),
      }
    ](name='Records'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(tmpReq: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(tmpReq);
  var request = new ListUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.personList)) {
    request.personListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.personList, 'PersonList', 'json');
  }
  if (!Util.isUnset(tmpReq.userList)) {
    request.userListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userList, 'UserList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsers', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model SearchObjectRequest {
  corpId?: string(name='CorpId'),
  objectType?: string(name='ObjectType'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  deviceList?: map[string]any(name='DeviceList'),
  picUrl?: string(name='PicUrl'),
  conditions?: map[string]any(name='Conditions'),
  algorithmType?: string(name='AlgorithmType'),
  imagePath?: map[string]any(name='ImagePath'),
}

model SearchObjectShrinkRequest {
  corpId?: string(name='CorpId'),
  objectType?: string(name='ObjectType'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  deviceListShrink?: string(name='DeviceList'),
  picUrl?: string(name='PicUrl'),
  conditionsShrink?: string(name='Conditions'),
  algorithmType?: string(name='AlgorithmType'),
  imagePathShrink?: string(name='ImagePath'),
}

model SearchObjectResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        deviceID?: string(name='DeviceID'),
        compareResult?: string(name='CompareResult'),
        rightBtmX?: int32(name='RightBtmX'),
        score?: float(name='Score'),
        sourceImageUrl?: string(name='SourceImageUrl'),
        sourceID?: string(name='SourceID'),
        rightBtmY?: int32(name='RightBtmY'),
        targetImageUrl?: string(name='TargetImageUrl'),
        leftTopY?: int32(name='LeftTopY'),
        targetImagePath?: string(name='TargetImagePath'),
        shotTime?: long(name='ShotTime'),
        leftTopX?: int32(name='LeftTopX'),
        sourceImagePath?: string(name='SourceImagePath'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model SearchObjectResponse = {
  headers: map[string]string(name='headers'),
  body: SearchObjectResponseBody(name='body'),
}

async function searchObjectWithOptions(tmpReq: SearchObjectRequest, runtime: Util.RuntimeOptions): SearchObjectResponse {
  Util.validateModel(tmpReq);
  var request = new SearchObjectShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceList)) {
    request.deviceListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceList, 'DeviceList', 'json');
  }
  if (!Util.isUnset(tmpReq.conditions)) {
    request.conditionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.conditions, 'Conditions', 'json');
  }
  if (!Util.isUnset(tmpReq.imagePath)) {
    request.imagePathShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.imagePath, 'ImagePath', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchObject', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchObject(request: SearchObjectRequest): SearchObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchObjectWithOptions(request, runtime);
}

model DeleteRecordsRequest {
  corpId?: string(name='CorpId'),
  algorithmType?: string(name='AlgorithmType'),
  attributeName?: string(name='AttributeName'),
  operatorType?: string(name='OperatorType'),
  value?: string(name='Value'),
}

model DeleteRecordsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model DeleteRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordsResponseBody(name='body'),
}

async function deleteRecordsWithOptions(request: DeleteRecordsRequest, runtime: Util.RuntimeOptions): DeleteRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRecords', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRecords(request: DeleteRecordsRequest): DeleteRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordsWithOptions(request, runtime);
}

model StartDeployRequest {
  algorithmId?: string(name='AlgorithmId'),
}

model StartDeployResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model StartDeployResponse = {
  headers: map[string]string(name='headers'),
  body: StartDeployResponseBody(name='body'),
}

async function startDeployWithOptions(request: StartDeployRequest, runtime: Util.RuntimeOptions): StartDeployResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartDeploy', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startDeploy(request: StartDeployRequest): StartDeployResponse {
  var runtime = new Util.RuntimeOptions{};
  return startDeployWithOptions(request, runtime);
}

model GetInventoryRequest {
  commodityCode?: string(name='CommodityCode'),
}

model GetInventoryResponseBody = {
  data?: {
    resultObject?: [ 
      {
        commodityCode?: string(name='CommodityCode'),
        currentInventory?: string(name='CurrentInventory'),
        inventoryId?: string(name='InventoryId'),
        instanceId?: string(name='InstanceId'),
        buyerId?: string(name='BuyerId'),
        validStartTime?: string(name='ValidStartTime'),
        validEndTime?: string(name='ValidEndTime'),
      }
    ](name='ResultObject'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetInventoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetInventoryResponseBody(name='body'),
}

async function getInventoryWithOptions(request: GetInventoryRequest, runtime: Util.RuntimeOptions): GetInventoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInventory', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInventory(request: GetInventoryRequest): GetInventoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInventoryWithOptions(request, runtime);
}

model UploadImageRequest {
  imageUrl?: string(name='ImageUrl'),
}

model UploadImageResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UploadImageResponse = {
  headers: map[string]string(name='headers'),
  body: UploadImageResponseBody(name='body'),
}

async function uploadImageWithOptions(request: UploadImageRequest, runtime: Util.RuntimeOptions): UploadImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadImage', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadImage(request: UploadImageRequest): UploadImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadImageWithOptions(request, runtime);
}

model BindUserRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  matchingRate?: string(name='MatchingRate'),
  personId?: string(name='PersonId'),
  userId?: long(name='UserId'),
}

model BindUserResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model BindUserResponse = {
  headers: map[string]string(name='headers'),
  body: BindUserResponseBody(name='body'),
}

async function bindUserWithOptions(request: BindUserRequest, runtime: Util.RuntimeOptions): BindUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindUser', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindUser(request: BindUserRequest): BindUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindUserWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
}

model DeleteDeviceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model VerifyTrainLabelRequest {
  algorithmId?: string(name='AlgorithmId'),
  labelName?: string(name='LabelName'),
}

model VerifyTrainLabelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model VerifyTrainLabelResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyTrainLabelResponseBody(name='body'),
}

async function verifyTrainLabelWithOptions(request: VerifyTrainLabelRequest, runtime: Util.RuntimeOptions): VerifyTrainLabelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyTrainLabel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyTrainLabel(request: VerifyTrainLabelRequest): VerifyTrainLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyTrainLabelWithOptions(request, runtime);
}

model UpdateMonitorRequest {
  corpId?: string(name='CorpId'),
  taskId?: string(name='TaskId'),
  ruleName?: string(name='RuleName'),
  deviceOperateType?: string(name='DeviceOperateType'),
  deviceList?: string(name='DeviceList'),
  picOperateType?: string(name='PicOperateType'),
  picList?: string(name='PicList'),
  attributeOperateType?: string(name='AttributeOperateType'),
  attributeName?: string(name='AttributeName'),
  attributeValueList?: string(name='AttributeValueList'),
  description?: string(name='Description'),
  ruleExpression?: string(name='RuleExpression'),
  algorithmVendor?: string(name='AlgorithmVendor'),
  notifierType?: string(name='NotifierType'),
  notifierUrl?: string(name='NotifierUrl'),
  notifierAppSecret?: string(name='NotifierAppSecret'),
  notifierTimeOut?: int32(name='NotifierTimeOut'),
  notifierExtendValues?: string(name='NotifierExtendValues'),
}

model UpdateMonitorResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdateMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMonitorResponseBody(name='body'),
}

async function updateMonitorWithOptions(request: UpdateMonitorRequest, runtime: Util.RuntimeOptions): UpdateMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateMonitor', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateMonitor(request: UpdateMonitorRequest): UpdateMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMonitorWithOptions(request, runtime);
}

model GetPersonDetailRequest {
  corpId?: string(name='CorpId'),
  personID?: string(name='PersonID'),
  algorithmType?: string(name='AlgorithmType'),
}

model GetPersonDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    picUrl?: string(name='PicUrl'),
    tagList?: [ 
      {
        tagValueId?: string(name='TagValueId'),
        tagName?: string(name='TagName'),
        tagCode?: string(name='TagCode'),
        tagValue?: string(name='TagValue'),
      }
    ](name='TagList'),
    personId?: string(name='PersonId'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetPersonDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetPersonDetailResponseBody(name='body'),
}

async function getPersonDetailWithOptions(request: GetPersonDetailRequest, runtime: Util.RuntimeOptions): GetPersonDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPersonDetail', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPersonDetail(request: GetPersonDetailRequest): GetPersonDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPersonDetailWithOptions(request, runtime);
}

model DeleteSampleRequest {
  algorithmId?: string(name='AlgorithmId'),
  sampleId?: string(name='SampleId'),
}

model DeleteSampleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model DeleteSampleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSampleResponseBody(name='body'),
}

async function deleteSampleWithOptions(request: DeleteSampleRequest, runtime: Util.RuntimeOptions): DeleteSampleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSample', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSample(request: DeleteSampleRequest): DeleteSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSampleWithOptions(request, runtime);
}

model ListCorpGroupMetricsRequest {
  startTime?: string(name='StartTime'),
  tagCode?: string(name='TagCode'),
  endTime?: string(name='EndTime'),
  groupId?: string(name='GroupId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  deviceId?: string(name='DeviceId'),
  corpId?: string(name='CorpId'),
  userGroup?: string(name='UserGroup'),
  deviceGroup?: string(name='DeviceGroup'),
}

model ListCorpGroupMetricsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  data?: [ 
    {
      dateId?: string(name='DateId'),
      deviceGroupId?: string(name='DeviceGroupId'),
      corpGroupId?: string(name='CorpGroupId'),
      deviceId?: string(name='DeviceId'),
      userGroupId?: string(name='UserGroupId'),
      tagCode?: string(name='TagCode'),
      corpId?: string(name='CorpId'),
      tagMetrics?: string(name='TagMetrics'),
      tagValue?: string(name='TagValue'),
      personID?: string(name='PersonID'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model ListCorpGroupMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpGroupMetricsResponseBody(name='body'),
}

async function listCorpGroupMetricsWithOptions(request: ListCorpGroupMetricsRequest, runtime: Util.RuntimeOptions): ListCorpGroupMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCorpGroupMetrics', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCorpGroupMetrics(request: ListCorpGroupMetricsRequest): ListCorpGroupMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpGroupMetricsWithOptions(request, runtime);
}

model SaveVideoSummaryTaskVideoRequest {
  corpId?: string(name='CorpId'),
  taskId?: long(name='TaskId'),
  saveVideo?: boolean(name='SaveVideo'),
}

model SaveVideoSummaryTaskVideoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model SaveVideoSummaryTaskVideoResponse = {
  headers: map[string]string(name='headers'),
  body: SaveVideoSummaryTaskVideoResponseBody(name='body'),
}

async function saveVideoSummaryTaskVideoWithOptions(request: SaveVideoSummaryTaskVideoRequest, runtime: Util.RuntimeOptions): SaveVideoSummaryTaskVideoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveVideoSummaryTaskVideo', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveVideoSummaryTaskVideo(request: SaveVideoSummaryTaskVideoRequest): SaveVideoSummaryTaskVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveVideoSummaryTaskVideoWithOptions(request, runtime);
}

model DeleteProjectRequest {
  projectIds?: string(name='ProjectIds', description='项目id,多个以”,“隔开'),
}

model DeleteProjectResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProject', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model SearchFaceRequest {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp?: long(name='StartTimeStamp'),
  endTimeStamp?: long(name='EndTimeStamp'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  optionList?: map[string]any(name='OptionList'),
}

model SearchFaceShrinkRequest {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp?: long(name='StartTimeStamp'),
  endTimeStamp?: long(name='EndTimeStamp'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  optionListShrink?: string(name='OptionList'),
}

model SearchFaceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        gbId?: string(name='GbId'),
        targetImageUrl?: string(name='TargetImageUrl'),
        rightBottomY?: float(name='RightBottomY'),
        imageUrl?: string(name='ImageUrl'),
        leftTopY?: float(name='LeftTopY'),
        score?: float(name='Score'),
        sourceId?: string(name='SourceId'),
        rightBottomX?: float(name='RightBottomX'),
        leftTopX?: float(name='LeftTopX'),
        matchSuggestion?: string(name='MatchSuggestion'),
      }
    ](name='Records'),
    pageNo?: int32(name='PageNo'),
    totalPage?: int32(name='TotalPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model SearchFaceResponse = {
  headers: map[string]string(name='headers'),
  body: SearchFaceResponseBody(name='body'),
}

async function searchFaceWithOptions(tmpReq: SearchFaceRequest, runtime: Util.RuntimeOptions): SearchFaceResponse {
  Util.validateModel(tmpReq);
  var request = new SearchFaceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.optionList)) {
    request.optionListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.optionList, 'OptionList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchFace', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchFace(request: SearchFaceRequest): SearchFaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchFaceWithOptions(request, runtime);
}

model ListAccessNumberRequest {
  corpIdList?: string(name='CorpIdList'),
}

model ListAccessNumberResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: [ 
    {
      item?: string(name='Item'),
      count?: string(name='Count'),
      percent?: string(name='Percent'),
    }
  ](name='Data'),
}

model ListAccessNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccessNumberResponseBody(name='body'),
}

async function listAccessNumberWithOptions(request: ListAccessNumberRequest, runtime: Util.RuntimeOptions): ListAccessNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAccessNumber', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAccessNumber(request: ListAccessNumberRequest): ListAccessNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAccessNumberWithOptions(request, runtime);
}

model GetDevicePictureRequest {
  deviceId?: string(name='DeviceId'),
}

model GetDevicePictureResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model GetDevicePictureResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevicePictureResponseBody(name='body'),
}

async function getDevicePictureWithOptions(request: GetDevicePictureRequest, runtime: Util.RuntimeOptions): GetDevicePictureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDevicePicture', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDevicePicture(request: GetDevicePictureRequest): GetDevicePictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDevicePictureWithOptions(request, runtime);
}

model GetMonitorListRequest {
  corpId?: string(name='CorpId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model GetMonitorListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        status?: string(name='Status'),
        ruleExpression?: string(name='RuleExpression'),
        imageMatch?: string(name='ImageMatch'),
        monitorType?: string(name='MonitorType'),
        createDate?: string(name='CreateDate'),
        ruleName?: string(name='RuleName'),
        notifierType?: string(name='NotifierType'),
        description?: string(name='Description'),
        expression?: string(name='Expression'),
        notifierExtendValues?: string(name='NotifierExtendValues'),
        attributes?: string(name='Attributes'),
        deviceList?: string(name='DeviceList'),
        taskId?: string(name='TaskId'),
        modifiedDate?: string(name='ModifiedDate'),
        algorithmVendor?: string(name='AlgorithmVendor'),
      }
    ](name='Records'),
    pageNumber?: int32(name='PageNumber'),
    totalPage?: int32(name='TotalPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetMonitorListResponse = {
  headers: map[string]string(name='headers'),
  body: GetMonitorListResponseBody(name='body'),
}

async function getMonitorListWithOptions(request: GetMonitorListRequest, runtime: Util.RuntimeOptions): GetMonitorListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMonitorList', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMonitorList(request: GetMonitorListRequest): GetMonitorListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonitorListWithOptions(request, runtime);
}

model ListTrainLabelRequest {
  algorithmId?: string(name='AlgorithmId'),
}

model ListTrainLabelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: {
    total?: long(name='Total'),
    list?: [ 
      {
        id?: string(name='Id'),
        labelName?: string(name='LabelName'),
        algorithmId?: string(name='AlgorithmId'),
        trainMarkerCnt?: long(name='TrainMarkerCnt'),
        testMarkerCnt?: long(name='TestMarkerCnt'),
        deleted?: string(name='Deleted'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListTrainLabelResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrainLabelResponseBody(name='body'),
}

async function listTrainLabelWithOptions(request: ListTrainLabelRequest, runtime: Util.RuntimeOptions): ListTrainLabelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTrainLabel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTrainLabel(request: ListTrainLabelRequest): ListTrainLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrainLabelWithOptions(request, runtime);
}

model UpdateTrainLabelRequest {
  labelId?: string(name='LabelId'),
  labelName?: string(name='LabelName'),
}

model UpdateTrainLabelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model UpdateTrainLabelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrainLabelResponseBody(name='body'),
}

async function updateTrainLabelWithOptions(request: UpdateTrainLabelRequest, runtime: Util.RuntimeOptions): UpdateTrainLabelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTrainLabel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTrainLabel(request: UpdateTrainLabelRequest): UpdateTrainLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrainLabelWithOptions(request, runtime);
}

model DeleteTrainLabelRequest {
  algorithmId?: string(name='AlgorithmId'),
  labelId?: string(name='LabelId'),
}

model DeleteTrainLabelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model DeleteTrainLabelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrainLabelResponseBody(name='body'),
}

async function deleteTrainLabelWithOptions(request: DeleteTrainLabelRequest, runtime: Util.RuntimeOptions): DeleteTrainLabelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTrainLabel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTrainLabel(request: DeleteTrainLabelRequest): DeleteTrainLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrainLabelWithOptions(request, runtime);
}

model StopDeployRequest {
  algorithmId?: string(name='AlgorithmId'),
}

model StopDeployResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model StopDeployResponse = {
  headers: map[string]string(name='headers'),
  body: StopDeployResponseBody(name='body'),
}

async function stopDeployWithOptions(request: StopDeployRequest, runtime: Util.RuntimeOptions): StopDeployResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopDeploy', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopDeploy(request: StopDeployRequest): StopDeployResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopDeployWithOptions(request, runtime);
}

model StopMonitorRequest {
  taskId?: string(name='TaskId'),
  algorithmVendor?: string(name='AlgorithmVendor'),
}

model StopMonitorResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model StopMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: StopMonitorResponseBody(name='body'),
}

async function stopMonitorWithOptions(request: StopMonitorRequest, runtime: Util.RuntimeOptions): StopMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopMonitor', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopMonitor(request: StopMonitorRequest): StopMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopMonitorWithOptions(request, runtime);
}

model GetProfileListRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  name?: string(name='Name'),
  catalogId?: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  personIdList?: map[string]any(name='PersonIdList'),
  profileIdList?: map[string]any(name='ProfileIdList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
  faceImageId?: string(name='FaceImageId'),
}

model GetProfileListShrinkRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  name?: string(name='Name'),
  catalogId?: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  personIdListShrink?: string(name='PersonIdList'),
  profileIdListShrink?: string(name='ProfileIdList'),
  matchingRateThreshold?: string(name='MatchingRateThreshold'),
  faceImageId?: string(name='FaceImageId'),
}

model GetProfileListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    success?: boolean(name='Success'),
    records?: [ 
      {
        catalogId?: int32(name='CatalogId'),
        profileId?: int32(name='ProfileId'),
        idNumber?: string(name='IdNumber'),
        sceneType?: string(name='SceneType'),
        isvSubId?: string(name='IsvSubId'),
        gender?: string(name='Gender'),
        faceUrl?: string(name='FaceUrl'),
        bizId?: string(name='BizId'),
        searchMatchingRate?: string(name='SearchMatchingRate'),
        name?: string(name='Name'),
        personId?: string(name='PersonId'),
      }
    ](name='Records'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetProfileListResponse = {
  headers: map[string]string(name='headers'),
  body: GetProfileListResponseBody(name='body'),
}

async function getProfileListWithOptions(tmpReq: GetProfileListRequest, runtime: Util.RuntimeOptions): GetProfileListResponse {
  Util.validateModel(tmpReq);
  var request = new GetProfileListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.personIdList)) {
    request.personIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.personIdList, 'PersonIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.profileIdList)) {
    request.profileIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.profileIdList, 'ProfileIdList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetProfileList', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getProfileList(request: GetProfileListRequest): GetProfileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProfileListWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  corpId?: string(name='CorpId'),
  dataSourceId?: string(name='DataSourceId'),
}

model DeleteDataSourceResponseBody = {
  message?: string(name='Message'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: Util.RuntimeOptions): DeleteDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDataSource', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model GetVideoComposeResultRequest {
  corpId?: string(name='CorpId'),
  taskRequestId?: string(name='TaskRequestId'),
}

model GetVideoComposeResultResponseBody = {
  status?: string(name='Status'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  videoUrl?: string(name='VideoUrl'),
}

model GetVideoComposeResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoComposeResultResponseBody(name='body'),
}

async function getVideoComposeResultWithOptions(request: GetVideoComposeResultRequest, runtime: Util.RuntimeOptions): GetVideoComposeResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoComposeResult', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoComposeResult(request: GetVideoComposeResultRequest): GetVideoComposeResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoComposeResultWithOptions(request, runtime);
}

model ListFaceAlgorithmResultsRequest {
  corpId?: string(name='CorpId'),
  algorithmType?: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model ListFaceAlgorithmResultsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        rightBottomY?: float(name='RightBottomY'),
        dataSourceId?: string(name='DataSourceId'),
        picUrlPath?: string(name='PicUrlPath'),
        faceId?: string(name='FaceId'),
        rightBottomX?: float(name='RightBottomX'),
        sourceId?: string(name='SourceId'),
        maxAge?: string(name='MaxAge'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
        hairStyle?: string(name='HairStyle'),
        leftTopY?: float(name='LeftTopY'),
        minAge?: string(name='MinAge'),
        corpId?: string(name='CorpId'),
        shotTime?: string(name='ShotTime'),
        genderCode?: string(name='GenderCode'),
        capStyle?: string(name='CapStyle'),
        leftTopX?: float(name='LeftTopX'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListFaceAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFaceAlgorithmResultsResponseBody(name='body'),
}

async function listFaceAlgorithmResultsWithOptions(request: ListFaceAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListFaceAlgorithmResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFaceAlgorithmResults', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFaceAlgorithmResults(request: ListFaceAlgorithmResultsRequest): ListFaceAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFaceAlgorithmResultsWithOptions(request, runtime);
}

model GetFaceOptionsRequest {
  corpId?: string(name='CorpId'),
}

model GetFaceOptionsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      key?: string(name='Key'),
      optionList?: [ 
        {
          key?: string(name='Key'),
          name?: string(name='Name'),
        }
      ](name='OptionList'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  code?: string(name='Code'),
}

model GetFaceOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetFaceOptionsResponseBody(name='body'),
}

async function getFaceOptionsWithOptions(request: GetFaceOptionsRequest, runtime: Util.RuntimeOptions): GetFaceOptionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetFaceOptions', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getFaceOptions(request: GetFaceOptionsRequest): GetFaceOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceOptionsWithOptions(request, runtime);
}

model GetProfileDetailRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  profileId?: long(name='ProfileId'),
}

model GetProfileDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    catalogId?: int32(name='CatalogId'),
    profileId?: int32(name='ProfileId'),
    isvSubId?: string(name='IsvSubId'),
    gender?: string(name='Gender'),
    bizId?: string(name='BizId'),
    idNumber?: string(name='IdNumber'),
    sceneType?: string(name='SceneType'),
    phoneNo?: string(name='PhoneNo'),
    faceUrl?: string(name='FaceUrl'),
    liveAddress?: string(name='LiveAddress'),
    name?: string(name='Name'),
    personId?: string(name='PersonId'),
    plateNo?: string(name='PlateNo'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetProfileDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetProfileDetailResponseBody(name='body'),
}

async function getProfileDetailWithOptions(request: GetProfileDetailRequest, runtime: Util.RuntimeOptions): GetProfileDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetProfileDetail', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getProfileDetail(request: GetProfileDetailRequest): GetProfileDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getProfileDetailWithOptions(request, runtime);
}

model CreateDeviceRequest {
  corpId?: string(name='CorpId'),
  cityCode?: string(name='CityCode'),
  longitude?: string(name='Longitude'),
  dataSourceType?: string(name='DataSourceType'),
  deviceName?: string(name='DeviceName'),
  deviceVendor?: string(name='DeviceVendor'),
  deviceGroupName?: string(name='DeviceGroupName'),
  latitude?: string(name='Latitude'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceType?: string(name='DeviceType'),
  subDeviceCount?: long(name='SubDeviceCount'),
}

model CreateDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: [ 
    {
      sipIp?: string(name='SipIp'),
      sipReaml?: string(name='SipReaml'),
      sipDeviceGbId?: string(name='SipDeviceGbId'),
      sipPassword?: string(name='SipPassword'),
      sipPort?: string(name='SipPort'),
      sipGbId?: string(name='SipGbId'),
      subDeviceSipInfo?: [ 
        {
          channelGbId?: string(name='ChannelGbId'),
          mondayCaptureStrategy?: string(name='MondayCaptureStrategy'),
          tuesdayCaptureStrategy?: string(name='TuesdayCaptureStrategy'),
          wednesdayCaptureStrategy?: string(name='WednesdayCaptureStrategy'),
          thursdayCaptureStrategy?: string(name='ThursdayCaptureStrategy'),
          fridayCaptureStrategy?: string(name='FridayCaptureStrategy'),
          saturdayCaptureStrategy?: string(name='SaturdayCaptureStrategy'),
          sundayCaptureStrategy?: string(name='SundayCaptureStrategy'),
        }
      ](name='SubDeviceSipInfo'),
      deviceCode?: string(name='DeviceCode'),
    }
  ](name='Data'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDeviceWithOptions(request: CreateDeviceRequest, runtime: Util.RuntimeOptions): CreateDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceWithOptions(request, runtime);
}

model CreateMarkerRequest {
  algorithmId?: string(name='AlgorithmId'),
  labelId?: string(name='LabelId'),
  sampleId?: string(name='SampleId'),
  content?: string(name='Content'),
}

model CreateMarkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
}

model CreateMarkerResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMarkerResponseBody(name='body'),
}

async function createMarkerWithOptions(request: CreateMarkerRequest, runtime: Util.RuntimeOptions): CreateMarkerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMarker', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMarker(request: CreateMarkerRequest): CreateMarkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMarkerWithOptions(request, runtime);
}

model CreateCorpRequest {
  corpName?: string(name='CorpName'),
  appName?: string(name='AppName'),
  parentCorpId?: string(name='ParentCorpId'),
  description?: string(name='Description'),
  algorithmType?: string(name='AlgorithmType'),
  isvSubId?: string(name='IsvSubId'),
  iconPath?: string(name='IconPath'),
}

model CreateCorpResponseBody = {
  corpId?: string(name='CorpId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model CreateCorpResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCorpResponseBody(name='body'),
}

async function createCorpWithOptions(request: CreateCorpRequest, runtime: Util.RuntimeOptions): CreateCorpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCorp', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCorp(request: CreateCorpRequest): CreateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpWithOptions(request, runtime);
}

model UpdateProfileRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  name?: string(name='Name'),
  catalogId?: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
  profileId?: long(name='ProfileId'),
}

model UpdateProfileResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdateProfileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProfileResponseBody(name='body'),
}

async function updateProfileWithOptions(request: UpdateProfileRequest, runtime: Util.RuntimeOptions): UpdateProfileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProfile', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProfile(request: UpdateProfileRequest): UpdateProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProfileWithOptions(request, runtime);
}

model GetDeviceCaptureStrategyRequest {
  deviceCode?: string(name='DeviceCode', description='设备通道号'),
  deviceType?: string(name='DeviceType', description='设备类型'),
}

model GetDeviceCaptureStrategyResponseBody = {
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误信息'),
  data?: {
    deviceType?: string(name='DeviceType', description='设备类型'),
    deviceCode?: string(name='DeviceCode', description='设备通道'),
    mondayCaptureStrategy?: string(name='MondayCaptureStrategy', description='星期一抓取策略'),
    tuesdayCaptureStrategy?: string(name='TuesdayCaptureStrategy', description='星期二抓取策略'),
    wednesdayCaptureStrategy?: string(name='WednesdayCaptureStrategy', description='星期三抓取策略'),
    thursdayCaptureStrategy?: string(name='ThursdayCaptureStrategy', description='星期四抓取策略'),
    fridayCaptureStrategy?: string(name='FridayCaptureStrategy', description='星期五抓取策略'),
    saturdayCaptureStrategy?: string(name='SaturdayCaptureStrategy', description='星期六抓取策略'),
    sundayCaptureStrategy?: string(name='SundayCaptureStrategy', description='星期日抓取策略'),
  }(name='Data', description='响应数据内容'),
  requestId?: string(name='RequestId', description='RequestId'),
}

model GetDeviceCaptureStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceCaptureStrategyResponseBody(name='body'),
}

async function getDeviceCaptureStrategyWithOptions(request: GetDeviceCaptureStrategyRequest, runtime: Util.RuntimeOptions): GetDeviceCaptureStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceCaptureStrategy', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceCaptureStrategy(request: GetDeviceCaptureStrategyRequest): GetDeviceCaptureStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceCaptureStrategyWithOptions(request, runtime);
}

model StartTrainRequest {
  algorithmId?: string(name='AlgorithmId'),
}

model StartTrainResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model StartTrainResponse = {
  headers: map[string]string(name='headers'),
  body: StartTrainResponseBody(name='body'),
}

async function startTrainWithOptions(request: StartTrainRequest, runtime: Util.RuntimeOptions): StartTrainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartTrain', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startTrain(request: StartTrainRequest): StartTrainResponse {
  var runtime = new Util.RuntimeOptions{};
  return startTrainWithOptions(request, runtime);
}

model DeleteVideoSummaryTaskRequest {
  corpId?: string(name='CorpId'),
  taskId?: string(name='TaskId'),
}

model DeleteVideoSummaryTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model DeleteVideoSummaryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVideoSummaryTaskResponseBody(name='body'),
}

async function deleteVideoSummaryTaskWithOptions(request: DeleteVideoSummaryTaskRequest, runtime: Util.RuntimeOptions): DeleteVideoSummaryTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVideoSummaryTask', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVideoSummaryTask(request: DeleteVideoSummaryTaskRequest): DeleteVideoSummaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVideoSummaryTaskWithOptions(request, runtime);
}

model UnbindUserRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userId?: long(name='UserId'),
}

model UnbindUserResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model UnbindUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindUserResponseBody(name='body'),
}

async function unbindUserWithOptions(request: UnbindUserRequest, runtime: Util.RuntimeOptions): UnbindUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindUser', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindUser(request: UnbindUserRequest): UnbindUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindUserWithOptions(request, runtime);
}

model ListPersonsRequest {
  corpId?: string(name='CorpId'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  algorithmType?: string(name='AlgorithmType'),
}

model ListPersonsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        picUrl?: string(name='PicUrl'),
        tagList?: [ 
          {
            tagValueId?: string(name='TagValueId'),
            tagName?: string(name='TagName'),
            tagCode?: string(name='TagCode'),
            tagValue?: string(name='TagValue'),
          }
        ](name='TagList'),
        firstAppearTime?: string(name='FirstAppearTime'),
        personId?: string(name='PersonId'),
      }
    ](name='Records'),
    pageNo?: string(name='PageNo'),
    totalPage?: string(name='TotalPage'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListPersonsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonsResponseBody(name='body'),
}

async function listPersonsWithOptions(request: ListPersonsRequest, runtime: Util.RuntimeOptions): ListPersonsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPersons', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPersons(request: ListPersonsRequest): ListPersonsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonsWithOptions(request, runtime);
}

model ListMotorAlgorithmResultsRequest {
  corpId?: string(name='CorpId'),
  algorithmType?: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  plateNumber?: string(name='PlateNumber'),
}

model ListMotorAlgorithmResultsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        motorClass?: string(name='MotorClass'),
        rightBottomY?: float(name='RightBottomY'),
        dataSourceId?: string(name='DataSourceId'),
        picUrlPath?: string(name='PicUrlPath'),
        plateClass?: string(name='PlateClass'),
        plateColor?: string(name='PlateColor'),
        rightBottomX?: float(name='RightBottomX'),
        sourceId?: string(name='SourceId'),
        safetyBelt?: string(name='SafetyBelt'),
        motorStyle?: string(name='MotorStyle'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
        leftTopY?: float(name='LeftTopY'),
        motorColor?: string(name='MotorColor'),
        plateNumber?: string(name='PlateNumber'),
        corpId?: string(name='CorpId'),
        shotTime?: string(name='ShotTime'),
        calling?: string(name='Calling'),
        leftTopX?: float(name='LeftTopX'),
        motorBrand?: string(name='MotorBrand'),
        motorModel?: string(name='MotorModel'),
        motorId?: string(name='MotorId'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListMotorAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMotorAlgorithmResultsResponseBody(name='body'),
}

async function listMotorAlgorithmResultsWithOptions(request: ListMotorAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListMotorAlgorithmResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMotorAlgorithmResults', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMotorAlgorithmResults(request: ListMotorAlgorithmResultsRequest): ListMotorAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMotorAlgorithmResultsWithOptions(request, runtime);
}

model ListPersonTraceRequest {
  startTime?: string(name='StartTime'),
  corpId?: string(name='CorpId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  endTime?: string(name='EndTime'),
  dataSourceId?: string(name='DataSourceId'),
  personId?: string(name='PersonId'),
  groupId?: string(name='GroupId'),
}

model ListPersonTraceResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  data?: [ 
    {
      endTargetImage?: string(name='EndTargetImage'),
      lastTime?: string(name='LastTime'),
      startTime?: string(name='StartTime'),
      groupId?: string(name='GroupId'),
      deviceId?: string(name='DeviceId'),
      endSourceImage?: string(name='EndSourceImage'),
      corpId?: string(name='CorpId'),
      startSourceImage?: string(name='StartSourceImage'),
      date?: string(name='Date'),
      personId?: string(name='PersonId'),
      startTargetImage?: string(name='StartTargetImage'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model ListPersonTraceResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonTraceResponseBody(name='body'),
}

async function listPersonTraceWithOptions(request: ListPersonTraceRequest, runtime: Util.RuntimeOptions): ListPersonTraceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPersonTrace', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPersonTrace(request: ListPersonTraceRequest): ListPersonTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonTraceWithOptions(request, runtime);
}

model ListDevicesRequest {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDevicesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        status?: int32(name='Status'),
        sipGBId?: string(name='SipGBId'),
        deviceDirection?: string(name='DeviceDirection'),
        deviceName?: string(name='DeviceName'),
        deviceAddress?: string(name='DeviceAddress'),
        deviceType?: string(name='DeviceType'),
        createTime?: string(name='CreateTime'),
        sipPassword?: string(name='SipPassword'),
        sipServerPort?: string(name='SipServerPort'),
        vendor?: string(name='Vendor'),
        gbId?: string(name='GbId'),
        coverImageUrl?: string(name='CoverImageUrl'),
        accessProtocolType?: string(name='AccessProtocolType'),
        deviceSite?: string(name='DeviceSite'),
        longitude?: string(name='Longitude'),
        latitude?: string(name='Latitude'),
        resolution?: string(name='Resolution'),
        sipServerIp?: string(name='SipServerIp'),
        bitRate?: string(name='BitRate'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDevices', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model ReportDeviceCapacityRequest {
  longitude?: string(name='Longitude'),
  latitude?: string(name='Latitude'),
  audioFormat?: string(name='AudioFormat'),
  presetNum?: string(name='PresetNum'),
  PTZCapacity?: string(name='PTZCapacity'),
  deviceSn?: string(name='DeviceSn'),
  deviceTimeStamp?: string(name='DeviceTimeStamp'),
  streamCapacities?: [ 
    {
      encodeFormat?: string(name='EncodeFormat'),
      govLengthRange?: string(name='GovLengthRange'),
      maxFrameRate?: string(name='MaxFrameRate'),
      bitrateRange?: string(name='BitrateRange'),
      maxStream?: string(name='MaxStream'),
      resolution?: string(name='Resolution'),
    }
  ](name='StreamCapacities'),
}

model ReportDeviceCapacityResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  retryInterval?: string(name='RetryInterval'),
  code?: string(name='Code'),
}

model ReportDeviceCapacityResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDeviceCapacityResponseBody(name='body'),
}

async function reportDeviceCapacityWithOptions(request: ReportDeviceCapacityRequest, runtime: Util.RuntimeOptions): ReportDeviceCapacityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportDeviceCapacity', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportDeviceCapacity(request: ReportDeviceCapacityRequest): ReportDeviceCapacityResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDeviceCapacityWithOptions(request, runtime);
}

model DeleteMarkerRequest {
  algorithmId?: string(name='AlgorithmId'),
  sampleId?: string(name='SampleId'),
  markerId?: string(name='MarkerId'),
}

model DeleteMarkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model DeleteMarkerResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMarkerResponseBody(name='body'),
}

async function deleteMarkerWithOptions(request: DeleteMarkerRequest, runtime: Util.RuntimeOptions): DeleteMarkerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMarker', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMarker(request: DeleteMarkerRequest): DeleteMarkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMarkerWithOptions(request, runtime);
}

model ListPersonTraceDetailsRequest {
  corpId?: string(name='CorpId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  endTime?: string(name='EndTime'),
  personId?: string(name='PersonId'),
  startTime?: string(name='StartTime'),
  subId?: string(name='SubId'),
  dataSourceId?: string(name='DataSourceId'),
}

model ListPersonTraceDetailsResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: long(name='PageSize'),
  pageNumber?: long(name='PageNumber'),
  data?: [ 
    {
      targetPicUrlPath?: string(name='TargetPicUrlPath'),
      subId?: string(name='SubId'),
      rightBottomY?: string(name='RightBottomY'),
      leftTopY?: string(name='LeftTopY'),
      picUrlPath?: string(name='PicUrlPath'),
      dataSourceId?: string(name='DataSourceId'),
      corpId?: string(name='CorpId'),
      shotTime?: string(name='ShotTime'),
      leftTopX?: string(name='LeftTopX'),
      rightBottomX?: string(name='RightBottomX'),
      personId?: string(name='PersonId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
}

model ListPersonTraceDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonTraceDetailsResponseBody(name='body'),
}

async function listPersonTraceDetailsWithOptions(request: ListPersonTraceDetailsRequest, runtime: Util.RuntimeOptions): ListPersonTraceDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPersonTraceDetails', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPersonTraceDetails(request: ListPersonTraceDetailsRequest): ListPersonTraceDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonTraceDetailsWithOptions(request, runtime);
}

model ListMetricsRequest {
  corpId?: string(name='CorpId'),
  tagCode?: string(name='TagCode'),
  aggregateType?: string(name='AggregateType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model ListMetricsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        tagMetric?: string(name='TagMetric'),
        tagCode?: string(name='TagCode'),
        tagValue?: string(name='TagValue'),
        dateTime?: string(name='DateTime'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMetricsResponseBody(name='body'),
}

async function listMetricsWithOptions(request: ListMetricsRequest, runtime: Util.RuntimeOptions): ListMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMetrics', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMetrics(request: ListMetricsRequest): ListMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMetricsWithOptions(request, runtime);
}

model DeleteNVRDeviceRequest {
  deviceCodes?: string(name='DeviceCodes'),
}

model DeleteNVRDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
}

model DeleteNVRDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNVRDeviceResponseBody(name='body'),
}

async function deleteNVRDeviceWithOptions(request: DeleteNVRDeviceRequest, runtime: Util.RuntimeOptions): DeleteNVRDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNVRDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNVRDevice(request: DeleteNVRDeviceRequest): DeleteNVRDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNVRDeviceWithOptions(request, runtime);
}

model AddProfileCatalogRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  catalogName?: string(name='CatalogName'),
  parentCatalogId?: long(name='ParentCatalogId'),
}

model AddProfileCatalogResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    catalogId?: long(name='CatalogId'),
    catalogName?: string(name='CatalogName'),
    isvSubId?: string(name='IsvSubId'),
  }(name='Data'),
  code?: string(name='Code'),
}

model AddProfileCatalogResponse = {
  headers: map[string]string(name='headers'),
  body: AddProfileCatalogResponseBody(name='body'),
}

async function addProfileCatalogWithOptions(request: AddProfileCatalogRequest, runtime: Util.RuntimeOptions): AddProfileCatalogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddProfileCatalog', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addProfileCatalog(request: AddProfileCatalogRequest): AddProfileCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProfileCatalogWithOptions(request, runtime);
}

model SampleListRequest {
  algorithmId?: string(name='AlgorithmId'),
  labelId?: string(name='LabelId'),
  isMarker?: string(name='IsMarker'),
  type?: string(name='Type'),
  usages?: string(name='Usages'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model SampleListResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: {
    total?: long(name='Total'),
    list?: [ 
      {
        id?: string(name='Id'),
        algorithmId?: string(name='AlgorithmId'),
        userId?: string(name='UserId'),
        type?: string(name='Type'),
        usages?: string(name='Usages'),
        content?: string(name='Content'),
        url?: string(name='Url'),
        markerCount?: long(name='MarkerCount'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
      }
    ](name='List'),
  }(name='Data'),
}

model SampleListResponse = {
  headers: map[string]string(name='headers'),
  body: SampleListResponseBody(name='body'),
}

async function sampleListWithOptions(request: SampleListRequest, runtime: Util.RuntimeOptions): SampleListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SampleList', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sampleList(request: SampleListRequest): SampleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return sampleListWithOptions(request, runtime);
}

model RecognizeFaceQualityRequest {
  corpId?: string(name='CorpId'),
  picContent?: string(name='PicContent'),
  picFormat?: string(name='PicFormat'),
  picUrl?: string(name='PicUrl'),
}

model RecognizeFaceQualityResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    qualityScore?: string(name='QualityScore'),
    description?: string(name='Description'),
    attributes?: {
      faceScore?: string(name='FaceScore'),
      rightBottomY?: int32(name='RightBottomY'),
      leftTopY?: int32(name='LeftTopY'),
      faceStyle?: string(name='FaceStyle'),
      faceQuality?: string(name='FaceQuality'),
      leftTopX?: int32(name='LeftTopX'),
      rightBottomX?: int32(name='RightBottomX'),
      targetImageStoragePath?: string(name='TargetImageStoragePath'),
    }(name='Attributes'),
  }(name='Data'),
  code?: string(name='Code'),
}

model RecognizeFaceQualityResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeFaceQualityResponseBody(name='body'),
}

async function recognizeFaceQualityWithOptions(request: RecognizeFaceQualityRequest, runtime: Util.RuntimeOptions): RecognizeFaceQualityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecognizeFaceQuality', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recognizeFaceQuality(request: RecognizeFaceQualityRequest): RecognizeFaceQualityResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeFaceQualityWithOptions(request, runtime);
}

model GetTrainAlgorithmRequest {
  algorithmId?: string(name='AlgorithmId'),
  algorithmVersion?: string(name='AlgorithmVersion'),
}

model GetTrainAlgorithmResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: {
    id?: string(name='Id'),
    algorithmName?: string(name='AlgorithmName'),
    userId?: string(name='UserId'),
    algorithmType?: string(name='AlgorithmType'),
    trainSampleCount?: long(name='TrainSampleCount'),
    testSampleCount?: long(name='TestSampleCount'),
    deleted?: string(name='Deleted'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    trainStatus?: string(name='TrainStatus'),
    trainProgress?: long(name='TrainProgress'),
    trainQueueSize?: long(name='TrainQueueSize'),
    trainEstimateTime?: long(name='TrainEstimateTime'),
    deployStatus?: string(name='DeployStatus'),
    readyTrain?: string(name='ReadyTrain'),
    deployVersion?: string(name='DeployVersion'),
    precision?: float(name='Precision'),
    recall?: float(name='Recall'),
    trainTime?: string(name='TrainTime'),
    deployTime?: string(name='DeployTime'),
    currentVersion?: string(name='CurrentVersion'),
    noReadyReason?: string(name='NoReadyReason'),
    canUnpublish?: string(name='CanUnpublish'),
    instanceList?: [ 
      {
        instanceName?: string(name='InstanceName'),
        instaceId?: string(name='InstaceId'),
        projectId?: string(name='ProjectId'),
      }
    ](name='InstanceList'),
  }(name='Data'),
}

model GetTrainAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrainAlgorithmResponseBody(name='body'),
}

async function getTrainAlgorithmWithOptions(request: GetTrainAlgorithmRequest, runtime: Util.RuntimeOptions): GetTrainAlgorithmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTrainAlgorithm', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTrainAlgorithm(request: GetTrainAlgorithmRequest): GetTrainAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrainAlgorithmWithOptions(request, runtime);
}

model DeleteTrainAlgorithmRequest {
  algorithmId?: string(name='AlgorithmId'),
}

model DeleteTrainAlgorithmResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model DeleteTrainAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrainAlgorithmResponseBody(name='body'),
}

async function deleteTrainAlgorithmWithOptions(request: DeleteTrainAlgorithmRequest, runtime: Util.RuntimeOptions): DeleteTrainAlgorithmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTrainAlgorithm', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTrainAlgorithm(request: DeleteTrainAlgorithmRequest): DeleteTrainAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrainAlgorithmWithOptions(request, runtime);
}

model UpdateMarkerRequest {
  algorithmId?: string(name='AlgorithmId'),
  labelId?: string(name='LabelId'),
  sampleId?: string(name='SampleId'),
  content?: string(name='Content'),
  markerId?: string(name='MarkerId'),
}

model UpdateMarkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model UpdateMarkerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMarkerResponseBody(name='body'),
}

async function updateMarkerWithOptions(request: UpdateMarkerRequest, runtime: Util.RuntimeOptions): UpdateMarkerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateMarker', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateMarker(request: UpdateMarkerRequest): UpdateMarkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateMarkerWithOptions(request, runtime);
}

model ListCorpGroupsRequest {
  corpId?: string(name='CorpId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListCorpGroupsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ string ](name='Records'),
    totalPage?: long(name='TotalPage'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListCorpGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpGroupsResponseBody(name='body'),
}

async function listCorpGroupsWithOptions(request: ListCorpGroupsRequest, runtime: Util.RuntimeOptions): ListCorpGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCorpGroups', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCorpGroups(request: ListCorpGroupsRequest): ListCorpGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpGroupsWithOptions(request, runtime);
}

model StopTrainRequest {
  algorithmId?: string(name='AlgorithmId'),
}

model StopTrainResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model StopTrainResponse = {
  headers: map[string]string(name='headers'),
  body: StopTrainResponseBody(name='body'),
}

async function stopTrainWithOptions(request: StopTrainRequest, runtime: Util.RuntimeOptions): StopTrainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopTrain', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopTrain(request: StopTrainRequest): StopTrainResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopTrainWithOptions(request, runtime);
}

model DescribeDevicesRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  corpIdList?: string(name='CorpIdList'),
}

model DescribeDevicesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNum?: int32(name='PageNum'),
    records?: [ 
      {
        status?: string(name='Status'),
        deviceName?: string(name='DeviceName'),
        deviceType?: string(name='DeviceType'),
        deviceId?: string(name='DeviceId'),
        deviceAddress?: string(name='DeviceAddress'),
        createTime?: string(name='CreateTime'),
        corpId?: string(name='CorpId'),
        longitude?: string(name='Longitude'),
        inProtocol?: string(name='InProtocol'),
        latitude?: string(name='Latitude'),
        vendor?: string(name='Vendor'),
        capturedPictureId?: string(name='CapturedPictureId'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model DescribeDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDevicesResponseBody(name='body'),
}

async function describeDevicesWithOptions(request: DescribeDevicesRequest, runtime: Util.RuntimeOptions): DescribeDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDevices', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDevicesWithOptions(request, runtime);
}

model GetDeviceVideoUrlRequest {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  deviceId?: string(name='DeviceId'),
  outProtocol?: string(name='OutProtocol'),
}

model GetDeviceVideoUrlResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  outProtocol?: string(name='OutProtocol'),
  url?: string(name='Url'),
}

model GetDeviceVideoUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceVideoUrlResponseBody(name='body'),
}

async function getDeviceVideoUrlWithOptions(request: GetDeviceVideoUrlRequest, runtime: Util.RuntimeOptions): GetDeviceVideoUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceVideoUrl', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceVideoUrl(request: GetDeviceVideoUrlRequest): GetDeviceVideoUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceVideoUrlWithOptions(request, runtime);
}

model ListCorpsRequest {
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='分页大小'),
  corpName?: string(name='CorpName'),
}

model ListCorpsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        parentCorpId?: string(name='ParentCorpId'),
        appName?: string(name='AppName'),
        isvSubId?: string(name='IsvSubId'),
        description?: string(name='Description'),
        corpName?: string(name='CorpName'),
        corpId?: string(name='CorpId'),
        acuUsed?: int32(name='AcuUsed'),
        createDate?: string(name='CreateDate'),
        iconPath?: string(name='IconPath'),
        deviceCount?: int32(name='DeviceCount'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListCorpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpsResponseBody(name='body'),
}

async function listCorpsWithOptions(request: ListCorpsRequest, runtime: Util.RuntimeOptions): ListCorpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCorps', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCorps(request: ListCorpsRequest): ListCorpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpsWithOptions(request, runtime);
}

model ListBodyAlgorithmResultsRequest {
  corpId?: string(name='CorpId'),
  algorithmType?: string(name='AlgorithmType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  capStyle?: string(name='CapStyle'),
}

model ListBodyAlgorithmResultsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        rightBottomY?: float(name='RightBottomY'),
        dataSourceId?: string(name='DataSourceId'),
        picUrlPath?: string(name='PicUrlPath'),
        trousersColor?: string(name='TrousersColor'),
        rightBottomX?: float(name='RightBottomX'),
        coatColor?: string(name='CoatColor'),
        sourceId?: string(name='SourceId'),
        maxAge?: string(name='MaxAge'),
        coatLength?: string(name='CoatLength'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
        hairStyle?: string(name='HairStyle'),
        coatStyle?: string(name='CoatStyle'),
        leftTopY?: float(name='LeftTopY'),
        minAge?: string(name='MinAge'),
        corpId?: string(name='CorpId'),
        trousersLength?: string(name='TrousersLength'),
        trousersStyle?: string(name='TrousersStyle'),
        shotTime?: string(name='ShotTime'),
        leftTopX?: float(name='LeftTopX'),
        genderCode?: string(name='GenderCode'),
        personId?: string(name='PersonId'),
        capStyle?: string(name='CapStyle'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListBodyAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBodyAlgorithmResultsResponseBody(name='body'),
}

async function listBodyAlgorithmResultsWithOptions(request: ListBodyAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListBodyAlgorithmResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListBodyAlgorithmResults', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listBodyAlgorithmResults(request: ListBodyAlgorithmResultsRequest): ListBodyAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBodyAlgorithmResultsWithOptions(request, runtime);
}

model GetDeviceConfigRequest {
  deviceSn?: string(name='DeviceSn'),
  deviceTimeStamp?: string(name='DeviceTimeStamp'),
}

model GetDeviceConfigResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  message?: string(name='Message'),
  retryInterval?: string(name='RetryInterval'),
  code?: string(name='Code'),
  audioEnable?: string(name='AudioEnable'),
  audioFormat?: string(name='AudioFormat'),
  bitRate?: string(name='BitRate'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceName?: string(name='DeviceName'),
  encodeFormat?: string(name='EncodeFormat'),
  frameRate?: string(name='FrameRate'),
  govLength?: long(name='GovLength'),
  latitude?: string(name='Latitude'),
  longitude?: string(name='Longitude'),
  OSDList?: [ 
    {
      leftTopX?: string(name='LeftTopX'),
      leftTopY?: string(name='LeftTopY'),
      text?: string(name='Text'),
    }
  ](name='OSDList'),
  OSDTimeEnable?: string(name='OSDTimeEnable'),
  OSDTimeType?: string(name='OSDTimeType'),
  OSDTimeX?: string(name='OSDTimeX'),
  OSDTimeY?: string(name='OSDTimeY'),
  resolution?: string(name='Resolution'),
  deviceId?: string(name='DeviceId'),
  userName?: string(name='UserName'),
  passWord?: string(name='PassWord'),
  protocol?: string(name='Protocol'),
  serverId?: string(name='ServerId'),
  serverPort?: string(name='ServerPort'),
  serverIp?: string(name='ServerIp'),
  channelList?: [ 
    {
      channelGbId?: string(name='ChannelGbId'),
      mondayCaptureStrategy?: string(name='MondayCaptureStrategy'),
      tuesdayCaptureStrategy?: string(name='TuesdayCaptureStrategy'),
      wednesdayCaptureStrategy?: string(name='WednesdayCaptureStrategy'),
      thursdayCaptureStrategy?: string(name='ThursdayCaptureStrategy'),
      fridayCaptureStrategy?: string(name='FridayCaptureStrategy'),
      saturdayCaptureStrategy?: string(name='SaturdayCaptureStrategy'),
      sundayCaptureStrategy?: string(name='SundayCaptureStrategy'),
    }
  ](name='ChannelList'),
}

model GetDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceConfigResponseBody(name='body'),
}

async function getDeviceConfigWithOptions(request: GetDeviceConfigRequest, runtime: Util.RuntimeOptions): GetDeviceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceConfig', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceConfig(request: GetDeviceConfigRequest): GetDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceConfigWithOptions(request, runtime);
}

model UpdateCorpRequest {
  corpId?: string(name='CorpId'),
  corpName?: string(name='CorpName'),
  appName?: string(name='AppName'),
  parentCorpId?: string(name='ParentCorpId'),
  description?: string(name='Description'),
  isvSubId?: string(name='IsvSubId'),
  iconPath?: string(name='IconPath'),
}

model UpdateCorpResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdateCorpResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCorpResponseBody(name='body'),
}

async function updateCorpWithOptions(request: UpdateCorpRequest, runtime: Util.RuntimeOptions): UpdateCorpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCorp', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCorp(request: UpdateCorpRequest): UpdateCorpResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCorpWithOptions(request, runtime);
}

model CreateCorpGroupRequest {
  corpId?: string(name='CorpId'),
  groupId?: string(name='GroupId'),
  clientToken?: string(name='ClientToken'),
}

model CreateCorpGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCorpGroupResponseBody(name='body'),
}

async function createCorpGroupWithOptions(request: CreateCorpGroupRequest, runtime: Util.RuntimeOptions): CreateCorpGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCorpGroup', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCorpGroup(request: CreateCorpGroupRequest): CreateCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCorpGroupWithOptions(request, runtime);
}

model AddDeviceRequest {
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceSite?: string(name='DeviceSite'),
  deviceDirection?: string(name='DeviceDirection'),
  deviceResolution?: string(name='DeviceResolution'),
  bitRate?: string(name='BitRate'),
  corpId?: string(name='CorpId'),
  vendor?: string(name='Vendor'),
}

model AddDeviceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model AddDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDeviceResponseBody(name='body'),
}

async function addDeviceWithOptions(request: AddDeviceRequest, runtime: Util.RuntimeOptions): AddDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDevice(request: AddDeviceRequest): AddDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDeviceWithOptions(request, runtime);
}

model GetPersonListRequest {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  faceUrl?: string(name='FaceUrl'),
  corpIdList?: map[string]any(name='CorpIdList'),
  faceMatchingRateThreshold?: string(name='FaceMatchingRateThreshold'),
  corpId?: string(name='CorpId'),
  personIdList?: map[string]any(name='PersonIdList'),
}

model GetPersonListShrinkRequest {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  faceUrl?: string(name='FaceUrl'),
  corpIdListShrink?: string(name='CorpIdList'),
  faceMatchingRateThreshold?: string(name='FaceMatchingRateThreshold'),
  corpId?: string(name='CorpId'),
  personIdListShrink?: string(name='PersonIdList'),
}

model GetPersonListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        propertyTagList?: [ 
          {
            value?: string(name='Value'),
            tagName?: string(name='TagName'),
            tagCodeName?: string(name='TagCodeName'),
            code?: string(name='Code'),
          }
        ](name='PropertyTagList'),
        faceUrl?: string(name='FaceUrl'),
        searchMatchingRate?: string(name='SearchMatchingRate'),
        personId?: string(name='PersonId'),
        lastShotTime?: long(name='LastShotTime'),
        firstShotTime?: long(name='FirstShotTime'),
      }
    ](name='Records'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetPersonListResponse = {
  headers: map[string]string(name='headers'),
  body: GetPersonListResponseBody(name='body'),
}

async function getPersonListWithOptions(tmpReq: GetPersonListRequest, runtime: Util.RuntimeOptions): GetPersonListResponse {
  Util.validateModel(tmpReq);
  var request = new GetPersonListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.corpIdList)) {
    request.corpIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.corpIdList, 'CorpIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.personIdList)) {
    request.personIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.personIdList, 'PersonIdList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPersonList', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPersonList(request: GetPersonListRequest): GetPersonListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPersonListWithOptions(request, runtime);
}

model CreateTrainLabelRequest {
  algorithmId?: string(name='AlgorithmId'),
  labelName?: string(name='LabelName'),
}

model CreateTrainLabelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: {
    id?: string(name='Id'),
  }(name='Data'),
}

model CreateTrainLabelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrainLabelResponseBody(name='body'),
}

async function createTrainLabelWithOptions(request: CreateTrainLabelRequest, runtime: Util.RuntimeOptions): CreateTrainLabelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTrainLabel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTrainLabel(request: CreateTrainLabelRequest): CreateTrainLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrainLabelWithOptions(request, runtime);
}

model UpdateProfileCatalogRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  catalogId?: long(name='CatalogId'),
  catalogName?: string(name='CatalogName'),
}

model UpdateProfileCatalogResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    catalogId?: long(name='CatalogId'),
    catalogName?: string(name='CatalogName'),
    isvSubId?: string(name='IsvSubId'),
    parentCatalogId?: string(name='ParentCatalogId'),
    profileCount?: long(name='ProfileCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model UpdateProfileCatalogResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProfileCatalogResponseBody(name='body'),
}

async function updateProfileCatalogWithOptions(request: UpdateProfileCatalogRequest, runtime: Util.RuntimeOptions): UpdateProfileCatalogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProfileCatalog', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProfileCatalog(request: UpdateProfileCatalogRequest): UpdateProfileCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProfileCatalogWithOptions(request, runtime);
}

model ListPersonVisitCountRequest {
  corpId?: string(name='CorpId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  aggregateType?: string(name='AggregateType'),
  tagCode?: string(name='TagCode'),
  timeAggregateType?: string(name='TimeAggregateType'),
  minVal?: int32(name='MinVal'),
  maxVal?: int32(name='MaxVal'),
  countType?: string(name='CountType'),
}

model ListPersonVisitCountResponseBody = {
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: string(name='PageSize'),
  pageNo?: string(name='PageNo'),
  data?: [ 
    {
      dayId?: string(name='DayId'),
      groupId?: string(name='GroupId'),
      deviceId?: string(name='DeviceId'),
      tagCode?: string(name='TagCode'),
      corpId?: string(name='CorpId'),
      tagMetrics?: string(name='TagMetrics'),
      hourId?: string(name='HourId'),
      personId?: string(name='PersonId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model ListPersonVisitCountResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonVisitCountResponseBody(name='body'),
}

async function listPersonVisitCountWithOptions(request: ListPersonVisitCountRequest, runtime: Util.RuntimeOptions): ListPersonVisitCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPersonVisitCount', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPersonVisitCount(request: ListPersonVisitCountRequest): ListPersonVisitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonVisitCountWithOptions(request, runtime);
}

model UpdateSampleRequest {
  algorithmId?: string(name='AlgorithmId'),
  sampleId?: string(name='SampleId'),
  labelId?: string(name='LabelId'),
}

model UpdateSampleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  labelId?: string(name='LabelId'),
}

model UpdateSampleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSampleResponseBody(name='body'),
}

async function updateSampleWithOptions(request: UpdateSampleRequest, runtime: Util.RuntimeOptions): UpdateSampleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSample', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSample(request: UpdateSampleRequest): UpdateSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSampleWithOptions(request, runtime);
}

model CreateVideoSummaryTaskRequest {
  corpId?: string(name='CorpId'),
  deviceId?: string(name='DeviceId'),
  startTimeStamp?: long(name='StartTimeStamp'),
  endTimeStamp?: long(name='EndTimeStamp'),
  optionList?: string(name='OptionList'),
  liveVideoSummary?: string(name='LiveVideoSummary'),
}

model CreateVideoSummaryTaskResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model CreateVideoSummaryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVideoSummaryTaskResponseBody(name='body'),
}

async function createVideoSummaryTaskWithOptions(request: CreateVideoSummaryTaskRequest, runtime: Util.RuntimeOptions): CreateVideoSummaryTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVideoSummaryTask', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVideoSummaryTask(request: CreateVideoSummaryTaskRequest): CreateVideoSummaryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoSummaryTaskWithOptions(request, runtime);
}

model ListCorpMetricsRequest {
  corpId?: string(name='CorpId'),
  tagCode?: string(name='TagCode'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  userGroupList?: string(name='UserGroupList'),
  deviceGroupList?: string(name='DeviceGroupList'),
  deviceIdList?: string(name='DeviceIdList'),
}

model ListCorpMetricsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  data?: [ 
    {
      dateId?: string(name='DateId'),
      deviceGroupId?: string(name='DeviceGroupId'),
      deviceId?: string(name='DeviceId'),
      userGroupId?: string(name='UserGroupId'),
      tagCode?: string(name='TagCode'),
      corpId?: string(name='CorpId'),
      tagMetrics?: string(name='TagMetrics'),
      tagValue?: string(name='TagValue'),
      personId?: string(name='PersonId'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model ListCorpMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpMetricsResponseBody(name='body'),
}

async function listCorpMetricsWithOptions(request: ListCorpMetricsRequest, runtime: Util.RuntimeOptions): ListCorpMetricsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCorpMetrics', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCorpMetrics(request: ListCorpMetricsRequest): ListCorpMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCorpMetricsWithOptions(request, runtime);
}

model ListEventAlgorithmDetailsRequest {
  corpId?: string(name='CorpId'),
  eventType?: string(name='EventType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sourceId?: string(name='SourceId'),
  recordId?: string(name='RecordId'),
  eventValue?: string(name='EventValue'),
  extendValue?: string(name='ExtendValue'),
}

model ListEventAlgorithmDetailsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  data?: [ 
    {
      rightBottomY?: string(name='RightBottomY'),
      dataSourceId?: string(name='DataSourceId'),
      picUrlPath?: string(name='PicUrlPath'),
      recordId?: string(name='RecordId'),
      extendValue?: string(name='ExtendValue'),
      faceCount?: string(name='FaceCount'),
      rightBottomX?: string(name='RightBottomX'),
      sourceId?: string(name='SourceId'),
      extraExtendValue?: string(name='ExtraExtendValue'),
      targetPicUrlPath?: string(name='TargetPicUrlPath'),
      eventType?: string(name='EventType'),
      pointY?: string(name='PointY'),
      leftTopY?: string(name='LeftTopY'),
      pointX?: string(name='PointX'),
      corpId?: string(name='CorpId'),
      eventValue?: string(name='EventValue'),
      shotTime?: string(name='ShotTime'),
      leftTopX?: string(name='LeftTopX'),
      tagCode?: string(name='TagCode'),
      tagCodeReliability?: string(name='TagCodeReliability'),
      uuidCode?: string(name='UuidCode'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  success?: string(name='Success'),
}

model ListEventAlgorithmDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventAlgorithmDetailsResponseBody(name='body'),
}

async function listEventAlgorithmDetailsWithOptions(request: ListEventAlgorithmDetailsRequest, runtime: Util.RuntimeOptions): ListEventAlgorithmDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListEventAlgorithmDetails', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listEventAlgorithmDetails(request: ListEventAlgorithmDetailsRequest): ListEventAlgorithmDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventAlgorithmDetailsWithOptions(request, runtime);
}

model GetCatalogListRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
}

model GetCatalogListResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      catalogId?: long(name='CatalogId'),
      catalogName?: string(name='CatalogName'),
      isvSubId?: string(name='IsvSubId'),
      parentCatalogId?: long(name='ParentCatalogId'),
      profileCount?: long(name='ProfileCount'),
    }
  ](name='Data'),
  code?: string(name='Code'),
}

model GetCatalogListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCatalogListResponseBody(name='body'),
}

async function getCatalogListWithOptions(request: GetCatalogListRequest, runtime: Util.RuntimeOptions): GetCatalogListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCatalogList', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCatalogList(request: GetCatalogListRequest): GetCatalogListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCatalogListWithOptions(request, runtime);
}

model ListNVRDeviceRequest {
  deviceCode?: string(name='DeviceCode'),
  corpIdList?: string(name='CorpIdList'),
  isPage?: long(name='IsPage'),
  pageNum?: long(name='PageNum'),
  pageSize?: long(name='PageSize'),
}

model ListNVRDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
  data?: [ 
    {
      deviceCode?: string(name='DeviceCode'),
      deviceName?: string(name='DeviceName'),
      deviceType?: string(name='DeviceType'),
      datasourceType?: string(name='DatasourceType'),
      deviceStatus?: string(name='DeviceStatus'),
      streamStatus?: string(name='StreamStatus'),
      comptureStatus?: string(name='ComptureStatus'),
      regionName?: string(name='RegionName'),
      projectName?: string(name='ProjectName'),
      registrationTime?: string(name='RegistrationTime'),
      accessQuota?: string(name='AccessQuota'),
      channel?: string(name='Channel'),
      deviceSn?: string(name='DeviceSn'),
      type?: string(name='Type'),
      corpId?: string(name='CorpId'),
    }
  ](name='Data'),
}

model ListNVRDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListNVRDeviceResponseBody(name='body'),
}

async function listNVRDeviceWithOptions(request: ListNVRDeviceRequest, runtime: Util.RuntimeOptions): ListNVRDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListNVRDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listNVRDevice(request: ListNVRDeviceRequest): ListNVRDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNVRDeviceWithOptions(request, runtime);
}

model GetDeviceLiveUrlRequest {
  deviceId?: string(name='DeviceId'),
  streamType?: int32(name='StreamType'),
  outProtocol?: string(name='OutProtocol'),
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
}

model GetDeviceLiveUrlResponseBody = {
  streamType?: int32(name='StreamType'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  code?: string(name='Code'),
  outProtocol?: string(name='OutProtocol'),
  url?: string(name='Url'),
}

model GetDeviceLiveUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceLiveUrlResponseBody(name='body'),
}

async function getDeviceLiveUrlWithOptions(request: GetDeviceLiveUrlRequest, runtime: Util.RuntimeOptions): GetDeviceLiveUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceLiveUrl', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceLiveUrl(request: GetDeviceLiveUrlRequest): GetDeviceLiveUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceLiveUrlWithOptions(request, runtime);
}

model DeleteCorpGroupRequest {
  corpId?: string(name='CorpId'),
  groupId?: string(name='GroupId'),
}

model DeleteCorpGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCorpGroupResponseBody(name='body'),
}

async function deleteCorpGroupWithOptions(request: DeleteCorpGroupRequest, runtime: Util.RuntimeOptions): DeleteCorpGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCorpGroup', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCorpGroup(request: DeleteCorpGroupRequest): DeleteCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCorpGroupWithOptions(request, runtime);
}

model UpdateTrainAlgorithmRequest {
  algorithmId?: string(name='AlgorithmId'),
  algorithmName?: string(name='AlgorithmName'),
}

model UpdateTrainAlgorithmResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model UpdateTrainAlgorithmResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrainAlgorithmResponseBody(name='body'),
}

async function updateTrainAlgorithmWithOptions(request: UpdateTrainAlgorithmRequest, runtime: Util.RuntimeOptions): UpdateTrainAlgorithmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTrainAlgorithm', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTrainAlgorithm(request: UpdateTrainAlgorithmRequest): UpdateTrainAlgorithmResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrainAlgorithmWithOptions(request, runtime);
}

model CreateUserRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userName?: string(name='UserName'),
  userGroupId?: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  address?: string(name='Address'),
  age?: int32(name='Age'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
}

model CreateUserResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    gender?: string(name='Gender'),
    faceImageUrl?: string(name='FaceImageUrl'),
    isvSubId?: string(name='IsvSubId'),
    userGroupId?: int32(name='UserGroupId'),
    userId?: int32(name='UserId'),
    bizId?: string(name='BizId'),
    attachment?: string(name='Attachment'),
    age?: string(name='Age'),
    idNumber?: string(name='IdNumber'),
    phoneNo?: string(name='PhoneNo'),
    address?: string(name='Address'),
    userName?: string(name='UserName'),
    plateNo?: string(name='PlateNo'),
  }(name='Data'),
  code?: string(name='Code'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUserWithOptions(request: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUser', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model ListAlgorithmNamesByDeviceIdsRequest {
  gbIds?: string(name='GbIds'),
}

model ListAlgorithmNamesByDeviceIdsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: [ 
    {
      gbId?: string(name='GbId'),
      algorithmNames?: [ string ](name='AlgorithmNames'),
    }
  ](name='Data'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model ListAlgorithmNamesByDeviceIdsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlgorithmNamesByDeviceIdsResponseBody(name='body'),
}

async function listAlgorithmNamesByDeviceIdsWithOptions(request: ListAlgorithmNamesByDeviceIdsRequest, runtime: Util.RuntimeOptions): ListAlgorithmNamesByDeviceIdsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAlgorithmNamesByDeviceIds', '2020-05-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAlgorithmNamesByDeviceIds(request: ListAlgorithmNamesByDeviceIdsRequest): ListAlgorithmNamesByDeviceIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAlgorithmNamesByDeviceIdsWithOptions(request, runtime);
}

model AddDataSourceRequest {
  corpId?: string(name='CorpId'),
  dataSourceName?: string(name='DataSourceName'),
  dataSourceType?: string(name='DataSourceType'),
  description?: string(name='Description'),
  fileRetentionDays?: int32(name='FileRetentionDays'),
}

model AddDataSourceResponseBody = {
  message?: string(name='Message'),
  data?: {
    kafkaTopic?: string(name='KafkaTopic'),
    dataSourceId?: string(name='DataSourceId'),
    ossPath?: string(name='OssPath'),
  }(name='Data'),
  code?: string(name='Code'),
}

model AddDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDataSourceResponseBody(name='body'),
}

async function addDataSourceWithOptions(request: AddDataSourceRequest, runtime: Util.RuntimeOptions): AddDataSourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddDataSource', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addDataSource(request: AddDataSourceRequest): AddDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDataSourceWithOptions(request, runtime);
}

model UnbindCorpGroupRequest {
  corpId?: string(name='CorpId'),
  corpGroupId?: string(name='CorpGroupId'),
}

model UnbindCorpGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UnbindCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindCorpGroupResponseBody(name='body'),
}

async function unbindCorpGroupWithOptions(request: UnbindCorpGroupRequest, runtime: Util.RuntimeOptions): UnbindCorpGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindCorpGroup', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindCorpGroup(request: UnbindCorpGroupRequest): UnbindCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindCorpGroupWithOptions(request, runtime);
}

model UploadFileRequest {
  fileType?: string(name='FileType'),
  MD5?: string(name='MD5'),
  corpId?: string(name='CorpId'),
  fileContent?: string(name='FileContent'),
  fileName?: string(name='FileName'),
  fileAliasName?: string(name='FileAliasName'),
  dataSourceId?: string(name='DataSourceId'),
  filePath?: string(name='FilePath'),
}

model UploadFileResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        ossPath?: string(name='OssPath'),
        sourceId?: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
  code?: string(name='Code'),
}

model UploadFileResponse = {
  headers: map[string]string(name='headers'),
  body: UploadFileResponseBody(name='body'),
}

async function uploadFileWithOptions(request: UploadFileRequest, runtime: Util.RuntimeOptions): UploadFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadFile', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadFileWithOptions(request, runtime);
}

model UpdateUserRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userName?: string(name='UserName'),
  userGroupId?: long(name='UserGroupId'),
  idNumber?: string(name='IdNumber'),
  faceImageUrl?: string(name='FaceImageUrl'),
  faceImageContent?: string(name='FaceImageContent'),
  address?: string(name='Address'),
  age?: int32(name='Age'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  attachment?: string(name='Attachment'),
  bizId?: string(name='BizId'),
  userId?: long(name='UserId'),
}

model UpdateUserResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateUser', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

model GetTrainAlgorithRequest {
  algorithmId?: string(name='AlgorithmId'),
  version?: string(name='Version'),
}

model GetTrainAlgorithResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: {
    id?: string(name='Id'),
    algorithmName?: string(name='AlgorithmName'),
    userId?: string(name='UserId'),
    algorithmType?: string(name='AlgorithmType'),
    trainSampleCount?: long(name='TrainSampleCount'),
    testSampleCount?: long(name='TestSampleCount'),
    deleted?: string(name='Deleted'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    trainStatus?: string(name='TrainStatus'),
    trainProgress?: long(name='TrainProgress'),
    trainQueueSize?: long(name='TrainQueueSize'),
    trainEstimateTime?: long(name='TrainEstimateTime'),
    deployStatus?: string(name='DeployStatus'),
    readyTrain?: string(name='ReadyTrain'),
    deployVersion?: string(name='DeployVersion'),
    precision?: float(name='Precision'),
    recall?: float(name='Recall'),
    noReadyReason?: string(name='NoReadyReason'),
    instanceList?: [ 
      {
        instanceName?: string(name='InstanceName'),
        instaceId?: string(name='InstaceId'),
        projectId?: string(name='ProjectId'),
      }
    ](name='InstanceList'),
  }(name='Data'),
}

model GetTrainAlgorithResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrainAlgorithResponseBody(name='body'),
}

async function getTrainAlgorithWithOptions(request: GetTrainAlgorithRequest, runtime: Util.RuntimeOptions): GetTrainAlgorithResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTrainAlgorith', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTrainAlgorith(request: GetTrainAlgorithRequest): GetTrainAlgorithResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrainAlgorithWithOptions(request, runtime);
}

model GetVideoSummaryTaskResultRequest {
  corpId?: string(name='CorpId'),
  taskId?: string(name='TaskId'),
}

model GetVideoSummaryTaskResultResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model GetVideoSummaryTaskResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoSummaryTaskResultResponseBody(name='body'),
}

async function getVideoSummaryTaskResultWithOptions(request: GetVideoSummaryTaskResultRequest, runtime: Util.RuntimeOptions): GetVideoSummaryTaskResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoSummaryTaskResult', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoSummaryTaskResult(request: GetVideoSummaryTaskResultRequest): GetVideoSummaryTaskResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoSummaryTaskResultWithOptions(request, runtime);
}

model ListDeviceGroupsRequest {
  deviceCodeList?: string(name='DeviceCodeList'),
  corpIdList?: string(name='CorpIdList'),
  name?: string(name='Name'),
  isPage?: int32(name='IsPage'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  group?: string(name='Group'),
  dataSourceType?: string(name='DataSourceType'),
}

model ListDeviceGroupsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      list?: [ 
        {
          deviceStreamStatus?: string(name='DeviceStreamStatus'),
          deviceName?: string(name='DeviceName'),
          deviceStatus?: string(name='DeviceStatus'),
          regionId?: string(name='RegionId'),
          deviceSn?: string(name='DeviceSn'),
          deviceComputeStatus?: string(name='DeviceComputeStatus'),
          installAddress?: string(name='InstallAddress'),
          deviceGroup?: string(name='DeviceGroup'),
          regionName?: string(name='RegionName'),
          dataSourceType?: string(name='DataSourceType'),
          resolvingPower?: string(name='ResolvingPower'),
          deviceCode?: string(name='DeviceCode'),
          bitRate?: string(name='BitRate'),
          codingFormat?: string(name='CodingFormat'),
          type?: string(name='Type'),
        }
      ](name='List'),
      totalCount?: string(name='TotalCount'),
    }
  ](name='Data'),
  code?: string(name='Code'),
}

model ListDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceGroupsResponseBody(name='body'),
}

async function listDeviceGroupsWithOptions(request: ListDeviceGroupsRequest, runtime: Util.RuntimeOptions): ListDeviceGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDeviceGroups', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDeviceGroups(request: ListDeviceGroupsRequest): ListDeviceGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceGroupsWithOptions(request, runtime);
}

model GetUserDetailRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userId?: long(name='UserId'),
  needFaceDetail?: boolean(name='NeedFaceDetail'),
}

model GetUserDetailResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    gender?: string(name='Gender'),
    faceImageUrl?: string(name='FaceImageUrl'),
    isvSubId?: string(name='IsvSubId'),
    userGroupId?: int32(name='UserGroupId'),
    userId?: int32(name='UserId'),
    bizId?: string(name='BizId'),
    attachment?: string(name='Attachment'),
    age?: string(name='Age'),
    idNumber?: string(name='IdNumber'),
    phoneNo?: string(name='PhoneNo'),
    address?: string(name='Address'),
    userName?: string(name='UserName'),
    plateNo?: string(name='PlateNo'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetUserDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserDetailResponseBody(name='body'),
}

async function getUserDetailWithOptions(request: GetUserDetailRequest, runtime: Util.RuntimeOptions): GetUserDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUserDetail', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUserDetail(request: GetUserDetailRequest): GetUserDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserDetailWithOptions(request, runtime);
}

model UpdateDeviceCaptureStrategyRequest {
  deviceType?: string(name='DeviceType', description='设备类型'),
  deviceCode?: string(name='DeviceCode', description='设备通道'),
  mondayCaptureStrategy?: string(name='MondayCaptureStrategy', description='周一图片抓去模式'),
}

model UpdateDeviceCaptureStrategyResponseBody = {
  requestId?: string(name='RequestId', description='RequestId'),
  code?: string(name='Code', description='响应码'),
  message?: string(name='Message', description='响应信息'),
}

model UpdateDeviceCaptureStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceCaptureStrategyResponseBody(name='body'),
}

async function updateDeviceCaptureStrategyWithOptions(request: UpdateDeviceCaptureStrategyRequest, runtime: Util.RuntimeOptions): UpdateDeviceCaptureStrategyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceCaptureStrategy', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceCaptureStrategy(request: UpdateDeviceCaptureStrategyRequest): UpdateDeviceCaptureStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceCaptureStrategyWithOptions(request, runtime);
}

model CreateUserGroupRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userGroupName?: string(name='UserGroupName'),
  parentUserGroupId?: long(name='ParentUserGroupId'),
}

model CreateUserGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    isvSubId?: string(name='IsvSubId'),
    userGroupId?: long(name='UserGroupId'),
    userGroupName?: string(name='UserGroupName'),
  }(name='Data'),
  code?: string(name='Code'),
}

model CreateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserGroupResponseBody(name='body'),
}

async function createUserGroupWithOptions(request: CreateUserGroupRequest, runtime: Util.RuntimeOptions): CreateUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUserGroup', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserGroupWithOptions(request, runtime);
}

model InvokeMotorModelRequest {
  picId?: string(name='PicId'),
  corpId?: string(name='CorpId'),
  picPath?: string(name='PicPath'),
  picUrl?: string(name='PicUrl'),
}

model InvokeMotorModelResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    structList?: string(name='StructList'),
  }(name='Data'),
  code?: string(name='Code'),
}

model InvokeMotorModelResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeMotorModelResponseBody(name='body'),
}

async function invokeMotorModelWithOptions(request: InvokeMotorModelRequest, runtime: Util.RuntimeOptions): InvokeMotorModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeMotorModel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeMotorModel(request: InvokeMotorModelRequest): InvokeMotorModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeMotorModelWithOptions(request, runtime);
}

model ListEventAlgorithmResultsRequest {
  corpId?: string(name='CorpId'),
  eventType?: string(name='EventType'),
  dataSourceId?: string(name='DataSourceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  extendValue?: string(name='ExtendValue'),
}

model ListEventAlgorithmResultsResponseBody = {
  extendValue?: string(name='ExtendValue'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        extendValueTwo?: string(name='ExtendValueTwo'),
        recordId?: string(name='RecordId'),
        picUrlPath?: string(name='PicUrlPath'),
        dataSourceId?: string(name='DataSourceId'),
        extendValue?: string(name='ExtendValue'),
        extendValueThree?: string(name='ExtendValueThree'),
        faceCount?: string(name='FaceCount'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
        eventType?: string(name='EventType'),
        corpId?: string(name='CorpId'),
        shotTime?: string(name='ShotTime'),
        capStyle?: string(name='CapStyle'),
        tagCode?: string(name='TagCode'),
        tagCodeReliability?: string(name='TagCodeReliability'),
        uuidCode?: string(name='UuidCode'),
      }
    ](name='Records'),
    totalPage?: int32(name='TotalPage'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model ListEventAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventAlgorithmResultsResponseBody(name='body'),
}

async function listEventAlgorithmResultsWithOptions(request: ListEventAlgorithmResultsRequest, runtime: Util.RuntimeOptions): ListEventAlgorithmResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListEventAlgorithmResults', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listEventAlgorithmResults(request: ListEventAlgorithmResultsRequest): ListEventAlgorithmResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEventAlgorithmResultsWithOptions(request, runtime);
}

model GetFaceModelResultRequest {
  pictureId?: string(name='PictureId'),
  pictureContent?: string(name='PictureContent'),
  pictureUrl?: string(name='PictureUrl'),
}

model GetFaceModelResultResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        rightBottomY?: float(name='RightBottomY'),
        hairColorReliability?: string(name='HairColorReliability'),
        hairColor?: int32(name='HairColor'),
        faceStyle?: string(name='FaceStyle'),
        glassStyleReliability?: string(name='GlassStyleReliability'),
        mustacheStyleReliability?: string(name='MustacheStyleReliability'),
        respiratorColorReliability?: string(name='RespiratorColorReliability'),
        rightBottomX?: float(name='RightBottomX'),
        ageUpLimit?: int32(name='AgeUpLimit'),
        ageUpLimitReliability?: string(name='AgeUpLimitReliability'),
        hairStyle?: int32(name='HairStyle'),
        ageLowerLimit?: int32(name='AgeLowerLimit'),
        leftTopY?: float(name='LeftTopY'),
        featureData?: [ float ](name='FeatureData'),
        skinColorReliability?: string(name='SkinColorReliability'),
        capColor?: int32(name='CapColor'),
        faceStyleReliability?: string(name='FaceStyleReliability'),
        capStyleReliability?: string(name='CapStyleReliability'),
        genderCodeReliability?: string(name='GenderCodeReliability'),
        hairStyleReliability?: string(name='HairStyleReliability'),
        glassColorReliability?: string(name='GlassColorReliability'),
        ethicCode?: int32(name='EthicCode'),
        respiratorColor?: int32(name='RespiratorColor'),
        mustacheStyle?: string(name='MustacheStyle'),
        glassColor?: int32(name='GlassColor'),
        glassStyle?: int32(name='GlassStyle'),
        skinColor?: int32(name='SkinColor'),
        capColorReliability?: string(name='CapColorReliability'),
        capStyle?: int32(name='CapStyle'),
        genderCode?: int32(name='GenderCode'),
        leftTopX?: float(name='LeftTopX'),
        ageLowerLimitReliability?: string(name='AgeLowerLimitReliability'),
        ethicCodeReliability?: string(name='EthicCodeReliability'),
      }
    ](name='Records'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetFaceModelResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetFaceModelResultResponseBody(name='body'),
}

async function getFaceModelResultWithOptions(request: GetFaceModelResultRequest, runtime: Util.RuntimeOptions): GetFaceModelResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetFaceModelResult', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getFaceModelResult(request: GetFaceModelResultRequest): GetFaceModelResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFaceModelResultWithOptions(request, runtime);
}

model RetryStartDeployRequest {
  algorithmId?: string(name='AlgorithmId'),
}

model RetryStartDeployResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  message?: string(name='Message'),
  code?: string(name='Code'),
}

model RetryStartDeployResponse = {
  headers: map[string]string(name='headers'),
  body: RetryStartDeployResponseBody(name='body'),
}

async function retryStartDeployWithOptions(request: RetryStartDeployRequest, runtime: Util.RuntimeOptions): RetryStartDeployResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RetryStartDeploy', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function retryStartDeploy(request: RetryStartDeployRequest): RetryStartDeployResponse {
  var runtime = new Util.RuntimeOptions{};
  return retryStartDeployWithOptions(request, runtime);
}

model SyncDeviceTimeRequest {
  deviceSn?: string(name='DeviceSn'),
  deviceTimeStamp?: string(name='DeviceTimeStamp'),
}

model SyncDeviceTimeResponseBody = {
  syncInterval?: string(name='SyncInterval'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  retryInterval?: string(name='RetryInterval'),
  NTPServer?: string(name='NTPServer'),
  code?: string(name='Code'),
  timeStamp?: string(name='TimeStamp'),
}

model SyncDeviceTimeResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDeviceTimeResponseBody(name='body'),
}

async function syncDeviceTimeWithOptions(request: SyncDeviceTimeRequest, runtime: Util.RuntimeOptions): SyncDeviceTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SyncDeviceTime', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function syncDeviceTime(request: SyncDeviceTimeRequest): SyncDeviceTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncDeviceTimeWithOptions(request, runtime);
}

model CreateSampleRequest {
  algorithmId?: string(name='AlgorithmId'),
  sampleList?: string(name='SampleList'),
}

model CreateSampleResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
}

model CreateSampleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSampleResponseBody(name='body'),
}

async function createSampleWithOptions(request: CreateSampleRequest, runtime: Util.RuntimeOptions): CreateSampleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSample', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSample(request: CreateSampleRequest): CreateSampleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSampleWithOptions(request, runtime);
}

model AddMonitorRequest {
  corpId?: string(name='CorpId'),
  monitorType?: string(name='MonitorType'),
  description?: string(name='Description'),
  batchIndicator?: int32(name='BatchIndicator'),
  algorithmVendor?: string(name='AlgorithmVendor'),
  notifierType?: string(name='NotifierType'),
  notifierUrl?: string(name='NotifierUrl'),
  notifierAppSecret?: string(name='NotifierAppSecret'),
  notifierTimeOut?: int32(name='NotifierTimeOut'),
  notifierExtendValues?: string(name='NotifierExtendValues'),
}

model AddMonitorResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    taskId?: string(name='TaskId'),
  }(name='Data'),
  code?: string(name='Code'),
}

model AddMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: AddMonitorResponseBody(name='body'),
}

async function addMonitorWithOptions(request: AddMonitorRequest, runtime: Util.RuntimeOptions): AddMonitorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddMonitor', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addMonitor(request: AddMonitorRequest): AddMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addMonitorWithOptions(request, runtime);
}

model DeleteProfileRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  profileId?: long(name='ProfileId'),
}

model DeleteProfileResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model DeleteProfileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProfileResponseBody(name='body'),
}

async function deleteProfileWithOptions(request: DeleteProfileRequest, runtime: Util.RuntimeOptions): DeleteProfileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProfile', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProfile(request: DeleteProfileRequest): DeleteProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProfileWithOptions(request, runtime);
}

model DeleteProfileCatalogRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  catalogId?: string(name='CatalogId'),
}

model DeleteProfileCatalogResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model DeleteProfileCatalogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProfileCatalogResponseBody(name='body'),
}

async function deleteProfileCatalogWithOptions(request: DeleteProfileCatalogRequest, runtime: Util.RuntimeOptions): DeleteProfileCatalogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProfileCatalog', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProfileCatalog(request: DeleteProfileCatalogRequest): DeleteProfileCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProfileCatalogWithOptions(request, runtime);
}

model DeleteIPCDeviceRequest {
  deviceCodes?: string(name='DeviceCodes'),
}

model DeleteIPCDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
}

model DeleteIPCDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIPCDeviceResponseBody(name='body'),
}

async function deleteIPCDeviceWithOptions(request: DeleteIPCDeviceRequest, runtime: Util.RuntimeOptions): DeleteIPCDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteIPCDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteIPCDevice(request: DeleteIPCDeviceRequest): DeleteIPCDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIPCDeviceWithOptions(request, runtime);
}

model GetMonitorResultRequest {
  corpId?: string(name='CorpId'),
  taskId?: string(name='TaskId'),
  minRecordId?: string(name='MinRecordId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  algorithmVendor?: string(name='AlgorithmVendor'),
}

model GetMonitorResultResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    maxId?: string(name='MaxId'),
    records?: [ 
      {
        picUrl?: string(name='PicUrl'),
        rightBottomY?: string(name='RightBottomY'),
        score?: string(name='Score'),
        monitorPicUrl?: string(name='MonitorPicUrl'),
        rightBottomX?: string(name='RightBottomX'),
        extendInfo?: {
          plateNo?: string(name='PlateNo'),
        }(name='ExtendInfo'),
        gbId?: string(name='GbId'),
        leftUpY?: string(name='LeftUpY'),
        leftUpX?: string(name='LeftUpX'),
        shotTime?: string(name='ShotTime'),
        taskId?: string(name='TaskId'),
        targetPicUrl?: string(name='TargetPicUrl'),
      }
    ](name='Records'),
  }(name='Data'),
  code?: string(name='Code'),
}

model GetMonitorResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetMonitorResultResponseBody(name='body'),
}

async function getMonitorResultWithOptions(request: GetMonitorResultRequest, runtime: Util.RuntimeOptions): GetMonitorResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMonitorResult', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMonitorResult(request: GetMonitorResultRequest): GetMonitorResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonitorResultWithOptions(request, runtime);
}

model RecognizeImageRequest {
  corpId?: string(name='CorpId'),
  picContent?: string(name='PicContent'),
  picFormat?: string(name='PicFormat'),
  picUrl?: string(name='PicUrl'),
}

model RecognizeImageResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    bodyList?: [ 
      {
        respiratorColor?: string(name='RespiratorColor'),
        rightBottomY?: string(name='RightBottomY'),
        feature?: string(name='Feature'),
        leftTopY?: string(name='LeftTopY'),
        imageBaseSixFour?: string(name='ImageBaseSixFour'),
        fileName?: string(name='FileName'),
        rightBottomX?: string(name='RightBottomX'),
        localFeature?: string(name='LocalFeature'),
        leftTopX?: string(name='LeftTopX'),
      }
    ](name='BodyList'),
    faceList?: [ 
      {
        quality?: float(name='Quality'),
        respiratorColor?: string(name='RespiratorColor'),
        keyPointQuality?: float(name='KeyPointQuality'),
        rightBottomY?: string(name='RightBottomY'),
        feature?: string(name='Feature'),
        leftTopY?: string(name='LeftTopY'),
        imageBaseSixFour?: string(name='ImageBaseSixFour'),
        fileName?: string(name='FileName'),
        rightBottomX?: string(name='RightBottomX'),
        localFeature?: string(name='LocalFeature'),
        leftTopX?: string(name='LeftTopX'),
      }
    ](name='FaceList'),
  }(name='Data'),
  code?: string(name='Code'),
}

model RecognizeImageResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeImageResponseBody(name='body'),
}

async function recognizeImageWithOptions(request: RecognizeImageRequest, runtime: Util.RuntimeOptions): RecognizeImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecognizeImage', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recognizeImage(request: RecognizeImageRequest): RecognizeImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeImageWithOptions(request, runtime);
}

model DeleteUserRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userId?: long(name='UserId'),
}

model DeleteUserResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUserWithOptions(request: DeleteUserRequest, runtime: Util.RuntimeOptions): DeleteUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUser', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWithOptions(request, runtime);
}

model UpdateDeviceRequest {
  gbId?: string(name='GbId'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceSite?: string(name='DeviceSite'),
  deviceDirection?: string(name='DeviceDirection'),
  deviceResolution?: string(name='DeviceResolution'),
  bitRate?: string(name='BitRate'),
  corpId?: string(name='CorpId'),
  vendor?: string(name='Vendor'),
}

model UpdateDeviceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: string(name='Code'),
}

model UpdateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceResponseBody(name='body'),
}

async function updateDeviceWithOptions(request: UpdateDeviceRequest, runtime: Util.RuntimeOptions): UpdateDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceWithOptions(request, runtime);
}

model RegisterDeviceRequest {
  deviceSn?: string(name='DeviceSn'),
  deviceId?: string(name='DeviceId'),
  serverId?: string(name='ServerId'),
  deviceTimeStamp?: string(name='DeviceTimeStamp'),
}

model RegisterDeviceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  retryInterval?: string(name='RetryInterval'),
  code?: string(name='Code'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model DeleteChannelRequest {
  deviceCodes?: string(name='DeviceCodes'),
}

model DeleteChannelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
}

model DeleteChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChannelResponseBody(name='body'),
}

async function deleteChannelWithOptions(request: DeleteChannelRequest, runtime: Util.RuntimeOptions): DeleteChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteChannel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteChannel(request: DeleteChannelRequest): DeleteChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChannelWithOptions(request, runtime);
}

model GetTrainLabelRequest {
  labelId?: string(name='LabelId'),
}

model GetTrainLabelResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: {
    ID?: string(name='ID'),
    labelName?: string(name='LabelName'),
    algorithmId?: string(name='AlgorithmId'),
    trainMarkerCnt?: long(name='TrainMarkerCnt'),
    testMarkerCnt?: long(name='TestMarkerCnt'),
    deleted?: string(name='Deleted'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
  }(name='Data'),
}

model GetTrainLabelResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrainLabelResponseBody(name='body'),
}

async function getTrainLabelWithOptions(request: GetTrainLabelRequest, runtime: Util.RuntimeOptions): GetTrainLabelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTrainLabel', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTrainLabel(request: GetTrainLabelRequest): GetTrainLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTrainLabelWithOptions(request, runtime);
}

model ListMarkerRequest {
  algorithmId?: string(name='AlgorithmId'),
  sampleId?: string(name='SampleId'),
  pageSize?: string(name='PageSize'),
  pageNum?: string(name='PageNum'),
}

model ListMarkerResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  message?: string(name='Message'),
  code?: string(name='Code'),
  data?: {
    total?: long(name='Total'),
    list?: [ 
      {
        id?: string(name='Id'),
        algorithmId?: string(name='AlgorithmId'),
        userId?: string(name='UserId'),
        labelId?: string(name='LabelId'),
        labelName?: string(name='LabelName'),
        sampleId?: string(name='SampleId'),
        content?: string(name='Content'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListMarkerResponse = {
  headers: map[string]string(name='headers'),
  body: ListMarkerResponseBody(name='body'),
}

async function listMarkerWithOptions(request: ListMarkerRequest, runtime: Util.RuntimeOptions): ListMarkerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMarker', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMarker(request: ListMarkerRequest): ListMarkerResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMarkerWithOptions(request, runtime);
}

model CreateVideoComposeTaskRequest {
  corpId?: string(name='CorpId'),
  bucketName?: string(name='BucketName'),
  domainName?: string(name='DomainName'),
  imageFileNames?: string(name='ImageFileNames'),
  audioFileName?: string(name='AudioFileName'),
  imageParameters?: string(name='ImageParameters'),
  videoFormat?: string(name='VideoFormat'),
  videoFrameRate?: int32(name='VideoFrameRate'),
}

model CreateVideoComposeTaskResponseBody = {
  bucketName?: string(name='BucketName'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  domainName?: string(name='DomainName'),
  code?: string(name='Code'),
}

model CreateVideoComposeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVideoComposeTaskResponseBody(name='body'),
}

async function createVideoComposeTaskWithOptions(request: CreateVideoComposeTaskRequest, runtime: Util.RuntimeOptions): CreateVideoComposeTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVideoComposeTask', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVideoComposeTask(request: CreateVideoComposeTaskRequest): CreateVideoComposeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVideoComposeTaskWithOptions(request, runtime);
}

model DeleteDeviceForInstanceRequest {
  instanceId?: string(name='InstanceId'),
  devices?: [ 
    {
      deviceId?: string(name='DeviceId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Devices'),
  projectId?: string(name='ProjectId'),
  algorithmId?: string(name='AlgorithmId'),
  deleteInstanceFlag?: boolean(name='DeleteInstanceFlag'),
  deviceCount?: string(name='DeviceCount'),
}

model DeleteDeviceForInstanceShrinkRequest {
  instanceId?: string(name='InstanceId'),
  devicesShrink?: string(name='Devices'),
  projectId?: string(name='ProjectId'),
  algorithmId?: string(name='AlgorithmId'),
  deleteInstanceFlag?: boolean(name='DeleteInstanceFlag'),
  deviceCount?: string(name='DeviceCount'),
}

model DeleteDeviceForInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteDeviceForInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceForInstanceResponseBody(name='body'),
}

async function deleteDeviceForInstanceWithOptions(tmpReq: DeleteDeviceForInstanceRequest, runtime: Util.RuntimeOptions): DeleteDeviceForInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteDeviceForInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.devices)) {
    request.devicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.devices, 'Devices', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceForInstance', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceForInstance(request: DeleteDeviceForInstanceRequest): DeleteDeviceForInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceForInstanceWithOptions(request, runtime);
}

model UpdateUserGroupRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userGroupId?: long(name='UserGroupId'),
  userGroupName?: string(name='UserGroupName'),
}

model UpdateUserGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    isvSubId?: string(name='IsvSubId'),
    userGroupId?: long(name='UserGroupId'),
    userGroupName?: string(name='UserGroupName'),
    userCount?: long(name='UserCount'),
    parentUserGroupId?: string(name='ParentUserGroupId'),
  }(name='Data'),
  code?: string(name='Code'),
}

model UpdateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserGroupResponseBody(name='body'),
}

async function updateUserGroupWithOptions(request: UpdateUserGroupRequest, runtime: Util.RuntimeOptions): UpdateUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateUserGroup', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserGroupWithOptions(request, runtime);
}

model BindPersonRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  personMatchingRate?: string(name='PersonMatchingRate'),
  personId?: string(name='PersonId'),
  profileId?: long(name='ProfileId'),
}

model BindPersonResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model BindPersonResponse = {
  headers: map[string]string(name='headers'),
  body: BindPersonResponseBody(name='body'),
}

async function bindPersonWithOptions(request: BindPersonRequest, runtime: Util.RuntimeOptions): BindPersonResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindPerson', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindPerson(request: BindPersonRequest): BindPersonResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindPersonWithOptions(request, runtime);
}

model GetBodyOptionsRequest {
  corpId?: string(name='CorpId'),
}

model GetBodyOptionsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      key?: string(name='Key'),
      optionList?: [ 
        {
          key?: string(name='Key'),
          name?: string(name='Name'),
        }
      ](name='OptionList'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  code?: string(name='Code'),
}

model GetBodyOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetBodyOptionsResponseBody(name='body'),
}

async function getBodyOptionsWithOptions(request: GetBodyOptionsRequest, runtime: Util.RuntimeOptions): GetBodyOptionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetBodyOptions', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getBodyOptions(request: GetBodyOptionsRequest): GetBodyOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBodyOptionsWithOptions(request, runtime);
}

model BindCorpGroupRequest {
  corpId?: string(name='CorpId'),
  corpGroupId?: string(name='CorpGroupId'),
}

model BindCorpGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: BindCorpGroupResponseBody(name='body'),
}

async function bindCorpGroupWithOptions(request: BindCorpGroupRequest, runtime: Util.RuntimeOptions): BindCorpGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindCorpGroup', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindCorpGroup(request: BindCorpGroupRequest): BindCorpGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindCorpGroupWithOptions(request, runtime);
}

model ListNVRChannelDeviceRequest {
  deviceCode?: string(name='DeviceCode'),
  isPage?: string(name='IsPage'),
  pageNum?: string(name='PageNum'),
  pageSize?: string(name='PageSize'),
}

model ListNVRChannelDeviceResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
  data?: [ 
    {
      deviceCode?: string(name='DeviceCode'),
      deviceName?: string(name='DeviceName'),
      deviceType?: string(name='DeviceType'),
      datasourceType?: string(name='DatasourceType'),
      deviceStatus?: string(name='DeviceStatus'),
      streamStatus?: string(name='StreamStatus'),
      comptureStatus?: string(name='ComptureStatus'),
      deviceSn?: string(name='DeviceSn'),
      sampleName?: string(name='SampleName'),
      regionName?: string(name='RegionName'),
      corpId?: string(name='CorpId'),
    }
  ](name='Data'),
}

model ListNVRChannelDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListNVRChannelDeviceResponseBody(name='body'),
}

async function listNVRChannelDeviceWithOptions(request: ListNVRChannelDeviceRequest, runtime: Util.RuntimeOptions): ListNVRChannelDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListNVRChannelDevice', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listNVRChannelDevice(request: ListNVRChannelDeviceRequest): ListNVRChannelDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNVRChannelDeviceWithOptions(request, runtime);
}

model AddProfileRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  name?: string(name='Name'),
  catalogId?: long(name='CatalogId'),
  idNumber?: string(name='IdNumber'),
  faceUrl?: string(name='FaceUrl'),
  liveAddress?: string(name='LiveAddress'),
  gender?: int32(name='Gender'),
  plateNo?: string(name='PlateNo'),
  phoneNo?: string(name='PhoneNo'),
  sceneType?: string(name='SceneType'),
  bizId?: string(name='BizId'),
}

model AddProfileResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    catalogId?: int32(name='CatalogId'),
    profileId?: int32(name='ProfileId'),
    isvSubId?: string(name='IsvSubId'),
    gender?: string(name='Gender'),
    bizId?: string(name='BizId'),
    idNumber?: string(name='IdNumber'),
    sceneType?: string(name='SceneType'),
    phoneNo?: string(name='PhoneNo'),
    faceUrl?: string(name='FaceUrl'),
    liveAddress?: string(name='LiveAddress'),
    name?: string(name='Name'),
    plateNo?: string(name='PlateNo'),
  }(name='Data'),
  code?: string(name='Code'),
}

model AddProfileResponse = {
  headers: map[string]string(name='headers'),
  body: AddProfileResponseBody(name='body'),
}

async function addProfileWithOptions(request: AddProfileRequest, runtime: Util.RuntimeOptions): AddProfileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddProfile', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addProfile(request: AddProfileRequest): AddProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return addProfileWithOptions(request, runtime);
}

model DeleteUserGroupRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
  userGroupId?: string(name='UserGroupId'),
}

model DeleteUserGroupResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  code?: string(name='Code'),
}

model DeleteUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserGroupResponseBody(name='body'),
}

async function deleteUserGroupWithOptions(request: DeleteUserGroupRequest, runtime: Util.RuntimeOptions): DeleteUserGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUserGroup', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserGroupWithOptions(request, runtime);
}

model ListUserGroupsRequest {
  corpId?: string(name='CorpId'),
  isvSubId?: string(name='IsvSubId'),
}

model ListUserGroupsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      updateTime?: string(name='UpdateTime'),
      isvSubId?: string(name='IsvSubId'),
      userGroupId?: long(name='UserGroupId'),
      createTime?: string(name='CreateTime'),
      userGroupName?: string(name='UserGroupName'),
      userCount?: long(name='UserCount'),
      parentUserGroupId?: long(name='ParentUserGroupId'),
      creator?: string(name='Creator'),
    }
  ](name='Data'),
  code?: string(name='Code'),
}

model ListUserGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserGroupsResponseBody(name='body'),
}

async function listUserGroupsWithOptions(request: ListUserGroupsRequest, runtime: Util.RuntimeOptions): ListUserGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUserGroups', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserGroupsWithOptions(request, runtime);
}

model SearchBodyRequest {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp?: long(name='StartTimeStamp'),
  endTimeStamp?: long(name='EndTimeStamp'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  optionList?: map[string]any(name='OptionList'),
}

model SearchBodyShrinkRequest {
  corpId?: string(name='CorpId'),
  gbId?: string(name='GbId'),
  startTimeStamp?: long(name='StartTimeStamp'),
  endTimeStamp?: long(name='EndTimeStamp'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  optionListShrink?: string(name='OptionList'),
}

model SearchBodyResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    records?: [ 
      {
        gbId?: string(name='GbId'),
        targetImageUrl?: string(name='TargetImageUrl'),
        rightBottomY?: float(name='RightBottomY'),
        imageUrl?: string(name='ImageUrl'),
        leftTopY?: float(name='LeftTopY'),
        score?: float(name='Score'),
        leftTopX?: float(name='LeftTopX'),
        rightBottomX?: float(name='RightBottomX'),
      }
    ](name='Records'),
    pageNo?: int32(name='PageNo'),
    totalPage?: int32(name='TotalPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  code?: string(name='Code'),
}

model SearchBodyResponse = {
  headers: map[string]string(name='headers'),
  body: SearchBodyResponseBody(name='body'),
}

async function searchBodyWithOptions(tmpReq: SearchBodyRequest, runtime: Util.RuntimeOptions): SearchBodyResponse {
  Util.validateModel(tmpReq);
  var request = new SearchBodyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.optionList)) {
    request.optionListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.optionList, 'OptionList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchBody', '2020-05-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchBody(request: SearchBodyRequest): SearchBodyResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchBodyWithOptions(request, runtime);
}

