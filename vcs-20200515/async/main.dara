/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Vcs';
  @version = '2020-05-15';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddAiotDevicesRequest {
  aiotDeviceList: [ 
    {
      corpId: string(name='CorpId'),
      deviceId: string(name='DeviceId'),
      IPAddr?: string(name='IPAddr'),
      latitude?: float(name='Latitude'),
      longitude?: float(name='Longitude'),
      name: string(name='Name'),
      place?: string(name='Place'),
      port?: long(name='Port'),
    }
  ](name='AiotDeviceList', position='Body'),
}

model AddAiotDevicesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resultList?: [ 
    {
      code?: string(name='Code'),
      deviceId?: string(name='DeviceId'),
      id?: string(name='Id'),
      message?: string(name='Message'),
      password?: string(name='Password'),
      serverHost?: string(name='ServerHost'),
      serverHostInternal?: string(name='ServerHostInternal'),
      serverId?: string(name='ServerId'),
      serverIp?: string(name='ServerIp'),
      serverIpInternal?: string(name='ServerIpInternal'),
      serverPort?: string(name='ServerPort'),
      serverWssPort?: string(name='ServerWssPort'),
      userId?: string(name='UserId'),
    }
  ](name='ResultList'),
}

model AddAiotDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: AddAiotDevicesResponseBody(name='body'),
}

async function addAiotDevices(request: AddAiotDevicesRequest): AddAiotDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAiotDevices', 'POST', '/', 'json', true, 'form', request);
}

model AddAiotPersonTableRequest {
  id: string(name='Id', position='Body'),
  personTable: {
    name: string(name='Name'),
    personTableId: string(name='PersonTableId'),
    type: long(name='Type'),
    verificationModelList: [ long ](name='VerificationModelList'),
  }(name='PersonTable', position='Body'),
}

model AddAiotPersonTableResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  personTableId?: string(name='PersonTableId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddAiotPersonTableResponse = {
  headers: map[string]string(name='headers'),
  body: AddAiotPersonTableResponseBody(name='body'),
}

async function addAiotPersonTable(request: AddAiotPersonTableRequest): AddAiotPersonTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAiotPersonTable', 'POST', '/', 'json', true, 'form', request);
}

model AddAiotPersonTableItemRequest {
  id: string(name='Id', position='Body'),
  personTableId: string(name='PersonTableId', position='Body'),
  personTableItem: {
    identificationList?: [ 
      {
        number?: string(name='Number'),
        type?: long(name='Type'),
      }
    ](name='IdentificationList'),
    identificationNum?: long(name='IdentificationNum'),
    imageList?: [ 
      {
        data?: string(name='Data'),
        deviceId?: string(name='DeviceId'),
        eventSort?: string(name='EventSort'),
        featureInfo?: {
          algorithmType?: string(name='AlgorithmType'),
          algorithmVersion?: string(name='AlgorithmVersion'),
          featureData?: string(name='FeatureData'),
          imageId?: string(name='ImageId'),
          ojectId?: string(name='OjectId'),
          tabId?: string(name='TabId'),
          vendor?: string(name='Vendor'),
        }(name='FeatureInfo'),
        fileFormat?: string(name='FileFormat'),
        height?: long(name='Height'),
        imageId?: string(name='ImageId'),
        shotTime?: string(name='ShotTime'),
        size?: long(name='Size'),
        storagePath?: string(name='StoragePath'),
        type?: string(name='Type'),
        width?: long(name='Width'),
      }
    ](name='ImageList'),
    imageNum?: long(name='ImageNum'),
    lastChange?: string(name='LastChange'),
    personCode?: string(name='PersonCode'),
    personId: string(name='PersonId'),
    personName: string(name='PersonName'),
    personTableId: string(name='PersonTableId'),
    remarks?: string(name='Remarks'),
    timeTemplateNum?: long(name='TimeTemplateNum'),
  }(name='PersonTableItem', position='Body'),
}

model AddAiotPersonTableItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  personTableItemId?: string(name='PersonTableItemId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddAiotPersonTableItemResponse = {
  headers: map[string]string(name='headers'),
  body: AddAiotPersonTableItemResponseBody(name='body'),
}

async function addAiotPersonTableItem(request: AddAiotPersonTableItemRequest): AddAiotPersonTableItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAiotPersonTableItem', 'POST', '/', 'json', true, 'form', request);
}

model AddAiotPersonTableItemsRequest {
  id: string(name='Id', position='Body'),
  personTableId: string(name='PersonTableId', position='Body'),
  personTableItemList: [ 
    {
      identificationList?: [ 
        {
          number?: string(name='Number'),
          type?: long(name='Type'),
        }
      ](name='IdentificationList'),
      identificationNum?: long(name='IdentificationNum'),
      imageList?: [ 
        {
          data?: string(name='Data'),
          deviceId?: string(name='DeviceId'),
          eventSort?: string(name='EventSort'),
          featureInfo?: {
            algorithmType?: string(name='AlgorithmType'),
            algorithmVersion?: string(name='AlgorithmVersion'),
            featureData?: string(name='FeatureData'),
            imageId?: string(name='ImageId'),
            objectId?: string(name='ObjectId'),
            tabIed?: string(name='TabIed'),
            vendor?: string(name='Vendor'),
          }(name='FeatureInfo'),
          fileFormat?: string(name='FileFormat'),
          height?: long(name='Height'),
          imageId?: string(name='ImageId'),
          shotTime?: string(name='ShotTime'),
          size?: long(name='Size'),
          storagePath?: string(name='StoragePath'),
          type?: string(name='Type'),
          width?: long(name='Width'),
        }
      ](name='ImageList'),
      imageNum?: long(name='ImageNum'),
      personCode?: string(name='PersonCode'),
      personId: string(name='PersonId'),
      personName?: string(name='PersonName'),
      remarks?: string(name='Remarks'),
    }
  ](name='PersonTableItemList', position='Body'),
}

model AddAiotPersonTableItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resultList?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      personTableItemId?: string(name='PersonTableItemId'),
    }
  ](name='ResultList'),
}

model AddAiotPersonTableItemsResponse = {
  headers: map[string]string(name='headers'),
  body: AddAiotPersonTableItemsResponseBody(name='body'),
}

async function addAiotPersonTableItems(request: AddAiotPersonTableItemsRequest): AddAiotPersonTableItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAiotPersonTableItems', 'POST', '/', 'json', true, 'form', request);
}

model AddAiotPersonTableItemsForTablesRequest {
  personTableItemList: [ 
    {
      identificationList?: [ 
        {
          number?: string(name='Number'),
          type?: long(name='Type'),
        }
      ](name='IdentificationList'),
      identificationNum?: long(name='IdentificationNum'),
      imageList?: [ 
        {
          data?: string(name='Data'),
          deviceId?: string(name='DeviceId'),
          eventSort?: string(name='EventSort'),
          featureInfo?: {
            algorithmType?: string(name='AlgorithmType'),
            algorithmVersion?: string(name='AlgorithmVersion'),
            featureData?: string(name='FeatureData'),
            imageId?: string(name='ImageId'),
            objectId?: string(name='ObjectId'),
            tabIed?: string(name='TabIed'),
            vendor?: string(name='Vendor'),
          }(name='FeatureInfo'),
          fileFormat?: string(name='FileFormat'),
          height?: long(name='Height'),
          imageId?: string(name='ImageId'),
          shotTime?: string(name='ShotTime'),
          size?: long(name='Size'),
          storagePath?: string(name='StoragePath'),
          type?: string(name='Type'),
          width?: long(name='Width'),
        }
      ](name='ImageList'),
      imageNum?: long(name='ImageNum'),
      personCode?: string(name='PersonCode'),
      personId: string(name='PersonId'),
      personName?: string(name='PersonName'),
      remarks?: string(name='Remarks'),
    }
  ](name='PersonTableItemList', position='Body'),
  personTableList: [ 
    {
      id: string(name='Id'),
      personTableId?: string(name='PersonTableId'),
    }
  ](name='PersonTableList', position='Body'),
}

model AddAiotPersonTableItemsForTablesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddAiotPersonTableItemsForTablesResponse = {
  headers: map[string]string(name='headers'),
  body: AddAiotPersonTableItemsForTablesResponseBody(name='body'),
}

async function addAiotPersonTableItemsForTables(request: AddAiotPersonTableItemsForTablesRequest): AddAiotPersonTableItemsForTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAiotPersonTableItemsForTables', 'POST', '/', 'json', true, 'form', request);
}

model AddAiotVehicleTableItemsRequest {
  id: string(name='Id', position='Body'),
  vehicleTableId: string(name='VehicleTableId', position='Body'),
  vehicleTableItem: {
    beginTime?: string(name='BeginTime'),
    endTime?: string(name='EndTime'),
    ownerName?: string(name='OwnerName'),
    phoneNo?: string(name='PhoneNo'),
    plateNo?: string(name='PlateNo'),
    remarks?: string(name='Remarks'),
    vehicleTableItemId: string(name='VehicleTableItemId'),
  }(name='VehicleTableItem', position='Body'),
}

model AddAiotVehicleTableItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddAiotVehicleTableItemsResponse = {
  headers: map[string]string(name='headers'),
  body: AddAiotVehicleTableItemsResponseBody(name='body'),
}

async function addAiotVehicleTableItems(request: AddAiotVehicleTableItemsRequest): AddAiotVehicleTableItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAiotVehicleTableItems', 'POST', '/', 'json', true, 'form', request);
}

model AddCameraForInstanceRequest {
  cameraIds: [ string ](name='CameraIds', description='设备Id', position='Body'),
  instanceId: string(name='InstanceId', description='实例Id', position='Body'),
}

model AddCameraForInstanceResponseBody = {
  code?: string(name='Code', description='code码'),
  message?: string(name='Message', description='返回结果消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddCameraForInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AddCameraForInstanceResponseBody(name='body'),
}

async function addCameraForInstance(request: AddCameraForInstanceRequest): AddCameraForInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCameraForInstance', 'POST', '/', 'json', true, 'form', request);
}

model AddChannelRequest {
  parentDeviceGbId?: string(name='ParentDeviceGbId', position='Body'),
}

model AddChannelResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AddChannelResponse = {
  headers: map[string]string(name='headers'),
  body: AddChannelResponseBody(name='body'),
}

async function addChannel(request: AddChannelRequest): AddChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddChannel', 'POST', '/', 'json', true, 'form', request);
}

model AddDataSourceRequest {
  corpId: string(name='CorpId', position='Body'),
  dataSourceName: string(name='DataSourceName', position='Body'),
  dataSourceType: string(name='DataSourceType', position='Body'),
  description?: string(name='Description', position='Body'),
  url?: string(name='Url', position='Body'),
}

model AddDataSourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    dataSourceId?: string(name='DataSourceId'),
    kafkaTopic?: string(name='KafkaTopic'),
    ossPath?: string(name='OssPath'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDataSourceResponseBody(name='body'),
}

async function addDataSource(request: AddDataSourceRequest): AddDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataSource', 'POST', '/', 'json', true, 'form', request);
}

model AddDeviceRequest {
  bitRate?: string(name='BitRate', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  deviceAddress?: string(name='DeviceAddress', position='Body'),
  deviceDirection?: string(name='DeviceDirection', position='Body'),
  deviceName?: string(name='DeviceName', position='Body'),
  deviceResolution?: string(name='DeviceResolution', position='Body'),
  deviceSite?: string(name='DeviceSite', position='Body'),
  deviceType?: string(name='DeviceType', position='Body'),
  gbId?: string(name='GbId', position='Body'),
  vendor?: string(name='Vendor', position='Body'),
}

model AddDeviceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDeviceResponseBody(name='body'),
}

async function addDevice(request: AddDeviceRequest): AddDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDevice', 'POST', '/', 'json', true, 'form', request);
}

model AddDoubleVerificationGroupsRequest {
  doubleVerificationGroupList: [ 
    {
      groupId?: string(name='GroupId'),
      interval?: long(name='Interval'),
      memberNumber?: long(name='MemberNumber'),
      personIdList?: [ 
        {
          personId?: string(name='PersonId'),
          personTableId?: string(name='PersonTableId'),
        }
      ](name='PersonIdList'),
    }
  ](name='DoubleVerificationGroupList', position='Body'),
  id: string(name='Id', position='Body'),
}

model AddDoubleVerificationGroupsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resultList?: [ 
    {
      code?: string(name='Code'),
      groupId?: string(name='GroupId'),
      message?: string(name='Message'),
    }
  ](name='ResultList'),
}

model AddDoubleVerificationGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AddDoubleVerificationGroupsResponseBody(name='body'),
}

async function addDoubleVerificationGroups(request: AddDoubleVerificationGroupsRequest): AddDoubleVerificationGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDoubleVerificationGroups', 'POST', '/', 'json', true, 'form', request);
}

model AddMonitorRequest {
  algorithmVendor: string(name='AlgorithmVendor', minimum=1, maximum=20, position='Body'),
  batchIndicator?: int32(name='BatchIndicator', position='Body'),
  corpId: string(name='CorpId', minimum=1, maximum=50, position='Body'),
  description?: string(name='Description', minimum=1, maximum=100, position='Body'),
  monitorType: string(name='MonitorType', minimum=1, maximum=20, position='Body'),
  notifierAppSecret?: string(name='NotifierAppSecret', minimum=1, maximum=200, position='Body'),
  notifierExtendValues?: string(name='NotifierExtendValues', minimum=0, maximum=200, position='Body'),
  notifierTimeOut?: int32(name='NotifierTimeOut', minimum=10, maximum=3000, position='Body'),
  notifierType?: string(name='NotifierType', minimum=1, maximum=20, position='Body'),
  notifierUrl?: string(name='NotifierUrl', minimum=1, maximum=200, position='Body'),
}

model AddMonitorResponseBody = {
  code?: string(name='Code'),
  data?: {
    taskId?: string(name='TaskId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: AddMonitorResponseBody(name='body'),
}

async function addMonitor(request: AddMonitorRequest): AddMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddMonitor', 'POST', '/', 'json', true, 'form', request);
}

model AddProfileRequest {
  bizId?: string(name='BizId', position='Body'),
  catalogId: long(name='CatalogId', minimum=1, maximum=9999999999999, position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  faceUrl?: string(name='FaceUrl', position='Body'),
  gender?: int32(name='Gender', minimum=1, maximum=2, position='Body'),
  idNumber?: string(name='IdNumber', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  liveAddress?: string(name='LiveAddress', position='Body'),
  name: string(name='Name', position='Body'),
  phoneNo?: string(name='PhoneNo', position='Body'),
  plateNo?: string(name='PlateNo', position='Body'),
  sceneType?: string(name='SceneType', position='Body'),
}

model AddProfileResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizId?: string(name='BizId'),
    catalogId?: int32(name='CatalogId'),
    faceUrl?: string(name='FaceUrl'),
    gender?: string(name='Gender'),
    idNumber?: string(name='IdNumber'),
    isvSubId?: string(name='IsvSubId'),
    liveAddress?: string(name='LiveAddress'),
    name?: string(name='Name'),
    phoneNo?: string(name='PhoneNo'),
    plateNo?: string(name='PlateNo'),
    profileId?: int32(name='ProfileId'),
    sceneType?: string(name='SceneType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddProfileResponse = {
  headers: map[string]string(name='headers'),
  body: AddProfileResponseBody(name='body'),
}

async function addProfile(request: AddProfileRequest): AddProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddProfile', 'POST', '/', 'json', true, 'form', request);
}

model AddProfileCatalogRequest {
  catalogName: string(name='CatalogName', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  parentCatalogId?: long(name='ParentCatalogId', minimum=0, maximum=9999999999999, position='Body'),
}

model AddProfileCatalogResponseBody = {
  code?: string(name='Code'),
  data?: {
    catalogId?: long(name='CatalogId'),
    catalogName?: string(name='CatalogName'),
    isvSubId?: string(name='IsvSubId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddProfileCatalogResponse = {
  headers: map[string]string(name='headers'),
  body: AddProfileCatalogResponseBody(name='body'),
}

async function addProfileCatalog(request: AddProfileCatalogRequest): AddProfileCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddProfileCatalog', 'POST', '/', 'json', true, 'form', request);
}

model AddWatchItemsRequest {
  watchItemList: [ 
    {
      itemAttributes?: string(name='ItemAttributes'),
      itemImageUrl?: string(name='ItemImageUrl'),
      watchItemId: string(name='WatchItemId'),
      watchItemName?: string(name='WatchItemName'),
    }
  ](name='WatchItemList', position='Body'),
  watchPolicyId: string(name='WatchPolicyId', position='Body'),
}

model AddWatchItemsResponseBody = {
  code?: string(name='Code'),
  data?: {
    addedItemIds?: string(name='AddedItemIds'),
    failedItemIds?: string(name='FailedItemIds'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model AddWatchItemsResponse = {
  headers: map[string]string(name='headers'),
  body: AddWatchItemsResponseBody(name='body'),
}

async function addWatchItems(request: AddWatchItemsRequest): AddWatchItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddWatchItems', 'POST', '/', 'json', true, 'form', request);
}

model BatchDeleteInstanceRequest {
  instanceIds: [ string ](name='InstanceIds', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model BatchDeleteInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchDeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteInstanceResponseBody(name='body'),
}

async function batchDeleteInstance(request: BatchDeleteInstanceRequest): BatchDeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteInstance', 'POST', '/', 'json', true, 'form', request);
}

model BindCorpGroupRequest {
  corpGroupId: string(name='CorpGroupId', position='Body'),
  corpId: string(name='CorpId', position='Body'),
}

model BindCorpGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: BindCorpGroupResponseBody(name='body'),
}

async function bindCorpGroup(request: BindCorpGroupRequest): BindCorpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindCorpGroup', 'POST', '/', 'json', true, 'form', request);
}

model BindDevicesRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
  subDeviceList: [ 
    {
      accessProtocol?: string(name='AccessProtocol'),
      loginName: string(name='LoginName'),
      PIN: string(name='PIN'),
      subDeviceIp: string(name='SubDeviceIp'),
      subDeviceName?: string(name='SubDeviceName'),
      subDevicePort: string(name='SubDevicePort'),
    }
  ](name='SubDeviceList', position='Body'),
}

model BindDevicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    subDeviceList?: [ 
      {
        code?: string(name='Code'),
        message?: string(name='Message'),
        subDeviceId?: string(name='SubDeviceId'),
        subDeviceIp?: string(name='SubDeviceIp'),
        subDeviceName?: string(name='SubDeviceName'),
        subDeviceNum?: string(name='SubDeviceNum'),
        subDevicePort?: string(name='SubDevicePort'),
      }
    ](name='SubDeviceList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model BindDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BindDevicesResponseBody(name='body'),
}

async function bindDevices(request: BindDevicesRequest): BindDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDevices', 'POST', '/', 'json', true, 'form', request);
}

model BindPersonRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  personId: string(name='PersonId', position='Body'),
  personMatchingRate: string(name='PersonMatchingRate', position='Body'),
  profileId: long(name='ProfileId', minimum=1, maximum=9999999999999, position='Body'),
}

model BindPersonResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model BindPersonResponse = {
  headers: map[string]string(name='headers'),
  body: BindPersonResponseBody(name='body'),
}

async function bindPerson(request: BindPersonRequest): BindPersonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindPerson', 'POST', '/', 'json', true, 'form', request);
}

model BindUserRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  matchingRate: string(name='MatchingRate', position='Body'),
  personId: string(name='PersonId', position='Body'),
  userId: long(name='UserId', minimum=1, maximum=9999999999999, position='Body'),
}

model BindUserResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model BindUserResponse = {
  headers: map[string]string(name='headers'),
  body: BindUserResponseBody(name='body'),
}

async function bindUser(request: BindUserRequest): BindUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindUser', 'POST', '/', 'json', true, 'form', request);
}

model ControlAiotDeviceRequest {
  associatedDeviceId?: string(name='AssociatedDeviceId', position='Body'),
  associatedIPAddr?: string(name='AssociatedIPAddr', position='Body'),
  associatedPort?: long(name='AssociatedPort', position='Body'),
  associatedVerificationEnable?: string(name='AssociatedVerificationEnable', position='Body'),
  barrierCommand?: long(name='BarrierCommand', position='Body'),
  checkEnabled?: string(name='CheckEnabled', position='Body'),
  commandType: long(name='CommandType', position='Body'),
  doubleVerificationGroupEnabled?: string(name='DoubleVerificationGroupEnabled', position='Body'),
  gateCtlStatus?: long(name='GateCtlStatus', position='Body'),
  id: string(name='Id', position='Body'),
  identityNumber?: string(name='IdentityNumber', position='Body'),
  miFareCard?: {
    areaCode?: long(name='AreaCode'),
    areaDeviate?: long(name='AreaDeviate'),
    areaLen?: long(name='AreaLen'),
    enabled?: string(name='Enabled'),
    keyType?: long(name='KeyType'),
    lastChange?: string(name='LastChange'),
    secretKey?: string(name='SecretKey'),
  }(name='MiFareCard', position='Body'),
  name?: string(name='Name', position='Body'),
  rebootDevice?: string(name='RebootDevice', position='Body'),
  singleInterval?: long(name='SingleInterval', position='Body'),
  superPassword?: string(name='SuperPassword', position='Body'),
  upgradeFileURL?: string(name='UpgradeFileURL', position='Body'),
}

model ControlAiotDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ControlAiotDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ControlAiotDeviceResponseBody(name='body'),
}

async function controlAiotDevice(request: ControlAiotDeviceRequest): ControlAiotDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ControlAiotDevice', 'POST', '/', 'json', true, 'form', request);
}

model CreateAIInstanceRequest {
  algorithmId: string(name='AlgorithmId', description='算子Id', position='Body'),
  algorithmName: string(name='AlgorithmName', description='算法名称', position='Body'),
  computeType: string(name='ComputeType', description='计算类型', position='Body'),
  dataSource: string(name='DataSource', description='数据来源', position='Body'),
  dataType: string(name='DataType', description='数据类型', position='Body'),
  instanceName: string(name='InstanceName', description='实例名称', position='Body'),
  projectId: string(name='ProjectId', description='所属项目Id', position='Body'),
  scheduleCycleDates?: [ long ](name='ScheduleCycleDates', description='ScheduleType为EVERY_WEEK、EVERY_MONTH时必填', position='Body'),
  scheduleTimes: [ 
    {
      endTime: string(name='EndTime', description='结束执行时间'),
      startTime: string(name='StartTime', description='开始执行时间'),
    }
  ](name='ScheduleTimes', description='执行时间段，支持多段，指定多段时不能重合交错。', position='Body'),
  scheduleType: string(name='ScheduleType', description='调度类型', position='Body'),
  spf?: long(name='Spf', description='多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。', position='Body'),
}

model CreateAIInstanceResponseBody = {
  code?: string(name='Code', description='返回code码'),
  data?: {
    acuUsed?: long(name='AcuUsed', description='当前实例ACU使用量'),
    instanceId?: string(name='InstanceId', description='实例Id'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='请求id'),
}

model CreateAIInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAIInstanceResponseBody(name='body'),
}

async function createAIInstance(request: CreateAIInstanceRequest): CreateAIInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAIInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateComputeInstanceRequest {
  acuUsed?: long(name='AcuUsed', minimum=1, maximum=99999, position='Body'),
  algorithmType: string(name='AlgorithmType', position='Body'),
  algorithms: [ 
    {
      algorithmId: string(name='AlgorithmId'),
      algorithmName: string(name='AlgorithmName'),
    }
  ](name='Algorithms', position='Body'),
  computePictureType?: string(name='ComputePictureType', position='Body'),
  computePictureValue?: string(name='ComputePictureValue', position='Body'),
  datasourceType?: string(name='DatasourceType', position='Body'),
  devices: [ 
    {
      bitRate?: string(name='BitRate'),
      codingFormat?: string(name='CodingFormat'),
      deviceId: string(name='DeviceId'),
      regionId?: string(name='RegionId'),
      resolvingPower?: string(name='ResolvingPower'),
      startStream: boolean(name='StartStream'),
    }
  ](name='Devices', position='Body'),
  instanceName: string(name='InstanceName', position='Body'),
  isFrameExtraction?: string(name='IsFrameExtraction', position='Body'),
  isPolling?: boolean(name='IsPolling', position='Body'),
  overallExecutionTime?: string(name='OverallExecutionTime', position='Body'),
  picTopic?: string(name='PicTopic', position='Body'),
  picType?: string(name='PicType', position='Body'),
  pollingConfigs?: string(name='PollingConfigs', position='Body'),
  projectId?: string(name='ProjectId', position='Body'),
  scheduleCycleDate?: string(name='ScheduleCycleDate', position='Body'),
  scheduleDay?: string(name='ScheduleDay', position='Body'),
  scheduleDaySize?: string(name='ScheduleDaySize', position='Body'),
  scheduleTimes?: string(name='ScheduleTimes', position='Body'),
  scheduleType: string(name='ScheduleType', position='Body'),
  sliceExecutionTime?: string(name='SliceExecutionTime', position='Body'),
  storageUsed?: string(name='StorageUsed', position='Body'),
}

model CreateComputeInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    acuUsed?: long(name='AcuUsed'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateComputeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateComputeInstanceResponseBody(name='body'),
}

async function createComputeInstance(request: CreateComputeInstanceRequest): CreateComputeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateComputeInstance', 'POST', '/', 'json', true, 'form', request);
}

model CreateCorpRequest {
  algorithmType?: string(name='AlgorithmType', position='Body'),
  appName: string(name='AppName', position='Body'),
  corpName: string(name='CorpName', position='Body'),
  description?: string(name='Description', position='Body'),
  iconPath?: string(name='IconPath', position='Body'),
  isvSubId?: string(name='IsvSubId', position='Body'),
  parentCorpId?: string(name='ParentCorpId', position='Body'),
}

model CreateCorpResponseBody = {
  code?: string(name='Code'),
  corpId?: string(name='CorpId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateCorpResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCorpResponseBody(name='body'),
}

async function createCorp(request: CreateCorpRequest): CreateCorpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCorp', 'POST', '/', 'json', true, 'form', request);
}

model CreateCorpGroupRequest {
  clientToken: string(name='ClientToken', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  groupId: string(name='GroupId', position='Body'),
}

model CreateCorpGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCorpGroupResponseBody(name='body'),
}

async function createCorpGroup(request: CreateCorpGroupRequest): CreateCorpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCorpGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateDeviceRequest {
  activateCode?: string(name='ActivateCode', position='Body'),
  audioEnable?: string(name='AudioEnable', position='Body'),
  cityCode?: string(name='CityCode', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  dataSourceType: string(name='DataSourceType', position='Body'),
  deviceAddress: string(name='DeviceAddress', position='Body'),
  deviceDirection?: string(name='DeviceDirection', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  deviceModel?: string(name='DeviceModel', position='Body'),
  deviceName: string(name='DeviceName', position='Body'),
  deviceRate?: string(name='DeviceRate', position='Body'),
  deviceResolution?: string(name='DeviceResolution', position='Body'),
  deviceSite?: string(name='DeviceSite', position='Body'),
  deviceSn?: string(name='DeviceSn', position='Body'),
  deviceType: string(name='DeviceType', position='Body'),
  encodeFormat?: string(name='EncodeFormat', position='Body'),
  frameRate?: string(name='FrameRate', position='Body'),
  govLength?: string(name='GovLength', position='Body'),
  inProtocol?: string(name='InProtocol', position='Body'),
  latitude?: string(name='Latitude', position='Body'),
  longitude?: string(name='Longitude', position='Body'),
  OSDTimeEnable?: string(name='OSDTimeEnable', position='Body'),
  OSDTimeType?: string(name='OSDTimeType', position='Body'),
  OSDTimeX?: string(name='OSDTimeX', position='Body'),
  OSDTimeY?: string(name='OSDTimeY', position='Body'),
  parentDeviceId?: string(name='ParentDeviceId', position='Body'),
  subDeviceCount?: long(name='SubDeviceCount', position='Body'),
  subDeviceIdList?: string(name='SubDeviceIdList', position='Body'),
  vendor?: string(name='Vendor', position='Body'),
}

model CreateDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceId?: string(name='DeviceId'),
    password?: string(name='Password'),
    serverId?: string(name='ServerId'),
    serverIp?: string(name='ServerIp'),
    serverPort?: string(name='ServerPort'),
    serverRealm?: string(name='ServerRealm'),
    subDeviceInfo?: [ 
      {
        subDeviceId?: string(name='SubDeviceId'),
      }
    ](name='SubDeviceInfo'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceResponseBody(name='body'),
}

async function createDevice(request: CreateDeviceRequest): CreateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDevice', 'POST', '/', 'json', true, 'form', request);
}

model CreateModelServiceRequest {
  algorithmCode?: string(name='AlgorithmCode', position='Body'),
  clientToken?: string(name='ClientToken', position='Body'),
  instanceName?: string(name='InstanceName', position='Body'),
  QPSRequired?: int32(name='QPSRequired', position='Body'),
}

model CreateModelServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    appCode?: string(name='AppCode'),
    modelApiList?: [ 
      {
        algorithmApiCode?: string(name='AlgorithmApiCode'),
        apiId?: string(name='ApiId'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath'),
        createTime?: string(name='CreateTime'),
      }
    ](name='ModelApiList'),
    modelServiceInstanceId?: string(name='ModelServiceInstanceId'),
    modelServiceStatus?: string(name='ModelServiceStatus'),
    qpsRequired?: int32(name='QpsRequired'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateModelServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelServiceResponseBody(name='body'),
}

async function createModelService(request: CreateModelServiceRequest): CreateModelServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateModelService', 'POST', '/', 'json', true, 'form', request);
}

model CreateNewDeviceRequest {
  cityCode?: string(name='CityCode', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  dataSourceType: string(name='DataSourceType', position='Body'),
  deviceAddress: string(name='DeviceAddress', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  deviceModel?: string(name='DeviceModel', position='Body'),
  deviceName: string(name='DeviceName', position='Body'),
  deviceType: string(name='DeviceType', position='Body'),
  filePath?: string(name='FilePath', position='Body'),
  inProtocol: string(name='InProtocol', position='Body'),
  latitude?: string(name='Latitude', position='Body'),
  longitude?: string(name='Longitude', position='Body'),
  subDeviceCount?: long(name='SubDeviceCount', position='Body'),
  vendor: string(name='Vendor', position='Body'),
}

model CreateNewDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceId?: string(name='DeviceId'),
    password?: string(name='Password'),
    serverId?: string(name='ServerId'),
    serverIp?: string(name='ServerIp'),
    serverPort?: string(name='ServerPort'),
    sipRealm?: string(name='SipRealm'),
    subDeviceInfo?: [ 
      {
        channelDeviceId?: string(name='ChannelDeviceId'),
      }
    ](name='SubDeviceInfo'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateNewDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNewDeviceResponseBody(name='body'),
}

async function createNewDevice(request: CreateNewDeviceRequest): CreateNewDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNewDevice', 'POST', '/', 'json', true, 'form', request);
}

model CreateScanDeviceRequest {
  audioEnable?: string(name='AudioEnable', position='Body'),
  cityCode?: string(name='CityCode', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  dataSourceType: string(name='DataSourceType', position='Body'),
  deviceAddress: string(name='DeviceAddress', position='Body'),
  deviceDirection?: string(name='DeviceDirection', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  deviceModel?: string(name='DeviceModel', position='Body'),
  deviceName: string(name='DeviceName', position='Body'),
  deviceRate?: string(name='DeviceRate', position='Body'),
  deviceResolution?: string(name='DeviceResolution', position='Body'),
  deviceSite?: string(name='DeviceSite', position='Body'),
  deviceSn: string(name='DeviceSn', position='Body'),
  deviceType: string(name='DeviceType', position='Body'),
  encodeFormat?: string(name='EncodeFormat', position='Body'),
  frameRate?: string(name='FrameRate', position='Body'),
  govLength?: string(name='GovLength', position='Body'),
  inProtocol?: string(name='InProtocol', position='Body'),
  latitude?: string(name='Latitude', position='Body'),
  longitude?: string(name='Longitude', position='Body'),
  OSDTimeEnable?: string(name='OSDTimeEnable', position='Body'),
  OSDTimeType?: string(name='OSDTimeType', position='Body'),
  OSDTimeX?: string(name='OSDTimeX', position='Body'),
  OSDTimeY?: string(name='OSDTimeY', position='Body'),
  subDeviceCount?: long(name='SubDeviceCount', position='Body'),
  vendor: string(name='Vendor', position='Body'),
}

model CreateScanDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    corpId?: string(name='CorpId'),
    deviceId?: string(name='DeviceId'),
    deviceSn?: string(name='DeviceSn'),
    password?: string(name='Password'),
    serverId?: string(name='ServerId'),
    serverIp?: string(name='ServerIp'),
    serverPort?: string(name='ServerPort'),
    serverRealm?: string(name='ServerRealm'),
    sipDeviceGbId?: string(name='SipDeviceGbId'),
    subDeviceInfo?: [ 
      {
        channelDeviceId?: string(name='ChannelDeviceId'),
      }
    ](name='SubDeviceInfo'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateScanDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateScanDeviceResponseBody(name='body'),
}

async function createScanDevice(request: CreateScanDeviceRequest): CreateScanDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateScanDevice', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserRequest {
  address?: string(name='Address', position='Body'),
  age?: int32(name='Age', minimum=1, maximum=100, position='Body'),
  attachment?: string(name='Attachment', position='Body'),
  bizId?: string(name='BizId', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  faceImageUrl?: string(name='FaceImageUrl', position='Body'),
  gender?: int32(name='Gender', minimum=1, maximum=2, position='Body'),
  idNumber?: string(name='IdNumber', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  phoneNo?: string(name='PhoneNo', position='Body'),
  plateNo?: string(name='PlateNo', position='Body'),
  userGroupId: long(name='UserGroupId', minimum=1, maximum=9999999999999, position='Body'),
  userName: string(name='UserName', position='Body'),
}

model CreateUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    address?: string(name='Address'),
    age?: string(name='Age'),
    attachment?: string(name='Attachment'),
    bizId?: string(name='BizId'),
    faceImageUrl?: string(name='FaceImageUrl'),
    gender?: string(name='Gender'),
    idNumber?: string(name='IdNumber'),
    isvSubId?: string(name='IsvSubId'),
    phoneNo?: string(name='PhoneNo'),
    plateNo?: string(name='PlateNo'),
    userGroupId?: int32(name='UserGroupId'),
    userId?: int32(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', true, 'form', request);
}

model CreateUserGroupRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  parentUserGroupId?: long(name='ParentUserGroupId', minimum=0, maximum=9999999999999, position='Body'),
  userGroupName: string(name='UserGroupName', position='Body'),
}

model CreateUserGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    isvSubId?: string(name='IsvSubId'),
    userGroupId?: long(name='UserGroupId'),
    userGroupName?: string(name='UserGroupName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserGroupResponseBody(name='body'),
}

async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateVideoComposeTaskRequest {
  audioFileName: string(name='AudioFileName', position='Body'),
  bucketName: string(name='BucketName', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  domainName?: string(name='DomainName', position='Body'),
  imageFileNames: string(name='ImageFileNames', position='Body'),
  imageParameters: string(name='ImageParameters', position='Body'),
  videoFormat?: string(name='VideoFormat', position='Body'),
  videoFrameRate?: int32(name='VideoFrameRate', position='Body'),
}

model CreateVideoComposeTaskResponseBody = {
  bucketName?: string(name='BucketName'),
  code?: string(name='Code'),
  domainName?: string(name='DomainName'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateVideoComposeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVideoComposeTaskResponseBody(name='body'),
}

async function createVideoComposeTask(request: CreateVideoComposeTaskRequest): CreateVideoComposeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVideoComposeTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateVideoSummaryTaskRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
  endTimeStamp: long(name='EndTimeStamp', position='Body'),
  liveVideoSummary?: string(name='LiveVideoSummary', position='Body'),
  optionList?: string(name='OptionList', position='Body'),
  startTimeStamp: long(name='StartTimeStamp', position='Body'),
}

model CreateVideoSummaryTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateVideoSummaryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVideoSummaryTaskResponseBody(name='body'),
}

async function createVideoSummaryTask(request: CreateVideoSummaryTaskRequest): CreateVideoSummaryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVideoSummaryTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateWatchPolicyRequest {
  itemMatchType: string(name='ItemMatchType', position='Body'),
  similarityThreshold?: double(name='SimilarityThreshold', position='Body'),
  targetType: string(name='TargetType', position='Body'),
  watchMode: string(name='WatchMode', position='Body'),
  watchPolicyName?: string(name='WatchPolicyName', position='Body'),
}

model CreateWatchPolicyResponseBody = {
  code?: string(name='Code'),
  data?: {
    watchPolicyId?: string(name='WatchPolicyId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model CreateWatchPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWatchPolicyResponseBody(name='body'),
}

async function createWatchPolicy(request: CreateWatchPolicyRequest): CreateWatchPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWatchPolicy', 'POST', '/', 'json', true, 'form', request);
}

model CreateWatchTaskRequest {
  corpId: string(name='CorpId', position='Body'),
  description?: string(name='Description', position='Body'),
  deviceList?: string(name='DeviceList', position='Body'),
  messageReceiver: string(name='MessageReceiver', position='Body'),
  scheduleCycleDates?: string(name='ScheduleCycleDates', position='Body'),
  scheduleTimes?: string(name='ScheduleTimes', position='Body'),
  scheduleType: string(name='ScheduleType', position='Body'),
  taskName?: string(name='TaskName', position='Body'),
  watchPolicyIds: string(name='WatchPolicyIds', position='Body'),
}

model CreateWatchTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    watchTaskId?: string(name='WatchTaskId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model CreateWatchTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWatchTaskResponseBody(name='body'),
}

async function createWatchTask(request: CreateWatchTaskRequest): CreateWatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWatchTask', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAIInstanceRequest {
  instanceIds: [ string ](name='InstanceIds', description='需要删除的计算实例id', position='Body'),
}

model DeleteAIInstanceResponseBody = {
  code?: string(name='Code', description='返回code码'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAIInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAIInstanceResponseBody(name='body'),
}

async function deleteAIInstance(request: DeleteAIInstanceRequest): DeleteAIInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAIInstance', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAiotDeviceRequest {
  id: string(name='Id', position='Body'),
}

model DeleteAiotDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAiotDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAiotDeviceResponseBody(name='body'),
}

async function deleteAiotDevice(request: DeleteAiotDeviceRequest): DeleteAiotDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAiotDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAiotPersonTableRequest {
  id: string(name='Id', position='Body'),
  personTableId: string(name='PersonTableId', position='Body'),
}

model DeleteAiotPersonTableResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAiotPersonTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAiotPersonTableResponseBody(name='body'),
}

async function deleteAiotPersonTable(request: DeleteAiotPersonTableRequest): DeleteAiotPersonTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAiotPersonTable', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAiotPersonTableItemRequest {
  id: string(name='Id', position='Body'),
  personTableId: string(name='PersonTableId', position='Body'),
  personTableItemId: string(name='PersonTableItemId', position='Body'),
}

model DeleteAiotPersonTableItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAiotPersonTableItemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAiotPersonTableItemResponseBody(name='body'),
}

async function deleteAiotPersonTableItem(request: DeleteAiotPersonTableItemRequest): DeleteAiotPersonTableItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAiotPersonTableItem', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAiotVehicleTableItemRequest {
  id?: string(name='Id', position='Body'),
  vehicleTableId?: string(name='VehicleTableId', position='Body'),
  vehicleTableItemId?: string(name='VehicleTableItemId', position='Body'),
}

model DeleteAiotVehicleTableItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteAiotVehicleTableItemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAiotVehicleTableItemResponseBody(name='body'),
}

async function deleteAiotVehicleTableItem(request: DeleteAiotVehicleTableItemRequest): DeleteAiotVehicleTableItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAiotVehicleTableItem', 'POST', '/', 'json', true, 'form', request);
}

model DeleteChannelRequest {
  deviceCodes?: string(name='DeviceCodes', position='Body'),
}

model DeleteChannelResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteChannelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChannelResponseBody(name='body'),
}

async function deleteChannel(request: DeleteChannelRequest): DeleteChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChannel', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCorpGroupRequest {
  corpId: string(name='CorpId', position='Body'),
  groupId: string(name='GroupId', position='Body'),
}

model DeleteCorpGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCorpGroupResponseBody(name='body'),
}

async function deleteCorpGroup(request: DeleteCorpGroupRequest): DeleteCorpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCorpGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourceRequest {
  corpId: string(name='CorpId', position='Body'),
  dataSourceId: string(name='DataSourceId', position='Body'),
}

model DeleteDataSourceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
}

model DeleteDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourceResponseBody(name='body'),
}

async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourcesRequest {
  dataSourceIdList: string(name='DataSourceIdList', position='Body'),
}

model DeleteDataSourcesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      dataSourceId?: string(name='DataSourceId'),
      message?: string(name='Message'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourcesResponseBody(name='body'),
}

async function deleteDataSources(request: DeleteDataSourcesRequest): DeleteDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSources', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeviceRequest {
  corpId?: string(name='CorpId', position='Body'),
  gbId?: string(name='GbId', position='Body'),
}

model DeleteDeviceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeviceForInstanceRequest {
  algorithmId: string(name='AlgorithmId', position='Body'),
  deleteInstanceFlag: boolean(name='DeleteInstanceFlag', position='Body'),
  deviceCount?: string(name='DeviceCount', position='Body'),
  devices: [ 
    {
      deviceId?: string(name='DeviceId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Devices', position='Body'),
  instanceId: string(name='InstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model DeleteDeviceForInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDeviceForInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceForInstanceResponseBody(name='body'),
}

async function deleteDeviceForInstance(request: DeleteDeviceForInstanceRequest): DeleteDeviceForInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceForInstance', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDevicesRequest {
  deviceIdList: string(name='DeviceIdList', position='Body'),
}

model DeleteDevicesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      deviceId?: string(name='DeviceId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevicesResponseBody(name='body'),
}

async function deleteDevices(request: DeleteDevicesRequest): DeleteDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevices', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDoubleVerificationGroupRequest {
  doubleVerificationGroupId?: string(name='DoubleVerificationGroupId', position='Body'),
  id?: string(name='Id', position='Body'),
}

model DeleteDoubleVerificationGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteDoubleVerificationGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDoubleVerificationGroupResponseBody(name='body'),
}

async function deleteDoubleVerificationGroup(request: DeleteDoubleVerificationGroupRequest): DeleteDoubleVerificationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDoubleVerificationGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteIPCDeviceRequest {
  deviceCodes?: string(name='DeviceCodes', position='Body'),
}

model DeleteIPCDeviceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteIPCDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIPCDeviceResponseBody(name='body'),
}

async function deleteIPCDevice(request: DeleteIPCDeviceRequest): DeleteIPCDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIPCDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteModelServiceRequest {
  modelServiceId?: string(name='ModelServiceId', position='Body'),
}

model DeleteModelServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    modelServiceInstanceId?: string(name='ModelServiceInstanceId'),
    modelServiceInstanceName?: int32(name='ModelServiceInstanceName'),
    modelServiceStatus?: string(name='ModelServiceStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteModelServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelServiceResponseBody(name='body'),
}

async function deleteModelService(request: DeleteModelServiceRequest): DeleteModelServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteModelService', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNVRDeviceRequest {
  deviceCodes?: string(name='DeviceCodes', position='Body'),
}

model DeleteNVRDeviceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteNVRDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNVRDeviceResponseBody(name='body'),
}

async function deleteNVRDevice(request: DeleteNVRDeviceRequest): DeleteNVRDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNVRDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProfileRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  profileId: long(name='ProfileId', minimum=1, maximum=9999999999999, position='Body'),
}

model DeleteProfileResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteProfileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProfileResponseBody(name='body'),
}

async function deleteProfile(request: DeleteProfileRequest): DeleteProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProfile', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProfileCatalogRequest {
  catalogId: string(name='CatalogId', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
}

model DeleteProfileCatalogResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteProfileCatalogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProfileCatalogResponseBody(name='body'),
}

async function deleteProfileCatalog(request: DeleteProfileCatalogRequest): DeleteProfileCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProfileCatalog', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProjectRequest {
  projectIds: string(name='ProjectIds', description='项目id,多个以”,“隔开', position='Query'),
}

model DeleteProjectResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProject', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRecordsRequest {
  algorithmType?: string(name='AlgorithmType', position='Body'),
  attributeName?: string(name='AttributeName', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  operatorType?: string(name='OperatorType', position='Body'),
  value?: string(name='Value', position='Body'),
}

model DeleteRecordsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecordsResponseBody(name='body'),
}

async function deleteRecords(request: DeleteRecordsRequest): DeleteRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRecords', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  userId: long(name='UserId', minimum=1, maximum=9999999999999, position='Body'),
}

model DeleteUserResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', true, 'form', request);
}

model DeleteUserGroupRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  userGroupId: string(name='UserGroupId', position='Body'),
}

model DeleteUserGroupResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserGroupResponseBody(name='body'),
}

async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVideoSummaryTaskRequest {
  corpId: string(name='CorpId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model DeleteVideoSummaryTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteVideoSummaryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVideoSummaryTaskResponseBody(name='body'),
}

async function deleteVideoSummaryTask(request: DeleteVideoSummaryTaskRequest): DeleteVideoSummaryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVideoSummaryTask', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWatchPoliciesRequest {
  watchPolicyIds: string(name='WatchPolicyIds', position='Body'),
}

model DeleteWatchPoliciesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DeleteWatchPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWatchPoliciesResponseBody(name='body'),
}

async function deleteWatchPolicies(request: DeleteWatchPoliciesRequest): DeleteWatchPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWatchPolicies', 'POST', '/', 'json', true, 'form', request);
}

model DeleteWatchTasksRequest {
  watchTaskIds: string(name='WatchTaskIds', position='Body'),
}

model DeleteWatchTasksResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DeleteWatchTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWatchTasksResponseBody(name='body'),
}

async function deleteWatchTasks(request: DeleteWatchTasksRequest): DeleteWatchTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWatchTasks', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAIInstanceRequest {
  instanceId?: string(name='InstanceId', description='实例id', position='Body'),
  instanceName?: string(name='InstanceName', description='实例名称', position='Body'),
  pageNumber: long(name='PageNumber', description='当前页序号', position='Body'),
  pageSize: long(name='PageSize', description='每页显示多少条数据', position='Body'),
  projectId?: string(name='ProjectId', description='项目id', position='Body'),
}

model DescribeAIInstanceResponseBody = {
  code?: string(name='Code', description='返回错误码'),
  data?: {
    pageNumber?: long(name='PageNumber', description='当前页序号'),
    pageSize?: long(name='PageSize', description='每页显示多少条'),
    records?: [ 
      {
        acuUsed?: long(name='AcuUsed', description='ACU使用数量'),
        algorithmId?: string(name='AlgorithmId', description='算子ID'),
        algorithmName?: string(name='AlgorithmName', description='算子名称'),
        cameraNumber?: long(name='CameraNumber', description='实例中计算的摄像机数量。 仅当DataSource是Camera时返回。'),
        computeType?: string(name='ComputeType', description='计算类型'),
        createDateTime?: string(name='CreateDateTime', description='实例创建时间'),
        dataSource?: string(name='DataSource', description='数据来源'),
        dataType?: string(name='DataType', description='数据类型'),
        instanceId?: string(name='InstanceId', description='实例ID'),
        instanceName?: string(name='InstanceName', description='实例名称'),
        scheduleCycleDates?: string(name='ScheduleCycleDates', description='含义随ScheduleType取值不同'),
        scheduleTimes?: string(name='ScheduleTimes', description='执行时间段'),
        scheduleType?: string(name='ScheduleType', description='调度类型'),
        spf?: long(name='Spf', description='多少秒抽取1帧，取值范围[0, 3600]。 0表示不抽帧。'),
        status?: string(name='Status', description='实力状态'),
        storage?: double(name='Storage', description='预计存储量'),
      }
    ](name='Records', description='返回数据条目'),
    totalCount?: long(name='TotalCount', description='总数据数'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeAIInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAIInstanceResponseBody(name='body'),
}

async function describeAIInstance(request: DescribeAIInstanceRequest): DescribeAIInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAIInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAiotDevicesRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  idList?: string(name='IdList', position='Body'),
  pageNum?: long(name='PageNum', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
}

model DescribeAiotDevicesResponseBody = {
  aiotDevices?: {
    aiotDeviceList?: [ 
      {
        capDirection?: string(name='CapDirection'),
        corpId?: string(name='CorpId'),
        deviceId?: string(name='DeviceId'),
        deviceType?: string(name='DeviceType'),
        firmwareVersion?: string(name='FirmwareVersion'),
        IPAddr?: string(name='IPAddr'),
        IPV6Addr?: string(name='IPV6Addr'),
        IPv4Gateway?: string(name='IPv4Gateway'),
        IPv4Netmask?: string(name='IPv4Netmask'),
        id?: string(name='Id'),
        isOnline?: string(name='IsOnline'),
        latitude?: float(name='Latitude'),
        longitude?: float(name='Longitude'),
        MAC?: string(name='MAC'),
        manufacturer?: string(name='Manufacturer'),
        model?: string(name='Model'),
        monitorAreaDesc?: string(name='MonitorAreaDesc'),
        monitorDirection?: string(name='MonitorDirection'),
        name?: string(name='Name'),
        orgCode?: string(name='OrgCode'),
        ownerApsID?: string(name='OwnerApsID'),
        password?: string(name='Password'),
        place?: string(name='Place'),
        placeCode?: string(name='PlaceCode'),
        port?: long(name='Port'),
        serialNuber?: string(name='SerialNuber'),
        userId?: string(name='UserId'),
      }
    ](name='AiotDeviceList'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    totalNum?: long(name='TotalNum'),
  }(name='AiotDevices'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeAiotDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAiotDevicesResponseBody(name='body'),
}

async function describeAiotDevices(request: DescribeAiotDevicesRequest): DescribeAiotDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAiotDevices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAiotPersonTableItemsRequest {
  id: string(name='Id', position='Body'),
  pageNum?: long(name='PageNum', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
  personTableId?: string(name='PersonTableId', position='Body'),
  personTableItemId?: string(name='PersonTableItemId', position='Body'),
}

model DescribeAiotPersonTableItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  personTableItems?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    personTableItemList?: [ 
      {
        identificationList?: [ 
          {
            number?: string(name='Number'),
            type?: long(name='Type'),
          }
        ](name='IdentificationList'),
        identificationNum?: long(name='IdentificationNum'),
        imageList?: [ 
          {
            data?: string(name='Data'),
            deviceId?: string(name='DeviceId'),
            eventSort?: string(name='EventSort'),
            featureInfo?: {
              algorithmType?: string(name='AlgorithmType'),
              algorithmVersion?: string(name='AlgorithmVersion'),
              featureData?: string(name='FeatureData'),
              imageId?: string(name='ImageId'),
              objectId?: string(name='ObjectId'),
              tableId?: string(name='TableId'),
              vendor?: string(name='Vendor'),
            }(name='FeatureInfo'),
            fileFormat?: string(name='FileFormat'),
            height?: long(name='Height'),
            imageId?: string(name='ImageId'),
            shotTime?: string(name='ShotTime'),
            size?: long(name='Size'),
            storagePath?: string(name='StoragePath'),
            type?: string(name='Type'),
            width?: long(name='Width'),
          }
        ](name='ImageList'),
        imageNum?: long(name='ImageNum'),
        lastChange?: string(name='LastChange'),
        personCode?: string(name='PersonCode'),
        personId?: string(name='PersonId'),
        personName?: string(name='PersonName'),
        personTableId?: string(name='PersonTableId'),
        remarks?: string(name='Remarks'),
      }
    ](name='PersonTableItemList'),
    totalNum?: long(name='TotalNum'),
  }(name='PersonTableItems'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeAiotPersonTableItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAiotPersonTableItemsResponseBody(name='body'),
}

async function describeAiotPersonTableItems(request: DescribeAiotPersonTableItemsRequest): DescribeAiotPersonTableItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAiotPersonTableItems', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAiotPersonTablesRequest {
  id: string(name='Id', position='Body'),
  personTableIdList?: string(name='PersonTableIdList', position='Body'),
}

model DescribeAiotPersonTablesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  personTableList?: [ 
    {
      deviceId?: string(name='DeviceId'),
      faceNum?: long(name='FaceNum'),
      lastChange?: string(name='LastChange'),
      name?: string(name='Name'),
      personNum?: long(name='PersonNum'),
      personTableId?: string(name='PersonTableId'),
      totalPersonNum?: long(name='TotalPersonNum'),
      type?: long(name='Type'),
      verificationModelList?: [ long ](name='VerificationModelList'),
    }
  ](name='PersonTableList'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeAiotPersonTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAiotPersonTablesResponseBody(name='body'),
}

async function describeAiotPersonTables(request: DescribeAiotPersonTablesRequest): DescribeAiotPersonTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAiotPersonTables', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAiotVehicleTableItemsRequest {
  id: string(name='Id', position='Body'),
  pageNum?: long(name='PageNum', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
  vehicleTableId: string(name='VehicleTableId', position='Body'),
  vehicleTableItemId?: string(name='VehicleTableItemId', position='Body'),
}

model DescribeAiotVehicleTableItemsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  vehicleTableItems?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    totalNum?: long(name='TotalNum'),
    vehicleTableItemList?: [ 
      {
        beginTime?: string(name='BeginTime'),
        endTime?: string(name='EndTime'),
        ownerName?: string(name='OwnerName'),
        phoneNo?: string(name='PhoneNo'),
        plateNo?: string(name='PlateNo'),
        remarks?: string(name='Remarks'),
        vehicleTableId?: string(name='VehicleTableId'),
        vehicleTableItemId?: string(name='VehicleTableItemId'),
      }
    ](name='VehicleTableItemList'),
  }(name='VehicleTableItems'),
}

model DescribeAiotVehicleTableItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAiotVehicleTableItemsResponseBody(name='body'),
}

async function describeAiotVehicleTableItems(request: DescribeAiotVehicleTableItemsRequest): DescribeAiotVehicleTableItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAiotVehicleTableItems', 'POST', '/', 'json', true, 'form', request);
}

model DescribeAiotVehicleTablesRequest {
  id: string(name='Id', position='Body'),
  vehicleTableIdList?: string(name='VehicleTableIdList', position='Body'),
}

model DescribeAiotVehicleTablesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  vehicleTableList?: [ 
    {
      vehicleTableId?: string(name='VehicleTableId'),
      vehicleTableName?: string(name='VehicleTableName'),
    }
  ](name='VehicleTableList'),
}

model DescribeAiotVehicleTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAiotVehicleTablesResponseBody(name='body'),
}

async function describeAiotVehicleTables(request: DescribeAiotVehicleTablesRequest): DescribeAiotVehicleTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAiotVehicleTables', 'POST', '/', 'json', true, 'form', request);
}

model DescribeCameraForInstanceRequest {
  instanceId: string(name='InstanceId', description='实例id', position='Body'),
  pageNumber: long(name='PageNumber', description='当前页序号', position='Body'),
  pageSize: long(name='PageSize', description='每页显示多少条数据', position='Body'),
}

model DescribeCameraForInstanceResponseBody = {
  code?: string(name='Code', description='返回错误码'),
  data?: {
    pageNumber?: long(name='PageNumber', description='当前页序号'),
    pageSize?: long(name='PageSize', description='每页显示多少条'),
    records?: [ 
      {
        cameraAddress?: string(name='CameraAddress', description='设备地址'),
        cameraId?: string(name='CameraId', description='设备编号'),
        cameraName?: string(name='CameraName', description='设备名称'),
        cameraStatus?: long(name='CameraStatus', description='设备在线状态。 1表示在线，0表示离线, 2表示待注册'),
      }
    ](name='Records', description='返回数据条目'),
    totalCount?: long(name='TotalCount', description='总数据数'),
  }(name='Data', description='返回数据'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeCameraForInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCameraForInstanceResponseBody(name='body'),
}

async function describeCameraForInstance(request: DescribeCameraForInstanceRequest): DescribeCameraForInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCameraForInstance', 'POST', '/', 'json', true, 'form', request);
}

model DescribeChannelsRequest {
  deviceFilter?: string(name='DeviceFilter', position='Body'),
  deviceStatus?: string(name='DeviceStatus', position='Body'),
  nvrId: string(name='NvrId', position='Body'),
  pageNum: long(name='PageNum', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  showUnConfig?: long(name='ShowUnConfig', position='Body'),
}

model DescribeChannelsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        audioEnable?: string(name='AudioEnable'),
        corpId?: string(name='CorpId'),
        createTime?: string(name='CreateTime'),
        datasourceType?: string(name='DatasourceType'),
        deviceAddress?: string(name='DeviceAddress'),
        deviceDirection?: string(name='DeviceDirection'),
        deviceId?: string(name='DeviceId'),
        deviceIp?: string(name='DeviceIp'),
        deviceModel?: string(name='DeviceModel'),
        deviceName?: string(name='DeviceName'),
        deviceRate?: string(name='DeviceRate'),
        deviceResolution?: string(name='DeviceResolution'),
        deviceSite?: string(name='DeviceSite'),
        deviceSn?: string(name='DeviceSn'),
        deviceStatus?: string(name='DeviceStatus'),
        deviceSubType?: string(name='DeviceSubType'),
        deviceType?: string(name='DeviceType'),
        encodeFormat?: string(name='EncodeFormat'),
        frameRate?: string(name='FrameRate'),
        govLength?: string(name='GovLength'),
        inProtocol?: string(name='InProtocol'),
        latitude?: string(name='Latitude'),
        longitude?: string(name='Longitude'),
        modifyTime?: string(name='ModifyTime'),
        OSDTimeEnable?: string(name='OSDTimeEnable'),
        OSDTimeType?: string(name='OSDTimeType'),
        OSDTimeX?: string(name='OSDTimeX'),
        OSDTimeY?: string(name='OSDTimeY'),
        parentDeviceId?: string(name='ParentDeviceId'),
        password?: string(name='Password'),
        serverId?: string(name='ServerId'),
        serverIp?: string(name='ServerIp'),
        serverPort?: string(name='ServerPort'),
        serverRealm?: string(name='ServerRealm'),
        streamAction?: string(name='StreamAction'),
        streamStatus?: string(name='StreamStatus'),
        vap?: string(name='Vap'),
        vendor?: string(name='Vendor'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
    unConfigList?: [ string ](name='UnConfigList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeChannelsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChannelsResponseBody(name='body'),
}

async function describeChannels(request: DescribeChannelsRequest): DescribeChannelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChannels', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDataSourcesRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  dataSourceCategory?: string(name='DataSourceCategory', position='Body'),
  dataSourceFilter?: string(name='DataSourceFilter', position='Body'),
  dataSourceIdList?: string(name='DataSourceIdList', position='Body'),
  dataSourceType?: string(name='DataSourceType', position='Body'),
  pageNum: long(name='PageNum', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  streamStatus?: string(name='StreamStatus', position='Body'),
}

model DescribeDataSourcesResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        action?: string(name='Action'),
        corpId?: string(name='CorpId'),
        createTime?: string(name='CreateTime'),
        dataSourceId?: string(name='DataSourceId'),
        dataSourceName?: string(name='DataSourceName'),
        dataSourceType?: string(name='DataSourceType'),
        description?: string(name='Description'),
        kafkaTopic?: string(name='KafkaTopic'),
        ossPath?: string(name='OssPath'),
        streamStatus?: string(name='StreamStatus'),
        url?: string(name='Url'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeDataSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataSourcesResponseBody(name='body'),
}

async function describeDataSources(request: DescribeDataSourcesRequest): DescribeDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataSources', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDevicesRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  deviceIdList?: string(name='DeviceIdList', position='Body'),
  pageNum: int32(name='PageNum', minimum=0, maximum=100000, position='Body'),
  pageSize: int32(name='PageSize', minimum=1, maximum=200, position='Body'),
}

model DescribeDevicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        capturedPictureId?: string(name='CapturedPictureId'),
        corpId?: string(name='CorpId'),
        createTime?: string(name='CreateTime'),
        deviceAddress?: string(name='DeviceAddress'),
        deviceId?: string(name='DeviceId'),
        deviceName?: string(name='DeviceName'),
        deviceType?: string(name='DeviceType'),
        inProtocol?: string(name='InProtocol'),
        latitude?: string(name='Latitude'),
        longitude?: string(name='Longitude'),
        password?: string(name='Password'),
        status?: string(name='Status'),
        vendor?: string(name='Vendor'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDevicesResponseBody(name='body'),
}

async function describeDevices(request: DescribeDevicesRequest): DescribeDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDevices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeIpcsRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  deviceFilter?: string(name='DeviceFilter', position='Body'),
  deviceIdList?: string(name='DeviceIdList', position='Body'),
  deviceStatus?: string(name='DeviceStatus', position='Body'),
  nvrIdList?: string(name='NvrIdList', position='Body'),
  pageNum: long(name='PageNum', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  parentDeviceType?: string(name='ParentDeviceType', position='Body'),
}

model DescribeIpcsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        audioEnable?: string(name='AudioEnable'),
        corpId?: string(name='CorpId'),
        createTime?: string(name='CreateTime'),
        datasourceType?: string(name='DatasourceType'),
        deviceAddress?: string(name='DeviceAddress'),
        deviceDirection?: string(name='DeviceDirection'),
        deviceId?: string(name='DeviceId'),
        deviceIp?: string(name='DeviceIp'),
        deviceModel?: string(name='DeviceModel'),
        deviceName?: string(name='DeviceName'),
        deviceRate?: string(name='DeviceRate'),
        deviceResolution?: string(name='DeviceResolution'),
        deviceSite?: string(name='DeviceSite'),
        deviceSn?: string(name='DeviceSn'),
        deviceStatus?: string(name='DeviceStatus'),
        deviceSubType?: string(name='DeviceSubType'),
        deviceType?: string(name='DeviceType'),
        encodeFormat?: string(name='EncodeFormat'),
        frameRate?: string(name='FrameRate'),
        govLength?: string(name='GovLength'),
        inProtocol?: string(name='InProtocol'),
        latitude?: string(name='Latitude'),
        longitude?: string(name='Longitude'),
        modifyTime?: string(name='ModifyTime'),
        OSDTimeEnable?: string(name='OSDTimeEnable'),
        OSDTimeType?: string(name='OSDTimeType'),
        OSDTimeX?: string(name='OSDTimeX'),
        OSDTimeY?: string(name='OSDTimeY'),
        parentDeviceId?: string(name='ParentDeviceId'),
        password?: string(name='Password'),
        serverId?: string(name='ServerId'),
        serverIp?: string(name='ServerIp'),
        serverPort?: string(name='ServerPort'),
        serverRealm?: string(name='ServerRealm'),
        streamAction?: string(name='StreamAction'),
        streamStatus?: string(name='StreamStatus'),
        vap?: string(name='Vap'),
        vendor?: string(name='Vendor'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeIpcsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpcsResponseBody(name='body'),
}

async function describeIpcs(request: DescribeIpcsRequest): DescribeIpcsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpcs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeModelServiceRequest {
  modelServiceId?: string(name='ModelServiceId', position='Body'),
}

model DescribeModelServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    algorithmCode?: string(name='AlgorithmCode'),
    appCode?: string(name='AppCode'),
    createTime?: string(name='CreateTime'),
    modelApiList?: [ 
      {
        algorithmApiCode?: string(name='AlgorithmApiCode'),
        apiId?: string(name='ApiId'),
        apiName?: string(name='ApiName'),
        apiPath?: string(name='ApiPath'),
        createTime?: string(name='CreateTime'),
      }
    ](name='ModelApiList'),
    modelServiceInstanceId?: string(name='ModelServiceInstanceId'),
    modelServiceInstanceName?: string(name='ModelServiceInstanceName'),
    modelServiceStatus?: string(name='ModelServiceStatus'),
    qps?: long(name='Qps'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeModelServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModelServiceResponseBody(name='body'),
}

async function describeModelService(request: DescribeModelServiceRequest): DescribeModelServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModelService', 'POST', '/', 'json', true, 'form', request);
}

model DescribeModelServiceListRequest {
  algorithmCode?: string(name='AlgorithmCode', position='Body'),
  includeDeleted?: boolean(name='IncludeDeleted', position='Body'),
  modelServiceName?: string(name='ModelServiceName', position='Body'),
  pageNum?: int32(name='PageNum', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model DescribeModelServiceListResponseBody = {
  code?: string(name='Code'),
  data?: {
    modelList?: [ 
      {
        algorithmCode?: string(name='AlgorithmCode'),
        appCode?: string(name='AppCode'),
        createTime?: string(name='CreateTime'),
        modelServiceInstanceId?: string(name='ModelServiceInstanceId'),
        modelServiceName?: string(name='ModelServiceName'),
        modelServiceStatus?: string(name='ModelServiceStatus'),
        qpsRequired?: int32(name='QpsRequired'),
      }
    ](name='ModelList'),
    total?: string(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeModelServiceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeModelServiceListResponseBody(name='body'),
}

async function describeModelServiceList(request: DescribeModelServiceListRequest): DescribeModelServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModelServiceList', 'POST', '/', 'json', true, 'form', request);
}

model DescribeNvrDevicesRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  deviceFilter?: string(name='DeviceFilter', position='Body'),
  nvrDeviceIdList?: string(name='NvrDeviceIdList', position='Body'),
  pageNum: long(name='PageNum', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
}

model DescribeNvrDevicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        channel?: string(name='Channel'),
        corpId?: string(name='CorpId'),
        createTime?: string(name='CreateTime'),
        datasourceType?: string(name='DatasourceType'),
        deviceId?: string(name='DeviceId'),
        deviceModel?: string(name='DeviceModel'),
        deviceName?: string(name='DeviceName'),
        deviceSn?: string(name='DeviceSn'),
        deviceStatus?: string(name='DeviceStatus'),
        deviceType?: string(name='DeviceType'),
        modifyTime?: string(name='ModifyTime'),
        projectName?: string(name='ProjectName'),
        regionName?: string(name='RegionName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeNvrDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNvrDevicesResponseBody(name='body'),
}

async function describeNvrDevices(request: DescribeNvrDevicesRequest): DescribeNvrDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNvrDevices', 'POST', '/', 'json', true, 'form', request);
}

model DescribeNvrsRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  deviceFilter?: string(name='DeviceFilter', position='Body'),
  nvrDeviceIdList?: string(name='NvrDeviceIdList', position='Body'),
  pageNum: long(name='PageNum', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
}

model DescribeNvrsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        corpId?: string(name='CorpId'),
        createTime?: string(name='CreateTime'),
        datasourceType?: string(name='DatasourceType'),
        deviceAddress?: string(name='DeviceAddress'),
        deviceId?: string(name='DeviceId'),
        deviceModel?: string(name='DeviceModel'),
        deviceName?: string(name='DeviceName'),
        deviceSn?: string(name='DeviceSn'),
        deviceStatus?: string(name='DeviceStatus'),
        deviceType?: string(name='DeviceType'),
        inProtocol?: string(name='InProtocol'),
        latitude?: string(name='Latitude'),
        longitude?: string(name='Longitude'),
        modifyTime?: string(name='ModifyTime'),
        password?: string(name='Password'),
        serverId?: string(name='ServerId'),
        serverIp?: string(name='ServerIp'),
        serverPort?: string(name='ServerPort'),
        serverRealm?: string(name='ServerRealm'),
        subDeviceCount?: string(name='SubDeviceCount'),
        subDeviceInfo?: [ 
          {
            subDeviceId?: string(name='SubDeviceId'),
          }
        ](name='SubDeviceInfo'),
        vendor?: string(name='Vendor'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeNvrsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNvrsResponseBody(name='body'),
}

async function describeNvrs(request: DescribeNvrsRequest): DescribeNvrsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNvrs', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWatchItemsRequest {
  pageNumber: long(name='PageNumber', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  watchItemIds?: string(name='WatchItemIds', position='Body'),
  watchPolicyId: string(name='WatchPolicyId', position='Body'),
}

model DescribeWatchItemsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        itemAttributes?: string(name='ItemAttributes'),
        itemImageUrl?: string(name='ItemImageUrl'),
        watchItemId?: string(name='WatchItemId'),
        watchItemName?: string(name='WatchItemName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DescribeWatchItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWatchItemsResponseBody(name='body'),
}

async function describeWatchItems(request: DescribeWatchItemsRequest): DescribeWatchItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWatchItems', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWatchPoliciesRequest {
  pageNumber: long(name='PageNumber', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  watchPolicyIds?: string(name='WatchPolicyIds', position='Body'),
}

model DescribeWatchPoliciesResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        itemMatchType?: string(name='ItemMatchType'),
        similarityThreshold?: double(name='SimilarityThreshold'),
        targetType?: string(name='TargetType'),
        watchMode?: string(name='WatchMode'),
        watchPolicyId?: string(name='WatchPolicyId'),
        watchPolicyName?: string(name='WatchPolicyName'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DescribeWatchPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWatchPoliciesResponseBody(name='body'),
}

async function describeWatchPolicies(request: DescribeWatchPoliciesRequest): DescribeWatchPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWatchPolicies', 'POST', '/', 'json', true, 'form', request);
}

model DescribeWatchTasksRequest {
  pageNumber: long(name='PageNumber', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  watchTaskIds?: string(name='WatchTaskIds', position='Body'),
}

model DescribeWatchTasksResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        corpId?: string(name='CorpId'),
        description?: string(name='Description'),
        deviceList?: string(name='DeviceList'),
        messageReceiver?: string(name='MessageReceiver'),
        scheduleCycleDates?: string(name='ScheduleCycleDates'),
        scheduleTimes?: string(name='ScheduleTimes'),
        scheduleType?: string(name='ScheduleType'),
        taskName?: string(name='TaskName'),
        watchPolicyIds?: string(name='WatchPolicyIds'),
        watchTaskId?: string(name='WatchTaskId'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model DescribeWatchTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWatchTasksResponseBody(name='body'),
}

async function describeWatchTasks(request: DescribeWatchTasksRequest): DescribeWatchTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWatchTasks', 'POST', '/', 'json', true, 'form', request);
}

model DescribesDoubleVerificationGroupsRequest {
  doubleVerificationGroupIds?: string(name='DoubleVerificationGroupIds', position='Body'),
  id: string(name='Id', position='Body'),
  pageNum?: long(name='PageNum', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
}

model DescribesDoubleVerificationGroupsResponseBody = {
  code?: string(name='Code'),
  doubleVerificationGroups?: {
    doubleVerificationGroupList?: [ 
      {
        deviceId?: string(name='DeviceId'),
        enabled?: string(name='Enabled'),
        groupId?: string(name='GroupId'),
        interval?: long(name='Interval'),
        lastChange?: string(name='LastChange'),
        memberNumber?: long(name='MemberNumber'),
        personIdList?: [ 
          {
            personId?: string(name='PersonId'),
            personTableId?: string(name='PersonTableId'),
          }
        ](name='PersonIdList'),
      }
    ](name='DoubleVerificationGroupList'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    totalNum?: long(name='TotalNum'),
  }(name='DoubleVerificationGroups'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribesDoubleVerificationGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribesDoubleVerificationGroupsResponseBody(name='body'),
}

async function describesDoubleVerificationGroups(request: DescribesDoubleVerificationGroupsRequest): DescribesDoubleVerificationGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribesDoubleVerificationGroups', 'POST', '/', 'json', true, 'form', request);
}

model GetAiotStorageInfoRequest {
}

model GetAiotStorageInfoResponseBody = {
  aiotStorageInfo?: {
    eventAlarmMq?: {
      alarmTopic?: string(name='AlarmTopic'),
      eventTopic?: string(name='EventTopic'),
      instanceId?: string(name='InstanceId'),
      mqType?: string(name='MqType'),
      ramArnRole?: string(name='RamArnRole'),
      regionId?: string(name='RegionId'),
    }(name='EventAlarmMq'),
    eventAlarmPictureStorage?: {
      bucket?: string(name='Bucket'),
      endpoint?: string(name='Endpoint'),
      path?: string(name='Path'),
      proxy?: string(name='Proxy'),
      ramArnRole?: string(name='RamArnRole'),
      storageType?: string(name='StorageType'),
    }(name='EventAlarmPictureStorage'),
  }(name='AiotStorageInfo'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetAiotStorageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAiotStorageInfoResponseBody(name='body'),
}

async function getAiotStorageInfo(request: GetAiotStorageInfoRequest): GetAiotStorageInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAiotStorageInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetBodyOptionsRequest {
  corpId?: string(name='CorpId', position='Body'),
}

model GetBodyOptionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      key?: string(name='Key'),
      name?: string(name='Name'),
      optionList?: [ 
        {
          key?: string(name='Key'),
          name?: string(name='Name'),
        }
      ](name='OptionList'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetBodyOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetBodyOptionsResponseBody(name='body'),
}

async function getBodyOptions(request: GetBodyOptionsRequest): GetBodyOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBodyOptions', 'POST', '/', 'json', true, 'form', request);
}

model GetCatalogListRequest {
  corpId?: string(name='CorpId', position='Query'),
  isvSubId: string(name='IsvSubId', position='Query'),
}

model GetCatalogListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      catalogId?: long(name='CatalogId'),
      catalogName?: string(name='CatalogName'),
      isvSubId?: string(name='IsvSubId'),
      parentCatalogId?: long(name='ParentCatalogId'),
      profileCount?: long(name='ProfileCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetCatalogListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCatalogListResponseBody(name='body'),
}

async function getCatalogList(request: GetCatalogListRequest): GetCatalogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCatalogList', 'POST', '/', 'json', false, 'json', request);
}

model GetCityCodeRequest {
}

model GetCityCodeResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      cityAddress?: string(name='CityAddress'),
      cityCode?: string(name='CityCode'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetCityCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetCityCodeResponseBody(name='body'),
}

async function getCityCode(request: GetCityCodeRequest): GetCityCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCityCode', 'POST', '/', 'json', false, 'json', request);
}

model GetDataSourceStatsRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  dataSourceType?: string(name='DataSourceType', position='Body'),
}

model GetDataSourceStatsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      dataSourceType?: string(name='DataSourceType'),
      items?: map[string]any(name='Items'),
      total?: long(name='Total'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDataSourceStatsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataSourceStatsResponseBody(name='body'),
}

async function getDataSourceStats(request: GetDataSourceStatsRequest): GetDataSourceStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSourceStats', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceCaptureStrategyRequest {
  deviceCode: string(name='DeviceCode', description='设备通道号', position='Body'),
  deviceType?: string(name='DeviceType', description='设备类型', position='Body'),
}

model GetDeviceCaptureStrategyResponseBody = {
  code?: string(name='Code', description='错误码'),
  data?: {
    deviceCode?: string(name='DeviceCode', description='设备通道'),
    deviceType?: string(name='DeviceType', description='设备类型'),
    fridayCaptureStrategy?: string(name='FridayCaptureStrategy', description='星期五抓取策略'),
    mondayCaptureStrategy?: string(name='MondayCaptureStrategy', description='星期一抓取策略'),
    saturdayCaptureStrategy?: string(name='SaturdayCaptureStrategy', description='星期六抓取策略'),
    sundayCaptureStrategy?: string(name='SundayCaptureStrategy', description='星期日抓取策略'),
    thursdayCaptureStrategy?: string(name='ThursdayCaptureStrategy', description='星期四抓取策略'),
    tuesdayCaptureStrategy?: string(name='TuesdayCaptureStrategy', description='星期二抓取策略'),
    wednesdayCaptureStrategy?: string(name='WednesdayCaptureStrategy', description='星期三抓取策略'),
  }(name='Data', description='响应数据内容'),
  message?: string(name='Message', description='错误信息'),
  requestId?: string(name='RequestId', description='RequestId'),
}

model GetDeviceCaptureStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceCaptureStrategyResponseBody(name='body'),
}

async function getDeviceCaptureStrategy(request: GetDeviceCaptureStrategyRequest): GetDeviceCaptureStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceCaptureStrategy', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceConfigRequest {
  deviceSn?: string(name='DeviceSn', position='Body'),
  deviceTimeStamp?: string(name='DeviceTimeStamp', position='Body'),
}

model GetDeviceConfigResponseBody = {
  audioEnable?: string(name='AudioEnable'),
  audioFormat?: string(name='AudioFormat'),
  bitRate?: string(name='BitRate'),
  channelList?: [ 
    {
      channelGbId?: string(name='ChannelGbId'),
      fridayCaptureStrategy?: string(name='FridayCaptureStrategy'),
      mondayCaptureStrategy?: string(name='MondayCaptureStrategy'),
      saturdayCaptureStrategy?: string(name='SaturdayCaptureStrategy'),
      sundayCaptureStrategy?: string(name='SundayCaptureStrategy'),
      thursdayCaptureStrategy?: string(name='ThursdayCaptureStrategy'),
      tuesdayCaptureStrategy?: string(name='TuesdayCaptureStrategy'),
      wednesdayCaptureStrategy?: string(name='WednesdayCaptureStrategy'),
    }
  ](name='ChannelList'),
  code?: string(name='Code'),
  deviceAddress?: string(name='DeviceAddress'),
  deviceId?: string(name='DeviceId'),
  deviceName?: string(name='DeviceName'),
  encodeFormat?: string(name='EncodeFormat'),
  frameRate?: string(name='FrameRate'),
  govLength?: long(name='GovLength'),
  latitude?: string(name='Latitude'),
  longitude?: string(name='Longitude'),
  message?: string(name='Message'),
  OSDList?: [ 
    {
      leftTopX?: string(name='LeftTopX'),
      leftTopY?: string(name='LeftTopY'),
      text?: string(name='Text'),
    }
  ](name='OSDList'),
  OSDTimeEnable?: string(name='OSDTimeEnable'),
  OSDTimeType?: string(name='OSDTimeType'),
  OSDTimeX?: string(name='OSDTimeX'),
  OSDTimeY?: string(name='OSDTimeY'),
  passWord?: string(name='PassWord'),
  protocol?: string(name='Protocol'),
  requestId?: string(name='RequestId', description='Id of the request'),
  resolution?: string(name='Resolution'),
  retryInterval?: string(name='RetryInterval'),
  serverId?: string(name='ServerId'),
  serverIp?: string(name='ServerIp'),
  serverPort?: string(name='ServerPort'),
  userName?: string(name='UserName'),
}

model GetDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceConfigResponseBody(name='body'),
}

async function getDeviceConfig(request: GetDeviceConfigRequest): GetDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceLiveUrlRequest {
  corpId?: string(name='CorpId', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  gbId?: string(name='GbId', position='Body'),
  outProtocol?: string(name='OutProtocol', position='Body'),
  streamType?: string(name='StreamType', position='Body'),
}

model GetDeviceLiveUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  outProtocol?: string(name='OutProtocol'),
  requestId?: string(name='RequestId'),
  streamType?: long(name='StreamType'),
  url?: string(name='Url'),
}

model GetDeviceLiveUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceLiveUrlResponseBody(name='body'),
}

async function getDeviceLiveUrl(request: GetDeviceLiveUrlRequest): GetDeviceLiveUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceLiveUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetDevicePictureRequest {
  deviceId: string(name='DeviceId', position='Body'),
}

model GetDevicePictureResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDevicePictureResponse = {
  headers: map[string]string(name='headers'),
  body: GetDevicePictureResponseBody(name='body'),
}

async function getDevicePicture(request: GetDevicePictureRequest): GetDevicePictureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDevicePicture', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceStatsRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  deviceStatus?: string(name='DeviceStatus', position='Body'),
  deviceType?: string(name='DeviceType', position='Body'),
}

model GetDeviceStatsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: long(name='Count'),
      deviceStatus?: string(name='DeviceStatus'),
      deviceType?: string(name='DeviceType'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetDeviceStatsResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceStatsResponseBody(name='body'),
}

async function getDeviceStats(request: GetDeviceStatsRequest): GetDeviceStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceStats', 'POST', '/', 'json', true, 'form', request);
}

model GetDeviceVideoUrlRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  endTime?: long(name='EndTime', position='Body'),
  gbId?: string(name='GbId', position='Body'),
  outProtocol?: string(name='OutProtocol', position='Body'),
  startTime?: long(name='StartTime', position='Body'),
  storageType?: string(name='StorageType', position='Body'),
}

model GetDeviceVideoUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  outProtocol?: string(name='OutProtocol'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model GetDeviceVideoUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceVideoUrlResponseBody(name='body'),
}

async function getDeviceVideoUrl(request: GetDeviceVideoUrlRequest): GetDeviceVideoUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceVideoUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetFaceModelResultRequest {
  pictureContent?: string(name='PictureContent', position='Body'),
  pictureId: string(name='PictureId', position='Body'),
  pictureUrl?: string(name='PictureUrl', position='Body'),
}

model GetFaceModelResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    records?: [ 
      {
        ageLowerLimit?: int32(name='AgeLowerLimit'),
        ageLowerLimitReliability?: string(name='AgeLowerLimitReliability'),
        ageUpLimit?: int32(name='AgeUpLimit'),
        ageUpLimitReliability?: string(name='AgeUpLimitReliability'),
        capColor?: int32(name='CapColor'),
        capColorReliability?: string(name='CapColorReliability'),
        capStyle?: int32(name='CapStyle'),
        capStyleReliability?: string(name='CapStyleReliability'),
        ethicCode?: int32(name='EthicCode'),
        ethicCodeReliability?: string(name='EthicCodeReliability'),
        faceStyle?: string(name='FaceStyle'),
        faceStyleReliability?: string(name='FaceStyleReliability'),
        featureData?: [ float ](name='FeatureData'),
        genderCode?: int32(name='GenderCode'),
        genderCodeReliability?: string(name='GenderCodeReliability'),
        glassColor?: int32(name='GlassColor'),
        glassColorReliability?: string(name='GlassColorReliability'),
        glassStyle?: int32(name='GlassStyle'),
        glassStyleReliability?: string(name='GlassStyleReliability'),
        hairColor?: int32(name='HairColor'),
        hairColorReliability?: string(name='HairColorReliability'),
        hairStyle?: int32(name='HairStyle'),
        hairStyleReliability?: string(name='HairStyleReliability'),
        leftTopX?: float(name='LeftTopX'),
        leftTopY?: float(name='LeftTopY'),
        mustacheStyle?: string(name='MustacheStyle'),
        mustacheStyleReliability?: string(name='MustacheStyleReliability'),
        respiratorColor?: int32(name='RespiratorColor'),
        respiratorColorReliability?: string(name='RespiratorColorReliability'),
        rightBottomX?: float(name='RightBottomX'),
        rightBottomY?: float(name='RightBottomY'),
        skinColor?: int32(name='SkinColor'),
        skinColorReliability?: string(name='SkinColorReliability'),
      }
    ](name='Records'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetFaceModelResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetFaceModelResultResponseBody(name='body'),
}

async function getFaceModelResult(request: GetFaceModelResultRequest): GetFaceModelResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFaceModelResult', 'POST', '/', 'json', true, 'form', request);
}

model GetFaceOptionsRequest {
  corpId?: string(name='CorpId', position='Body'),
}

model GetFaceOptionsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      key?: string(name='Key'),
      name?: string(name='Name'),
      optionList?: [ 
        {
          key?: string(name='Key'),
          name?: string(name='Name'),
        }
      ](name='OptionList'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetFaceOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: GetFaceOptionsResponseBody(name='body'),
}

async function getFaceOptions(request: GetFaceOptionsRequest): GetFaceOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFaceOptions', 'POST', '/', 'json', true, 'form', request);
}

model GetInventoryRequest {
  commodityCode?: string(name='CommodityCode', position='Body'),
}

model GetInventoryResponseBody = {
  data?: {
    resultObject?: [ 
      {
        buyerId?: string(name='BuyerId'),
        commodityCode?: string(name='CommodityCode'),
        currentInventory?: string(name='CurrentInventory'),
        instanceId?: string(name='InstanceId'),
        inventoryId?: string(name='InventoryId'),
        validEndTime?: string(name='ValidEndTime'),
        validStartTime?: string(name='ValidStartTime'),
      }
    ](name='ResultObject'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetInventoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetInventoryResponseBody(name='body'),
}

async function getInventory(request: GetInventoryRequest): GetInventoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInventory', 'POST', '/', 'json', true, 'form', request);
}

model GetMonitorListRequest {
  corpId: string(name='CorpId', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=1, maximum=999, position='Body'),
  pageSize: int32(name='PageSize', minimum=1, maximum=200, position='Body'),
}

model GetMonitorListResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        algorithmVendor?: string(name='AlgorithmVendor'),
        attributes?: string(name='Attributes'),
        createDate?: string(name='CreateDate'),
        description?: string(name='Description'),
        deviceList?: string(name='DeviceList'),
        expression?: string(name='Expression'),
        imageMatch?: string(name='ImageMatch'),
        modifiedDate?: string(name='ModifiedDate'),
        monitorType?: string(name='MonitorType'),
        notifierExtendValues?: string(name='NotifierExtendValues'),
        notifierType?: string(name='NotifierType'),
        ruleExpression?: string(name='RuleExpression'),
        ruleName?: string(name='RuleName'),
        status?: string(name='Status'),
        taskId?: string(name='TaskId'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMonitorListResponse = {
  headers: map[string]string(name='headers'),
  body: GetMonitorListResponseBody(name='body'),
}

async function getMonitorList(request: GetMonitorListRequest): GetMonitorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMonitorList', 'POST', '/', 'json', true, 'form', request);
}

model GetMonitorResultRequest {
  algorithmVendor?: string(name='AlgorithmVendor', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  endTime: long(name='EndTime', position='Body'),
  minRecordId?: string(name='MinRecordId', position='Body'),
  startTime: long(name='StartTime', position='Body'),
  taskId?: string(name='TaskId', position='Body'),
}

model GetMonitorResultResponseBody = {
  code?: string(name='Code'),
  data?: {
    maxId?: string(name='MaxId'),
    records?: [ 
      {
        extendInfo?: {
          plateNo?: string(name='PlateNo'),
        }(name='ExtendInfo'),
        gbId?: string(name='GbId'),
        leftUpX?: string(name='LeftUpX'),
        leftUpY?: string(name='LeftUpY'),
        monitorPicUrl?: string(name='MonitorPicUrl'),
        picUrl?: string(name='PicUrl'),
        rightBottomX?: string(name='RightBottomX'),
        rightBottomY?: string(name='RightBottomY'),
        score?: string(name='Score'),
        shotTime?: string(name='ShotTime'),
        targetPicUrl?: string(name='TargetPicUrl'),
        taskId?: string(name='TaskId'),
      }
    ](name='Records'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMonitorResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetMonitorResultResponseBody(name='body'),
}

async function getMonitorResult(request: GetMonitorResultRequest): GetMonitorResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMonitorResult', 'POST', '/', 'json', true, 'form', request);
}

model GetPersonDetailRequest {
  algorithmType?: string(name='AlgorithmType', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  personID?: string(name='PersonID', position='Body'),
}

model GetPersonDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    personId?: string(name='PersonId'),
    picUrl?: string(name='PicUrl'),
    tagList?: [ 
      {
        tagCode?: string(name='TagCode'),
        tagName?: string(name='TagName'),
        tagValue?: string(name='TagValue'),
        tagValueId?: string(name='TagValueId'),
      }
    ](name='TagList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetPersonDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetPersonDetailResponseBody(name='body'),
}

async function getPersonDetail(request: GetPersonDetailRequest): GetPersonDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPersonDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetPersonListRequest {
  corpId?: string(name='CorpId', position='Body'),
  corpIdList?: map[string]any(name='CorpIdList', position='Body'),
  faceMatchingRateThreshold?: string(name='FaceMatchingRateThreshold', position='Body'),
  faceUrl?: string(name='FaceUrl', position='Body'),
  pageNumber: long(name='PageNumber', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  personIdList?: map[string]any(name='PersonIdList', position='Body'),
}

model GetPersonListResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        faceUrl?: string(name='FaceUrl'),
        firstShotTime?: long(name='FirstShotTime'),
        lastShotTime?: long(name='LastShotTime'),
        personId?: string(name='PersonId'),
        propertyTagList?: [ 
          {
            code?: string(name='Code'),
            tagCodeName?: string(name='TagCodeName'),
            tagName?: string(name='TagName'),
            value?: string(name='Value'),
          }
        ](name='PropertyTagList'),
        searchMatchingRate?: string(name='SearchMatchingRate'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetPersonListResponse = {
  headers: map[string]string(name='headers'),
  body: GetPersonListResponseBody(name='body'),
}

async function getPersonList(request: GetPersonListRequest): GetPersonListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPersonList', 'POST', '/', 'json', true, 'form', request);
}

model GetPictureUrlRequest {
  expireTime: string(name='ExpireTime', position='Body'),
  originUrl: string(name='OriginUrl', position='Body'),
  protocol?: string(name='Protocol', position='Body'),
}

model GetPictureUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model GetPictureUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetPictureUrlResponseBody(name='body'),
}

async function getPictureUrl(request: GetPictureUrlRequest): GetPictureUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPictureUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetProfileDetailRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  profileId: long(name='ProfileId', minimum=1, maximum=9999999999999, position='Body'),
}

model GetProfileDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizId?: string(name='BizId'),
    catalogId?: int32(name='CatalogId'),
    faceUrl?: string(name='FaceUrl'),
    gender?: string(name='Gender'),
    idNumber?: string(name='IdNumber'),
    isvSubId?: string(name='IsvSubId'),
    liveAddress?: string(name='LiveAddress'),
    name?: string(name='Name'),
    personId?: string(name='PersonId'),
    phoneNo?: string(name='PhoneNo'),
    plateNo?: string(name='PlateNo'),
    profileId?: int32(name='ProfileId'),
    sceneType?: string(name='SceneType'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetProfileDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetProfileDetailResponseBody(name='body'),
}

async function getProfileDetail(request: GetProfileDetailRequest): GetProfileDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProfileDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetProfileListRequest {
  bizId?: string(name='BizId', position='Body'),
  catalogId?: long(name='CatalogId', minimum=1, maximum=9999999999999, position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  faceImageId?: string(name='FaceImageId', position='Body'),
  faceUrl?: string(name='FaceUrl', position='Body'),
  gender?: int32(name='Gender', minimum=1, maximum=2, position='Body'),
  idNumber?: string(name='IdNumber', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  liveAddress?: string(name='LiveAddress', position='Body'),
  matchingRateThreshold?: string(name='MatchingRateThreshold', position='Body'),
  name?: string(name='Name', position='Body'),
  pageNumber: long(name='PageNumber', minimum=1, maximum=9999999999999, position='Body'),
  pageSize: long(name='PageSize', minimum=1, maximum=1000, position='Body'),
  personIdList?: map[string]any(name='PersonIdList', position='Body'),
  phoneNo?: string(name='PhoneNo', position='Body'),
  plateNo?: string(name='PlateNo', position='Body'),
  profileIdList?: map[string]any(name='ProfileIdList', position='Body'),
  sceneType?: string(name='SceneType', position='Body'),
}

model GetProfileListResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        bizId?: string(name='BizId'),
        catalogId?: int32(name='CatalogId'),
        faceUrl?: string(name='FaceUrl'),
        gender?: string(name='Gender'),
        idNumber?: string(name='IdNumber'),
        isvSubId?: string(name='IsvSubId'),
        name?: string(name='Name'),
        personId?: string(name='PersonId'),
        profileId?: int32(name='ProfileId'),
        sceneType?: string(name='SceneType'),
        searchMatchingRate?: string(name='SearchMatchingRate'),
      }
    ](name='Records'),
    success?: boolean(name='Success'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetProfileListResponse = {
  headers: map[string]string(name='headers'),
  body: GetProfileListResponseBody(name='body'),
}

async function getProfileList(request: GetProfileListRequest): GetProfileListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProfileList', 'POST', '/', 'json', true, 'form', request);
}

model GetScanSubDevicesRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
}

model GetScanSubDevicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    subDeviceList?: [ 
      {
        associatedNvr?: string(name='AssociatedNvr'),
        deviceMac?: string(name='DeviceMac'),
        deviceModel?: string(name='DeviceModel'),
        deviceSn?: string(name='DeviceSn'),
        firmwareVersion?: string(name='FirmwareVersion'),
        manufacturer?: string(name='Manufacturer'),
        subDeviceIp?: string(name='SubDeviceIp'),
        subDevicePort?: string(name='SubDevicePort'),
      }
    ](name='SubDeviceList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetScanSubDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: GetScanSubDevicesResponseBody(name='body'),
}

async function getScanSubDevices(request: GetScanSubDevicesRequest): GetScanSubDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScanSubDevices', 'POST', '/', 'json', true, 'form', request);
}

model GetUserDetailRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  needFaceDetail?: boolean(name='NeedFaceDetail', position='Body'),
  userId: long(name='UserId', minimum=1, maximum=9999999999999, position='Body'),
}

model GetUserDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    address?: string(name='Address'),
    age?: string(name='Age'),
    attachment?: string(name='Attachment'),
    bizId?: string(name='BizId'),
    faceImageUrl?: string(name='FaceImageUrl'),
    gender?: string(name='Gender'),
    idNumber?: string(name='IdNumber'),
    isvSubId?: string(name='IsvSubId'),
    phoneNo?: string(name='PhoneNo'),
    plateNo?: string(name='PlateNo'),
    userGroupId?: int32(name='UserGroupId'),
    userId?: int32(name='UserId'),
    userName?: string(name='UserName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetUserDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserDetailResponseBody(name='body'),
}

async function getUserDetail(request: GetUserDetailRequest): GetUserDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetVideoComposeResultRequest {
  corpId: string(name='CorpId', position='Body'),
  taskRequestId: string(name='TaskRequestId', position='Body'),
}

model GetVideoComposeResultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  videoUrl?: string(name='VideoUrl'),
}

model GetVideoComposeResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoComposeResultResponseBody(name='body'),
}

async function getVideoComposeResult(request: GetVideoComposeResultRequest): GetVideoComposeResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoComposeResult', 'POST', '/', 'json', true, 'form', request);
}

model GetVideoSummaryTaskResultRequest {
  corpId: string(name='CorpId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model GetVideoSummaryTaskResultResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetVideoSummaryTaskResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoSummaryTaskResultResponseBody(name='body'),
}

async function getVideoSummaryTaskResult(request: GetVideoSummaryTaskResultRequest): GetVideoSummaryTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideoSummaryTaskResult', 'POST', '/', 'json', true, 'form', request);
}

model InvokeMotorModelRequest {
  corpId: string(name='CorpId', position='Body'),
  picId: string(name='PicId', position='Body'),
  picPath?: string(name='PicPath', maximum=9999999999, position='Body'),
  picUrl?: string(name='PicUrl', position='Body'),
}

model InvokeMotorModelResponseBody = {
  code?: string(name='Code'),
  data?: {
    structList?: string(name='StructList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model InvokeMotorModelResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeMotorModelResponseBody(name='body'),
}

async function invokeMotorModel(request: InvokeMotorModelRequest): InvokeMotorModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeMotorModel', 'POST', '/', 'json', true, 'form', request);
}

model ListAccessNumberRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
}

model ListAccessNumberResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      count?: string(name='Count'),
      item?: string(name='Item'),
      percent?: string(name='Percent'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListAccessNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ListAccessNumberResponseBody(name='body'),
}

async function listAccessNumber(request: ListAccessNumberRequest): ListAccessNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAccessNumber', 'POST', '/', 'json', true, 'form', request);
}

model ListAlgorithmNamesByDeviceIdsRequest {
  gbIds: string(name='GbIds', description='设备ID集合，多个的话以逗号分隔，最大支持200个', position='Query'),
}

model ListAlgorithmNamesByDeviceIdsResponseBody = {
  code?: string(name='Code', description='返回结果编码  200：获取成功  Failed：获取失败  Retry：按需拉流模式，正在建立取流连接，请稍后重试'),
  data?: [ 
    {
      algorithmNames?: [ string ](name='AlgorithmNames', description='设备ID对应呗计算的算法名称集合'),
      gbId?: string(name='GbId', description='设备ID'),
    }
  ](name='Data'),
  message?: string(name='Message', description='返回结果消息'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success'),
}

model ListAlgorithmNamesByDeviceIdsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAlgorithmNamesByDeviceIdsResponseBody(name='body'),
}

async function listAlgorithmNamesByDeviceIds(request: ListAlgorithmNamesByDeviceIdsRequest): ListAlgorithmNamesByDeviceIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAlgorithmNamesByDeviceIds', 'GET', '/', 'json', false, 'json', request);
}

model ListBodyAlgorithmResultsRequest {
  algorithmType: string(name='AlgorithmType', position='Body'),
  capStyle?: string(name='CapStyle', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  startTime: string(name='StartTime', position='Body'),
}

model ListBodyAlgorithmResultsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        capStyle?: string(name='CapStyle'),
        coatColor?: string(name='CoatColor'),
        coatLength?: string(name='CoatLength'),
        coatStyle?: string(name='CoatStyle'),
        corpId?: string(name='CorpId'),
        dataSourceId?: string(name='DataSourceId'),
        genderCode?: string(name='GenderCode'),
        hairStyle?: string(name='HairStyle'),
        leftTopX?: float(name='LeftTopX'),
        leftTopY?: float(name='LeftTopY'),
        maxAge?: string(name='MaxAge'),
        minAge?: string(name='MinAge'),
        personId?: string(name='PersonId'),
        picUrlPath?: string(name='PicUrlPath'),
        rightBottomX?: float(name='RightBottomX'),
        rightBottomY?: float(name='RightBottomY'),
        shotTime?: string(name='ShotTime'),
        sourceId?: string(name='SourceId'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
        trousersColor?: string(name='TrousersColor'),
        trousersLength?: string(name='TrousersLength'),
        trousersStyle?: string(name='TrousersStyle'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListBodyAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBodyAlgorithmResultsResponseBody(name='body'),
}

async function listBodyAlgorithmResults(request: ListBodyAlgorithmResultsRequest): ListBodyAlgorithmResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBodyAlgorithmResults', 'POST', '/', 'json', true, 'form', request);
}

model ListCorpGroupMetricsRequest {
  corpId?: string(name='CorpId', position='Body'),
  deviceGroup?: string(name='DeviceGroup', position='Body'),
  deviceId?: string(name='DeviceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  startTime: string(name='StartTime', position='Body'),
  tagCode: string(name='TagCode', position='Body'),
  userGroup?: string(name='UserGroup', position='Body'),
}

model ListCorpGroupMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      corpGroupId?: string(name='CorpGroupId'),
      corpId?: string(name='CorpId'),
      dateId?: string(name='DateId'),
      deviceGroupId?: string(name='DeviceGroupId'),
      deviceId?: string(name='DeviceId'),
      personID?: string(name='PersonID'),
      tagCode?: string(name='TagCode'),
      tagMetrics?: string(name='TagMetrics'),
      tagValue?: string(name='TagValue'),
      userGroupId?: string(name='UserGroupId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListCorpGroupMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpGroupMetricsResponseBody(name='body'),
}

async function listCorpGroupMetrics(request: ListCorpGroupMetricsRequest): ListCorpGroupMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCorpGroupMetrics', 'POST', '/', 'json', true, 'form', request);
}

model ListCorpGroupsRequest {
  corpId: string(name='CorpId', position='Body'),
  pageNumber: long(name='PageNumber', minimum=1, maximum=100, position='Body'),
  pageSize: long(name='PageSize', minimum=1, maximum=100, position='Body'),
}

model ListCorpGroupsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ string ](name='Records'),
    totalCount?: long(name='TotalCount'),
    totalPage?: long(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListCorpGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpGroupsResponseBody(name='body'),
}

async function listCorpGroups(request: ListCorpGroupsRequest): ListCorpGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCorpGroups', 'POST', '/', 'json', true, 'form', request);
}

model ListCorpMetricsRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceGroupList?: string(name='DeviceGroupList', position='Body'),
  deviceIdList?: string(name='DeviceIdList', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  startTime: string(name='StartTime', position='Body'),
  tagCode: string(name='TagCode', position='Body'),
  userGroupList?: string(name='UserGroupList', position='Body'),
}

model ListCorpMetricsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      corpId?: string(name='CorpId'),
      dateId?: string(name='DateId'),
      deviceGroupId?: string(name='DeviceGroupId'),
      deviceId?: string(name='DeviceId'),
      personId?: string(name='PersonId'),
      tagCode?: string(name='TagCode'),
      tagMetrics?: string(name='TagMetrics'),
      tagValue?: string(name='TagValue'),
      userGroupId?: string(name='UserGroupId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListCorpMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpMetricsResponseBody(name='body'),
}

async function listCorpMetrics(request: ListCorpMetricsRequest): ListCorpMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCorpMetrics', 'POST', '/', 'json', true, 'form', request);
}

model ListCorpsRequest {
  corpName?: string(name='CorpName', position='Body'),
  pageNumber: int32(name='PageNumber', description='页码', position='Body'),
  pageSize: int32(name='PageSize', description='分页大小', position='Body'),
}

model ListCorpsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        acuUsed?: int32(name='AcuUsed'),
        appName?: string(name='AppName'),
        corpId?: string(name='CorpId'),
        corpName?: string(name='CorpName'),
        createDate?: string(name='CreateDate'),
        description?: string(name='Description'),
        deviceCount?: int32(name='DeviceCount'),
        iconPath?: string(name='IconPath'),
        isvSubId?: string(name='IsvSubId'),
        parentCorpId?: string(name='ParentCorpId'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListCorpsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCorpsResponseBody(name='body'),
}

async function listCorps(request: ListCorpsRequest): ListCorpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCorps', 'POST', '/', 'json', true, 'form', request);
}

model ListDeviceGroupsRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  dataSourceType?: string(name='DataSourceType', position='Body'),
  deviceCodeList?: string(name='DeviceCodeList', position='Body'),
  group?: string(name='Group', position='Body'),
  isPage: int32(name='IsPage', position='Body'),
  name?: string(name='Name', position='Body'),
  pageNum: int32(name='PageNum', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
}

model ListDeviceGroupsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      list?: [ 
        {
          bitRate?: string(name='BitRate'),
          codingFormat?: string(name='CodingFormat'),
          dataSourceType?: string(name='DataSourceType'),
          deviceCode?: string(name='DeviceCode'),
          deviceComputeStatus?: string(name='DeviceComputeStatus'),
          deviceGroup?: string(name='DeviceGroup'),
          deviceName?: string(name='DeviceName'),
          deviceSn?: string(name='DeviceSn'),
          deviceStatus?: string(name='DeviceStatus'),
          deviceStreamStatus?: string(name='DeviceStreamStatus'),
          installAddress?: string(name='InstallAddress'),
          regionId?: string(name='RegionId'),
          regionName?: string(name='RegionName'),
          resolvingPower?: string(name='ResolvingPower'),
          type?: string(name='Type'),
        }
      ](name='List'),
      totalCount?: string(name='TotalCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListDeviceGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceGroupsResponseBody(name='body'),
}

async function listDeviceGroups(request: ListDeviceGroupsRequest): ListDeviceGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceGroups', 'POST', '/', 'json', true, 'form', request);
}

model ListDevicesRequest {
  corpId?: string(name='CorpId', position='Body'),
  deviceName?: string(name='DeviceName', position='Body'),
  gbId?: string(name='GbId', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model ListDevicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        accessProtocolType?: string(name='AccessProtocolType'),
        bitRate?: string(name='BitRate'),
        coverImageUrl?: string(name='CoverImageUrl'),
        createTime?: string(name='CreateTime'),
        deviceAddress?: string(name='DeviceAddress'),
        deviceDirection?: string(name='DeviceDirection'),
        deviceName?: string(name='DeviceName'),
        deviceSite?: string(name='DeviceSite'),
        deviceType?: string(name='DeviceType'),
        gbId?: string(name='GbId'),
        latitude?: string(name='Latitude'),
        longitude?: string(name='Longitude'),
        resolution?: string(name='Resolution'),
        sipGBId?: string(name='SipGBId'),
        sipPassword?: string(name='SipPassword'),
        sipServerIp?: string(name='SipServerIp'),
        sipServerPort?: string(name='SipServerPort'),
        status?: int32(name='Status'),
        vendor?: string(name='Vendor'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevices', 'POST', '/', 'json', true, 'form', request);
}

model ListEventAlgorithmDetailsRequest {
  corpId: string(name='CorpId', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  eventType: string(name='EventType', position='Body'),
  eventValue?: string(name='EventValue', position='Body'),
  extendValue?: string(name='ExtendValue', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=1, maximum=99999999, position='Body'),
  pageSize: int32(name='PageSize', minimum=1, maximum=99999, position='Body'),
  recordId?: string(name='RecordId', position='Body'),
  sourceId?: string(name='SourceId', position='Body'),
  startTime: string(name='StartTime', position='Body'),
}

model ListEventAlgorithmDetailsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      corpId?: string(name='CorpId'),
      dataSourceId?: string(name='DataSourceId'),
      eventType?: string(name='EventType'),
      eventValue?: string(name='EventValue'),
      extendValue?: string(name='ExtendValue'),
      extraExtendValue?: string(name='ExtraExtendValue'),
      faceCount?: string(name='FaceCount'),
      leftTopX?: string(name='LeftTopX'),
      leftTopY?: string(name='LeftTopY'),
      picUrlPath?: string(name='PicUrlPath'),
      pointX?: string(name='PointX'),
      pointY?: string(name='PointY'),
      recordId?: string(name='RecordId'),
      rightBottomX?: string(name='RightBottomX'),
      rightBottomY?: string(name='RightBottomY'),
      shotTime?: string(name='ShotTime'),
      sourceId?: string(name='SourceId'),
      tagCode?: string(name='TagCode'),
      tagCodeReliability?: string(name='TagCodeReliability'),
      targetPicUrlPath?: string(name='TargetPicUrlPath'),
      uuidCode?: string(name='UuidCode'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListEventAlgorithmDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventAlgorithmDetailsResponseBody(name='body'),
}

async function listEventAlgorithmDetails(request: ListEventAlgorithmDetailsRequest): ListEventAlgorithmDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventAlgorithmDetails', 'POST', '/', 'json', true, 'form', request);
}

model ListEventAlgorithmResultsRequest {
  corpId: string(name='CorpId', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  eventType: string(name='EventType', position='Body'),
  extendValue?: string(name='ExtendValue', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  startTime: string(name='StartTime', position='Body'),
}

model ListEventAlgorithmResultsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        capStyle?: string(name='CapStyle'),
        corpId?: string(name='CorpId'),
        dataSourceId?: string(name='DataSourceId'),
        eventType?: string(name='EventType'),
        extendValue?: string(name='ExtendValue'),
        extendValueThree?: string(name='ExtendValueThree'),
        extendValueTwo?: string(name='ExtendValueTwo'),
        faceCount?: string(name='FaceCount'),
        picUrlPath?: string(name='PicUrlPath'),
        recordId?: string(name='RecordId'),
        shotTime?: string(name='ShotTime'),
        tagCode?: string(name='TagCode'),
        tagCodeReliability?: string(name='TagCodeReliability'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
        uuidCode?: string(name='UuidCode'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  extendValue?: string(name='ExtendValue'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListEventAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEventAlgorithmResultsResponseBody(name='body'),
}

async function listEventAlgorithmResults(request: ListEventAlgorithmResultsRequest): ListEventAlgorithmResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEventAlgorithmResults', 'POST', '/', 'json', true, 'form', request);
}

model ListFaceAlgorithmResultsRequest {
  algorithmType: string(name='AlgorithmType', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  startTime: string(name='StartTime', position='Body'),
}

model ListFaceAlgorithmResultsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        capStyle?: string(name='CapStyle'),
        corpId?: string(name='CorpId'),
        dataSourceId?: string(name='DataSourceId'),
        faceId?: string(name='FaceId'),
        genderCode?: string(name='GenderCode'),
        hairStyle?: string(name='HairStyle'),
        leftTopX?: float(name='LeftTopX'),
        leftTopY?: float(name='LeftTopY'),
        maxAge?: string(name='MaxAge'),
        minAge?: string(name='MinAge'),
        picUrlPath?: string(name='PicUrlPath'),
        rightBottomX?: float(name='RightBottomX'),
        rightBottomY?: float(name='RightBottomY'),
        shotTime?: string(name='ShotTime'),
        sourceId?: string(name='SourceId'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListFaceAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFaceAlgorithmResultsResponseBody(name='body'),
}

async function listFaceAlgorithmResults(request: ListFaceAlgorithmResultsRequest): ListFaceAlgorithmResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFaceAlgorithmResults', 'POST', '/', 'json', true, 'form', request);
}

model ListInstancesRequest {
  currentPage?: int32(name='CurrentPage', minimum=1, maximum=99999, position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=99999, position='Query'),
  projectId?: string(name='ProjectId', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    items?: [ 
      {
        acuUsed?: int32(name='AcuUsed'),
        algorithms?: [ 
          {
            algorithmId?: string(name='AlgorithmId'),
            algorithmName?: string(name='AlgorithmName'),
          }
        ](name='Algorithms'),
        createTime?: long(name='CreateTime'),
        deviceNumber?: int32(name='DeviceNumber'),
        instanceId?: string(name='InstanceId'),
        instanceName?: string(name='InstanceName'),
        status?: string(name='Status'),
      }
    ](name='Items'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListMetricsRequest {
  aggregateType: string(name='AggregateType', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  startTime: string(name='StartTime', position='Body'),
  tagCode: string(name='TagCode', position='Body'),
}

model ListMetricsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        dateTime?: string(name='DateTime'),
        tagCode?: string(name='TagCode'),
        tagMetric?: string(name='TagMetric'),
        tagValue?: string(name='TagValue'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMetricsResponseBody(name='body'),
}

async function listMetrics(request: ListMetricsRequest): ListMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMetrics', 'POST', '/', 'json', true, 'form', request);
}

model ListMotorAlgorithmResultsRequest {
  algorithmType: string(name='AlgorithmType', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  plateNumber?: string(name='PlateNumber', position='Body'),
  startTime: string(name='StartTime', position='Body'),
}

model ListMotorAlgorithmResultsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        calling?: string(name='Calling'),
        corpId?: string(name='CorpId'),
        dataSourceId?: string(name='DataSourceId'),
        leftTopX?: float(name='LeftTopX'),
        leftTopY?: float(name='LeftTopY'),
        motorBrand?: string(name='MotorBrand'),
        motorClass?: string(name='MotorClass'),
        motorColor?: string(name='MotorColor'),
        motorId?: string(name='MotorId'),
        motorModel?: string(name='MotorModel'),
        motorStyle?: string(name='MotorStyle'),
        picUrlPath?: string(name='PicUrlPath'),
        plateClass?: string(name='PlateClass'),
        plateColor?: string(name='PlateColor'),
        plateNumber?: string(name='PlateNumber'),
        rightBottomX?: float(name='RightBottomX'),
        rightBottomY?: float(name='RightBottomY'),
        safetyBelt?: string(name='SafetyBelt'),
        shotTime?: string(name='ShotTime'),
        sourceId?: string(name='SourceId'),
        targetPicUrlPath?: string(name='TargetPicUrlPath'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListMotorAlgorithmResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMotorAlgorithmResultsResponseBody(name='body'),
}

async function listMotorAlgorithmResults(request: ListMotorAlgorithmResultsRequest): ListMotorAlgorithmResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMotorAlgorithmResults', 'POST', '/', 'json', true, 'form', request);
}

model ListNVRChannelDeviceRequest {
  deviceCode: string(name='DeviceCode', position='Body'),
  isPage: string(name='IsPage', position='Body'),
  pageNum?: string(name='PageNum', position='Body'),
  pageSize?: string(name='PageSize', position='Body'),
}

model ListNVRChannelDeviceResponseBody = {
  data?: [ 
    {
      comptureStatus?: string(name='ComptureStatus'),
      corpId?: string(name='CorpId'),
      datasourceType?: string(name='DatasourceType'),
      deviceCode?: string(name='DeviceCode'),
      deviceName?: string(name='DeviceName'),
      deviceSn?: string(name='DeviceSn'),
      deviceStatus?: string(name='DeviceStatus'),
      deviceType?: string(name='DeviceType'),
      projectName?: string(name='ProjectName'),
      regionName?: string(name='RegionName'),
      sampleName?: string(name='SampleName'),
      streamStatus?: string(name='StreamStatus'),
      vap?: string(name='Vap'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model ListNVRChannelDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListNVRChannelDeviceResponseBody(name='body'),
}

async function listNVRChannelDevice(request: ListNVRChannelDeviceRequest): ListNVRChannelDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNVRChannelDevice', 'POST', '/', 'json', true, 'form', request);
}

model ListNVRDeviceRequest {
  corpIdList?: string(name='CorpIdList', position='Body'),
  deviceCode?: string(name='DeviceCode', position='Body'),
  isPage?: long(name='IsPage', position='Body'),
  pageNum?: long(name='PageNum', position='Body'),
  pageSize?: long(name='PageSize', position='Body'),
}

model ListNVRDeviceResponseBody = {
  data?: [ 
    {
      accessQuota?: string(name='AccessQuota'),
      channel?: string(name='Channel'),
      comptureStatus?: string(name='ComptureStatus'),
      corpId?: string(name='CorpId'),
      datasourceType?: string(name='DatasourceType'),
      deviceCode?: string(name='DeviceCode'),
      deviceName?: string(name='DeviceName'),
      deviceSn?: string(name='DeviceSn'),
      deviceStatus?: string(name='DeviceStatus'),
      deviceType?: string(name='DeviceType'),
      projectName?: string(name='ProjectName'),
      regionName?: string(name='RegionName'),
      registrationTime?: string(name='RegistrationTime'),
      streamStatus?: string(name='StreamStatus'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
  total?: string(name='Total'),
}

model ListNVRDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListNVRDeviceResponseBody(name='body'),
}

async function listNVRDevice(request: ListNVRDeviceRequest): ListNVRDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNVRDevice', 'POST', '/', 'json', true, 'form', request);
}

model ListPersonTraceRequest {
  corpId?: string(name='CorpId', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  groupId: string(name='GroupId', position='Body'),
  pageNumber: string(name='PageNumber', position='Body'),
  pageSize: string(name='PageSize', position='Body'),
  personId?: string(name='PersonId', position='Body'),
  startTime: string(name='StartTime', position='Body'),
}

model ListPersonTraceResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      corpId?: string(name='CorpId'),
      date?: string(name='Date'),
      deviceId?: string(name='DeviceId'),
      endSourceImage?: string(name='EndSourceImage'),
      endTargetImage?: string(name='EndTargetImage'),
      groupId?: string(name='GroupId'),
      lastTime?: string(name='LastTime'),
      personId?: string(name='PersonId'),
      startSourceImage?: string(name='StartSourceImage'),
      startTargetImage?: string(name='StartTargetImage'),
      startTime?: string(name='StartTime'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListPersonTraceResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonTraceResponseBody(name='body'),
}

async function listPersonTrace(request: ListPersonTraceRequest): ListPersonTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersonTrace', 'POST', '/', 'json', true, 'form', request);
}

model ListPersonTraceDetailsRequest {
  corpId?: string(name='CorpId', position='Body'),
  dataSourceId?: string(name='DataSourceId', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  pageNumber: long(name='PageNumber', minimum=1, maximum=100, position='Body'),
  pageSize: long(name='PageSize', minimum=1, maximum=10000, position='Body'),
  personId?: string(name='PersonId', position='Body'),
  startTime: string(name='StartTime', position='Body'),
  subId?: string(name='SubId', position='Body'),
}

model ListPersonTraceDetailsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      corpId?: string(name='CorpId'),
      dataSourceId?: string(name='DataSourceId'),
      leftTopX?: string(name='LeftTopX'),
      leftTopY?: string(name='LeftTopY'),
      personId?: string(name='PersonId'),
      picUrlPath?: string(name='PicUrlPath'),
      rightBottomX?: string(name='RightBottomX'),
      rightBottomY?: string(name='RightBottomY'),
      shotTime?: string(name='ShotTime'),
      subId?: string(name='SubId'),
      targetPicUrlPath?: string(name='TargetPicUrlPath'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListPersonTraceDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonTraceDetailsResponseBody(name='body'),
}

async function listPersonTraceDetails(request: ListPersonTraceDetailsRequest): ListPersonTraceDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersonTraceDetails', 'POST', '/', 'json', true, 'form', request);
}

model ListPersonVisitCountRequest {
  aggregateType: string(name='AggregateType', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  countType?: string(name='CountType', position='Body'),
  endTime: string(name='EndTime', position='Body'),
  maxVal?: int32(name='MaxVal', position='Body'),
  minVal?: int32(name='MinVal', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=999999999, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=9999999999, position='Body'),
  startTime: string(name='StartTime', position='Body'),
  tagCode: string(name='TagCode', position='Body'),
  timeAggregateType: string(name='TimeAggregateType', position='Body'),
}

model ListPersonVisitCountResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      corpId?: string(name='CorpId'),
      dayId?: string(name='DayId'),
      deviceId?: string(name='DeviceId'),
      groupId?: string(name='GroupId'),
      hourId?: string(name='HourId'),
      personId?: string(name='PersonId'),
      tagCode?: string(name='TagCode'),
      tagMetrics?: string(name='TagMetrics'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: string(name='TotalCount'),
}

model ListPersonVisitCountResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonVisitCountResponseBody(name='body'),
}

async function listPersonVisitCount(request: ListPersonVisitCountRequest): ListPersonVisitCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersonVisitCount', 'POST', '/', 'json', true, 'form', request);
}

model ListPersonsRequest {
  algorithmType?: string(name='AlgorithmType', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  endTime?: string(name='EndTime', position='Body'),
  pageNo?: string(name='PageNo', position='Body'),
  pageSize?: string(name='PageSize', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
}

model ListPersonsResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: string(name='PageNo'),
    pageSize?: string(name='PageSize'),
    records?: [ 
      {
        firstAppearTime?: string(name='FirstAppearTime'),
        personId?: string(name='PersonId'),
        picUrl?: string(name='PicUrl'),
        tagList?: [ 
          {
            tagCode?: string(name='TagCode'),
            tagName?: string(name='TagName'),
            tagValue?: string(name='TagValue'),
            tagValueId?: string(name='TagValueId'),
          }
        ](name='TagList'),
      }
    ](name='Records'),
    totalCount?: string(name='TotalCount'),
    totalPage?: string(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListPersonsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonsResponseBody(name='body'),
}

async function listPersons(request: ListPersonsRequest): ListPersonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersons', 'POST', '/', 'json', true, 'form', request);
}

model ListSubscribeDeviceRequest {
  pageNum: int32(name='PageNum', minimum=1, maximum=10000, position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=200, position='Query'),
}

model ListSubscribeDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    subscribeList?: [ 
      {
        createTime?: string(name='CreateTime'),
        deviceId?: string(name='DeviceId'),
        pushConfig?: string(name='PushConfig'),
        updateTime?: string(name='UpdateTime'),
        userId?: string(name='UserId'),
      }
    ](name='SubscribeList'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListSubscribeDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubscribeDeviceResponseBody(name='body'),
}

async function listSubscribeDevice(request: ListSubscribeDeviceRequest): ListSubscribeDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubscribeDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListUserGroupsRequest {
  corpId?: string(name='CorpId', position='Query'),
  isvSubId: string(name='IsvSubId', position='Query'),
}

model ListUserGroupsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: string(name='CreateTime'),
      creator?: string(name='Creator'),
      isvSubId?: string(name='IsvSubId'),
      parentUserGroupId?: long(name='ParentUserGroupId'),
      updateTime?: string(name='UpdateTime'),
      userCount?: long(name='UserCount'),
      userGroupId?: long(name='UserGroupId'),
      userGroupName?: string(name='UserGroupName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListUserGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserGroupsResponseBody(name='body'),
}

async function listUserGroups(request: ListUserGroupsRequest): ListUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  address?: string(name='Address', position='Body'),
  age?: int32(name='Age', minimum=1, maximum=100, position='Body'),
  attachment?: string(name='Attachment', position='Body'),
  bizId?: string(name='BizId', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  faceImageUrl?: string(name='FaceImageUrl', position='Body'),
  gender?: int32(name='Gender', minimum=1, maximum=2, position='Body'),
  idNumber?: string(name='IdNumber', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  matchingRateThreshold?: string(name='MatchingRateThreshold', position='Body'),
  pageNumber: long(name='PageNumber', minimum=1, maximum=9999999999999, position='Body'),
  pageSize: long(name='PageSize', minimum=1, maximum=1000, position='Body'),
  personList?: map[string]any(name='PersonList', position='Body'),
  phoneNo?: string(name='PhoneNo', position='Body'),
  plateNo?: string(name='PlateNo', position='Body'),
  userGroupId?: long(name='UserGroupId', minimum=1, maximum=9999999999999, position='Body'),
  userList?: map[string]any(name='UserList', position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model ListUsersResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        age?: string(name='Age'),
        attachment?: string(name='Attachment'),
        bizId?: string(name='BizId'),
        faceImageUrl?: string(name='FaceImageUrl'),
        gender?: string(name='Gender'),
        idNumber?: string(name='IdNumber'),
        isvSubId?: string(name='IsvSubId'),
        matchingRate?: string(name='MatchingRate'),
        personId?: string(name='PersonId'),
        userGroupId?: int32(name='UserGroupId'),
        userId?: int32(name='UserId'),
        userName?: string(name='UserName'),
      }
    ](name='Records'),
    success?: long(name='Success'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', true, 'form', request);
}

model ModifyDeviceRequest {
  audioEnable?: string(name='AudioEnable', position='Body'),
  deviceAddress?: string(name='DeviceAddress', description='设备安装地址', position='Body'),
  deviceDirection?: string(name='DeviceDirection', position='Body'),
  deviceId: string(name='DeviceId', description='设备国标编码', position='Body'),
  deviceIp?: string(name='DeviceIp', position='Body'),
  deviceModel?: string(name='DeviceModel', position='Body'),
  deviceName?: string(name='DeviceName', description='设备名称', position='Body'),
  deviceRate?: string(name='DeviceRate', position='Body'),
  deviceResolution?: string(name='DeviceResolution', position='Body'),
  deviceSite?: string(name='DeviceSite', position='Body'),
  deviceSubType?: string(name='DeviceSubType', position='Body'),
  encodeFormat?: string(name='EncodeFormat', position='Body'),
  frameRate?: string(name='FrameRate', position='Body'),
  govLength?: string(name='GovLength', position='Body'),
  latitude?: string(name='Latitude', position='Body'),
  longitude?: string(name='Longitude', position='Body'),
  OSDTimeEnable?: string(name='OSDTimeEnable', position='Body'),
  OSDTimeType?: string(name='OSDTimeType', position='Body'),
  OSDTimeX?: string(name='OSDTimeX', position='Body'),
  OSDTimeY?: string(name='OSDTimeY', position='Body'),
  password?: string(name='Password', position='Body'),
  vendor?: string(name='Vendor', position='Body'),
}

model ModifyDeviceResponseBody = {
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误码描述'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeviceResponseBody(name='body'),
}

async function modifyDevice(request: ModifyDeviceRequest): ModifyDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDevice', 'POST', '/', 'json', true, 'form', request);
}

model PeekNvrRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
}

model PeekNvrResponseBody = {
  code?: string(name='Code'),
  data?: {
    idleCount?: long(name='IdleCount'),
    subDeviceList?: [ 
      {
        associatedPlatform?: string(name='AssociatedPlatform'),
        subDeviceId?: string(name='SubDeviceId'),
        subDeviceName?: string(name='SubDeviceName'),
        subDeviceNum?: string(name='SubDeviceNum'),
        subDeviceStatus?: string(name='SubDeviceStatus'),
      }
    ](name='SubDeviceList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model PeekNvrResponse = {
  headers: map[string]string(name='headers'),
  body: PeekNvrResponseBody(name='body'),
}

async function peekNvr(request: PeekNvrRequest): PeekNvrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PeekNvr', 'POST', '/', 'json', true, 'form', request);
}

model RaiseDevicesStorageRequest {
  json: string(name='Json', position='Body'),
}

model RaiseDevicesStorageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model RaiseDevicesStorageResponse = {
  headers: map[string]string(name='headers'),
  body: RaiseDevicesStorageResponseBody(name='body'),
}

async function raiseDevicesStorage(request: RaiseDevicesStorageRequest): RaiseDevicesStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RaiseDevicesStorage', 'POST', '/', 'json', true, 'form', request);
}

model RecognizeFaceQualityRequest {
  corpId?: string(name='CorpId', position='Body'),
  picContent?: string(name='PicContent', position='Body'),
  picFormat?: string(name='PicFormat', position='Body'),
  picUrl?: string(name='PicUrl', position='Body'),
}

model RecognizeFaceQualityResponseBody = {
  code?: string(name='Code'),
  data?: {
    attributes?: {
      faceQuality?: string(name='FaceQuality'),
      faceScore?: string(name='FaceScore'),
      faceStyle?: string(name='FaceStyle'),
      leftTopX?: int32(name='LeftTopX'),
      leftTopY?: int32(name='LeftTopY'),
      rightBottomX?: int32(name='RightBottomX'),
      rightBottomY?: int32(name='RightBottomY'),
      targetImageStoragePath?: string(name='TargetImageStoragePath'),
    }(name='Attributes'),
    description?: string(name='Description'),
    qualityScore?: string(name='QualityScore'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeFaceQualityResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeFaceQualityResponseBody(name='body'),
}

async function recognizeFaceQuality(request: RecognizeFaceQualityRequest): RecognizeFaceQualityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeFaceQuality', 'POST', '/', 'json', true, 'form', request);
}

model RecognizeImageRequest {
  corpId: string(name='CorpId', position='Body'),
  picContent?: string(name='PicContent', position='Body'),
  picFormat: string(name='PicFormat', position='Body'),
  picUrl?: string(name='PicUrl', position='Body'),
}

model RecognizeImageResponseBody = {
  code?: string(name='Code'),
  data?: {
    bodyList?: [ 
      {
        feature?: string(name='Feature'),
        fileName?: string(name='FileName'),
        imageBaseSixFour?: string(name='ImageBaseSixFour'),
        leftTopX?: string(name='LeftTopX'),
        leftTopY?: string(name='LeftTopY'),
        localFeature?: string(name='LocalFeature'),
        respiratorColor?: string(name='RespiratorColor'),
        rightBottomX?: string(name='RightBottomX'),
        rightBottomY?: string(name='RightBottomY'),
      }
    ](name='BodyList'),
    faceList?: [ 
      {
        feature?: string(name='Feature'),
        fileName?: string(name='FileName'),
        imageBaseSixFour?: string(name='ImageBaseSixFour'),
        keyPointQuality?: float(name='KeyPointQuality'),
        leftTopX?: string(name='LeftTopX'),
        leftTopY?: string(name='LeftTopY'),
        localFeature?: string(name='LocalFeature'),
        quality?: float(name='Quality'),
        respiratorColor?: string(name='RespiratorColor'),
        rightBottomX?: string(name='RightBottomX'),
        rightBottomY?: string(name='RightBottomY'),
      }
    ](name='FaceList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RecognizeImageResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeImageResponseBody(name='body'),
}

async function recognizeImage(request: RecognizeImageRequest): RecognizeImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeImage', 'POST', '/', 'json', true, 'form', request);
}

model RegisterDeviceRequest {
  deviceId?: string(name='DeviceId', position='Body'),
  deviceSn: string(name='DeviceSn', position='Body'),
  deviceTimeStamp: string(name='DeviceTimeStamp', position='Body'),
  serverId?: string(name='ServerId', position='Body'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  retryInterval?: string(name='RetryInterval'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDevice', 'POST', '/', 'json', true, 'form', request);
}

model RemoveCameraForInstanceRequest {
  cameraIds: [ string ](name='CameraIds', description='设备ID列表', position='Body'),
  instanceId: string(name='InstanceId', description='实例id', position='Body'),
}

model RemoveCameraForInstanceResponseBody = {
  code?: string(name='Code', description='code码'),
  message?: string(name='Message', description='返回结果消息'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model RemoveCameraForInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveCameraForInstanceResponseBody(name='body'),
}

async function removeCameraForInstance(request: RemoveCameraForInstanceRequest): RemoveCameraForInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveCameraForInstance', 'POST', '/', 'json', true, 'form', request);
}

model RemoveWatchItemsRequest {
  watchItemIds: string(name='WatchItemIds', position='Body'),
  watchPolicyId: string(name='WatchPolicyId', position='Body'),
}

model RemoveWatchItemsResponseBody = {
  code?: string(name='Code'),
  data?: {
    deletedItemIds?: string(name='DeletedItemIds'),
    failedItemIds?: string(name='FailedItemIds'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model RemoveWatchItemsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveWatchItemsResponseBody(name='body'),
}

async function removeWatchItems(request: RemoveWatchItemsRequest): RemoveWatchItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveWatchItems', 'POST', '/', 'json', true, 'form', request);
}

model SaveVideoSummaryTaskVideoRequest {
  corpId: string(name='CorpId', position='Body'),
  saveVideo: boolean(name='SaveVideo', position='Body'),
  taskId: long(name='TaskId', minimum=1, maximum=11111111111111111, position='Body'),
}

model SaveVideoSummaryTaskVideoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SaveVideoSummaryTaskVideoResponse = {
  headers: map[string]string(name='headers'),
  body: SaveVideoSummaryTaskVideoResponseBody(name='body'),
}

async function saveVideoSummaryTaskVideo(request: SaveVideoSummaryTaskVideoRequest): SaveVideoSummaryTaskVideoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveVideoSummaryTaskVideo', 'POST', '/', 'json', true, 'form', request);
}

model ScanSubDeviceRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
}

model ScanSubDeviceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ScanSubDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ScanSubDeviceResponseBody(name='body'),
}

async function scanSubDevice(request: ScanSubDeviceRequest): ScanSubDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ScanSubDevice', 'POST', '/', 'json', true, 'form', request);
}

model SearchBodyRequest {
  corpId: string(name='CorpId', position='Body'),
  endTimeStamp: long(name='EndTimeStamp', position='Body'),
  gbId?: string(name='GbId', position='Body'),
  optionList?: map[string]any(name='OptionList', position='Body'),
  pageNo: int32(name='PageNo', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  startTimeStamp: long(name='StartTimeStamp', position='Body'),
}

model SearchBodyResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        gbId?: string(name='GbId'),
        imageUrl?: string(name='ImageUrl'),
        leftTopX?: float(name='LeftTopX'),
        leftTopY?: float(name='LeftTopY'),
        rightBottomX?: float(name='RightBottomX'),
        rightBottomY?: float(name='RightBottomY'),
        score?: float(name='Score'),
        targetImageUrl?: string(name='TargetImageUrl'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SearchBodyResponse = {
  headers: map[string]string(name='headers'),
  body: SearchBodyResponseBody(name='body'),
}

async function searchBody(request: SearchBodyRequest): SearchBodyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchBody', 'POST', '/', 'json', true, 'form', request);
}

model SearchFaceRequest {
  corpId: string(name='CorpId', position='Body'),
  endTimeStamp: long(name='EndTimeStamp', position='Body'),
  gbId?: string(name='GbId', position='Body'),
  optionList?: map[string]any(name='OptionList', position='Body'),
  pageNo: int32(name='PageNo', position='Body'),
  pageSize: int32(name='PageSize', position='Body'),
  startTimeStamp: long(name='StartTimeStamp', position='Body'),
}

model SearchFaceResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        gbId?: string(name='GbId'),
        imageUrl?: string(name='ImageUrl'),
        leftTopX?: float(name='LeftTopX'),
        leftTopY?: float(name='LeftTopY'),
        matchSuggestion?: string(name='MatchSuggestion'),
        rightBottomX?: float(name='RightBottomX'),
        rightBottomY?: float(name='RightBottomY'),
        score?: float(name='Score'),
        sourceId?: string(name='SourceId'),
        targetImageUrl?: string(name='TargetImageUrl'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SearchFaceResponse = {
  headers: map[string]string(name='headers'),
  body: SearchFaceResponseBody(name='body'),
}

async function searchFace(request: SearchFaceRequest): SearchFaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchFace', 'POST', '/', 'json', true, 'form', request);
}

model SearchObjectRequest {
  algorithmType?: string(name='AlgorithmType', position='Body'),
  conditions?: map[string]any(name='Conditions', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  deviceList?: map[string]any(name='DeviceList', position='Body'),
  endTime: long(name='EndTime', minimum=0, maximum=10000000000000000, position='Body'),
  imagePath?: map[string]any(name='ImagePath', position='Body'),
  objectType: string(name='ObjectType', position='Body'),
  pageNumber: int32(name='PageNumber', minimum=0, maximum=100000, position='Body'),
  pageSize: int32(name='PageSize', minimum=0, maximum=10000, position='Body'),
  picUrl?: string(name='PicUrl', position='Body'),
  startTime: long(name='StartTime', minimum=0, maximum=10000000000000000, position='Body'),
}

model SearchObjectResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    records?: [ 
      {
        compareResult?: string(name='CompareResult'),
        deviceID?: string(name='DeviceID'),
        leftTopX?: int32(name='LeftTopX'),
        leftTopY?: int32(name='LeftTopY'),
        rightBtmX?: int32(name='RightBtmX'),
        rightBtmY?: int32(name='RightBtmY'),
        score?: float(name='Score'),
        shotTime?: long(name='ShotTime'),
        sourceID?: string(name='SourceID'),
        sourceImagePath?: string(name='SourceImagePath'),
        sourceImageUrl?: string(name='SourceImageUrl'),
        targetImagePath?: string(name='TargetImagePath'),
        targetImageUrl?: string(name='TargetImageUrl'),
      }
    ](name='Records'),
    totalCount?: int32(name='TotalCount'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SearchObjectResponse = {
  headers: map[string]string(name='headers'),
  body: SearchObjectResponseBody(name='body'),
}

async function searchObject(request: SearchObjectRequest): SearchObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchObject', 'POST', '/', 'json', true, 'form', request);
}

model SearchTargetRequest {
  beginTime?: string(name='BeginTime', position='Body'),
  corpId: string(name='CorpId', position='Body'),
  deviceList?: string(name='DeviceList', position='Body'),
  endTime?: string(name='EndTime', position='Body'),
  modelId?: string(name='ModelId', position='Body'),
  orderBy?: string(name='OrderBy', position='Body'),
  pageNumber: long(name='PageNumber', position='Body'),
  pageSize: long(name='PageSize', position='Body'),
  similarityThreshold?: double(name='SimilarityThreshold', position='Body'),
  targetAttributes?: string(name='TargetAttributes', position='Body'),
  targetImageData?: string(name='TargetImageData', position='Body'),
  targetImageUrl?: string(name='TargetImageUrl', position='Body'),
  targetType: string(name='TargetType', position='Body'),
}

model SearchTargetResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    records?: [ 
      {
        deviceId?: string(name='DeviceId'),
        leftTopX?: long(name='LeftTopX'),
        leftTopY?: long(name='LeftTopY'),
        rightBottomX?: long(name='RightBottomX'),
        rightBottomY?: long(name='RightBottomY'),
        sourceImageUrl?: string(name='SourceImageUrl'),
        targetAttributes?: string(name='TargetAttributes'),
        targetImageSimilarity?: double(name='TargetImageSimilarity'),
        targetImageUrl?: string(name='TargetImageUrl'),
        targetType?: string(name='TargetType'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='Records'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model SearchTargetResponse = {
  headers: map[string]string(name='headers'),
  body: SearchTargetResponseBody(name='body'),
}

async function searchTarget(request: SearchTargetRequest): SearchTargetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchTarget', 'POST', '/', 'json', true, 'form', request);
}

model SetAiotStorageInfoRequest {
  eventAlarmMq: {
    alarmTopic: string(name='AlarmTopic'),
    eventTopic: string(name='EventTopic'),
    instanceId: string(name='InstanceId'),
    mqType?: string(name='MqType'),
    ramArnRole: string(name='RamArnRole'),
    regionId: string(name='RegionId'),
  }(name='EventAlarmMq', position='Body'),
  eventAlarmPictureStorage: {
    bucket: string(name='Bucket'),
    endpoint: string(name='Endpoint'),
    path?: string(name='Path'),
    proxy?: string(name='Proxy'),
    ramArnRole: string(name='RamArnRole'),
    storageType?: string(name='StorageType'),
  }(name='EventAlarmPictureStorage', position='Body'),
}

model SetAiotStorageInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SetAiotStorageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetAiotStorageInfoResponseBody(name='body'),
}

async function setAiotStorageInfo(request: SetAiotStorageInfoRequest): SetAiotStorageInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAiotStorageInfo', 'POST', '/', 'json', true, 'form', request);
}

model SetStreamModeRequest {
  deviceIdList: string(name='DeviceIdList', position='Body'),
  streamMode: string(name='StreamMode', position='Body'),
}

model SetStreamModeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetStreamModeResponse = {
  headers: map[string]string(name='headers'),
  body: SetStreamModeResponseBody(name='body'),
}

async function setStreamMode(request: SetStreamModeRequest): SetStreamModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetStreamMode', 'POST', '/', 'json', true, 'form', request);
}

model StartModelServiceRequest {
  modelServiceId?: string(name='ModelServiceId', position='Body'),
}

model StartModelServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    modelServiceInstanceId?: string(name='ModelServiceInstanceId'),
    modelServiceInstanceName?: int32(name='ModelServiceInstanceName'),
    modelServiceStatus?: string(name='ModelServiceStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartModelServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StartModelServiceResponseBody(name='body'),
}

async function startModelService(request: StartModelServiceRequest): StartModelServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartModelService', 'POST', '/', 'json', true, 'form', request);
}

model StartStreamsRequest {
  description?: string(name='Description', position='Body'),
  deviceIdList: string(name='DeviceIdList', description='全局编号,支持多个,英文逗号分隔', position='Body'),
}

model StartStreamsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StartStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: StartStreamsResponseBody(name='body'),
}

async function startStreams(request: StartStreamsRequest): StartStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartStreams', 'POST', '/', 'json', true, 'form', request);
}

model StopModelServiceRequest {
  modelServiceId?: string(name='ModelServiceId', position='Body'),
}

model StopModelServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    modelServiceInstanceId?: string(name='ModelServiceInstanceId'),
    modelServiceInstanceName?: int32(name='ModelServiceInstanceName'),
    modelServiceStatus?: string(name='ModelServiceStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopModelServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StopModelServiceResponseBody(name='body'),
}

async function stopModelService(request: StopModelServiceRequest): StopModelServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopModelService', 'POST', '/', 'json', true, 'form', request);
}

model StopMonitorRequest {
  algorithmVendor: string(name='AlgorithmVendor', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model StopMonitorResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: StopMonitorResponseBody(name='body'),
}

async function stopMonitor(request: StopMonitorRequest): StopMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopMonitor', 'POST', '/', 'json', true, 'form', request);
}

model StopStreamsRequest {
  description?: string(name='Description', position='Body'),
  deviceIdList: string(name='DeviceIdList', description='全局编号,支持多个,英文逗号分隔', position='Body'),
}

model StopStreamsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model StopStreamsResponse = {
  headers: map[string]string(name='headers'),
  body: StopStreamsResponseBody(name='body'),
}

async function stopStreams(request: StopStreamsRequest): StopStreamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopStreams', 'POST', '/', 'json', true, 'form', request);
}

model SubscribeDeviceEventRequest {
  deviceId: string(name='DeviceId', position='Query'),
  pushConfig: string(name='PushConfig', position='Query'),
}

model SubscribeDeviceEventResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubscribeDeviceEventResponse = {
  headers: map[string]string(name='headers'),
  body: SubscribeDeviceEventResponseBody(name='body'),
}

async function subscribeDeviceEvent(request: SubscribeDeviceEventRequest): SubscribeDeviceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubscribeDeviceEvent', 'POST', '/', 'json', false, 'json', request);
}

model SubscribeSpaceEventRequest {
  pushConfig: string(name='PushConfig', position='Query'),
  spaceId: string(name='SpaceId', position='Query'),
}

model SubscribeSpaceEventResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubscribeSpaceEventResponse = {
  headers: map[string]string(name='headers'),
  body: SubscribeSpaceEventResponseBody(name='body'),
}

async function subscribeSpaceEvent(request: SubscribeSpaceEventRequest): SubscribeSpaceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubscribeSpaceEvent', 'POST', '/', 'json', false, 'json', request);
}

model SyncDeviceTimeRequest {
  deviceSn: string(name='DeviceSn', position='Body'),
  deviceTimeStamp: string(name='DeviceTimeStamp', position='Body'),
}

model SyncDeviceTimeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  NTPServer?: string(name='NTPServer'),
  requestId?: string(name='RequestId'),
  retryInterval?: string(name='RetryInterval'),
  syncInterval?: string(name='SyncInterval'),
  timeStamp?: string(name='TimeStamp'),
}

model SyncDeviceTimeResponse = {
  headers: map[string]string(name='headers'),
  body: SyncDeviceTimeResponseBody(name='body'),
}

async function syncDeviceTime(request: SyncDeviceTimeRequest): SyncDeviceTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncDeviceTime', 'POST', '/', 'json', true, 'form', request);
}

model UnbindCorpGroupRequest {
  corpGroupId: string(name='CorpGroupId', position='Body'),
  corpId: string(name='CorpId', position='Body'),
}

model UnbindCorpGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindCorpGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindCorpGroupResponseBody(name='body'),
}

async function unbindCorpGroup(request: UnbindCorpGroupRequest): UnbindCorpGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindCorpGroup', 'POST', '/', 'json', true, 'form', request);
}

model UnbindDevicesRequest {
  corpId: string(name='CorpId', position='Body'),
  deviceId: string(name='DeviceId', position='Body'),
  subDeviceIdList: string(name='SubDeviceIdList', position='Body'),
}

model UnbindDevicesResponseBody = {
  code?: string(name='Code'),
  data?: {
    subDeviceList?: [ 
      {
        code?: string(name='Code'),
        message?: string(name='Message'),
        subDeviceId?: string(name='SubDeviceId'),
      }
    ](name='SubDeviceList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UnbindDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDevicesResponseBody(name='body'),
}

async function unbindDevices(request: UnbindDevicesRequest): UnbindDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDevices', 'POST', '/', 'json', true, 'form', request);
}

model UnbindPersonRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  profileId: long(name='ProfileId', minimum=1, maximum=9999999999999, position='Body'),
}

model UnbindPersonResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnbindPersonResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindPersonResponseBody(name='body'),
}

async function unbindPerson(request: UnbindPersonRequest): UnbindPersonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindPerson', 'POST', '/', 'json', true, 'form', request);
}

model UnbindUserRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  userId: long(name='UserId', minimum=1, maximum=9999999999999, position='Body'),
}

model UnbindUserResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnbindUserResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindUserResponseBody(name='body'),
}

async function unbindUser(request: UnbindUserRequest): UnbindUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindUser', 'POST', '/', 'json', true, 'form', request);
}

model UnsubscribeDeviceEventRequest {
  deviceId: string(name='DeviceId', position='Query'),
}

model UnsubscribeDeviceEventResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnsubscribeDeviceEventResponse = {
  headers: map[string]string(name='headers'),
  body: UnsubscribeDeviceEventResponseBody(name='body'),
}

async function unsubscribeDeviceEvent(request: UnsubscribeDeviceEventRequest): UnsubscribeDeviceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnsubscribeDeviceEvent', 'POST', '/', 'json', false, 'json', request);
}

model UnsubscribeSpaceEventRequest {
  spaceId: string(name='SpaceId', position='Query'),
}

model UnsubscribeSpaceEventResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnsubscribeSpaceEventResponse = {
  headers: map[string]string(name='headers'),
  body: UnsubscribeSpaceEventResponseBody(name='body'),
}

async function unsubscribeSpaceEvent(request: UnsubscribeSpaceEventRequest): UnsubscribeSpaceEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnsubscribeSpaceEvent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAiotDeviceRequest {
  aiotDevice: {
    IPAddr?: string(name='IPAddr'),
    latitude?: float(name='Latitude'),
    longitude?: float(name='Longitude'),
    name?: string(name='Name'),
    place?: string(name='Place'),
    port?: long(name='Port'),
  }(name='AiotDevice', position='Body'),
  id: string(name='Id', position='Body'),
}

model UpdateAiotDeviceResponseBody = {
  aiotDevice?: {
    capDirection?: string(name='CapDirection'),
    corpId?: string(name='CorpId'),
    deviceId?: string(name='DeviceId'),
    deviceType?: string(name='DeviceType'),
    firmwareVersion?: string(name='FirmwareVersion'),
    IPAddr?: string(name='IPAddr'),
    IPV6Addr?: string(name='IPV6Addr'),
    IPv4Gateway?: string(name='IPv4Gateway'),
    IPv4Netmask?: string(name='IPv4Netmask'),
    isOnline?: string(name='IsOnline'),
    latitude?: float(name='Latitude'),
    longitude?: float(name='Longitude'),
    MAC?: string(name='MAC'),
    manufacturer?: string(name='Manufacturer'),
    model?: string(name='Model'),
    monitorAreaDesc?: string(name='MonitorAreaDesc'),
    monitorDirection?: string(name='MonitorDirection'),
    name?: string(name='Name'),
    orgCode?: string(name='OrgCode'),
    ownerApsID?: string(name='OwnerApsID'),
    password?: string(name='Password'),
    place?: string(name='Place'),
    placeCode?: string(name='PlaceCode'),
    port?: long(name='Port'),
    serialNumber?: string(name='SerialNumber'),
    userId?: string(name='UserId'),
  }(name='AiotDevice'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAiotDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAiotDeviceResponseBody(name='body'),
}

async function updateAiotDevice(request: UpdateAiotDeviceRequest): UpdateAiotDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAiotDevice', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAiotPersonTableRequest {
  id: string(name='Id', position='Body'),
  personTable: {
    name: string(name='Name'),
    personTableId: string(name='PersonTableId'),
    type: long(name='Type'),
    verificationModelList?: [ long ](name='VerificationModelList'),
  }(name='PersonTable', position='Body'),
}

model UpdateAiotPersonTableResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  personTable?: {
    deviceId?: string(name='DeviceId'),
    faceNum?: long(name='FaceNum'),
    lastChange?: string(name='LastChange'),
    name?: string(name='Name'),
    personNum?: long(name='PersonNum'),
    personTableId?: string(name='PersonTableId'),
    totalPersonNum?: long(name='TotalPersonNum'),
    type?: long(name='Type'),
    verificationModelList?: [ long ](name='VerificationModelList'),
  }(name='PersonTable'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAiotPersonTableResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAiotPersonTableResponseBody(name='body'),
}

async function updateAiotPersonTable(request: UpdateAiotPersonTableRequest): UpdateAiotPersonTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAiotPersonTable', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAiotPersonTableItemRequest {
  id: string(name='Id', position='Body'),
  personTableId: string(name='PersonTableId', position='Body'),
  personTableItem: {
    identificationList?: [ 
      {
        number?: string(name='Number'),
        type?: long(name='Type'),
      }
    ](name='IdentificationList'),
    identificationNum?: long(name='IdentificationNum'),
    imageList?: [ 
      {
        data?: string(name='Data'),
        deviceId?: string(name='DeviceId'),
        eventSort?: string(name='EventSort'),
        featureInfo?: {
          algorithmType?: string(name='AlgorithmType'),
          algorithmVersion?: string(name='AlgorithmVersion'),
          featureData?: string(name='FeatureData'),
          imageId?: string(name='ImageId'),
          objectId?: string(name='ObjectId'),
          tabIeId?: string(name='TabIeId'),
          vendor?: string(name='Vendor'),
        }(name='FeatureInfo'),
        fileFormat?: string(name='FileFormat'),
        height?: long(name='Height'),
        imageId?: string(name='ImageId'),
        shotTime?: string(name='ShotTime'),
        size?: long(name='Size'),
        storagePath?: string(name='StoragePath'),
        type?: string(name='Type'),
        width?: long(name='Width'),
      }
    ](name='ImageList'),
    imageNum?: long(name='ImageNum'),
    personCode?: string(name='PersonCode'),
    personId: string(name='PersonId'),
    personName?: string(name='PersonName'),
    remarks?: string(name='Remarks'),
  }(name='PersonTableItem', position='Body'),
}

model UpdateAiotPersonTableItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  personTableItem?: {
    identificationList?: [ 
      {
        number?: string(name='Number'),
        type?: long(name='Type'),
      }
    ](name='IdentificationList'),
    identificationNum?: long(name='IdentificationNum'),
    imageList?: [ 
      {
        data?: string(name='Data'),
        deviceId?: string(name='DeviceId'),
        eventSort?: string(name='EventSort'),
        featureInfo?: {
          algorithmType?: string(name='AlgorithmType'),
          algorithmVersion?: string(name='AlgorithmVersion'),
          featureData?: string(name='FeatureData'),
          imageId?: string(name='ImageId'),
          objectId?: string(name='ObjectId'),
          tabIed?: string(name='TabIed'),
          vendor?: string(name='Vendor'),
        }(name='FeatureInfo'),
        fileFormat?: string(name='FileFormat'),
        height?: long(name='Height'),
        imageId?: string(name='ImageId'),
        shotTime?: string(name='ShotTime'),
        size?: long(name='Size'),
        storagePath?: string(name='StoragePath'),
        type?: string(name='Type'),
        width?: long(name='Width'),
      }
    ](name='ImageList'),
    imageNum?: long(name='ImageNum'),
    lastChange?: string(name='LastChange'),
    personCode?: string(name='PersonCode'),
    personId?: string(name='PersonId'),
    personName?: string(name='PersonName'),
    personTableId?: string(name='PersonTableId'),
    remarks?: string(name='Remarks'),
  }(name='PersonTableItem'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateAiotPersonTableItemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAiotPersonTableItemResponseBody(name='body'),
}

async function updateAiotPersonTableItem(request: UpdateAiotPersonTableItemRequest): UpdateAiotPersonTableItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAiotPersonTableItem', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAiotVehicleTableItemRequest {
  id: string(name='Id', position='Body'),
  vehicleTableId: string(name='VehicleTableId', position='Body'),
  vehicleTableItem: {
    beginTime?: string(name='BeginTime'),
    endTime?: string(name='EndTime'),
    ownerName?: string(name='OwnerName'),
    phoneNo?: string(name='PhoneNo'),
    plateNo: string(name='PlateNo'),
    remarks?: string(name='Remarks'),
    vehicleTableItemId: string(name='VehicleTableItemId'),
  }(name='VehicleTableItem', position='Body'),
}

model UpdateAiotVehicleTableItemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  vehicleTableItem?: {
    beginTime?: string(name='BeginTime'),
    endTime?: string(name='EndTime'),
    ownerName?: string(name='OwnerName'),
    phoneNo?: string(name='PhoneNo'),
    plateNo?: string(name='PlateNo'),
    remarks?: string(name='Remarks'),
    vehicleTableId?: string(name='VehicleTableId'),
    vehicleTableItemId?: string(name='VehicleTableItemId'),
  }(name='VehicleTableItem'),
}

model UpdateAiotVehicleTableItemResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAiotVehicleTableItemResponseBody(name='body'),
}

async function updateAiotVehicleTableItem(request: UpdateAiotVehicleTableItemRequest): UpdateAiotVehicleTableItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAiotVehicleTableItem', 'POST', '/', 'json', true, 'form', request);
}

model UpdateCorpRequest {
  appName?: string(name='AppName', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  corpName?: string(name='CorpName', position='Body'),
  description?: string(name='Description', position='Body'),
  iconPath?: string(name='IconPath', position='Body'),
  isvSubId?: string(name='IsvSubId', position='Body'),
  parentCorpId?: string(name='ParentCorpId', position='Body'),
}

model UpdateCorpResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateCorpResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCorpResponseBody(name='body'),
}

async function updateCorp(request: UpdateCorpRequest): UpdateCorpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCorp', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSourceRequest {
  dataSourceId: string(name='DataSourceId', position='Body'),
  dataSourceName: string(name='DataSourceName', position='Body'),
  description?: string(name='Description', position='Body'),
  url?: string(name='Url', position='Body'),
}

model UpdateDataSourceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDataSourceResponseBody(name='body'),
}

async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSource', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDeviceRequest {
  bitRate?: string(name='BitRate', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  deviceAddress?: string(name='DeviceAddress', position='Body'),
  deviceDirection?: string(name='DeviceDirection', position='Body'),
  deviceName?: string(name='DeviceName', position='Body'),
  deviceResolution?: string(name='DeviceResolution', position='Body'),
  deviceSite?: string(name='DeviceSite', position='Body'),
  deviceType?: string(name='DeviceType', position='Body'),
  gbId?: string(name='GbId', position='Body'),
  vendor?: string(name='Vendor', position='Body'),
}

model UpdateDeviceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceResponseBody(name='body'),
}

async function updateDevice(request: UpdateDeviceRequest): UpdateDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevice', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDeviceCaptureStrategyRequest {
  deviceCode: string(name='DeviceCode', description='设备通道', position='Body'),
  deviceType?: string(name='DeviceType', description='设备类型', position='Body'),
  mondayCaptureStrategy: string(name='MondayCaptureStrategy', description='周一图片抓去模式', position='Body'),
}

model UpdateDeviceCaptureStrategyResponseBody = {
  code?: string(name='Code', description='响应码'),
  message?: string(name='Message', description='响应信息'),
  requestId?: string(name='RequestId', description='RequestId'),
}

model UpdateDeviceCaptureStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceCaptureStrategyResponseBody(name='body'),
}

async function updateDeviceCaptureStrategy(request: UpdateDeviceCaptureStrategyRequest): UpdateDeviceCaptureStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceCaptureStrategy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDevicesStorageRequest {
  updateStorageRequests: [ 
    {
      deviceIds: string(name='DeviceIds'),
      storageDays: [ 
        {
          storageDays: long(name='StorageDays'),
          storageType: string(name='StorageType'),
        }
      ](name='StorageDays'),
    }
  ](name='UpdateStorageRequests', position='Body'),
}

model UpdateDevicesStorageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model UpdateDevicesStorageResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDevicesStorageResponseBody(name='body'),
}

async function updateDevicesStorage(request: UpdateDevicesStorageRequest): UpdateDevicesStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDevicesStorage', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDoubleVerificationGroupRequest {
  doubleVerificationGroup: {
    groupId?: string(name='GroupId'),
    interval?: long(name='Interval'),
    memberNumber?: long(name='MemberNumber'),
    personIdList?: [ 
      {
        personId?: string(name='PersonId'),
        personTableId?: string(name='PersonTableId'),
      }
    ](name='PersonIdList'),
  }(name='DoubleVerificationGroup', position='Body'),
  id: string(name='Id', position='Body'),
}

model UpdateDoubleVerificationGroupResponseBody = {
  code?: string(name='Code'),
  doubleVerificationGroup?: {
    deviceId?: string(name='DeviceId'),
    enabled?: string(name='Enabled'),
    groupId?: string(name='GroupId'),
    interval?: long(name='Interval'),
    lastChange?: string(name='LastChange'),
    memberNumber?: long(name='MemberNumber'),
    personIdList?: [ 
      {
        personId?: string(name='PersonId'),
        personTableId?: string(name='PersonTableId'),
      }
    ](name='PersonIdList'),
  }(name='DoubleVerificationGroup'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateDoubleVerificationGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDoubleVerificationGroupResponseBody(name='body'),
}

async function updateDoubleVerificationGroup(request: UpdateDoubleVerificationGroupRequest): UpdateDoubleVerificationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDoubleVerificationGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateModelServiceRequest {
  clientToken?: string(name='ClientToken', position='Body'),
  modelServiceId?: string(name='ModelServiceId', position='Body'),
  modelServiceName?: string(name='ModelServiceName', position='Body'),
  qpsRequired?: int32(name='QpsRequired', position='Body'),
}

model UpdateModelServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    algorithmCode?: string(name='AlgorithmCode'),
    modelServiceInstanceId?: string(name='ModelServiceInstanceId'),
    modelServiceInstanceName?: string(name='ModelServiceInstanceName'),
    modelServiceStatus?: string(name='ModelServiceStatus'),
    qpsRequired?: int32(name='QpsRequired'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model UpdateModelServiceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateModelServiceResponseBody(name='body'),
}

async function updateModelService(request: UpdateModelServiceRequest): UpdateModelServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateModelService', 'POST', '/', 'json', true, 'form', request);
}

model UpdateMonitorRequest {
  algorithmVendor: string(name='AlgorithmVendor', minimum=1, maximum=20, position='Body'),
  attributeName?: string(name='AttributeName', minimum=1, maximum=20, position='Body'),
  attributeOperateType?: string(name='AttributeOperateType', minimum=1, maximum=20, position='Body'),
  attributeValueList?: string(name='AttributeValueList', minimum=1, maximum=5000, position='Body'),
  corpId?: string(name='CorpId', minimum=1, maximum=50, position='Body'),
  description?: string(name='Description', minimum=1, maximum=100, position='Body'),
  deviceList?: string(name='DeviceList', minimum=1, maximum=5000, position='Body'),
  deviceOperateType?: string(name='DeviceOperateType', minimum=1, maximum=20, position='Body'),
  notifierAppSecret?: string(name='NotifierAppSecret', minimum=1, maximum=200, position='Body'),
  notifierExtendValues?: string(name='NotifierExtendValues', minimum=0, maximum=200, position='Body'),
  notifierTimeOut?: int32(name='NotifierTimeOut', minimum=10, maximum=3000, position='Body'),
  notifierType?: string(name='NotifierType', minimum=1, maximum=20, position='Body'),
  notifierUrl?: string(name='NotifierUrl', minimum=1, maximum=200, position='Body'),
  picList?: string(name='PicList', minimum=1, maximum=5000, position='Body'),
  picOperateType?: string(name='PicOperateType', minimum=1, maximum=20, position='Body'),
  ruleExpression?: string(name='RuleExpression', minimum=1, maximum=200, position='Body'),
  ruleName?: string(name='RuleName', minimum=1, maximum=20, position='Body'),
  taskId: string(name='TaskId', minimum=1, maximum=50, position='Body'),
}

model UpdateMonitorResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateMonitorResponseBody(name='body'),
}

async function updateMonitor(request: UpdateMonitorRequest): UpdateMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateMonitor', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProfileRequest {
  bizId?: string(name='BizId', position='Body'),
  catalogId: long(name='CatalogId', minimum=1, maximum=9999999999999, position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  faceUrl?: string(name='FaceUrl', position='Body'),
  gender?: int32(name='Gender', minimum=1, maximum=2, position='Body'),
  idNumber?: string(name='IdNumber', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  liveAddress?: string(name='LiveAddress', position='Body'),
  name?: string(name='Name', position='Body'),
  phoneNo?: string(name='PhoneNo', position='Body'),
  plateNo?: string(name='PlateNo', position='Body'),
  profileId: long(name='ProfileId', minimum=1, maximum=9999999999999, position='Body'),
  sceneType?: string(name='SceneType', position='Body'),
}

model UpdateProfileResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateProfileResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProfileResponseBody(name='body'),
}

async function updateProfile(request: UpdateProfileRequest): UpdateProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProfile', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProfileCatalogRequest {
  catalogId: long(name='CatalogId', minimum=1, maximum=9999999999999, position='Body'),
  catalogName: string(name='CatalogName', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
}

model UpdateProfileCatalogResponseBody = {
  code?: string(name='Code'),
  data?: {
    catalogId?: long(name='CatalogId'),
    catalogName?: string(name='CatalogName'),
    isvSubId?: string(name='IsvSubId'),
    parentCatalogId?: string(name='ParentCatalogId'),
    profileCount?: long(name='ProfileCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateProfileCatalogResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProfileCatalogResponseBody(name='body'),
}

async function updateProfileCatalog(request: UpdateProfileCatalogRequest): UpdateProfileCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProfileCatalog', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserRequest {
  address?: string(name='Address', position='Body'),
  age?: int32(name='Age', minimum=1, maximum=100, position='Body'),
  attachment?: string(name='Attachment', position='Body'),
  bizId?: string(name='BizId', position='Body'),
  corpId?: string(name='CorpId', position='Body'),
  faceImageContent?: string(name='FaceImageContent', position='Body'),
  faceImageUrl?: string(name='FaceImageUrl', position='Body'),
  gender?: int32(name='Gender', minimum=1, maximum=2, position='Body'),
  idNumber?: string(name='IdNumber', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  phoneNo?: string(name='PhoneNo', position='Body'),
  plateNo?: string(name='PlateNo', position='Body'),
  userGroupId: long(name='UserGroupId', minimum=1, maximum=9999999999999, position='Body'),
  userId: long(name='UserId', minimum=1, maximum=9999999999999, position='Body'),
  userName?: string(name='UserName', position='Body'),
}

model UpdateUserResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', true, 'form', request);
}

model UpdateUserGroupRequest {
  corpId?: string(name='CorpId', position='Body'),
  isvSubId: string(name='IsvSubId', position='Body'),
  userGroupId: long(name='UserGroupId', minimum=1, maximum=9999999999999, position='Body'),
  userGroupName: string(name='UserGroupName', position='Body'),
}

model UpdateUserGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    isvSubId?: string(name='IsvSubId'),
    parentUserGroupId?: string(name='ParentUserGroupId'),
    userCount?: long(name='UserCount'),
    userGroupId?: long(name='UserGroupId'),
    userGroupName?: string(name='UserGroupName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateUserGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserGroupResponseBody(name='body'),
}

async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroup', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWatchPolicyRequest {
  itemMatchType?: string(name='ItemMatchType', position='Body'),
  similarityThreshold?: double(name='SimilarityThreshold', position='Body'),
  targetType?: string(name='TargetType', position='Body'),
  watchMode?: string(name='WatchMode', position='Body'),
  watchPolicyId: string(name='WatchPolicyId', position='Body'),
  watchPolicyName?: string(name='WatchPolicyName', position='Body'),
}

model UpdateWatchPolicyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model UpdateWatchPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWatchPolicyResponseBody(name='body'),
}

async function updateWatchPolicy(request: UpdateWatchPolicyRequest): UpdateWatchPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWatchPolicy', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWatchTaskRequest {
  description?: string(name='Description', position='Body'),
  deviceList?: string(name='DeviceList', position='Body'),
  messageReceiver?: string(name='MessageReceiver', position='Body'),
  scheduleCycleDates?: string(name='ScheduleCycleDates', position='Body'),
  scheduleTimes?: string(name='ScheduleTimes', position='Body'),
  scheduleType?: string(name='ScheduleType', position='Body'),
  taskName?: string(name='TaskName', position='Body'),
  watchPolicyIds?: string(name='WatchPolicyIds', position='Body'),
  watchTaskId: string(name='WatchTaskId', position='Body'),
}

model UpdateWatchTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success'),
}

model UpdateWatchTaskResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWatchTaskResponseBody(name='body'),
}

async function updateWatchTask(request: UpdateWatchTaskRequest): UpdateWatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWatchTask', 'POST', '/', 'json', true, 'form', request);
}

model UploadFileRequest {
  corpId?: string(name='CorpId', position='Body'),
  dataSourceId: string(name='DataSourceId', position='Body'),
  fileAliasName?: string(name='FileAliasName', position='Body'),
  fileContent?: string(name='FileContent', position='Body'),
  fileName: string(name='FileName', position='Body'),
  filePath?: string(name='FilePath', position='Body'),
  fileType: string(name='FileType', position='Body'),
  MD5?: string(name='MD5', position='Body'),
}

model UploadFileResponseBody = {
  code?: string(name='Code'),
  data?: {
    records?: [ 
      {
        ossPath?: string(name='OssPath'),
        sourceId?: string(name='SourceId'),
      }
    ](name='Records'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UploadFileResponse = {
  headers: map[string]string(name='headers'),
  body: UploadFileResponseBody(name='body'),
}

async function uploadFile(request: UploadFileRequest): UploadFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadFile', 'POST', '/', 'json', true, 'form', request);
}

model UploadImageRequest {
  imageUrl: string(name='ImageUrl', position='Body'),
}

model UploadImageResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UploadImageResponse = {
  headers: map[string]string(name='headers'),
  body: UploadImageResponseBody(name='body'),
}

async function uploadImage(request: UploadImageRequest): UploadImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadImage', 'POST', '/', 'json', true, 'form', request);
}

model VerifyDeviceRequest {
  deviceAddress: string(name='DeviceAddress', description='设备安装地址', position='Body'),
  filePath: string(name='FilePath', description='OSS路径', position='Body'),
  nvrExisted?: long(name='NvrExisted', position='Body'),
}

model VerifyDeviceResponseBody = {
  code?: string(name='Code', description='响应码'),
  data?: [ 
    {
      code?: string(name='Code', description='格式错误或国标冲突的错误码，0为成功，-1为失败'),
      id?: string(name='Id', description='Excel中的序号列的值'),
      message?: string(name='Message', description='格式错误或国标冲突提示'),
      originalGbId?: string(name='OriginalGbId', description='原始国标编码'),
      rowNumber?: long(name='RowNumber', description='记录所在行号'),
      suggestGbId?: string(name='SuggestGbId', description='建议的国标编码'),
    }
  ](name='Data'),
  message?: string(name='Message', description='响应码描述'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model VerifyDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyDeviceResponseBody(name='body'),
}

async function verifyDevice(request: VerifyDeviceRequest): VerifyDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyDevice', 'POST', '/', 'json', true, 'form', request);
}

