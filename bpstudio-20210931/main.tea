/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bpstudio', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model ChangeResourceGroupResponseBody = {
  code?: long(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    body['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CreateApplicationRequest {
  areaId?: string(name='AreaId'),
  clientToken?: string(name='ClientToken'),
  configuration?: map[string]string(name='Configuration'),
  instances?: [ 
    {
      id?: string(name='Id'),
      nodeName?: string(name='NodeName'),
      nodeType?: string(name='NodeType'),
    }
  ](name='Instances'),
  name?: string(name='Name'),
  resourceGroupId?: string(name='ResourceGroupId'),
  templateId?: string(name='TemplateId'),
  variables?: map[string]string(name='Variables'),
}

model CreateApplicationShrinkRequest {
  areaId?: string(name='AreaId'),
  clientToken?: string(name='ClientToken'),
  configurationShrink?: string(name='Configuration'),
  instancesShrink?: string(name='Instances'),
  name?: string(name='Name'),
  resourceGroupId?: string(name='ResourceGroupId'),
  templateId?: string(name='TemplateId'),
  variablesShrink?: string(name='Variables'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(tmpReq: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(tmpReq);
  var request = new CreateApplicationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configuration)) {
    request.configurationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configuration, 'Configuration', 'json');
  }
  if (!Util.isUnset(tmpReq.instances)) {
    request.instancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instances, 'Instances', 'json');
  }
  if (!Util.isUnset(tmpReq.variables)) {
    request.variablesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.variables, 'Variables', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.areaId)) {
    body['AreaId'] = request.areaId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationShrink)) {
    body['Configuration'] = request.configurationShrink;
  }
  if (!Util.isUnset(request.instancesShrink)) {
    body['Instances'] = request.instancesShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.variablesShrink)) {
    body['Variables'] = request.variablesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model DeleteApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteApplicationResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplicationWithOptions(request: DeleteApplicationRequest, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationWithOptions(request, runtime);
}

model DeployApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeployApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeployApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployApplicationResponseBody(name='body'),
}

async function deployApplicationWithOptions(request: DeployApplicationRequest, runtime: Util.RuntimeOptions): DeployApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployApplication(request: DeployApplicationRequest): DeployApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApplicationWithOptions(request, runtime);
}

model ExecuteOperationASyncRequest {
  attributes?: map[string]string(name='Attributes'),
  operation?: string(name='Operation'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceType?: string(name='ServiceType'),
}

model ExecuteOperationASyncShrinkRequest {
  attributesShrink?: string(name='Attributes'),
  operation?: string(name='Operation'),
  resourceGroupId?: string(name='ResourceGroupId'),
  serviceType?: string(name='ServiceType'),
}

model ExecuteOperationASyncResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ExecuteOperationASyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteOperationASyncResponseBody(name='body'),
}

async function executeOperationASyncWithOptions(tmpReq: ExecuteOperationASyncRequest, runtime: Util.RuntimeOptions): ExecuteOperationASyncResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteOperationASyncShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.attributes)) {
    request.attributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attributes, 'Attributes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributesShrink)) {
    body['Attributes'] = request.attributesShrink;
  }
  if (!Util.isUnset(request.operation)) {
    body['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceType)) {
    body['ServiceType'] = request.serviceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteOperationASync',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeOperationASync(request: ExecuteOperationASyncRequest): ExecuteOperationASyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeOperationASyncWithOptions(request, runtime);
}

model GetApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model GetApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: {
    applicationId?: string(name='ApplicationId'),
    checklist?: [ 
      {
        lifecycle?: string(name='Lifecycle'),
        region?: string(name='Region'),
        remark?: string(name='Remark'),
        resourceCode?: string(name='ResourceCode'),
        resourceName?: string(name='ResourceName'),
        result?: string(name='Result'),
        specification?: string(name='Specification'),
      }
    ](name='Checklist'),
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    error?: string(name='Error'),
    imageURL?: string(name='ImageURL'),
    name?: string(name='Name'),
    priceList?: [ 
      {
        chargeType?: string(name='ChargeType'),
        count?: long(name='Count'),
        instanceName?: string(name='InstanceName'),
        lifecycle?: string(name='Lifecycle'),
        onePrice?: float(name='OnePrice'),
        originalPrice?: float(name='OriginalPrice'),
        period?: float(name='Period'),
        price?: float(name='Price'),
        priceUnit?: string(name='PriceUnit'),
        region?: string(name='Region'),
        remark?: string(name='Remark'),
        resourceCode?: string(name='ResourceCode'),
        specification?: string(name='Specification'),
      }
    ](name='PriceList'),
    resourceGroupId?: string(name='ResourceGroupId'),
    resourceList?: [ 
      {
        chargeType?: string(name='ChargeType'),
        lifecycle?: string(name='Lifecycle'),
        remark?: string(name='Remark'),
        resourceCode?: string(name='ResourceCode'),
        resourceId?: string(name='ResourceId'),
        resourceName?: string(name='ResourceName'),
        resourceType?: string(name='ResourceType'),
        status?: string(name='Status'),
      }
    ](name='ResourceList'),
    status?: string(name='Status'),
    templateId?: string(name='TemplateId'),
    topoURL?: string(name='TopoURL'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplicationWithOptions(request: GetApplicationRequest, runtime: Util.RuntimeOptions): GetApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationWithOptions(request, runtime);
}

model GetExecuteOperationResultRequest {
  operationId?: string(name='OperationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model GetExecuteOperationResultResponseBody = {
  code?: int32(name='Code'),
  data?: {
    arguments?: string(name='Arguments'),
    message?: string(name='Message'),
    operationId?: string(name='OperationId'),
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetExecuteOperationResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExecuteOperationResultResponseBody(name='body'),
}

async function getExecuteOperationResultWithOptions(request: GetExecuteOperationResultRequest, runtime: Util.RuntimeOptions): GetExecuteOperationResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operationId)) {
    body['OperationId'] = request.operationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetExecuteOperationResult',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExecuteOperationResult(request: GetExecuteOperationResultRequest): GetExecuteOperationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExecuteOperationResultWithOptions(request, runtime);
}

model GetTemplateRequest {
  region?: string(name='Region'),
  resourceGroupId?: string(name='ResourceGroupId'),
  templateId?: string(name='TemplateId'),
}

model GetTemplateResponseBody = {
  code?: int32(name='Code'),
  data?: {
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    imageURL?: string(name='ImageURL'),
    name?: string(name='Name'),
    resourceGroupId?: string(name='ResourceGroupId'),
    templateId?: string(name='TemplateId'),
    topoURL?: string(name='TopoURL'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetTokenRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model GetTokenResponseBody = {
  code?: int32(name='Code'),
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    bucket?: string(name='Bucket'),
    endpoint?: string(name='Endpoint'),
    securityToken?: string(name='SecurityToken'),
    snapshotBucket?: string(name='SnapshotBucket'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTokenResponseBody(name='body'),
}

async function getTokenWithOptions(request: GetTokenRequest, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTokenWithOptions(request, runtime);
}

model ListApplicationRequest {
  keyword?: string(name='Keyword'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: int32(name='NextToken'),
  orderType?: long(name='OrderType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status'),
}

model ListApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      applicationId?: string(name='ApplicationId'),
      createTime?: string(name='CreateTime'),
      imageURL?: string(name='ImageURL'),
      name?: string(name='Name'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: int32(name='Status'),
      topoURL?: string(name='TopoURL'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationResponseBody(name='body'),
}

async function listApplicationWithOptions(request: ListApplicationRequest, runtime: Util.RuntimeOptions): ListApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    body['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationWithOptions(request, runtime);
}

model ListTemplateRequest {
  keyword?: string(name='Keyword'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: int32(name='NextToken'),
  orderType?: long(name='OrderType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tagList?: int32(name='TagList'),
  type?: string(name='Type'),
}

model ListTemplateResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      createTime?: string(name='CreateTime'),
      imageURL?: string(name='ImageURL'),
      name?: string(name='Name'),
      resourceGroupId?: string(name='ResourceGroupId'),
      tagId?: int32(name='TagId'),
      tagName?: string(name='TagName'),
      templateId?: string(name='TemplateId'),
      topoURL?: string(name='TopoURL'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTemplateResponseBody(name='body'),
}

async function listTemplateWithOptions(request: ListTemplateRequest, runtime: Util.RuntimeOptions): ListTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    body['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagList)) {
    body['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplate',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTemplate(request: ListTemplateRequest): ListTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplateWithOptions(request, runtime);
}

model ReleaseApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ReleaseApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReleaseApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseApplicationResponseBody(name='body'),
}

async function releaseApplicationWithOptions(request: ReleaseApplicationRequest, runtime: Util.RuntimeOptions): ReleaseApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseApplication(request: ReleaseApplicationRequest): ReleaseApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseApplicationWithOptions(request, runtime);
}

model ValidateApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ValidateApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ValidateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateApplicationResponseBody(name='body'),
}

async function validateApplicationWithOptions(request: ValidateApplicationRequest, runtime: Util.RuntimeOptions): ValidateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ValidateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateApplication(request: ValidateApplicationRequest): ValidateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateApplicationWithOptions(request, runtime);
}

model ValuateApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ValuateApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ValuateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValuateApplicationResponseBody(name='body'),
}

async function valuateApplicationWithOptions(request: ValuateApplicationRequest, runtime: Util.RuntimeOptions): ValuateApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ValuateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function valuateApplication(request: ValuateApplicationRequest): ValuateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return valuateApplicationWithOptions(request, runtime);
}

