/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bpstudio', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateApplicationRequest {
  areaId?: string(name='AreaId', description='区域ID'),
  clientToken?: string(name='ClientToken', description='幂等标记'),
  configuration?: map[string]any(name='Configuration'),
  instances?: [ 
    {
      id?: string(name='Id', description='实例ID'),
      nodeName?: string(name='NodeName', description='图上实例名'),
      nodeType?: string(name='NodeType', description='实例类型'),
    }
  ](name='Instances', description='待替换实例列表'),
  name?: string(name='Name', description='新建应用名'),
  resourceGroupId?: string(name='ResourceGroupId', description='应用所属资源组ID'),
  templateId?: string(name='TemplateId', description='模板ID'),
  variables?: map[string]any(name='Variables'),
}

model CreateApplicationShrinkRequest {
  areaId?: string(name='AreaId', description='区域ID'),
  clientToken?: string(name='ClientToken', description='幂等标记'),
  configurationShrink?: string(name='Configuration'),
  instancesShrink?: string(name='Instances', description='待替换实例列表'),
  name?: string(name='Name', description='新建应用名'),
  resourceGroupId?: string(name='ResourceGroupId', description='应用所属资源组ID'),
  templateId?: string(name='TemplateId', description='模板ID'),
  variablesShrink?: string(name='Variables'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data', description='应用ID'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(tmpReq: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(tmpReq);
  var request = new CreateApplicationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configuration)) {
    request.configurationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configuration, 'Configuration', 'json');
  }
  if (!Util.isUnset(tmpReq.instances)) {
    request.instancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instances, 'Instances', 'json');
  }
  if (!Util.isUnset(tmpReq.variables)) {
    request.variablesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.variables, 'Variables', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.areaId)) {
    body['AreaId'] = request.areaId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationShrink)) {
    body['Configuration'] = request.configurationShrink;
  }
  if (!Util.isUnset(request.instancesShrink)) {
    body['Instances'] = request.instancesShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.variablesShrink)) {
    body['Variables'] = request.variablesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model DeleteApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DeleteApplicationResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplicationWithOptions(request: DeleteApplicationRequest, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationWithOptions(request, runtime);
}

model DeployApplicationRequest {
  applicationId?: string(name='ApplicationId', description='应用ID'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
}

model DeployApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeployApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployApplicationResponseBody(name='body'),
}

async function deployApplicationWithOptions(request: DeployApplicationRequest, runtime: Util.RuntimeOptions): DeployApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployApplication(request: DeployApplicationRequest): DeployApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApplicationWithOptions(request, runtime);
}

model GetApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model GetApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: {
    applicationId?: string(name='ApplicationId', description='应用ID'),
    checklist?: [ 
      {
        lifecycle?: string(name='Lifecycle', description='资源标记'),
        region?: string(name='Region', description='区域'),
        remark?: string(name='Remark', description='失败原因'),
        resourceCode?: string(name='ResourceCode', description='产品code'),
        resourceName?: string(name='ResourceName', description='实例名'),
        result?: string(name='Result', description='校验结果'),
        specification?: string(name='Specification', description='规格'),
      }
    ](name='Checklist', description='校验结果列表'),
    createTime?: string(name='CreateTime', description='应用创建时间'),
    description?: string(name='Description', description='应用描述'),
    error?: string(name='Error', description='失败原因'),
    imageURL?: string(name='ImageURL', description='数据库中图片地址'),
    name?: string(name='Name', description='应用名'),
    priceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='支付类型'),
        count?: long(name='Count', description='数量'),
        instanceName?: string(name='InstanceName', description='实例名'),
        lifecycle?: string(name='Lifecycle', description='资源标记'),
        onePrice?: float(name='OnePrice', description='单价'),
        originalPrice?: float(name='OriginalPrice', description='原价'),
        period?: float(name='Period', description='时长'),
        price?: float(name='Price', description='总价'),
        priceUnit?: string(name='PriceUnit', description='单位'),
        region?: string(name='Region', description='区域'),
        remark?: string(name='Remark'),
        resourceCode?: string(name='ResourceCode', description='产品code'),
        specification?: string(name='Specification', description='规格'),
      }
    ](name='PriceList', description='计费结果列表'),
    resourceGroupId?: string(name='ResourceGroupId', description='应用所属资源组ID'),
    resourceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='支付类型'),
        lifecycle?: string(name='Lifecycle', description='资源标记'),
        remark?: string(name='Remark', description='部署结果'),
        resourceCode?: string(name='ResourceCode', description='产品code'),
        resourceId?: string(name='ResourceId', description='实例ID'),
        resourceName?: string(name='ResourceName', description='实例名称'),
        resourceType?: string(name='ResourceType', description='资源类型'),
        status?: string(name='Status', description='资源部署结果'),
      }
    ](name='ResourceList', description='资源列表'),
    status?: string(name='Status', description='应用状态'),
    templateId?: string(name='TemplateId', description='应用关联模板ID'),
    topoURL?: string(name='TopoURL', description='应用topo地址'),
  }(name='Data'),
  message?: string(name='Message', description='请求失败原因'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplicationWithOptions(request: GetApplicationRequest, runtime: Util.RuntimeOptions): GetApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationWithOptions(request, runtime);
}

model GetTemplateRequest {
  region?: string(name='Region'),
  resourceGroupId?: string(name='ResourceGroupId'),
  templateId?: string(name='TemplateId'),
}

model GetTemplateResponseBody = {
  code?: int32(name='Code'),
  data?: {
    createTime?: string(name='CreateTime'),
    description?: string(name='Description'),
    imageURL?: string(name='ImageURL'),
    name?: string(name='Name'),
    resourceGroupId?: string(name='ResourceGroupId'),
    templateId?: string(name='TemplateId'),
    topoURL?: string(name='TopoURL'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetTokenRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
}

model GetTokenResponseBody = {
  code?: int32(name='Code'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='oss访问access key id'),
    accessKeySecret?: string(name='AccessKeySecret', description='oss访问access key secret id'),
    bucket?: string(name='Bucket', description='oss文件保存bucket位置'),
    endpoint?: string(name='Endpoint', description='oss的endpoint'),
    securityToken?: string(name='SecurityToken', description='oss访问token'),
    snapshotBucket?: string(name='SnapshotBucket', description='oss快照保存bucket位置'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTokenResponseBody(name='body'),
}

async function getTokenWithOptions(request: GetTokenRequest, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTokenWithOptions(request, runtime);
}

model ListApplicationRequest {
  keyword?: string(name='Keyword'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: int32(name='NextToken'),
  orderType?: long(name='OrderType', description='排序字段'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status', description='应用的状态'),
}

model ListApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用ID'),
      createTime?: string(name='CreateTime', description='应用创建时间'),
      imageURL?: string(name='ImageURL', description='应用的图片链接'),
      name?: string(name='Name', description='应用的名称'),
      resourceGroupId?: string(name='ResourceGroupId', description='应用的资源组'),
      status?: int32(name='Status', description='应用的状态'),
      topoURL?: string(name='TopoURL', description='应用的拓扑图链接'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationResponseBody(name='body'),
}

async function listApplicationWithOptions(request: ListApplicationRequest, runtime: Util.RuntimeOptions): ListApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    body['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationWithOptions(request, runtime);
}

model ListTemplateRequest {
  keyword?: string(name='Keyword', description='搜索关键字'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: int32(name='NextToken'),
  orderType?: long(name='OrderType', description='排序字段'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tagList?: int32(name='TagList', description='模板的标签'),
  type?: string(name='Type', description='类型'),
}

model ListTemplateResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      imageURL?: string(name='ImageURL', description='模板的图片链接'),
      name?: string(name='Name', description='模板的名称'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
      tagId?: int32(name='TagId', description='模板的标签的ID'),
      tagName?: string(name='TagName', description='模板标签的名称'),
      templateId?: string(name='TemplateId', description='模板的ID'),
      topoURL?: string(name='TopoURL', description='模板的拓扑图'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTemplateResponseBody(name='body'),
}

async function listTemplateWithOptions(request: ListTemplateRequest, runtime: Util.RuntimeOptions): ListTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    body['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagList)) {
    body['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplate',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTemplate(request: ListTemplateRequest): ListTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplateWithOptions(request, runtime);
}

model ReleaseApplicationRequest {
  applicationId?: string(name='ApplicationId', description='应用ID'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ReleaseApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReleaseApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseApplicationResponseBody(name='body'),
}

async function releaseApplicationWithOptions(request: ReleaseApplicationRequest, runtime: Util.RuntimeOptions): ReleaseApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseApplication(request: ReleaseApplicationRequest): ReleaseApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseApplicationWithOptions(request, runtime);
}

model ValidateApplicationRequest {
  applicationId?: string(name='ApplicationId', description='应用ID'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
}

model ValidateApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ValidateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateApplicationResponseBody(name='body'),
}

async function validateApplicationWithOptions(request: ValidateApplicationRequest, runtime: Util.RuntimeOptions): ValidateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ValidateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateApplication(request: ValidateApplicationRequest): ValidateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateApplicationWithOptions(request, runtime);
}

model ValuateApplicationRequest {
  applicationId?: string(name='ApplicationId', description='应用ID'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID'),
}

model ValuateApplicationResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ValuateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValuateApplicationResponseBody(name='body'),
}

async function valuateApplicationWithOptions(request: ValuateApplicationRequest, runtime: Util.RuntimeOptions): ValuateApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ValuateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function valuateApplication(request: ValuateApplicationRequest): ValuateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return valuateApplicationWithOptions(request, runtime);
}

