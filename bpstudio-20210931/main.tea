/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('bpstudio', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', description='rg-aek2ajbjoloa23q', example='rg-aek2ajbjoloa23q'),
  resourceId?: string(name='ResourceId', description='P7RMVSVM9LOVYQOM', example='P7RMVSVM9LOVYQOM'),
  resourceType?: string(name='ResourceType', description='APPLICATION'),
}

model ChangeResourceGroupResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='A3488F1D-C444-17D0-BA4F-5374BA0F3562'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    body['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CreateApplicationRequest {
  areaId?: string(name='AreaId', description='The ID of the region.', example='cn-hangzhou'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019'),
  configuration?: map[string]string(name='Configuration', description='The parameters that are used to configure the application you want to create. For example, enableMonitor specifies whether to automatically create a CloudMonitor task for the application, and enableReport specifies whether to generate reports.', example='{"enableMonitor":"0", "enableReport":"1"}'),
  instances?: [ 
    {
      id?: string(name='Id', description='The ID of the instance.', example='vpc-bp1q56trhtaq40vlq5ojm'),
      nodeName?: string(name='NodeName', description='The name of the instance.', example='vpc'),
      nodeType?: string(name='NodeType', description='The type of the instance.', example='vpc'),
    }
  ](name='Instances', description='The instances in which you want to create the application. You can create applications in an existing virtual private cloud (VPC).'),
  name?: string(name='Name', description='The name of the application that you want to create.', example='cadt-application'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application you want to create belongs.', example='rg-acfmyjt3c5om3hi'),
  templateId?: string(name='TemplateId', description='The ID of the template.', example='0KSHPM6SJU03TNZP'),
  variables?: map[string]string(name='Variables', description='The parameter values that are contained in the template. If the template contains no parameter values, the default values are used.', example='{"variable1":"1"}'),
}

model CreateApplicationShrinkRequest {
  areaId?: string(name='AreaId', description='The ID of the region.', example='cn-hangzhou'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019'),
  configurationShrink?: string(name='Configuration', description='The parameters that are used to configure the application you want to create. For example, enableMonitor specifies whether to automatically create a CloudMonitor task for the application, and enableReport specifies whether to generate reports.', example='{"enableMonitor":"0", "enableReport":"1"}'),
  instancesShrink?: string(name='Instances', description='The instances in which you want to create the application. You can create applications in an existing virtual private cloud (VPC).'),
  name?: string(name='Name', description='The name of the application that you want to create.', example='cadt-application'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application you want to create belongs.', example='rg-acfmyjt3c5om3hi'),
  templateId?: string(name='TemplateId', description='The ID of the template.', example='0KSHPM6SJU03TNZP'),
  variablesShrink?: string(name='Variables', description='The parameter values that are contained in the template. If the template contains no parameter values, the default values are used.', example='{"variable1":"1"}'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The ID of the application.', example='002XWH7MXB8MJRU0'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(tmpReq: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(tmpReq);
  var request = new CreateApplicationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.configuration)) {
    request.configurationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configuration, 'Configuration', 'json');
  }
  if (!Util.isUnset(tmpReq.instances)) {
    request.instancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instances, 'Instances', 'json');
  }
  if (!Util.isUnset(tmpReq.variables)) {
    request.variablesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.variables, 'Variables', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.areaId)) {
    body['AreaId'] = request.areaId;
  }
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.configurationShrink)) {
    body['Configuration'] = request.configurationShrink;
  }
  if (!Util.isUnset(request.instancesShrink)) {
    body['Instances'] = request.instancesShrink;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.variablesShrink)) {
    body['Variables'] = request.variablesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model DeleteApplicationRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='002XWH7MXB8MJRU0'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
}

model DeleteApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplicationWithOptions(request: DeleteApplicationRequest, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationWithOptions(request, runtime);
}

model DeployApplicationRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='VVK605ZH00OA4MRT'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
}

model DeployApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeployApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeployApplicationResponseBody(name='body'),
}

async function deployApplicationWithOptions(request: DeployApplicationRequest, runtime: Util.RuntimeOptions): DeployApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeployApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployApplication(request: DeployApplicationRequest): DeployApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApplicationWithOptions(request, runtime);
}

model ExecuteOperationASyncRequest {
  attributes?: map[string]string(name='Attributes', description='The parameters that you need to specify when you perform an operation. The parameters vary based on the operation and are specified in the map format. The following examples show how to specify the parameters if you perform an operation on an ECS instance:

*   The following common parameters need to be specified for operations on an ECS instance:

change_type, regionId, instanceId, and appId.

*   To change the instance type of an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_instance_type","instance_type":"ecs.hfr7.2xlarge","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

*   To stop an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Stopped","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

*   To start an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Running","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

*   To restart an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Restart","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

Enumeration values

<!-- -->

:

*   { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{\\\\"change_type\\\\":\\\\"modify_instance_type\\\\",\\\\"instance_type\\\\":\\\\"ecs.hfr7.2xlarge\\\\",\\\\"instanceId\\\\":\\\\"i-xxxxxxxxx\\\\",\\\\"regionId\\\\":\\\\"cn-beijing\\\\",\\\\"appId\\\\":\\\\"xxxxxxxxxxxxx\\\\"}" }

    <!-- -->

    :

    <!-- -->

    { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{\\\\"change_type\\\\":\\\\"modify_instance_type\\\\",\\\\"instance_type\\\\":\\\\"ecs.hfr7.2xlarge\\\\",\\\\"instanceId\\\\":\\\\"i-xxxxxxxxx\\\\",\\\\"regionId\\\\":\\\\"cn-beijing\\\\",\\\\"appId\\\\":\\\\"xxxxxxxxxxxxx\\\\"}" }'),
  operation?: string(name='Operation', description='The type of the operation to be performed to modify the parameters of an instance of the specified service. Some operations are common to different services, and other operations are specific to each service. For example, set this parameter to one of the following values to perform the corresponding operation on an ECS instance:

*   rename: modifies the name of an ECS instance.
*   modifyInstanceType: changes the instance type of an ECS instance.
*   modifyInstanceType: starts an ECS instance.
*   modifyInstanceType: stops an ECS instance.
*   modifyInstanceType: restarts an ECS instance.
*   addTags: adds tags to an ECS instance.
*   ecsDelete: deletes an ECS instance.
*   modifyPayType: changes the billing method of an ECS instance.', example='queryTopo'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is specified to verify the permissions on the resource group.', example='ceshi'),
  serviceType?: string(name='ServiceType', description='The type of the service. If you want to modify the parameters of an Elastic Compute Service (ECS) instance, set this parameter to ecs.', example='ACK'),
}

model ExecuteOperationASyncShrinkRequest {
  attributesShrink?: string(name='Attributes', description='The parameters that you need to specify when you perform an operation. The parameters vary based on the operation and are specified in the map format. The following examples show how to specify the parameters if you perform an operation on an ECS instance:

*   The following common parameters need to be specified for operations on an ECS instance:

change_type, regionId, instanceId, and appId.

*   To change the instance type of an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_instance_type","instance_type":"ecs.hfr7.2xlarge","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

*   To stop an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Stopped","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

*   To start an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Running","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

*   To restart an ECS instance, specify the following parameters:

{ "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Restart","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

Enumeration values

<!-- -->

:

*   { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{\\\\"change_type\\\\":\\\\"modify_instance_type\\\\",\\\\"instance_type\\\\":\\\\"ecs.hfr7.2xlarge\\\\",\\\\"instanceId\\\\":\\\\"i-xxxxxxxxx\\\\",\\\\"regionId\\\\":\\\\"cn-beijing\\\\",\\\\"appId\\\\":\\\\"xxxxxxxxxxxxx\\\\"}" }

    <!-- -->

    :

    <!-- -->

    { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{\\\\"change_type\\\\":\\\\"modify_instance_type\\\\",\\\\"instance_type\\\\":\\\\"ecs.hfr7.2xlarge\\\\",\\\\"instanceId\\\\":\\\\"i-xxxxxxxxx\\\\",\\\\"regionId\\\\":\\\\"cn-beijing\\\\",\\\\"appId\\\\":\\\\"xxxxxxxxxxxxx\\\\"}" }'),
  operation?: string(name='Operation', description='The type of the operation to be performed to modify the parameters of an instance of the specified service. Some operations are common to different services, and other operations are specific to each service. For example, set this parameter to one of the following values to perform the corresponding operation on an ECS instance:

*   rename: modifies the name of an ECS instance.
*   modifyInstanceType: changes the instance type of an ECS instance.
*   modifyInstanceType: starts an ECS instance.
*   modifyInstanceType: stops an ECS instance.
*   modifyInstanceType: restarts an ECS instance.
*   addTags: adds tags to an ECS instance.
*   ecsDelete: deletes an ECS instance.
*   modifyPayType: changes the billing method of an ECS instance.', example='queryTopo'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is specified to verify the permissions on the resource group.', example='ceshi'),
  serviceType?: string(name='ServiceType', description='The type of the service. If you want to modify the parameters of an Elastic Compute Service (ECS) instance, set this parameter to ecs.', example='ACK'),
}

model ExecuteOperationASyncResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. A value of 200 indicates that the request is successful, and other values indicate that the request fails.', example='200'),
  data?: map[string]string(name='Data', description='The ID of the operation.'),
  message?: string(name='Message', description='The error message.', example='" "'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='SD-WEF-DSW-32ED-323DDSD-2332D'),
}

model ExecuteOperationASyncResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExecuteOperationASyncResponseBody(name='body'),
}

async function executeOperationASyncWithOptions(tmpReq: ExecuteOperationASyncRequest, runtime: Util.RuntimeOptions): ExecuteOperationASyncResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteOperationASyncShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.attributes)) {
    request.attributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attributes, 'Attributes', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.attributesShrink)) {
    body['Attributes'] = request.attributesShrink;
  }
  if (!Util.isUnset(request.operation)) {
    body['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceType)) {
    body['ServiceType'] = request.serviceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteOperationASync',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeOperationASync(request: ExecuteOperationASyncRequest): ExecuteOperationASyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeOperationASyncWithOptions(request, runtime);
}

model GetApplicationRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='VVK605ZH00OA4MRT'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
}

model GetApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    applicationId?: string(name='ApplicationId', description='The ID of the application.', example='VVK605ZH00OA4MRT'),
    checklist?: [ 
      {
        lifecycle?: string(name='Lifecycle', description='The resource tag.', example='Create'),
        region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
        remark?: string(name='Remark', description='The message returned for verification.', example='Verification passed'),
        resourceCode?: string(name='ResourceCode', description='The service code.', example='vpc'),
        resourceName?: string(name='ResourceName', description='The name of the instance.', example='vpc'),
        result?: string(name='Result', description='The verification result.', example='Finish'),
        specification?: string(name='Specification', description='The resource specification.', example='192.168.0.0/16'),
      }
    ](name='Checklist', description='The verification results returned.'),
    createTime?: string(name='CreateTime', description='The time when the application was created.', example='2021-08-09 14:37:16'),
    description?: string(name='Description', description='The description of the application.', example='remark'),
    error?: string(name='Error', description='The message returned for deployment.', example='Success'),
    imageURL?: string(name='ImageURL', description='The URL of the image in the database.', example='1411182597819805/sr-8DWU4RUS49NIDII0.png'),
    name?: string(name='Name', description='The name of the application.', example='CADT application'),
    priceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='The billing method.', example='PayAsYouGo'),
        count?: long(name='Count', description='The quantity.', example='1'),
        instanceName?: string(name='InstanceName', description='The name of the instance.', example='ecs'),
        lifecycle?: string(name='Lifecycle', description='The resource tag.', example='Create'),
        onePrice?: float(name='OnePrice', description='The unit price.', example='0.01'),
        originalPrice?: float(name='OriginalPrice', description='The original price.', example='3.570'),
        period?: float(name='Period', description='The service duration.', example='1'),
        price?: float(name='Price', description='The total price.', example='0.01'),
        priceUnit?: string(name='PriceUnit', description='The price unit.', example='USD/Hour'),
        region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
        remark?: string(name='Remark', description='The error message that is returned when a price query fails.', example='ECS instance sold out'),
        resourceCode?: string(name='ResourceCode', description='The service code.', example='ecs'),
        specification?: string(name='Specification', description='The instance type.', example='ecs.e3.large'),
      }
    ](name='PriceList', description='The billing results.'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application belongs.', example='rg-aekzhfgmw4e6fwq'),
    resourceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='The billing method.', example='PayAsYouGo'),
        lifecycle?: string(name='Lifecycle', description='The resource tag.', example='Create'),
        remark?: string(name='Remark', description='The deployment result.', example='{"hostName":"iZ2zehnzxqixu1pywsfbx1Z","memory":32768.0,"creationTime":"2021-09-28T11:23:46Z","instanceName":"ecs","internetMaxBandwidthOut":0.0,"description":"","clusterId":"","private_ip":"192.168.0.247","instanceId":"i-2zehnzxqixu1pywsfbx1","requestId":"F1C64344-3723-51A0-855B-5F08B5634323","zoneId":"cn-beijing-b","ioOptimized":"optimized","id":"i-2zehnzxqixu1pywsfbx1","instanceNetworkType":"vpc","instanceChargeType":"PostPaid","imageId":"centos_8_4_x64_20G_alibase_20210824.vhd","serialNumber":"cee246c4-38f3-4bf3-950b-c17e88ff6527","vlanId":"","instanceType":"ecs.e3.large","cpu":4.0,"creditSpecification":"","internetMaxBandwidthIn":-1.0,"expiredTime":"2099-12-31T15:59Z","internetChargeType":"PayByTraffic","regionId":"cn-beijing","refId":"79224644_0","stoppedMode":"Not-applicable","status":"Running"}'),
        resourceCode?: string(name='ResourceCode', description='The service code.', example='ecs'),
        resourceId?: string(name='ResourceId', description='The ID of the instance.', example='i-2zehnzxqixu1pywsfbx1'),
        resourceName?: string(name='ResourceName', description='The name of the instance.', example='ecs'),
        resourceType?: string(name='ResourceType', description='The resource type.', example='ecs'),
        status?: string(name='Status', description='The resource deployment result.', example='Finish'),
      }
    ](name='ResourceList', description='The resources.'),
    status?: string(name='Status', description='The status of the application.', example='Deployed_Success'),
    templateId?: string(name='TemplateId', description='The ID of the template associated with the application.', example='FYS9VZ535U20V7HT'),
    topoURL?: string(name='TopoURL', description='The URL of the application topology image.', example='1411182597819805/topo-MCEXDI5EL2OM10NY.json'),
  }(name='Data', description='The details of the application.'),
  message?: string(name='Message', description='The message returned for the request.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplicationWithOptions(request: GetApplicationRequest, runtime: Util.RuntimeOptions): GetApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationWithOptions(request, runtime);
}

model GetExecuteOperationResultRequest {
  operationId?: string(name='OperationId', description='The ID of the operation.', example='op_xxxxxxxxxxxxxxxxxxxxxx'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is specified to verify the permissions on the resource group.', example='testResourceId'),
}

model GetExecuteOperationResultResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    arguments?: string(name='Arguments', description='The output of the operation.', example='" "'),
    message?: string(name='Message', description='The returned message.', example='“ ”'),
    operationId?: string(name='OperationId', description='The ID of the operation.', example='op_xxxxxxxx'),
    status?: string(name='Status', description='The status of the operation.', example='success'),
  }(name='Data', description='The details of the operation.'),
  message?: string(name='Message', description='The error message.', example='" "'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),
}

model GetExecuteOperationResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetExecuteOperationResultResponseBody(name='body'),
}

async function getExecuteOperationResultWithOptions(request: GetExecuteOperationResultRequest, runtime: Util.RuntimeOptions): GetExecuteOperationResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.operationId)) {
    body['OperationId'] = request.operationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetExecuteOperationResult',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getExecuteOperationResult(request: GetExecuteOperationResultRequest): GetExecuteOperationResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getExecuteOperationResultWithOptions(request, runtime);
}

model GetTemplateRequest {
  region?: string(name='Region', description='The region in which the template resides.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzhfgmw4e6fwq'),
  templateId?: string(name='TemplateId', description='The ID of the template.', example='XFKR6WYRVS24S07R'),
}

model GetTemplateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    createTime?: string(name='CreateTime', description='The time when the template was created.', example='2020-09-22 17:08:31'),
    description?: string(name='Description', description='The description of the template.', example='None'),
    imageURL?: string(name='ImageURL', description='The URL of the architecture image.', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
    name?: string(name='Name', description='The name of the template.', example='cadt-template'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzhfgmw4e6fwq'),
    templateId?: string(name='TemplateId', description='The ID of the template.', example='XFKR6WYRVS24S07R'),
    topoURL?: string(name='TopoURL', description='The URL of the architecture image file.', example='bp-studio-template/topo-0RJH9V408JV6MIT9.json'),
    variables?: [ 
      {
        attribute?: string(name='Attribute'),
        dataType?: string(name='DataType'),
        defaultValue?: string(name='DefaultValue'),
        variable?: string(name='Variable'),
      }
    ](name='Variables'),
  }(name='Data', description='The details of the template.'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    body['Region'] = request.region;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetTokenRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzhfgmw4e6fwq'),
}

model GetTokenResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID that is used to access OSS.', example='STS.NTm*****8tu'),
    accessKeySecret?: string(name='AccessKeySecret', description='The AccessKey secret that is used to access OSS.', example='9NG*****K4X'),
    bucket?: string(name='Bucket', description='The OSS bucket that is used to store the architecture image.', example='bucket-1'),
    endpoint?: string(name='Endpoint', description='The OSS endpoint.', example='https://oss-cn-beijing.aliyuncs.com'),
    securityToken?: string(name='SecurityToken', description='The token that is used to access the Object Storage Service (OSS) bucket that stores the architecture image.', example='ABCD'),
    snapshotBucket?: string(name='SnapshotBucket', description='The OSS bucket that is used to save data snapshots.', example='bucket-2'),
  }(name='Data', description='The information about the token.'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTokenResponseBody(name='body'),
}

async function getTokenWithOptions(request: GetTokenRequest, runtime: Util.RuntimeOptions): GetTokenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetToken',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTokenWithOptions(request, runtime);
}

model ListApplicationRequest {
  keyword?: string(name='Keyword', description='The keyword in the application name.', example='test'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='10'),
  nextToken?: int32(name='NextToken', description='The number of the page to return.', example='1'),
  orderType?: long(name='OrderType', description='The field by which the list is sorted. Valid values: 1 and 2. The value 1 specifies that the list is sorted in descending order of application update time, and the value 2 specifies that the list is sorted in descending order of application creation time.', example='1'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='default'),
  status?: string(name='Status', description='The status of the application.', example='success,release'),
}

model ListApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application.', example='JIX9NEZUALGS46UI'),
      createTime?: string(name='CreateTime', description='The time when the application was created.', example='2021-09-15  08:30:00'),
      imageURL?: string(name='ImageURL', description='The URL of the application architecture image.', example='https://bp-studio-daily.oss-cn-beijing.aliyuncs.com/1411182597819805/sr-Y3KR7ZSQZR2F0YX3.png'),
      name?: string(name='Name', description='The name of the application.', example='My application'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application belongs.', example='default'),
      status?: string(name='Status', description='The status of the application.', example='Deployed_Success'),
      topoURL?: string(name='TopoURL', description='The URL of the application topology image.', example='https://bp-studio-daily.oss-cn-beijing.aliyuncs.com/1411182597819805/topo-H21P9MV03R1DY0T4.json'),
    }
  ](name='Data', description='The information about the applications.'),
  message?: string(name='Message', description='The error message.', example='Parameter error'),
  nextToken?: int32(name='NextToken', description='The page number of the next page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
  totalCount?: int32(name='TotalCount', description='The total number of returned applications.', example='123'),
}

model ListApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationResponseBody(name='body'),
}

async function listApplicationWithOptions(request: ListApplicationRequest, runtime: Util.RuntimeOptions): ListApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    body['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  clientToken?: string(name='ClientToken', example='1600765710019'),
  nextToken?: string(name='NextToken', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='Application'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='bp.java.nopowerContact'),
  nextToken?: string(name='NextToken', example='1'),
  requestId?: string(name='RequestId', example='847C9D0A-BABD-589C-8A9C-6464409EDED9'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='MW7T1820ACJX9BI7'),
      resourceType?: string(name='ResourceType', example='application'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources', description='TagResource'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientToken)) {
    body['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  var bodyFlat : map[string]any = {};
  if (!Util.isUnset(request.resourceId)) {
    bodyFlat['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    bodyFlat['Tag'] = request.tag;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTemplateRequest {
  keyword?: string(name='Keyword', description='The keyword that is used to search for templates.', example='cadt'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='10'),
  nextToken?: int32(name='NextToken', description='The number of the page to return.', example='1'),
  orderType?: long(name='OrderType', description='The criterion by which the templates are sorted. Valid values:

*   1: modification time
*   2: creation time', example='1'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
  tagList?: int32(name='TagList', description='The tag of the template.', example='Best practice'),
  type?: string(name='Type', description='The type of the template.', example='Valid values: public and private.'),
}

model ListTemplateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the template was created.', example='2021-03-18 16:41:31'),
      imageURL?: string(name='ImageURL', description='The URL of the architecture image.', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
      name?: string(name='Name', description='The name of the template.', example='cadt-name'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
      tagId?: int32(name='TagId', description='The ID of the tag that is added to the template.', example='1'),
      tagName?: string(name='TagName', description='The name of the tag that is added to the template.', example='Official template'),
      templateId?: string(name='TemplateId', description='The ID of the template.', example='CJQ6H0XUEQ20IYJQ'),
      topoURL?: string(name='TopoURL', description='The URL of the template topology image.', example='bp-studio-template/topo-0RJH9V408JV6MIT9.json'),
    }
  ](name='Data', description='The details about templates.'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  nextToken?: int32(name='NextToken', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='100'),
}

model ListTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTemplateResponseBody(name='body'),
}

async function listTemplateWithOptions(request: ListTemplateRequest, runtime: Util.RuntimeOptions): ListTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.orderType)) {
    body['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tagList)) {
    body['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplate',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTemplate(request: ListTemplateRequest): ListTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplateWithOptions(request, runtime);
}

model ReleaseApplicationRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='7QSXFQW46ZNGOUDM'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource.', example='default'),
}

model ReleaseApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The return value.', example='1'),
  message?: string(name='Message', description='The error message.', example='The resource does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
}

model ReleaseApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseApplicationResponseBody(name='body'),
}

async function releaseApplicationWithOptions(request: ReleaseApplicationRequest, runtime: Util.RuntimeOptions): ReleaseApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseApplication(request: ReleaseApplicationRequest): ReleaseApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseApplicationWithOptions(request, runtime);
}

model ValidateApplicationRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='02S7UU41WKJL7ERR'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
}

model ValidateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValidateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValidateApplicationResponseBody(name='body'),
}

async function validateApplicationWithOptions(request: ValidateApplicationRequest, runtime: Util.RuntimeOptions): ValidateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ValidateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function validateApplication(request: ValidateApplicationRequest): ValidateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return validateApplicationWithOptions(request, runtime);
}

model ValuateApplicationRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='02S7UU41WKJL7ERR'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
}

model ValuateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValuateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ValuateApplicationResponseBody(name='body'),
}

async function valuateApplicationWithOptions(request: ValuateApplicationRequest, runtime: Util.RuntimeOptions): ValuateApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.applicationId)) {
    body['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    body['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ValuateApplication',
    version = '2021-09-31',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function valuateApplication(request: ValuateApplicationRequest): ValuateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return valuateApplicationWithOptions(request, runtime);
}

