/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BPStudio';
  @version = '2021-09-31';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='rg-aek2ajbjoloa23q', example='rg-aek2ajbjoloa23q', position='Body'),
  resourceId: string(name='ResourceId', description='P7RMVSVM9LOVYQOM', example='P7RMVSVM9LOVYQOM', position='Body'),
  resourceType: string(name='ResourceType', description='APPLICATION', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='A3488F1D-C444-17D0-BA4F-5374BA0F3562'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateApplicationRequest {
  areaId?: string(name='AreaId', description='The ID of the region.', example='cn-hangzhou', position='Body'),
  clientToken: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  configuration?: map[string]string(name='Configuration', description='The parameters that are used to configure the application you want to create. For example, enableMonitor specifies whether to automatically create a CloudMonitor task for the application, and enableReport specifies whether to generate reports.', example='{"enableMonitor":"0", "enableReport":"1"}', shrink='json', position='Body'),
  instances?: [ 
    {
      id?: string(name='Id', description='The ID of the instance.', example='vpc-bp1q56trhtaq40vlq5ojm'),
      nodeName?: string(name='NodeName', description='The name of the instance.', example='vpc'),
      nodeType?: string(name='NodeType', description='The type of the instance.', example='vpc'),
    }
  ](name='Instances', description='The instances in which you want to create the application. You can create applications in an existing virtual private cloud (VPC).', shrink='json', position='Body'),
  name: string(name='Name', description='The name of the application that you want to create.', example='cadt-application', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application you want to create belongs.', example='rg-acfmyjt3c5om3hi', position='Body'),
  templateId: string(name='TemplateId', description='The ID of the template.', example='0KSHPM6SJU03TNZP', position='Body'),
  variables?: map[string]string(name='Variables', description='The parameter values that are contained in the template. If the template contains no parameter values, the default values are used.', example='{"variable1":"1"}', shrink='json', position='Body'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The ID of the application.', example='002XWH7MXB8MJRU0'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeleteApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='002XWH7MXB8MJRU0', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model DeleteApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeployApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='VVK605ZH00OA4MRT', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model DeployApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeployApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeployApplicationResponseBody(name='body'),
}

async function deployApplication(request: DeployApplicationRequest): DeployApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApplication', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteOperationASyncRequest {
  attributes?: map[string]string(name='Attributes', description='操作相关参数，根据不同的Operation值，输入对应的参数', shrink='json', position='Body'),
  operation: string(name='Operation', description='本次操作类型，例如：attachTag，批量打标; assignResourceGroup，批量分配资源组等', example='queryTopo', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID，用于资源组权限校验', example='ceshi', position='Body'),
  serviceType: string(name='ServiceType', description='The HTTP status code. A value of 200 indicates that the request is successful, and other values indicate that the request fails.', example='ACK', position='Body'),
}

model ExecuteOperationASyncResponseBody = {
  code?: int32(name='Code', description='结果码，200代表成功；其它代表失败。', example='200'),
  data?: string(name='Data', description='异步操作任务ID'),
  message?: string(name='Message', description='错误信息', example='" "'),
  requestId?: string(name='RequestId', description='请求ID', example='SD-WEF-DSW-32ED-323DDSD-2332D'),
}

model ExecuteOperationASyncResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteOperationASyncResponseBody(name='body'),
}

async function executeOperationASync(request: ExecuteOperationASyncRequest): ExecuteOperationASyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteOperationASync', 'POST', '/', 'json', true, 'form', request);
}

model GetApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the request.', example='VVK605ZH00OA4MRT', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Queries the basic information, verification results, billing results, and deployment results of an application.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model GetApplicationResponseBody = {
  code?: int32(name='Code', description='The deployment result.', example='200'),
  data?: {
    applicationId?: string(name='ApplicationId', description='The description of the application.', example='VVK605ZH00OA4MRT'),
    checklist?: [ 
      {
        lifecycle?: string(name='Lifecycle', description='The message returned for verification.', example='Create'),
        region?: string(name='Region', description='The verification results returned.', example='cn-hangzhou'),
        remark?: string(name='Remark', description='The name of the instance.', example='The ID of the region.'),
        resourceCode?: string(name='ResourceCode', description='The error message that is returned when a price query fails.', example='vpc'),
        resourceName?: string(name='ResourceName', description='ECS instance sold out', example='vpc'),
        result?: string(name='Result', description='The service code.', example='Finish'),
        specification?: string(name='Specification', description='The verification result.', example='192.168.0.0/16'),
      }
    ](name='Checklist', description='The resource tag.'),
    createTime?: string(name='CreateTime', description='The URL of the application topology image.', example='2021-08-09 14:37:16'),
    description?: string(name='Description', description='The message returned for the request.', example='remark'),
    error?: string(name='Error', description='The resource type.', example='Success'),
    imageURL?: string(name='ImageURL', description='The ID of the request.', example='The details of the application.'),
    name?: string(name='Name', description='The URL of the image in the database.', example='1411182597819805/sr-8DWU4RUS49NIDII0.png'),
    priceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='The price unit.', example='PayAsYouGo'),
        count?: long(name='Count', description='The original price.', example='1'),
        instanceName?: string(name='InstanceName', description='The ID of the resource group to which the application belongs.', example='ecs'),
        lifecycle?: string(name='Lifecycle', description='The ID of the region.', example='Create'),
        onePrice?: float(name='OnePrice', description='The service code.', example='0.01'),
        originalPrice?: float(name='OriginalPrice', description='The billing results.', example='3.570'),
        period?: float(name='Period', description='The name of the instance.', example='1'),
        price?: float(name='Price', description='The quantity.', example='0.01'),
        priceUnit?: string(name='PriceUnit', description='The unit price.', example='The service duration.'),
        region?: string(name='Region', description='USD/Hour', example='cn-hangzhou'),
        remark?: string(name='Remark', description='The instance type.', example='ecs.e3.large'),
        resourceCode?: string(name='ResourceCode', description='The time when the application was created.', example='ecs'),
        specification?: string(name='Specification', description='The total price.', example='The billing method.'),
      }
    ](name='PriceList', description='The ID of the template associated with the application.'),
    resourceGroupId?: string(name='ResourceGroupId', description='1411182597819805/topo-MCEXDI5EL2OM10NY.json', example='rg-aekzhfgmw4e6fwq'),
    resourceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='The service code.', example='PayAsYouGo'),
        lifecycle?: string(name='Lifecycle', description='The billing method.', example='Create'),
        remark?: string(name='Remark', description='The ID of the instance.', example='{"hostName":"iZ2zehnzxqixu1pywsfbx1Z","memory":32768.0,"creationTime":"2021-09-28T11:23:46Z","instanceName":"ecs","internetMaxBandwidthOut":0.0,"description":"","clusterId":"","private_ip":"192.168.0.247","instanceId":"i-2zehnzxqixu1pywsfbx1","requestId":"F1C64344-3723-51A0-855B-5F08B5634323","zoneId":"cn-beijing-b","ioOptimized":"optimized","id":"i-2zehnzxqixu1pywsfbx1","instanceNetworkType":"vpc","instanceChargeType":"PostPaid","imageId":"centos_8_4_x64_20G_alibase_20210824.vhd","serialNumber":"cee246c4-38f3-4bf3-950b-c17e88ff6527","vlanId":"","instanceType":"ecs.e3.large","cpu":4.0,"creditSpecification":"","internetMaxBandwidthIn":-1.0,"expiredTime":"2099-12-31T15:59Z","internetChargeType":"PayByTraffic","regionId":"cn-beijing","refId":"79224644_0","stoppedMode":"Not-applicable","status":"Running"}'),
        resourceCode?: string(name='ResourceCode', description='The status of the application.', example='ecs'),
        resourceId?: string(name='ResourceId', description='The resource deployment result.', example='i-2zehnzxqixu1pywsfbx1'),
        resourceName?: string(name='ResourceName', description='The resources.', example='ecs'),
        resourceType?: string(name='ResourceType', description='The name of the instance.', example='ecs'),
        status?: string(name='Status', description='The resource tag.', example='Finish'),
      }
    ](name='ResourceList', description='The resource specification.'),
    status?: string(name='Status', description='Verification passed', example='Deployed_Success'),
    templateId?: string(name='TemplateId', description='CADT application', example='FYS9VZ535U20V7HT'),
    topoURL?: string(name='TopoURL', description='The ID of the application.', example='The name of the application.'),
  }(name='Data', description='The ID of the resource group.'),
  message?: string(name='Message', description='Possible application states:

*   Creating: The application is being created.
*   Modified: The application has been modified.
*   Verifying: The application is being verified.
*   Verified_Failure: The application failed to pass the verification.
*   Verified_Success: The application has passed the verification.
*   Valuating: Fees are being calculated for the application.
*   Valuating_Failure: Fees failed to be calculated for the application.
*   Valuating_Success: Fees are calculated for the application.
*   Deploying: The application is being deployed.
*   Deployed_Failure: The application failed to be deployed.
*   Partially_Deployed_Success: Some resources of the application are deployed.
*   Deployed_Success: The application is deployed.
*   Destroying: The application is being released.
*   Delayed_Destroy: The application release is delayed.
*   Destroyed_Failure: The application failed to be released.
*   Partially_Destroyed_Success: Some resources of the application are released.
*   Destroyed_Success: The application is released.
*   Revised: The application architecture is adjusted.
*   Verifying_In_Revision: The application resources are being verified during architecture adjustment.
*   Verified_Failure_In_Revision: The application resources failed to pass the verification during architecture adjustment.
*   Verified_Success_In_Revision: The application resources are verified during architecture adjustment.
*   Valuating_In_Revision: Fees are being calculated for the application during architecture adjustment.
*   Valuating_Failure_In_Revision: Fees failed to be calculated for the application during architecture adjustment.
*   Valuating_Success_In_Revision: Fees are calculated for the application during architecture adjustment.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the application.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', true, 'form', request);
}

model GetExecuteOperationResultRequest {
  operationId: string(name='OperationId', description='The ID of the operation.', example='op_xxxxxxxxxxxxxxxxxxxxxx', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is specified to verify the permissions on the resource group.', example='testResourceId', position='Body'),
}

model GetExecuteOperationResultResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    arguments?: string(name='Arguments', description='The output of the operation.', example='" "'),
    message?: string(name='Message', description='The returned message.', example='“ ”'),
    operationId?: string(name='OperationId', description='The ID of the operation.', example='op_xxxxxxxx'),
    status?: string(name='Status', description='The status of the operation.', example='success'),
  }(name='Data', description='The details of the operation.'),
  message?: string(name='Message', description='The error message.', example='" "'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),
}

model GetExecuteOperationResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetExecuteOperationResultResponseBody(name='body'),
}

async function getExecuteOperationResult(request: GetExecuteOperationResultRequest): GetExecuteOperationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExecuteOperationResult', 'POST', '/', 'json', true, 'form', request);
}

model GetTemplateRequest {
  region?: string(name='Region', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzhfgmw4e6fwq', position='Body'),
  templateId: string(name='TemplateId', example='XFKR6WYRVS24S07R', position='Body'),
}

model GetTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    createTime?: string(name='CreateTime', example='2020-09-22 17:08:31'),
    description?: string(name='Description'),
    imageURL?: string(name='ImageURL', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
    name?: string(name='Name', example='cadt-template'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzhfgmw4e6fwq'),
    templateId?: string(name='TemplateId', example='XFKR6WYRVS24S07R'),
    topoURL?: string(name='TopoURL', example='bp-studio-template/topo-0RJH9V408JV6MIT9.json'),
    variables?: [ 
      {
        attribute?: string(name='Attribute', description='变量名'),
        dataType?: string(name='DataType', description='变量类型'),
        defaultValue?: string(name='DefaultValue', description='默认值'),
        variable?: string(name='Variable', description='变量值'),
      }
    ](name='Variables'),
  }(name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', true, 'form', request);
}

model GetTokenRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzhfgmw4e6fwq', position='Body'),
}

model GetTokenResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID that is used to access OSS.', example='STS.NTm*****8tu'),
    accessKeySecret?: string(name='AccessKeySecret', description='The AccessKey secret that is used to access OSS.', example='9NG*****K4X'),
    bucket?: string(name='Bucket', description='The OSS bucket that is used to store the architecture image.', example='bucket-1'),
    endpoint?: string(name='Endpoint', description='The OSS endpoint.', example='https://oss-cn-beijing.aliyuncs.com'),
    securityToken?: string(name='SecurityToken', description='The token that is used to access the Object Storage Service (OSS) bucket that stores the architecture image.', example='ABCD'),
    snapshotBucket?: string(name='SnapshotBucket', description='The OSS bucket that is used to save data snapshots.', example='bucket-2'),
  }(name='Data', description='The information about the token.'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetToken', 'POST', '/', 'json', true, 'form', request);
}

model ListApplicationRequest {
  keyword?: string(name='Keyword', example='test', position='Body'),
  maxResults: int32(name='MaxResults', description='The HTTP status code.', example='10', minimum=1, maximum=50, position='Body'),
  nextToken: int32(name='NextToken', description='The ID of the resource group to which the application belongs.', example='1', minimum=1, maximum=10000, position='Body'),
  orderType?: long(name='OrderType', description='排序字段', example='1', minimum=1, maximum=10, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='default', position='Body'),
  status?: string(name='Status', description='应用的状态', example='success,release', position='Body'),
}

model ListApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用ID', example='JIX9NEZUALGS46UI'),
      createTime?: string(name='CreateTime', example='2021-09-15  08:30:00'),
      imageURL?: string(name='ImageURL', description='应用的图片链接', example='https://bp-studio-daily.oss-cn-beijing.aliyuncs.com/1411182597819805/sr-Y3KR7ZSQZR2F0YX3.png'),
      name?: string(name='Name', description='应用的名称'),
      resourceGroupId?: string(name='ResourceGroupId', description='应用的资源组', example='default'),
      status?: string(name='Status', description='应用状态：Modified、Verifying、Verified_Failure、Verified_Success、Valuating、Valuating_Failure、Valuating_Success、Deploying、Deployed_Failure、Partially_Deployed_Success、Deployed_Success、Destroying、Destroyed_Failure、Partially_Destroyed_Success、Destroyed_Success等，详见应用状态说明', example='Deployed_Success'),
      topoURL?: string(name='TopoURL', description='应用的拓扑图链接', example='https://bp-studio-daily.oss-cn-beijing.aliyuncs.com/1411182597819805/topo-H21P9MV03R1DY0T4.json'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken', example='2'),
  requestId?: string(name='RequestId', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
  totalCount?: int32(name='TotalCount', example='123'),
}

model ListApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationResponseBody(name='body'),
}

async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplication', 'POST', '/', 'json', true, 'form', request);
}

model ListTagResourcesRequest {
  clientToken?: string(name='ClientToken', description='幂等标记', example='1600765710019', position='Body'),
  nextToken?: string(name='NextToken', description='下一个查询开始Token', example='1', position='Body'),
  regionId: string(name='RegionId', description='区域ID', example='cn-hangzhou', position='Body'),
  resourceId: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Body'),
  resourceType: string(name='ResourceType', description='资源类型', example='Application', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Body'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='bp.java.nopowerContact'),
  nextToken?: string(name='NextToken', description='下一个查询开始Token，NextToken为空说明没有下一个', example='1'),
  requestId?: string(name='RequestId', example='847C9D0A-BABD-589C-8A9C-6464409EDED9'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='MW7T1820ACJX9BI7'),
      resourceType?: string(name='ResourceType', example='application'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources', description='TagResource'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', true, 'form', request);
}

model ListTemplateRequest {
  keyword?: string(name='Keyword', description='The keyword that is used to search for templates.', example='cadt', position='Body'),
  maxResults: int32(name='MaxResults', description='The number of entries to return on each page.', example='10', minimum=1, maximum=50, position='Body'),
  nextToken: int32(name='NextToken', description='The number of the page to return.', example='1', minimum=1, maximum=10000, position='Body'),
  orderType?: long(name='OrderType', description='The criterion by which the templates are sorted. Valid values:

*   1: modification time
*   2: creation time', example='1', minimum=1, maximum=5, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
  tagList?: int32(name='TagList', description='The tag of the template.', example='Best practice', minimum=0, maximum=9223372036854775807, position='Body'),
  type: string(name='Type', description='The type of the template.', example='Valid values: public and private.', position='Body'),
}

model ListTemplateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the template was created.', example='2021-03-18 16:41:31'),
      imageURL?: string(name='ImageURL', description='The URL of the architecture image.', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
      name?: string(name='Name', description='The name of the template.', example='cadt-name'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
      tagId?: int32(name='TagId', description='The ID of the tag that is added to the template.', example='1'),
      tagName?: string(name='TagName', description='The name of the tag that is added to the template.', example='Official template'),
      templateId?: string(name='TemplateId', description='The ID of the template.', example='CJQ6H0XUEQ20IYJQ'),
      topoURL?: string(name='TopoURL', description='The URL of the template topology image.', example='bp-studio-template/topo-0RJH9V408JV6MIT9.json'),
    }
  ](name='Data', description='The details about templates.'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  nextToken?: int32(name='NextToken', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='100'),
}

model ListTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplateResponseBody(name='body'),
}

async function listTemplate(request: ListTemplateRequest): ListTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplate', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='7QSXFQW46ZNGOUDM', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource.', example='default', position='Body'),
}

model ReleaseApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The return value.', example='1'),
  message?: string(name='Message', description='The error message.', example='The resource does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
}

model ReleaseApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseApplicationResponseBody(name='body'),
}

async function releaseApplication(request: ReleaseApplicationRequest): ReleaseApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseApplication', 'POST', '/', 'json', true, 'form', request);
}

model ValidateApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='02S7UU41WKJL7ERR', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model ValidateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValidateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateApplicationResponseBody(name='body'),
}

async function validateApplication(request: ValidateApplicationRequest): ValidateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateApplication', 'POST', '/', 'json', true, 'form', request);
}

model ValuateApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='02S7UU41WKJL7ERR', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model ValuateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValuateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ValuateApplicationResponseBody(name='body'),
}

async function valuateApplication(request: ValuateApplicationRequest): ValuateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValuateApplication', 'POST', '/', 'json', true, 'form', request);
}

