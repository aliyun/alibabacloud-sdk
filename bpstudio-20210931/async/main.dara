/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BPStudio';
  @version = '2021-09-31';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AppFailBackRequest {
  applicationId?: string(name='ApplicationId', description='The application ID.', example='61ZW1DY5Y3FSAOO2', position='Body'),
}

model AppFailBackResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: int32(name='Data', description='The disaster recovery switchback task ID.', example='3309'),
  message?: string(name='Message', description='The returned message. If the request was successful, a success message is returned. If the request failed, an error message is returned.', example='OKITHEVRQCN6ULQG'),
  requestId?: string(name='RequestId', description='The request ID.', example='7036DDBE-0ABA-52D7-A39D-75E511970F07'),
}

model AppFailBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppFailBackResponseBody(name='body'),
}

/**
  * You can call this operation to switch a disaster recovery application back to the primary zone.
  *
 */
async function appFailBack(request: AppFailBackRequest): AppFailBackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AppFailBack', 'POST', '/', 'json', true, 'form', request);
}

model AppFailOverRequest {
  applicationId?: string(name='ApplicationId', description='The application ID.', example='BE68D71ZY5YYIU9R', position='Body'),
  failZone?: string(name='FailZone', description='The destination zone to which you want to switch the disaster recovery application.', example='cn-hangzhou-g', position='Body'),
}

model AppFailOverResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: int32(name='Data', description='The disaster recovery switchover task ID.', example='7441'),
  message?: string(name='Message', description='The returned message. If the request was successful, a success message is returned. If the request failed, an error message is returned.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9656C816-1E9A-58D2-86D5-710678D61AF1'),
}

model AppFailOverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppFailOverResponseBody(name='body'),
}

/**
  * You can call this operation to switch a disaster recovery application to another supported zone.
  *
 */
async function appFailOver(request: AppFailOverRequest): AppFailOverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AppFailOver', 'POST', '/', 'json', true, 'form', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the new resource group.', example='rg-aek2ajbjoloa23q', position='Body'),
  resourceId: string(name='ResourceId', description='The ID of the resource.', example='P7RMVSVM9LOVYQOM', position='Body'),
  resourceType: string(name='ResourceType', description='The type of the resource for which you want to change the resource group. Valid values: APPLICATION and TEMPLATE.', example='APPLICATION', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  code?: long(name='Code', description='The HTTP status code. A value of 200 indicates that the request is successful. Other values indicate that the request failed.', example='200'),
  data?: string(name='Data', description='No business data is returned for this parameter.', example='No business data is returned for this parameter.'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='A3488F1D-C444-17D0-BA4F-5374BA0F3562'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateApplicationRequest {
  areaId?: string(name='AreaId', description='The ID of the region.', example='cn-hangzhou', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  configuration?: map[string]string(name='Configuration', description='The parameters that are used to configure the application you want to create. For example, enableMonitor specifies whether to automatically create a CloudMonitor task for the application, and enableReport specifies whether to generate reports.', example='{"enableMonitor":"0", "enableReport":"1"}', shrink='json', position='Body'),
  instances?: [ 
    {
      id?: string(name='Id', description='The ID of the instance.', example='vpc-bp1q56trhtaq40vlq5ojm'),
      nodeName?: string(name='NodeName', description='The name of the instance.', example='vpc'),
      nodeType?: string(name='NodeType', description='The type of the instance.', example='vpc'),
    }
  ](name='Instances', description='The instances in which you want to create the application. You can create applications in an existing virtual private cloud (VPC).', shrink='json', position='Body'),
  name: string(name='Name', description='The name of the application.

*   The application name must be unique. You can call the [ListApplication](https://www.alibabacloud.com/help/en/bp-studio/latest/api-bpstudio-2021-09-31-listapplication) operation to query the existing applications.
*   The application name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `http:// or https://`. The name can contain letters, digits, underscores (\\_), and hyphens (-).', example='cadt-application', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application you want to create belongs.', example='rg-acfmyjt3c5om3hi', position='Body'),
  templateId: string(name='TemplateId', description='The ID of the template.', example='0KSHPM6SJU03TNZP', position='Body'),
  variables?: map[string]any(name='Variables', description='The parameter values that are contained in the template. If the template contains no parameter values, the default values are used.', example='{"variable1":"1"}', shrink='json', position='Body'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The ID of the application.', example='002XWH7MXB8MJRU0'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model CreateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeleteApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='002XWH7MXB8MJRU0', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model DeleteApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeleteApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApplicationResponseBody(name='body'),
}

/**
  * Before you call this operation to delete an application, make sure that the application is in the `Destroyed_Success` state. Otherwise, the application fails to be deleted.`` You can call the [GetApplication](https://www.alibabacloud.com/help/en/bp-studio/latest/api-bpstudio-2021-09-31-getapplication) operation to query the status of an application.
  *
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeployApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='VVK605ZH00OA4MRT', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model DeployApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeployApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployApplicationResponseBody(name='body'),
}

async function deployApplication(request: DeployApplicationRequest): DeployApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApplication', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteOperationASyncRequest {
  applicationId?: string(name='ApplicationId', description='The ID of the Cloud Architect Design Tools (CADT) application.', example='BG**********UQ', position='Body'),
  attributes?: map[string]any(name='Attributes', description='The parameters related to the action. Specify the parameters based on the value of Operation. The parameters are passed in the map format. The following examples show how to specify the parameters if you want to change the specifications of an Elastic Compute Service (ECS) instance:

*   The following common parameters are required: change_type, regionId, instanceId, appId
*   Example values for changing the instance type of the ECS instance: { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_instance_type","instance_type":"ecs.hfr7.2xlarge","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }
*   Example values for stopping the ECS instance: { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Stopped","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }
*   Example values for starting the ECS instance: { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Running","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }
*   Example values for restarting the ECS instance: { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{"change_type":"modify_status","status":"Restart","instanceId":"i-xxxxxxxxx","regionId":"cn-beijing","appId":"xxxxxxxxxxxxx"}" }

Example of enumerating more than one set of parameters:

*   { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{\\\\"change_type\\\\":\\\\"modify_instance_type\\\\",\\\\"instance_type\\\\":\\\\"ecs.hfr7.2xlarge\\\\",\\\\"instanceId\\\\":\\\\"i-xxxxxxxxx\\\\",\\\\"regionId\\\\":\\\\"cn-beijing\\\\",\\\\"appId\\\\":\\\\"xxxxxxxxxxxxx\\\\"}" }

    <!-- -->

    :

    <!-- -->

    { "ServiceType": "ecs", "Operation": "modifyInstanceType", "Attributes": "{\\\\"change_type\\\\":\\\\"modify_instance_type\\\\",\\\\"instance_type\\\\":\\\\"ecs.hfr7.2xlarge\\\\",\\\\"instanceId\\\\":\\\\"i-xxxxxxxxx\\\\",\\\\"regionId\\\\":\\\\"cn-beijing\\\\",\\\\"appId\\\\":\\\\"xxxxxxxxxxxxx\\\\"}" }

    <!-- -->', shrink='json', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  operation: string(name='Operation', description='This operation type is the operation type of modifying the product, some operation types are generic, and some are used alone. The following is an example of ECS deployment:
- The name of the ECS: rename
- Specificationof ecs: modifyInstanceType
- Startup of ecs: modifyInstanceType
- Stop of ecs: modifyInstanceType
- Restart of ecs: modifyInstanceType
- Ecs Tag: addTags
- Deletion of ecs: ecsDelete
- Paid type for ecs: modifyPayType', example='queryTopo', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Resource group ID, which is used to verify the permissions of the resource group', example='ceshi', position='Body'),
  serviceType: string(name='ServiceType', description='The type of the service. If you want to perform operations on an Elastic Compute Service (ECS) instance, set ServiceType to ecs.', example='ACK', position='Body'),
}

model ExecuteOperationASyncResponseBody = {
  code?: int32(name='Code', description='Result code, 200 for success; Other representatives fail.', example='200'),
  data?: string(name='Data', description='The ID of the operation.', example='op_xxxxxxxxxxxxxxxxxx_ecs_modifyInstanceType_BYSOQGWUV6PME412_ERMEZLXNN3K9N3OL'),
  message?: string(name='Message', description='Error message', example='" "'),
  requestId?: string(name='RequestId', description='Request ID', example='SD-WEF-DSW-32ED-323DDSD-2332D'),
}

model ExecuteOperationASyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteOperationASyncResponseBody(name='body'),
}

async function executeOperationASync(request: ExecuteOperationASyncRequest): ExecuteOperationASyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteOperationASync', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteOperationSyncRequest {
  applicationId?: string(name='ApplicationId', example='BE68D71ZY5YYIU9R', position='Body'),
  attributes?: map[string]any(name='Attributes', shrink='json', position='Body'),
  clientToken?: string(name='ClientToken', example='1600765710019', position='Body'),
  operation: string(name='Operation', example='rename', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyjt3c5om3hi', position='Body'),
  serviceType: string(name='ServiceType', example='dds', position='Body'),
}

model ExecuteOperationSyncResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='op_xxxxxxxxxxxxxxxxxx_dds_modifyInstanceType_BYSOQGWUV6PME412_ERMEZLXNN3K9N3OL'),
  message?: string(name='Message', example='Access key ID cannot be null.'),
  requestId?: string(name='RequestId', example='FDC73B05-5331-57AA-BA93-4C9882792FF5'),
}

model ExecuteOperationSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteOperationSyncResponseBody(name='body'),
}

async function executeOperationSync(request: ExecuteOperationSyncRequest): ExecuteOperationSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteOperationSync', 'POST', '/', 'json', true, 'form', request);
}

model GetApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the request.', example='VVK605ZH00OA4MRT', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='Queries the basic information, verification results, billing results, and deployment results of an application.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model GetApplicationResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: {
    applicationId?: string(name='ApplicationId', description='App ID', example='VVK605ZH00OA4MRT'),
    checklist?: [ 
      {
        lifecycle?: string(name='Lifecycle', description='The resource tag.', example='Create'),
        region?: string(name='Region', description='The region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='Remark', description='The message returned for verification.', example='The ID of the region.'),
        resourceCode?: string(name='ResourceCode', description='The service code.', example='vpc'),
        resourceName?: string(name='ResourceName', description='The name of the instance.', example='vpc'),
        result?: string(name='Result', description='The verification result.', example='Finish'),
        specification?: string(name='Specification', description='The resource specifications.', example='192.168.0.0/16'),
      }
    ](name='Checklist', description='The resource tag.'),
    createTime?: string(name='CreateTime', description='The time when the app was created', example='2021-08-09 14:37:16'),
    deployPercent?: double(name='DeployPercent'),
    description?: string(name='Description', description='Application description', example='remark'),
    error?: string(name='Error', description='The resource type.', example='Success'),
    imageURL?: string(name='ImageURL', description='The URL of the image in the database.', example='The details of the application.'),
    name?: string(name='Name', description='App name', example='1411182597819805/sr-8DWU4RUS49NIDII0.png'),
    priceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='The billing method.', example='PayAsYouGo'),
        count?: int32(name='Count', description='The quantity.', example='1'),
        instanceName?: string(name='InstanceName', description='The name of the instance.', example='ecs'),
        lifecycle?: string(name='Lifecycle', description='Resource Fill Labels.', example='Create'),
        onePrice?: double(name='OnePrice', description='The unit price of the instance.', example='0.01'),
        originalPrice?: double(name='OriginalPrice', description='The original price of the instance.', example='3.570'),
        period?: int32(name='Period', description='The service duration.', example='1'),
        price?: double(name='Price', description='The total price.', example='0.01'),
        priceUnit?: string(name='PriceUnit', description='Unit: USD per hour', example='The service duration.'),
        region?: string(name='Region', description='The region in which the instance resides.', example='cn-hangzhou'),
        remark?: string(name='Remark', description='The error message that is returned when a price query fails.', example='ecs.e3.large'),
        resourceCode?: string(name='ResourceCode', description='Product code', example='ecs'),
        specification?: string(name='Specification', description='The instance type. This parameter indicates the information about the instance type. For example, 192.168.0.0/16 may be returned for a Virtual Private Cloud (VPC) instance, ecs.g5.large may be returned for an Elastic Compute Service (ECS) instance, and slb.s1.small may be returned for a Server Load Balancer (SLB) instance. If the resource does not have a specific type, an empty value is returned.', example='The billing method.'),
        type?: string(name='type', description='The creation mode. Valid values:\\
1: creates a new instance.\\
2: imports an instance.', example='1'),
      }
    ](name='PriceList', description='The billing results.'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the app belongs', example='rg-aekzhfgmw4e6fwq'),
    resourceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='The billing method.', example='PayAsYouGo'),
        lifecycle?: string(name='Lifecycle', description='The resource tag.', example='Create'),
        nodeLabel?: string(name='NodeLabel'),
        remark?: string(name='Remark', description='The deployment result.', example='{"hostName":"iZ2zehnzxqixu1pywsfbx1Z","memory":32768.0,"creationTime":"2021-09-28T11:23:46Z","instanceName":"ecs","internetMaxBandwidthOut":0.0,"description":"","clusterId":"","private_ip":"192.168.0.247","instanceId":"i-2zehnzxqixu1pywsfbx1","requestId":"F1C64344-3723-51A0-855B-5F08B5634323","zoneId":"cn-beijing-b","ioOptimized":"optimized","id":"i-2zehnzxqixu1pywsfbx1","instanceNetworkType":"vpc","instanceChargeType":"PostPaid","imageId":"centos_8_4_x64_20G_alibase_20210824.vhd","serialNumber":"cee246c4-38f3-4bf3-950b-c17e88ff6527","vlanId":"","instanceType":"ecs.e3.large","cpu":4.0,"creditSpecification":"","internetMaxBandwidthIn":-1.0,"expiredTime":"2099-12-31T15:59Z","internetChargeType":"PayByTraffic","regionId":"cn-beijing","refId":"79224644_0","stoppedMode":"Not-applicable","status":"Running"}'),
        resourceCode?: string(name='ResourceCode', description='The service code.', example='ecs'),
        resourceId?: string(name='ResourceId', description='The instance ID.', example='i-2zehnzxqixu1pywsfbx1'),
        resourceName?: string(name='ResourceName', description='The name of the instance.', example='ecs'),
        resourceType?: string(name='ResourceType', description='The type of the resource.', example='ecs'),
        status?: string(name='Status', description='The resource deployment result.', example='Finish'),
      }
    ](name='ResourceList', description='The resource specification.'),
    status?: string(name='Status', description='Verification passed', example='Deployed_Success'),
    templateId?: string(name='TemplateId', description='The ID of the template associated with the application', example='FYS9VZ535U20V7HT'),
  }(name='Data', description='The details of the application.'),
  message?: string(name='Message', description='Reason for the request failure', example='Success'),
  requestId?: string(name='RequestId', description='Request ID', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationResponseBody(name='body'),
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', true, 'form', request);
}

model GetApplicationVariables4FailRequest {
  appId?: string(name='AppId', example='Q2P4O9YSOKCT35L9', position='Query'),
}

model GetApplicationVariables4FailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      attribute?: string(name='Attribute', example='instance_name'),
      defaultValue?: string(name='DefaultValue', example='cadt-app-01'),
      placeHolder?: string(name='PlaceHolder', example='${name}'),
      region?: string(name='Region', example='cn-shenzhen'),
      value?: string(name='Value', example='cadt-app-01'),
      variable?: string(name='Variable', example='${name}'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', description='Id of the request', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
}

model GetApplicationVariables4FailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationVariables4FailResponseBody(name='body'),
}

async function getApplicationVariables4Fail(request: GetApplicationVariables4FailRequest): GetApplicationVariables4FailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationVariables4Fail', 'POST', '/', 'json', false, 'json', request);
}

model GetExecuteOperationResultRequest {
  operationId: string(name='OperationId', description='The ID of the operation.', example='op_xxxxxxxxxxxxxxxxxxxxxx', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is specified to verify the permissions on the resource group.', example='testResourceId', position='Body'),
}

model GetExecuteOperationResultResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. A value of 200 indicates that the request is successful.', example='200'),
  data?: {
    arguments?: string(name='Arguments', description='The output of the operation.', example='" "'),
    message?: string(name='Message', description='The returned message.', example='“ ”'),
    operationId?: string(name='OperationId', description='The ID of the operation.', example='op_xxxxxxxx'),
    status?: string(name='Status', description='The status of the operation.', example='success'),
  }(name='Data', description='The detailed result of the queried operation.'),
  message?: string(name='Message', description='The error message.', example='" "'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),
}

model GetExecuteOperationResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExecuteOperationResultResponseBody(name='body'),
}

async function getExecuteOperationResult(request: GetExecuteOperationResultRequest): GetExecuteOperationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExecuteOperationResult', 'POST', '/', 'json', true, 'form', request);
}

model GetFoTaskStatusRequest {
  taskId?: int32(name='TaskId', description='The disaster recovery switchover task ID.', example='2615', position='Body'),
}

model GetFoTaskStatusResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: string(name='Data', description='The status of the switchover task.', example='Running'),
  message?: string(name='Message', description='The returned message. If the request was successful, a success message is returned. If the request failed, an error message is returned.', example='OKITHEVRQCN6ULQG'),
  requestId?: string(name='RequestId', description='The request ID.', example='923692F0-A15B-58B4-BAF4-2AFA4AF46240'),
}

model GetFoTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFoTaskStatusResponseBody(name='body'),
}

/**
  * You can call this operation to query the status of a disaster recovery switchover task by task ID.
  *
 */
async function getFoTaskStatus(request: GetFoTaskStatusRequest): GetFoTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFoTaskStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetPotentialFailZonesRequest {
  isPlanId?: boolean(name='IsPlanId', description='Specifies whether the value of this parameter is the ID of a disaster recovery set.', example='true', position='Body'),
  objectId?: string(name='ObjectId', description='If you set IsPlanId to false, specify the ID of a disaster recovery application. If you set IsPlanId to true, specify the ID of a disaster recovery set.', example='FS3ATPTOSC4SE1GG', position='Body'),
}

model GetPotentialFailZonesResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: [ string ](name='Data', description='The zones where the current disaster recovery service can be switched.'),
  message?: string(name='Message', description='The error message.', example='The specified ResourceIds are not found in our records.'),
  requestId?: string(name='RequestId', description='The request ID.', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
}

model GetPotentialFailZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPotentialFailZonesResponseBody(name='body'),
}

/**
  * You can call this operation to query the zones where the specified disaster recovery service can be switched.
  *
 */
async function getPotentialFailZones(request: GetPotentialFailZonesRequest): GetPotentialFailZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPotentialFailZones', 'POST', '/', 'json', true, 'form', request);
}

model GetTemplateRequest {
  region?: string(name='Region', description='Template Area', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='ResourceGroup ID', example='rg-aekzhfgmw4e6fwq', position='Body'),
  templateId: string(name='TemplateId', description='Template ID', example='XFKR6WYRVS24S07R', position='Body'),
}

model GetTemplateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    createTime?: string(name='CreateTime', description='The time when the template was created.', example='2020-09-22 17:08:31'),
    description?: string(name='Description', description='Template DescriptionD', example='无'),
    imageURL?: string(name='ImageURL', description='The path to the template schema image file', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
    name?: string(name='Name', description='The name of the template', example='cadt-template'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzhfgmw4e6fwq'),
    templateId?: string(name='TemplateId', description='Template ID', example='XFKR6WYRVS24S07R'),
    variables?: [ 
      {
        attribute?: string(name='Attribute', description='The name of the variable.', example='instance_name'),
        dataType?: string(name='DataType', description='The type of the variable.', example='String'),
        defaultValue?: string(name='DefaultValue', description='The default value of the variable.', example='cadt-app-01'),
        variable?: string(name='Variable', description='The value of the variable.', example='${name}'),
      }
    ](name='Variables', description='The details of the template variables.'),
  }(name='Data', description='The details of the template.'),
  message?: string(name='Message', description='The interface returns information', example='Success'),
  requestId?: string(name='RequestId', description='Request ID', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', true, 'form', request);
}

model GetTokenRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzhfgmw4e6fwq', position='Body'),
}

model GetTokenResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID that is used to access OSS.', example='STS.NTm*****8tu'),
    accessKeySecret?: string(name='AccessKeySecret', description='The AccessKey secret used to access OSS.', example='9NG*****K4X'),
    bucket?: string(name='Bucket', description='The OSS bucket that is used to store the architecture image.', example='bucket-1'),
    endpoint?: string(name='Endpoint', description='The OSS endpoint.', example='https://oss-cn-beijing.aliyuncs.com'),
    securityToken?: string(name='SecurityToken', description='The token that is used to access the Object Storage Service (OSS) bucket that stores the architecture image.', example='ABCD'),
    snapshotBucket?: string(name='SnapshotBucket', description='The OSS bucket that is used to save data snapshots.', example='bucket-2'),
  }(name='Data', description='The information about the token.'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTokenResponseBody(name='body'),
}

/**
  * @deprecated
  * ><danger> This API is no longer recommended, and the image related to the Application has included access authorization in the GetApplication property.></danger>
  *
 */
// Deprecated
async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetToken', 'POST', '/', 'json', true, 'form', request);
}

model InitAppFailOverRequest {
  applicationId?: string(name='ApplicationId', description='The application ID.', example='002XWH7MXB8MJRU0', position='Body'),
}

model InitAppFailOverResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: int32(name='Data', description='The switchover task ID.', example='7250'),
  message?: string(name='Message', description='The returned message. If the request was successful, a success message is returned. If the request failed, an error message is returned.', example='Unsupported Operation PrepareEvent->FailOverPrepareSuccess FoApp_DDLJK2WM8ETU9JAC'),
  requestId?: string(name='RequestId', description='The request ID.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model InitAppFailOverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitAppFailOverResponseBody(name='body'),
}

/**
  * You can call this operation to prepare for application switchover and initiate a switchover task.
  *
 */
async function initAppFailOver(request: InitAppFailOverRequest): InitAppFailOverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitAppFailOver', 'POST', '/', 'json', true, 'form', request);
}

model ListApplicationRequest {
  keyword?: string(name='Keyword', description='Keywords in the app name', example='test', position='Body'),
  maxResults: int32(name='MaxResults', description='The pagination size of the resulting value cannot be less than the minimum value of 1 and cannot be greater than the maximum value of 50.', example='10', minimum=1, maximum=50, position='Body'),
  nextToken: int32(name='NextToken', description='The pagination page number of the resulting value cannot be less than the minimum value of 1 and cannot be greater than the maximum value of 10000.', example='1', minimum=1, maximum=10000, position='Body'),
  orderType?: long(name='OrderType', description='1 update time,<br>2 creation time', example='1', minimum=1, maximum=10, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='default', position='Body'),
  resourceId?: string(name='ResourceId', description='Resource Id', example='vsw-xxxxxxxxxxxx', position='Body'),
  status?: string(name='Status', description='The status of the applications to be returned.', example='The following values are "success" and "release".
If the input value is "success", the returned application list includes all applications in the Deployed_Success state of successful deployment.
If the input value is release, the returned application list includes all applications in the release success (Destroyed_Success) and release failure (Destroyed_Failure) status.
If this parameter is left blank, the returned app list includes apps in all states.', position='Body'),
  templateId?: string(name='TemplateId', description='Template Id', example='0KSXXX6SJU03TXXX', position='Body'),
}

model ListApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The application ID.', example='JIX9NEZUALGS46UI'),
      createTime?: string(name='CreateTime', description='The time when the application was created.', example='2021-09-15  08:30:00'),
      imageURL?: string(name='ImageURL', description='The URL of the application architecture image.', example='https://bp-studio-daily.oss-cn-beijing.aliyuncs.com/1411182597819805/sr-Y3KR7ZSQZR2F0YX3.png'),
      name?: string(name='Name', description='The name of the application.', example='cadt-appName'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application belongs.', example='default'),
      status?: string(name='Status', description='The status of the application.', example='Deployed_Success'),
    }
  ](name='Data', description='App listing information'),
  message?: string(name='Message', description='The interface returns information', example='Success'),
  nextToken?: int32(name='NextToken', description='The query token returned in this call.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the application.', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='123'),
}

model ListApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationResponseBody(name='body'),
}

async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplication', 'POST', '/', 'json', true, 'form', request);
}

model ListFoCreatedAppsRequest {
}

model ListFoCreatedAppsResponseBody = {
  code?: string(name='Code', description='The response code.', example='200'),
  data?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用ID', example='JIX9NEZUALGS46UI'),
      reportUrl?: string(name='ReportUrl', description='The URL of an error report.', example='https://api.aliyun.com/troubleshoot?q=ServiceUnavailable&product=BPStudio&requestId=4CDA03A3-C652-1408-8ABD-7E652A7CBFB6'),
      status?: string(name='Status', description='The status of the disaster recovery plan.', example='Deployed_Success
Destroyed_Success'),
      title?: string(name='Title', description='The title.'),
    }
  ](name='Data', description='The information about disaster recovery plans.'),
  message?: string(name='Message', description='The returned message. If the request was successful, a success message is returned. If the request failed, an error message is returned.', example='Cannot find region according to your domain.'),
  requestId?: string(name='RequestId', description='The request ID.', example='40F63F07-3AB6-53B3-8825-0580C130E3EA'),
}

model ListFoCreatedAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFoCreatedAppsResponseBody(name='body'),
}

/**
  * You can call this operation to query all disaster recovery plans.
  *
 */
async function listFoCreatedApps(request: ListFoCreatedAppsRequest): ListFoCreatedAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFoCreatedApps', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='1', position='Body'),
  regionId: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Body'),
  resourceId: [ string ](name='ResourceId', description='The resource IDs. You can specify a maximum number of 50 IDs.', position='Body'),
  resourceType: string(name='ResourceType', description='The resource type.', example='Application', position='Body'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='Label 1'),
      value?: string(name='Value', description='The value of the tag.', example='Label value 1'),
    }
  ](name='Tag', description='The tags. A maximum of 20 tags are supported.', position='Body'),
}

model ListTagResourcesResponseBody = {
  code?: string(name='Code', description='The HTTP status code. A value of 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='bp.java.nopowerContact'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='847C9D0A-BABD-589C-8A9C-6464409EDED9'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='MW7T1820ACJX9BI7'),
      resourceType?: string(name='ResourceType', description='The resource type. Valid values: application and template.', example='application'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='Key'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='Value'),
    }
  ](name='TagResources', description='The tags that are added to the resources.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', true, 'form', request);
}

model ListTemplateRequest {
  keyword?: string(name='Keyword', description='The keyword that is used to search for templates.', example='cadt', position='Body'),
  maxResults: int32(name='MaxResults', description='The number of entries to return on each page.', example='10', minimum=1, maximum=50, position='Body'),
  nextToken: int32(name='NextToken', description='The number of the page to return.', example='1', minimum=1, maximum=10000, position='Body'),
  orderType?: long(name='OrderType', description='The criterion by which the returned templates are sorted. Valid values:

*   1: The templates are sorted by the time when they are updated.
*   2: The templates are sorted by the time when they are created.
*   3: The templates are sorted by the system.
*   4: The templates are sorted by the number of times that they are used.
*   If you specify an integer other than 1, 2, 3, and 4 or do not specify any value, the templates are sorted by the system.', example='1', minimum=1, maximum=5, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
  tagList?: int32(name='TagList', description='The tag that you want to use to query templates.', example='1', minimum=0, maximum=9223372036854775807, position='Body'),
  type: string(name='Type', description='The type of the templates to be returned. Valid values: public and private', example='public', position='Body'),
}

model ListTemplateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the template was created.', example='2021-03-18 16:41:31'),
      imageURL?: string(name='ImageURL', description='The URL of the architecture image.', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
      name?: string(name='Name', description='The name of the template.', example='cadt-name'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi'),
      tagId?: int32(name='TagId', description='The ID of the tag that is added to the template.', example='1'),
      tagName?: string(name='TagName', description='The name of the tag that is added to the template.', example='Official template'),
      templateId?: string(name='TemplateId', description='The ID of the template.', example='CJQ6H0XUEQ20IYJQ'),
    }
  ](name='Data', description='The details about templates.'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  nextToken?: int32(name='NextToken', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='100'),
}

model ListTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplateResponseBody(name='body'),
}

async function listTemplate(request: ListTemplateRequest): ListTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplate', 'POST', '/', 'json', true, 'form', request);
}

model ReConfigApplicationRequest {
  appId?: string(name='AppId', example='Q2P4O9YSOKCT35L9', position='Body'),
  variables?: string(name='Variables', example='{"${instance_type}":"ecs.c6.3xlarge"}', position='Body'),
}

model ReConfigApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', description='Id of the request', example='9656C816-1E9A-58D2-86D5-710678D61AF1'),
}

model ReConfigApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReConfigApplicationResponseBody(name='body'),
}

async function reConfigApplication(request: ReConfigApplicationRequest): ReConfigApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReConfigApplication', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='7QSXFQW46ZNGOUDM', position='Body'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource.', example='default', position='Body'),
}

model ReleaseApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: long(name='Data', description='The return value.', example='1'),
  message?: string(name='Message', description='The error message.', example='The resource does not exist.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
}

model ReleaseApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseApplicationResponseBody(name='body'),
}

async function releaseApplication(request: ReleaseApplicationRequest): ReleaseApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseApplication', 'POST', '/', 'json', true, 'form', request);
}

model ValidateApplicationRequest {
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='02S7UU41WKJL7ERR', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model ValidateApplicationResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: string(name='Data', description='The data of the application.', example='123'),
  message?: string(name='Message', description='The error message.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValidateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateApplicationResponseBody(name='body'),
}

async function validateApplication(request: ValidateApplicationRequest): ValidateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateApplication', 'POST', '/', 'json', true, 'form', request);
}

model ValuateApplicationRequest {
  applicationId: string(name='ApplicationId', description='The operation that you want to perform. Set the value to ValuateApplication.', example='02S7UU41WKJL7ERR', position='Body'),
  clientToken?: string(name='ClientToken', description='The ID of the resource group to which the application you want to query belongs.', example='1600765710019', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the application.', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model ValuateApplicationResponseBody = {
  code?: int32(name='Code', description='The code of the query task.', example='200'),
  data?: long(name='Data', description='The ID of the request.', example='123'),
  message?: string(name='Message', description='Idempotent notation', example='Success'),
  requestId?: string(name='RequestId', description='The returned message.', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValuateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValuateApplicationResponseBody(name='body'),
}

async function valuateApplication(request: ValuateApplicationRequest): ValuateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValuateApplication', 'POST', '/', 'json', true, 'form', request);
}

model ValuateTemplateRequest {
  areaId?: string(name='AreaId', description='The region ID.', example='cn-hangzhou', position='Body'),
  clientToken: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='1600765710019', position='Body'),
  instances?: [ 
    {
      id?: string(name='Id', description='The instance ID.', example='vpc-bp1q56trhtaq40vlq5oj'),
      nodeName?: string(name='NodeName', description='The name of the application instance that is displayed on the diagram.', example='ecs'),
      nodeType?: string(name='NodeType', description='The instance type.', example='ecs'),
    }
  ](name='Instances', description='The instances to be replaced.', shrink='json', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the application belongs.', example='rg-acfmyjt3c5om3fi', position='Body'),
  templateId: string(name='TemplateId', description='The template ID.', example='0KSHPM6SJU03TNZP', position='Body'),
  variables?: map[string]string(name='Variables', description='The parameter values that are contained in the template. If the template contains no parameter values, the default values are used.', shrink='json', position='Body'),
}

model ValuateTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    resourceList?: [ 
      {
        discountAmount?: double(name='DiscountAmount', description='The discount amount.', example='73'),
        error?: string(name='Error', description='The error message that is returned.', example='InvalidSaleComponentFault : The request not refer to the correct order sale component.'),
        nodeType?: string(name='NodeType', description='The resource type.', example='ecs'),
        originalPrice?: double(name='OriginalPrice', description='The original price.', example='83.0'),
        priceList?: [ 
          {
            discountAmount?: float(name='DiscountAmount', description='The discount amount.', example='82.99'),
            error?: string(name='Error', description='The error message that is returned.', example='ServiceUnavailable : The request has failed due to a temporary failure of the server.\\r\\nRequestId : 4AA302DB-3286-5589-8637-FF6D8507B7A9.'),
            nodeType?: string(name='NodeType', description='The resource type.', example='eip'),
            originalPrice?: float(name='OriginalPrice', description='The original price.', example='83.0'),
            priceUnit?: string(name='PriceUnit', description='The pricing unit.', example='USD'),
            promotionName?: string(name='PromotionName', description='The discount information.', example='The discount information.'),
            resourceId?: string(name='ResourceId', description='The resource ID.', example='1687225092'),
            tradePrice?: float(name='TradePrice', description='The price at which the transaction is made.', example='0.01'),
            type?: string(name='Type', description='Indicates whether the instance is newly created. Valid values:\\
1: The instance is newly created.\\
2: The instance already exists.\\
0: The price of the instance is not included.', example='"1"'),
          }
        ](name='PriceList', description='The information about the price.'),
        priceUnit?: string(name='PriceUnit', description='The pricing unit.', example='USD'),
        promotionName?: string(name='PromotionName', description='The discount information.', example='The discount information.'),
        tradePrice?: double(name='TradePrice', description='The price at which the transaction is made.', example='10.0'),
      }
    ](name='ResourceList', description='The result set of the inquiry.'),
  }(name='Data', description='The result of the inquiry.'),
  message?: string(name='Message', description='The error message returned if the request failed.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='847C9D0A-BABD-589C-8A9C-6464409EDED9'),
}

model ValuateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValuateTemplateResponseBody(name='body'),
}

async function valuateTemplate(request: ValuateTemplateRequest): ValuateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValuateTemplate', 'POST', '/', 'json', true, 'form', request);
}

