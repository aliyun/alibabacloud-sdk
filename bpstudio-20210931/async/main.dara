/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BPStudio';
  @version = '2021-09-31';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId', description='rg-aek2ajbjoloa23q', position='Body'),
  resourceId?: string(name='ResourceId', description='P7RMVSVM9LOVYQOM', position='Body'),
  resourceType?: string(name='ResourceType', description='APPLICATION', position='Body'),
}

model ChangeResourceGroupResponseBody = {
  code?: long(name='Code', example='200'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='A3488F1D-C444-17D0-BA4F-5374BA0F3562'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', true, 'form', request);
}

model CreateApplicationRequest {
  areaId?: string(name='AreaId', description='区域ID', example='cn-hangzhou', position='Body'),
  clientToken: string(name='ClientToken', description='幂等标记', example='1600765710019', position='Body'),
  configuration?: map[string]string(name='Configuration', example='{"enableMonitor":"0", "enableReport":"1"}', shrink='json', position='Body'),
  instances?: [ 
    {
      id?: string(name='Id', description='实例ID', example='vpc-bp1q56trhtaq40vlq5ojm'),
      nodeName?: string(name='NodeName', description='图上实例名', example='vpc'),
      nodeType?: string(name='NodeType', description='实例类型', example='vpc'),
    }
  ](name='Instances', description='待替换实例列表', shrink='json', position='Body'),
  name: string(name='Name', description='新建应用名', example='cadt-application', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='应用所属资源组ID', example='rg-acfmyjt3c5om3hi', position='Body'),
  templateId: string(name='TemplateId', description='模板ID', example='0KSHPM6SJU03TNZP', position='Body'),
  variables?: map[string]string(name='Variables', example='{"variable1":"1"}', shrink='json', position='Body'),
}

model CreateApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', description='应用ID', example='002XWH7MXB8MJRU0'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeleteApplicationRequest {
  applicationId: string(name='ApplicationId', example='002XWH7MXB8MJRU0', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model DeleteApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', true, 'form', request);
}

model DeployApplicationRequest {
  applicationId: string(name='ApplicationId', description='应用ID', example='VVK605ZH00OA4MRT', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model DeployApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='123'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model DeployApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeployApplicationResponseBody(name='body'),
}

async function deployApplication(request: DeployApplicationRequest): DeployApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApplication', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteOperationASyncRequest {
  attributes?: map[string]string(name='Attributes', description='操作相关参数，根据不同的Operation值，输入对应的参数', shrink='json', position='Body'),
  operation: string(name='Operation', description='本次操作类型，例如：attachTag，批量打标; assignResourceGroup，批量分配资源组等', example='queryTopo', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID，用于资源组权限校验', example='ceshi', position='Body'),
  serviceType: string(name='ServiceType', description='资源类型，当前只支持cadt_app', example='ACK', position='Body'),
}

model ExecuteOperationASyncResponseBody = {
  code?: int32(name='Code', description='结果码，200代表成功；其它代表失败。', example='200'),
  data?: map[string]string(name='Data', description='本次操作ID'),
  message?: string(name='Message', description='错误信息', example='" "'),
  requestId?: string(name='RequestId', description='请求ID', example='SD-WEF-DSW-32ED-323DDSD-2332D'),
}

model ExecuteOperationASyncResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteOperationASyncResponseBody(name='body'),
}

async function executeOperationASync(request: ExecuteOperationASyncRequest): ExecuteOperationASyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteOperationASync', 'POST', '/', 'json', true, 'form', request);
}

model GetApplicationRequest {
  applicationId: string(name='ApplicationId', example='VVK605ZH00OA4MRT', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model GetApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    applicationId?: string(name='ApplicationId', description='应用ID', example='VVK605ZH00OA4MRT'),
    checklist?: [ 
      {
        lifecycle?: string(name='Lifecycle', description='资源标记', example='Create'),
        region?: string(name='Region', description='区域', example='cn-hangzhou'),
        remark?: string(name='Remark', description='失败原因'),
        resourceCode?: string(name='ResourceCode', description='产品code', example='vpc'),
        resourceName?: string(name='ResourceName', description='实例名', example='vpc'),
        result?: string(name='Result', description='校验结果', example='Finish'),
        specification?: string(name='Specification', description='规格', example='192.168.0.0/16'),
      }
    ](name='Checklist', description='校验结果列表'),
    createTime?: string(name='CreateTime', description='应用创建时间', example='2021-08-09 14:37:16'),
    description?: string(name='Description', description='应用描述', example='remark'),
    error?: string(name='Error', description='失败原因', example='Success'),
    imageURL?: string(name='ImageURL', description='数据库中图片地址', example='1411182597819805/sr-8DWU4RUS49NIDII0.png'),
    name?: string(name='Name', description='应用名'),
    priceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='支付类型', example='PayAsYouGo'),
        count?: long(name='Count', description='数量', example='1'),
        instanceName?: string(name='InstanceName', description='实例名', example='ecs'),
        lifecycle?: string(name='Lifecycle', description='资源标记', example='Create'),
        onePrice?: float(name='OnePrice', description='单价', example='0.01'),
        originalPrice?: float(name='OriginalPrice', description='原价', example='3.570'),
        period?: float(name='Period', description='时长', example='1'),
        price?: float(name='Price', description='总价', example='0.01'),
        priceUnit?: string(name='PriceUnit', description='单位'),
        region?: string(name='Region', description='区域', example='cn-hangzhou'),
        remark?: string(name='Remark'),
        resourceCode?: string(name='ResourceCode', description='产品code', example='ecs'),
        specification?: string(name='Specification', description='规格', example='ecs.e3.large'),
      }
    ](name='PriceList', description='计费结果列表'),
    resourceGroupId?: string(name='ResourceGroupId', description='应用所属资源组ID', example='rg-aekzhfgmw4e6fwq'),
    resourceList?: [ 
      {
        chargeType?: string(name='ChargeType', description='支付类型', example='PayAsYouGo'),
        lifecycle?: string(name='Lifecycle', description='资源标记', example='Create'),
        remark?: string(name='Remark', description='部署结果', example='{"hostName":"iZ2zehnzxqixu1pywsfbx1Z","memory":32768.0,"creationTime":"2021-09-28T11:23:46Z","instanceName":"ecs","internetMaxBandwidthOut":0.0,"description":"","clusterId":"","private_ip":"192.168.0.247","instanceId":"i-2zehnzxqixu1pywsfbx1","requestId":"F1C64344-3723-51A0-855B-5F08B5634323","zoneId":"cn-beijing-b","ioOptimized":"optimized","id":"i-2zehnzxqixu1pywsfbx1","instanceNetworkType":"vpc","instanceChargeType":"PostPaid","imageId":"centos_8_4_x64_20G_alibase_20210824.vhd","serialNumber":"cee246c4-38f3-4bf3-950b-c17e88ff6527","vlanId":"","instanceType":"ecs.e3.large","cpu":4.0,"creditSpecification":"","internetMaxBandwidthIn":-1.0,"expiredTime":"2099-12-31T15:59Z","internetChargeType":"PayByTraffic","regionId":"cn-beijing","refId":"79224644_0","stoppedMode":"Not-applicable","status":"Running"}'),
        resourceCode?: string(name='ResourceCode', description='产品code', example='ecs'),
        resourceId?: string(name='ResourceId', description='实例ID', example='i-2zehnzxqixu1pywsfbx1'),
        resourceName?: string(name='ResourceName', description='实例名称', example='ecs'),
        resourceType?: string(name='ResourceType', description='资源类型', example='ecs'),
        status?: string(name='Status', description='资源部署结果', example='Finish'),
      }
    ](name='ResourceList', description='资源列表'),
    status?: string(name='Status', description='应用状态', example='Deployed_Success'),
    templateId?: string(name='TemplateId', description='应用关联模板ID', example='FYS9VZ535U20V7HT'),
    topoURL?: string(name='TopoURL', description='应用topo地址', example='1411182597819805/topo-MCEXDI5EL2OM10NY.json'),
  }(name='Data'),
  message?: string(name='Message', description='请求失败原因', example='Success'),
  requestId?: string(name='RequestId', description='请求ID', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', true, 'form', request);
}

model GetExecuteOperationResultRequest {
  operationId: string(name='OperationId', description='操作ID', example='op_xxxxxxxxxxxxxxxxxxxxxx', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID，用于资源组相关权限校验', example='testResourceId', position='Body'),
}

model GetExecuteOperationResultResponseBody = {
  code?: int32(name='Code', description='结果码，200代表成功', example='200'),
  data?: {
    arguments?: string(name='Arguments', description='操作相关输出结果', example='" "'),
    message?: string(name='Message', description='操作相关信息', example='“ ”'),
    operationId?: string(name='OperationId', description='操作ID', example='op_xxxxxxxx'),
    status?: string(name='Status', description='当前操作状态', example='success'),
  }(name='Data', description='Status'),
  message?: string(name='Message', description='错误信息', example='" "'),
  requestId?: string(name='RequestId', description='请求ID', example='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),
}

model GetExecuteOperationResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetExecuteOperationResultResponseBody(name='body'),
}

async function getExecuteOperationResult(request: GetExecuteOperationResultRequest): GetExecuteOperationResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExecuteOperationResult', 'POST', '/', 'json', true, 'form', request);
}

model GetTemplateRequest {
  region?: string(name='Region', example='cn-hangzhou', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzhfgmw4e6fwq', position='Body'),
  templateId: string(name='TemplateId', example='XFKR6WYRVS24S07R', position='Body'),
}

model GetTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    createTime?: string(name='CreateTime', example='2020-09-22 17:08:31'),
    description?: string(name='Description'),
    imageURL?: string(name='ImageURL', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
    name?: string(name='Name', example='cadt-template'),
    resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzhfgmw4e6fwq'),
    templateId?: string(name='TemplateId', example='XFKR6WYRVS24S07R'),
    topoURL?: string(name='TopoURL', example='bp-studio-template/topo-0RJH9V408JV6MIT9.json'),
  }(name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', true, 'form', request);
}

model GetTokenRequest {
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='rg-aekzhfgmw4e6fwq', position='Body'),
}

model GetTokenResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='oss访问access key id', example='STS.NTm*****8tu'),
    accessKeySecret?: string(name='AccessKeySecret', description='oss访问access key secret id', example='9NG*****K4X'),
    bucket?: string(name='Bucket', description='oss文件保存bucket位置', example='bucket-1'),
    endpoint?: string(name='Endpoint', description='oss的endpoint', example='https://oss-cn-beijing.aliyuncs.com'),
    securityToken?: string(name='SecurityToken', description='oss访问token', example='ABCD'),
    snapshotBucket?: string(name='SnapshotBucket', description='oss快照保存bucket位置', example='bucket-2'),
  }(name='Data'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model GetTokenResponse = {
  headers: map[string]string(name='headers'),
  body: GetTokenResponseBody(name='body'),
}

async function getToken(request: GetTokenRequest): GetTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetToken', 'POST', '/', 'json', true, 'form', request);
}

model ListApplicationRequest {
  keyword?: string(name='Keyword', example='test', position='Body'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Body'),
  nextToken: int32(name='NextToken', example='1', minimum=1, maximum=10000, position='Body'),
  orderType?: long(name='OrderType', description='排序字段', example='1', minimum=1, maximum=10, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='default', position='Body'),
  status?: string(name='Status', description='应用的状态', example='success,release', position='Body'),
}

model ListApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用ID', example='JIX9NEZUALGS46UI'),
      createTime?: string(name='CreateTime', example='2021-09-15  08:30:00'),
      imageURL?: string(name='ImageURL', description='应用的图片链接', example='https://bp-studio-daily.oss-cn-beijing.aliyuncs.com/1411182597819805/sr-Y3KR7ZSQZR2F0YX3.png'),
      name?: string(name='Name', description='应用的名称'),
      resourceGroupId?: string(name='ResourceGroupId', description='应用的资源组', example='default'),
      status?: string(name='Status', description='应用状态：Modified、Verifying、Verified_Failure、Verified_Success、Valuating、Valuating_Failure、Valuating_Success、Deploying、Deployed_Failure、Partially_Deployed_Success、Deployed_Success、Destroying、Destroyed_Failure、Partially_Destroyed_Success、Destroyed_Success等，详见应用状态说明', example='Deployed_Success'),
      topoURL?: string(name='TopoURL', description='应用的拓扑图链接', example='https://bp-studio-daily.oss-cn-beijing.aliyuncs.com/1411182597819805/topo-H21P9MV03R1DY0T4.json'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  nextToken?: int32(name='NextToken', example='2'),
  requestId?: string(name='RequestId', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
  totalCount?: int32(name='TotalCount', example='123'),
}

model ListApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationResponseBody(name='body'),
}

async function listApplication(request: ListApplicationRequest): ListApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplication', 'POST', '/', 'json', true, 'form', request);
}

model ListTemplateRequest {
  keyword?: string(name='Keyword', description='搜索关键字', example='cadt', position='Body'),
  maxResults: int32(name='MaxResults', example='10', minimum=1, maximum=50, position='Body'),
  nextToken: int32(name='NextToken', example='1', minimum=1, maximum=10000, position='Body'),
  orderType?: long(name='OrderType', description='排序字段', example='1', minimum=1, maximum=5, position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmyjt3c5om3hi', position='Body'),
  tagList?: int32(name='TagList', description='模板的标签', example='最佳实践', minimum=0, maximum=9223372036854775807, position='Body'),
  type: string(name='Type', description='类型', example='public 代表开放模板，private 式私有模板', position='Body'),
}

model ListTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间', example='2021-03-18 16:41:31'),
      imageURL?: string(name='ImageURL', description='模板的图片链接', example='bp-studio-template/sr-U37UD2YQCRJ75X5V.png'),
      name?: string(name='Name', description='模板的名称', example='cadt-name'),
      resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='rg-acfmyjt3c5om3hi'),
      tagId?: int32(name='TagId', description='模板的标签的ID', example='1'),
      tagName?: string(name='TagName', description='模板标签的名称'),
      templateId?: string(name='TemplateId', description='模板的ID', example='CJQ6H0XUEQ20IYJQ'),
      topoURL?: string(name='TopoURL', description='模板的拓扑图', example='bp-studio-template/topo-0RJH9V408JV6MIT9.json'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Success'),
  nextToken?: int32(name='NextToken', example='1'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplateResponseBody(name='body'),
}

async function listTemplate(request: ListTemplateRequest): ListTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplate', 'POST', '/', 'json', true, 'form', request);
}

model ReleaseApplicationRequest {
  applicationId: string(name='ApplicationId', description='应用ID', example='7QSXFQW46ZNGOUDM', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='default', position='Body'),
}

model ReleaseApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='1'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BFB7F5C8-FE7A-06CA-9F87-ABBF6B848F0C'),
}

model ReleaseApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseApplicationResponseBody(name='body'),
}

async function releaseApplication(request: ReleaseApplicationRequest): ReleaseApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseApplication', 'POST', '/', 'json', true, 'form', request);
}

model ValidateApplicationRequest {
  applicationId: string(name='ApplicationId', description='应用ID', example='02S7UU41WKJL7ERR', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model ValidateApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='123'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValidateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateApplicationResponseBody(name='body'),
}

async function validateApplication(request: ValidateApplicationRequest): ValidateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateApplication', 'POST', '/', 'json', true, 'form', request);
}

model ValuateApplicationRequest {
  applicationId: string(name='ApplicationId', description='应用ID', example='02S7UU41WKJL7ERR', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', description='资源组ID', example='rg-acfmyjt3c5om3hi', position='Body'),
}

model ValuateApplicationResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: long(name='Data', example='123'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='A07FFDF2-78FA-1B48-9E38-88E833A93187'),
}

model ValuateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ValuateApplicationResponseBody(name='body'),
}

async function valuateApplication(request: ValuateApplicationRequest): ValuateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValuateApplication', 'POST', '/', 'json', true, 'form', request);
}

