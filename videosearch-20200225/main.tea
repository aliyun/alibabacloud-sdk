/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    cn-beijing = 'multisearch.cn-beijing.aliyuncs.com',
    cn-hangzhou = 'multisearch.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('videosearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddDeletionVideoTaskRequest {
  clientToken?: string(name='ClientToken'),
  videoId?: string(name='VideoId'),
  instanceId?: string(name='InstanceId'),
}

model AddDeletionVideoTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
}

model AddDeletionVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: AddDeletionVideoTaskResponseBody(name='body'),
}

async function addDeletionVideoTaskWithOptions(request: AddDeletionVideoTaskRequest, runtime: Util.RuntimeOptions): AddDeletionVideoTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddDeletionVideoTask',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDeletionVideoTask(request: AddDeletionVideoTaskRequest): AddDeletionVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDeletionVideoTaskWithOptions(request, runtime);
}

model AddSearchVideoTaskRequest {
  clientToken?: string(name='ClientToken'),
  videoUrl?: string(name='VideoUrl'),
  videoId?: string(name='VideoId'),
  videoTags?: string(name='VideoTags'),
  returnVideoNumber?: int32(name='ReturnVideoNumber'),
  queryTags?: string(name='QueryTags'),
  storageType?: int32(name='StorageType'),
  callbackUrl?: string(name='CallbackUrl'),
  replaceStorageThreshold?: float(name='ReplaceStorageThreshold'),
  instanceId?: string(name='InstanceId'),
  description?: string(name='Description'),
  searchType?: int32(name='SearchType'),
}

model AddSearchVideoTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    taskId?: string(name='TaskId'),
  }(name='Data'),
}

model AddSearchVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: AddSearchVideoTaskResponseBody(name='body'),
}

async function addSearchVideoTaskWithOptions(request: AddSearchVideoTaskRequest, runtime: Util.RuntimeOptions): AddSearchVideoTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddSearchVideoTask',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSearchVideoTask(request: AddSearchVideoTaskRequest): AddSearchVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSearchVideoTaskWithOptions(request, runtime);
}

model AddStorageVideoTaskRequest {
  instanceId?: string(name='InstanceId'),
  videoUrl?: string(name='VideoUrl'),
  videoId?: string(name='VideoId'),
  videoTags?: string(name='VideoTags'),
  callbackUrl?: string(name='CallbackUrl'),
  description?: string(name='Description'),
  storageInfo?: int32(name='StorageInfo'),
  clientToken?: string(name='ClientToken'),
}

model AddStorageVideoTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    taskId?: string(name='TaskId'),
  }(name='Data'),
}

model AddStorageVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  body: AddStorageVideoTaskResponseBody(name='body'),
}

async function addStorageVideoTaskWithOptions(request: AddStorageVideoTaskRequest, runtime: Util.RuntimeOptions): AddStorageVideoTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddStorageVideoTask',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addStorageVideoTask(request: AddStorageVideoTaskRequest): AddStorageVideoTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return addStorageVideoTaskWithOptions(request, runtime);
}

model CreateBatchTaskRequest {
  batchTaskType?: int32(name='BatchTaskType'),
  ossBucketName?: string(name='OssBucketName'),
  ossDataPath?: string(name='OssDataPath'),
  ossMetaFile?: string(name='OssMetaFile'),
  fileUrl?: string(name='FileUrl'),
  roleArn?: string(name='RoleArn'),
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken'),
}

model CreateBatchTaskResponseBody = {
  taskId?: long(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model CreateBatchTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBatchTaskResponseBody(name='body'),
}

async function createBatchTaskWithOptions(request: CreateBatchTaskRequest, runtime: Util.RuntimeOptions): CreateBatchTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateBatchTask',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBatchTask(request: CreateBatchTaskRequest): CreateBatchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBatchTaskWithOptions(request, runtime);
}

model GetInstanceRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
}

model GetInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    expireTime?: long(name='ExpireTime'),
    createTime?: long(name='CreateTime'),
    bundlingType?: string(name='BundlingType'),
    videoInfoUpdateTime?: long(name='VideoInfoUpdateTime'),
    instanceId?: string(name='InstanceId'),
    concurrencyNumber?: int32(name='ConcurrencyNumber'),
    regionId?: string(name='RegionId'),
    videoNumber?: int32(name='VideoNumber'),
    instanceName?: string(name='InstanceName'),
    currentVideoCapacity?: string(name='CurrentVideoCapacity'),
    instanceStatus?: int32(name='InstanceStatus'),
    maxVideoCapacity?: string(name='MaxVideoCapacity'),
  }(name='Data'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetStorageHistoryRequest {
  clientToken?: string(name='ClientToken'),
  instanceId?: string(name='InstanceId'),
  videoId?: string(name='VideoId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model GetStorageHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        storageInfo?: int32(name='StorageInfo'),
        modifiedTime?: long(name='ModifiedTime'),
        description?: string(name='Description'),
        videoId?: string(name='VideoId'),
        storageType?: int32(name='StorageType'),
        videoUrl?: string(name='VideoUrl'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    count?: long(name='Count'),
  }(name='Data'),
}

model GetStorageHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetStorageHistoryResponseBody(name='body'),
}

async function getStorageHistoryWithOptions(request: GetStorageHistoryRequest, runtime: Util.RuntimeOptions): GetStorageHistoryResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  query["InstanceId"] = request.instanceId;
  query["VideoId"] = request.videoId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetStorageHistory',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStorageHistory(request: GetStorageHistoryRequest): GetStorageHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStorageHistoryWithOptions(request, runtime);
}

model GetTaskStatusRequest {
  clientToken?: string(name='ClientToken'),
  taskId?: string(name='TaskId'),
  instanceId?: string(name='InstanceId'),
}

model GetTaskStatusResponseBody = {
  taskInfo?: {
    status?: int32(name='Status'),
    storageInfo?: int32(name='StorageInfo'),
    finishTime?: long(name='FinishTime'),
    videoId?: string(name='VideoId'),
    queryTags?: string(name='QueryTags'),
    videoTags?: string(name='VideoTags'),
    errorInfo?: string(name='ErrorInfo'),
    resourceType?: string(name='ResourceType'),
    description?: string(name='Description'),
    replaceStorageThreshold?: string(name='ReplaceStorageThreshold'),
    duration?: float(name='Duration'),
    analysisUseTime?: long(name='AnalysisUseTime'),
    taskId?: long(name='TaskId'),
    resolution?: string(name='Resolution'),
    processResultOss?: string(name='ProcessResultOss'),
    submitTime?: long(name='SubmitTime'),
    videoUrl?: string(name='VideoUrl'),
  }(name='TaskInfo'),
  requestId?: string(name='RequestId'),
  data?: int32(name='Data'),
}

model GetTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetTaskStatusResponseBody(name='body'),
}

async function getTaskStatusWithOptions(request: GetTaskStatusRequest, runtime: Util.RuntimeOptions): GetTaskStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetTaskStatus',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTaskStatusWithOptions(request, runtime);
}

model ListBatchTaskRequest {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  clientToken?: string(name='ClientToken'),
  batchTaskType?: string(name='BatchTaskType'),
  status?: string(name='Status'),
  instanceId?: string(name='InstanceId'),
  bucketName?: string(name='BucketName'),
  dataPath?: string(name='DataPath'),
}

model ListBatchTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        status?: int32(name='Status'),
        taskType?: int32(name='TaskType'),
        modifiedTime?: long(name='ModifiedTime'),
        processMessage?: string(name='ProcessMessage'),
        bucketName?: string(name='BucketName'),
        metaFile?: string(name='MetaFile'),
        dataPath?: string(name='DataPath'),
        taskId?: long(name='TaskId'),
        regionId?: string(name='RegionId'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    count?: long(name='Count'),
  }(name='Data'),
}

model ListBatchTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListBatchTaskResponseBody(name='body'),
}

async function listBatchTaskWithOptions(request: ListBatchTaskRequest, runtime: Util.RuntimeOptions): ListBatchTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["ClientToken"] = request.clientToken;
  query["BatchTaskType"] = request.batchTaskType;
  query["Status"] = request.status;
  query["InstanceId"] = request.instanceId;
  query["BucketName"] = request.bucketName;
  query["DataPath"] = request.dataPath;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListBatchTask',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBatchTask(request: ListBatchTaskRequest): ListBatchTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBatchTaskWithOptions(request, runtime);
}

model ListInstancesRequest {
  clientToken?: string(name='ClientToken'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tags?: string(name='Tags'),
  status?: int32(name='Status'),
}

model ListInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        expiredTime?: string(name='ExpiredTime'),
        createTime?: long(name='CreateTime'),
        instanceName?: string(name='InstanceName'),
        instanceStatus?: int32(name='InstanceStatus'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
        instanceId?: string(name='InstanceId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    count?: long(name='Count'),
  }(name='Data'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListSearchVideoTasksRequest {
  clientToken?: string(name='ClientToken'),
  taskId?: string(name='TaskId'),
  videoName?: string(name='VideoName'),
  videoId?: string(name='VideoId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
  statusList?: string(name='StatusList'),
  searchTypeList?: string(name='SearchTypeList'),
  description?: string(name='Description'),
}

model ListSearchVideoTasksResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    taskList?: [ 
      {
        status?: int32(name='Status'),
        storageInfo?: int32(name='StorageInfo'),
        videoId?: string(name='VideoId'),
        processTime?: long(name='ProcessTime'),
        videoName?: string(name='VideoName'),
        queryTags?: string(name='QueryTags'),
        storageType?: int32(name='StorageType'),
        processResultUrl?: string(name='ProcessResultUrl'),
        videoTags?: string(name='VideoTags'),
        errorDetail?: string(name='ErrorDetail'),
        searchType?: int32(name='SearchType'),
        modifiedTime?: long(name='ModifiedTime'),
        description?: string(name='Description'),
        replaceStorageThreshold?: string(name='ReplaceStorageThreshold'),
        remoteTaskId?: string(name='RemoteTaskId'),
        taskId?: string(name='TaskId'),
        videoUrl?: string(name='VideoUrl'),
      }
    ](name='TaskList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    count?: long(name='Count'),
  }(name='Data'),
}

model ListSearchVideoTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListSearchVideoTasksResponseBody(name='body'),
}

async function listSearchVideoTasksWithOptions(request: ListSearchVideoTasksRequest, runtime: Util.RuntimeOptions): ListSearchVideoTasksResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListSearchVideoTasks',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSearchVideoTasks(request: ListSearchVideoTasksRequest): ListSearchVideoTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSearchVideoTasksWithOptions(request, runtime);
}

model ListStorageVideoTasksRequest {
  clientToken?: string(name='ClientToken'),
  taskId?: string(name='TaskId'),
  videoName?: string(name='VideoName'),
  videoId?: string(name='VideoId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
  statusList?: string(name='StatusList'),
  description?: string(name='Description'),
  storageInfoList?: string(name='StorageInfoList'),
}

model ListStorageVideoTasksResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    taskList?: [ 
      {
        status?: string(name='Status'),
        storageInfo?: int32(name='StorageInfo'),
        errorDetail?: string(name='ErrorDetail'),
        modifiedTime?: long(name='ModifiedTime'),
        description?: string(name='Description'),
        processTime?: long(name='ProcessTime'),
        videoId?: string(name='VideoId'),
        videoName?: string(name='VideoName'),
        remoteTaskId?: string(name='RemoteTaskId'),
        taskId?: long(name='TaskId'),
        videoUrl?: string(name='VideoUrl'),
      }
    ](name='TaskList'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    count?: long(name='Count'),
  }(name='Data'),
}

model ListStorageVideoTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListStorageVideoTasksResponseBody(name='body'),
}

async function listStorageVideoTasksWithOptions(request: ListStorageVideoTasksRequest, runtime: Util.RuntimeOptions): ListStorageVideoTasksResponse {
  Util.validateModel(request);
  var query = {};
  query["ClientToken"] = request.clientToken;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListStorageVideoTasks',
    version = '2020-02-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listStorageVideoTasks(request: ListStorageVideoTasksRequest): ListStorageVideoTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return listStorageVideoTasksWithOptions(request, runtime);
}

