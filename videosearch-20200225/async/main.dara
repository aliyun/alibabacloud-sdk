/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'videosearch';
  @version = '2020-02-25';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'multisearch.cn-beijing.aliyuncs.com',
    cn-hangzhou = 'multisearch.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddDeletionAudioTaskRequest {
  audioId?: string(name='AudioId', position='Body'),
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId?: string(name='InstanceId', position='Body'),
}

model AddDeletionAudioTaskResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model AddDeletionAudioTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDeletionAudioTaskResponseBody(name='body'),
}

async function addDeletionAudioTask(request: AddDeletionAudioTaskRequest): AddDeletionAudioTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDeletionAudioTask', 'POST', '/', 'json', true, 'form', request);
}

model AddDeletionVideoTaskRequest {
  clientToken?: string(name='ClientToken', example='clientToken', position='Query'),
  instanceId?: string(name='InstanceId', position='Body'),
  videoId?: string(name='VideoId', example='testVideoId', position='Body'),
}

model AddDeletionVideoTaskResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='1ABBE852-6313-49F9-BF8A-6FDF9A4C0617'),
}

model AddDeletionVideoTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDeletionVideoTaskResponseBody(name='body'),
}

async function addDeletionVideoTask(request: AddDeletionVideoTaskRequest): AddDeletionVideoTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDeletionVideoTask', 'POST', '/', 'json', true, 'form', request);
}

model CancelBatchTaskRequest {
  batchTaskId?: long(name='BatchTaskId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model CancelBatchTaskResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model CancelBatchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelBatchTaskResponseBody(name='body'),
}

async function cancelBatchTask(request: CancelBatchTaskRequest): CancelBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelBatchTask', 'POST', '/', 'json', false, 'json', request);
}

model GetAudioInstanceRequest {
  clientToken?: string(name='ClientToken', example='123', position='Query'),
  instanceId: string(name='InstanceId', example='1', position='Body'),
}

model GetAudioInstanceResponseBody = {
  data?: {
    audioInfoUpdateTime?: long(name='AudioInfoUpdateTime', example='1618396147'),
    audioNumber?: int32(name='AudioNumber', example='123'),
    bundlingType?: string(name='BundlingType', example='PREPAY'),
    concurrencyNumber?: int32(name='ConcurrencyNumber', example='1'),
    createTime?: long(name='CreateTime', example='1618396147'),
    currentAudioCapacity?: string(name='CurrentAudioCapacity', example='1'),
    expireTime?: long(name='ExpireTime', example='1618396147'),
    instanceId?: string(name='InstanceId', example='123'),
    instanceName?: string(name='InstanceName', example='test'),
    instanceStatus?: int32(name='InstanceStatus', example='1'),
    maxAudioCapacity?: string(name='MaxAudioCapacity', example='1'),
    regionId?: string(name='RegionId', example='123'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx'),
}

model GetAudioInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAudioInstanceResponseBody(name='body'),
}

async function getAudioInstance(request: GetAudioInstanceRequest): GetAudioInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAudioInstance', 'POST', '/', 'json', true, 'form', request);
}

model GetAudioStorageHistoryRequest {
  audioId: string(name='AudioId', example='1', position='Query'),
  clientToken?: string(name='ClientToken', example='1', position='Query'),
  instanceId: string(name='InstanceId', example='1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
}

model GetAudioStorageHistoryResponseBody = {
  data?: {
    count?: long(name='Count', example='0'),
    list?: [ 
      {
        audioId?: string(name='AudioId', example='1'),
        audioUrl?: string(name='AudioUrl', example='http://xxx'),
        description?: string(name='Description'),
        modifiedTime?: long(name='ModifiedTime', example='1618396147'),
        storageInfo?: int32(name='StorageInfo', example='1'),
        storageType?: int32(name='StorageType', example='1'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx'),
}

model GetAudioStorageHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAudioStorageHistoryResponseBody(name='body'),
}

async function getAudioStorageHistory(request: GetAudioStorageHistoryRequest): GetAudioStorageHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAudioStorageHistory', 'POST', '/', 'json', false, 'json', request);
}

model GetAudioTaskStatusRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Body'),
  taskId: string(name='TaskId', position='Body'),
}

model GetAudioTaskStatusResponseBody = {
  data?: int32(name='Data'),
  requestId?: string(name='RequestId'),
  taskInfo?: {
    analysisUseTime?: long(name='AnalysisUseTime'),
    audioId?: string(name='AudioId'),
    audioTags?: string(name='AudioTags'),
    audioUrl?: string(name='AudioUrl'),
    description?: string(name='Description'),
    duration?: float(name='Duration'),
    errorInfo?: string(name='ErrorInfo'),
    finishTime?: long(name='FinishTime'),
    processResultOss?: string(name='ProcessResultOss'),
    queryTags?: string(name='QueryTags'),
    replaceStorageThreshold?: string(name='ReplaceStorageThreshold'),
    resourceType?: string(name='ResourceType'),
    status?: int32(name='Status'),
    storageInfo?: int32(name='StorageInfo'),
    submitTime?: long(name='SubmitTime'),
    taskId?: long(name='TaskId'),
  }(name='TaskInfo'),
}

model GetAudioTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAudioTaskStatusResponseBody(name='body'),
}

async function getAudioTaskStatus(request: GetAudioTaskStatusRequest): GetAudioTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAudioTaskStatus', 'POST', '/', 'json', true, 'form', request);
}

model GetBatchTaskRequest {
  batchTaskId: long(name='BatchTaskId', example='1', minimum=0, maximum=9999999999999, position='Body'),
  clientToken?: string(name='ClientToken', example='123', position='Query'),
  instanceId: string(name='InstanceId', example='123', position='Body'),
}

model GetBatchTaskResponseBody = {
  batchTaskId?: long(name='BatchTaskId', example='1'),
  modifiedTime?: long(name='ModifiedTime', example='1618396147'),
  processMessage?: string(name='ProcessMessage', example='xxx'),
  requestId?: string(name='RequestId', example='xxx'),
  status?: int32(name='Status', example='1'),
  subTaskDetail?: string(name='SubTaskDetail', example='http://xxx'),
}

model GetBatchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBatchTaskResponseBody(name='body'),
}

async function getBatchTask(request: GetBatchTaskRequest): GetBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBatchTask', 'POST', '/', 'json', true, 'form', request);
}

model GetInstanceRequest {
  clientToken?: string(name='ClientToken', example='123', position='Query'),
  instanceId: string(name='InstanceId', example='vs123', position='Body'),
}

model GetInstanceResponseBody = {
  data?: {
    bundlingType?: string(name='BundlingType', example='PREPAY'),
    concurrencyNumber?: int32(name='ConcurrencyNumber', example='5'),
    createTime?: long(name='CreateTime', example='1618396147000'),
    currentVideoCapacity?: string(name='CurrentVideoCapacity', example='1235701'),
    expireTime?: long(name='ExpireTime', example='1618396147000'),
    instanceId?: string(name='InstanceId', example='vs-123'),
    instanceName?: string(name='InstanceName'),
    instanceStatus?: int32(name='InstanceStatus', example='3'),
    maxVideoCapacity?: string(name='MaxVideoCapacity', example='2000'),
    regionId?: string(name='RegionId', example='cn-beijing'),
    videoInfoUpdateTime?: long(name='VideoInfoUpdateTime', example='1618396147000'),
    videoNumber?: int32(name='VideoNumber', example='12356'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='abc23-def145'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', true, 'form', request);
}

model GetStorageHistoryRequest {
  clientToken?: string(name='ClientToken', example='clientToken', position='Query'),
  instanceId: string(name='InstanceId', example='vs-ih****wj', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
  videoId: string(name='VideoId', example='testVideoId', position='Query'),
}

model GetStorageHistoryResponseBody = {
  data?: {
    count?: long(name='Count', example='28'),
    list?: [ 
      {
        description?: string(name='Description'),
        modifiedTime?: long(name='ModifiedTime', example='667864577541000'),
        storageInfo?: int32(name='StorageInfo', example='1'),
        storageType?: int32(name='StorageType', example='1'),
        videoId?: string(name='VideoId', example='testVideoId'),
        videoUrl?: string(name='VideoUrl', example='https://testVideo.aliyuncs.com'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='38D33983-6CEC-4D47-9803-2F6B18A759E9'),
}

model GetStorageHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStorageHistoryResponseBody(name='body'),
}

async function getStorageHistory(request: GetStorageHistoryRequest): GetStorageHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStorageHistory', 'POST', '/', 'json', false, 'json', request);
}

model GetTaskStatusRequest {
  clientToken?: string(name='ClientToken', example='clientToken', position='Query'),
  instanceId: string(name='InstanceId', example='vs-ihc****wj', position='Body'),
  taskId: string(name='TaskId', example='100001', position='Body'),
}

model GetTaskStatusResponseBody = {
  data?: int32(name='Data', example='1'),
  requestId?: string(name='RequestId', example='1ABBE852-6313-49F9-BF8A-6FDF9A4C0617'),
  taskInfo?: {
    analysisUseTime?: long(name='AnalysisUseTime', example='21'),
    description?: string(name='Description'),
    duration?: float(name='Duration', example='186.75'),
    errorInfo?: string(name='ErrorInfo'),
    finishTime?: long(name='FinishTime', example='6754336754000'),
    processResultOss?: string(name='ProcessResultOss', example='https://result*******.aliyuncs.com/xxxxx/test'),
    queryTags?: string(name='QueryTags', example='testQueryTag'),
    replaceStorageThreshold?: string(name='ReplaceStorageThreshold', example='0.95'),
    resolution?: string(name='Resolution', example='320*160'),
    resourceType?: string(name='ResourceType', example='1'),
    status?: int32(name='Status', example='3'),
    storageInfo?: int32(name='StorageInfo', example='1'),
    storageType?: int32(name='StorageType'),
    submitTime?: long(name='SubmitTime', example='169876556900'),
    taskId?: long(name='TaskId', example='19056'),
    videoId?: string(name='VideoId', example='testVideoId'),
    videoTags?: string(name='VideoTags', example='testVideoTag'),
    videoUrl?: string(name='VideoUrl', example='https://testVideo.aliyuncs.com/xxxxx'),
  }(name='TaskInfo'),
}

model GetTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTaskStatusResponseBody(name='body'),
}

async function getTaskStatus(request: GetTaskStatusRequest): GetTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTaskStatus', 'POST', '/', 'json', true, 'form', request);
}

model ListBatchTaskRequest {
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Host'),
  batchTaskType?: string(name='BatchTaskType', example='1', maxLength=1000, position='Query'),
  bucketName?: string(name='BucketName', example='testBucket', position='Query'),
  clientToken?: string(name='ClientToken', example='C86D03D1-253E-4462-A4B1-195F945BCEEB', position='Query'),
  dataPath?: string(name='DataPath', example='testPath', position='Query'),
  instanceId?: string(name='InstanceId', example='vs-abcabc***abc', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: long(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
  status?: string(name='Status', example='1', position='Query'),
}

model ListBatchTaskResponseBody = {
  data?: {
    count?: long(name='Count', example='1007'),
    list?: [ 
      {
        arn?: string(name='Arn', example='xxx'),
        bucketName?: string(name='BucketName'),
        dataPath?: string(name='DataPath'),
        metaFile?: string(name='MetaFile'),
        modifiedTime?: long(name='ModifiedTime', example='1618396147'),
        processMessage?: string(name='ProcessMessage', example='http://mult***re.oss-cn-hangzhou.aliyuncs.com/batchProcessMessage//1989587002255388/096cae3e-5a0e-4cb6-9f07-9d9cb81f9b95?Expires=1601449075&OSSAccessKeyId=LTAI4Fsi******Y7maLLvP&Signature=jdbmaJ2rKY5%2B*****2h6E8U0%3D'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
        status?: int32(name='Status', example='2'),
        subTaskDetail?: string(name='SubTaskDetail', example='http://xxx'),
        taskId?: string(name='TaskId', example='10876'),
        taskType?: int32(name='TaskType', example='1'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='C86D03D1-253E-4462-A4B1-195F945BCEEB'),
}

model ListBatchTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBatchTaskResponseBody(name='body'),
}

async function listBatchTask(request: ListBatchTaskRequest): ListBatchTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBatchTask', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  clientToken?: string(name='ClientToken', example='xxx', position='Query'),
  instanceName?: string(name='InstanceName', example='test', position='Body'),
  instanceType?: int32(name='InstanceType', example='1', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  status?: int32(name='Status', example='1', position='Body'),
  tags?: string(name='Tags', example='testTags', position='Body'),
}

model ListInstancesResponseBody = {
  data?: {
    count?: long(name='Count', example='0'),
    list?: [ 
      {
        createTime?: string(name='CreateTime', example='1618396147'),
        expiredTime?: string(name='ExpiredTime', example='1618396147'),
        instanceId?: string(name='InstanceId', example='1'),
        instanceName?: string(name='InstanceName', example='test'),
        instanceStatus?: int32(name='InstanceStatus', example='1'),
        tags?: [ 
          {
            key?: string(name='Key', example='key'),
            value?: string(name='Value', example='value'),
          }
        ](name='Tags'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='xxx'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', true, 'form', request);
}

model ListSearchAudioTasksRequest {
  clientToken?: string(name='ClientToken', example='1', position='Query'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', example='i12345678', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=3147483647, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=2147483647, position='Body'),
  sortList?: string(name='SortList', example='[1,2]', position='Body'),
  statusList?: string(name='StatusList', example='[1,2]', position='Body'),
  taskId?: string(name='TaskId', example='1', position='Body'),
}

model ListSearchAudioTasksResponseBody = {
  data?: {
    count?: long(name='Count', example='1'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskList?: [ 
      {
        audioId?: string(name='AudioId', example='1'),
        audioTags?: string(name='AudioTags', example='test'),
        audioUrl?: string(name='AudioUrl', example='http://xxx.mp4'),
        description?: string(name='Description'),
        errorDetail?: string(name='ErrorDetail'),
        modifiedTime?: long(name='ModifiedTime', example='1618396147'),
        processResultUrl?: string(name='ProcessResultUrl', example='http://xxx'),
        processTime?: long(name='ProcessTime', example='10'),
        remoteTaskId?: string(name='RemoteTaskId', example='1'),
        sort?: int32(name='Sort', example='1'),
        status?: int32(name='Status', example='1'),
        storageInfo?: int32(name='StorageInfo', example='1'),
        taskId?: string(name='TaskId', example='1'),
      }
    ](name='TaskList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='123'),
}

model ListSearchAudioTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSearchAudioTasksResponseBody(name='body'),
}

async function listSearchAudioTasks(request: ListSearchAudioTasksRequest): ListSearchAudioTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSearchAudioTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListSearchVideoTasksRequest {
  clientToken?: string(name='ClientToken', example='123', position='Query'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', example='1', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  searchTypeList?: string(name='SearchTypeList', example='[1,2]', position='Body'),
  sortList?: string(name='SortList', example='[1,2]', position='Body'),
  statusList?: string(name='StatusList', example='[1,2]', position='Body'),
  taskId?: string(name='TaskId', example='1', position='Body'),
  videoId?: string(name='VideoId', example='1', position='Body'),
  videoName?: string(name='VideoName', example='testVideoName', position='Body'),
}

model ListSearchVideoTasksResponseBody = {
  data?: {
    count?: long(name='Count', example='0'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskList?: [ 
      {
        description?: string(name='Description'),
        errorDetail?: string(name='ErrorDetail', example='xxx'),
        modifiedTime?: long(name='ModifiedTime', example='1618396147'),
        processResultUrl?: string(name='ProcessResultUrl', example='http://xxx'),
        processTime?: long(name='ProcessTime', example='10'),
        queryTags?: string(name='QueryTags', example='xxx'),
        remoteTaskId?: string(name='RemoteTaskId', example='1'),
        replaceStorageThreshold?: string(name='ReplaceStorageThreshold', example='0.5'),
        searchType?: int32(name='SearchType', example='1'),
        sort?: int32(name='Sort', example='1'),
        status?: int32(name='Status', example='2'),
        storageInfo?: int32(name='StorageInfo', example='1'),
        storageType?: int32(name='StorageType', example='1'),
        taskId?: string(name='TaskId', example='123'),
        videoId?: string(name='VideoId', example='123'),
        videoName?: string(name='VideoName', example='testName'),
        videoTags?: string(name='VideoTags', example='xxx'),
        videoUrl?: string(name='VideoUrl', example='http://xxx'),
      }
    ](name='TaskList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='123'),
}

model ListSearchVideoTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSearchVideoTasksResponseBody(name='body'),
}

async function listSearchVideoTasks(request: ListSearchVideoTasksRequest): ListSearchVideoTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSearchVideoTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListStorageAudioTasksRequest {
  audioId?: string(name='AudioId', example='123', position='Body'),
  clientToken?: string(name='ClientToken', example='1', position='Query'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', example='xx-ixxxx', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=2147483647, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=2147483647, position='Body'),
  sortList?: string(name='SortList', example='[1,2]', position='Body'),
  statusList?: string(name='StatusList', example='[1,2]', position='Body'),
  storageInfoList?: string(name='StorageInfoList', example='[1,2]', position='Body'),
  taskId?: string(name='TaskId', example='1', position='Body'),
}

model ListStorageAudioTasksResponseBody = {
  data?: {
    count?: long(name='Count', example='1'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskList?: [ 
      {
        audioId?: string(name='AudioId', example='1'),
        audioUrl?: string(name='AudioUrl', example='http://xxx'),
        description?: string(name='Description'),
        errorDetail?: string(name='ErrorDetail'),
        processTime?: long(name='ProcessTime', example='1'),
        remoteTaskId?: string(name='RemoteTaskId', example='1'),
        sort?: int32(name='Sort', example='1'),
        status?: string(name='Status', example='1'),
        storageInfo?: int32(name='StorageInfo', example='1'),
        taskId?: long(name='TaskId', example='1'),
        updateTime?: long(name='UpdateTime', example='1618396147'),
      }
    ](name='TaskList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='123'),
}

model ListStorageAudioTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListStorageAudioTasksResponseBody(name='body'),
}

async function listStorageAudioTasks(request: ListStorageAudioTasksRequest): ListStorageAudioTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStorageAudioTasks', 'POST', '/', 'json', true, 'form', request);
}

model ListStorageVideoTasksRequest {
  clientToken?: string(name='ClientToken', example='123', position='Query'),
  description?: string(name='Description', position='Body'),
  instanceId: string(name='InstanceId', example='xxx', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  sortList?: string(name='SortList', example='[1]', position='Body'),
  statusList?: string(name='StatusList', example='[1,2]', position='Body'),
  storageInfoList?: string(name='StorageInfoList', example='[1,2]', position='Body'),
  taskId?: string(name='TaskId', example='123', position='Body'),
  videoId?: string(name='VideoId', example='1', position='Body'),
  videoName?: string(name='VideoName', example='testName', position='Body'),
}

model ListStorageVideoTasksResponseBody = {
  data?: {
    count?: long(name='Count', example='0'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    taskList?: [ 
      {
        description?: string(name='Description'),
        errorDetail?: string(name='ErrorDetail', example='xxx'),
        modifiedTime?: long(name='ModifiedTime', example='1618396147'),
        processTime?: long(name='ProcessTime', example='10'),
        remoteTaskId?: string(name='RemoteTaskId', example='1'),
        sort?: int32(name='Sort', example='1'),
        status?: string(name='Status', example='1'),
        storageInfo?: int32(name='StorageInfo', example='1'),
        taskId?: long(name='TaskId', example='1'),
        videoId?: string(name='VideoId', example='1'),
        videoName?: string(name='VideoName', example='testName'),
        videoUrl?: string(name='VideoUrl', example='http://xxx'),
      }
    ](name='TaskList'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='123'),
}

model ListStorageVideoTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListStorageVideoTasksResponseBody(name='body'),
}

async function listStorageVideoTasks(request: ListStorageVideoTasksRequest): ListStorageVideoTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStorageVideoTasks', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPriorityRequest {
  clientToken?: string(name='ClientToken', example='123', position='Query'),
  sort: int32(name='Sort', example='1', minimum=0, maximum=3, position='Body'),
  taskId: string(name='TaskId', example='123', position='Query'),
}

model ModifyPriorityResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='xxx'),
}

model ModifyPriorityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPriorityResponseBody(name='body'),
}

async function modifyPriority(request: ModifyPriorityRequest): ModifyPriorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPriority', 'POST', '/', 'json', true, 'form', request);
}

