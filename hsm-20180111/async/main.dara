/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'hsm';
  @version = '2018-01-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActiveClusterRequest {
  clusterId?: string(name='ClusterId', position='Query'),
}

model ActiveClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActiveClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActiveClusterResponseBody(name='body'),
}

async function activeCluster(request: ActiveClusterRequest): ActiveClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveCluster', 'POST', '/', 'json', false, 'json', request);
}

model AddInstancesToClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  hsmInstanceIds: map[string]any(name='HsmInstanceIds', shrink='json', position='Query'),
}

model AddInstancesToClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddInstancesToClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddInstancesToClusterResponseBody(name='body'),
}

async function addInstancesToCluster(request: AddInstancesToClusterRequest): AddInstancesToClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddInstancesToCluster', 'POST', '/', 'json', false, 'json', request);
}

model ConfigAuditLogRequest {
  auditAction: string(name='AuditAction', position='Query'),
  configOssBucket?: string(name='ConfigOssBucket', position='Query'),
  regionNo: string(name='RegionNo', position='Query'),
}

model ConfigAuditLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigAuditLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigAuditLogResponseBody(name='body'),
}

async function configAuditLog(request: ConfigAuditLogRequest): ConfigAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model ConfigClusterMasterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model ConfigClusterMasterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigClusterMasterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigClusterMasterResponseBody(name='body'),
}

async function configClusterMaster(request: ConfigClusterMasterRequest): ConfigClusterMasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigClusterMaster', 'POST', '/', 'json', false, 'json', request);
}

model ConfigNetworkRequest {
  instanceId: string(name='InstanceId', example='hsm-cn-vj30bil8j001', position='Query'),
  ip: string(name='Ip', example='192.168.1.100', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-u7gb0qahu', position='Query'),
  vpcId: string(name='VpcId', example='vpc-lmkmivmo6', position='Query'),
}

model ConfigNetworkResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigNetworkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigNetworkResponseBody(name='body'),
}

async function configNetwork(request: ConfigNetworkRequest): ConfigNetworkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigNetwork', 'POST', '/', 'json', false, 'json', request);
}

model ConfigNewClusterWithInstanceRequest {
  ifTrial?: boolean(name='IfTrial', position='Query'),
  regionNo: string(name='RegionNo', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vsmType: string(name='VsmType', position='Query'),
  vswitchId: string(name='VswitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model ConfigNewClusterWithInstanceResponseBody = {
  clusters?: [ 
    {
      certificates?: {
        clusterCertificate?: string(name='ClusterCertificate'),
        clusterCsr?: string(name='ClusterCsr'),
        clusterOwnerCertificate?: string(name='ClusterOwnerCertificate'),
      }(name='Certificates'),
      clusterId?: string(name='ClusterId'),
      clusterMaster?: string(name='ClusterMaster'),
      clusterName?: string(name='ClusterName'),
      clusterSize?: string(name='ClusterSize'),
      clusterStatus?: string(name='ClusterStatus'),
      clusterZones?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          zoneNo?: string(name='ZoneNo'),
        }
      ](name='ClusterZones'),
      createTime?: long(name='CreateTime'),
      hsmDeviceType?: string(name='HsmDeviceType'),
      ipWhiteList?: [ string ](name='IpWhiteList'),
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model ConfigNewClusterWithInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigNewClusterWithInstanceResponseBody(name='body'),
}

async function configNewClusterWithInstance(request: ConfigNewClusterWithInstanceRequest): ConfigNewClusterWithInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigNewClusterWithInstance', 'POST', '/', 'json', false, 'json', request);
}

model ConfigWhiteListRequest {
  instanceId: string(name='InstanceId', example='hsm-cn-vj30bil8j001', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  whiteList: string(name='WhiteList', example='192.168.1.100,192.168.1.0/24', position='Query'),
}

model ConfigWhiteListResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ConfigWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigWhiteListResponseBody(name='body'),
}

async function configWhiteList(request: ConfigWhiteListRequest): ConfigWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ConfigureClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  clusterName?: string(name='ClusterName', position='Query'),
  ipWhiteList?: string(name='IpWhiteList', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', shrink='json', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  zoneNos?: [ string ](name='ZoneNos', shrink='json', position='Query'),
}

model ConfigureClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigureClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfigureClusterResponseBody(name='body'),
}

async function configureCluster(request: ConfigureClusterRequest): ConfigureClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  clusterName: string(name='ClusterName', position='Query'),
  hsmInstanceIds?: [ string ](name='HsmInstanceIds', shrink='json', position='Query'),
  ipWhiteList?: string(name='IpWhiteList', position='Query'),
  masterInstanceId: string(name='MasterInstanceId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  clientToken: string(name='ClientToken', example='97C68796-EB7F-4D41-9D5B-12B909D76508', position='Query'),
  hsmDeviceType: string(name='HsmDeviceType', example='jnta.SJJ1528', position='Query'),
  hsmOem: string(name='HsmOem', example='jnta', position='Query'),
  period?: int32(name='Period', example='1', minimum=1, position='Query'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Query'),
  quantity?: int32(name='Quantity', example='1', minimum=1, maximum=10, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerId?: string(name='ResourceOwnerId', example='123456789', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-a', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAuditLogRequest {
  describeUserOssBucket?: boolean(name='DescribeUserOssBucket', position='Query'),
  regionNo: string(name='RegionNo', position='Query'),
}

model DescribeAuditLogResponseBody = {
  aliuid?: long(name='Aliuid'),
  auditOssBucket?: string(name='AuditOssBucket'),
  mgmtLogStatus?: string(name='MgmtLogStatus'),
  regionNo?: string(name='RegionNo'),
  requestId?: string(name='RequestId'),
  serviceAccessGranted?: boolean(name='ServiceAccessGranted'),
  userOssBuckets?: [ string ](name='UserOssBuckets'),
  success?: boolean(name='success'),
}

model DescribeAuditLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAuditLogResponseBody(name='body'),
}

async function describeAuditLog(request: DescribeAuditLogRequest): DescribeAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClustersRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  clusterName?: string(name='ClusterName', position='Query'),
  clusterStatus?: string(name='ClusterStatus', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=1000, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeClustersResponseBody = {
  clusters?: [ 
    {
      certificates?: {
        clusterCertificate?: string(name='ClusterCertificate'),
        clusterCsr?: string(name='ClusterCsr'),
        clusterOwnerCertificate?: string(name='ClusterOwnerCertificate'),
      }(name='Certificates'),
      clusterId?: string(name='ClusterId'),
      clusterMaster?: string(name='ClusterMaster'),
      clusterName?: string(name='ClusterName'),
      clusterSize?: string(name='ClusterSize'),
      clusterStatus?: string(name='ClusterStatus'),
      clusterZones?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          zoneNo?: string(name='ZoneNo'),
        }
      ](name='ClusterZones'),
      createTime?: long(name='CreateTime'),
      hsmDeviceType?: string(name='HsmDeviceType'),
      ipWhiteList?: [ string ](name='IpWhiteList'),
      regionId?: string(name='RegionId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='Clusters'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClustersResponseBody(name='body'),
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  hsmStatus?: int32(name='HsmStatus', example='1', position='Query'),
  instanceId?: string(name='InstanceId', example='hsm-cn-mp90fxefc001', position='Query'),
  lang?: string(name='Lang', position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=1000, position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  remark?: string(name='Remark', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  showInitStatus?: string(name='ShowInitStatus', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  vpcIp?: string(name='VpcIp', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      createTime?: long(name='CreateTime', example='1514382237000'),
      digest?: string(name='Digest'),
      expiredTime?: long(name='ExpiredTime', example='1514382237000'),
      hsmDeviceType?: string(name='HsmDeviceType', example='jnta.SJJ1528'),
      hsmOem?: string(name='HsmOem', example='jnta'),
      hsmStatus?: int32(name='HsmStatus', example='1'),
      initStatus?: int32(name='InitStatus'),
      instanceId?: string(name='InstanceId', example='hsm-cn-vj30bil8j001'),
      ip?: string(name='Ip', example='192.168.1.100'),
      isMaster?: boolean(name='IsMaster'),
      isTrial?: boolean(name='IsTrial'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      remark?: string(name='Remark', example='remark'),
      vpcId?: string(name='VpcId', example='vpc-lmkmivmo6'),
      vswitchId?: string(name='VswitchId', example='vsw-u7gb0qahu'),
      whiteList?: [ string ](name='WhiteList'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
  totalCount?: int32(name='TotalCount', example='1000'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
  lang?: string(name='Lang', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zones?: [ 
        {
          cluster?: string(name='Cluster'),
          localName?: string(name='LocalName'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-a'),
        }
      ](name='Zones'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrialStatusRequest {
  describeTrialResource?: boolean(name='DescribeTrialResource', position='Query'),
}

model DescribeTrialStatusResponseBody = {
  aliuid?: long(name='Aliuid'),
  ifTrialAllowed?: boolean(name='IfTrialAllowed'),
  requestId?: string(name='RequestId'),
  trialResource?: map[string]map[string]any(name='TrialResource'),
  success?: boolean(name='success'),
}

model DescribeTrialStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrialStatusResponseBody(name='body'),
}

async function describeTrialStatus(request: DescribeTrialStatusRequest): DescribeTrialStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrialStatus', 'POST', '/', 'json', false, 'json', request);
}

model InitializeAuditLogRequest {
  sourceIp?: string(name='SourceIp', position='Query'),
}

model InitializeAuditLogResponseBody = {
  requestId?: string(name='RequestId'),
}

model InitializeAuditLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitializeAuditLogResponseBody(name='body'),
}

async function initializeAuditLog(request: InitializeAuditLogRequest): InitializeAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model InitializeClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  issuerCertificate: string(name='IssuerCertificate', position='Query'),
  signedCertificate: string(name='SignedCertificate', position='Query'),
}

model InitializeClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model InitializeClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InitializeClusterResponseBody(name='body'),
}

async function initializeCluster(request: InitializeClusterRequest): InitializeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  instanceId: string(name='InstanceId', example='hsm-cn-vj30bil8j001', position='Query'),
  lang?: string(name='Lang', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  remark: string(name='Remark', position='Query'),
}

model ModifyInstanceResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  lang?: string(name='Lang', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model PauseInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model PauseInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model PauseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PauseInstanceResponseBody(name='body'),
}

async function pauseInstance(request: PauseInstanceRequest): PauseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseInstance', 'POST', '/', 'json', false, 'json', request);
}

model QuickInitInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model QuickInitInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model QuickInitInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuickInitInstanceResponseBody(name='body'),
}

async function quickInitInstance(request: QuickInitInstanceRequest): QuickInitInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuickInitInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  instanceId: string(name='InstanceId', example='hsm-cn-vj30bil8j001', position='Query'),
  resourceOwnerId?: string(name='ResourceOwnerId', example='1234567890', position='Query'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model RemoveInstanceFromClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  isMaster?: boolean(name='IsMaster', position='Query'),
}

model RemoveInstanceFromClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveInstanceFromClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveInstanceFromClusterResponseBody(name='body'),
}

async function removeInstanceFromCluster(request: RemoveInstanceFromClusterRequest): RemoveInstanceFromClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveInstanceFromCluster', 'POST', '/', 'json', false, 'json', request);
}

model RemoveInstancesFromClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  hsmInstanceIds: map[string]any(name='HsmInstanceIds', shrink='json', position='Query'),
}

model RemoveInstancesFromClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveInstancesFromClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveInstancesFromClusterResponseBody(name='body'),
}

async function removeInstancesFromCluster(request: RemoveInstancesFromClusterRequest): RemoveInstancesFromClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveInstancesFromCluster', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clientToken: string(name='ClientToken', example='97C68796-EB7F-4D41-9D5B-12B909D76508', position='Query'),
  instanceId: string(name='InstanceId', example='hsm-cn-vj30bil8j001', position='Query'),
  period?: int32(name='Period', example='1', minimum=1, position='Query'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Query'),
  resourceOwnerId?: string(name='ResourceOwnerId', example='1234567890', position='Query'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId', example='4C467B38-3910-447D-87BC-AC049166F216'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model ResetInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetInstanceResponseBody(name='body'),
}

async function resetInstance(request: ResetInstanceRequest): ResetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResetPausedInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model ResetPausedInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetPausedInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetPausedInstanceResponseBody(name='body'),
}

async function resetPausedInstance(request: ResetPausedInstanceRequest): ResetPausedInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetPausedInstance', 'POST', '/', 'json', false, 'json', request);
}

model ResumeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model ResumeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResumeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResumeInstanceResponseBody(name='body'),
}

async function resumeInstance(request: ResumeInstanceRequest): ResumeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeInstance', 'POST', '/', 'json', false, 'json', request);
}

model SwitchClusterMasterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model SwitchClusterMasterResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchClusterMasterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SwitchClusterMasterResponseBody(name='body'),
}

async function switchClusterMaster(request: SwitchClusterMasterRequest): SwitchClusterMasterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchClusterMaster', 'POST', '/', 'json', false, 'json', request);
}

model SyncInClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model SyncInClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model SyncInClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncInClusterResponseBody(name='body'),
}

async function syncInCluster(request: SyncInClusterRequest): SyncInClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncInCluster', 'POST', '/', 'json', false, 'json', request);
}

