/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloudauth-device', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ExecuteDeviceRiskRequest {
  data?: map[string]any(name='Data'),
}

model ExecuteDeviceRiskShrinkRequest {
  dataShrink?: string(name='Data'),
}

model ExecuteDeviceRiskResponseBody = {
  requestId?: string(name='RequestId'),
  umid?: string(name='Umid'),
  subCode?: string(name='SubCode'),
  code?: int32(name='Code'),
  tags?: string(name='Tags'),
}

model ExecuteDeviceRiskResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteDeviceRiskResponseBody(name='body'),
}

async function executeDeviceRiskWithOptions(tmpReq: ExecuteDeviceRiskRequest, runtime: Util.RuntimeOptions): ExecuteDeviceRiskResponse {
  Util.validateModel(tmpReq);
  var request = new ExecuteDeviceRiskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteDeviceRisk', '2020-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeDeviceRisk(request: ExecuteDeviceRiskRequest): ExecuteDeviceRiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeDeviceRiskWithOptions(request, runtime);
}

model UploadDeviceInfoRequest {
  bizType?: string(name='BizType'),
  appVersion?: string(name='AppVersion'),
  flag?: string(name='Flag'),
  uploadInfos?: [ string ](name='UploadInfos'),
}

model UploadDeviceInfoResponseBody = {
  resultObject?: boolean(name='ResultObject'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model UploadDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UploadDeviceInfoResponseBody(name='body'),
}

async function uploadDeviceInfoWithOptions(request: UploadDeviceInfoRequest, runtime: Util.RuntimeOptions): UploadDeviceInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadDeviceInfo', '2020-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadDeviceInfo(request: UploadDeviceInfoRequest): UploadDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDeviceInfoWithOptions(request, runtime);
}

model UploadDeviceInfosRequest {
  bizType?: string(name='BizType'),
  uploadInfos?: string(name='UploadInfos'),
  appVersion?: string(name='AppVersion'),
  flag?: string(name='Flag'),
}

model UploadDeviceInfosResponseBody = {
  resultObject?: boolean(name='ResultObject'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model UploadDeviceInfosResponse = {
  headers: map[string]string(name='headers'),
  body: UploadDeviceInfosResponseBody(name='body'),
}

async function uploadDeviceInfosWithOptions(request: UploadDeviceInfosRequest, runtime: Util.RuntimeOptions): UploadDeviceInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadDeviceInfos', '2020-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadDeviceInfos(request: UploadDeviceInfosRequest): UploadDeviceInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadDeviceInfosWithOptions(request, runtime);
}

