/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'mseap';
  @version = '2021-01-18';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActivateLicenseRequest {
  bizId?: string(name='BizId', example='P20211118170645000001', position='Query'),
  bizType: string(name='BizType', description='This parameter is required.', example='esp.bookkeeping_course', position='Query'),
  licenseCode: string(name='LicenseCode', description='This parameter is required.', example='B09YICKLVHNR7ZQR', position='Query'),
  licenseNo?: string(name='LicenseNo', position='Query'),
  licensePublisher: string(name='LicensePublisher', description='This parameter is required.', example='yunMarket', position='Query'),
}

model ActivateLicenseResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='88EDA98E-6BE7-55DA-9EB6-B6444B882C59'),
}

model ActivateLicenseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateLicenseResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ActivateLicense  ActivateLicenseRequest
  * @return ActivateLicenseResponse
 */
async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivateLicense', 'POST', '/', 'json', false, 'json', request);
}

model CallbackTaskRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='MPC', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  bizCode?: string(name='BizCode', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  orderId?: string(name='OrderId', description='orderId', example='1672369049358', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  outTaskId?: string(name='OutTaskId', description='outTaskId', example='1', position='Query'),
  principalKey?: string(name='PrincipalKey', position='Query'),
  taskData?: string(name='TaskData', description='taskData', example='{\\"result\\":\\"SUCCESS\\",\\"message\\":\\"null\\",\\"taskId\\":\\"8cbc97d8-9b2b-4c2f-862f-983ea5dbedc2\\"}', position='Query'),
  taskId?: string(name='TaskId', description='taskId', example='2559492', position='Query'),
  taskType?: string(name='TaskType', description='taskType', example='PATENT_QUERY', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='1', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model CallbackTaskResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='bohai-web-app'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: boolean(name='Module', example='True'),
  requestId?: string(name='RequestId', description='requestId', example='56B009EB-AAA5-52C9-B05F-AF425E3885E8'),
  success?: boolean(name='Success', description='success', example='True'),
}

model CallbackTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CallbackTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CallbackTask  CallbackTaskRequest
  * @return CallbackTaskResponse
 */
async function callbackTask(request: CallbackTaskRequest): CallbackTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CallbackTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode', example='10aa40008e081ad7b1fb50bffc3a70b1', position='Query'),
}

model DescribeAgreementStatusResponseBody = {
  agreementCode?: string(name='AgreementCode', example='10aa40008e081ad7b1fb50bffc3a70b1'),
  requestId?: string(name='RequestId', example='6254E13A-A79F-5786-9C75-7590727342C9'),
  status?: int32(name='Status', example='0'),
  userId?: string(name='UserId', example='1219541161213057'),
}

model DescribeAgreementStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAgreementStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeAgreementStatus  DescribeAgreementStatusRequest
  * @return DescribeAgreementStatusResponse
 */
async function describeAgreementStatus(request: DescribeAgreementStatusRequest): DescribeAgreementStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAgreementStatus', 'POST', '/', 'json', false, 'json', request);
}

model GenerateUploadFilePolicyForPartnerRequest {
  bizType?: string(name='BizType', example='esp.website', position='Query'),
  fileName?: string(name='FileName', example='2024/06/25/website_partner_third_party_leads_02.csv', position='Query'),
  fileType?: string(name='FileType', example='website_partner_third_party_leads', position='Query'),
}

model GenerateUploadFilePolicyForPartnerResponseBody = {
  allowRetry?: boolean(name='AllowRetry', example='False'),
  appName?: string(name='AppName', example='live'),
  dynamicCode?: string(name='DynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode', example='500'),
  errorMsg?: string(name='ErrorMsg', example='User not authorized to operate on the specified resource.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  module?: {
    accessId?: string(name='AccessId', example='LTAI5tQPEXqDVu7794Bvw2xM'),
    encodedPolicy?: string(name='EncodedPolicy', example='XXXXXXX'),
    expireTime?: long(name='ExpireTime', example='1719112842'),
    fileDir?: string(name='FileDir', example='website_partner_leads/website/xxxxxx/xxxxxx'),
    host?: string(name='Host', example='//xx-xxx-partner.oss-cn-zhangjiakou.aliyuncs.com/'),
    ossUrl?: string(name='OssUrl', example='https://msea-website-partner.oss-cn-zhangjiakou.aliyuncs.com/website_xxxx_party_leads/website/xxxx/xxxx/2024/06/25/website_partner_third_party_leads_01?Expires=1719868413&OSSAccessKeyId=LTAI5tAnyDDDDD&Signature=XXXX'),
    signature?: string(name='Signature', example='qQb34p8lIXcSFtog2y0H08bC0OI='),
  }(name='Module'),
  requestId?: string(name='RequestId', example='6254E13A-A79F-5786-9C75-7590727342C9'),
  success?: boolean(name='Success', example='True'),
}

model GenerateUploadFilePolicyForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUploadFilePolicyForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateUploadFilePolicyForPartner  GenerateUploadFilePolicyForPartnerRequest
  * @return GenerateUploadFilePolicyForPartnerResponse
 */
async function generateUploadFilePolicyForPartner(request: GenerateUploadFilePolicyForPartnerRequest): GenerateUploadFilePolicyForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateUploadFilePolicyForPartner', 'POST', '/', 'json', false, 'json', request);
}

model GetNodeByFlowIdRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='MPC', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  flowId?: long(name='FlowId', example='180', position='Query'),
  lang?: string(name='Lang', description='lang', example='en', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model GetNodeByFlowIdResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='gatewayprood'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='200,131'),
  requestId?: string(name='RequestId', description='requestId', example='8F30A673-46F0-5774-9D25-B45A29DB626E'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetNodeByFlowIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeByFlowIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNodeByFlowId  GetNodeByFlowIdRequest
  * @return GetNodeByFlowIdResponse
 */
async function getNodeByFlowId(request: GetNodeByFlowIdRequest): GetNodeByFlowIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNodeByFlowId', 'POST', '/', 'json', false, 'json', request);
}

model GetNodeByTemplateIdRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  templateId?: long(name='TemplateId', example='13', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='true', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model GetNodeByTemplateIdResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='qdhxgcagent01'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='zxdfghjklasdfghjkl'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='220,116'),
  requestId?: string(name='RequestId', description='requestId', example='53D045B1-466F-5165-B3BB-42E36F02BA86'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetNodeByTemplateIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeByTemplateIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNodeByTemplateId  GetNodeByTemplateIdRequest
  * @return GetNodeByTemplateIdResponse
 */
async function getNodeByTemplateId(request: GetNodeByTemplateIdRequest): GetNodeByTemplateIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNodeByTemplateId', 'POST', '/', 'json', false, 'json', request);
}

model GetPlatformUserInfoForPartnerRequest {
  appId?: string(name='AppId', example='app-0wceagu85ceaaais', position='Query'),
  platformType?: string(name='PlatformType', example='MP', position='Query'),
  userId?: string(name='UserId', example='123153124411', position='Query'),
}

model GetPlatformUserInfoForPartnerResponseBody = {
  encryptedOpenId?: string(name='EncryptedOpenId', example='djisdpfOjofjifojfajaspsdkasdada'),
  encryptedUnionId?: string(name='EncryptedUnionId', example='djisdpfOjofjifojfajaspsdkasdada'),
  errorMsg?: string(name='ErrorMsg', example='11111111111111111111111'),
  requestId?: string(name='RequestId', description='Id of the request', example='0320C9F4-5EDC-5355-9D7E-DF4CF6C2B3BB'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetPlatformUserInfoForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPlatformUserInfoForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPlatformUserInfoForPartner  GetPlatformUserInfoForPartnerRequest
  * @return GetPlatformUserInfoForPartnerResponse
 */
async function getPlatformUserInfoForPartner(request: GetPlatformUserInfoForPartnerRequest): GetPlatformUserInfoForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPlatformUserInfoForPartner', 'POST', '/', 'json', false, 'json', request);
}

model GetProxyByTypeRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  type?: int32(name='Type', description='type', example='2', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='1', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model GetProxyByTypeResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='118.113.245.10:3128'),
  requestId?: string(name='RequestId', description='requestId', example='CEC1731F-0DA9-5E7D-AE53-7E4D76201C48'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetProxyByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProxyByTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProxyByType  GetProxyByTypeRequest
  * @return GetProxyByTypeResponse
 */
async function getProxyByType(request: GetProxyByTypeRequest): GetProxyByTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetProxyByType', 'POST', '/', 'json', false, 'json', request);
}

model GetRedisValueRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='MPC', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  key?: string(name='Key', description='key', example='106.14.34.208', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  timeout?: long(name='Timeout', description='timeout', example='60', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
  value?: string(name='Value', example='{   \\"cust_id\\":\\"1111111\\",   \\"cust_name\\":\\"aa\\" }', position='Query'),
}

model GetRedisValueResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='bohai-web-app'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: eleme-zb'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='zxdfghjklasdfghjkl'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='107,72'),
  requestId?: string(name='RequestId', description='requestId', example='0320C9F4-5EDC-5355-9D7E-DF4CF6C2B3BB'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetRedisValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRedisValueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRedisValue  GetRedisValueRequest
  * @return GetRedisValueResponse
 */
async function getRedisValue(request: GetRedisValueRequest): GetRedisValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRedisValue', 'POST', '/', 'json', false, 'json', request);
}

model GetVariableRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  templateId?: long(name='TemplateId', example='17', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model GetVariableResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: eleme-zb-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='207,155'),
  requestId?: string(name='RequestId', description='requestId', example='D28419C9-335E-50A7-BD7D-ACF250A825E8'),
  success?: boolean(name='Success', description='success', example='true'),
}

model GetVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVariableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVariable  GetVariableRequest
  * @return GetVariableResponse
 */
async function getVariable(request: GetVariableRequest): GetVariableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVariable', 'POST', '/', 'json', false, 'json', request);
}

model IdentifyCodeRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  data?: string(name='Data', example='{\\"engine\\": \\"MySQL\\", \\"instanceId\\": \\"rm-2zes07949gc0febg6\\", \\"userId\\": \\"1204765431532768\\", \\"previousExistConfig\\": False, \\"engineVersion\\": \\"8.0\\", \\"autoResourceOptimize\\": 0, \\"dasProOn\\": False}', position='Query'),
  label?: string(name='Label', example='1551278', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  type?: string(name='Type', example='CBWP', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model IdentifyCodeResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='baasamlservice'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: lazada-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='1234567890'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='230,94'),
  requestId?: string(name='RequestId', description='requestId', example='8F30A673-46F0-5774-9D25-B45A29DB626E'),
  success?: boolean(name='Success', description='success', example='True'),
}

model IdentifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IdentifyCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of IdentifyCode  IdentifyCodeRequest
  * @return IdentifyCodeResponse
 */
async function identifyCode(request: IdentifyCodeRequest): IdentifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IdentifyCode', 'POST', '/', 'json', false, 'json', request);
}

model PullRpaModelRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  templateId?: long(name='TemplateId', description='templateId', example='17', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model PullRpaModelResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='gatewayprood'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='100008'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='{}'),
  requestId?: string(name='RequestId', description='requestId', example='06055768-6BC0-5FE7-BDFF-BD4D79537035'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PullRpaModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PullRpaModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PullRpaModel  PullRpaModelRequest
  * @return PullRpaModelResponse
 */
async function pullRpaModel(request: PullRpaModelRequest): PullRpaModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PullRpaModel', 'POST', '/', 'json', false, 'json', request);
}

model PullTaskRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  bizCode?: string(name='BizCode', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  orderId?: string(name='OrderId', example='1672369049358', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  principalKey?: string(name='PrincipalKey', position='Query'),
  taskType?: string(name='TaskType', description='taskType', example='PATENT_CHECK', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='1', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model PullTaskResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: {
    bizCode?: string(name='BizCode'),
    orderId?: string(name='OrderId', example='1649470201045'),
    outTaskId?: string(name='OutTaskId', example='1'),
    principalKey?: string(name='PrincipalKey'),
    taskData?: string(name='TaskData', example='{\\"result\\":\\"SUCCESS\\",\\"message\\":\\"null\\",\\"taskId\\":\\"d8800bab-88b6-4c60-9e4f-ed38dbbdd9b3\\"}'),
    taskId?: string(name='TaskId', example='704614'),
    taskType?: string(name='TaskType', example='PATENT_QUERY'),
  }(name='Module'),
  requestId?: string(name='RequestId', description='requestId', example='9831C9A6-3423-52C2-B0E5-5AE01D92C097'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PullTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PullTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PullTask  PullTaskRequest
  * @return PullTaskResponse
 */
async function pullTask(request: PullTaskRequest): PullTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PullTask', 'POST', '/', 'json', false, 'json', request);
}

model PushRpaTaskRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='public', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  modelId?: long(name='ModelId', description='modelId', example='1951', position='Query'),
  name?: string(name='Name', description='name', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  request?: string(name='Request', description='request', example='{}', position='Query'),
  status?: int32(name='Status', description='status', example='0', position='Query'),
  taskId?: long(name='TaskId', description='taskId', example='833812', position='Query'),
  templateId?: long(name='TemplateId', description='templateId', example='26', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model PushRpaTaskResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='itl-material'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: lazada-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='11111111111111111111111'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='58.23.71.83:3128'),
  requestId?: string(name='RequestId', description='requestId', example='ECE5E7EF-6898-5E24-97A1-B96C73BDE26C'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PushRpaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushRpaTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushRpaTask  PushRpaTaskRequest
  * @return PushRpaTaskResponse
 */
async function pushRpaTask(request: PushRpaTaskRequest): PushRpaTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushRpaTask', 'POST', '/', 'json', false, 'json', request);
}

model PushRpaTaskDetailRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='MPC', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  inputData?: string(name='InputData', description='inputData', example='http://wssq.sbj.cnipa.gov.cn:9080/tmsve/wssqsy_getCayzDl.xhtml', position='Query'),
  inputHtml?: string(name='InputHtml', description='inputHtml', example='1', position='Query'),
  inputScreenshot?: string(name='InputScreenshot', description='inputScreenshot', example='1', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  modelDetailId?: long(name='ModelDetailId', description='modelDetailId', example='6', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  outputData?: string(name='OutputData', description='outputData', position='Query'),
  outputHtml?: string(name='OutputHtml', description='outputHtml', example='<div class=\\"photobox\\" id=\\"Layer3\\" style=\\"visibility: visible', position='Query'),
  outputScreenshot?: string(name='OutputScreenshot', description='outputScreenshot', example='http://dbu-nap-p-test.oss-cn-beijing.aliyuncs.com/202301/20230110/5782089/1673334129101-d111874e-f181-4d1c-8edc-83e789975329.jpg?Expires=1675926129&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=------', position='Query'),
  status?: int32(name='Status', description='status', example='1', position='Query'),
  taskDetailId?: long(name='TaskDetailId', description='taskDetailId', example='1', position='Query'),
  taskId?: long(name='TaskId', description='taskId', example='5596654', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
}

model PushRpaTaskDetailResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='207,155'),
  requestId?: string(name='RequestId', description='requestId', example='0320C9F4-5EDC-5355-9D7E-DF4CF6C2B3BB'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PushRpaTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushRpaTaskDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushRpaTaskDetail  PushRpaTaskDetailRequest
  * @return PushRpaTaskDetailResponse
 */
async function pushRpaTaskDetail(request: PushRpaTaskDetailRequest): PushRpaTaskDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushRpaTaskDetail', 'POST', '/', 'json', false, 'json', request);
}

model SendNotificationForPartnerRequest {
  bizId?: string(name='BizId', example='DMP', position='Query'),
  channelType?: string(name='ChannelType', example='1', position='Query'),
  notifyType?: string(name='NotifyType', example='MESSAGE', position='Query'),
  notifycationEventType?: string(name='NotifycationEventType', example='dmp_website_xxx', position='Query'),
  paramMap?: map[string]string(name='ParamMap', shrink='json', position='Query'),
  sendTarget?: string(name='SendTarget', example='12312212312', position='Query'),
  smartSubChannels?: [ string ](name='SmartSubChannels', shrink='json', position='Query'),
  trackId?: string(name='TrackId', example='5b29647n-a172-4ccd-ba33-73669896c287', position='Query'),
}

model SendNotificationForPartnerResponseBody = {
  errorMsg?: string(name='ErrorMsg', example='11111111111111111111111'),
  msgId?: string(name='MsgId', example='0A011920166449C2FAAE8D179E1704C5'),
  requestId?: string(name='RequestId', example='1940A84F-6D90-5764-9119-6279970C6FF5'),
  success?: boolean(name='Success', example='True'),
}

model SendNotificationForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendNotificationForPartnerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendNotificationForPartner  SendNotificationForPartnerRequest
  * @return SendNotificationForPartnerResponse
 */
async function sendNotificationForPartner(request: SendNotificationForPartnerRequest): SendNotificationForPartnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendNotificationForPartner', 'POST', '/', 'json', false, 'json', request);
}

model SetRedisValueRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1', position='Query'),
  apiType?: string(name='ApiType', description='apiType', example='part_config_data', position='Query'),
  bid?: string(name='Bid', description='bid', example='26842', position='Query'),
  key?: string(name='Key', example='1684967696495902', position='Query'),
  lang?: string(name='Lang', description='lang', example='zh', position='Query'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1', position='Query'),
  requestId?: string(name='RequestId', description='requestId', example='F864A883-AD76-53D5-9A24-A6DAD5177697', position='Query'),
  timeout?: long(name='Timeout', description='timeout', example='5000', position='Query'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1', position='Query'),
  userBid?: string(name='UserBid', description='userBid', example='1', position='Query'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1', position='Query'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1', position='Query'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1', position='Query'),
  userKp?: string(name='UserKp', description='userKp', example='1', position='Query'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1', position='Query'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1', position='Query'),
  value?: string(name='Value', example='259200000', position='Query'),
}

model SetRedisValueResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='cloudquery'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='10.151.12.0/24,100.104.36.0/26,47.102.181.0/24,100.104.52.0/24,47.101.109.0/24,120.55.129.0/24,11.115.103.0/24,47.102.234.0/24'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: boolean(name='Module', description='module', example='71,135'),
  requestId?: string(name='RequestId', description='requestId', example='195BABE2-7105-5C16-ABCE-2D0997CCE2E3'),
  success?: boolean(name='Success', description='success', example='True'),
}

model SetRedisValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetRedisValueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetRedisValue  SetRedisValueRequest
  * @return SetRedisValueResponse
 */
async function setRedisValue(request: SetRedisValueRequest): SetRedisValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRedisValue', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode', example='10aa40008e081ad7b1fb50bffc3a70b1', position='Query'),
}

model UpdateAgreementStatusResponseBody = {
  requestId?: string(name='RequestId', example='6BDB1964-A6E9-5946-89A4-523D35645BB6'),
}

model UpdateAgreementStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAgreementStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAgreementStatus  UpdateAgreementStatusRequest
  * @return UpdateAgreementStatusResponse
 */
async function updateAgreementStatus(request: UpdateAgreementStatusRequest): UpdateAgreementStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAgreementStatus', 'POST', '/', 'json', false, 'json', request);
}

