/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mseap', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ActivateLicenseRequest {
  bizType?: string(name='BizType'),
  licensePublisher?: string(name='LicensePublisher'),
  licenseCode?: string(name='LicenseCode'),
}

model ActivateLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
}

model ActivateLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateLicenseResponseBody(name='body'),
}

async function activateLicenseWithOptions(request: ActivateLicenseRequest, runtime: Util.RuntimeOptions): ActivateLicenseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ActivateLicense', '2021-01-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateLicenseWithOptions(request, runtime);
}

model BusinessLicenseOcrRequest {
  lang?: string(name='Lang'),
  bizCode?: string(name='BizCode'),
  fileInfo?: string(name='FileInfo'),
  fileStoreType?: string(name='FileStoreType'),
}

model BusinessLicenseOcrResponseBody = {
  registerNumber?: string(name='RegisterNumber'),
  type?: string(name='Type'),
  validPeriod?: string(name='ValidPeriod'),
  requestId?: string(name='RequestId'),
  address?: string(name='Address'),
  capital?: string(name='Capital'),
  legalPerson?: string(name='LegalPerson'),
  establishDate?: string(name='EstablishDate'),
  nationality?: string(name='Nationality'),
  name?: string(name='Name'),
  business?: string(name='Business'),
  trackId?: string(name='TrackId'),
}

model BusinessLicenseOcrResponse = {
  headers: map[string]string(name='headers'),
  body: BusinessLicenseOcrResponseBody(name='body'),
}

async function businessLicenseOcrWithOptions(request: BusinessLicenseOcrRequest, runtime: Util.RuntimeOptions): BusinessLicenseOcrResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BusinessLicenseOcr', '2021-01-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function businessLicenseOcr(request: BusinessLicenseOcrRequest): BusinessLicenseOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return businessLicenseOcrWithOptions(request, runtime);
}

model CertificateQualityRequest {
  lang?: string(name='Lang'),
  bizCode?: string(name='BizCode'),
  fileInfo?: string(name='FileInfo'),
  fileStoreType?: string(name='FileStoreType'),
  certificateType?: string(name='CertificateType'),
}

model CertificateQualityResponseBody = {
  containSeal?: string(name='ContainSeal'),
  containWatermark?: string(name='ContainWatermark'),
  requestId?: string(name='RequestId'),
  copy?: string(name='Copy'),
  complete?: string(name='Complete'),
  nationalEmblem?: string(name='NationalEmblem'),
  targetType?: string(name='TargetType'),
  reflection?: string(name='Reflection'),
  electronic?: string(name='Electronic'),
  containFront?: string(name='ContainFront'),
  textClarity?: string(name='TextClarity'),
}

model CertificateQualityResponse = {
  headers: map[string]string(name='headers'),
  body: CertificateQualityResponseBody(name='body'),
}

async function certificateQualityWithOptions(request: CertificateQualityRequest, runtime: Util.RuntimeOptions): CertificateQualityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CertificateQuality', '2021-01-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function certificateQuality(request: CertificateQualityRequest): CertificateQualityResponse {
  var runtime = new Util.RuntimeOptions{};
  return certificateQualityWithOptions(request, runtime);
}

model DescribeAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode'),
}

model DescribeAgreementStatusResponseBody = {
  status?: int32(name='Status'),
  requestId?: string(name='RequestId'),
  userId?: string(name='UserId'),
  agreementCode?: string(name='AgreementCode'),
}

model DescribeAgreementStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAgreementStatusResponseBody(name='body'),
}

async function describeAgreementStatusWithOptions(request: DescribeAgreementStatusRequest, runtime: Util.RuntimeOptions): DescribeAgreementStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAgreementStatus', '2021-01-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAgreementStatus(request: DescribeAgreementStatusRequest): DescribeAgreementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAgreementStatusWithOptions(request, runtime);
}

model IdentityCardOcrRequest {
  lang?: string(name='Lang'),
  bizCode?: string(name='BizCode'),
  fileInfo?: string(name='FileInfo'),
  fileStoreType?: string(name='FileStoreType'),
}

model IdentityCardOcrResponseBody = {
  issue?: string(name='Issue'),
  validDate?: string(name='ValidDate'),
  requestId?: string(name='RequestId'),
  address?: string(name='Address'),
  idNumber?: string(name='IdNumber'),
  gender?: string(name='Gender'),
  nationality?: string(name='Nationality'),
  birthDate?: string(name='BirthDate'),
  trackId?: string(name='TrackId'),
  name?: string(name='Name'),
}

model IdentityCardOcrResponse = {
  headers: map[string]string(name='headers'),
  body: IdentityCardOcrResponseBody(name='body'),
}

async function identityCardOcrWithOptions(request: IdentityCardOcrRequest, runtime: Util.RuntimeOptions): IdentityCardOcrResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('IdentityCardOcr', '2021-01-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function identityCardOcr(request: IdentityCardOcrRequest): IdentityCardOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return identityCardOcrWithOptions(request, runtime);
}

model UpdateAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode'),
}

model UpdateAgreementStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAgreementStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAgreementStatusResponseBody(name='body'),
}

async function updateAgreementStatusWithOptions(request: UpdateAgreementStatusRequest, runtime: Util.RuntimeOptions): UpdateAgreementStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAgreementStatus', '2021-01-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAgreementStatus(request: UpdateAgreementStatusRequest): UpdateAgreementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAgreementStatusWithOptions(request, runtime);
}

