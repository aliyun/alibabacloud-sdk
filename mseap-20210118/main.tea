/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mseap', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ActivateLicenseRequest {
  bizType?: string(name='BizType'),
  licensePublisher?: string(name='LicensePublisher'),
  licenseCode?: string(name='LicenseCode'),
}

model ActivateLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
}

model ActivateLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateLicenseResponseBody(name='body'),
}

async function activateLicenseWithOptions(request: ActivateLicenseRequest, runtime: Util.RuntimeOptions): ActivateLicenseResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ActivateLicense', '2021-01-18', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateLicenseWithOptions(request, runtime);
}

