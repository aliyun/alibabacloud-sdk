/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mseap', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActivateLicenseRequest {
  bizId?: string(name='BizId'),
  bizType?: string(name='BizType'),
  licenseCode?: string(name='LicenseCode'),
  licenseNo?: string(name='LicenseNo'),
  licensePublisher?: string(name='LicensePublisher'),
}

model ActivateLicenseResponseBody = {
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
}

model ActivateLicenseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivateLicenseResponseBody(name='body'),
}

async function activateLicenseWithOptions(request: ActivateLicenseRequest, runtime: Util.RuntimeOptions): ActivateLicenseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!Util.isUnset(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.licenseNo)) {
    query['LicenseNo'] = request.licenseNo;
  }
  if (!Util.isUnset(request.licensePublisher)) {
    query['LicensePublisher'] = request.licensePublisher;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateLicense',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateLicenseWithOptions(request, runtime);
}

model BusinessLicenseOcrRequest {
  bizCode?: string(name='BizCode'),
  fileInfo?: string(name='FileInfo'),
  fileStoreType?: string(name='FileStoreType'),
  lang?: string(name='Lang'),
}

model BusinessLicenseOcrResponseBody = {
  address?: string(name='Address'),
  business?: string(name='Business'),
  capital?: string(name='Capital'),
  establishDate?: string(name='EstablishDate'),
  legalPerson?: string(name='LegalPerson'),
  name?: string(name='Name'),
  registerNumber?: string(name='RegisterNumber'),
  requestId?: string(name='RequestId'),
  trackId?: string(name='TrackId'),
  type?: string(name='Type'),
  validPeriod?: string(name='ValidPeriod'),
}

model BusinessLicenseOcrResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BusinessLicenseOcrResponseBody(name='body'),
}

async function businessLicenseOcrWithOptions(request: BusinessLicenseOcrRequest, runtime: Util.RuntimeOptions): BusinessLicenseOcrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.fileInfo)) {
    query['FileInfo'] = request.fileInfo;
  }
  if (!Util.isUnset(request.fileStoreType)) {
    query['FileStoreType'] = request.fileStoreType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BusinessLicenseOcr',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function businessLicenseOcr(request: BusinessLicenseOcrRequest): BusinessLicenseOcrResponse {
  var runtime = new Util.RuntimeOptions{};
  return businessLicenseOcrWithOptions(request, runtime);
}

model DescribeAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode'),
}

model DescribeAgreementStatusResponseBody = {
  agreementCode?: string(name='AgreementCode'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
  userId?: string(name='UserId'),
}

model DescribeAgreementStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAgreementStatusResponseBody(name='body'),
}

async function describeAgreementStatusWithOptions(request: DescribeAgreementStatusRequest, runtime: Util.RuntimeOptions): DescribeAgreementStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agreementCode)) {
    query['AgreementCode'] = request.agreementCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAgreementStatus',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAgreementStatus(request: DescribeAgreementStatusRequest): DescribeAgreementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAgreementStatusWithOptions(request, runtime);
}

model GetNodeByFlowIdRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong'),
  apiType?: string(name='ApiType', description='apiType'),
  bid?: string(name='Bid', description='bid'),
  callerParentId?: long(name='CallerParentId', description='callerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport'),
  callerType?: string(name='CallerType', description='callerType'),
  clientIp?: string(name='ClientIp', description='clientIp'),
  flowId?: long(name='FlowId', description='flowId'),
  lang?: string(name='Lang', description='lang'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest'),
  popAction?: string(name='PopAction', description='popAction'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo'),
  requestId?: string(name='RequestId', description='requestId'),
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId'),
  userBid?: string(name='UserBid', description='userBid'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType', description='userCallerType'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  userKp?: string(name='UserKp', description='userKp'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken'),
}

model GetNodeByFlowIdResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry'),
  appName?: string(name='AppName', description='appName'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  module?: string(name='Module', description='module'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model GetNodeByFlowIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNodeByFlowIdResponseBody(name='body'),
}

async function getNodeByFlowIdWithOptions(request: GetNodeByFlowIdRequest, runtime: Util.RuntimeOptions): GetNodeByFlowIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeByFlowId',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeByFlowId(request: GetNodeByFlowIdRequest): GetNodeByFlowIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeByFlowIdWithOptions(request, runtime);
}

model GetRedisValueRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong'),
  apiType?: string(name='ApiType', description='apiType'),
  bid?: string(name='Bid', description='bid'),
  callerParentId?: long(name='CallerParentId', description='callerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport'),
  callerType?: string(name='CallerType', description='callerType'),
  clientIp?: string(name='ClientIp', description='clientIp'),
  key?: string(name='Key', description='key'),
  lang?: string(name='Lang', description='lang'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest'),
  popAction?: string(name='PopAction', description='popAction'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo'),
  requestId?: string(name='RequestId', description='requestId'),
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid'),
  timeout?: long(name='Timeout', description='timeout'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId'),
  userBid?: string(name='UserBid', description='userBid'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType', description='userCallerType'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  userKp?: string(name='UserKp', description='userKp'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken'),
  value?: string(name='Value', description='value'),
}

model GetRedisValueResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry'),
  appName?: string(name='AppName', description='appName'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  module?: string(name='Module', description='module'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model GetRedisValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRedisValueResponseBody(name='body'),
}

async function getRedisValueWithOptions(request: GetRedisValueRequest, runtime: Util.RuntimeOptions): GetRedisValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRedisValue',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRedisValue(request: GetRedisValueRequest): GetRedisValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRedisValueWithOptions(request, runtime);
}

model GetVariableRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong'),
  apiType?: string(name='ApiType', description='apiType'),
  bid?: string(name='Bid', description='bid'),
  callerParentId?: long(name='CallerParentId', description='callerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport'),
  callerType?: string(name='CallerType', description='callerType'),
  clientIp?: string(name='ClientIp', description='clientIp'),
  lang?: string(name='Lang', description='lang'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest'),
  popAction?: string(name='PopAction', description='popAction'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo'),
  requestId?: string(name='RequestId', description='requestId'),
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid'),
  templateId?: long(name='TemplateId', description='templateId'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId'),
  userBid?: string(name='UserBid', description='userBid'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType', description='userCallerType'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  userKp?: string(name='UserKp', description='userKp'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken'),
}

model GetVariableResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry'),
  appName?: string(name='AppName', description='appName'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  module?: string(name='Module', description='module'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model GetVariableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetVariableResponseBody(name='body'),
}

async function getVariableWithOptions(request: GetVariableRequest, runtime: Util.RuntimeOptions): GetVariableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVariable',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVariable(request: GetVariableRequest): GetVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVariableWithOptions(request, runtime);
}

model IdentifyCodeRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong'),
  apiType?: string(name='ApiType', description='apiType'),
  bid?: string(name='Bid', description='bid'),
  callerParentId?: long(name='CallerParentId', description='callerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport'),
  callerType?: string(name='CallerType', description='callerType'),
  clientIp?: string(name='ClientIp', description='clientIp'),
  data?: string(name='Data', description='data'),
  label?: string(name='Label', description='label'),
  lang?: string(name='Lang', description='lang'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest'),
  popAction?: string(name='PopAction', description='popAction'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo'),
  requestId?: string(name='RequestId', description='requestId'),
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid'),
  type?: string(name='Type', description='type'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId'),
  userBid?: string(name='UserBid', description='userBid'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType', description='userCallerType'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  userKp?: string(name='UserKp', description='userKp'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken'),
}

model IdentifyCodeResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry'),
  appName?: string(name='AppName', description='appName'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  module?: string(name='Module', description='module'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model IdentifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IdentifyCodeResponseBody(name='body'),
}

async function identifyCodeWithOptions(request: IdentifyCodeRequest, runtime: Util.RuntimeOptions): IdentifyCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.data)) {
    query['Data'] = request.data;
  }
  if (!Util.isUnset(request.label)) {
    query['Label'] = request.label;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IdentifyCode',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function identifyCode(request: IdentifyCodeRequest): IdentifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return identifyCodeWithOptions(request, runtime);
}

model QueryTrademarkDetailByApplyNumberRequest {
  aliyunKp?: string(name='AliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong'),
  apiType?: string(name='ApiType', description='INNER_API, OPEN_API'),
  applyNumber?: string(name='ApplyNumber'),
  bid?: string(name='Bid'),
  callerParentId?: long(name='CallerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport'),
  callerType?: string(name='CallerType'),
  clientIp?: string(name='ClientIp'),
  env?: string(name='Env'),
  lang?: string(name='Lang'),
  mfaPresent?: boolean(name='MfaPresent'),
  originalRequest?: string(name='OriginalRequest'),
  popAction?: string(name='PopAction'),
  proxyCallerIp?: string(name='ProxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo'),
  requestId?: string(name='RequestId'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid'),
  userAccessKeyId?: string(name='UserAccessKeyId'),
  userBid?: string(name='UserBid'),
  userCallerParentId?: long(name='UserCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType'),
  userClientIp?: string(name='UserClientIp'),
  userKp?: string(name='UserKp'),
  userMfaPresent?: boolean(name='UserMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken'),
}

model QueryTrademarkDetailByApplyNumberResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: {
    trademarkModel?: {
      bitFlag?: int32(name='BitFlag', description='二进制位'),
      bizId?: string(name='BizId', description='实例ID'),
      bizType?: string(name='BizType', description='在和ESP交互是使用的bizType'),
      extendInfo?: map[string]string(name='ExtendInfo', description='扩展字段'),
      grayIconUrl?: string(name='GrayIconUrl', description='图标黑白icon'),
      icon?: string(name='Icon', description='图标'),
      leafCodes?: [ 
        {
          associated?: boolean(name='Associated'),
          children?: [ any ](name='Children'),
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          env?: string(name='Env'),
          id?: long(name='Id'),
          level?: int32(name='Level'),
          officialCode?: string(name='OfficialCode'),
          parentCode?: string(name='ParentCode'),
          updateTime?: string(name='UpdateTime'),
        }
      ](name='LeafCodes', description='三级分类Code'),
      materialInfo?: {
        address?: string(name='Address', description='申请人地址'),
        businessLicenceUrl?: string(name='BusinessLicenceUrl', description='营业执照URL'),
        cardNumber?: string(name='CardNumber', description='身份证号, 此字段为复用字段'),
        cnInfoUrl?: string(name='CnInfoUrl', description='盖章的中文名称地址图片 (翻译件)'),
        contactAddress?: string(name='ContactAddress'),
        contactEmail?: string(name='ContactEmail'),
        contactName?: string(name='ContactName'),
        contactPhoneNumber?: string(name='ContactPhoneNumber'),
        contactZipCode?: string(name='ContactZipCode'),
        country?: string(name='Country', description='国家编号'),
        EAddress?: string(name='EAddress', description='申请人地址,国外地址'),
        EName?: string(name='EName', description='申请人的应为名称'),
        idCardNumber?: string(name='IdCardNumber', description='身份证号'),
        idCardUrl?: string(name='IdCardUrl', description='身份证URL'),
        loaKey?: string(name='LoaKey', description='委托书osskey'),
        loaUrl?: string(name='LoaUrl', description='授权书临时URL'),
        name?: string(name='Name', description='申请人姓名'),
        passportUrl?: string(name='PassportUrl', description='护照URL'),
        personalType?: int32(name='PersonalType', description='（1：个人名字，2：个体工商户名称） 个人类型'),
        postCode?: string(name='PostCode', description='邮政编码'),
        province?: string(name='Province', description='申请人地址所在省'),
        reasonFileOssKey?: string(name='ReasonFileOssKey', description='理由书'),
        region?: int32(name='Region', description='申请人地区（大陆、港、澳门、台湾、海外）'),
        reviewFileMap?: map[string]string(name='ReviewFileMap'),
        type?: int32(name='Type', description='申请人类型 自然人 or 法人'),
      }(name='MaterialInfo', description='申请人信息'),
      orderId?: string(name='OrderId', description='订单ID'),
      partnerCode?: string(name='PartnerCode', description='partnerCode'),
      principalKey?: string(name='PrincipalKey', description='主体Key'),
      principalName?: string(name='PrincipalName', description='主体名称 (ALIBABA, ZYHL, ZLSWS, SBQ, HNSBQ, BZZCDL)'),
      produceType?: string(name='ProduceType', description='业务类型 (CREATE, RENEW, CHESAN, TRADE_PRE, TRADE_FINAL, EXPERT_APPLY_CREATE, EXPERT_REVIEW, EXPERT_APPLY_CREATE_VIRTUAL, ENSURE_REG, YIYI_REPLY, CHESAN_REPLY, WUXIAOXUANGAO_REPLY)'),
      rootCode?: {
        associated?: boolean(name='Associated'),
        children?: [ any ](name='Children'),
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        env?: string(name='Env'),
        id?: long(name='Id'),
        level?: int32(name='Level'),
        officialCode?: string(name='OfficialCode'),
        parentCode?: string(name='ParentCode'),
        updateTime?: string(name='UpdateTime'),
      }(name='RootCode', description='一级品类Code'),
      status?: string(name='Status', description='状态 (PAID, COMPLETE_MATERIAL, FAIL_ALIYUN_VERIFY, PASS_ALIYUN_VERIFY, FAIL, WAIT_RE_AUDIT, COMPLAINT, FAIL_NAME, COMPLETE_NAME_UPDATE, SUBMIT_SBJ, SBJ_ACCEPT, SBJ_ACCEPT_NOT, FAIL_XS, PASS_XS, PART_FAIL_SS, FAIL_SS, PASS_SS, DISSENSION, SBJ_REJECT, SUCCESS, MAILED, APPROVE_PASS, APPROVE_FAIL, UN_PAID, WAITING_COMPLETION, PART_PAID, MATERIAL_AUDITING, KEEP_TM, CANCEL_TM, REVIEW_STATUS_WAITING_MATERIAL, REVIEW_STATUS_WAITING_CONFIRM, REVIEW_STATUS_WAITING_SBJ, REVIEW_STATUS_SUBMIT_SBJ, REVIEW_STATUS_RECEIPT_SBJ, REVIEW_STATUS_SBJ_ACCEPT, REVIEW_STATUS_SBJ_ACCEPT_NOT, REVIEW_STATUS_SUPPLEMENT, REVIEW_STATUS_SBJ_AUDIT, REVIEW_STATUS_PASS, REVIEW_STATUS_KEEP, REVIEW_STATUS_PART, REVIEW_STATUS_CLOSE, TM_EAV_PARTNER_UN_COMPLETE, TM_EAV_PARTNER_CONFIRMED)'),
      statusStr?: string(name='StatusStr', description='状态'),
      submitAuditTime?: string(name='SubmitAuditTime', description='提交审核时间'),
      submitAuditTimeStr?: string(name='SubmitAuditTimeStr'),
      submitAuditTimeValue?: long(name='SubmitAuditTimeValue'),
      submitStatus?: string(name='SubmitStatus', description='递交状态 (INIT, WAIT, ING, DONE, FAILED, CHECK)'),
      submitTime?: string(name='SubmitTime', description='递交商标局时间'),
      submitTimeStr?: string(name='SubmitTimeStr'),
      submitTimeValue?: long(name='SubmitTimeValue'),
      submitTimes?: int32(name='SubmitTimes', description='递交次数'),
      trademarkName?: string(name='TrademarkName', description='商标基础信息'),
      trademarkNameType?: int32(name='TrademarkNameType', description='商标基础信息'),
      trademarkNumber?: string(name='TrademarkNumber', description='商标申请号'),
    }(name='TrademarkModel'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTrademarkDetailByApplyNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkDetailByApplyNumberResponseBody(name='body'),
}

async function queryTrademarkDetailByApplyNumberWithOptions(request: QueryTrademarkDetailByApplyNumberRequest, runtime: Util.RuntimeOptions): QueryTrademarkDetailByApplyNumberResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliyunKp)) {
    body['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    body['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.apiType)) {
    body['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.applyNumber)) {
    body['ApplyNumber'] = request.applyNumber;
  }
  if (!Util.isUnset(request.bid)) {
    body['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    body['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    body['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    body['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    body['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.env)) {
    body['Env'] = request.env;
  }
  if (!Util.isUnset(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    body['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    body['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    body['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    body['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    body['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    body['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    body['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    body['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    body['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    body['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    body['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    body['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    body['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    body['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    body['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    body['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    body['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    body['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTrademarkDetailByApplyNumber',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTrademarkDetailByApplyNumber(request: QueryTrademarkDetailByApplyNumberRequest): QueryTrademarkDetailByApplyNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTrademarkDetailByApplyNumberWithOptions(request, runtime);
}

model QueryTrademarkDetailByApplyNumber1Request {
  aliyunKp?: string(name='AliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong'),
  apiType?: string(name='ApiType', description='INNER_API, OPEN_API'),
  applyNumber?: string(name='ApplyNumber'),
  bid?: string(name='Bid'),
  bizType?: string(name='BizType'),
  callerParentId?: long(name='CallerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport'),
  callerType?: string(name='CallerType'),
  clientIp?: string(name='ClientIp'),
  lang?: string(name='Lang'),
  mfaPresent?: boolean(name='MfaPresent'),
  originalRequest?: string(name='OriginalRequest'),
  popAction?: string(name='PopAction'),
  proxyCallerIp?: string(name='ProxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo'),
  requestId?: string(name='RequestId'),
  securityToken?: string(name='SecurityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid'),
  userAccessKeyId?: string(name='UserAccessKeyId'),
  userBid?: string(name='UserBid'),
  userCallerParentId?: long(name='UserCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType'),
  userClientIp?: string(name='UserClientIp'),
  userKp?: string(name='UserKp'),
  userMfaPresent?: boolean(name='UserMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken'),
}

model QueryTrademarkDetailByApplyNumber1ResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: {
    trademarkModel?: {
      bitFlag?: int32(name='BitFlag', description='二进制位'),
      bizId?: string(name='BizId', description='实例ID'),
      bizType?: string(name='BizType', description='在和ESP交互是使用的bizType'),
      extendInfo?: map[string]string(name='ExtendInfo', description='扩展字段'),
      grayIconUrl?: string(name='GrayIconUrl', description='图标黑白icon'),
      icon?: string(name='Icon', description='图标'),
      leafCodes?: [ 
        {
          associated?: boolean(name='Associated'),
          children?: [ any ](name='Children'),
          classificationCode?: string(name='ClassificationCode'),
          classificationName?: string(name='ClassificationName'),
          createTime?: string(name='CreateTime'),
          deleted?: boolean(name='Deleted'),
          env?: string(name='Env'),
          id?: long(name='Id'),
          level?: int32(name='Level'),
          officialCode?: string(name='OfficialCode'),
          parentCode?: string(name='ParentCode'),
          updateTime?: string(name='UpdateTime'),
        }
      ](name='LeafCodes', description='三级分类Code'),
      materialInfo?: {
        address?: string(name='Address', description='申请人地址'),
        businessLicenceUrl?: string(name='BusinessLicenceUrl', description='营业执照URL'),
        cardNumber?: string(name='CardNumber', description='身份证号, 此字段为复用字段'),
        cnInfoUrl?: string(name='CnInfoUrl', description='盖章的中文名称地址图片 (翻译件)'),
        contactAddress?: string(name='ContactAddress'),
        contactEmail?: string(name='ContactEmail'),
        contactName?: string(name='ContactName'),
        contactPhoneNumber?: string(name='ContactPhoneNumber'),
        contactZipCode?: string(name='ContactZipCode'),
        country?: string(name='Country', description='国家编号'),
        EAddress?: string(name='EAddress', description='申请人地址,国外地址'),
        EName?: string(name='EName', description='申请人的应为名称'),
        idCardNumber?: string(name='IdCardNumber', description='身份证号'),
        idCardUrl?: string(name='IdCardUrl', description='身份证URL'),
        loaKey?: string(name='LoaKey', description='委托书osskey'),
        loaUrl?: string(name='LoaUrl', description='授权书临时URL'),
        name?: string(name='Name', description='申请人姓名'),
        passportUrl?: string(name='PassportUrl', description='护照URL'),
        personalType?: int32(name='PersonalType', description='（1：个人名字，2：个体工商户名称） 个人类型'),
        postCode?: string(name='PostCode', description='邮政编码'),
        province?: string(name='Province', description='申请人地址所在省'),
        reasonFileOssKey?: string(name='ReasonFileOssKey', description='理由书'),
        region?: int32(name='Region', description='申请人地区（大陆、港、澳门、台湾、海外）'),
        reviewFileMap?: map[string]string(name='ReviewFileMap'),
        type?: int32(name='Type', description='申请人类型 自然人 or 法人'),
      }(name='MaterialInfo', description='申请人信息'),
      orderId?: string(name='OrderId', description='订单ID'),
      partnerCode?: string(name='PartnerCode', description='partnerCode'),
      principalKey?: string(name='PrincipalKey', description='主体Key'),
      principalName?: string(name='PrincipalName', description='主体名称 (ALIBABA, ZYHL, ZLSWS, SBQ, HNSBQ, BZZCDL)'),
      produceType?: string(name='ProduceType', description='业务类型 (CREATE, RENEW, CHESAN, TRADE_PRE, TRADE_FINAL, EXPERT_APPLY_CREATE, EXPERT_REVIEW, EXPERT_APPLY_CREATE_VIRTUAL, ENSURE_REG, YIYI_REPLY, CHESAN_REPLY, WUXIAOXUANGAO_REPLY)'),
      rootCode?: {
        associated?: boolean(name='Associated'),
        children?: [ any ](name='Children'),
        classificationCode?: string(name='ClassificationCode'),
        classificationName?: string(name='ClassificationName'),
        createTime?: string(name='CreateTime'),
        deleted?: boolean(name='Deleted'),
        env?: string(name='Env'),
        id?: long(name='Id'),
        level?: int32(name='Level'),
        officialCode?: string(name='OfficialCode'),
        parentCode?: string(name='ParentCode'),
        updateTime?: string(name='UpdateTime'),
      }(name='RootCode', description='一级品类Code'),
      status?: string(name='Status', description='状态 (PAID, COMPLETE_MATERIAL, FAIL_ALIYUN_VERIFY, PASS_ALIYUN_VERIFY, FAIL, WAIT_RE_AUDIT, COMPLAINT, FAIL_NAME, COMPLETE_NAME_UPDATE, SUBMIT_SBJ, SBJ_ACCEPT, SBJ_ACCEPT_NOT, FAIL_XS, PASS_XS, PART_FAIL_SS, FAIL_SS, PASS_SS, DISSENSION, SBJ_REJECT, SUCCESS, MAILED, APPROVE_PASS, APPROVE_FAIL, UN_PAID, WAITING_COMPLETION, PART_PAID, MATERIAL_AUDITING, KEEP_TM, CANCEL_TM, REVIEW_STATUS_WAITING_MATERIAL, REVIEW_STATUS_WAITING_CONFIRM, REVIEW_STATUS_WAITING_SBJ, REVIEW_STATUS_SUBMIT_SBJ, REVIEW_STATUS_RECEIPT_SBJ, REVIEW_STATUS_SBJ_ACCEPT, REVIEW_STATUS_SBJ_ACCEPT_NOT, REVIEW_STATUS_SUPPLEMENT, REVIEW_STATUS_SBJ_AUDIT, REVIEW_STATUS_PASS, REVIEW_STATUS_KEEP, REVIEW_STATUS_PART, REVIEW_STATUS_CLOSE, TM_EAV_PARTNER_UN_COMPLETE, TM_EAV_PARTNER_CONFIRMED)'),
      statusStr?: string(name='StatusStr', description='状态'),
      submitAuditTime?: string(name='SubmitAuditTime', description='提交审核时间'),
      submitAuditTimeStr?: string(name='SubmitAuditTimeStr'),
      submitAuditTimeValue?: long(name='SubmitAuditTimeValue'),
      submitStatus?: string(name='SubmitStatus', description='递交状态 (INIT, WAIT, ING, DONE, FAILED, CHECK)'),
      submitTime?: string(name='SubmitTime', description='递交商标局时间'),
      submitTimeStr?: string(name='SubmitTimeStr'),
      submitTimeValue?: long(name='SubmitTimeValue'),
      submitTimes?: int32(name='SubmitTimes', description='递交次数'),
      trademarkName?: string(name='TrademarkName', description='商标基础信息'),
      trademarkNameType?: int32(name='TrademarkNameType', description='商标基础信息'),
      trademarkNumber?: string(name='TrademarkNumber', description='商标申请号'),
    }(name='TrademarkModel'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTrademarkDetailByApplyNumber1Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTrademarkDetailByApplyNumber1ResponseBody(name='body'),
}

async function queryTrademarkDetailByApplyNumber1WithOptions(request: QueryTrademarkDetailByApplyNumber1Request, runtime: Util.RuntimeOptions): QueryTrademarkDetailByApplyNumber1Response {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.aliyunKp)) {
    body['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    body['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.apiType)) {
    body['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.applyNumber)) {
    body['ApplyNumber'] = request.applyNumber;
  }
  if (!Util.isUnset(request.bid)) {
    body['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.bizType)) {
    body['BizType'] = request.bizType;
  }
  if (!Util.isUnset(request.callerParentId)) {
    body['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    body['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    body['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    body['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    body['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    body['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    body['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    body['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    body['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    body['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    body['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    body['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    body['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    body['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    body['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    body['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    body['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    body['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    body['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    body['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    body['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    body['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    body['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTrademarkDetailByApplyNumber1',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTrademarkDetailByApplyNumber1(request: QueryTrademarkDetailByApplyNumber1Request): QueryTrademarkDetailByApplyNumber1Response {
  var runtime = new Util.RuntimeOptions{};
  return queryTrademarkDetailByApplyNumber1WithOptions(request, runtime);
}

model SetRedisValueRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp'),
  aliyunKpLong?: long(name='AliyunKpLong', description='aliyunKpLong'),
  apiType?: string(name='ApiType', description='apiType'),
  bid?: string(name='Bid', description='bid'),
  callerParentId?: long(name='CallerParentId', description='callerParentId'),
  callerSecurityTransport?: boolean(name='CallerSecurityTransport', description='callerSecurityTransport'),
  callerType?: string(name='CallerType', description='callerType'),
  clientIp?: string(name='ClientIp', description='clientIp'),
  key?: string(name='Key', description='key'),
  lang?: string(name='Lang', description='lang'),
  mfaPresent?: boolean(name='MfaPresent', description='mfaPresent'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest'),
  popAction?: string(name='PopAction', description='popAction'),
  proxyCallerIp?: string(name='ProxyCallerIp', description='proxyCallerIp'),
  proxyCallerSecurityTransport?: boolean(name='ProxyCallerSecurityTransport', description='proxyCallerSecurityTransport'),
  proxyTrustTransportInfo?: boolean(name='ProxyTrustTransportInfo', description='proxyTrustTransportInfo'),
  requestId?: string(name='RequestId', description='requestId'),
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stsTokenCallerBid?: long(name='StsTokenCallerBid', description='stsTokenCallerBid'),
  stsTokenCallerUid?: long(name='StsTokenCallerUid', description='stsTokenCallerUid'),
  timeout?: long(name='Timeout', description='timeout'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId'),
  userBid?: string(name='UserBid', description='userBid'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport'),
  userCallerType?: string(name='UserCallerType', description='userCallerType'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  userKp?: string(name='UserKp', description='userKp'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken'),
  value?: string(name='Value', description='value'),
}

model SetRedisValueResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry'),
  appName?: string(name='AppName', description='appName'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage'),
  errorCode?: string(name='ErrorCode', description='errorCode'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode'),
  module?: boolean(name='Module', description='module'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model SetRedisValueResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetRedisValueResponseBody(name='body'),
}

async function setRedisValueWithOptions(request: SetRedisValueRequest, runtime: Util.RuntimeOptions): SetRedisValueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!Util.isUnset(request.aliyunKpLong)) {
    query['AliyunKpLong'] = request.aliyunKpLong;
  }
  if (!Util.isUnset(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!Util.isUnset(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!Util.isUnset(request.callerParentId)) {
    query['CallerParentId'] = request.callerParentId;
  }
  if (!Util.isUnset(request.callerSecurityTransport)) {
    query['CallerSecurityTransport'] = request.callerSecurityTransport;
  }
  if (!Util.isUnset(request.callerType)) {
    query['CallerType'] = request.callerType;
  }
  if (!Util.isUnset(request.clientIp)) {
    query['ClientIp'] = request.clientIp;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.mfaPresent)) {
    query['MfaPresent'] = request.mfaPresent;
  }
  if (!Util.isUnset(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!Util.isUnset(request.popAction)) {
    query['PopAction'] = request.popAction;
  }
  if (!Util.isUnset(request.proxyCallerIp)) {
    query['ProxyCallerIp'] = request.proxyCallerIp;
  }
  if (!Util.isUnset(request.proxyCallerSecurityTransport)) {
    query['ProxyCallerSecurityTransport'] = request.proxyCallerSecurityTransport;
  }
  if (!Util.isUnset(request.proxyTrustTransportInfo)) {
    query['ProxyTrustTransportInfo'] = request.proxyTrustTransportInfo;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stsTokenCallerBid)) {
    query['StsTokenCallerBid'] = request.stsTokenCallerBid;
  }
  if (!Util.isUnset(request.stsTokenCallerUid)) {
    query['StsTokenCallerUid'] = request.stsTokenCallerUid;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!Util.isUnset(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!Util.isUnset(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!Util.isUnset(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!Util.isUnset(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!Util.isUnset(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!Util.isUnset(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!Util.isUnset(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!Util.isUnset(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetRedisValue',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRedisValue(request: SetRedisValueRequest): SetRedisValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRedisValueWithOptions(request, runtime);
}

model UpdateAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode'),
}

model UpdateAgreementStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAgreementStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAgreementStatusResponseBody(name='body'),
}

async function updateAgreementStatusWithOptions(request: UpdateAgreementStatusRequest, runtime: Util.RuntimeOptions): UpdateAgreementStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agreementCode)) {
    query['AgreementCode'] = request.agreementCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAgreementStatus',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateAgreementStatus(request: UpdateAgreementStatusRequest): UpdateAgreementStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAgreementStatusWithOptions(request, runtime);
}

