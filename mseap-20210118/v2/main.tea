/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('mseap', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActivateLicenseRequest {
  bizId?: string(name='BizId', example='P20211118170645000001'),
  bizType?: string(name='BizType', description='This parameter is required.', example='esp.bookkeeping_course'),
  licenseCode?: string(name='LicenseCode', description='This parameter is required.', example='B09YICKLVHNR7ZQR'),
  licenseNo?: string(name='LicenseNo'),
  licensePublisher?: string(name='LicensePublisher', description='This parameter is required.', example='yunMarket'),
}

model ActivateLicenseResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='88EDA98E-6BE7-55DA-9EB6-B6444B882C59'),
}

model ActivateLicenseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActivateLicenseResponseBody(name='body'),
}

/**
 * @param request ActivateLicenseRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ActivateLicenseResponse
 */
async function activateLicenseWithOptions(request: ActivateLicenseRequest, runtime: $RuntimeOptions): ActivateLicenseResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!$isNull(request.licenseNo)) {
    query['LicenseNo'] = request.licenseNo;
  }
  if (!$isNull(request.licensePublisher)) {
    query['LicensePublisher'] = request.licensePublisher;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ActivateLicense',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request ActivateLicenseRequest
 * @return ActivateLicenseResponse
 */
async function activateLicense(request: ActivateLicenseRequest): ActivateLicenseResponse {
  var runtime = new $RuntimeOptions{};
  return activateLicenseWithOptions(request, runtime);
}

model CallbackTaskRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='MPC'),
  bid?: string(name='Bid', description='bid', example='26842'),
  bizCode?: string(name='BizCode'),
  lang?: string(name='Lang', description='lang', example='zh'),
  orderId?: string(name='OrderId', description='orderId', example='1672369049358'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  outTaskId?: string(name='OutTaskId', description='outTaskId', example='1'),
  principalKey?: string(name='PrincipalKey'),
  taskData?: string(name='TaskData', description='taskData', example='{\\\\"result\\\\":\\\\"SUCCESS\\\\",\\\\"message\\\\":\\\\"null\\\\",\\\\"taskId\\\\":\\\\"8cbc97d8-9b2b-4c2f-862f-983ea5dbedc2\\\\"}'),
  taskId?: string(name='TaskId', description='taskId', example='2559492'),
  taskType?: string(name='TaskType', description='taskType', example='PATENT_QUERY'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='1'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model CallbackTaskResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='bohai-web-app'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: boolean(name='Module', example='True'),
  requestId?: string(name='RequestId', description='requestId', example='56B009EB-AAA5-52C9-B05F-AF425E3885E8'),
  success?: boolean(name='Success', description='success', example='True'),
}

model CallbackTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CallbackTaskResponseBody(name='body'),
}

/**
 * @summary 任务回调
 *
 * @param request CallbackTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CallbackTaskResponse
 */
async function callbackTaskWithOptions(request: CallbackTaskRequest, runtime: $RuntimeOptions): CallbackTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.outTaskId)) {
    query['OutTaskId'] = request.outTaskId;
  }
  if (!$isNull(request.principalKey)) {
    query['PrincipalKey'] = request.principalKey;
  }
  if (!$isNull(request.taskData)) {
    query['TaskData'] = request.taskData;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CallbackTask',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 任务回调
 *
 * @param request CallbackTaskRequest
 * @return CallbackTaskResponse
 */
async function callbackTask(request: CallbackTaskRequest): CallbackTaskResponse {
  var runtime = new $RuntimeOptions{};
  return callbackTaskWithOptions(request, runtime);
}

model DescribeAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode', example='10aa40008e081ad7b1fb50bffc3a70b1'),
}

model DescribeAgreementStatusResponseBody = {
  agreementCode?: string(name='AgreementCode', example='10aa40008e081ad7b1fb50bffc3a70b1'),
  requestId?: string(name='RequestId', example='6254E13A-A79F-5786-9C75-7590727342C9'),
  status?: int32(name='Status', example='0'),
  userId?: string(name='UserId', example='1219541161213057'),
}

model DescribeAgreementStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAgreementStatusResponseBody(name='body'),
}

/**
 * @param request DescribeAgreementStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAgreementStatusResponse
 */
async function describeAgreementStatusWithOptions(request: DescribeAgreementStatusRequest, runtime: $RuntimeOptions): DescribeAgreementStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.agreementCode)) {
    query['AgreementCode'] = request.agreementCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DescribeAgreementStatus',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request DescribeAgreementStatusRequest
 * @return DescribeAgreementStatusResponse
 */
async function describeAgreementStatus(request: DescribeAgreementStatusRequest): DescribeAgreementStatusResponse {
  var runtime = new $RuntimeOptions{};
  return describeAgreementStatusWithOptions(request, runtime);
}

model GenerateUploadFilePolicyForPartnerRequest {
  bizType?: string(name='BizType', example='esp.website'),
  fileName?: string(name='FileName', example='2024/06/25/website_partner_third_party_leads_02.csv'),
  fileType?: string(name='FileType', example='website_partner_third_party_leads'),
}

model GenerateUploadFilePolicyForPartnerResponseBody = {
  allowRetry?: boolean(name='AllowRetry', example='False'),
  appName?: string(name='AppName', example='live'),
  dynamicCode?: string(name='DynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', example='The specified parameter is invalid.'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode', example='500'),
  errorMsg?: string(name='ErrorMsg', example='User not authorized to operate on the specified resource.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  module?: {
    accessId?: string(name='AccessId', example='LTAI5tQPEXqDVu7794Bvw2xM'),
    encodedPolicy?: string(name='EncodedPolicy', example='XXXXXXX'),
    expireTime?: long(name='ExpireTime', example='1719112842'),
    fileDir?: string(name='FileDir', example='website_partner_leads/website/xxxxxx/xxxxxx'),
    host?: string(name='Host', example='//xx-xxx-partner.oss-cn-zhangjiakou.aliyuncs.com/'),
    ossUrl?: string(name='OssUrl', example='https://msea-website-partner.oss-cn-zhangjiakou.aliyuncs.com/website_xxxx_party_leads/website/xxxx/xxxx/2024/06/25/website_partner_third_party_leads_01?Expires=1719868413&OSSAccessKeyId=LTAI5tAnyDDDDD&Signature=XXXX'),
    signature?: string(name='Signature', example='qQb34p8lIXcSFtog2y0H08bC0OI='),
  }(name='Module'),
  requestId?: string(name='RequestId', example='6254E13A-A79F-5786-9C75-7590727342C9'),
  success?: boolean(name='Success', example='True'),
}

model GenerateUploadFilePolicyForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateUploadFilePolicyForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴生成上传文件策略
 *
 * @param request GenerateUploadFilePolicyForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GenerateUploadFilePolicyForPartnerResponse
 */
async function generateUploadFilePolicyForPartnerWithOptions(request: GenerateUploadFilePolicyForPartnerRequest, runtime: $RuntimeOptions): GenerateUploadFilePolicyForPartnerResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!$isNull(request.fileType)) {
    query['FileType'] = request.fileType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GenerateUploadFilePolicyForPartner',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴生成上传文件策略
 *
 * @param request GenerateUploadFilePolicyForPartnerRequest
 * @return GenerateUploadFilePolicyForPartnerResponse
 */
async function generateUploadFilePolicyForPartner(request: GenerateUploadFilePolicyForPartnerRequest): GenerateUploadFilePolicyForPartnerResponse {
  var runtime = new $RuntimeOptions{};
  return generateUploadFilePolicyForPartnerWithOptions(request, runtime);
}

model GetNodeByFlowIdRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='MPC'),
  bid?: string(name='Bid', description='bid', example='26842'),
  flowId?: long(name='FlowId', example='180'),
  lang?: string(name='Lang', description='lang', example='en'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model GetNodeByFlowIdResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='gatewayprood'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='200,131'),
  requestId?: string(name='RequestId', description='requestId', example='8F30A673-46F0-5774-9D25-B45A29DB626E'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetNodeByFlowIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeByFlowIdResponseBody(name='body'),
}

/**
 * @summary 获取node节点通过流程id
 *
 * @param request GetNodeByFlowIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeByFlowIdResponse
 */
async function getNodeByFlowIdWithOptions(request: GetNodeByFlowIdRequest, runtime: $RuntimeOptions): GetNodeByFlowIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNodeByFlowId',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取node节点通过流程id
 *
 * @param request GetNodeByFlowIdRequest
 * @return GetNodeByFlowIdResponse
 */
async function getNodeByFlowId(request: GetNodeByFlowIdRequest): GetNodeByFlowIdResponse {
  var runtime = new $RuntimeOptions{};
  return getNodeByFlowIdWithOptions(request, runtime);
}

model GetNodeByTemplateIdRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI'),
  bid?: string(name='Bid', description='bid', example='26842'),
  lang?: string(name='Lang', description='lang', example='zh'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  templateId?: long(name='TemplateId', example='13'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='true'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model GetNodeByTemplateIdResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='qdhxgcagent01'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='zxdfghjklasdfghjkl'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='220,116'),
  requestId?: string(name='RequestId', description='requestId', example='53D045B1-466F-5165-B3BB-42E36F02BA86'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetNodeByTemplateIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNodeByTemplateIdResponseBody(name='body'),
}

/**
 * @summary 获取node节点通过模版id
 *
 * @param request GetNodeByTemplateIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNodeByTemplateIdResponse
 */
async function getNodeByTemplateIdWithOptions(request: GetNodeByTemplateIdRequest, runtime: $RuntimeOptions): GetNodeByTemplateIdResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNodeByTemplateId',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取node节点通过模版id
 *
 * @param request GetNodeByTemplateIdRequest
 * @return GetNodeByTemplateIdResponse
 */
async function getNodeByTemplateId(request: GetNodeByTemplateIdRequest): GetNodeByTemplateIdResponse {
  var runtime = new $RuntimeOptions{};
  return getNodeByTemplateIdWithOptions(request, runtime);
}

model GetPlatformUserInfoForPartnerRequest {
  appId?: string(name='AppId', example='app-0wceagu85ceaaais'),
  platformType?: string(name='PlatformType', example='MP'),
  userId?: string(name='UserId', example='123153124411'),
}

model GetPlatformUserInfoForPartnerResponseBody = {
  encryptedOpenId?: string(name='EncryptedOpenId', example='djisdpfOjofjifojfajaspsdkasdada'),
  encryptedUnionId?: string(name='EncryptedUnionId', example='djisdpfOjofjifojfajaspsdkasdada'),
  errorMsg?: string(name='ErrorMsg', example='11111111111111111111111'),
  requestId?: string(name='RequestId', description='Id of the request', example='0320C9F4-5EDC-5355-9D7E-DF4CF6C2B3BB'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetPlatformUserInfoForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPlatformUserInfoForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴获取用户跨平台信息
 *
 * @param request GetPlatformUserInfoForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPlatformUserInfoForPartnerResponse
 */
async function getPlatformUserInfoForPartnerWithOptions(request: GetPlatformUserInfoForPartnerRequest, runtime: $RuntimeOptions): GetPlatformUserInfoForPartnerResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!$isNull(request.platformType)) {
    query['PlatformType'] = request.platformType;
  }
  if (!$isNull(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPlatformUserInfoForPartner',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴获取用户跨平台信息
 *
 * @param request GetPlatformUserInfoForPartnerRequest
 * @return GetPlatformUserInfoForPartnerResponse
 */
async function getPlatformUserInfoForPartner(request: GetPlatformUserInfoForPartnerRequest): GetPlatformUserInfoForPartnerResponse {
  var runtime = new $RuntimeOptions{};
  return getPlatformUserInfoForPartnerWithOptions(request, runtime);
}

model GetProxyByTypeRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI'),
  bid?: string(name='Bid', description='bid', example='26842'),
  lang?: string(name='Lang', description='lang', example='zh'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  type?: int32(name='Type', description='type', example='2'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='1'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model GetProxyByTypeResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='118.113.245.10:3128'),
  requestId?: string(name='RequestId', description='requestId', example='CEC1731F-0DA9-5E7D-AE53-7E4D76201C48'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetProxyByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProxyByTypeResponseBody(name='body'),
}

/**
 * @summary 获取代理
 *
 * @param request GetProxyByTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProxyByTypeResponse
 */
async function getProxyByTypeWithOptions(request: GetProxyByTypeRequest, runtime: $RuntimeOptions): GetProxyByTypeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetProxyByType',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取代理
 *
 * @param request GetProxyByTypeRequest
 * @return GetProxyByTypeResponse
 */
async function getProxyByType(request: GetProxyByTypeRequest): GetProxyByTypeResponse {
  var runtime = new $RuntimeOptions{};
  return getProxyByTypeWithOptions(request, runtime);
}

model GetRedisValueRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='MPC'),
  bid?: string(name='Bid', description='bid', example='26842'),
  key?: string(name='Key', description='key', example='106.14.34.208'),
  lang?: string(name='Lang', description='lang', example='zh'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  timeout?: long(name='Timeout', description='timeout', example='60'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
  value?: string(name='Value', example='{   \\\\"cust_id\\\\":\\\\"1111111\\\\",   \\\\"cust_name\\\\":\\\\"aa\\\\" }'),
}

model GetRedisValueResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='bohai-web-app'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: eleme-zb'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='zxdfghjklasdfghjkl'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='107,72'),
  requestId?: string(name='RequestId', description='requestId', example='0320C9F4-5EDC-5355-9D7E-DF4CF6C2B3BB'),
  success?: boolean(name='Success', description='success', example='True'),
}

model GetRedisValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRedisValueResponseBody(name='body'),
}

/**
 * @summary 获取redis值
 *
 * @param request GetRedisValueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRedisValueResponse
 */
async function getRedisValueWithOptions(request: GetRedisValueRequest, runtime: $RuntimeOptions): GetRedisValueResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  if (!$isNull(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetRedisValue',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取redis值
 *
 * @param request GetRedisValueRequest
 * @return GetRedisValueResponse
 */
async function getRedisValue(request: GetRedisValueRequest): GetRedisValueResponse {
  var runtime = new $RuntimeOptions{};
  return getRedisValueWithOptions(request, runtime);
}

model GetVariableRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI'),
  bid?: string(name='Bid', description='bid', example='26842'),
  lang?: string(name='Lang', description='lang', example='zh'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  templateId?: long(name='TemplateId', example='17'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model GetVariableResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: eleme-zb-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='207,155'),
  requestId?: string(name='RequestId', description='requestId', example='D28419C9-335E-50A7-BD7D-ACF250A825E8'),
  success?: boolean(name='Success', description='success', example='true'),
}

model GetVariableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVariableResponseBody(name='body'),
}

/**
 * @summary 获取变量
 *
 * @param request GetVariableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetVariableResponse
 */
async function getVariableWithOptions(request: GetVariableRequest, runtime: $RuntimeOptions): GetVariableResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetVariable',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取变量
 *
 * @param request GetVariableRequest
 * @return GetVariableResponse
 */
async function getVariable(request: GetVariableRequest): GetVariableResponse {
  var runtime = new $RuntimeOptions{};
  return getVariableWithOptions(request, runtime);
}

model IdentifyCodeRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI'),
  bid?: string(name='Bid', description='bid', example='26842'),
  data?: string(name='Data', example='{\\\\"engine\\\\": \\\\"MySQL\\\\", \\\\"instanceId\\\\": \\\\"rm-2zes07949gc0febg6\\\\", \\\\"userId\\\\": \\\\"1204765431532768\\\\", \\\\"previousExistConfig\\\\": False, \\\\"engineVersion\\\\": \\\\"8.0\\\\", \\\\"autoResourceOptimize\\\\": 0, \\\\"dasProOn\\\\": False}'),
  label?: string(name='Label', example='1551278'),
  lang?: string(name='Lang', description='lang', example='zh'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  type?: string(name='Type', example='CBWP'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='true'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='true'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model IdentifyCodeResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='baasamlservice'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: lazada-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='1234567890'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', description='module', example='230,94'),
  requestId?: string(name='RequestId', description='requestId', example='8F30A673-46F0-5774-9D25-B45A29DB626E'),
  success?: boolean(name='Success', description='success', example='True'),
}

model IdentifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IdentifyCodeResponseBody(name='body'),
}

/**
 * @summary 识别验证码
 *
 * @param request IdentifyCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return IdentifyCodeResponse
 */
async function identifyCodeWithOptions(request: IdentifyCodeRequest, runtime: $RuntimeOptions): IdentifyCodeResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.data)) {
    query['Data'] = request.data;
  }
  if (!$isNull(request.label)) {
    query['Label'] = request.label;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'IdentifyCode',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 识别验证码
 *
 * @param request IdentifyCodeRequest
 * @return IdentifyCodeResponse
 */
async function identifyCode(request: IdentifyCodeRequest): IdentifyCodeResponse {
  var runtime = new $RuntimeOptions{};
  return identifyCodeWithOptions(request, runtime);
}

model PullRpaModelRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI'),
  bid?: string(name='Bid', description='bid', example='26842'),
  lang?: string(name='Lang', description='lang', example='zh'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  templateId?: long(name='TemplateId', description='templateId', example='17'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model PullRpaModelResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='gatewayprood'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='100008'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='{}'),
  requestId?: string(name='RequestId', description='requestId', example='06055768-6BC0-5FE7-BDFF-BD4D79537035'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PullRpaModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PullRpaModelResponseBody(name='body'),
}

/**
 * @summary 拉取协议变更识别模型
 *
 * @param request PullRpaModelRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PullRpaModelResponse
 */
async function pullRpaModelWithOptions(request: PullRpaModelRequest, runtime: $RuntimeOptions): PullRpaModelResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PullRpaModel',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 拉取协议变更识别模型
 *
 * @param request PullRpaModelRequest
 * @return PullRpaModelResponse
 */
async function pullRpaModel(request: PullRpaModelRequest): PullRpaModelResponse {
  var runtime = new $RuntimeOptions{};
  return pullRpaModelWithOptions(request, runtime);
}

model PullTaskRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='openAPI'),
  bid?: string(name='Bid', description='bid', example='26842'),
  bizCode?: string(name='BizCode'),
  lang?: string(name='Lang', description='lang', example='zh'),
  orderId?: string(name='OrderId', example='1672369049358'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  principalKey?: string(name='PrincipalKey'),
  taskType?: string(name='TaskType', description='taskType', example='PATENT_CHECK'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerSecurityTransport?: boolean(name='UserCallerSecurityTransport', description='userCallerSecurityTransport', example='1'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model PullTaskResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='The specified parameter is invalid.'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: {
    bizCode?: string(name='BizCode'),
    orderId?: string(name='OrderId', example='1649470201045'),
    outTaskId?: string(name='OutTaskId', example='1'),
    principalKey?: string(name='PrincipalKey'),
    taskData?: string(name='TaskData', example='{\\\\"result\\\\":\\\\"SUCCESS\\\\",\\\\"message\\\\":\\\\"null\\\\",\\\\"taskId\\\\":\\\\"d8800bab-88b6-4c60-9e4f-ed38dbbdd9b3\\\\"}'),
    taskId?: string(name='TaskId', example='704614'),
    taskType?: string(name='TaskType', example='PATENT_QUERY'),
  }(name='Module'),
  requestId?: string(name='RequestId', description='requestId', example='9831C9A6-3423-52C2-B0E5-5AE01D92C097'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PullTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PullTaskResponseBody(name='body'),
}

/**
 * @summary RPA拉取任务
 *
 * @param request PullTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PullTaskResponse
 */
async function pullTaskWithOptions(request: PullTaskRequest, runtime: $RuntimeOptions): PullTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.principalKey)) {
    query['PrincipalKey'] = request.principalKey;
  }
  if (!$isNull(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerSecurityTransport)) {
    query['UserCallerSecurityTransport'] = request.userCallerSecurityTransport;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PullTask',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary RPA拉取任务
 *
 * @param request PullTaskRequest
 * @return PullTaskResponse
 */
async function pullTask(request: PullTaskRequest): PullTaskResponse {
  var runtime = new $RuntimeOptions{};
  return pullTaskWithOptions(request, runtime);
}

model PushRpaTaskRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='public'),
  bid?: string(name='Bid', description='bid', example='26842'),
  lang?: string(name='Lang', description='lang', example='zh'),
  modelId?: long(name='ModelId', description='modelId', example='1951'),
  name?: string(name='Name', description='name'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  request?: string(name='Request', description='request', example='{}'),
  status?: int32(name='Status', description='status', example='0'),
  taskId?: long(name='TaskId', description='taskId', example='833812'),
  templateId?: long(name='TemplateId', description='templateId', example='26'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model PushRpaTaskResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='itl-material'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: lazada-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='11111111111111111111111'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='58.23.71.83:3128'),
  requestId?: string(name='RequestId', description='requestId', example='ECE5E7EF-6898-5E24-97A1-B96C73BDE26C'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PushRpaTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushRpaTaskResponseBody(name='body'),
}

/**
 * @summary 推送RPA运行时任务
 *
 * @param request PushRpaTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushRpaTaskResponse
 */
async function pushRpaTaskWithOptions(request: PushRpaTaskRequest, runtime: $RuntimeOptions): PushRpaTaskResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.modelId)) {
    query['ModelId'] = request.modelId;
  }
  if (!$isNull(request.name)) {
    query['Name'] = request.name;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.request)) {
    query['Request'] = request.request;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PushRpaTask',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送RPA运行时任务
 *
 * @param request PushRpaTaskRequest
 * @return PushRpaTaskResponse
 */
async function pushRpaTask(request: PushRpaTaskRequest): PushRpaTaskResponse {
  var runtime = new $RuntimeOptions{};
  return pushRpaTaskWithOptions(request, runtime);
}

model PushRpaTaskDetailRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='MPC'),
  bid?: string(name='Bid', description='bid', example='26842'),
  inputData?: string(name='InputData', description='inputData', example='http://wssq.sbj.cnipa.gov.cn:9080/tmsve/wssqsy_getCayzDl.xhtml'),
  inputHtml?: string(name='InputHtml', description='inputHtml', example='1'),
  inputScreenshot?: string(name='InputScreenshot', description='inputScreenshot', example='1'),
  lang?: string(name='Lang', description='lang', example='zh'),
  modelDetailId?: long(name='ModelDetailId', description='modelDetailId', example='6'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  outputData?: string(name='OutputData', description='outputData'),
  outputHtml?: string(name='OutputHtml', description='outputHtml', example='<div class=\\\\"photobox\\\\" id=\\\\"Layer3\\\\" style=\\\\"visibility: visible'),
  outputScreenshot?: string(name='OutputScreenshot', description='outputScreenshot', example='http://dbu-nap-p-test.oss-cn-beijing.aliyuncs.com/202301/20230110/5782089/1673334129101-d111874e-f181-4d1c-8edc-83e789975329.jpg?Expires=1675926129&OSSAccessKeyId=hObpgEXoca42qH3V&Signature=------'),
  status?: int32(name='Status', description='status', example='1'),
  taskDetailId?: long(name='TaskDetailId', description='taskDetailId', example='1'),
  taskId?: long(name='TaskId', description='taskId', example='5596654'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
}

model PushRpaTaskDetailResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='voldemort-aliyun-com'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='can not find env: vpc-sg-pre'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='200'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg', example='Success. Request Success.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: string(name='Module', example='207,155'),
  requestId?: string(name='RequestId', description='requestId', example='0320C9F4-5EDC-5355-9D7E-DF4CF6C2B3BB'),
  success?: boolean(name='Success', description='success', example='True'),
}

model PushRpaTaskDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushRpaTaskDetailResponseBody(name='body'),
}

/**
 * @summary 推送运行时任务明细
 *
 * @param request PushRpaTaskDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushRpaTaskDetailResponse
 */
async function pushRpaTaskDetailWithOptions(request: PushRpaTaskDetailRequest, runtime: $RuntimeOptions): PushRpaTaskDetailResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.inputData)) {
    query['InputData'] = request.inputData;
  }
  if (!$isNull(request.inputHtml)) {
    query['InputHtml'] = request.inputHtml;
  }
  if (!$isNull(request.inputScreenshot)) {
    query['InputScreenshot'] = request.inputScreenshot;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.modelDetailId)) {
    query['ModelDetailId'] = request.modelDetailId;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.outputData)) {
    query['OutputData'] = request.outputData;
  }
  if (!$isNull(request.outputHtml)) {
    query['OutputHtml'] = request.outputHtml;
  }
  if (!$isNull(request.outputScreenshot)) {
    query['OutputScreenshot'] = request.outputScreenshot;
  }
  if (!$isNull(request.status)) {
    query['Status'] = request.status;
  }
  if (!$isNull(request.taskDetailId)) {
    query['TaskDetailId'] = request.taskDetailId;
  }
  if (!$isNull(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PushRpaTaskDetail',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 推送运行时任务明细
 *
 * @param request PushRpaTaskDetailRequest
 * @return PushRpaTaskDetailResponse
 */
async function pushRpaTaskDetail(request: PushRpaTaskDetailRequest): PushRpaTaskDetailResponse {
  var runtime = new $RuntimeOptions{};
  return pushRpaTaskDetailWithOptions(request, runtime);
}

model SendNotificationForPartnerRequest {
  bizId?: string(name='BizId', example='DMP'),
  channelType?: string(name='ChannelType', example='1'),
  notifyType?: string(name='NotifyType', example='MESSAGE'),
  notifycationEventType?: string(name='NotifycationEventType', example='dmp_website_xxx'),
  paramMap?: map[string]string(name='ParamMap'),
  sendTarget?: string(name='SendTarget', example='12312212312'),
  smartSubChannels?: [ string ](name='SmartSubChannels'),
  trackId?: string(name='TrackId', example='5b29647n-a172-4ccd-ba33-73669896c287'),
}

model SendNotificationForPartnerShrinkRequest {
  bizId?: string(name='BizId', example='DMP'),
  channelType?: string(name='ChannelType', example='1'),
  notifyType?: string(name='NotifyType', example='MESSAGE'),
  notifycationEventType?: string(name='NotifycationEventType', example='dmp_website_xxx'),
  paramMapShrink?: string(name='ParamMap'),
  sendTarget?: string(name='SendTarget', example='12312212312'),
  smartSubChannelsShrink?: string(name='SmartSubChannels'),
  trackId?: string(name='TrackId', example='5b29647n-a172-4ccd-ba33-73669896c287'),
}

model SendNotificationForPartnerResponseBody = {
  errorMsg?: string(name='ErrorMsg', example='11111111111111111111111'),
  msgId?: string(name='MsgId', example='0A011920166449C2FAAE8D179E1704C5'),
  requestId?: string(name='RequestId', example='1940A84F-6D90-5764-9119-6279970C6FF5'),
  success?: boolean(name='Success', example='True'),
}

model SendNotificationForPartnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendNotificationForPartnerResponseBody(name='body'),
}

/**
 * @summary 合作伙伴发送消息通知
 *
 * @param tmpReq SendNotificationForPartnerRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendNotificationForPartnerResponse
 */
async function sendNotificationForPartnerWithOptions(tmpReq: SendNotificationForPartnerRequest, runtime: $RuntimeOptions): SendNotificationForPartnerResponse {
  tmpReq.validate();
  var request = new SendNotificationForPartnerShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.paramMap)) {
    request.paramMapShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.paramMap, 'ParamMap', 'json');
  }
  if (!$isNull(tmpReq.smartSubChannels)) {
    request.smartSubChannelsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.smartSubChannels, 'SmartSubChannels', 'json');
  }
  var query = {};
  if (!$isNull(request.bizId)) {
    query['BizId'] = request.bizId;
  }
  if (!$isNull(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!$isNull(request.notifyType)) {
    query['NotifyType'] = request.notifyType;
  }
  if (!$isNull(request.notifycationEventType)) {
    query['NotifycationEventType'] = request.notifycationEventType;
  }
  if (!$isNull(request.paramMapShrink)) {
    query['ParamMap'] = request.paramMapShrink;
  }
  if (!$isNull(request.sendTarget)) {
    query['SendTarget'] = request.sendTarget;
  }
  if (!$isNull(request.smartSubChannelsShrink)) {
    query['SmartSubChannels'] = request.smartSubChannelsShrink;
  }
  if (!$isNull(request.trackId)) {
    query['TrackId'] = request.trackId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendNotificationForPartner',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 合作伙伴发送消息通知
 *
 * @param request SendNotificationForPartnerRequest
 * @return SendNotificationForPartnerResponse
 */
async function sendNotificationForPartner(request: SendNotificationForPartnerRequest): SendNotificationForPartnerResponse {
  var runtime = new $RuntimeOptions{};
  return sendNotificationForPartnerWithOptions(request, runtime);
}

model SetRedisValueRequest {
  aliyunKp?: string(name='AliyunKp', description='aliyunKp', example='1'),
  apiType?: string(name='ApiType', description='apiType', example='part_config_data'),
  bid?: string(name='Bid', description='bid', example='26842'),
  key?: string(name='Key', example='1684967696495902'),
  lang?: string(name='Lang', description='lang', example='zh'),
  originalRequest?: string(name='OriginalRequest', description='originalRequest', example='1'),
  requestId?: string(name='RequestId', description='requestId', example='F864A883-AD76-53D5-9A24-A6DAD5177697'),
  timeout?: long(name='Timeout', description='timeout', example='5000'),
  userAccessKeyId?: string(name='UserAccessKeyId', description='userAccessKeyId', example='1'),
  userBid?: string(name='UserBid', description='userBid', example='1'),
  userCallerParentId?: long(name='UserCallerParentId', description='userCallerParentId', example='1'),
  userCallerType?: string(name='UserCallerType', description='userCallerType', example='1'),
  userClientIp?: string(name='UserClientIp', description='userClientIp', example='1'),
  userKp?: string(name='UserKp', description='userKp', example='1'),
  userMfaPresent?: boolean(name='UserMfaPresent', description='userMfaPresent', example='1'),
  userSecurityToken?: string(name='UserSecurityToken', description='userSecurityToken', example='1'),
  value?: string(name='Value', example='259200000'),
}

model SetRedisValueResponseBody = {
  allowRetry?: boolean(name='AllowRetry', description='allowRetry', example='False'),
  appName?: string(name='AppName', description='appName', example='cloudquery'),
  dynamicCode?: string(name='DynamicCode', description='dynamicCode', example='1'),
  dynamicMessage?: string(name='DynamicMessage', description='dynamicMessage', example='10.151.12.0/24,100.104.36.0/26,47.102.181.0/24,100.104.52.0/24,47.101.109.0/24,120.55.129.0/24,11.115.103.0/24,47.102.234.0/24'),
  errorCode?: string(name='ErrorCode', description='errorCode', example='0'),
  errorMsg?: string(name='ErrorMsg', description='errorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode', description='httpStatusCode', example='200'),
  module?: boolean(name='Module', description='module', example='71,135'),
  requestId?: string(name='RequestId', description='requestId', example='195BABE2-7105-5C16-ABCE-2D0997CCE2E3'),
  success?: boolean(name='Success', description='success', example='True'),
}

model SetRedisValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetRedisValueResponseBody(name='body'),
}

/**
 * @summary redis设置
 *
 * @param request SetRedisValueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetRedisValueResponse
 */
async function setRedisValueWithOptions(request: SetRedisValueRequest, runtime: $RuntimeOptions): SetRedisValueResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.aliyunKp)) {
    query['AliyunKp'] = request.aliyunKp;
  }
  if (!$isNull(request.apiType)) {
    query['ApiType'] = request.apiType;
  }
  if (!$isNull(request.bid)) {
    query['Bid'] = request.bid;
  }
  if (!$isNull(request.key)) {
    query['Key'] = request.key;
  }
  if (!$isNull(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!$isNull(request.originalRequest)) {
    query['OriginalRequest'] = request.originalRequest;
  }
  if (!$isNull(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!$isNull(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!$isNull(request.userAccessKeyId)) {
    query['UserAccessKeyId'] = request.userAccessKeyId;
  }
  if (!$isNull(request.userBid)) {
    query['UserBid'] = request.userBid;
  }
  if (!$isNull(request.userCallerParentId)) {
    query['UserCallerParentId'] = request.userCallerParentId;
  }
  if (!$isNull(request.userCallerType)) {
    query['UserCallerType'] = request.userCallerType;
  }
  if (!$isNull(request.userClientIp)) {
    query['UserClientIp'] = request.userClientIp;
  }
  if (!$isNull(request.userKp)) {
    query['UserKp'] = request.userKp;
  }
  if (!$isNull(request.userMfaPresent)) {
    query['UserMfaPresent'] = request.userMfaPresent;
  }
  if (!$isNull(request.userSecurityToken)) {
    query['UserSecurityToken'] = request.userSecurityToken;
  }
  if (!$isNull(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetRedisValue',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary redis设置
 *
 * @param request SetRedisValueRequest
 * @return SetRedisValueResponse
 */
async function setRedisValue(request: SetRedisValueRequest): SetRedisValueResponse {
  var runtime = new $RuntimeOptions{};
  return setRedisValueWithOptions(request, runtime);
}

model UpdateAgreementStatusRequest {
  agreementCode?: string(name='AgreementCode', example='10aa40008e081ad7b1fb50bffc3a70b1'),
}

model UpdateAgreementStatusResponseBody = {
  requestId?: string(name='RequestId', example='6BDB1964-A6E9-5946-89A4-523D35645BB6'),
}

model UpdateAgreementStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAgreementStatusResponseBody(name='body'),
}

/**
 * @param request UpdateAgreementStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAgreementStatusResponse
 */
async function updateAgreementStatusWithOptions(request: UpdateAgreementStatusRequest, runtime: $RuntimeOptions): UpdateAgreementStatusResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.agreementCode)) {
    query['AgreementCode'] = request.agreementCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateAgreementStatus',
    version = '2021-01-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateAgreementStatusRequest
 * @return UpdateAgreementStatusResponse
 */
async function updateAgreementStatus(request: UpdateAgreementStatusRequest): UpdateAgreementStatusResponse {
  var runtime = new $RuntimeOptions{};
  return updateAgreementStatusWithOptions(request, runtime);
}

