/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CCC';
  @version = '2020-07-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'ccc.aliyuncs.com',
    'ap-south-1' = 'ccc.aliyuncs.com',
    'ap-southeast-1' = 'ccc.aliyuncs.com',
    'ap-southeast-2' = 'ccc.aliyuncs.com',
    'ap-southeast-3' = 'ccc.aliyuncs.com',
    'ap-southeast-5' = 'ccc.aliyuncs.com',
    'cn-beijing' = 'ccc.aliyuncs.com',
    'cn-chengdu' = 'ccc.aliyuncs.com',
    'cn-hongkong' = 'ccc.aliyuncs.com',
    'cn-huhehaote' = 'ccc.aliyuncs.com',
    'cn-qingdao' = 'ccc.aliyuncs.com',
    'cn-shenzhen' = 'ccc.aliyuncs.com',
    'cn-zhangjiakou' = 'ccc.aliyuncs.com',
    'eu-central-1' = 'ccc.aliyuncs.com',
    'eu-west-1' = 'ccc.aliyuncs.com',
    'me-east-1' = 'ccc.aliyuncs.com',
    'us-east-1' = 'ccc.aliyuncs.com',
    'us-west-1' = 'ccc.aliyuncs.com',
    'cn-hangzhou-finance' = 'ccc.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'ccc.aliyuncs.com',
    'cn-shanghai-finance-1' = 'ccc.aliyuncs.com',
    'cn-north-2-gov-1' = 'ccc.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AbortCampaignRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model AbortCampaignResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7CC6523B-0E51-1B62-8DA5-6A9831CAE315'),
}

model AbortCampaignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbortCampaignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AbortCampaign  AbortCampaignRequest
  * @return AbortCampaignResponse
 */
async function abortCampaign(request: AbortCampaignRequest): AbortCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbortCampaign', 'POST', '/', 'json', false, 'json', request);
}

model AcceptChatRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='chat-65382141036853491', position='Query'),
}

model AcceptChatResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2263B273-AC1B-44EB-BA98-87F2322C6780'),
}

model AcceptChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AcceptChat  AcceptChatRequest
  * @return AcceptChatResponse
 */
async function acceptChat(request: AcceptChatRequest): AcceptChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptChat', 'POST', '/', 'json', false, 'json', request);
}

model AddBlacklistCallTaggingRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId?: string(name='JobId', example='job-6582589278232****', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='1764590****', position='Query'),
}

model AddBlacklistCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='9FBA26B0-462B-4D77-B78F-AF35560DBC71'),
}

model AddBlacklistCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBlacklistCallTaggingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddBlacklistCallTagging  AddBlacklistCallTaggingRequest
  * @return AddBlacklistCallTaggingResponse
 */
async function addBlacklistCallTagging(request: AddBlacklistCallTaggingRequest): AddBlacklistCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBlacklistCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model AddCasesRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='c58b9719-3bc3-441d-a4d3-fc0309ef7066', position='Query'),
  caseList?: [ 
    {
      caller?: string(name='Caller'),
      customVariables?: string(name='CustomVariables'),
      maskedCallee?: string(name='MaskedCallee'),
      phoneNumber?: string(name='PhoneNumber', example='188888****'),
      referenceId?: string(name='ReferenceId', example='01'),
    }
  ](name='CaseList', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model AddCasesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='41298961-CAD7-5270-9378-FFD69F153144'),
}

model AddCasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddCases  AddCasesRequest
  * @return AddCasesResponse
 */
async function addCases(request: AddCasesRequest): AddCasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCases', 'POST', '/', 'json', false, 'json', request);
}

model AddFeedbackRequest {
  feedback?: string(name='Feedback', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  rating?: int32(name='Rating', example='thumbsUp', position='Query'),
  taskId?: string(name='TaskId', example='f780ade8-****-458b-b067-63077946a570', position='Query'),
  taskName?: string(name='TaskName', example='Abstract:fields', position='Query'),
}

model AddFeedbackResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='C81FD1A5-4B99-470A-A527-D80150228784'),
}

model AddFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddFeedbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddFeedback  AddFeedbackRequest
  * @return AddFeedbackResponse
 */
async function addFeedback(request: AddFeedbackRequest): AddFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddFeedback', 'POST', '/', 'json', false, 'json', request);
}

model AddNumbersToSkillGroupRequest {
  instNumberGroupIdList?: string(name='InstNumberGroupIdList', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList?: string(name='NumberList', example='["0103182****","0102387****"]', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model AddNumbersToSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model AddNumbersToSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddNumbersToSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddNumbersToSkillGroup  AddNumbersToSkillGroupRequest
  * @return AddNumbersToSkillGroupResponse
 */
async function addNumbersToSkillGroup(request: AddNumbersToSkillGroupRequest): AddNumbersToSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddNumbersToSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddPersonalNumbersToUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList: string(name='NumberList', description='This parameter is required.', example='["0101234****","0105678****"]', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
}

model AddPersonalNumbersToUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model AddPersonalNumbersToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPersonalNumbersToUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddPersonalNumbersToUser  AddPersonalNumbersToUserRequest
  * @return AddPersonalNumbersToUserResponse
 */
async function addPersonalNumbersToUser(request: AddPersonalNumbersToUserRequest): AddPersonalNumbersToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPersonalNumbersToUser', 'POST', '/', 'json', false, 'json', request);
}

model AddPhoneNumberToSkillGroupsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='0101234****', position='Query'),
  skillGroupIdList: string(name='SkillGroupIdList', description='This parameter is required.', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]', position='Query'),
}

model AddPhoneNumberToSkillGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model AddPhoneNumberToSkillGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPhoneNumberToSkillGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddPhoneNumberToSkillGroups  AddPhoneNumberToSkillGroupsRequest
  * @return AddPhoneNumberToSkillGroupsResponse
 */
async function addPhoneNumberToSkillGroups(request: AddPhoneNumberToSkillGroupsRequest): AddPhoneNumberToSkillGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPhoneNumberToSkillGroups', 'POST', '/', 'json', false, 'json', request);
}

model AddPhoneNumbersRequest {
  contactFlowId?: string(name='ContactFlowId', example='dDMD_0mif4hv', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberGroupId?: string(name='NumberGroupId', example='2cb77c29-5f60-4b90-b21e-9d2ba9833f14', position='Query'),
  numberList?: string(name='NumberList', example='["0101234****", "0105678****"]', position='Query'),
  usage: string(name='Usage', description='This parameter is required.', example='Bidirection', position='Query'),
}

model AddPhoneNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model AddPhoneNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPhoneNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddPhoneNumbers  AddPhoneNumbersRequest
  * @return AddPhoneNumbersResponse
 */
async function addPhoneNumbers(request: AddPhoneNumbersRequest): AddPhoneNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddPhoneNumbers', 'POST', '/', 'json', false, 'json', request);
}

model AddSchemaPropertyRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='b0eb2742-f37e-4c67-82d4-25c651c1xxxx', position='Body'),
  property?: {
    array?: boolean(name='Array', example='false'),
    attributes?: string(name='Attributes'),
    dataType: string(name='DataType', description='This parameter is required.', example='string'),
    description?: string(name='Description', example='-'),
    disabled?: boolean(name='Disabled', example='False'),
    displayName?: string(name='DisplayName', example='name'),
    displayOrder?: int32(name='DisplayOrder', example='10'),
    editorType?: string(name='EditorType', example='textbox'),
    maxLength?: int32(name='MaxLength', example='100'),
    maximum?: double(name='Maximum', example='1'),
    minLength?: int32(name='MinLength', example='1'),
    minimum?: double(name='Minimum', example='1'),
    name: string(name='Name', description='This parameter is required.', example='name'),
    pattern?: string(name='Pattern', example='*'),
    patternErrorMessage?: string(name='PatternErrorMessage'),
    readOnly?: boolean(name='ReadOnly', example='true'),
    required?: boolean(name='Required', example='false'),
  }(name='Property', shrink='json', position='Body'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model AddSchemaPropertyResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BF268B34-09C2-43FD-BAC4-5D31EA633111'),
}

model AddSchemaPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSchemaPropertyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSchemaProperty  AddSchemaPropertyRequest
  * @return AddSchemaPropertyResponse
 */
async function addSchemaProperty(request: AddSchemaPropertyRequest): AddSchemaPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSchemaProperty', 'POST', '/', 'json', true, 'form', request);
}

model AddSkillGroupsToUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillLevelList: string(name='SkillLevelList', description='This parameter is required.', example='[{"skillGroupId":"test1@ccc-test","skillLevel":5},{"skillGroupId":"test2@ccc-test","skillLevel":5}]', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
}

model AddSkillGroupsToUserResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA7F9545-8312-4190-9BD0-63144B3F1ACC'),
}

model AddSkillGroupsToUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSkillGroupsToUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSkillGroupsToUser  AddSkillGroupsToUserRequest
  * @return AddSkillGroupsToUserResponse
 */
async function addSkillGroupsToUser(request: AddSkillGroupsToUserRequest): AddSkillGroupsToUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSkillGroupsToUser', 'POST', '/', 'json', false, 'json', request);
}

model AddTicketTaskRequest {
  assignee: string(name='Assignee', description='This parameter is required.', example='assignee@ccc-test', position='Query'),
  comment: string(name='Comment', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  position?: string(name='Position', example='After', position='Query'),
  taskId: string(name='TaskId', description='This parameter is required.', example='3b8c672f-48f6-45f5-bf41-9d4cb2b4a716', position='Query'),
  ticketId: string(name='TicketId', description='This parameter is required.', example='3d26b90a-c5d2-4b09-8219-********', position='Query'),
}

model AddTicketTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='B06B3244-1B44-481B-90C4-F2F92E59D6B5'),
}

model AddTicketTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTicketTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddTicketTask  AddTicketTaskRequest
  * @return AddTicketTaskResponse
 */
async function addTicketTask(request: AddTicketTaskRequest): AddTicketTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTicketTask', 'POST', '/', 'json', false, 'json', request);
}

model AddUsersToSkillGroupRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='test1@ccc-test', position='Query'),
  userSkillLevelList: string(name='UserSkillLevelList', description='This parameter is required.', example='[{"userId":"agent1@ccc-test","skillLevel":10},{"userId":"agent2@ccc-test","skillLevel":10}]', position='Query'),
}

model AddUsersToSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model AddUsersToSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUsersToSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUsersToSkillGroup  AddUsersToSkillGroupRequest
  * @return AddUsersToSkillGroupResponse
 */
async function addUsersToSkillGroup(request: AddUsersToSkillGroupRequest): AddUsersToSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUsersToSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model AnalyzeConversationRequest {
  contactId?: string(name='ContactId', example='job-10963442671187****', position='Query'),
  fieldListJson?: string(name='FieldListJson', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Query'),
  taskListJson?: string(name='TaskListJson', example='["keywords"]', position='Query'),
}

model AnalyzeConversationResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='9F766284-F103-4298-8EC5-19F9F9BE5522'),
}

model AnalyzeConversationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnalyzeConversationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AnalyzeConversation  AnalyzeConversationRequest
  * @return AnalyzeConversationResponse
 */
async function analyzeConversation(request: AnalyzeConversationRequest): AnalyzeConversationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AnalyzeConversation', 'POST', '/', 'json', false, 'json', request);
}

model AnswerCallRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-65382141036853491', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model AnswerCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='INBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='INBOUND'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          channelVariables?: string(name='ChannelVariables'),
          destination?: string(name='Destination', example='1390501****'),
          index?: long(name='Index'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='103655'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model AnswerCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnswerCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AnswerCall  AnswerCallRequest
  * @return AnswerCallResponse
 */
async function answerCall(request: AnswerCallRequest): AnswerCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AnswerCall', 'POST', '/', 'json', false, 'json', request);
}

model AppendCasesRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='78cf6864-9a22-4ea8-a59d-5adc2d747b0e', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  body?: [ 
    {
      agentId?: string(name='AgentId', example='agent@ccc-test'),
      caller?: string(name='Caller', example='01012345678'),
      customVariables?: string(name='CustomVariables'),
      maskedCallee?: string(name='MaskedCallee', example='071*****801'),
      phoneNumber?: string(name='PhoneNumber', example='188888****'),
      referenceId?: string(name='ReferenceId', example='01'),
    }
  ](name='body', shrink='json', position='Body'),
}

model AppendCasesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E'),
}

model AppendCasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppendCasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AppendCases  AppendCasesRequest
  * @return AppendCasesResponse
 */
async function appendCases(request: AppendCasesRequest): AppendCasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AppendCases', 'POST', '/', 'json', true, 'form', request);
}

model AssignUsersRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ramIdList: string(name='RamIdList', description='This parameter is required.', example='["28036411123456****","29234301123456****"]', position='Query'),
  roleId: string(name='RoleId', description='This parameter is required.', example='Agent@ccc-test', position='Query'),
  skillLevelList?: string(name='SkillLevelList', example='[{"skillGroupId":"skillgroup@ccc-test","skillLevel":5}]', position='Query'),
  workMode: string(name='WorkMode', description='This parameter is required.', example='ON_SITE', position='Query'),
}

model AssignUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='1ca2b084-6f0a-454b-9851-29768a9a5832'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
  workflowId?: string(name='WorkflowId', example='1ca2b084-6f0a-454b-9851-29768a9a5832'),
}

model AssignUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssignUsersResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI AssignUsers is deprecated, please use CCC::2020-07-01::ImportRamUsers instead.  * @param request  the request parameters of AssignUsers  AssignUsersRequest
  * @return AssignUsersResponse
 */
// Deprecated
async function assignUsers(request: AssignUsersRequest): AssignUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignUsers', 'POST', '/', 'json', false, 'json', request);
}

model BargeInCallRequest {
  bargedUserId: string(name='BargedUserId', description='This parameter is required.', example='agent2@ccc-test', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='60', minimum=0, maximum=3600, position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model BargeInCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='BARGE'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='BARGE'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='10'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model BargeInCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BargeInCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BargeInCall  BargeInCallRequest
  * @return BargeInCallResponse
 */
async function bargeInCall(request: BargeInCallRequest): BargeInCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BargeInCall', 'POST', '/', 'json', false, 'json', request);
}

model BlindTransferRequest {
  callPriority?: int32(name='CallPriority', position='Query'),
  contactFlowVariables?: string(name='ContactFlowVariables', position='Query'),
  deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  queuingOverflowThreshold?: long(name='QueuingOverflowThreshold', position='Query'),
  queuingTimeoutSeconds?: long(name='QueuingTimeoutSeconds', position='Query'),
  routingType?: string(name='RoutingType', position='Query'),
  skillGroupId?: string(name='SkillGroupId', position='Query'),
  strategyName?: string(name='StrategyName', position='Query'),
  strategyParams?: string(name='StrategyParams', position='Query'),
  tags?: string(name='Tags', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='60', minimum=3, maximum=120, position='Query'),
  transferee: string(name='Transferee', description='This parameter is required.', example='agent@ccc-test', position='Query'),
  transfereeType?: string(name='TransfereeType', position='Query'),
  transferor?: string(name='Transferor', example='08314325****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model BlindTransferResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='103654'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model BlindTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BlindTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BlindTransfer  BlindTransferRequest
  * @return BlindTransferResponse
 */
async function blindTransfer(request: BlindTransferRequest): BlindTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BlindTransfer', 'POST', '/', 'json', false, 'json', request);
}

model BridgeRtcCallRequest {
  callee: string(name='Callee', description='This parameter is required.', position='Query'),
  caller?: string(name='Caller', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
  serviceProvider?: string(name='ServiceProvider', position='Query'),
  tags?: string(name='Tags', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', minimum=30, maximum=300, position='Query'),
  userId?: string(name='UserId', position='Query'),
  videoEnabled?: boolean(name='VideoEnabled', position='Query'),
}

model BridgeRtcCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    jobId?: string(name='JobId'),
    tokenInfo?: string(name='TokenInfo'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model BridgeRtcCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BridgeRtcCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BridgeRtcCall  BridgeRtcCallRequest
  * @return BridgeRtcCallResponse
 */
async function bridgeRtcCall(request: BridgeRtcCallRequest): BridgeRtcCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BridgeRtcCall', 'POST', '/', 'json', false, 'json', request);
}

model CancelAttendedTransferRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model CancelAttendedTransferResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='CONSULTANT'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='10'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='103656'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model CancelAttendedTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelAttendedTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelAttendedTransfer  CancelAttendedTransferRequest
  * @return CancelAttendedTransferResponse
 */
async function cancelAttendedTransfer(request: CancelAttendedTransferRequest): CancelAttendedTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAttendedTransfer', 'POST', '/', 'json', false, 'json', request);
}

model ChangeVisibilityRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='szpczf', position='Query'),
  invisible?: boolean(name='Invisible', example='true', position='Query'),
  userId?: string(name='UserId', example='sam@szpczf', position='Query'),
}

model ChangeVisibilityResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakCode?: string(name='BreakCode'),
    deviceId?: string(name='DeviceId', example='Yealink SIP-T23G 44.84.203.6'),
    extension?: string(name='Extension', example='8001****'),
    instanceId?: string(name='InstanceId', example='szpczf'),
    jobId?: string(name='JobId', example='job-330557290544431104'),
    outboundScenario?: boolean(name='OutboundScenario', example='False'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId', example='sam@szpczf'),
    userState?: string(name='UserState', example='Ready'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Internal service issue. Detail:.'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='24BE19E8-BF7D-4992-A35E-15EBA874F2E5'),
}

model ChangeVisibilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeVisibilityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeVisibility  ChangeVisibilityRequest
  * @return ChangeVisibilityResponse
 */
async function changeVisibility(request: ChangeVisibilityRequest): ChangeVisibilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeVisibility', 'POST', '/', 'json', false, 'json', request);
}

model ChangeWorkModeRequest {
  deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mobile?: string(name='Mobile', example='1382114****', position='Query'),
  signedSkillGroupIdList?: string(name='SignedSkillGroupIdList', example='["online-1@ccc-test","online-2@ccc-test","online-3@ccc-test","skg-default@ccc-test"]', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
  workMode: string(name='WorkMode', description='This parameter is required.', example='ON_SITE', position='Query'),
}

model ChangeWorkModeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakCode?: string(name='BreakCode', example='Warm-up'),
    deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
    extension?: string(name='Extension', example='8001****'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    jobId?: string(name='JobId'),
    outboundScenario?: boolean(name='OutboundScenario', example='false'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    userState?: string(name='UserState', example='OFFLINE'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='87731ED1-6224-48A5-99E3-6237FF9B1C00'),
}

model ChangeWorkModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeWorkModeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeWorkMode  ChangeWorkModeRequest
  * @return ChangeWorkModeResponse
 */
async function changeWorkMode(request: ChangeWorkModeRequest): ChangeWorkModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeWorkMode', 'POST', '/', 'json', false, 'json', request);
}

model ClaimChatRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='chat-65382141036853491', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model ClaimChatResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    chatContexts?: [ 
      {
        accessChannelId?: string(name='AccessChannelId', example='226****-cbb6-****-8fea-1e71baf7bfa7'),
        accessChannelName?: string(name='AccessChannelName'),
        accessChannelType?: string(name='AccessChannelType', example='Web'),
        beingAssigned?: boolean(name='BeingAssigned', example='true'),
        callVariables?: string(name='CallVariables'),
        chatType?: string(name='ChatType', example='INBOUND'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        jobId?: string(name='JobId', example='chat-65382141036853491'),
      }
    ](name='ChatContexts'),
    contextId?: long(name='ContextId', example='123456789'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='CCC-169.254.165.2-browser125.0.0-bs48b41903450e6c8'),
      deviceState?: string(name='DeviceState', example='ONLINE'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='chat-65382141036853491'),
      mobile?: string(name='Mobile', example='18******102'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='false'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='userId@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E'),
}

model ClaimChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ClaimChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ClaimChat  ClaimChatRequest
  * @return ClaimChatResponse
 */
async function claimChat(request: ClaimChatRequest): ClaimChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClaimChat', 'POST', '/', 'json', false, 'json', request);
}

model CoachCallRequest {
  coachedUserId: string(name='CoachedUserId', description='This parameter is required.', example='coached-agent@ccc-test', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-65382141036853491', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='30', minimum=0, maximum=3600, position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model CoachCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='COACH'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='COACH'),
          channelFlags?: string(name='ChannelFlags', example='COACHING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      deviceState?: string(name='DeviceState', example='UNREGISTERED'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956370'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model CoachCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CoachCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CoachCall  CoachCallRequest
  * @return CoachCallResponse
 */
async function coachCall(request: CoachCallRequest): CoachCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CoachCall', 'POST', '/', 'json', false, 'json', request);
}

model CommitContactFlowRequest {
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='7d706489-d06d-4a92-8666-8c9dba2c5cb1', position='Query'),
  definition: string(name='Definition', description='This parameter is required.', position='Query'),
  description: string(name='Description', description='This parameter is required.', example='1', position='Query'),
  draftId: string(name='DraftId', description='This parameter is required.', example='b28f74ca-5846-4496-8bbd-34fb1750798c', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model CommitContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='937617D5-01E9-5A39-B52D-15D5C143260C'),
}

model CommitContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CommitContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CommitContactFlow  CommitContactFlowRequest
  * @return CommitContactFlowResponse
 */
async function commitContactFlow(request: CommitContactFlowRequest): CommitContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CommitContactFlow', 'POST', '/', 'json', false, 'json', request);
}

model CompleteAttendedTransferRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model CompleteAttendedTransferResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='10'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='103652'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-65382141036853491'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model CompleteAttendedTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CompleteAttendedTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CompleteAttendedTransfer  CompleteAttendedTransferRequest
  * @return CompleteAttendedTransferResponse
 */
async function completeAttendedTransfer(request: CompleteAttendedTransferRequest): CompleteAttendedTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CompleteAttendedTransfer', 'POST', '/', 'json', false, 'json', request);
}

model CreateAudioFileRequest {
  audioFileName: string(name='AudioFileName', description='This parameter is required.', example='test-file.wav', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ossFileKey: string(name='OssFileKey', description='This parameter is required.', example='ccc-test/test-file.wav', position='Query'),
  usage?: string(name='Usage', position='Query'),
}

model CreateAudioFileResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='2301b83f-1f9f-491e-9f97-2f832ed92f0b'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='94E29B9B-DBC6-5951-B3DD-C85C1BDF20ED'),
}

model CreateAudioFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAudioFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAudioFile  CreateAudioFileRequest
  * @return CreateAudioFileResponse
 */
async function createAudioFile(request: CreateAudioFileRequest): CreateAudioFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAudioFile', 'POST', '/', 'json', false, 'json', request);
}

model CreateCallTagsRequest {
  callTagNameList: string(name='CallTagNameList', description='This parameter is required.', example='["TagA","TagB"]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model CreateCallTagsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      item?: string(name='Item', example='TagC'),
      reason?: string(name='Reason', example='CALL_TAG_NAME_DUPLICATED'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model CreateCallTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCallTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCallTags  CreateCallTagsRequest
  * @return CreateCallTagsResponse
 */
async function createCallTags(request: CreateCallTagsRequest): CreateCallTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCallTags', 'POST', '/', 'json', false, 'json', request);
}

model CreateCampaignRequest {
  callableTime: string(name='CallableTime', description='This parameter is required.', example='[{"beginTime":"00:00:00","endTime":"23:00:00" }]', position='Query'),
  caseFileKey?: string(name='CaseFileKey', example='ccc-test/namelist.csv', position='Query'),
  caseList?: [ 
    {
      customVariables?: string(name='CustomVariables'),
      phoneNumber?: string(name='PhoneNumber', example='1888888888'),
      referenceId?: string(name='ReferenceId', example='01'),
    }
  ](name='CaseList', shrink='json', position='Query'),
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='c1f2bc75-422e-43c7-9c9d9d95633a', position='Query'),
  endTime: string(name='EndTime', description='This parameter is required.', example='1634313600000', position='Query'),
  executingUntilTimeout?: boolean(name='ExecutingUntilTimeout', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  maxAttemptCount: long(name='MaxAttemptCount', description='This parameter is required.', example='1', position='Query'),
  minAttemptInterval: long(name='MinAttemptInterval', description='This parameter is required.', example='1', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='test-campaign', position='Query'),
  queueId: string(name='QueueId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
  simulation?: boolean(name='Simulation', position='Query'),
  simulationParameters?: string(name='SimulationParameters', position='Query'),
  startTime: string(name='StartTime', description='This parameter is required.', example='1634140800000', position='Query'),
  strategyParameters: string(name='StrategyParameters', description='This parameter is required.', example='{"ratio":1}', position='Query'),
  strategyType: string(name='StrategyType', description='This parameter is required.', example='PACING', position='Query'),
}

model CreateCampaignResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='c58b9719-3bc3-441d-a4d3-fc0309ef7066'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7CC6523B-0E51-1B62-8DA5-6A9831CAE315'),
}

model CreateCampaignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCampaignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCampaign  CreateCampaignRequest
  * @return CreateCampaignResponse
 */
async function createCampaign(request: CreateCampaignRequest): CreateCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCampaign', 'POST', '/', 'json', false, 'json', request);
}

model CreateContactFlowRequest {
  definition: string(name='Definition', description='This parameter is required.', position='Query'),
  description: string(name='Description', description='This parameter is required.', example='1.0', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='MAIN_FLOW', position='Query'),
}

model CreateContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='78128960-bb00-4ddc-8e82-923a8c5bd22d'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2778FA12-EDD6-42AA-9B15-AF855072E5E5'),
}

model CreateContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateContactFlow  CreateContactFlowRequest
  * @return CreateContactFlowResponse
 */
async function createContactFlow(request: CreateContactFlowRequest): CreateContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateContactFlow', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomCallTaggingRequest {
  customNumberList: string(name='CustomNumberList', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model CreateCustomCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      item?: string(name='Item', example='1312121****'),
      reason?: string(name='Reason', example='CUSTOM_NUMBER_DUPLICATED'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model CreateCustomCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomCallTaggingResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI CreateCustomCallTagging is deprecated, please use CCC::2020-07-01::CreateCustomCallTaggings instead.  * @param request  the request parameters of CreateCustomCallTagging  CreateCustomCallTaggingRequest
  * @return CreateCustomCallTaggingResponse
 */
// Deprecated
async function createCustomCallTagging(request: CreateCustomCallTaggingRequest): CreateCustomCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  adminRamIdList: string(name='AdminRamIdList', description='This parameter is required.', example='["24861380681070****","105980354482****"]', position='Query'),
  description?: string(name='Description', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='ccc-test', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  numberList: string(name='NumberList', description='This parameter is required.', example='["0830011xxxx", "0830312xxxx"]', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='75c1346c-1dc2-4ed8-973f-edf8b1e5fe77'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2778FA12-EDD6-42AA-9B15-AF855072E5E5'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateSchemaRequest {
  description?: string(name='Description', example='-', position='Body'),
  id?: string(name='Id', description='schema id', example='profile', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='b0eb2742-f37e-4c67-82d4-25c651c1c450', position='Body'),
  properties?: [ 
    {
      array?: boolean(name='Array', example='false'),
      attributes?: string(name='Attributes', example='{\\"Clusters\\": {\\"Description\\": \\"The list of clusters.\\"}, \\"ClusterIds\\": {\\"Description\\": \\"The list of cluster IDs.\\"}}'),
      dataType: string(name='DataType', description='This parameter is required.', example='string'),
      description?: string(name='Description', example='-'),
      disabled?: boolean(name='Disabled', example='false'),
      displayName?: string(name='DisplayName'),
      displayOrder?: int32(name='DisplayOrder', example='2'),
      editorType?: string(name='EditorType', example='textbox'),
      maxLength?: int32(name='MaxLength', example='100'),
      maximum?: double(name='Maximum', example='1'),
      minLength?: int32(name='MinLength', example='1'),
      minimum?: double(name='Minimum', example='1'),
      name: string(name='Name', description='This parameter is required.', example='name'),
      pattern?: string(name='Pattern', example='*'),
      patternErrorMessage?: string(name='PatternErrorMessage'),
      readOnly?: boolean(name='ReadOnly', example='true'),
      required?: boolean(name='Required', example='false'),
    }
  ](name='Properties', shrink='json', position='Body'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23', position='Body'),
}

model CreateSchemaResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='1ca2b084-6f0a-454b-9851-29768a9a5832'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='9F766284-F103-4298-8EC5-19F9F9BE5522'),
}

model CreateSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSchemaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSchema  CreateSchemaRequest
  * @return CreateSchemaResponse
 */
async function createSchema(request: CreateSchemaRequest): CreateSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSchema', 'POST', '/', 'json', true, 'form', request);
}

model CreateSkillGroupRequest {
  description?: string(name='Description', position='Query'),
  displayName: string(name='DisplayName', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  name: string(name='Name', description='This parameter is required.', example='skillgroup', position='Query'),
}

model CreateSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    description?: string(name='Description'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    mediaType?: string(name='MediaType'),
    name?: string(name='Name', example='skillgroup'),
    skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model CreateSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSkillGroup  CreateSkillGroupRequest
  * @return CreateSkillGroupResponse
 */
async function createSkillGroup(request: CreateSkillGroupRequest): CreateSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateTicketRequest {
  contactId?: string(name='ContactId', example='job-38860977107324****', position='Query'),
  context?: string(name='Context', position='Query'),
  customerId?: string(name='CustomerId', example='51e155ce-3747-4f21-b402-13c69597b920', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  source?: string(name='Source', example='CHAT', position='Query'),
  templateId?: string(name='TemplateId', example='e9e4c76c-948d-4a6e-9ce2-9da0f5967a73', position='Query'),
  title?: string(name='Title', position='Query'),
}

model CreateTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='3d26b90a-c5d2-4b09-8219-60cda1******'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A450574A-337F-43E2-BC59-9C6594C994C6'),
}

model CreateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTicket  CreateTicketRequest
  * @return CreateTicketResponse
 */
async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTicket', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  avatarUrl?: string(name='AvatarUrl', position='Query'),
  displayId?: string(name='DisplayId', example='1001', position='Query'),
  displayName: string(name='DisplayName', description='This parameter is required.', maxLength=500, position='Query'),
  email: string(name='Email', description='This parameter is required.', example='username@example.com', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  loginName: string(name='LoginName', description='This parameter is required.', example='agent', position='Query'),
  mobile?: string(name='Mobile', example='1382114****', position='Query'),
  nickname?: string(name='Nickname', position='Query'),
  resetPassword?: boolean(name='ResetPassword', example='false', position='Query'),
  roleId: string(name='RoleId', description='This parameter is required.', example='Agent@ccc-test', position='Query'),
  skillLevelList?: string(name='SkillLevelList', example='[{"skillGroupId":"skillgroup1@ccc-test","skillLevel":1},{"skillGroupId":"skillgroup2@ccc-test","skillLevel":10}]', position='Query'),
  workMode?: string(name='WorkMode', example='ON_SITE', position='Query'),
}

model CreateUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    avatarUrl?: string(name='AvatarUrl'),
    displayName?: string(name='DisplayName'),
    email?: string(name='Email', example='username@example.com'),
    extension?: string(name='Extension', example='8032****'),
    loginName?: string(name='LoginName', example='agent'),
    mobile?: string(name='Mobile', example='1382114****'),
    nickname?: string(name='Nickname'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model CreateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUser  CreateUserRequest
  * @return CreateUserResponse
 */
async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAudioFileRequest {
  audioResourceId: string(name='AudioResourceId', description='This parameter is required.', example='d5cd7a94-3b6a-47d2-b7fd-0b1cd839bf77', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model DeleteAudioFileResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='FB77821C-912F-57FF-8834-6336A6479093'),
}

model DeleteAudioFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAudioFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAudioFile  DeleteAudioFileRequest
  * @return DeleteAudioFileResponse
 */
async function deleteAudioFile(request: DeleteAudioFileRequest): DeleteAudioFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAudioFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCallTagRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  tagName: string(name='TagName', description='This parameter is required.', example='TagA', position='Query'),
}

model DeleteCallTagResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model DeleteCallTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCallTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCallTag  DeleteCallTagRequest
  * @return DeleteCallTagResponse
 */
async function deleteCallTag(request: DeleteCallTagRequest): DeleteCallTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCallTag', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactFlowRequest {
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='0f87c997-b0c1-41d4-9e9e-1b791de6ad1f', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model DeleteContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='07511949-6DC4-5D0B-8FA8-FF8FA29B4217'),
}

model DeleteContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteContactFlow  DeleteContactFlowRequest
  * @return DeleteContactFlowResponse
 */
async function deleteContactFlow(request: DeleteContactFlowRequest): DeleteContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContactFlow', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomCallTaggingRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='1312121****', position='Query'),
}

model DeleteCustomCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model DeleteCustomCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomCallTaggingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomCallTagging  DeleteCustomCallTaggingRequest
  * @return DeleteCustomCallTaggingResponse
 */
async function deleteCustomCallTagging(request: DeleteCustomCallTaggingRequest): DeleteCustomCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDocumentRequest {
  documentId: string(name='DocumentId', description='This parameter is required.', example='xxx', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='d278629c-c687-4aa3-b044-4fe9b012****', position='Body'),
  requestId?: string(name='RequestId', example='DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model DeleteDocumentResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='8707EB29-BAED-4302-B999-40BA61877437'),
}

model DeleteDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDocument  DeleteDocumentRequest
  * @return DeleteDocumentResponse
 */
async function deleteDocument(request: DeleteDocumentRequest): DeleteDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDocument', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDocumentsRequest {
  documentIds?: [ string ](name='DocumentIds', shrink='json', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Body'),
  requestId?: string(name='RequestId', example='0630E5DF-CEB0-445B-8626-D5C7481181C3', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model DeleteDocumentsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='A450574A-337F-43E2-BC59-9C6594C994C6'),
}

model DeleteDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDocumentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDocuments  DeleteDocumentsRequest
  * @return DeleteDocumentsResponse
 */
async function deleteDocuments(request: DeleteDocumentsRequest): DeleteDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDocuments', 'POST', '/', 'json', true, 'form', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model DeleteInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='b7feb007-994a-497f-8934-2f0c6f89867c'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSchemaRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Body'),
  requestId?: string(name='RequestId', example='0630E5DF-CEB0-445B-8626-D5C7481181C3', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model DeleteSchemaResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='678F7002-CA01-4ABF-A112-585AFBDF3A3B'),
}

model DeleteSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSchemaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSchema  DeleteSchemaRequest
  * @return DeleteSchemaResponse
 */
async function deleteSchema(request: DeleteSchemaRequest): DeleteSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchema', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSchemaPropertyRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Body'),
  propertyName: string(name='PropertyName', description='This parameter is required.', example='name', position='Body'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model DeleteSchemaPropertyResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='User 244715989906081477 does not exist in instance worldfirst01.'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model DeleteSchemaPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSchemaPropertyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSchemaProperty  DeleteSchemaPropertyRequest
  * @return DeleteSchemaPropertyResponse
 */
async function deleteSchemaProperty(request: DeleteSchemaPropertyRequest): DeleteSchemaPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchemaProperty', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSkillGroupRequest {
  force?: boolean(name='Force', example='true', minimum=1, maximum=200, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model DeleteSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model DeleteSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSkillGroup  DeleteSkillGroupRequest
  * @return DeleteSkillGroupResponse
 */
async function deleteSkillGroup(request: DeleteSkillGroupRequest): DeleteSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTicketRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId?: string(name='TicketId', example='3d26b90a-c5d2-4b09-8219-********', position='Query'),
}

model DeleteTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='2263B273-AC1B-44EB-BA98-87F2322C6780'),
}

model DeleteTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTicket  DeleteTicketRequest
  * @return DeleteTicketResponse
 */
async function deleteTicket(request: DeleteTicketRequest): DeleteTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTicket', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTicketTemplateRequest {
  instanceId?: string(name='InstanceId', example='ef1e71e9-ae9d-487c-96ad-9181d85cf802', position='Query'),
  templateId?: string(name='TemplateId', example='**43c2671b-8939-4223-***-6bd187905cc8_1717664210492', position='Query'),
}

model DeleteTicketTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='01B12EE4-6AF2-4730-8B78-EC15F4E5C025'),
}

model DeleteTicketTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTicketTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTicketTemplate  DeleteTicketTemplateRequest
  * @return DeleteTicketTemplateResponse
 */
async function deleteTicketTemplate(request: DeleteTicketTemplateRequest): DeleteTicketTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTicketTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DisableSchemaPropertyRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ef1e71e9-ae9d-487c-96ad-9181d85cf802', position='Body'),
  propertyName: string(name='PropertyName', description='This parameter is required.', example='name', position='Body'),
  requestId?: string(name='RequestId', example='2263B273-AC1B-44EB-BA98-87F2322C6780', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model DisableSchemaPropertyResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='User 244715989906081477 does not exist in instance worldfirst01.'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='9FBA26B0-462B-4D77-B78F-AF35560DBC71'),
}

model DisableSchemaPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableSchemaPropertyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableSchemaProperty  DisableSchemaPropertyRequest
  * @return DisableSchemaPropertyResponse
 */
async function disableSchemaProperty(request: DisableSchemaPropertyRequest): DisableSchemaPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableSchemaProperty', 'POST', '/', 'json', true, 'form', request);
}

model DisableTicketTemplateRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  templateId?: string(name='TemplateId', example='43c2671b-8939-4223-86d0-6bd187905cc8_1717664210492', position='Query'),
}

model DisableTicketTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model DisableTicketTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableTicketTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableTicketTemplate  DisableTicketTemplateRequest
  * @return DisableTicketTemplateResponse
 */
async function disableTicketTemplate(request: DisableTicketTemplateRequest): DisableTicketTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableTicketTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DiscardEditingContactFlowRequest {
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='3ff4e021-fd63-4572-ad8c-10ed69972965', position='Query'),
  draftId: string(name='DraftId', description='This parameter is required.', example='0aa493d6-58eb-4290-9ba2-e1c2c615b46b', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model DiscardEditingContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='CB72B537-B531-598F-9617-A636FB8040C0'),
}

model DiscardEditingContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DiscardEditingContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DiscardEditingContactFlow  DiscardEditingContactFlowRequest
  * @return DiscardEditingContactFlowResponse
 */
async function discardEditingContactFlow(request: DiscardEditingContactFlowRequest): DiscardEditingContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DiscardEditingContactFlow', 'POST', '/', 'json', false, 'json', request);
}

model EnableSchemaPropertyRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Body'),
  propertyName: string(name='PropertyName', description='This parameter is required.', example='name', position='Body'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model EnableSchemaPropertyResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='The operation is not allowed. User state (READY) does not meet expectations (OFFLINE).'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='2778FA12-EDD6-42AA-9B15-AF855072E5E5'),
}

model EnableSchemaPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableSchemaPropertyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableSchemaProperty  EnableSchemaPropertyRequest
  * @return EnableSchemaPropertyResponse
 */
async function enableSchemaProperty(request: EnableSchemaPropertyRequest): EnableSchemaPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSchemaProperty', 'POST', '/', 'json', true, 'form', request);
}

model EnableTicketTemplateRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  templateId?: string(name='TemplateId', example='43c2671b-8939-4223-86d0-6bd187905cc8_1717664210492', position='Query'),
}

model EnableTicketTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model EnableTicketTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableTicketTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableTicketTemplate  EnableTicketTemplateRequest
  * @return EnableTicketTemplateResponse
 */
async function enableTicketTemplate(request: EnableTicketTemplateRequest): EnableTicketTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableTicketTemplate', 'POST', '/', 'json', false, 'json', request);
}

model EndConferenceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model EndConferenceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelId?: string(name='ChannelId', example='ch:user:131888****->8001****:1609225718294:job-65700074013925376'),
          channelState?: string(name='ChannelState', example='CREATED'),
          destination?: string(name='Destination', example='8001****'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='103655'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      deviceState?: string(name='DeviceState', example='UNREGISTERED'),
      extension?: string(name='Extension', example='8032****'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='0630E5DF-CEB0-445B-8626-D5C7481181C3'),
}

model EndConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EndConferenceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EndConference  EndConferenceRequest
  * @return EndConferenceResponse
 */
async function endConference(request: EndConferenceRequest): EndConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EndConference', 'POST', '/', 'json', false, 'json', request);
}

model ExportContactFlowRequest {
  flowId: string(name='FlowId', description='This parameter is required.', example='lc-uf61xdtm0mf73k', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb3xxxx', position='Body'),
  requestId?: string(name='RequestId', example='AF9834D8-6D09-4A1B-BADB-B019D9D444C8', position='Body'),
}

model ExportContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  flowPackageData?: string(name='FlowPackageData', example='{}'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE'),
}

model ExportContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportContactFlow  ExportContactFlowRequest
  * @return ExportContactFlowResponse
 */
async function exportContactFlow(request: ExportContactFlowRequest): ExportContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportContactFlow', 'POST', '/', 'json', true, 'form', request);
}

model ExportCustomCallTaggingRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ExportCustomCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='http://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-test/tagging.xlsx ?Expires=1610910578&amp;OSSAccessKeyId=****&amp;Signature=****'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ExportCustomCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCustomCallTaggingResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ExportCustomCallTagging is deprecated, please use CCC::2020-07-01::ExportCustomCallTaggings instead.  * @param request  the request parameters of ExportCustomCallTagging  ExportCustomCallTaggingRequest
  * @return ExportCustomCallTaggingResponse
 */
// Deprecated
async function exportCustomCallTagging(request: ExportCustomCallTaggingRequest): ExportCustomCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportCustomCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model ExportDoNotCallNumbersRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  scope?: string(name='Scope', example='INSTANCE', position='Query'),
  searchPattern?: string(name='SearchPattern', example='RemarkA', position='Query'),
}

model ExportDoNotCallNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='https://****.oss-cn-shanghai.aliyuncs.com/ccc-test/blacklist.xlsx?Expires=3294624578&OSSAccessKeyId=****&Signature=****'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ExportDoNotCallNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportDoNotCallNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportDoNotCallNumbers  ExportDoNotCallNumbersRequest
  * @return ExportDoNotCallNumbersResponse
 */
async function exportDoNotCallNumbers(request: ExportDoNotCallNumbersRequest): ExportDoNotCallNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportDoNotCallNumbers', 'POST', '/', 'json', false, 'json', request);
}

model FinishTicketTaskRequest {
  comment: string(name='Comment', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  taskId?: string(name='TaskId', example='b52a34dc-f514-4600-9c39-3cf657167c97', position='Query'),
  ticketId?: string(name='TicketId', example='f2c6722b-cd13-442d-bf10-22a07c70d6d5', position='Query'),
}

model FinishTicketTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model FinishTicketTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FinishTicketTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FinishTicketTask  FinishTicketTaskRequest
  * @return FinishTicketTaskResponse
 */
async function finishTicketTask(request: FinishTicketTaskRequest): FinishTicketTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FinishTicketTask', 'POST', '/', 'json', false, 'json', request);
}

model GetAccessChannelOfStagingRequest {
  searchPattern?: string(name='SearchPattern', position='Query'),
}

model GetAccessChannelOfStagingResponseBody = {
  code?: string(name='Code'),
  data?: {
    token?: string(name='Token'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetAccessChannelOfStagingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccessChannelOfStagingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccessChannelOfStaging  GetAccessChannelOfStagingRequest
  * @return GetAccessChannelOfStagingResponse
 */
async function getAccessChannelOfStaging(request: GetAccessChannelOfStagingRequest): GetAccessChannelOfStagingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccessChannelOfStaging', 'GET', '/', 'json', false, 'json', request);
}

model GetAudioFileRequest {
  audioResourceId: string(name='AudioResourceId', description='This parameter is required.', example='c1a06b46-302a-4c6e-928b-a43c0df485cf', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetAudioFileResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    audioFileName?: string(name='AudioFileName', example='test-file.wav'),
    audioResourceId?: string(name='AudioResourceId', example='c1a06b46-302a-4c6e-928b-a43c0df485cf'),
    createdTime?: string(name='CreatedTime', example='2021-07-14 10:48:43.0'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    name?: string(name='Name'),
    ossFileKey?: string(name='OssFileKey', example='ccc-test/test-file.wav'),
    updatedTime?: string(name='UpdatedTime', example='2021-07-14 10:48:43.0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEE26562-D921-5CB2-AE49-E4C45A42D432'),
}

model GetAudioFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAudioFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAudioFile  GetAudioFileRequest
  * @return GetAudioFileResponse
 */
async function getAudioFile(request: GetAudioFileRequest): GetAudioFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAudioFile', 'POST', '/', 'json', false, 'json', request);
}

model GetAudioFileDownloadUrlRequest {
  audioResourceId: string(name='AudioResourceId', description='This parameter is required.', example='acc300c4-75c9-41ba-ba5e-2a365c96c248', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetAudioFileDownloadUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='https://****.oss-cn-shanghai.aliyuncs.com/ccc-test/****.wav?Expires=1656472158&OSSAccessKeyId=****&Signature=****'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model GetAudioFileDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAudioFileDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAudioFileDownloadUrl  GetAudioFileDownloadUrlRequest
  * @return GetAudioFileDownloadUrlResponse
 */
async function getAudioFileDownloadUrl(request: GetAudioFileDownloadUrlRequest): GetAudioFileDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAudioFileDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetAudioFileUploadParametersRequest {
  audioFileName: string(name='AudioFileName', description='This parameter is required.', example='test-file.wav', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetAudioFileUploadParametersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='****'),
    expireTime?: int32(name='ExpireTime', example='1647313420'),
    filePath?: string(name='FilePath', example='ccc-test/test-file.wav'),
    host?: string(name='Host', example='https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAyMi0wNi0yOVQwMDoyOTowMC42NTRaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwiYXVkaW8vMTU3NzI0NzExNTQ5MDQwMS9seS1vbmxpbmUvMjAyMjA2MjkwNzI5MDAvIl1d****'),
    signature?: string(name='Signature', example='HIyClras8IcVlbTV7RIJWJbU****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='C81FD1A5-4B99-470A-A527-D80150228784'),
}

model GetAudioFileUploadParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAudioFileUploadParametersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAudioFileUploadParameters  GetAudioFileUploadParametersRequest
  * @return GetAudioFileUploadParametersResponse
 */
async function getAudioFileUploadParameters(request: GetAudioFileUploadParametersRequest): GetAudioFileUploadParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAudioFileUploadParameters', 'POST', '/', 'json', false, 'json', request);
}

model GetCallDetailRecordRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-10963442671187****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetCallDetailRecordResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    agentEvents?: [ 
      {
        agentId?: string(name='AgentId', example='agent@ccc-test'),
        agentName?: string(name='AgentName'),
        eventSequence?: [ 
          {
            duration?: long(name='Duration', example='3'),
            event?: string(name='Event', example='Dialing'),
            eventTime?: long(name='EventTime', example='1604639129000'),
          }
        ](name='EventSequence'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
      }
    ](name='AgentEvents'),
    agentIds?: string(name='AgentIds', example='agent1@ccc-test,agent2@ccc-test'),
    agentNames?: string(name='AgentNames', example='agent1,agent2'),
    analyticsReport?: {
      emotion?: {
        confidence?: int32(name='Confidence'),
        remark?: string(name='Remark'),
        success?: boolean(name='Success'),
        taskId?: string(name='TaskId'),
        type?: string(name='Type'),
      }(name='Emotion'),
      problemSolving?: {
        problem?: string(name='Problem'),
        solution?: string(name='Solution'),
        solved?: boolean(name='Solved'),
        success?: boolean(name='Success'),
        taskId?: string(name='TaskId'),
      }(name='ProblemSolving'),
      satisfaction?: {
        remark?: string(name='Remark'),
        satisfactionDescription?: string(name='SatisfactionDescription'),
        success?: boolean(name='Success'),
        taskId?: string(name='TaskId'),
      }(name='Satisfaction'),
      todoList?: {
        success?: boolean(name='Success'),
        taskId?: string(name='TaskId'),
        tasks?: [ string ](name='Tasks'),
      }(name='TodoList'),
    }(name='AnalyticsReport'),
    analyticsReportReady?: boolean(name='AnalyticsReportReady'),
    callDuration?: long(name='CallDuration', example='50'),
    calledNumber?: string(name='CalledNumber', example='1332315****'),
    calleeLocation?: string(name='CalleeLocation'),
    callerLocation?: string(name='CallerLocation'),
    callingNumber?: string(name='CallingNumber', example='0533128****'),
    contactDisposition?: string(name='ContactDisposition', example='Success'),
    contactId?: string(name='ContactId', example='job-10963442671187****'),
    contactType?: string(name='ContactType'),
    customerEvents?: [ 
      {
        customerId?: string(name='CustomerId', example='1332315****'),
        eventSequence?: [ 
          {
            event?: string(name='Event', example='Released'),
            eventTime?: long(name='EventTime', example='1532458000000'),
          }
        ](name='EventSequence'),
      }
    ](name='CustomerEvents'),
    earlyMediaState?: string(name='EarlyMediaState', example='NotConnected'),
    establishedTime?: long(name='EstablishedTime', example='1532458000000'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    ivrEvents?: [ 
      {
        eventSequence?: [ 
          {
            event?: string(name='Event', example='Route2IVR'),
            eventTime?: long(name='EventTime', example='1604639129000'),
          }
        ](name='EventSequence'),
        flowId?: string(name='FlowId', example='edaf2eaa-8f88-44ca-812e-41b3cd2b7a90'),
        flowType?: string(name='FlowType', example='MAIN_FLOW'),
      }
    ](name='IvrEvents'),
    queueEvents?: [ 
      {
        eventSequence?: [ 
          {
            event?: string(name='Event', example='Enqueue'),
            eventTime?: long(name='EventTime', example='1604639129000'),
          }
        ](name='EventSequence'),
        flowId?: string(name='FlowId', example='edaf2eaa-8f88-44ca-812e-41b3cd2b7a90'),
        queueId?: string(name='QueueId', example='skillgroup@ccc-test'),
        queueName?: string(name='QueueName'),
        queueType?: int32(name='QueueType', example='1'),
      }
    ](name='QueueEvents'),
    recordingReady?: boolean(name='RecordingReady', example='true'),
    releaseInitiator?: string(name='ReleaseInitiator', example='customer'),
    releaseReason?: string(name='ReleaseReason', example='200 - OK'),
    releaseTime?: long(name='ReleaseTime', example='1532458000000'),
    satisfaction?: int32(name='Satisfaction', example='1'),
    satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel', example='IVR'),
    satisfactionSurveyOffered?: boolean(name='SatisfactionSurveyOffered', example='true'),
    skillGroupIds?: string(name='SkillGroupIds', example='skillgroup@ccc-test'),
    skillGroupNames?: string(name='SkillGroupNames'),
    startTime?: long(name='StartTime', example='1532458000000'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model GetCallDetailRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCallDetailRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCallDetailRecord  GetCallDetailRecordRequest
  * @return GetCallDetailRecordResponse
 */
async function getCallDetailRecord(request: GetCallDetailRecordRequest): GetCallDetailRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCallDetailRecord', 'POST', '/', 'json', false, 'json', request);
}

model GetCampaignRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetCampaignResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    actualEndTime?: long(name='ActualEndTime', example='1634008800000'),
    actualStartTime?: long(name='ActualStartTime', example='1634000460000'),
    campaignId?: string(name='CampaignId', example='6badb397-a8b5-40b6-21019d382a09'),
    casesAborted?: long(name='CasesAborted', example='0'),
    casesConnected?: long(name='CasesConnected', example='40'),
    casesUncompleted?: long(name='CasesUncompleted', example='0'),
    casesUncompletedAfterAttempt?: string(name='CasesUncompletedAfterAttempt'),
    casesUncompletedAfterAttempted?: long(name='CasesUncompletedAfterAttempted', example='1'),
    completionRate?: float(name='CompletionRate'),
    contactFlowId?: string(name='ContactFlowId'),
    maxAttemptCount?: long(name='MaxAttemptCount', example='1'),
    minAttemptInterval?: long(name='MinAttemptInterval', example='1'),
    name?: string(name='Name', example='test-campaign'),
    planedEndTime?: long(name='PlanedEndTime', example='1634054400000'),
    planedStartTime?: long(name='PlanedStartTime', example='1633968000000'),
    queueId?: string(name='QueueId', example='skillgroup@ccc-test'),
    queueName?: string(name='QueueName'),
    simulation?: boolean(name='Simulation', example='false'),
    simulationParameters?: string(name='SimulationParameters'),
    state?: string(name='State', example='Completed'),
    strategyParameters?: string(name='StrategyParameters', example='{"ratio":1}'),
    strategyType?: string(name='StrategyType', example='PACING'),
    totalCases?: long(name='TotalCases', example='100'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='6CCEF32F-8614-535F-A1D9-D85B8C0DC4F0'),
}

model GetCampaignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCampaignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCampaign  GetCampaignRequest
  * @return GetCampaignResponse
 */
async function getCampaign(request: GetCampaignRequest): GetCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCampaign', 'POST', '/', 'json', false, 'json', request);
}

model GetCaseFileUploadUrlRequest {
  fileName: string(name='FileName', description='This parameter is required.', example='case.csv', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetCaseFileUploadUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    caseFileKey?: string(name='CaseFileKey', example='ccc-test/namelist.csv'),
    url?: string(name='Url', example='https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-test/namelist.csv?Expires=1642067227&OSSAccessKeyId=****&Signature=****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model GetCaseFileUploadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCaseFileUploadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCaseFileUploadUrl  GetCaseFileUploadUrlRequest
  * @return GetCaseFileUploadUrlResponse
 */
async function getCaseFileUploadUrl(request: GetCaseFileUploadUrlRequest): GetCaseFileUploadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCaseFileUploadUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetChatMediaUrlRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Body'),
  mediaId: string(name='MediaId', description='media id

This parameter is required.', example='$iAHNCNQCo3dhdgMGBAAFAAbaACOEAaQhIEeoAqpjjBl42N6o_kg7A88AAAGRIRRuBgTOACrxHgcACM8AAAGRIYJLBQ', position='Body'),
  requestId?: string(name='RequestId', example='8707EB29-BAED-4302-B999-40BA61877437', position='Body'),
}

model GetChatMediaUrlResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Internal service issue. Detail:.'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='9FBA26B0-462B-4D77-B78F-AF35560DBC71'),
}

model GetChatMediaUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatMediaUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetChatMediaUrl  GetChatMediaUrlRequest
  * @return GetChatMediaUrlResponse
 */
async function getChatMediaUrl(request: GetChatMediaUrlRequest): GetChatMediaUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatMediaUrl', 'POST', '/', 'json', true, 'form', request);
}

model GetChatRoutingProfileRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetChatRoutingProfileResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    agentConcurrencySettings?: string(name='AgentConcurrencySettings', example='{
    "AllowExceedingLimitWhenTransferring": false,
    "ConcurrencyLimit": 4,
    "AllowExceedingLimitWhenClaiming": true,
    "Enabled": true
}'),
    chatSettings?: string(name='ChatSettings', example='{"IdleChatTimeoutSeconds":300}'),
    distributionSettings?: string(name='DistributionSettings', example='{
    "AgentRingTimeoutSeconds": 30,
    "Enabled": true,
    "MaxNumberOfConversationsAgentCanMiss": 5,
    "PostAgentMissingConversionsAction": "Nothing"
}'),
    routingType?: string(name='RoutingType', example='Automatic'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='30C7D235-DDCF-4C7F-A462-5E2598252C2B'),
}

model GetChatRoutingProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatRoutingProfileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetChatRoutingProfile  GetChatRoutingProfileRequest
  * @return GetChatRoutingProfileResponse
 */
async function getChatRoutingProfile(request: GetChatRoutingProfileRequest): GetChatRoutingProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatRoutingProfile', 'POST', '/', 'json', false, 'json', request);
}

model GetContactFlowRequest {
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='274601be-a6d5-4429-bcef-32b51d031c6e', position='Query'),
  draftId: string(name='DraftId', description='This parameter is required.', example='566399d7-5558-447c-a72f-9be2768b6a82', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    contactFlowId?: string(name='ContactFlowId', example='274601be-a6d5-4429-bcef-32b51d031c6e'),
    createdTime?: string(name='CreatedTime', example='2021-07-14 10:48:43.0'),
    definition?: string(name='Definition'),
    description?: string(name='Description', example='1.0'),
    draftId?: string(name='DraftId', example='566399d7-5558-447c-a72f-9be2768b6a82'),
    editor?: string(name='Editor', example='editor-xxx'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    name?: string(name='Name'),
    published?: boolean(name='Published', example='False'),
    type?: string(name='Type', example='MAIN_FLOW'),
    updatedTime?: string(name='UpdatedTime', example='2021-07-14 10:48:43.0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2263B273-AC1B-44EB-BA98-87F2322C6780'),
}

model GetContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetContactFlow  GetContactFlowRequest
  * @return GetContactFlowResponse
 */
async function getContactFlow(request: GetContactFlowRequest): GetContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetContactFlow', 'POST', '/', 'json', false, 'json', request);
}

model GetConversationDetailRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-25884193037652****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetConversationDetailResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  phrases?: [ 
    {
      begin?: int32(name='Begin', example='240'),
      end?: int32(name='End', example='1280'),
      finished?: boolean(name='Finished'),
      identity?: string(name='Identity', example='agent@ccc-test'),
      role?: string(name='Role'),
      words?: string(name='Words'),
    }
  ](name='Phrases'),
  requestId?: string(name='RequestId', example='7E407F9B-A278-52A0-B193-3EE5471D7A87'),
}

model GetConversationDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConversationDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConversationDetail  GetConversationDetailRequest
  * @return GetConversationDetailResponse
 */
async function getConversationDetail(request: GetConversationDetailRequest): GetConversationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConversationDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDataChannelCredentialsRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model GetDataChannelCredentialsResponseBody = {
  code?: string(name='Code'),
  data?: {
    clientId?: string(name='ClientId'),
    deviceId?: string(name='DeviceId'),
    endpoint?: string(name='Endpoint'),
    expiredTime?: long(name='ExpiredTime'),
    password?: string(name='Password'),
    topic?: string(name='Topic'),
    userName?: string(name='UserName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model GetDataChannelCredentialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataChannelCredentialsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataChannelCredentials  GetDataChannelCredentialsRequest
  * @return GetDataChannelCredentialsResponse
 */
async function getDataChannelCredentials(request: GetDataChannelCredentialsRequest): GetDataChannelCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataChannelCredentials', 'POST', '/', 'json', false, 'json', request);
}

model GetDoNotCallFileUploadParametersRequest {
  fileName: string(name='FileName', description='This parameter is required.', example='blacklist.xlsx', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetDoNotCallFileUploadParametersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='****'),
    expireTime?: int32(name='ExpireTime', example='1647313420'),
    filePath?: string(name='FilePath', example='ccc-test/blacklist.xlsx'),
    host?: string(name='Host', example='https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com'),
    policy?: string(name='Policy', example='eyJleHBpcmF0aW9uIjoiMjAyMi0wMy0xNVQwMzowMzo0MC4zMTJaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjBdLFsic3RhcnRzLXdpdGgiLCIka2V5IiwidGVtcC9ibGFja2xpc3QvaW1wb3J0LzE1NzcyNDcxMTU0OTA0MDEvY2NjVjIta216LzIwMjIE1MTAwMzQwLyJd****'),
    signature?: string(name='Signature', example='zi31STIMtIfa/UN2l+6lww****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
  success?: boolean(name='Success', example='true'),
}

model GetDoNotCallFileUploadParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDoNotCallFileUploadParametersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDoNotCallFileUploadParameters  GetDoNotCallFileUploadParametersRequest
  * @return GetDoNotCallFileUploadParametersResponse
 */
async function getDoNotCallFileUploadParameters(request: GetDoNotCallFileUploadParametersRequest): GetDoNotCallFileUploadParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDoNotCallFileUploadParameters', 'POST', '/', 'json', false, 'json', request);
}

model GetDocumentUploadParametersRequest {
  fileName: string(name='FileName', description='This parameter is required.', example='blacklist.xlsx', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Body'),
  requestId?: string(name='RequestId', example='24BE19E8-BF7D-4992-A35E-15EBA874F2E5', position='Body'),
}

model GetDocumentUploadParametersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='****'),
    expireTime?: int32(name='ExpireTime', example='1647313420'),
    filePath?: string(name='FilePath', example='ccc-test/blacklist.xlsx'),
    host?: string(name='Host', description='oss host', example='https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com'),
    policy?: string(name='Policy', example='Permit'),
    signature?: string(name='Signature', example='zi31STIMtIfa/UN2l+6lww****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='9FBA26B0-462B-4D77-B78F-AF35560DBC71'),
}

model GetDocumentUploadParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDocumentUploadParametersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDocumentUploadParameters  GetDocumentUploadParametersRequest
  * @return GetDocumentUploadParametersResponse
 */
async function getDocumentUploadParameters(request: GetDocumentUploadParametersRequest): GetDocumentUploadParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDocumentUploadParameters', 'POST', '/', 'json', true, 'form', request);
}

model GetEarlyMediaRecordingRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-6538214103689****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetEarlyMediaRecordingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    fileName?: string(name='FileName', example='job-6538214103689****-earlyMedia..wav'),
    fileUrl?: string(name='FileUrl', example='https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record-mixed/ccc-test/2022/06/voicemail.job-054ded02****.wav?Expires=1656074923&OSSAccessKeyId=****&Signature=****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716'),
}

model GetEarlyMediaRecordingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEarlyMediaRecordingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEarlyMediaRecording  GetEarlyMediaRecordingRequest
  * @return GetEarlyMediaRecordingResponse
 */
async function getEarlyMediaRecording(request: GetEarlyMediaRecordingRequest): GetEarlyMediaRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEarlyMediaRecording', 'POST', '/', 'json', false, 'json', request);
}

model GetHistoricalCallerReportRequest {
  callingNumber: string(name='CallingNumber', description='This parameter is required.', example='1900000****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1646841600000', minimum=0, maximum=4102416000000, position='Query'),
  stopTime: long(name='StopTime', description='This parameter is required.', example='1646928000000', minimum=0, maximum=4102416000000, position='Query'),
}

model GetHistoricalCallerReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    lastCallingTime?: long(name='LastCallingTime', example='1646917200000'),
    totalCalls?: long(name='TotalCalls', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model GetHistoricalCallerReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHistoricalCallerReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHistoricalCallerReport  GetHistoricalCallerReportRequest
  * @return GetHistoricalCallerReportResponse
 */
async function getHistoricalCallerReport(request: GetHistoricalCallerReportRequest): GetHistoricalCallerReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoricalCallerReport', 'POST', '/', 'json', false, 'json', request);
}

model GetHistoricalCampaignReportRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='4fc85829-f6fc-476e-9c0d-c350184e36f1', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetHistoricalCampaignReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    abandonRate?: float(name='AbandonRate'),
    abandonedRate?: float(name='AbandonedRate', example='0.10'),
    answerRate?: float(name='AnswerRate'),
    callsAbandoned?: long(name='CallsAbandoned', example='5'),
    callsConnected?: long(name='CallsConnected', example='50'),
    callsDialed?: long(name='CallsDialed', example='100'),
    connectedRate?: float(name='ConnectedRate', example='0.50'),
    occupancyRate?: float(name='OccupancyRate', example='0.50'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E3A847C1-9800-57DF-9172-2CDDC026388D'),
}

model GetHistoricalCampaignReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHistoricalCampaignReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHistoricalCampaignReport  GetHistoricalCampaignReportRequest
  * @return GetHistoricalCampaignReportResponse
 */
async function getHistoricalCampaignReport(request: GetHistoricalCampaignReportRequest): GetHistoricalCampaignReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoricalCampaignReport', 'GET', '/', 'json', false, 'json', request);
}

model GetHistoricalInstanceReportRequest {
  endTime?: long(name='EndTime', example='1532707199000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  startTime?: long(name='StartTime', example='1532448000000', minimum=0, maximum=4133952000000, position='Query'),
}

model GetHistoricalInstanceReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    inbound?: {
      abandonRate?: float(name='AbandonRate', example='0'),
      accessChannelTypeDetailList?: [ 
        {
          accessChannelType?: string(name='AccessChannelType'),
          callsOffered?: long(name='CallsOffered'),
        }
      ](name='AccessChannelTypeDetailList'),
      averageAbandonTime?: float(name='AverageAbandonTime', example='0'),
      averageAbandonedInIVRTime?: float(name='AverageAbandonedInIVRTime', example='0'),
      averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime', example='0'),
      averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime', example='0'),
      averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
      averageHoldTime?: float(name='AverageHoldTime', example='0'),
      averageResponseTime?: float(name='AverageResponseTime'),
      averageRingTime?: float(name='AverageRingTime', example='0'),
      averageTalkTime?: float(name='AverageTalkTime', example='0'),
      averageWaitTime?: float(name='AverageWaitTime', example='0'),
      averageWorkTime?: float(name='AverageWorkTime', example='0'),
      callsAbandoned?: long(name='CallsAbandoned', example='0'),
      callsAbandonedInIVR?: long(name='CallsAbandonedInIVR', example='0'),
      callsAbandonedInQueue?: long(name='CallsAbandonedInQueue', example='0'),
      callsAbandonedInRing?: long(name='CallsAbandonedInRing', example='0'),
      callsAbandonedInVoiceNavigator?: long(name='CallsAbandonedInVoiceNavigator', example='0'),
      callsAttendedTransferred?: long(name='CallsAttendedTransferred', example='0'),
      callsBlindTransferred?: long(name='CallsBlindTransferred', example='0'),
      callsCausedIVRException?: long(name='CallsCausedIVRException'),
      callsForwardToOutsideNumber?: long(name='CallsForwardToOutsideNumber', example='0'),
      callsHandled?: long(name='CallsHandled', example='0'),
      callsHold?: long(name='CallsHold', example='0'),
      callsIVRException?: long(name='CallsIVRException', example='0'),
      callsOffered?: long(name='CallsOffered', example='0'),
      callsQueued?: long(name='CallsQueued', example='0'),
      callsQueuingFailed?: long(name='CallsQueuingFailed', example='0'),
      callsQueuingOverflow?: long(name='CallsQueuingOverflow', example='0'),
      callsQueuingTimeout?: long(name='CallsQueuingTimeout', example='0'),
      callsRinged?: long(name='CallsRinged', example='0'),
      callsToVoicemail?: long(name='CallsToVoicemail'),
      callsVoicemail?: long(name='CallsVoicemail', example='0'),
      handleRate?: float(name='HandleRate', example='0'),
      maxAbandonTime?: long(name='MaxAbandonTime', example='0'),
      maxAbandonedInIVRTime?: long(name='MaxAbandonedInIVRTime', example='100'),
      maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime', example='0'),
      maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime', example='0'),
      maxHoldTime?: long(name='MaxHoldTime', example='0'),
      maxRingTime?: long(name='MaxRingTime', example='0'),
      maxTalkTime?: long(name='MaxTalkTime', example='0'),
      maxWaitTime?: long(name='MaxWaitTime', example='0'),
      maxWorkTime?: long(name='MaxWorkTime', example='0'),
      satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
      satisfactionRate?: float(name='SatisfactionRate', example='0'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
      serviceLevel15?: float(name='ServiceLevel15'),
      serviceLevel20?: float(name='ServiceLevel20', example='0'),
      serviceLevel30?: float(name='ServiceLevel30'),
      totalAbandonTime?: long(name='TotalAbandonTime', example='0'),
      totalAbandonedInIVRTime?: long(name='TotalAbandonedInIVRTime', example='0'),
      totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime', example='0'),
      totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime', example='0'),
      totalHoldTime?: long(name='TotalHoldTime', example='0'),
      totalMessagesSent?: long(name='TotalMessagesSent'),
      totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
      totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
      totalRingTime?: long(name='TotalRingTime', example='0'),
      totalTalkTime?: long(name='TotalTalkTime', example='0'),
      totalWaitTime?: long(name='TotalWaitTime', example='0'),
      totalWorkTime?: long(name='TotalWorkTime', example='0'),
    }(name='Inbound'),
    internal?: {
      callsAnswered?: long(name='CallsAnswered'),
      callsDialed?: long(name='CallsDialed'),
    }(name='Internal'),
    outbound?: {
      answerRate?: float(name='AnswerRate', example='0'),
      averageDialingTime?: float(name='AverageDialingTime', example='0'),
      averageHoldTime?: float(name='AverageHoldTime', example='0'),
      averageRingTime?: float(name='AverageRingTime', example='0'),
      averageTalkTime?: float(name='AverageTalkTime', example='0'),
      averageWorkTime?: float(name='AverageWorkTime', example='0'),
      callsAnswered?: long(name='CallsAnswered', example='0'),
      callsAttendedTransferred?: long(name='CallsAttendedTransferred', example='0'),
      callsBlindTransferred?: long(name='CallsBlindTransferred', example='0'),
      callsDialed?: long(name='CallsDialed', example='0'),
      callsHold?: int32(name='CallsHold', example='0'),
      callsRinged?: long(name='CallsRinged', example='0'),
      maxDialingTime?: long(name='MaxDialingTime', example='0'),
      maxHoldTime?: long(name='MaxHoldTime', example='0'),
      maxRingTime?: long(name='MaxRingTime', example='0'),
      maxTalkTime?: long(name='MaxTalkTime', example='0'),
      maxWorkTime?: long(name='MaxWorkTime', example='0'),
      satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
      satisfactionRate?: float(name='SatisfactionRate', example='0'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
      totalDialingTime?: long(name='TotalDialingTime', example='0'),
      totalHoldTime?: long(name='TotalHoldTime', example='0'),
      totalRingTime?: long(name='TotalRingTime', example='0'),
      totalTalkTime?: long(name='TotalTalkTime', example='0'),
      totalWorkTime?: long(name='TotalWorkTime', example='0'),
    }(name='Outbound'),
    overall?: {
      averageBreakTime?: float(name='AverageBreakTime', example='0'),
      averageHoldTime?: float(name='AverageHoldTime', example='0'),
      averageReadyTime?: float(name='AverageReadyTime', example='0'),
      averageTalkTime?: float(name='AverageTalkTime', example='0'),
      averageWorkTime?: float(name='AverageWorkTime', example='0'),
      maxBreakTime?: long(name='MaxBreakTime', example='0'),
      maxHoldTime?: long(name='MaxHoldTime', example='0'),
      maxLoggedInAgents?: long(name='MaxLoggedInAgents'),
      maxReadyTime?: long(name='MaxReadyTime', example='0'),
      maxTalkTime?: long(name='MaxTalkTime', example='0'),
      maxWorkTime?: long(name='MaxWorkTime', example='0'),
      occupancyRate?: float(name='OccupancyRate', example='0'),
      satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
      satisfactionRate?: float(name='SatisfactionRate', example='0'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
      totalBreakTime?: long(name='TotalBreakTime', example='0'),
      totalCalls?: long(name='TotalCalls', example='0'),
      totalHoldTime?: long(name='TotalHoldTime', example='0'),
      totalLoggedInTime?: long(name='TotalLoggedInTime', example='0'),
      totalReadyTime?: long(name='TotalReadyTime', example='0'),
      totalTalkTime?: long(name='TotalTalkTime', example='0'),
      totalWorkTime?: long(name='TotalWorkTime', example='0'),
    }(name='Overall'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model GetHistoricalInstanceReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHistoricalInstanceReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetHistoricalInstanceReport  GetHistoricalInstanceReportRequest
  * @return GetHistoricalInstanceReportResponse
 */
async function getHistoricalInstanceReport(request: GetHistoricalInstanceReportRequest): GetHistoricalInstanceReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoricalInstanceReport', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    adminList?: [ 
      {
        displayName?: string(name='DisplayName'),
        email?: string(name='Email', example='username@example.com'),
        extension?: string(name='Extension', example='8032****'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        loginName?: string(name='LoginName', example='agent'),
        mobile?: string(name='Mobile', example='1382114****'),
        roleId?: string(name='RoleId', example='Admin@ccc-test'),
        roleName?: string(name='RoleName', example='Admin'),
        userId?: string(name='UserId', example='agent@ccc-test'),
        workMode?: string(name='WorkMode', example='ON_SITE'),
      }
    ](name='AdminList'),
    aliyunUid?: string(name='AliyunUid', example='157123456789****'),
    consoleUrl?: string(name='ConsoleUrl', example='https://ccc-v2.aliyun.com/#/workbench/ccc-test'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName', example='ccc-test'),
    id?: string(name='Id', example='ccc-test'),
    name?: string(name='Name'),
    numberList?: [ 
      {
        active?: boolean(name='Active', example='true'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId', example='2ec7a58f-3243-4815-bb21-97b480b95f5e'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        number?: string(name='Number', example='0830011****'),
        province?: string(name='Province'),
        skillGroups?: [ 
          {
            description?: string(name='Description'),
            displayName?: string(name='DisplayName'),
            instanceId?: string(name='InstanceId', example='ccc-test'),
            name?: string(name='Name', example='skillgroup'),
            phoneNumberCount?: int32(name='PhoneNumberCount', example='1'),
            skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
            userCount?: int32(name='UserCount', example='3'),
          }
        ](name='SkillGroups'),
        usage?: string(name='Usage', example='Bidirection'),
        userId?: string(name='UserId', example='agent@ccc-test'),
      }
    ](name='NumberList'),
    status?: string(name='Status', example='RUNNING'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2778FA12-EDD6-42AA-9B15-AF855072E5E5'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceTrendingReportRequest {
  endTime?: long(name='EndTime', example='1604725528000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  startTime?: long(name='StartTime', example='1604639129000', minimum=0, maximum=4133952000000, position='Query'),
}

model GetInstanceTrendingReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    inbound?: [ 
      {
        callsAbandonedInIVR?: long(name='CallsAbandonedInIVR', example='0'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue', example='0'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing', example='0'),
        callsHandled?: long(name='CallsHandled', example='0'),
        callsQueued?: long(name='CallsQueued', example='0'),
        statsTime?: long(name='StatsTime', example='1604639129000'),
        totalCalls?: long(name='TotalCalls', example='0'),
      }
    ](name='Inbound'),
    outbound?: [ 
      {
        callsAnswered?: long(name='CallsAnswered', example='0'),
        statsTime?: long(name='StatsTime', example='1604639129000'),
        totalCalls?: long(name='TotalCalls', example='0'),
      }
    ](name='Outbound'),
    overall?: [ 
      {
        maxLoggedInAgents?: long(name='MaxLoggedInAgents'),
        statsTime?: long(name='StatsTime'),
      }
    ](name='Overall'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model GetInstanceTrendingReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceTrendingReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstanceTrendingReport  GetInstanceTrendingReportRequest
  * @return GetInstanceTrendingReportResponse
 */
async function getInstanceTrendingReport(request: GetInstanceTrendingReportRequest): GetInstanceTrendingReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceTrendingReport', 'POST', '/', 'json', false, 'json', request);
}

model GetIvrTrackingSummaryRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-489361145506897920', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='0f7ad007-ab50-4b3d-a87a-56864eb40dab', position='Query'),
}

model GetIvrTrackingSummaryResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Unknown error code \\"NoPermission.Recording\\". Reason: null'),
  requestId?: string(name='RequestId', example='DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE'),
}

model GetIvrTrackingSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIvrTrackingSummaryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIvrTrackingSummary  GetIvrTrackingSummaryRequest
  * @return GetIvrTrackingSummaryResponse
 */
async function getIvrTrackingSummary(request: GetIvrTrackingSummaryRequest): GetIvrTrackingSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIvrTrackingSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetLoginDetailsRequest {
  chatDeviceId?: string(name='ChatDeviceId', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model GetLoginDetailsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    agentServerUrl?: string(name='AgentServerUrl', example='sh-wss-ccc.aliyuncs.com'),
    avatarUrl?: string(name='AvatarUrl'),
    chatAppId?: string(name='ChatAppId'),
    chatAppKey?: string(name='ChatAppKey'),
    chatDeviceId?: string(name='ChatDeviceId'),
    chatLoginToken?: string(name='ChatLoginToken'),
    chatServerUrl?: string(name='ChatServerUrl'),
    chatUserId?: string(name='ChatUserId'),
    deviceExt?: string(name='DeviceExt', example='8033****'),
    deviceId?: string(name='DeviceId', example='Yealink SIP-T23G 44.84.XX.XX'),
    deviceState?: string(name='DeviceState', example='OFFLINE'),
    displayName?: string(name='DisplayName'),
    extension?: string(name='Extension', example='8001****'),
    nickname?: string(name='Nickname'),
    signature?: string(name='Signature', example='zi31STIMtIfa/UN2l+6lww****'),
    signature2?: string(name='Signature2', example='zi31STIMtIfa/UN2l+6lww****'),
    sipServerUrl?: string(name='SipServerUrl', example='sh-sip-ccc.aliyuncs.com:443'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    userKey?: string(name='UserKey'),
    userKey2?: string(name='UserKey2', example='802001:1656406628862"'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='F1A4774A-F28B-5C40-AEF6-D88D2DD6C7E4'),
}

model GetLoginDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLoginDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLoginDetails  GetLoginDetailsRequest
  * @return GetLoginDetailsResponse
 */
async function getLoginDetails(request: GetLoginDetailsRequest): GetLoginDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoginDetails', 'POST', '/', 'json', false, 'json', request);
}

model GetMonoRecordingRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-6538214103689****', position='Query'),
  expireSeconds?: long(name='ExpireSeconds', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetMonoRecordingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    duration?: long(name='Duration'),
    fileName?: string(name='FileName', example='job-6538214103689****.wav'),
    fileUrl?: string(name='FileUrl', example='http://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record/job-6538214103689****.wav?Expires=1610910578&OSSAccessKeyId=****&Signature=****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model GetMonoRecordingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMonoRecordingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMonoRecording  GetMonoRecordingRequest
  * @return GetMonoRecordingResponse
 */
async function getMonoRecording(request: GetMonoRecordingRequest): GetMonoRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMonoRecording', 'POST', '/', 'json', false, 'json', request);
}

model GetMultiChannelRecordingRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-6538214103689****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetMultiChannelRecordingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    fileName?: string(name='FileName', example='job-6538214103689****.mkv'),
    fileUrl?: string(name='FileUrl', example='https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record-mixed/ccc-test/2021/04/job-6538214103689****.mkv?Expires=1617435462&OSSAccessKeyId=****&Signature=****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model GetMultiChannelRecordingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMultiChannelRecordingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMultiChannelRecording  GetMultiChannelRecordingRequest
  * @return GetMultiChannelRecordingResponse
 */
async function getMultiChannelRecording(request: GetMultiChannelRecordingRequest): GetMultiChannelRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMultiChannelRecording', 'POST', '/', 'json', false, 'json', request);
}

model GetNumberLocationRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='1312121****', position='Query'),
}

model GetNumberLocationResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    city?: string(name='City'),
    number?: string(name='Number', example='1312121****'),
    province?: string(name='Province'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='584AA2E3-9AC4-561B-BC8D-C74BA11B1387'),
}

model GetNumberLocationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNumberLocationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNumberLocation  GetNumberLocationRequest
  * @return GetNumberLocationResponse
 */
async function getNumberLocation(request: GetNumberLocationRequest): GetNumberLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNumberLocation', 'POST', '/', 'json', false, 'json', request);
}

model GetRealtimeCampaignStatsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  queueId: string(name='QueueId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model GetRealtimeCampaignStatsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakingAgents?: long(name='BreakingAgents', example='1'),
    caps?: long(name='Caps', example='5'),
    loggedInAgents?: long(name='LoggedInAgents', example='10'),
    outboundScenarioBreakingAgents?: long(name='OutboundScenarioBreakingAgents'),
    outboundScenarioReadyAgents?: long(name='OutboundScenarioReadyAgents'),
    outboundScenarioTalkingAgents?: long(name='OutboundScenarioTalkingAgents'),
    outboundScenarioWorkingAgents?: long(name='OutboundScenarioWorkingAgents'),
    readyAgents?: long(name='ReadyAgents', example='3'),
    talkingAgents?: long(name='TalkingAgents', example='4'),
    totalAgents?: long(name='TotalAgents', example='10'),
    workingAgents?: long(name='WorkingAgents', example='2'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='42970829-E2C8-515A-8F42-5A6B59F852A7'),
}

model GetRealtimeCampaignStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealtimeCampaignStatsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRealtimeCampaignStats  GetRealtimeCampaignStatsRequest
  * @return GetRealtimeCampaignStatsResponse
 */
async function getRealtimeCampaignStats(request: GetRealtimeCampaignStatsRequest): GetRealtimeCampaignStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealtimeCampaignStats', 'GET', '/', 'json', false, 'json', request);
}

model GetRealtimeInstanceStatesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
}

model GetRealtimeInstanceStatesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakCodeDetailList?: [ 
      {
        breakCode?: string(name='BreakCode'),
        count?: long(name='Count'),
      }
    ](name='BreakCodeDetailList'),
    breakingAgents?: long(name='BreakingAgents', example='0'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    interactiveCalls?: long(name='InteractiveCalls', example='0'),
    loggedInAgents?: long(name='LoggedInAgents', example='0'),
    longestWaitingTime?: long(name='LongestWaitingTime', example='0'),
    readyAgents?: long(name='ReadyAgents', example='0'),
    talkingAgents?: long(name='TalkingAgents', example='0'),
    totalAgents?: long(name='TotalAgents', example='0'),
    waitingCalls?: long(name='WaitingCalls', example='0'),
    workingAgents?: long(name='WorkingAgents', example='0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model GetRealtimeInstanceStatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRealtimeInstanceStatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRealtimeInstanceStates  GetRealtimeInstanceStatesRequest
  * @return GetRealtimeInstanceStatesResponse
 */
async function getRealtimeInstanceStates(request: GetRealtimeInstanceStatesRequest): GetRealtimeInstanceStatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealtimeInstanceStates', 'POST', '/', 'json', false, 'json', request);
}

model GetSchemaRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='b0eb2742-f37e-4c67-82d4-25c651c1xxxx', position='Body'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model GetSchemaResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createdTime?: string(name='CreatedTime', example='2021-07-14 10:48:43.0'),
    deleted?: boolean(name='Deleted', example='false'),
    description?: string(name='Description'),
    id?: string(name='Id', description='schema id', example='profile'),
    instanceId?: string(name='InstanceId', example='5e0964fd-951c-4e45-b518-d09d4d2db8ca'),
    properties?: map[string]DataPropertiesValue(name='Properties'),
    updatedTime?: string(name='UpdatedTime', example='2021-07-14 10:48:43.0'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Service abnormal, the instance 0418 is ceased.'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='19D09CCC-F298-4124-849A-AFA217819011'),
}

model GetSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSchemaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSchema  GetSchemaRequest
  * @return GetSchemaResponse
 */
async function getSchema(request: GetSchemaRequest): GetSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSchema', 'POST', '/', 'json', true, 'form', request);
}

model GetSkillGroupRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model GetSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    description?: string(name='Description'),
    displayName?: string(name='DisplayName'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    mediaType?: string(name='MediaType'),
    name?: string(name='Name', example='skillgroup'),
    skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='CF1C21B9-2D49-4B54-880F-FBE248C16903'),
}

model GetSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSkillGroup  GetSkillGroupRequest
  * @return GetSkillGroupResponse
 */
async function getSkillGroup(request: GetSkillGroupRequest): GetSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetTicketRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId: string(name='TicketId', description='This parameter is required.', example='3d26b90a-c5d2-4b09-8219-********', position='Query'),
}

model GetTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    assignee?: string(name='Assignee', example='agent1@ccc-test'),
    assigneeName?: string(name='AssigneeName'),
    categoryId?: string(name='CategoryId', example='8939-4223-86d0-6bd187905cc8'),
    categoryName?: string(name='CategoryName'),
    closeCode?: string(name='CloseCode', example='Completed'),
    comment?: string(name='Comment'),
    context?: string(name='Context'),
    createdTime?: long(name='CreatedTime', example='1620259200000'),
    creator?: string(name='Creator', example='creator@ccc-test'),
    creatorName?: string(name='CreatorName'),
    currentTaskId?: string(name='CurrentTaskId', example='912f0b78-6639-4a93-ae18-0d832885c27e'),
    currentTaskName?: string(name='CurrentTaskName'),
    currentTaskStartTime?: long(name='CurrentTaskStartTime', example='1693793208075'),
    customerId?: string(name='CustomerId', example='4223-86d0-6bd187905-891798749'),
    endTime?: long(name='EndTime', example='1687846259999'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    jobId?: string(name='JobId', example='job-399383842187575296'),
    source?: string(name='Source', example='Audio'),
    startTime?: long(name='StartTime', example='1620259200000'),
    state?: string(name='State', example='Processing'),
    templateId?: string(name='TemplateId', example='ccc-test_43c2671b-8939-4223-86d0-6bd187905cc8_*****0666238'),
    templateVersion?: string(name='TemplateVersion', example='0'),
    ticketId?: string(name='TicketId', example='b3a6a131-359e-46bd-9bc5-1f5cb0ea093f'),
    title?: string(name='Title'),
    updatedTime?: long(name='UpdatedTime', example='1693793208075'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BF268B34-09C2-43FD-BAC4-5D31EA633111'),
}

model GetTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTicket  GetTicketRequest
  * @return GetTicketResponse
 */
async function getTicket(request: GetTicketRequest): GetTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTicket', 'POST', '/', 'json', false, 'json', request);
}

model GetTicketSummaryReportRequest {
  assignee?: string(name='Assignee', example='assignee@ccc-test', position='Query'),
  assigneeType?: string(name='AssigneeType', example='Agent', position='Query'),
  categoryId?: string(name='CategoryId', example='43c2671b-***-***-86d0-6bd187905cc8', position='Query'),
  creator?: string(name='Creator', example='creator@ccc-test', position='Query'),
  endTime?: long(name='EndTime', example='1719590399999', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  participant?: string(name='Participant', example='participant@ccc-test', position='Query'),
  startTime?: long(name='StartTime', example='1716998400000', position='Query'),
  state?: string(name='State', position='Query'),
}

model GetTicketSummaryReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    ticketsAssigned?: string(name='TicketsAssigned', example='3'),
    ticketsCreated?: string(name='TicketsCreated', example='10'),
    ticketsParticipated?: string(name='TicketsParticipated', example='5'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EAF3C248-E123-441B-A545-B6CD02E98EED'),
}

model GetTicketSummaryReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTicketSummaryReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTicketSummaryReport  GetTicketSummaryReportRequest
  * @return GetTicketSummaryReportResponse
 */
async function getTicketSummaryReport(request: GetTicketSummaryReportRequest): GetTicketSummaryReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTicketSummaryReport', 'POST', '/', 'json', false, 'json', request);
}

model GetTicketTemplateRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  templateId?: string(name='TemplateId', example='4ca2e2-c8d19b82c-d7ce393ac8197d3ab', position='Query'),
  templateVersion?: string(name='TemplateVersion', example='1703517780627', position='Query'),
}

model GetTicketTemplateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    categoryId?: string(name='CategoryId', example='43c2671b-****-4223-86d0-6bd187905cc8'),
    editor?: string(name='Editor', example='editor-xxx@ccc-test'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    name?: string(name='Name'),
    processDefinition?: string(name='ProcessDefinition'),
    state?: string(name='State', example='Enabled'),
    templateId?: string(name='TemplateId', example='4ca2e2-c8d19b82c-d7ce393ac8197d3ab'),
    ticketFields?: [ 
      {
        array?: boolean(name='Array', example='false'),
        attributes?: string(name='Attributes', example='{}'),
        createdTime?: long(name='CreatedTime', example='1717664210000'),
        creator?: string(name='Creator', example='creator@cccV2-kmz'),
        dataType?: string(name='DataType', example='string'),
        description?: string(name='Description'),
        disabled?: boolean(name='Disabled', example='false'),
        displayName?: string(name='DisplayName'),
        displayOrder?: int32(name='DisplayOrder', example='1'),
        editorType?: string(name='EditorType', example='textbox'),
        maxLength?: int32(name='MaxLength', example='30'),
        maximum?: double(name='Maximum', example='10'),
        minLength?: int32(name='MinLength', example='1'),
        minimum?: double(name='Minimum', example='1'),
        name?: string(name='Name', example='name'),
        pattern?: string(name='Pattern', example='^'),
        patternErrorMessage?: string(name='PatternErrorMessage'),
        readOnly?: boolean(name='ReadOnly', example='false'),
        required?: boolean(name='Required', example='false'),
        system?: boolean(name='System', example='false'),
        updatedTime?: long(name='UpdatedTime', example='1717664210000'),
      }
    ](name='TicketFields'),
    updatedTime?: long(name='UpdatedTime', example='1717664210000'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BF268B34-09C2-43FD-BAC4-5D31EA633111'),
}

model GetTicketTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTicketTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTicketTemplate  GetTicketTemplateRequest
  * @return GetTicketTemplateResponse
 */
async function getTicketTemplate(request: GetTicketTemplateRequest): GetTicketTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTicketTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTurnCredentialsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model GetTurnCredentialsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    password?: string(name='Password', example='M0NQNG/uRUrfIxW7er/S9gKX****'),
    userName?: string(name='UserName', example='1602585817:****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model GetTurnCredentialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTurnCredentialsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTurnCredentials  GetTurnCredentialsRequest
  * @return GetTurnCredentialsResponse
 */
async function getTurnCredentials(request: GetTurnCredentialsRequest): GetTurnCredentialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTurnCredentials', 'POST', '/', 'json', false, 'json', request);
}

model GetTurnServerListRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetTurnServerListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model GetTurnServerListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTurnServerListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTurnServerList  GetTurnServerListRequest
  * @return GetTurnServerListResponse
 */
async function getTurnServerList(request: GetTurnServerListRequest): GetTurnServerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTurnServerList', 'POST', '/', 'json', false, 'json', request);
}

model GetUploadAudioDataParamsRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-38860977107324****', position='Query'),
  instanceId?: string(name='InstanceId', example='test', position='Query'),
}

model GetUploadAudioDataParamsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    paramsStr?: string(name='ParamsStr'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716'),
}

model GetUploadAudioDataParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadAudioDataParamsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUploadAudioDataParams  GetUploadAudioDataParamsRequest
  * @return GetUploadAudioDataParamsResponse
 */
async function getUploadAudioDataParams(request: GetUploadAudioDataParamsRequest): GetUploadAudioDataParamsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUploadAudioDataParams', 'GET', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  extension?: string(name='Extension', example='8003****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model GetUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    avatarUrl?: string(name='AvatarUrl'),
    deviceExt?: string(name='DeviceExt', example='8033****'),
    deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
    deviceState?: string(name='DeviceState', example='OFFLINE'),
    displayId?: string(name='DisplayId', example='1001'),
    displayName?: string(name='DisplayName'),
    email?: string(name='Email', example='username@example.com'),
    extension?: string(name='Extension', example='8003****'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    loginName?: string(name='LoginName', example='agent'),
    mobile?: string(name='Mobile', example='1391234****'),
    nickname?: string(name='Nickname'),
    roleId?: string(name='RoleId', example='Admin@ccc-test'),
    roleName?: string(name='RoleName', example='Admin'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model GetVideoRequest {
  contactId: string(name='ContactId', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', position='Query'),
}

model GetVideoResponseBody = {
  code?: string(name='Code'),
  data?: {
    fileName?: string(name='FileName'),
    fileUrl?: string(name='FileUrl'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetVideoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVideoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVideo  GetVideoRequest
  * @return GetVideoResponse
 */
async function getVideo(request: GetVideoRequest): GetVideoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVideo', 'GET', '/', 'json', false, 'json', request);
}

model GetVisitorLoginDetailsRequest {
  chatDeviceId: string(name='ChatDeviceId', description='This parameter is required.', example='4c51c9116c36537cb850dc1081d745df', position='Query'),
  instanceId?: string(name='InstanceId', example='ccc-test', position='Query'),
  token?: string(name='Token', example='9XYGTGWtq2wFi_Bpg7aUnIoYi_vG_rO3b***YtsxbHRHrYHlz1LDBLJAyZcLxieRQR4h_6AnWvTjJeNU5jgxzO*****bHwej7WgWrmA', position='Query'),
  visitorId: string(name='VisitorId', description='This parameter is required.', example='fcd020fe-d8e4-40e5-8c77-1a272a174a7d', position='Query'),
}

model GetVisitorLoginDetailsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    chatAppId?: string(name='ChatAppId', example='7pjxxx'),
    chatAppKey?: string(name='ChatAppKey', example='955e4bd7xxxxxxxxxxxxxd7898ba9fa0d0'),
    chatDeviceId?: string(name='ChatDeviceId', example='4c51c9116c36537cb850dc1081d745df'),
    chatLoginToken?: string(name='ChatLoginToken', example='{"accessToken":"oauth_cloud_key:+4oJXUAFSWxGD2YuRW4V/oUN0/8qJGNc0I*********n1E3DOr3Q3lX00ZnTpyqRi8Y6hYoLYA7n2ZkWuv485hVtXeSgnIQkKxXPbMgwoLxWaK//lI5Dn/mb4YuDifigv+ZyFzc+07vxm9ZFu/NjA==","accessTokenExpiredTime":86400000,"refreshToken":"oauth_cloud_key:/U+8UueDmpeUszhXC+SWow4pNLZp2C***********U/377BNXF+Mjo1lFgDk6GtEjNNoJpapX2mHH8GcRke2+yKQs/w4gAN9xSMn543Ciung+93pXV6IpQGbEVlu"}'),
    chatServerUrl?: string(name='ChatServerUrl', example='wss://wss.im.dingtalk.cn'),
    chatUserId?: string(name='ChatUserId', example='dac9c001****a15684ea91a81317'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='19D09CCC-F298-4124-849A-AFA217819011'),
}

model GetVisitorLoginDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVisitorLoginDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVisitorLoginDetails  GetVisitorLoginDetailsRequest
  * @return GetVisitorLoginDetailsResponse
 */
async function getVisitorLoginDetails(request: GetVisitorLoginDetailsRequest): GetVisitorLoginDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVisitorLoginDetails', 'POST', '/', 'json', false, 'json', request);
}

model GetVoicemailRecordingRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-12515239414412****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model GetVoicemailRecordingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    fileName?: string(name='FileName', example='voicemail.job-054ded02****.wav'),
    fileUrl?: string(name='FileUrl', example='https://ccc-v2-online.oss-cn-shanghai.aliyuncs.com/ccc-record-mixed/ccc-test/2022/06/voicemail.job-054ded02****.wav?Expires=1656074923&OSSAccessKeyId=****&Signature=****'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model GetVoicemailRecordingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetVoicemailRecordingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetVoicemailRecording  GetVoicemailRecordingRequest
  * @return GetVoicemailRecordingResponse
 */
async function getVoicemailRecording(request: GetVoicemailRecordingRequest): GetVoicemailRecordingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVoicemailRecording', 'POST', '/', 'json', false, 'json', request);
}

model HoldCallRequest {
  channelId: string(name='ChannelId', description='This parameter is required.', example='ch:customer:010123****->1318888****:1609255715825:job-6582589278232****', position='Query'),
  deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6582589278232****', position='Query'),
  music?: string(name='Music', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model HoldCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='8001****'),
          jobId?: string(name='JobId', example='job-6582589278232****'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609255716900'),
          userExtension?: string(name='UserExtension', example='8001****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6582589278232****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8001****'),
      heartbeat?: long(name='Heartbeat', example='1609255716908'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6582589278232****'),
      mobile?: string(name='Mobile', example='1390000****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609255715822'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='174F7777-2F6C-4F10-B889-C698E26C1AE0'),
}

model HoldCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HoldCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of HoldCall  HoldCallRequest
  * @return HoldCallResponse
 */
async function holdCall(request: HoldCallRequest): HoldCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HoldCall', 'POST', '/', 'json', false, 'json', request);
}

model ImportAdminsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ramIdList: string(name='RamIdList', description='This parameter is required.', example='["26972543893791****"]', position='Query'),
}

model ImportAdminsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      extension?: string(name='Extension', example='8021****'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      ramId?: string(name='RamId', example='26972543893791****'),
      roleId?: string(name='RoleId', example='Admin@ccc-test'),
      userId?: string(name='UserId', example='agent@ccc-test'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1CDB5C94-ACFB-59B5-85FE-C1DAF8049C63'),
}

model ImportAdminsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportAdminsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportAdmins  ImportAdminsRequest
  * @return ImportAdminsResponse
 */
async function importAdmins(request: ImportAdminsRequest): ImportAdminsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportAdmins', 'POST', '/', 'json', false, 'json', request);
}

model ImportContactFlowRequest {
  flowPackageData: string(name='FlowPackageData', description='This parameter is required.', example='{}', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Body'),
  requestId?: string(name='RequestId', example='DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE', position='Body'),
}

model ImportContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='27DD30C4-CAE2-481A-97CC-D3C54625341D'),
}

model ImportContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportContactFlow  ImportContactFlowRequest
  * @return ImportContactFlowResponse
 */
async function importContactFlow(request: ImportContactFlowRequest): ImportContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportContactFlow', 'POST', '/', 'json', true, 'form', request);
}

model ImportCorpNumbersRequest {
  city?: string(name='City', position='Query'),
  corpName?: string(name='CorpName', position='Query'),
  numberList: string(name='NumberList', description='This parameter is required.', example='[\\"02912345678\\"]', position='Query'),
  provider: string(name='Provider', description='This parameter is required.', position='Query'),
  province?: string(name='Province', position='Query'),
  tagList?: string(name='TagList', position='Query'),
}

model ImportCorpNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='C42981C7-93D9-55CD-B078-784F8522E0E1'),
}

model ImportCorpNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportCorpNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportCorpNumbers  ImportCorpNumbersRequest
  * @return ImportCorpNumbersResponse
 */
async function importCorpNumbers(request: ImportCorpNumbersRequest): ImportCorpNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportCorpNumbers', 'POST', '/', 'json', false, 'json', request);
}

model ImportCustomCallTaggingRequest {
  filePath: string(name='FilePath', description='This parameter is required.', example='temp/ImportCustomCallTagging.xlsx', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ImportCustomCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      item?: string(name='Item', example='1312121****'),
      reason?: string(name='Reason', example='CUSTOM_NUMBER_DUPLICATED'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ImportCustomCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportCustomCallTaggingResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ImportCustomCallTagging is deprecated, please use CCC::2020-07-01::ImportCustomCallTaggings instead.  * @param request  the request parameters of ImportCustomCallTagging  ImportCustomCallTaggingRequest
  * @return ImportCustomCallTaggingResponse
 */
// Deprecated
async function importCustomCallTagging(request: ImportCustomCallTaggingRequest): ImportCustomCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportCustomCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model ImportDoNotCallNumbersRequest {
  filePath?: string(name='FilePath', example='temp/blacklist/import/15772471154xxxx/ccc-test/20220315100340/blacklist.xlsx', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList?: string(name='NumberList', example='["1900000****","1312121****"]', position='Query'),
  remark?: string(name='Remark', position='Query'),
}

model ImportDoNotCallNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ImportDoNotCallNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportDoNotCallNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportDoNotCallNumbers  ImportDoNotCallNumbersRequest
  * @return ImportDoNotCallNumbersResponse
 */
async function importDoNotCallNumbers(request: ImportDoNotCallNumbersRequest): ImportDoNotCallNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportDoNotCallNumbers', 'POST', '/', 'json', false, 'json', request);
}

model ImportDocumentsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='b0eb2742-f37e-4c67-82d4-25c651c1c450', position='Body'),
  ossFileKey: string(name='OssFileKey', description='This parameter is required.', example='ccc-test/test-file.wav', position='Body'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model ImportDocumentsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='01B12EE4-6AF2-4730-8B78-EC15F4E5C025'),
}

model ImportDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportDocumentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportDocuments  ImportDocumentsRequest
  * @return ImportDocumentsResponse
 */
async function importDocuments(request: ImportDocumentsRequest): ImportDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportDocuments', 'POST', '/', 'json', true, 'form', request);
}

model InitiateAttendedTransferRequest {
  callPriority?: int32(name='CallPriority', position='Query'),
  deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  queuingOverflowThreshold?: long(name='QueuingOverflowThreshold', position='Query'),
  queuingTimeoutSeconds?: long(name='QueuingTimeoutSeconds', position='Query'),
  routingType?: string(name='RoutingType', position='Query'),
  strategyName?: string(name='StrategyName', position='Query'),
  strategyParams?: string(name='StrategyParams', position='Query'),
  tags?: string(name='Tags', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='60', position='Query'),
  transferee: string(name='Transferee', description='This parameter is required.', example='agent2@ccc-test', position='Query'),
  transfereeType?: string(name='TransfereeType', position='Query'),
  transferor?: string(name='Transferor', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model InitiateAttendedTransferResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:139xxxx0501->80326034:1609138902226:job-6538214103685****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='10'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='103655'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model InitiateAttendedTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InitiateAttendedTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InitiateAttendedTransfer  InitiateAttendedTransferRequest
  * @return InitiateAttendedTransferResponse
 */
async function initiateAttendedTransfer(request: InitiateAttendedTransferRequest): InitiateAttendedTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitiateAttendedTransfer', 'POST', '/', 'json', false, 'json', request);
}

model InterceptCallRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  interceptedUserId: string(name='InterceptedUserId', description='This parameter is required.', example='agent2@ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='60', minimum=0, maximum=3600, position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model InterceptCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='INTERCEPT'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='INTERCEPT'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='10'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model InterceptCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InterceptCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InterceptCall  InterceptCallRequest
  * @return InterceptCallResponse
 */
async function interceptCall(request: InterceptCallRequest): InterceptCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InterceptCall', 'POST', '/', 'json', false, 'json', request);
}

model LaunchAuthenticationRequest {
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='af145gfc-1108-4d55-8fca-f719bd512ebb', position='Query'),
  contactFlowVariables?: string(name='ContactFlowVariables', position='Query'),
  deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model LaunchAuthenticationResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='10'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model LaunchAuthenticationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LaunchAuthenticationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LaunchAuthentication  LaunchAuthenticationRequest
  * @return LaunchAuthenticationResponse
 */
async function launchAuthentication(request: LaunchAuthenticationRequest): LaunchAuthenticationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LaunchAuthentication', 'POST', '/', 'json', false, 'json', request);
}

model LaunchSurveyRequest {
  contactFlowId?: string(name='ContactFlowId', example='4685b65a-eb8f-11ec-8ea0-0242ac120002', position='Query'),
  contactFlowVariables?: string(name='ContactFlowVariables', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6580466654649****', position='Query'),
  smsMetadataId?: string(name='SmsMetadataId', example='4685b65a-eb8f-11ec-8ea0-0242ac120002', position='Query'),
  surveyChannel?: string(name='SurveyChannel', example='IVR', position='Query'),
  surveyTemplateId?: string(name='SurveyTemplateId', position='Query'),
  surveyTemplateVariables?: string(name='SurveyTemplateVariables', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model LaunchSurveyResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='1318888****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6580466654649****'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609250655922'),
          userExtension?: string(name='UserExtension', example='8001****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6580466654649****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='102323'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8001****'),
      heartbeat?: long(name='Heartbeat', example='1609250656122'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6580466654649****'),
      mobile?: string(name='Mobile', example='1390000****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609250655090'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='AF1E5957-5276-48FF-A6E6-347166A4ADCD'),
}

model LaunchSurveyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LaunchSurveyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LaunchSurvey  LaunchSurveyRequest
  * @return LaunchSurveyResponse
 */
async function launchSurvey(request: LaunchSurveyRequest): LaunchSurveyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LaunchSurvey', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentStateLogsRequest {
  agentId: string(name='AgentId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
  endTime?: long(name='EndTime', example='1620273600000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  startTime?: long(name='StartTime', example='1620230400000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListAgentStateLogsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      breakCode?: string(name='BreakCode'),
      duration?: long(name='Duration'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      startTime?: long(name='StartTime', example='1620259200000'),
      state?: string(name='State', example='Break'),
      stateCode?: string(name='StateCode', example='CHECK_IN_BREAK'),
      workMode?: string(name='WorkMode'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model ListAgentStateLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentStateLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAgentStateLogs  ListAgentStateLogsRequest
  * @return ListAgentStateLogsResponse
 */
async function listAgentStateLogs(request: ListAgentStateLogsRequest): ListAgentStateLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentStateLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentStatesRequest {
  agentIds?: string(name='AgentIds', example='agent@ccc-test', position='Query'),
  excludeOfflineUsers?: boolean(name='ExcludeOfflineUsers', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test', position='Query'),
  state?: string(name='State', example='Ready', position='Query'),
}

model ListAgentStatesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId', example='agent@ccc-test'),
        agentName?: string(name='AgentName'),
        breakCode?: string(name='BreakCode', example='Warm-up'),
        dn?: string(name='Dn', example='8030****'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        loginName?: string(name='LoginName', example='agent'),
        outboundScenario?: boolean(name='OutboundScenario', example='false'),
        state?: string(name='State', example='Ready'),
        stateDuration?: string(name='StateDuration', example='10'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716'),
  success?: boolean(name='Success', example='true'),
}

model ListAgentStatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentStatesResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListAgentStates is deprecated, please use CCC::2020-07-01::ListRealtimeAgentStates instead.  * @param request  the request parameters of ListAgentStates  ListAgentStatesRequest
  * @return ListAgentStatesResponse
 */
// Deprecated
async function listAgentStates(request: ListAgentStatesRequest): ListAgentStatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentStates', 'POST', '/', 'json', false, 'json', request);
}

model ListAgentSummaryReportsSinceMidnightRequest {
  agentIds?: string(name='AgentIds', example='["agent1@ccc-test", "agent2@ccc-test"]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test', position='Query'),
}

model ListAgentSummaryReportsSinceMidnightResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pagedAgentSummaryReport?: {
    list?: [ 
      {
        agentId?: string(name='AgentId', example='agent@ccc-test'),
        agentName?: string(name='AgentName'),
        inbound?: {
          averageRingTime?: long(name='AverageRingTime', example='0'),
          averageTalkTime?: long(name='AverageTalkTime', example='0'),
          averageWorkTime?: long(name='AverageWorkTime', example='0'),
          callsHandled?: long(name='CallsHandled', example='0'),
          callsOffered?: long(name='CallsOffered', example='0'),
          handleRate?: float(name='HandleRate', example='0'),
          maxRingTime?: long(name='MaxRingTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          serviceLevel20?: float(name='ServiceLevel20', example='0'),
          totalRingTime?: long(name='TotalRingTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        loginName?: string(name='LoginName', example='agent'),
        outbound?: {
          answerRate?: float(name='AnswerRate', example='0'),
          averageDialingTime?: long(name='AverageDialingTime', example='0'),
          averageTalkTime?: long(name='AverageTalkTime', example='0'),
          averageWorkTime?: long(name='AverageWorkTime', example='0'),
          callsAnswered?: long(name='CallsAnswered', example='0'),
          callsDialed?: long(name='CallsDialed', example='0'),
          maxDialingTime?: long(name='MaxDialingTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: string(name='MaxWorkTime', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalDialingTime?: long(name='TotalDialingTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime', example='0'),
          averageTalkTime?: long(name='AverageTalkTime', example='0'),
          averageWorkTime?: long(name='AverageWorkTime', example='0'),
          maxReadyTime?: long(name='MaxReadyTime', example='37'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          occupancyRate?: float(name='OccupancyRate', example='0'),
          oneTransferCalls?: long(name='OneTransferCalls', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalBreakTime?: long(name='TotalBreakTime', example='0'),
          totalCalls?: long(name='TotalCalls', example='0'),
          totalLoggedInTime?: long(name='TotalLoggedInTime', example='0'),
          totalReadyTime?: long(name='TotalReadyTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Overall'),
        skillGroupIds?: string(name='SkillGroupIds', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]'),
        skillGroupNames?: string(name='SkillGroupNames'),
        timestamp?: string(name='Timestamp', example='2018-09-13 00:00:00'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='PagedAgentSummaryReport'),
  requestId?: string(name='RequestId', example='27DD30C4-CAE2-481A-97CC-D3C54625341D'),
  success?: boolean(name='Success', example='true'),
}

model ListAgentSummaryReportsSinceMidnightResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentSummaryReportsSinceMidnightResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListAgentSummaryReportsSinceMidnight is deprecated, please use CCC::2020-07-01::ListHistoricalAgentReport instead.  * @param request  the request parameters of ListAgentSummaryReportsSinceMidnight  ListAgentSummaryReportsSinceMidnightRequest
  * @return ListAgentSummaryReportsSinceMidnightResponse
 */
// Deprecated
async function listAgentSummaryReportsSinceMidnight(request: ListAgentSummaryReportsSinceMidnightRequest): ListAgentSummaryReportsSinceMidnightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAgentSummaryReportsSinceMidnight', 'GET', '/', 'json', false, 'json', request);
}

model ListAttemptsRequest {
  agentId?: string(name='AgentId', example='agent@ccc-test', position='Query'),
  attemptId?: string(name='AttemptId', example='job-16976964500325****', position='Query'),
  callee?: string(name='Callee', example='1888888****', position='Query'),
  caller?: string(name='Caller', example='05711234****', position='Query'),
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  caseId: string(name='CaseId', description='This parameter is required.', example='60ecb1a2-4480-4d01-bede-c5b7655bfadf', position='Query'),
  contactId?: string(name='ContactId', example='job-16976964500325****', position='Query'),
  criteria?: string(name='Criteria', position='Query'),
  endTime?: long(name='EndTime', example='1634115698291', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  queueId?: string(name='QueueId', example='skillgroup@ccc-test', position='Query'),
  startTime?: long(name='StartTime', example='1634115688291', position='Query'),
}

model ListAttemptsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentEstablishedTime?: long(name='AgentEstablishedTime', example='1632883592732'),
        agentId?: string(name='AgentId', example='agent@ccc-test'),
        agentRingDuration?: long(name='AgentRingDuration', example='23'),
        assignAgentTime?: long(name='AssignAgentTime', example='1634196287869'),
        attemptId?: string(name='AttemptId', example='job-1704342174816****'),
        callee?: string(name='Callee', example='1888888****'),
        caller?: string(name='Caller', example='05711234****'),
        campaignId?: string(name='CampaignId', example='083046e3-5822-4cda-9b84-04f2a02eb605'),
        caseId?: string(name='CaseId', example='21d194a7-60b7-4824-932b-48ed03a83704'),
        contactId?: string(name='ContactId', example='job-1704342174816****'),
        customerEstablishedTime?: long(name='CustomerEstablishedTime', example='1634196286708'),
        customerReleasedTime?: long(name='CustomerReleasedTime', example='1634196317888'),
        dialDuration?: long(name='DialDuration', example='2734'),
        dialTime?: long(name='DialTime', example='1634196283974'),
        enqueueTime?: long(name='EnqueueTime', example='1634196287789'),
        enterIvrTime?: long(name='EnterIvrTime', example='1634196286740'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        ivrDuration?: long(name='IvrDuration', example='1049'),
        queueDuration?: long(name='QueueDuration', example='80'),
        queueId?: string(name='QueueId', example='skillgroup@ccc-test'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7CC6523B-0E51-1B62-8DA5-6A9831CAE315'),
}

model ListAttemptsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAttemptsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAttempts  ListAttemptsRequest
  * @return ListAttemptsResponse
 */
async function listAttempts(request: ListAttemptsRequest): ListAttemptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAttempts', 'GET', '/', 'json', false, 'json', request);
}

model ListAudioFilesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  status?: string(name='Status', position='Query'),
  usage?: string(name='Usage', position='Query'),
}

model ListAudioFilesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        audioFileName?: string(name='AudioFileName', example='test-file.wav'),
        audioResourceId?: string(name='AudioResourceId', example='d5cd7a94-3b6a-47d2-b7fd-0b1cd839bf77'),
        auditResult?: string(name='AuditResult'),
        createdTime?: string(name='CreatedTime', example='2021-03-05 17:35:45.0'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        name?: string(name='Name'),
        ossFileKey?: string(name='OssFileKey', example='ccc-test/test-file.wav'),
        status?: string(name='Status'),
        updatedTime?: string(name='UpdatedTime', example='2021-03-08 15:34:49.0'),
        usage?: string(name='Usage'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='53223330-EBF1-586B-A2CB-93C3B711FDA0'),
}

model ListAudioFilesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAudioFilesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAudioFiles  ListAudioFilesRequest
  * @return ListAudioFilesResponse
 */
async function listAudioFiles(request: ListAudioFilesRequest): ListAudioFilesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAudioFiles', 'POST', '/', 'json', false, 'json', request);
}

model ListBlacklistCallTaggingsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList: string(name='NumberList', description='This parameter is required.', example='[{"number":"1521083xxxx","jobId":"job-481841171213393920"}]', position='Query'),
}

model ListBlacklistCallTaggingsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      blacklisted?: boolean(name='Blacklisted', example='true'),
      jobId?: string(name='JobId', example='job-481841171213393920'),
      number?: string(name='Number', example='1521083xxxx'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='032C73C4-3A6F-4502-872B-4F5B41161C6E'),
}

model ListBlacklistCallTaggingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBlacklistCallTaggingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBlacklistCallTaggings  ListBlacklistCallTaggingsRequest
  * @return ListBlacklistCallTaggingsResponse
 */
async function listBlacklistCallTaggings(request: ListBlacklistCallTaggingsRequest): ListBlacklistCallTaggingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBlacklistCallTaggings', 'POST', '/', 'json', false, 'json', request);
}

model ListBriefSkillGroupsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', example='skillgroup', position='Query'),
}

model ListBriefSkillGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        description?: string(name='Description'),
        displayName?: string(name='DisplayName'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        mediaType?: string(name='MediaType'),
        phoneNumberCount?: int32(name='PhoneNumberCount', example='1'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='skillgroup'),
        userCount?: int32(name='UserCount', example='10'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3969FC68-CEC2-4398-B76A-60D2F7EDEBAF'),
}

model ListBriefSkillGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBriefSkillGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListBriefSkillGroups  ListBriefSkillGroupsRequest
  * @return ListBriefSkillGroupsResponse
 */
async function listBriefSkillGroups(request: ListBriefSkillGroupsRequest): ListBriefSkillGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBriefSkillGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListCallDetailRecordsRequest {
  agentId?: string(name='AgentId', example='agent@ccc-test', position='Query'),
  calledNumber?: string(name='CalledNumber', example='1320523****', position='Query'),
  callingNumber?: string(name='CallingNumber', example='07353988****', position='Query'),
  contactDisposition?: string(name='ContactDisposition', example='Success', position='Query'),
  contactDispositionList?: string(name='ContactDispositionList', example='["Success","NoAnswer"]', position='Query'),
  contactId?: string(name='ContactId', example='job-12515239414412****', position='Query'),
  contactType?: string(name='ContactType', example='Outbound', position='Query'),
  contactTypeList?: string(name='ContactTypeList', example='["Internal","Inbound"]', position='Query'),
  criteria?: string(name='Criteria', example='{"phoneNumber":"0735"}', position='Query'),
  earlyMediaStateList?: string(name='EarlyMediaStateList', example='["NotConnected","NoAnswer"]', position='Query'),
  endTime?: long(name='EndTime', example='1532707199000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  orderByField?: string(name='OrderByField', example='startTime', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  satisfactionDescriptionList?: string(name='SatisfactionDescriptionList', position='Query'),
  satisfactionList?: string(name='SatisfactionList', example='["1","3"]', position='Query'),
  satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel', example='IVR', position='Query'),
  skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test', position='Query'),
  sortOrder?: string(name='SortOrder', example='DESC', position='Query'),
  startTime?: long(name='StartTime', example='1532448000000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListCallDetailRecordsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        additionalBroker?: string(name='AdditionalBroker', example='0533128****'),
        agentIds?: string(name='AgentIds', example='agent@ccc-test'),
        agentNames?: string(name='AgentNames'),
        broker?: string(name='Broker', example='0533127****'),
        callDuration?: string(name='CallDuration', example='30'),
        callIds?: string(name='CallIds'),
        calledNumber?: string(name='CalledNumber', example='1332315****'),
        calleeLocation?: string(name='CalleeLocation'),
        callerLocation?: string(name='CallerLocation'),
        callingNumber?: string(name='CallingNumber', example='0533128****'),
        contactDisposition?: string(name='ContactDisposition', example='Success'),
        contactId?: string(name='ContactId', example='job-12515239414412****'),
        contactType?: string(name='ContactType', example='Outbound'),
        dialingTime?: long(name='DialingTime'),
        earlyMediaState?: string(name='EarlyMediaState', example='NotConnected'),
        establishedTime?: long(name='EstablishedTime', example='1532448000000'),
        heldTime?: long(name='HeldTime'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        ivrTime?: long(name='IvrTime', example='8'),
        queueTime?: long(name='QueueTime', example='0'),
        recordingDuration?: long(name='RecordingDuration', example='10'),
        recordingReady?: boolean(name='RecordingReady', example='true'),
        releaseInitiator?: string(name='ReleaseInitiator', example='customer'),
        releaseReason?: string(name='ReleaseReason'),
        releaseTime?: long(name='ReleaseTime', example='1532707199000'),
        ringTime?: long(name='RingTime', example='5'),
        satisfactionDescription?: string(name='SatisfactionDescription'),
        satisfactionIndex?: int32(name='SatisfactionIndex', example='1'),
        satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel', example='IVR'),
        satisfactionSurveyOffered?: boolean(name='SatisfactionSurveyOffered', example='true'),
        skillGroupIds?: string(name='SkillGroupIds', example='skillgroup@ccc-test'),
        skillGroupNames?: string(name='SkillGroupNames'),
        startTime?: long(name='StartTime', example='1532448000000'),
        talkTime?: long(name='TalkTime'),
        waitTime?: long(name='WaitTime', example='5'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListCallDetailRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCallDetailRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCallDetailRecords  ListCallDetailRecordsRequest
  * @return ListCallDetailRecordsResponse
 */
async function listCallDetailRecords(request: ListCallDetailRecordsRequest): ListCallDetailRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallDetailRecords', 'POST', '/', 'json', false, 'json', request);
}

model ListCallDetailRecordsV2Request {
  accessChannelTypeList?: string(name='AccessChannelTypeList', example='["Web","AliMe"]', position='Query'),
  agentId?: string(name='AgentId', example='agent@ccc-test', position='Query'),
  analyticsReportReady?: boolean(name='AnalyticsReportReady', position='Query'),
  broker?: string(name='Broker', example='021****4972', position='Query'),
  calledNumber?: string(name='CalledNumber', example='191***9993', position='Query'),
  callingNumber?: string(name='CallingNumber', example='191***9993', position='Query'),
  contactDispositionList?: string(name='ContactDispositionList', example='["Success","NoAnswer"]', position='Query'),
  contactIdList?: string(name='ContactIdList', example='["job-123456789","job-234567891"]', position='Query'),
  contactTypeList?: string(name='ContactTypeList', example='["INBOUND","OUTBOUND"]', position='Query'),
  earlyMediaStateList?: string(name='EarlyMediaStateList', example='["NotConnected","NoAnswer"]', position='Query'),
  endTime?: long(name='EndTime', example='1657879880010', minimum=0, maximum=4133952000000, position='Query'),
  firstAgentId?: string(name='FirstAgentId', example='agent@ccc-test', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', example='AUDIO', position='Query'),
  number?: string(name='Number', example='191***9993', position='Query'),
  orderByField?: string(name='OrderByField', example='startTime', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  releaseInitiatorList?: string(name='ReleaseInitiatorList', position='Query'),
  releaseReasonList?: string(name='ReleaseReasonList', position='Query'),
  satisfactionDescriptionList?: string(name='SatisfactionDescriptionList', position='Query'),
  satisfactionRateList?: string(name='SatisfactionRateList', example='["1","3"]', position='Query'),
  satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel', example='IVR', position='Query'),
  searchPattern?: string(name='SearchPattern', position='Query'),
  skillGroupIdList?: string(name='SkillGroupIdList', example='[
      "skg1@ccc-test",
      "skg2@ccc-test"
]', position='Query'),
  sortOrder?: string(name='SortOrder', example='DESC', position='Query'),
  startTime?: long(name='StartTime', example='1657853640015', minimum=0, maximum=4133952000000, position='Query'),
}

model ListCallDetailRecordsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        accessChannelName?: string(name='AccessChannelName'),
        accessChannelType?: string(name='AccessChannelType', example='Web'),
        accessChannelUserId?: string(name='AccessChannelUserId', example='test-user-id'),
        accessChannelUserName?: string(name='AccessChannelUserName'),
        additionalBroker?: string(name='AdditionalBroker', example='0533128****'),
        agentIds?: string(name='AgentIds', example='agent@ccc-test'),
        agentNames?: string(name='AgentNames'),
        analyticsReport?: {
          emotion?: {
            confidence?: int32(name='Confidence'),
            remark?: string(name='Remark'),
            success?: boolean(name='Success'),
            taskId?: string(name='TaskId'),
            type?: string(name='Type'),
          }(name='Emotion'),
          problemSolving?: {
            problem?: string(name='Problem'),
            solution?: string(name='Solution'),
            solved?: boolean(name='Solved'),
            success?: boolean(name='Success'),
            taskId?: string(name='TaskId'),
          }(name='ProblemSolving'),
          satisfaction?: {
            remark?: string(name='Remark'),
            satisfactionDescription?: string(name='SatisfactionDescription'),
            success?: boolean(name='Success'),
            taskId?: string(name='TaskId'),
          }(name='Satisfaction'),
          todoList?: {
            success?: boolean(name='Success'),
            taskId?: string(name='TaskId'),
            tasks?: [ string ](name='Tasks'),
          }(name='TodoList'),
        }(name='AnalyticsReport'),
        analyticsReportReady?: boolean(name='AnalyticsReportReady'),
        broker?: string(name='Broker', example='053xxxx3127'),
        callDuration?: string(name='CallDuration', example='16'),
        callIds?: string(name='CallIds'),
        calledNumber?: string(name='CalledNumber', example='1332315****'),
        calleeLocation?: string(name='CalleeLocation'),
        callerLocation?: string(name='CallerLocation'),
        callingNumber?: string(name='CallingNumber', example='0533128****'),
        clientAppName?: string(name='ClientAppName'),
        clientIpAddress?: string(name='ClientIpAddress', example='10.100.2.1'),
        clientLocation?: string(name='ClientLocation', example='---'),
        clientUserAgent?: string(name='ClientUserAgent', example='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36'),
        contactDisposition?: string(name='ContactDisposition', example='Success'),
        contactId?: string(name='ContactId', example='job-2255019651513856'),
        contactType?: string(name='ContactType', example='OUTBOUND'),
        dialingTime?: long(name='DialingTime', example='0'),
        earlyMediaState?: string(name='EarlyMediaState', example='NotConnected'),
        earlyMediaText?: string(name='EarlyMediaText'),
        establishedTime?: long(name='EstablishedTime', example='1532448000000'),
        firstResponseTime?: long(name='FirstResponseTime', example='10'),
        heldTime?: long(name='HeldTime', example='12'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        ivrTime?: long(name='IvrTime', example='8'),
        mediaType?: string(name='MediaType', example='CHAT'),
        messagesSent?: long(name='MessagesSent', example='10'),
        messagesSentByAgent?: long(name='MessagesSentByAgent', example='5'),
        messagesSentByCustomer?: long(name='MessagesSentByCustomer', example='5'),
        offSiteAgentIds?: string(name='OffSiteAgentIds', example='skg-default@ccc-test'),
        offsiteAgentDestinationNumbers?: string(name='OffsiteAgentDestinationNumbers', example='80312348'),
        offsiteAgentOriginatorNumbers?: string(name='OffsiteAgentOriginatorNumbers', example='0101257****'),
        queueTime?: long(name='QueueTime', example='0'),
        recordingDuration?: long(name='RecordingDuration', example='10'),
        recordingReady?: boolean(name='RecordingReady', example='true'),
        releaseInitiator?: string(name='ReleaseInitiator', example='customer'),
        releaseReason?: string(name='ReleaseReason', example='486:USER_BUSY'),
        releaseTime?: long(name='ReleaseTime', example='1532707199000'),
        ringTime?: long(name='RingTime', example='5'),
        satisfactionDescription?: string(name='SatisfactionDescription'),
        satisfactionIndex?: int32(name='SatisfactionIndex', example='1'),
        satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel', example='IVR'),
        satisfactionSurveyOffered?: boolean(name='SatisfactionSurveyOffered', example='true'),
        skillGroupIds?: string(name='SkillGroupIds', example='skg-default@ccc-test'),
        skillGroupNames?: string(name='SkillGroupNames'),
        startTime?: long(name='StartTime', example='1631440860000'),
        talkTime?: long(name='TalkTime', example='0'),
        transferCount?: long(name='TransferCount', example='1'),
        waitTime?: long(name='WaitTime', example='5'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='01B12EE4-6AF2-4730-8B78-EC15F4E5C025'),
}

model ListCallDetailRecordsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCallDetailRecordsV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCallDetailRecordsV2  ListCallDetailRecordsV2Request
  * @return ListCallDetailRecordsV2Response
 */
async function listCallDetailRecordsV2(request: ListCallDetailRecordsV2Request): ListCallDetailRecordsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallDetailRecordsV2', 'POST', '/', 'json', false, 'json', request);
}

model ListCallSummariesRequest {
  contactIdList?: [ string ](name='ContactIdList', shrink='json', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ListCallSummariesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      contactId?: string(name='ContactId', example='job-544789******759424'),
      context?: string(name='Context'),
      createdTime?: long(name='CreatedTime', example='1723449513735'),
      creator?: string(name='Creator', example='creator@ccc-test'),
      editor?: string(name='Editor', example='editor@ccc-test'),
      ticketId?: string(name='TicketId', example='ac0dd304-****-****-****-4a90010f0d38'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='932579BC-811A-503D-B322-4C2E57087CAA'),
}

model ListCallSummariesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCallSummariesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCallSummaries  ListCallSummariesRequest
  * @return ListCallSummariesResponse
 */
async function listCallSummaries(request: ListCallSummariesRequest): ListCallSummariesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallSummaries', 'POST', '/', 'json', false, 'json', request);
}

model ListCallTagsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
}

model ListCallTagsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        instanceId?: string(name='InstanceId', example='ccc-test'),
        tagName?: string(name='TagName', example='TagA'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ListCallTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCallTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCallTags  ListCallTagsRequest
  * @return ListCallTagsResponse
 */
async function listCallTags(request: ListCallTagsRequest): ListCallTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallTags', 'POST', '/', 'json', false, 'json', request);
}

model ListCampaignTrendingReportRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  endTime?: long(name='EndTime', example='2021-10-14 20:59:59', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  startTime?: long(name='StartTime', example='2021-10-14 00:00:00', position='Query'),
}

model ListCampaignTrendingReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      breakAgents?: long(name='BreakAgents', example='0'),
      breakingAgents?: long(name='BreakingAgents'),
      concurrency?: long(name='Concurrency', example='1'),
      datetime?: long(name='Datetime', example='1634037840000'),
      loggedInAgents?: long(name='LoggedInAgents', example='2'),
      outboundScenarioBreakingAgents?: long(name='OutboundScenarioBreakingAgents'),
      outboundScenarioReadyAgents?: long(name='OutboundScenarioReadyAgents'),
      outboundScenarioTalkingAgents?: long(name='OutboundScenarioTalkingAgents'),
      outboundScenarioWorkingAgents?: long(name='OutboundScenarioWorkingAgents'),
      readyAgents?: long(name='ReadyAgents', example='2'),
      statsTime?: long(name='StatsTime'),
      talkAgents?: long(name='TalkAgents', example='0'),
      talkingAgents?: long(name='TalkingAgents'),
      workAgents?: long(name='WorkAgents', example='0'),
      workingAgents?: long(name='WorkingAgents'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='6CCEF32F-8614-535F-A1D9-D85B8C0DC4F0'),
}

model ListCampaignTrendingReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCampaignTrendingReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCampaignTrendingReport  ListCampaignTrendingReportRequest
  * @return ListCampaignTrendingReportResponse
 */
async function listCampaignTrendingReport(request: ListCampaignTrendingReportRequest): ListCampaignTrendingReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCampaignTrendingReport', 'GET', '/', 'json', false, 'json', request);
}

model ListCampaignsRequest {
  actualStartTimeFrom?: string(name='ActualStartTimeFrom', example='2021-10-14 20:59:59', position='Query'),
  actualStartTimeTo?: string(name='ActualStartTimeTo', example='2021-10-14 20:59:59', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  name?: string(name='Name', example='test-campaign', position='Query'),
  pageNumber: long(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  planedStartTimeFrom?: string(name='PlanedStartTimeFrom', example='2021-10-14 00:00:00', position='Query'),
  planedStartTimeTo?: string(name='PlanedStartTimeTo', example='2021-10-14 20:59:59', position='Query'),
  queueId?: string(name='QueueId', example='skillgroup@ccc-test', position='Query'),
  state?: string(name='State', example='Draft', position='Query'),
}

model ListCampaignsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        actualEndTime?: long(name='ActualEndTime', example='1634008800000'),
        actualStartTime?: long(name='ActualStartTime', example='1634000460000'),
        campaignId?: string(name='CampaignId', example='6badb397-a8b5-40b6-21019d382a09'),
        casesAborted?: long(name='CasesAborted', example='0'),
        casesConnected?: long(name='CasesConnected', example='40'),
        casesUncompleted?: long(name='CasesUncompleted', example='0'),
        completionRate?: float(name='CompletionRate'),
        contactFlowId?: string(name='ContactFlowId'),
        maxAttemptCount?: long(name='MaxAttemptCount', example='1'),
        minAttemptInterval?: long(name='MinAttemptInterval', example='1'),
        name?: string(name='Name', example='test-campaign'),
        planedEndTime?: long(name='PlanedEndTime', example='1634054400000'),
        planedStartTime?: long(name='PlanedStartTime', example='1633968000000'),
        queueId?: string(name='QueueId', example='skillgroup@ccc-test'),
        queueName?: string(name='QueueName'),
        simulation?: boolean(name='Simulation', example='false'),
        state?: string(name='State', example='Completed'),
        strategyParameters?: string(name='StrategyParameters', example='{"ratio":1}'),
        strategyType?: string(name='StrategyType', example='PACING'),
        totalCases?: long(name='TotalCases', example='100'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='6CCEF32F-8614-535F-A1D9-D85B8C0DC4F0'),
  success?: boolean(name='Success', example='true'),
}

model ListCampaignsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCampaignsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCampaigns  ListCampaignsRequest
  * @return ListCampaignsResponse
 */
async function listCampaigns(request: ListCampaignsRequest): ListCampaignsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCampaigns', 'POST', '/', 'json', false, 'json', request);
}

model ListCasesRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: long(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  phoneNumber?: string(name='PhoneNumber', position='Query'),
  state?: string(name='State', position='Query'),
}

model ListCasesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        abandonPhase?: string(name='AbandonPhase'),
        abandonType?: string(name='AbandonType', example='NA'),
        attemptCount?: long(name='AttemptCount', example='1'),
        caseId?: string(name='CaseId', example='60ecb1a2-4480-4d01-bede-c5b7655bfadf'),
        customVariables?: string(name='CustomVariables'),
        failureReason?: string(name='FailureReason'),
        phoneNumber?: string(name='PhoneNumber', example='1888888****'),
        state?: string(name='State', example='Connected'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='100'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7CC6523B-0E51-1B62-8DA5-6A9831CAE316'),
}

model ListCasesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCasesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCases  ListCasesRequest
  * @return ListCasesResponse
 */
async function listCases(request: ListCasesRequest): ListCasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCases', 'POST', '/', 'json', false, 'json', request);
}

model ListCategoriesRequest {
  categoryId?: string(name='CategoryId', example='43c2671b-***-***-86d0-6bd187905cc8', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  type?: string(name='Type', example='Ticket', position='Query'),
}

model ListCategoriesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE'),
}

model ListCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCategoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCategories  ListCategoriesRequest
  * @return ListCategoriesResponse
 */
async function listCategories(request: ListCategoriesRequest): ListCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCategories', 'POST', '/', 'json', false, 'json', request);
}

model ListCommonTicketFieldsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ListCommonTicketFieldsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    createdTime?: string(name='CreatedTime', example='1703517780627'),
    id?: string(name='Id', description='Schema ID。', example='ticketing'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    properties?: map[string]DataPropertiesValue(name='Properties'),
    updatedTime?: string(name='UpdatedTime', example='1716211430928'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='30C7D235-DDCF-4C7F-A462-5E2598252C2B'),
}

model ListCommonTicketFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCommonTicketFieldsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCommonTicketFields  ListCommonTicketFieldsRequest
  * @return ListCommonTicketFieldsResponse
 */
async function listCommonTicketFields(request: ListCommonTicketFieldsRequest): ListCommonTicketFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommonTicketFields', 'POST', '/', 'json', false, 'json', request);
}

model ListConfigItemsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  objectId: string(name='ObjectId', description='This parameter is required.', example='ccc-test', position='Query'),
  objectType: string(name='ObjectType', description='This parameter is required.', example='INSTANCE', position='Query'),
}

model ListConfigItemsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId', example='ccc-test'),
      name?: string(name='Name', example='config-item'),
      objectId?: string(name='ObjectId', example='ccc-test'),
      objectType?: string(name='ObjectType', example='INSTANCE'),
      value?: string(name='Value', example='100'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListConfigItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConfigItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConfigItems  ListConfigItemsRequest
  * @return ListConfigItemsResponse
 */
async function listConfigItems(request: ListConfigItemsRequest): ListConfigItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConfigItems', 'POST', '/', 'json', false, 'json', request);
}

model ListContactFlowsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  orderByField?: string(name='OrderByField', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  sortOrder?: string(name='SortOrder', position='Query'),
  type?: string(name='Type', example='MAIN_FLOW', position='Query'),
}

model ListContactFlowsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        contactFlowId?: string(name='ContactFlowId', example='78128960-bb00-4ddc-8e82-923a8c5bd22d'),
        createdTime?: string(name='CreatedTime', example='2021-03-05 17:35:45.0'),
        definition?: string(name='Definition'),
        description?: string(name='Description', example='1.0'),
        draftId?: string(name='DraftId', example='db07c0bb-6b1f-47d2-b37e-2451c617562d'),
        editor?: string(name='Editor', example='ccc-test'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        name?: string(name='Name'),
        numberList?: [ string ](name='NumberList'),
        published?: boolean(name='Published', example='true'),
        type?: string(name='Type', example='MAIN_FLOW'),
        updatedTime?: string(name='UpdatedTime', example='2021-03-08 15:34:49.0'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListContactFlowsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListContactFlowsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListContactFlows  ListContactFlowsRequest
  * @return ListContactFlowsResponse
 */
async function listContactFlows(request: ListContactFlowsRequest): ListContactFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListContactFlows', 'POST', '/', 'json', false, 'json', request);
}

model ListCustomCallTaggingRequest {
  callTagNameList?: string(name='CallTagNameList', example='["TagA"]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', example='1312121****', position='Query'),
}

model ListCustomCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        callTagList?: [ 
          {
            instanceId?: string(name='InstanceId', example='ccc-test'),
            tagName?: string(name='TagName', example='TagA'),
          }
        ](name='CallTagList'),
        creator?: string(name='Creator', example='agent'),
        description?: string(name='Description'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        number?: string(name='Number', example='1312121****'),
        updateTime?: string(name='UpdateTime', example='2020-07-05 00:00:00.0'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ListCustomCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomCallTaggingResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListCustomCallTagging is deprecated, please use CCC::2020-07-01::ListCustomCallTaggings instead.  * @param request  the request parameters of ListCustomCallTagging  ListCustomCallTaggingRequest
  * @return ListCustomCallTaggingResponse
 */
// Deprecated
async function listCustomCallTagging(request: ListCustomCallTaggingRequest): ListCustomCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model ListDevicesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model ListDevicesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      callId?: string(name='CallId', example='d7b818c3-8d3a-732f-bc9e-1782wa16****'),
      contact?: string(name='Contact', example='sip:8032****@33.89.XX.XX:64189;transport=tcp;registering_acc=18_134_23_4'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      deviceType?: string(name='DeviceType'),
      expires?: long(name='Expires', example='1609118499750'),
      extension?: string(name='Extension', example='8032****'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      userId?: string(name='UserId', example='agent@ccc-test'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDevices  ListDevicesRequest
  * @return ListDevicesResponse
 */
async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDevices', 'POST', '/', 'json', false, 'json', request);
}

model ListDoNotCallNumbersRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  scope?: string(name='Scope', example='INSTANCE', position='Query'),
  searchPattern?: string(name='SearchPattern', example='RemarkA', position='Query'),
}

model ListDoNotCallNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        createTime?: long(name='CreateTime', example='1626962425000'),
        createdTime?: long(name='CreatedTime'),
        creator?: string(name='Creator', example='agent'),
        number?: string(name='Number', example='1900000****'),
        remark?: string(name='Remark'),
        scope?: string(name='Scope', example='INSTANCE'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ListDoNotCallNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDoNotCallNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDoNotCallNumbers  ListDoNotCallNumbersRequest
  * @return ListDoNotCallNumbersResponse
 */
async function listDoNotCallNumbers(request: ListDoNotCallNumbersRequest): ListDoNotCallNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDoNotCallNumbers', 'POST', '/', 'json', false, 'json', request);
}

model ListDocumentsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='d278629c-c687-4aa3-b044-4fe9b012e7ef', position='Body'),
  nextPageToken?: string(name='NextPageToken', example='eyJ0YWJsZUlkIjoiY2Y2MTQxYjA5NDY0NDUxMzk5YjFjMTA5YTMxZWNkMzEiLCJ0b2tlbiI6IjAwMDAwMDAwMDAwNzAzNzcifQ==', position='Body'),
  pageSize?: int32(name='PageSize', example='2', position='Body'),
  requestId?: string(name='RequestId', example='EAF3C248-E123-441B-A545-B6CD02E98EED', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
  searchPattern?: string(name='SearchPattern', position='Body'),
  sorts?: [ 
    {
      order?: string(name='Order', example='desc'),
      propertyName?: string(name='PropertyName', example='name'),
    }
  ](name='Sorts', shrink='json', position='Body'),
}

model ListDocumentsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    documents?: [  map[string]any ](name='Documents'),
    nextPageToken?: string(name='NextPageToken', example='54d1a616d95a4a01ba58967a9115b649'),
    schema?: {
      createdTime?: string(name='CreatedTime', example='2020-10-14T09:53:53Z'),
      deleted?: boolean(name='Deleted', example='false'),
      description?: string(name='Description', example='-'),
      id?: string(name='Id', description='schame id', example='profile'),
      instanceId?: string(name='InstanceId', example='87b12784-8ce2-40b6-b21f-c49cb3b5501e'),
      properties?: map[string]DataSchemaPropertiesValue(name='Properties'),
      updatedTime?: string(name='UpdatedTime', example='2020-10-14T09:53:53Z'),
    }(name='Schema', description='scheme'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model ListDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDocumentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDocuments  ListDocumentsRequest
  * @return ListDocumentsResponse
 */
async function listDocuments(request: ListDocumentsRequest): ListDocumentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDocuments', 'POST', '/', 'json', true, 'form', request);
}

model ListFlashSmsApplicationsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  providerId?: string(name='ProviderId', example='Uincall', position='Query'),
}

model ListFlashSmsApplicationsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        applicationId?: string(name='ApplicationId', example='71b396fa-***********-bd80e070b7c0'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        name?: string(name='Name'),
        providerId?: string(name='ProviderId', example='Uincall'),
        value?: string(name='Value', example='{"user":"600******_dev","pwd":"85abf3**********f494e","account":"6004******"}'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model ListFlashSmsApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlashSmsApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlashSmsApplications  ListFlashSmsApplicationsRequest
  * @return ListFlashSmsApplicationsResponse
 */
async function listFlashSmsApplications(request: ListFlashSmsApplicationsRequest): ListFlashSmsApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlashSmsApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListFlashSmsTemplatesRequest {
  applicationId?: string(name='ApplicationId', example='71b396fa-1*********-70b7c0', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  providerId?: string(name='ProviderId', example='Uincall', position='Query'),
}

model ListFlashSmsTemplatesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      templateId?: string(name='TemplateId', example='1715*****38'),
      templateName?: string(name='TemplateName'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model ListFlashSmsTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlashSmsTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlashSmsTemplates  ListFlashSmsTemplatesRequest
  * @return ListFlashSmsTemplatesResponse
 */
async function listFlashSmsTemplates(request: ListFlashSmsTemplatesRequest): ListFlashSmsTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlashSmsTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupChatMessagesRequest {
  instanceId?: string(name='InstanceId', example='ccc-test', position='Query'),
  jobId?: string(name='JobId', example='chat-65382141036853491', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='b2ad450b116e4f8396e58108acf5c020', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortOrder?: string(name='SortOrder', example='DESC', position='Query'),
}

model ListGroupChatMessagesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    messages?: [ 
      {
        content?: string(name='Content'),
        jobId?: string(name='JobId', example='chat-65382141036853491'),
        recalled?: boolean(name='Recalled', example='false'),
        senderAvatarUrl?: string(name='SenderAvatarUrl', example='http://xxxxx.com'),
        senderId?: string(name='SenderId', example='64bb4ececc34fc5ec1ca1153'),
        senderName?: string(name='SenderName', example='test-agent@test-instanceId'),
        senderType?: string(name='SenderType', example='CUSTOMER'),
        timestamp?: long(name='Timestamp', example='1696126980371'),
      }
    ](name='Messages'),
    nextPageToken?: string(name='NextPageToken', example='54d1a616d95a4a01ba58967a9115b649'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2263B273-AC1B-44EB-BA98-87F2322C6780'),
}

model ListGroupChatMessagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupChatMessagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroupChatMessages  ListGroupChatMessagesRequest
  * @return ListGroupChatMessagesResponse
 */
async function listGroupChatMessages(request: ListGroupChatMessagesRequest): ListGroupChatMessagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupChatMessages', 'POST', '/', 'json', false, 'json', request);
}

model ListHistoricalAgentReportRequest {
  agentIdList?: string(name='AgentIdList', example='["agent1@ccc-test", "agent2@ccc-test"]', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  skillGroupId?: string(name='SkillGroupId', position='Query'),
  startTime?: long(name='StartTime', example='1532448000000', minimum=0, maximum=4133952000000, position='Query'),
  stopTime?: long(name='StopTime', example='1532707199000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListHistoricalAgentReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId', example='agent1@ccc-test'),
        agentName?: string(name='AgentName'),
        back2Back?: {
          agentHandleRate?: string(name='AgentHandleRate'),
          answerRate?: string(name='AnswerRate'),
          averageCustomerRingTime?: string(name='AverageCustomerRingTime'),
          averageRingTime?: string(name='AverageRingTime'),
          averageTalkTime?: string(name='AverageTalkTime'),
          callsAgentHandled?: string(name='CallsAgentHandled'),
          callsAnswered?: string(name='CallsAnswered'),
          callsCustomerAnswered?: string(name='CallsCustomerAnswered'),
          callsDialed?: string(name='CallsDialed'),
          customerAnswerRate?: string(name='CustomerAnswerRate'),
          maxCustomerRingTime?: string(name='MaxCustomerRingTime'),
          maxRingTime?: string(name='MaxRingTime'),
          maxTalkTime?: string(name='MaxTalkTime'),
          totalCustomerRingTime?: string(name='TotalCustomerRingTime'),
          totalRingTime?: string(name='TotalRingTime'),
          totalTalkTime?: string(name='TotalTalkTime'),
        }(name='Back2Back'),
        displayId?: string(name='DisplayId', example='001'),
        inbound?: {
          accessChannelTypeDetails?: [ 
            {
              accessChannelType?: string(name='AccessChannelType'),
              callsOffered?: long(name='CallsOffered'),
            }
          ](name='AccessChannelTypeDetails'),
          averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
          averageHoldTime?: float(name='AverageHoldTime', example='0'),
          averageResponseTime?: float(name='AverageResponseTime'),
          averageRingTime?: float(name='AverageRingTime', example='0'),
          averageTalkTime?: float(name='AverageTalkTime', example='0'),
          averageWorkTime?: float(name='AverageWorkTime', example='0'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
          callsHandled?: long(name='CallsHandled', example='0'),
          callsHold?: long(name='CallsHold', example='0'),
          callsOffered?: long(name='CallsOffered', example='0'),
          callsRinged?: long(name='CallsRinged', example='0'),
          handleRate?: float(name='HandleRate', example='0'),
          maxHoldTime?: long(name='MaxHoldTime', example='0'),
          maxRingTime?: long(name='MaxRingTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionRate?: float(name='SatisfactionRate', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          serviceLevel15?: float(name='ServiceLevel15'),
          totalHoldTime?: long(name='TotalHoldTime', example='0'),
          totalMessagesSent?: long(name='TotalMessagesSent'),
          totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
          totalMessagesSentByCustomer?: string(name='TotalMessagesSentByCustomer'),
          totalRingTime?: long(name='TotalRingTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Inbound'),
        internal?: {
          averageTalkTime?: float(name='AverageTalkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          callsTalked?: long(name='CallsTalked'),
          maxTalkTime?: long(name='MaxTalkTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
        }(name='Internal'),
        outbound?: {
          answerRate?: float(name='AnswerRate', example='0'),
          averageDialingTime?: float(name='AverageDialingTime', example='0'),
          averageHoldTime?: float(name='AverageHoldTime', example='0'),
          averageRingTime?: float(name='AverageRingTime', example='0'),
          averageTalkTime?: float(name='AverageTalkTime', example='0'),
          averageWorkTime?: float(name='AverageWorkTime', example='0'),
          callsAnswered?: long(name='CallsAnswered', example='0'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
          callsDialed?: long(name='CallsDialed', example='0'),
          callsHold?: long(name='CallsHold', example='0'),
          callsRinged?: long(name='CallsRinged', example='0'),
          maxDialingTime?: long(name='MaxDialingTime', example='0'),
          maxHoldTime?: long(name='MaxHoldTime', example='0'),
          maxRingTime?: long(name='MaxRingTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionRate?: float(name='SatisfactionRate', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalDialingTime?: long(name='TotalDialingTime', example='0'),
          totalHoldTime?: long(name='TotalHoldTime', example='0'),
          totalRingTime?: long(name='TotalRingTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Outbound'),
        overall?: {
          averageBreakTime?: float(name='AverageBreakTime', example='0'),
          averageHoldTime?: float(name='AverageHoldTime', example='0'),
          averageReadyTime?: float(name='AverageReadyTime', example='0'),
          averageTalkTime?: float(name='AverageTalkTime', example='0'),
          averageWorkTime?: float(name='AverageWorkTime', example='0'),
          breakCodeDetailList?: [ 
            {
              breakCode?: string(name='BreakCode'),
              count?: long(name='Count'),
              duration?: long(name='Duration'),
            }
          ](name='BreakCodeDetailList'),
          firstCheckInTime?: long(name='FirstCheckInTime'),
          lastCheckOutTime?: long(name='LastCheckOutTime'),
          maxBreakTime?: long(name='MaxBreakTime', example='0'),
          maxHoldTime?: long(name='MaxHoldTime', example='0'),
          maxReadyTime?: long(name='MaxReadyTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          occupancyRate?: float(name='OccupancyRate', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionRate?: float(name='SatisfactionRate', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalBreakTime?: long(name='TotalBreakTime', example='0'),
          totalCalls?: long(name='TotalCalls', example='0'),
          totalHoldTime?: long(name='TotalHoldTime', example='0'),
          totalLoggedInTime?: long(name='TotalLoggedInTime', example='0'),
          totalOffSiteLoggedInTime?: long(name='TotalOffSiteLoggedInTime'),
          totalOffSiteOnlineTime?: long(name='TotalOffSiteOnlineTime', example='已弃用，请使用TotalOffSiteLoggedInTime代替此参数'),
          totalOfficePhoneLoggedInTime?: long(name='TotalOfficePhoneLoggedInTime'),
          totalOfficePhoneOnlineTime?: long(name='TotalOfficePhoneOnlineTime', example='已弃用，请使用TotalOfficePhoneLoggedInTime代替此参数'),
          totalOnSiteLoggedInTime?: long(name='TotalOnSiteLoggedInTime'),
          totalOnSiteOnlineTime?: long(name='TotalOnSiteOnlineTime', example='已弃用，请使用TotalOnSiteLoggedInTime代替此参数'),
          totalOutboundScenarioLoggedInTime?: long(name='TotalOutboundScenarioLoggedInTime'),
          totalOutboundScenarioReadyTime?: long(name='TotalOutboundScenarioReadyTime'),
          totalOutboundScenarioTime?: long(name='TotalOutboundScenarioTime', example='已弃用，请使用TotalOutboundScenarioLoggedInTime代替此参数'),
          totalReadyTime?: long(name='TotalReadyTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Overall'),
        skillGroupIds?: string(name='SkillGroupIds', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]'),
        skillGroupNames?: string(name='SkillGroupNames'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListHistoricalAgentReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHistoricalAgentReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHistoricalAgentReport  ListHistoricalAgentReportRequest
  * @return ListHistoricalAgentReportResponse
 */
async function listHistoricalAgentReport(request: ListHistoricalAgentReportRequest): ListHistoricalAgentReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHistoricalAgentReport', 'POST', '/', 'json', true, 'form', request);
}

model ListHistoricalAgentSkillGroupReportRequest {
  agentIdList?: string(name='AgentIdList', example='["agent1@ccc-test", "agent2@ccc-test"]', position='Body'),
  endTime?: long(name='EndTime', example='1620273600000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  skillGroupIdList?: string(name='SkillGroupIdList', example='[
      "skg1@ccc-test",
      "skg2@ccc-test"
]', position='Query'),
  startTime?: long(name='StartTime', example='1634140800000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListHistoricalAgentSkillGroupReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId', example='agent1@ccc-test'),
        agentName?: string(name='AgentName'),
        back2Back?: {
          agentAnswerRate?: float(name='AgentAnswerRate', example='0.5'),
          agentHandleRate?: float(name='AgentHandleRate'),
          answerRate?: float(name='AnswerRate', example='0.6'),
          averageCustomerRingTime?: float(name='AverageCustomerRingTime', example='100'),
          averageRingTime?: float(name='AverageRingTime', example='100'),
          averageTalkTime?: long(name='AverageTalkTime', example='100'),
          callsAgentHandled?: long(name='CallsAgentHandled'),
          callsAnswered?: long(name='CallsAnswered', example='100'),
          callsCustomerAnswered?: long(name='CallsCustomerAnswered'),
          callsCustomerHandled?: long(name='CallsCustomerHandled', example='100'),
          callsDialed?: long(name='CallsDialed', example='100'),
          customerAnswerRate?: float(name='CustomerAnswerRate'),
          customerHandleRate?: float(name='CustomerHandleRate', example='0.5'),
          maxCustomerRingTime?: long(name='MaxCustomerRingTime', example='100'),
          maxRingTime?: long(name='MaxRingTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          totalCustomerRingTime?: long(name='TotalCustomerRingTime', example='100'),
          totalRingTime?: long(name='TotalRingTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
        }(name='Back2Back'),
        displayId?: string(name='DisplayId', example='1001'),
        inbound?: {
          averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
          averageHoldTime?: float(name='AverageHoldTime', example='100'),
          averageResponseTime?: float(name='AverageResponseTime'),
          averageRingTime?: float(name='AverageRingTime', example='100'),
          averageTalkTime?: float(name='AverageTalkTime', example='100'),
          averageWorkTime?: float(name='AverageWorkTime', example='100'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='100'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='100'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='100'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='100'),
          callsHandled?: long(name='CallsHandled', example='100'),
          callsHold?: long(name='CallsHold', example='100'),
          callsOffered?: long(name='CallsOffered', example='100'),
          callsRinged?: long(name='CallsRinged', example='100'),
          handleRate?: float(name='HandleRate', example='100'),
          maxHoldTime?: long(name='MaxHoldTime', example='100'),
          maxRingTime?: long(name='MaxRingTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          maxWorkTime?: long(name='MaxWorkTime', example='100'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='100'),
          satisfactionRate?: float(name='SatisfactionRate', example='0.5'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='100'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='100'),
          totalHoldTime?: long(name='TotalHoldTime', example='100'),
          totalMessagesSent?: long(name='TotalMessagesSent'),
          totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
          totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
          totalRingTime?: long(name='TotalRingTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
          totalWorkTime?: long(name='TotalWorkTime', example='100'),
        }(name='Inbound'),
        internal?: {
          averageTalkTime?: long(name='AverageTalkTime', example='100'),
          callsAnswered?: long(name='CallsAnswered', example='100'),
          callsDialed?: long(name='CallsDialed', example='100'),
          callsHandled?: long(name='CallsHandled', example='100'),
          callsOffered?: long(name='CallsOffered', example='100'),
          callsTalk?: long(name='CallsTalk', example='100'),
          callsTalked?: long(name='CallsTalked'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
        }(name='Internal'),
        outbound?: {
          answerRate?: float(name='AnswerRate', example='0.5'),
          averageDialingTime?: float(name='AverageDialingTime', example='100'),
          averageHoldTime?: float(name='AverageHoldTime', example='100'),
          averageRingTime?: float(name='AverageRingTime', example='100'),
          averageTalkTime?: float(name='AverageTalkTime', example='100'),
          averageWorkTime?: float(name='AverageWorkTime', example='100'),
          callsAnswered?: long(name='CallsAnswered', example='100'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='100'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='100'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='100'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='100'),
          callsDialed?: long(name='CallsDialed', example='100'),
          callsHold?: long(name='CallsHold', example='100'),
          callsRinged?: long(name='CallsRinged', example='100'),
          maxDialingTime?: long(name='MaxDialingTime', example='100'),
          maxHoldTime?: long(name='MaxHoldTime', example='100'),
          maxRingTime?: long(name='MaxRingTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          maxWorkTime?: long(name='MaxWorkTime', example='100'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='1.4'),
          satisfactionRate?: float(name='SatisfactionRate', example='0.5'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='100'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='100'),
          totalDialingTime?: long(name='TotalDialingTime', example='100'),
          totalHoldTime?: long(name='TotalHoldTime', example='100'),
          totalRingTime?: long(name='TotalRingTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
          totalWorkTime?: long(name='TotalWorkTime', example='100'),
        }(name='Outbound'),
        overall?: {
          averageBreakTime?: float(name='AverageBreakTime', example='100'),
          averageHoldTime?: float(name='AverageHoldTime', example='100'),
          averageReadyTime?: float(name='AverageReadyTime', example='100'),
          averageTalkTime?: float(name='AverageTalkTime', example='100'),
          averageWorkTime?: float(name='AverageWorkTime', example='100'),
          breakCodeDetailList?: [ 
            {
              breakCode?: string(name='BreakCode'),
              count?: long(name='Count', example='1'),
              duration?: long(name='Duration', example='100'),
            }
          ](name='BreakCodeDetailList'),
          firstCheckInTime?: long(name='FirstCheckInTime', example='1686030515000'),
          lastCheckOutTime?: long(name='LastCheckOutTime', example='1686030515000'),
          maxBreakTime?: long(name='MaxBreakTime', example='100'),
          maxHoldTime?: long(name='MaxHoldTime', example='100'),
          maxReadyTime?: long(name='MaxReadyTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          maxWorkTime?: long(name='MaxWorkTime', example='100'),
          occupancyRate?: float(name='OccupancyRate', example='0.5'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='1.4'),
          satisfactionRate?: float(name='SatisfactionRate', example='0.5'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='100'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='100'),
          totalBreakTime?: long(name='TotalBreakTime', example='100'),
          totalCalls?: long(name='TotalCalls', example='100'),
          totalHoldTime?: long(name='TotalHoldTime', example='100'),
          totalLoggedInTime?: long(name='TotalLoggedInTime', example='100'),
          totalOffSiteLggedInTime?: long(name='TotalOffSiteLggedInTime'),
          totalOfficePhoneLoggedInTime?: long(name='TotalOfficePhoneLoggedInTime'),
          totalOnSiteLoggedInTime?: string(name='TotalOnSiteLoggedInTime'),
          totalOutboundScenarioLoggedInTime?: long(name='TotalOutboundScenarioLoggedInTime'),
          totalOutboundScenarioReadyTime?: long(name='TotalOutboundScenarioReadyTime', example='100'),
          totalOutboundScenarioTime?: long(name='TotalOutboundScenarioTime', example='100'),
          totalReadyTime?: long(name='TotalReadyTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
          totalWorkTime?: long(name='TotalWorkTime', example='100'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup1@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='Default'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ListHistoricalAgentSkillGroupReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHistoricalAgentSkillGroupReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHistoricalAgentSkillGroupReport  ListHistoricalAgentSkillGroupReportRequest
  * @return ListHistoricalAgentSkillGroupReportResponse
 */
async function listHistoricalAgentSkillGroupReport(request: ListHistoricalAgentSkillGroupReportRequest): ListHistoricalAgentSkillGroupReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHistoricalAgentSkillGroupReport', 'POST', '/', 'json', true, 'form', request);
}

model ListHistoricalSkillGroupReportRequest {
  endTime?: long(name='EndTime', example='1532707199000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', minimum=1, maximum=100, position='Query'),
  skillGroupIdList?: string(name='SkillGroupIdList', example='["skillgroup1@ccc-test", "skillgroup2@ccc-test2"]', position='Body'),
  startTime?: long(name='StartTime', example='1532448000000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListHistoricalSkillGroupReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        back2Back?: {
          agentHandleRate?: float(name='AgentHandleRate'),
          answerRate?: float(name='AnswerRate'),
          averageCustomerRingTime?: float(name='AverageCustomerRingTime'),
          averageRingTime?: float(name='AverageRingTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsCustomerAnswered?: long(name='CallsCustomerAnswered'),
          callsDialed?: long(name='CallsDialed'),
          customerAnswerRate?: float(name='CustomerAnswerRate'),
          maxCustomerRingTime?: long(name='MaxCustomerRingTime'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          totalCustomerRingTime?: long(name='TotalCustomerRingTime'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
        }(name='Back2Back'),
        inbound?: {
          abandonRate?: float(name='AbandonRate', example='0'),
          accessChannelTypeDetails?: [ 
            {
              accessChannelType?: string(name='AccessChannelType'),
              callsOffered?: long(name='CallsOffered'),
            }
          ](name='AccessChannelTypeDetails'),
          averageAbandonTime?: float(name='AverageAbandonTime', example='0'),
          averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime', example='0'),
          averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime', example='0'),
          averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
          averageHoldTime?: float(name='AverageHoldTime', example='0'),
          averageResponseTime?: float(name='AverageResponseTime'),
          averageRingTime?: float(name='AverageRingTime', example='5'),
          averageTalkTime?: float(name='AverageTalkTime', example='64'),
          averageWaitTime?: float(name='AverageWaitTime', example='5'),
          averageWorkTime?: float(name='AverageWorkTime', example='13'),
          callsAbandoned?: long(name='CallsAbandoned', example='0'),
          callsAbandonedInQueue?: long(name='CallsAbandonedInQueue', example='0'),
          callsAbandonedInRing?: long(name='CallsAbandonedInRing', example='0'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
          callsHandled?: long(name='CallsHandled', example='7'),
          callsHold?: long(name='CallsHold', example='0'),
          callsOffered?: long(name='CallsOffered', example='7'),
          callsOverflow?: long(name='CallsOverflow', example='0'),
          callsQueued?: long(name='CallsQueued', example='7'),
          callsQueuingFailed?: long(name='CallsQueuingFailed'),
          callsQueuingOverflow?: long(name='CallsQueuingOverflow'),
          callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
          callsRinged?: long(name='CallsRinged', example='7'),
          callsTimeout?: long(name='CallsTimeout', example='0'),
          handleRate?: float(name='HandleRate', example='1'),
          maxAbandonTime?: long(name='MaxAbandonTime', example='0'),
          maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime', example='0'),
          maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime', example='0'),
          maxHoldTime?: long(name='MaxHoldTime', example='0'),
          maxRingTime?: long(name='MaxRingTime', example='12'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWaitTime?: long(name='MaxWaitTime', example='13'),
          maxWorkTime?: long(name='MaxWorkTime', example='12'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionRate?: float(name='SatisfactionRate', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          serviceLevel15?: float(name='ServiceLevel15'),
          serviceLevel20?: float(name='ServiceLevel20', example='0'),
          serviceLevel30?: float(name='ServiceLevel30'),
          totalAbandonTime?: long(name='TotalAbandonTime', example='0'),
          totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime', example='0'),
          totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime', example='0'),
          totalHoldTime?: long(name='TotalHoldTime', example='0'),
          totalMessagesSent?: long(name='TotalMessagesSent'),
          totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
          totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
          totalRingTime?: long(name='TotalRingTime', example='32'),
          totalTalkTime?: long(name='TotalTalkTime', example='447'),
          totalWaitTime?: long(name='TotalWaitTime', example='34'),
          totalWorkTime?: long(name='TotalWorkTime', example='85'),
        }(name='Inbound'),
        outbound?: {
          answerRate?: float(name='AnswerRate', example='0'),
          averageDialingTime?: float(name='AverageDialingTime', example='37'),
          averageHoldTime?: float(name='AverageHoldTime', example='0'),
          averageRingTime?: float(name='AverageRingTime', example='0'),
          averageTalkTime?: float(name='AverageTalkTime', example='3'),
          averageWorkTime?: float(name='AverageWorkTime', example='2'),
          callsAnswered?: long(name='CallsAnswered', example='1'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
          callsDialed?: long(name='CallsDialed', example='6'),
          callsHold?: long(name='CallsHold', example='0'),
          callsRinged?: long(name='CallsRinged', example='0'),
          maxDialingTime?: long(name='MaxDialingTime', example='12'),
          maxHoldTime?: long(name='MaxHoldTime', example='0'),
          maxRingTime?: long(name='MaxRingTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionRate?: float(name='SatisfactionRate', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalDialingTime?: long(name='TotalDialingTime', example='218'),
          totalHoldTime?: long(name='TotalHoldTime', example='0'),
          totalRingTime?: long(name='TotalRingTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='3'),
          totalWorkTime?: long(name='TotalWorkTime', example='9'),
        }(name='Outbound'),
        overall?: {
          averageBreakTime?: float(name='AverageBreakTime', example='0'),
          averageHoldTime?: float(name='AverageHoldTime', example='0'),
          averageReadyTime?: float(name='AverageReadyTime', example='0'),
          averageTalkTime?: float(name='AverageTalkTime', example='0'),
          averageWorkTime?: float(name='AverageWorkTime', example='8'),
          breakCodeDetailList?: [ 
            {
              breakCode?: string(name='BreakCode'),
              count?: long(name='Count'),
              duration?: long(name='Duration'),
            }
          ](name='BreakCodeDetailList'),
          maxBreakTime?: long(name='MaxBreakTime', example='1'),
          maxHoldTime?: long(name='MaxHoldTime', example='0'),
          maxReadyTime?: long(name='MaxReadyTime', example='19328'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='12'),
          occupancyRate?: float(name='OccupancyRate', example='0.02332222293912065'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionRate?: float(name='SatisfactionRate', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalBreakTime?: long(name='TotalBreakTime', example='3'),
          totalCalls?: long(name='TotalCalls', example='13'),
          totalHoldTime?: long(name='TotalHoldTime', example='0'),
          totalLoggedInTime?: long(name='TotalLoggedInTime', example='23218'),
          totalReadyTime?: long(name='TotalReadyTime', example='22428'),
          totalTalkTime?: long(name='TotalTalkTime', example='449'),
          totalWorkTime?: long(name='TotalWorkTime', example='94'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='skillgroup'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='4'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='26A34338-5CD9-4C95-A7A6-5BDCE76C6B94'),
}

model ListHistoricalSkillGroupReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHistoricalSkillGroupReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListHistoricalSkillGroupReport  ListHistoricalSkillGroupReportRequest
  * @return ListHistoricalSkillGroupReportResponse
 */
async function listHistoricalSkillGroupReport(request: ListHistoricalSkillGroupReportRequest): ListHistoricalSkillGroupReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHistoricalSkillGroupReport', 'POST', '/', 'json', true, 'form', request);
}

model ListInstancesRequest {
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        adminList?: [ 
          {
            displayName?: string(name='DisplayName'),
            email?: string(name='Email', example='username@example.com'),
            extension?: string(name='Extension', example='8032****'),
            instanceId?: string(name='InstanceId', example='ccc-test'),
            loginName?: string(name='LoginName', example='agent'),
            mobile?: string(name='Mobile', example='1382114****'),
            roleId?: string(name='RoleId', example='Admin@ccc-test'),
            roleName?: string(name='RoleName', example='Admin'),
            userId?: string(name='UserId', example='agent@ccc-test'),
            workMode?: string(name='WorkMode', example='ON_SITE'),
          }
        ](name='AdminList'),
        aliyunUid?: string(name='AliyunUid', example='157123456789****'),
        consoleUrl?: string(name='ConsoleUrl', example='https://ccc-v2.aliyun.com/#/workbench/ccc-test'),
        createTime?: long(name='CreateTime', example='1624679747000'),
        description?: string(name='Description'),
        domainName?: string(name='DomainName', example='ccc-test'),
        id?: string(name='Id', example='ccc-test'),
        name?: string(name='Name'),
        numberList?: [ 
          {
            number?: string(name='Number', example='0830011****'),
          }
        ](name='NumberList'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='26A34338-5CD9-4C95-A7A6-5BDCE76C6B94'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesOfUserRequest {
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
}

model ListInstancesOfUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        adminList?: [ 
          {
            displayName?: string(name='DisplayName'),
            email?: string(name='Email', example='username@example.com'),
            extension?: string(name='Extension', example='8032****'),
            instanceId?: string(name='InstanceId', example='ccc-test'),
            loginName?: string(name='LoginName', example='agent'),
            mobile?: string(name='Mobile', example='1382114****'),
            roleId?: string(name='RoleId', example='Admin@ccc-test'),
            roleName?: string(name='RoleName', example='Admin'),
            userId?: string(name='UserId', example='agent@ccc-test'),
            workMode?: string(name='WorkMode', example='ON_SITE'),
          }
        ](name='AdminList'),
        aliyunUid?: string(name='AliyunUid', example='157123456789****'),
        consoleUrl?: string(name='ConsoleUrl', example='https://ccc-v2.aliyun.com/#/workbench/ccc-test'),
        description?: string(name='Description'),
        domainName?: string(name='DomainName', example='ccc-test'),
        id?: string(name='Id', example='ccc-test'),
        name?: string(name='Name'),
        numberList?: [ 
          {
            active?: boolean(name='Active', example='true'),
            city?: string(name='City'),
            contactFlowId?: string(name='ContactFlowId', example='a3fb6c62-9b49-4942-ae5b-cf2abd4123ek'),
            instanceId?: string(name='InstanceId', example='ccc-test'),
            number?: string(name='Number', example='0830011****'),
            province?: string(name='Province'),
            skillGroups?: [ 
              {
                description?: string(name='Description'),
                displayName?: string(name='DisplayName'),
                instanceId?: string(name='InstanceId', example='ccc-test'),
                name?: string(name='Name', example='skillgroup'),
                phoneNumberCount?: int32(name='PhoneNumberCount', example='1'),
                skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
                userCount?: int32(name='UserCount', example='2'),
              }
            ](name='SkillGroups'),
            usage?: string(name='Usage', example='Bidirection'),
            userId?: string(name='UserId', example='agent@ccc-test'),
          }
        ](name='NumberList'),
        status?: string(name='Status', example='RUNNING'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3969FC68-CEC2-4398-B76A-60D2F7EDEBAF'),
}

model ListInstancesOfUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesOfUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstancesOfUser  ListInstancesOfUserRequest
  * @return ListInstancesOfUserResponse
 */
async function listInstancesOfUser(request: ListInstancesOfUserRequest): ListInstancesOfUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancesOfUser', 'POST', '/', 'json', false, 'json', request);
}

model ListIntervalAgentReportRequest {
  agentId: string(name='AgentId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
  endTime?: long(name='EndTime', example='1532707199000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  interval?: string(name='Interval', example='Hourly', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  startTime?: long(name='StartTime', example='1532448000000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListIntervalAgentReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      back2Back?: {
        agentHandleRate?: float(name='AgentHandleRate'),
        answerRate?: float(name='AnswerRate'),
        averageCustomerRingTime?: float(name='AverageCustomerRingTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        callsAgentHandled?: long(name='CallsAgentHandled'),
        callsAnswered?: long(name='CallsAnswered'),
        callsCustomerAnswered?: long(name='CallsCustomerAnswered'),
        callsDialed?: long(name='CallsDialed'),
        customerAnswerRate?: float(name='CustomerAnswerRate'),
        maxCustomerRingTime?: long(name='MaxCustomerRingTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        totalCustomerRingTime?: long(name='TotalCustomerRingTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
      }(name='Back2Back'),
      inbound?: {
        accessChannelTypeDetails?: [ 
          {
            accessChannelType?: string(name='AccessChannelType'),
            callsOffered?: long(name='CallsOffered'),
          }
        ](name='AccessChannelTypeDetails'),
        averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageResponseTime?: float(name='AverageResponseTime'),
        averageRingTime?: float(name='AverageRingTime', example='0'),
        averageTalkTime?: float(name='AverageTalkTime', example='0'),
        averageWorkTime?: float(name='AverageWorkTime', example='0'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
        callsHandled?: long(name='CallsHandled', example='0'),
        callsHold?: long(name='CallsHold', example='0'),
        callsOffered?: long(name='CallsOffered', example='0'),
        callsRinged?: long(name='CallsRinged', example='0'),
        handleRate?: float(name='HandleRate', example='0'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxRingTime?: long(name='MaxRingTime', example='0'),
        maxTalkTime?: long(name='MaxTalkTime', example='0'),
        maxWorkTime?: long(name='MaxWorkTime', example='0'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        serviceLevel15?: float(name='ServiceLevel15'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalMessagesSent?: long(name='TotalMessagesSent'),
        totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
        totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
        totalRingTime?: long(name='TotalRingTime', example='0'),
        totalTalkTime?: long(name='TotalTalkTime', example='0'),
        totalWorkTime?: long(name='TotalWorkTime', example='0'),
      }(name='Inbound'),
      internal?: {
        averageTalkTime?: float(name='AverageTalkTime'),
        callsAnswered?: long(name='CallsAnswered'),
        callsDialed?: long(name='CallsDialed'),
        callsHandled?: long(name='CallsHandled'),
        callsOffered?: long(name='CallsOffered'),
        callsTalked?: long(name='CallsTalked'),
      }(name='Internal'),
      outbound?: {
        answerRate?: float(name='AnswerRate', example='0'),
        averageDialingTime?: float(name='AverageDialingTime', example='30'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageRingTime?: float(name='AverageRingTime', example='0'),
        averageTalkTime?: float(name='AverageTalkTime', example='0'),
        averageWorkTime?: float(name='AverageWorkTime', example='1'),
        callsAnswered?: long(name='CallsAnswered', example='0'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
        callsDialed?: long(name='CallsDialed', example='5'),
        callsHold?: long(name='CallsHold', example='0'),
        callsRinged?: long(name='CallsRinged', example='0'),
        maxDialingTime?: long(name='MaxDialingTime', example='60'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxRingTime?: long(name='MaxRingTime', example='0'),
        maxTalkTime?: long(name='MaxTalkTime', example='0'),
        maxWorkTime?: long(name='MaxWorkTime', example='2'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        totalDialingTime?: long(name='TotalDialingTime', example='148'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalRingTime?: long(name='TotalRingTime', example='0'),
        totalTalkTime?: long(name='TotalTalkTime', example='0'),
        totalWorkTime?: long(name='TotalWorkTime', example='4'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime', example='0'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageReadyTime?: float(name='AverageReadyTime', example='0'),
        averageTalkTime?: float(name='AverageTalkTime', example='0'),
        averageWorkTime?: float(name='AverageWorkTime', example='1'),
        breakCodeDetailList?: [ 
          {
            breakCode?: string(name='BreakCode'),
            count?: long(name='Count'),
            duration?: long(name='Duration'),
          }
        ](name='BreakCodeDetailList'),
        firstCheckInTime?: long(name='FirstCheckInTime', example='0'),
        lastCheckOutTime?: long(name='LastCheckOutTime'),
        lastCheckoutTime?: long(name='LastCheckoutTime', example='0'),
        maxBreakTime?: long(name='MaxBreakTime', example='1'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxReadyTime?: long(name='MaxReadyTime', example='435'),
        maxTalkTime?: long(name='MaxTalkTime', example='0'),
        maxWorkTime?: long(name='MaxWorkTime', example='2'),
        occupancyRate?: float(name='OccupancyRate', example='0'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        totalBreakTime?: long(name='TotalBreakTime', example='1'),
        totalCalls?: long(name='TotalCalls', example='5'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalLoggedInTime?: long(name='TotalLoggedInTime', example='914'),
        totalOffSiteLoggedInTime?: long(name='TotalOffSiteLoggedInTime'),
        totalOffSiteOnlineTime?: long(name='TotalOffSiteOnlineTime', example='已弃用，请使用TotalOffSiteLoggedInTime代替此参数'),
        totalOfficePhoneLoggedInTime?: long(name='TotalOfficePhoneLoggedInTime'),
        totalOfficePhoneOnlineTime?: long(name='TotalOfficePhoneOnlineTime', example='已弃用，请使用TotalOfficePhoneLoggedInTime代替此参数'),
        totalOnSiteLoggedInTime?: long(name='TotalOnSiteLoggedInTime'),
        totalOnSiteOnlineTime?: long(name='TotalOnSiteOnlineTime', example='已弃用，请使用TotalOnSiteLoggedInTime代替此参数'),
        totalOutboundScenarioLoggedInTime?: long(name='TotalOutboundScenarioLoggedInTime'),
        totalOutboundScenarioReadyTime?: long(name='TotalOutboundScenarioReadyTime'),
        totalOutboundScenarioTime?: long(name='TotalOutboundScenarioTime', example='已弃用，请使用TotalOutboundScenarioLoggedInTime代替此参数'),
        totalReadyTime?: long(name='TotalReadyTime', example='763'),
        totalTalkTime?: long(name='TotalTalkTime', example='0'),
        totalWorkTime?: long(name='TotalWorkTime', example='4'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime', example='1620291600000'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model ListIntervalAgentReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntervalAgentReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIntervalAgentReport  ListIntervalAgentReportRequest
  * @return ListIntervalAgentReportResponse
 */
async function listIntervalAgentReport(request: ListIntervalAgentReportRequest): ListIntervalAgentReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntervalAgentReport', 'POST', '/', 'json', false, 'json', request);
}

model ListIntervalAgentSkillGroupReportRequest {
  agentId: string(name='AgentId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
  endTime?: long(name='EndTime', example='1558443508000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  interval?: string(name='Interval', example='Daily', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skg-default@ccc-test', position='Query'),
  startTime?: long(name='StartTime', example='1532448000000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListIntervalAgentSkillGroupReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      back2Back?: {
        agentAnswerRate?: float(name='AgentAnswerRate', example='100'),
        agentHandleRate?: float(name='AgentHandleRate'),
        answerRate?: float(name='AnswerRate', example='0.5'),
        averageCustomerRingTime?: float(name='AverageCustomerRingTime', example='100'),
        averageRingTime?: float(name='AverageRingTime', example='100'),
        averageTalkTime?: long(name='AverageTalkTime', example='100'),
        callsAgentHandled?: long(name='CallsAgentHandled'),
        callsAnswered?: long(name='CallsAnswered', example='100'),
        callsCustomerAnswered?: long(name='CallsCustomerAnswered'),
        callsCustomerHandled?: long(name='CallsCustomerHandled', example='100'),
        callsDialed?: long(name='CallsDialed', example='100'),
        customerAnswerRate?: float(name='CustomerAnswerRate'),
        customerHandleRate?: float(name='CustomerHandleRate', example='100'),
        maxCustomerRingTime?: long(name='MaxCustomerRingTime', example='100'),
        maxRingTime?: long(name='MaxRingTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        totalCustomerRingTime?: long(name='TotalCustomerRingTime', example='100'),
        totalRingTime?: long(name='TotalRingTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
      }(name='Back2Back'),
      inbound?: {
        averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
        averageHoldTime?: float(name='AverageHoldTime', example='100'),
        averageResponseTime?: float(name='AverageResponseTime'),
        averageRingTime?: float(name='AverageRingTime', example='11'),
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        averageWorkTime?: float(name='AverageWorkTime', example='100'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='100'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='10'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='100'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='100'),
        callsHandled?: long(name='CallsHandled', example='7'),
        callsHold?: long(name='CallsHold', example='100'),
        callsOffered?: long(name='CallsOffered', example='100'),
        callsRinged?: long(name='CallsRinged', example='100'),
        handleRate?: float(name='HandleRate', example='0.5'),
        maxHoldTime?: long(name='MaxHoldTime', example='100'),
        maxRingTime?: long(name='MaxRingTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        maxWorkTime?: long(name='MaxWorkTime', example='100'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='100'),
        satisfactionRate?: float(name='SatisfactionRate', example='0.5'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='100'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='100'),
        totalHoldTime?: long(name='TotalHoldTime', example='100'),
        totalMessagesSent?: long(name='TotalMessagesSent'),
        totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
        totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
        totalRingTime?: long(name='TotalRingTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
        totalWorkTime?: long(name='TotalWorkTime', example='85'),
      }(name='Inbound'),
      internal?: {
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        callsAnswered?: long(name='CallsAnswered', example='100'),
        callsDialed?: long(name='CallsDialed', example='100'),
        callsHandled?: long(name='CallsHandled', example='100'),
        callsOffered?: long(name='CallsOffered', example='100'),
        callsTalk?: long(name='CallsTalk', example='100'),
        callsTalked?: long(name='CallsTalked'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
      }(name='Internal'),
      outbound?: {
        answerRate?: float(name='AnswerRate', example='0.5'),
        averageDialingTime?: float(name='AverageDialingTime', example='100'),
        averageHoldTime?: float(name='AverageHoldTime', example='100'),
        averageRingTime?: float(name='AverageRingTime', example='100'),
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        averageWorkTime?: float(name='AverageWorkTime', example='100'),
        callsAnswered?: long(name='CallsAnswered', example='100'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='100'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='100'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='100'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='100'),
        callsDialed?: long(name='CallsDialed', example='100'),
        callsHold?: long(name='CallsHold', example='100'),
        callsRinged?: long(name='CallsRinged', example='100'),
        maxDialingTime?: long(name='MaxDialingTime', example='100'),
        maxHoldTime?: long(name='MaxHoldTime', example='100'),
        maxRingTime?: long(name='MaxRingTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='0'),
        maxWorkTime?: long(name='MaxWorkTime', example='100'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='100'),
        satisfactionRate?: float(name='SatisfactionRate', example='100'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='100'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='100'),
        totalDialingTime?: long(name='TotalDialingTime', example='100'),
        totalHoldTime?: long(name='TotalHoldTime', example='100'),
        totalRingTime?: long(name='TotalRingTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
        totalWorkTime?: long(name='TotalWorkTime', example='100'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime', example='100'),
        averageHoldTime?: float(name='AverageHoldTime', example='100'),
        averageReadyTime?: float(name='AverageReadyTime', example='100'),
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        averageWorkTime?: float(name='AverageWorkTime', example='100'),
        breakCodeDetailList?: [ 
          {
            breakCode?: string(name='BreakCode'),
            count?: long(name='Count', example='1'),
            duration?: long(name='Duration', example='100'),
          }
        ](name='BreakCodeDetailList'),
        firstCheckInTime?: long(name='FirstCheckInTime', example='100'),
        lastCheckOutTime?: long(name='LastCheckOutTime'),
        lastCheckoutTime?: long(name='LastCheckoutTime', example='100'),
        maxBreakTime?: long(name='MaxBreakTime', example='100'),
        maxHoldTime?: long(name='MaxHoldTime', example='100'),
        maxReadyTime?: long(name='MaxReadyTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        maxWorkTime?: long(name='MaxWorkTime', example='100'),
        occupancyRate?: float(name='OccupancyRate', example='0.4'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='1.4'),
        satisfactionRate?: float(name='SatisfactionRate', example='100'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='100'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='100'),
        totalBreakTime?: long(name='TotalBreakTime', example='100'),
        totalCalls?: long(name='TotalCalls', example='100'),
        totalHoldTime?: long(name='TotalHoldTime', example='100'),
        totalLoggedInTime?: long(name='TotalLoggedInTime', example='100'),
        totalOffSiteLoggedInTime?: string(name='TotalOffSiteLoggedInTime'),
        totalOfficePhoneLoggedInTime?: string(name='TotalOfficePhoneLoggedInTime'),
        totalOnSiteLoggedInTime?: string(name='TotalOnSiteLoggedInTime'),
        totalOutboundScenarioLoggedInTime?: long(name='TotalOutboundScenarioLoggedInTime'),
        totalOutboundScenarioReadyTime?: long(name='TotalOutboundScenarioReadyTime', example='100'),
        totalOutboundScenarioTime?: long(name='TotalOutboundScenarioTime', example='100'),
        totalReadyTime?: long(name='TotalReadyTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
        totalWorkTime?: long(name='TotalWorkTime', example='100'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime', example='1620291600000'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2778FA12-EDD6-42AA-9B15-AF855072E5E5'),
}

model ListIntervalAgentSkillGroupReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntervalAgentSkillGroupReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIntervalAgentSkillGroupReport  ListIntervalAgentSkillGroupReportRequest
  * @return ListIntervalAgentSkillGroupReportResponse
 */
async function listIntervalAgentSkillGroupReport(request: ListIntervalAgentSkillGroupReportRequest): ListIntervalAgentSkillGroupReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntervalAgentSkillGroupReport', 'GET', '/', 'json', false, 'json', request);
}

model ListIntervalInstanceReportRequest {
  endTime?: long(name='EndTime', example='1620316799000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  interval?: string(name='Interval', example='Hourly', position='Query'),
  startTime?: long(name='StartTime', example='1620230400000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListIntervalInstanceReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      inbound?: {
        abandonRate?: float(name='AbandonRate'),
        abandonedRate?: float(name='AbandonedRate', example='0'),
        averageAbandonTime?: float(name='AverageAbandonTime', example='0'),
        averageAbandonedInIVRTime?: float(name='AverageAbandonedInIVRTime', example='0'),
        averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime', example='0'),
        averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime', example='0'),
        averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageResponseTime?: float(name='AverageResponseTime'),
        averageRingTime?: float(name='AverageRingTime', example='5'),
        averageTalkTime?: float(name='AverageTalkTime', example='64'),
        averageWaitTime?: float(name='AverageWaitTime', example='5'),
        averageWorkTime?: float(name='AverageWorkTime', example='13'),
        callsAbandoned?: long(name='CallsAbandoned', example='0'),
        callsAbandonedInIVR?: long(name='CallsAbandonedInIVR', example='0'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue', example='0'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing', example='0'),
        callsAbandonedInVoiceNavigator?: long(name='CallsAbandonedInVoiceNavigator', example='0'),
        callsAttendedTransferred?: long(name='CallsAttendedTransferred', example='0'),
        callsBlindTransferred?: long(name='CallsBlindTransferred', example='0'),
        callsCausedIVRException?: long(name='CallsCausedIVRException'),
        callsForwardToOutsideNumber?: long(name='CallsForwardToOutsideNumber', example='0'),
        callsHandled?: long(name='CallsHandled', example='7'),
        callsHold?: long(name='CallsHold', example='0'),
        callsIVRException?: long(name='CallsIVRException', example='0'),
        callsOffered?: long(name='CallsOffered', example='7'),
        callsQueued?: long(name='CallsQueued', example='7'),
        callsQueuingFailed?: long(name='CallsQueuingFailed', example='0'),
        callsQueuingOverflow?: long(name='CallsQueuingOverflow', example='0'),
        callsQueuingTimeout?: long(name='CallsQueuingTimeout', example='0'),
        callsRinged?: long(name='CallsRinged', example='7'),
        callsToVoicemail?: long(name='CallsToVoicemail'),
        callsVoicemail?: long(name='CallsVoicemail', example='0'),
        handleRate?: float(name='HandleRate', example='1'),
        maxAbandonTime?: long(name='MaxAbandonTime', example='0'),
        maxAbandonedInIVRTime?: long(name='MaxAbandonedInIVRTime', example='0'),
        maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime', example='0'),
        maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime', example='0'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxRingTime?: long(name='MaxRingTime', example='12'),
        maxTalkTime?: long(name='MaxTalkTime', example='219'),
        maxWaitTime?: long(name='MaxWaitTime', example='13'),
        maxWorkTime?: long(name='MaxWorkTime', example='17'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        serviceLevel20?: float(name='ServiceLevel20', example='1'),
        totalAbandonTime?: long(name='TotalAbandonTime', example='0'),
        totalAbandonedInIVRTime?: long(name='TotalAbandonedInIVRTime', example='0'),
        totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime', example='0'),
        totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime', example='0'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalMessagesSent?: long(name='TotalMessagesSent'),
        totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
        totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
        totalRingTime?: long(name='TotalRingTime', example='32'),
        totalTalkTime?: long(name='TotalTalkTime', example='447'),
        totalWaitTime?: long(name='TotalWaitTime', example='34'),
        totalWorkTime?: long(name='TotalWorkTime', example='85'),
      }(name='Inbound'),
      outbound?: {
        answerRate?: float(name='AnswerRate', example='0'),
        averageDialingTime?: float(name='AverageDialingTime', example='0'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageRingTime?: float(name='AverageRingTime', example='0'),
        averageTalkTime?: float(name='AverageTalkTime', example='0'),
        averageWorkTime?: float(name='AverageWorkTime', example='0'),
        callsAnswered?: long(name='CallsAnswered', example='0'),
        callsAttendedTransferred?: long(name='CallsAttendedTransferred', example='0'),
        callsBlindTransferred?: long(name='CallsBlindTransferred', example='0'),
        callsDialed?: long(name='CallsDialed', example='0'),
        callsHold?: long(name='CallsHold', example='0'),
        callsRinged?: long(name='CallsRinged', example='0'),
        maxDialingTime?: long(name='MaxDialingTime', example='0'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxRingTime?: long(name='MaxRingTime', example='0'),
        maxTalkTime?: long(name='MaxTalkTime', example='0'),
        maxWorkTime?: long(name='MaxWorkTime', example='0'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        totalDialingTime?: long(name='TotalDialingTime', example='0'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalRingTime?: long(name='TotalRingTime', example='0'),
        totalTalkTime?: long(name='TotalTalkTime', example='0'),
        totalWorkTime?: long(name='TotalWorkTime', example='0'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime', example='0'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageReadyTime?: float(name='AverageReadyTime', example='0'),
        averageTalkTime?: float(name='AverageTalkTime', example='0'),
        averageWorkTime?: float(name='AverageWorkTime', example='0'),
        maxBreakTime?: long(name='MaxBreakTime', example='0'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxReadyTime?: long(name='MaxReadyTime', example='0'),
        maxTalkTime?: long(name='MaxTalkTime', example='0'),
        maxWorkTime?: long(name='MaxWorkTime', example='0'),
        occupancyRate?: float(name='OccupancyRate', example='0'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        totalBreakTime?: long(name='TotalBreakTime', example='0'),
        totalCalls?: long(name='TotalCalls', example='0'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalLoggedInTime?: long(name='TotalLoggedInTime', example='0'),
        totalReadyTime?: long(name='TotalReadyTime', example='0'),
        totalTalkTime?: long(name='TotalTalkTime', example='0'),
        totalWorkTime?: long(name='TotalWorkTime', example='0'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime', example='1620230400000'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model ListIntervalInstanceReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntervalInstanceReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIntervalInstanceReport  ListIntervalInstanceReportRequest
  * @return ListIntervalInstanceReportResponse
 */
async function listIntervalInstanceReport(request: ListIntervalInstanceReportRequest): ListIntervalInstanceReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntervalInstanceReport', 'POST', '/', 'json', false, 'json', request);
}

model ListIntervalSkillGroupReportRequest {
  endTime?: long(name='EndTime', example='1604725528000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  interval?: string(name='Interval', example='Hourly', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skg-default@ccc-test', position='Query'),
  startTime?: long(name='StartTime', example='1604639129000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListIntervalSkillGroupReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      back2Back?: {
        agentHandleRate?: float(name='AgentHandleRate'),
        answerRate?: string(name='AnswerRate'),
        averageCustomerRingTime?: float(name='AverageCustomerRingTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: string(name='AverageTalkTime'),
        callsAgentHandled?: long(name='CallsAgentHandled'),
        callsAnswered?: long(name='CallsAnswered'),
        callsCustomerAnswered?: long(name='CallsCustomerAnswered'),
        callsDialed?: long(name='CallsDialed'),
        customerAnswerRate?: float(name='CustomerAnswerRate'),
        maxCustomerRingTime?: long(name='MaxCustomerRingTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: string(name='MaxTalkTime'),
        totalCustomerRingTime?: long(name='TotalCustomerRingTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
      }(name='Back2Back'),
      inbound?: {
        abandonRate?: float(name='AbandonRate', example='0'),
        averageAbandonTime?: float(name='AverageAbandonTime', example='0'),
        averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime', example='0'),
        averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime', example='0'),
        averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageResponseTime?: float(name='AverageResponseTime'),
        averageRingTime?: float(name='AverageRingTime', example='11'),
        averageTalkTime?: float(name='AverageTalkTime', example='5'),
        averageWaitTime?: float(name='AverageWaitTime', example='11'),
        averageWorkTime?: float(name='AverageWorkTime', example='8'),
        callsAbandoned?: long(name='CallsAbandoned', example='0'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue', example='0'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing', example='0'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
        callsHandled?: long(name='CallsHandled', example='2'),
        callsHold?: long(name='CallsHold', example='0'),
        callsOffered?: long(name='CallsOffered', example='3'),
        callsOverflow?: long(name='CallsOverflow', example='0'),
        callsQueued?: long(name='CallsQueued', example='3'),
        callsQueuingOverflow?: long(name='CallsQueuingOverflow'),
        callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
        callsRinged?: long(name='CallsRinged', example='3'),
        callsTimeout?: long(name='CallsTimeout', example='0'),
        handleRate?: float(name='HandleRate', example='0.6666666666666666'),
        maxAbandonTime?: long(name='MaxAbandonTime', example='0'),
        maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime', example='0'),
        maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime', example='0'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxRingTime?: long(name='MaxRingTime', example='18'),
        maxTalkTime?: long(name='MaxTalkTime', example='6'),
        maxWaitTime?: long(name='MaxWaitTime', example='18'),
        maxWorkTime?: long(name='MaxWorkTime', example='19'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        serviceLevel20?: float(name='ServiceLevel20', example='0'),
        totalAbandonTime?: long(name='TotalAbandonTime', example='0'),
        totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime', example='0'),
        totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime', example='0'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalMessagesSent?: long(name='TotalMessagesSent'),
        totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
        totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
        totalRingTime?: long(name='TotalRingTime', example='33'),
        totalTalkTime?: long(name='TotalTalkTime', example='9'),
        totalWaitTime?: long(name='TotalWaitTime', example='33'),
        totalWorkTime?: long(name='TotalWorkTime', example='23'),
      }(name='Inbound'),
      outbound?: {
        answerRate?: float(name='AnswerRate', example='0'),
        averageDialingTime?: float(name='AverageDialingTime', example='30'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageRingTime?: float(name='AverageRingTime', example='0'),
        averageTalkTime?: float(name='AverageTalkTime', example='5'),
        averageWorkTime?: float(name='AverageWorkTime', example='3'),
        callsAnswered?: long(name='CallsAnswered', example='1'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='0'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='0'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
        callsDialed?: long(name='CallsDialed', example='2'),
        callsHold?: long(name='CallsHold', example='0'),
        callsRinged?: long(name='CallsRinged', example='0'),
        maxDialingTime?: long(name='MaxDialingTime', example='49'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxRingTime?: long(name='MaxRingTime', example='0'),
        maxTalkTime?: long(name='MaxTalkTime', example='5'),
        maxWorkTime?: long(name='MaxWorkTime', example='4'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        totalDialingTime?: long(name='TotalDialingTime', example='60'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalRingTime?: long(name='TotalRingTime', example='0'),
        totalTalkTime?: long(name='TotalTalkTime', example='5'),
        totalWorkTime?: long(name='TotalWorkTime', example='5'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime', example='0'),
        averageHoldTime?: float(name='AverageHoldTime', example='0'),
        averageReadyTime?: float(name='AverageReadyTime', example='0'),
        averageTalkTime?: float(name='AverageTalkTime', example='0'),
        averageWorkTime?: float(name='AverageWorkTime', example='6'),
        breakCodeDetailList?: [ 
          {
            breakCode?: string(name='BreakCode'),
            count?: long(name='Count'),
            duration?: long(name='Duration'),
          }
        ](name='BreakCodeDetailList'),
        maxBreakTime?: long(name='MaxBreakTime', example='1'),
        maxHoldTime?: long(name='MaxHoldTime', example='0'),
        maxReadyTime?: long(name='MaxReadyTime', example='4927'),
        maxTalkTime?: long(name='MaxTalkTime', example='6'),
        maxWorkTime?: long(name='MaxWorkTime', example='19'),
        occupancyRate?: float(name='OccupancyRate', example='0.00422315148470254'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
        satisfactionRate?: float(name='SatisfactionRate', example='0'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
        totalBreakTime?: long(name='TotalBreakTime', example='5'),
        totalCalls?: long(name='TotalCalls', example='5'),
        totalHoldTime?: long(name='TotalHoldTime', example='0'),
        totalLoggedInTime?: long(name='TotalLoggedInTime', example='9236'),
        totalReadyTime?: long(name='TotalReadyTime', example='9106'),
        totalTalkTime?: long(name='TotalTalkTime', example='13'),
        totalWorkTime?: long(name='TotalWorkTime', example='27'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime', example='1604639129000'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model ListIntervalSkillGroupReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIntervalSkillGroupReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIntervalSkillGroupReport  ListIntervalSkillGroupReportRequest
  * @return ListIntervalSkillGroupReportResponse
 */
async function listIntervalSkillGroupReport(request: ListIntervalSkillGroupReportRequest): ListIntervalSkillGroupReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntervalSkillGroupReport', 'POST', '/', 'json', false, 'json', request);
}

model ListIvrTrackingDetailsRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-10963442671187****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Query'),
}

model ListIvrTrackingDetailsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        callee?: string(name='Callee', example='0533128****'),
        caller?: string(name='Caller', example='1332315****'),
        channelId?: string(name='ChannelId', example='65cp2c15-92ac-4e67-98b2-073a3c541c5d'),
        channelVariables?: string(name='ChannelVariables', example='A=B;C=D'),
        contactId?: string(name='ContactId', example='job-10963442671187****'),
        enterTime?: long(name='EnterTime', example='1621910542876'),
        flowId?: string(name='FlowId', example='abc99462-1058-47d0-a114-f145ea7444ff'),
        flowName?: string(name='FlowName'),
        instance?: string(name='Instance', example='ccc-test'),
        leaveTime?: long(name='LeaveTime', example='1621910545105'),
        nodeExitCode?: string(name='NodeExitCode', example='Success'),
        nodeId?: string(name='NodeId', example='e0bc19a3'),
        nodeName?: string(name='NodeName'),
        nodeProperties?: map[string]any(name='NodeProperties'),
        nodeType?: string(name='NodeType', example='PLAY_OR_SAY'),
        nodeVariables?: map[string]any(name='NodeVariables', example='{"digits":"2"}'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='3'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='D2RB671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListIvrTrackingDetailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIvrTrackingDetailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIvrTrackingDetails  ListIvrTrackingDetailsRequest
  * @return ListIvrTrackingDetailsResponse
 */
async function listIvrTrackingDetails(request: ListIvrTrackingDetailsRequest): ListIvrTrackingDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIvrTrackingDetails', 'POST', '/', 'json', false, 'json', request);
}

model ListLegacyAgentEventLogsRequest {
  agentId?: string(name='AgentId', example='agent@ccc-test', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1658026440011', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1657853640015', position='Query'),
}

model ListLegacyAgentEventLogsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentDropCall?: string(name='AgentDropCall', example='false'),
        agentNo?: string(name='AgentNo', example='agent@ccc-test'),
        callDir?: string(name='CallDir'),
        callId?: string(name='CallId', example='378654****'),
        callMode?: string(name='CallMode'),
        callType?: string(name='CallType'),
        calleeId?: string(name='CalleeId', example='1312343****'),
        callerId?: string(name='CallerId', example='08331111****'),
        connId?: string(name='ConnId', example='345467****'),
        event?: string(name='Event'),
        groupNo?: string(name='GroupNo', example='skillgroup1@ccc-test,skillgroup2@ccc-test'),
        outboundScenario?: boolean(name='OutboundScenario', example='false'),
        phoneNo?: string(name='PhoneNo', example='8012****'),
        statisticDate?: string(name='StatisticDate', example='2021-12-03T10:15:30'),
        targetRequest?: string(name='TargetRequest', example='skillgroup@ccc-test'),
        targetSelect?: string(name='TargetSelect', example='skillgroup@ccc-test'),
        tenantId?: string(name='TenantId', example='acc101'),
        transferNumber?: string(name='TransferNumber', example='07518888****'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='2802EE59-3B53-513A-A130-85E480AF689D'),
  success?: boolean(name='Success', example='true'),
}

model ListLegacyAgentEventLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLegacyAgentEventLogsResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListLegacyAgentEventLogs is deprecated, please use CCC::2020-07-01::ListAgentStateLogs instead.  * @param request  the request parameters of ListLegacyAgentEventLogs  ListLegacyAgentEventLogsRequest
  * @return ListLegacyAgentEventLogsResponse
 */
// Deprecated
async function listLegacyAgentEventLogs(request: ListLegacyAgentEventLogsRequest): ListLegacyAgentEventLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLegacyAgentEventLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListLegacyAgentStatusLogsRequest {
  agentId?: string(name='AgentId', example='agent@ccc-test', position='Query'),
  endTime: long(name='EndTime', description='This parameter is required.', example='1657879880010', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1657778840011', position='Query'),
}

model ListLegacyAgentStatusLogsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentDropCall?: string(name='AgentDropCall', example='false'),
        agentNo?: string(name='AgentNo', example='agent@ccc-test'),
        aliHangupCause?: string(name='AliHangupCause'),
        callDir?: string(name='CallDir'),
        callId?: string(name='CallId', example='454326****'),
        callType?: string(name='CallType'),
        calleeId?: string(name='CalleeId', example='1312121****'),
        callerId?: string(name='CallerId', example='08337676****'),
        connId?: string(name='ConnId', example='487326****'),
        extend1?: string(name='Extend1'),
        extend2?: string(name='Extend2'),
        extend3?: string(name='Extend3'),
        extend4?: string(name='Extend4'),
        groupNo?: string(name='GroupNo', example='skillgroup@ccc-test'),
        monitedAgentNo?: string(name='MonitedAgentNo', example='8032****'),
        monitedAgentPhoneNo?: string(name='MonitedAgentPhoneNo', example='8012****'),
        outboundScenario?: boolean(name='OutboundScenario', example='false'),
        phoneNo?: string(name='PhoneNo', example='8012****'),
        statisticDate?: string(name='StatisticDate', example='2021-12-03T10:15:30'),
        statisticTime?: int32(name='StatisticTime', example='3'),
        status?: string(name='Status'),
        targetRequest?: string(name='TargetRequest', example='skillgroup@ccc-test'),
        targetSelect?: string(name='TargetSelect', example='skillgroup@ccc-test'),
        tenantId?: string(name='TenantId', example='acc6736'),
        transferNo?: string(name='TransferNo', example='07551231****'),
        transferNumber?: string(name='TransferNumber', example='05711231****'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4C9A5D93-33A6-57F3-A423-4C83BD0A8455'),
  success?: boolean(name='Success', example='true'),
}

model ListLegacyAgentStatusLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLegacyAgentStatusLogsResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListLegacyAgentStatusLogs is deprecated, please use CCC::2020-07-01::ListAgentStateLogs instead.  * @param request  the request parameters of ListLegacyAgentStatusLogs  ListLegacyAgentStatusLogsRequest
  * @return ListLegacyAgentStatusLogsResponse
 */
// Deprecated
async function listLegacyAgentStatusLogs(request: ListLegacyAgentStatusLogsRequest): ListLegacyAgentStatusLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLegacyAgentStatusLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListLegacyAppraiseLogsRequest {
  endTime: long(name='EndTime', description='This parameter is required.', example='1620273600000', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1604638129000', position='Query'),
}

model ListLegacyAppraiseLogsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        acid?: string(name='Acid', example='3786929579'),
        contactType?: string(name='ContactType', example='Outbound'),
        id?: long(name='Id', example='10505'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        keyMarkRelation?: string(name='KeyMarkRelation', example='{}'),
        note?: string(name='Note'),
        parentNote?: string(name='ParentNote'),
        pressKey?: string(name='PressKey', example='2'),
        ramId?: string(name='RamId', example='28036411123456****'),
        skillGroupId?: string(name='SkillGroupId', example='test@ccc-test'),
        statisticDate?: string(name='StatisticDate', example='2021-12-03T10:15:30'),
        type?: string(name='Type', example='Launch'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='18'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='A13BB835-94AA-4E55-8D9E-5EA585CE6555"'),
  success?: boolean(name='Success', example='true'),
}

model ListLegacyAppraiseLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLegacyAppraiseLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLegacyAppraiseLogs  ListLegacyAppraiseLogsRequest
  * @return ListLegacyAppraiseLogsResponse
 */
async function listLegacyAppraiseLogs(request: ListLegacyAppraiseLogsRequest): ListLegacyAppraiseLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLegacyAppraiseLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListLegacyQueueEventLogsRequest {
  endTime: long(name='EndTime', description='This parameter is required.', example='1658026180018', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test', position='Query'),
  startTime: long(name='StartTime', description='This parameter is required.', example='1657939540015', position='Query'),
}

model ListLegacyQueueEventLogsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        acid?: string(name='Acid', example='456328****'),
        ani?: string(name='Ani', example='8012****'),
        answerPhone?: string(name='AnswerPhone', example='agent@ccc-test'),
        answerTime?: long(name='AnswerTime', example='15'),
        cause?: string(name='Cause'),
        dnis?: string(name='Dnis', example='1312211****'),
        id?: long(name='Id'),
        queueTime?: long(name='QueueTime', example='10'),
        statisticDate?: string(name='StatisticDate', example='2021-12-03T10:15:30'),
        tenantId?: string(name='TenantId', example='acc3733'),
        vq?: string(name='Vq', example='skillgroup@ccc-test'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1A5A8998-41F9-5F85-BFCF-EB2B6E376812'),
  success?: boolean(name='Success', example='true'),
}

model ListLegacyQueueEventLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLegacyQueueEventLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLegacyQueueEventLogs  ListLegacyQueueEventLogsRequest
  * @return ListLegacyQueueEventLogsResponse
 */
async function listLegacyQueueEventLogs(request: ListLegacyQueueEventLogsRequest): ListLegacyQueueEventLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLegacyQueueEventLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListMonoRecordingsRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-25697383427137****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ListMonoRecordingsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      agentId?: string(name='AgentId', example='agent@ccc-test'),
      agentName?: string(name='AgentName'),
      contactId?: string(name='ContactId', example='job-25920271311543****'),
      duration?: string(name='Duration', example='5903871'),
      fileName?: string(name='FileName', example='job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.wav'),
      fileUrl?: string(name='FileUrl', example='https://ccc-v2-shanghai.oss-cn-shanghai.aliyuncs.com/ccc-test/job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.wav?Expires=1657014031&OSSAccessKeyId=****&Signature=****'),
      ramId?: string(name='RamId', example='26972543893791****'),
      skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
      startTime?: string(name='StartTime', example='1620259200000'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E836EF2A-EDAE-5310-8921-F983C967D42D'),
}

model ListMonoRecordingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMonoRecordingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMonoRecordings  ListMonoRecordingsRequest
  * @return ListMonoRecordingsResponse
 */
async function listMonoRecordings(request: ListMonoRecordingsRequest): ListMonoRecordingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMonoRecordings', 'POST', '/', 'json', false, 'json', request);
}

model ListMultiChannelRecordingsRequest {
  contactId: string(name='ContactId', description='This parameter is required.', example='job-25920271311543****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ListMultiChannelRecordingsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      agentChannelId?: string(name='AgentChannelId', example='ch-user-8526899****-8602****-1656926504363-job-25920271311543****'),
      agentId?: string(name='AgentId', example='agent@ccc-test'),
      agentName?: string(name='AgentName'),
      contactId?: string(name='ContactId', example='job-25920271311543****'),
      duration?: string(name='Duration', example='56321'),
      fileName?: string(name='FileName', example='job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.mkv'),
      fileUrl?: string(name='FileUrl', example='https://ccc-v2-shanghai.oss-cn-shanghai.aliyuncs.com/ccc-test/job-25920271311543****-798f1e90-1f82-42da-914c-46580c8f4c85-1656926518491.mkv?Expires=1657014031&OSSAccessKeyId=****&Signature=****'),
      holdTimeSegments?: [ 
        {
          endTime?: long(name='EndTime'),
          startTime?: long(name='StartTime'),
        }
      ](name='HoldTimeSegments'),
      ramId?: string(name='RamId', example='22807673106369****'),
      skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
      startTime?: long(name='StartTime', example='1656926518491'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='B19CD719-9F65-56A6-8B79-DA4282EA4797'),
}

model ListMultiChannelRecordingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMultiChannelRecordingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMultiChannelRecordings  ListMultiChannelRecordingsRequest
  * @return ListMultiChannelRecordingsResponse
 */
async function listMultiChannelRecordings(request: ListMultiChannelRecordingsRequest): ListMultiChannelRecordingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMultiChannelRecordings', 'POST', '/', 'json', false, 'json', request);
}

model ListOutboundNumbersOfUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  skillGroupIdList?: string(name='SkillGroupIdList', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model ListOutboundNumbersOfUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        city?: string(name='City'),
        number?: string(name='Number', example='0830019****'),
        province?: string(name='Province'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListOutboundNumbersOfUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOutboundNumbersOfUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOutboundNumbersOfUser  ListOutboundNumbersOfUserRequest
  * @return ListOutboundNumbersOfUserResponse
 */
async function listOutboundNumbersOfUser(request: ListOutboundNumbersOfUserRequest): ListOutboundNumbersOfUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOutboundNumbersOfUser', 'POST', '/', 'json', false, 'json', request);
}

model ListPersonalNumbersOfUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  isMember: boolean(name='IsMember', description='This parameter is required.', example='true', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', example='0833', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='user-test@ccc-test', position='Query'),
}

model ListPersonalNumbersOfUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        active?: boolean(name='Active', example='true'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId', example='a3fb6c62-9b49-4942-ae5b-cf2abd4123ek'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        number?: string(name='Number', example='08330011****'),
        province?: string(name='Province'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListPersonalNumbersOfUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPersonalNumbersOfUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPersonalNumbersOfUser  ListPersonalNumbersOfUserRequest
  * @return ListPersonalNumbersOfUserResponse
 */
async function listPersonalNumbersOfUser(request: ListPersonalNumbersOfUserRequest): ListPersonalNumbersOfUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPersonalNumbersOfUser', 'POST', '/', 'json', false, 'json', request);
}

model ListPhoneNumbersRequest {
  active?: boolean(name='Active', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  searchPattern?: string(name='SearchPattern', example='0833', position='Query'),
  usage?: string(name='Usage', example='Bidirection', minLength=1, maxLength=200, position='Query'),
}

model ListPhoneNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        active?: boolean(name='Active', example='true'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId', example='a3fb6c62-9b49-4942-ae5b-cf2abd4123ek'),
        contactFlowName?: string(name='ContactFlowName'),
        createTime?: string(name='CreateTime', example='1617958538000'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        number?: string(name='Number', example='08330011****'),
        provider?: string(name='Provider', example='alicom'),
        province?: string(name='Province'),
        skillGroups?: [ 
          {
            displayName?: string(name='DisplayName'),
            instanceId?: string(name='InstanceId', example='ccc-test'),
            name?: string(name='Name', example='skillgroup'),
            skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          }
        ](name='SkillGroups'),
        tags?: string(name='Tags', example='M1'),
        usage?: string(name='Usage', example='Bidirection'),
        userId?: string(name='UserId', example='agent@ccc-test'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ListPhoneNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPhoneNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPhoneNumbers  ListPhoneNumbersRequest
  * @return ListPhoneNumbersResponse
 */
async function listPhoneNumbers(request: ListPhoneNumbersRequest): ListPhoneNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPhoneNumbers', 'POST', '/', 'json', false, 'json', request);
}

model ListPhoneNumbersOfSkillGroupRequest {
  active?: boolean(name='Active', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  isMember: boolean(name='IsMember', description='This parameter is required.', example='true', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', example='0833', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model ListPhoneNumbersOfSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        active?: boolean(name='Active', example='true'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId', example='a3fb6c62-9b49-4942-ae5b-cf2abd4123ek'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        number?: string(name='Number', example='08330011****'),
        province?: string(name='Province'),
        usage?: string(name='Usage', example='Bidirection'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListPhoneNumbersOfSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPhoneNumbersOfSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPhoneNumbersOfSkillGroup  ListPhoneNumbersOfSkillGroupRequest
  * @return ListPhoneNumbersOfSkillGroupResponse
 */
async function listPhoneNumbersOfSkillGroup(request: ListPhoneNumbersOfSkillGroupRequest): ListPhoneNumbersOfSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPhoneNumbersOfSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListPrivilegesOfUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ListPrivilegesOfUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId', example='ccc-test'),
      name?: string(name='Name', example='Workbench:Call'),
      scope?: string(name='Scope', example='SELF_ONLY'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListPrivilegesOfUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPrivilegesOfUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPrivilegesOfUser  ListPrivilegesOfUserRequest
  * @return ListPrivilegesOfUserResponse
 */
async function listPrivilegesOfUser(request: ListPrivilegesOfUserRequest): ListPrivilegesOfUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrivilegesOfUser', 'POST', '/', 'json', false, 'json', request);
}

model ListRamUsersRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=100000, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Query'),
  searchPattern?: string(name='SearchPattern', example='agent', position='Query'),
}

model ListRamUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        aliyunUid?: long(name='AliyunUid', example='15772400000****'),
        displayName?: string(name='DisplayName'),
        email?: string(name='Email', example='username@example.com'),
        loginName?: string(name='LoginName', example='agent'),
        mobile?: string(name='Mobile', example='1382114****'),
        primary?: boolean(name='Primary', example='false'),
        ramId?: string(name='RamId', example='28036411123456****'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='24753D71-C91D-1A38-A8AD-372BF12453F6'),
}

model ListRamUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRamUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRamUsers  ListRamUsersRequest
  * @return ListRamUsersResponse
 */
async function listRamUsers(request: ListRamUsersRequest): ListRamUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRamUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListRealtimeAgentStatesRequest {
  agentIdList?: string(name='AgentIdList', example='["agent1@ccc-test", "agent2@ccc-test"]', position='Body'),
  agentName?: string(name='AgentName', example='agent', position='Query'),
  callTypeList?: string(name='CallTypeList', example='["INBOUND", "OUTBOUND"]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  outboundScenario?: boolean(name='OutboundScenario', example='false', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  query?: string(name='Query', example='agent', position='Query'),
  skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test', position='Query'),
  stateList?: string(name='StateList', example='["ACW", "Dialing"]', position='Body'),
  workModeList?: string(name='WorkModeList', example='["OFFICE_PHONE","ON_SITE"]', position='Query'),
}

model ListRealtimeAgentStatesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId', example='agent1@ccc-test'),
        agentName?: string(name='AgentName'),
        callType?: string(name='CallType', example='Outbound'),
        counterParty?: string(name='CounterParty', example='agent@ccc-test'),
        duration?: long(name='Duration', example='16'),
        extension?: string(name='Extension', example='80317391'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        mobile?: string(name='Mobile', example='1382114****'),
        outboundScenario?: boolean(name='OutboundScenario', example='false'),
        skillGroupIdList?: [ string ](name='SkillGroupIdList'),
        skillGroupNameList?: [ string ](name='SkillGroupNameList'),
        state?: string(name='State', example='ACW'),
        stateCode?: string(name='StateCode', example='Monitored'),
        stateTime?: long(name='StateTime', example='8'),
        workMode?: string(name='WorkMode', example='ON_SITE'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListRealtimeAgentStatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRealtimeAgentStatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRealtimeAgentStates  ListRealtimeAgentStatesRequest
  * @return ListRealtimeAgentStatesResponse
 */
async function listRealtimeAgentStates(request: ListRealtimeAgentStatesRequest): ListRealtimeAgentStatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRealtimeAgentStates', 'POST', '/', 'json', true, 'form', request);
}

model ListRealtimeSkillGroupStatesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  skillGroupIdList?: string(name='SkillGroupIdList', example='["skillgroup1@ccc-test", "skillgroup2@ccc-test"]', position='Body'),
}

model ListRealtimeSkillGroupStatesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        breakCodeDetailList?: [ 
          {
            breakCode?: string(name='BreakCode'),
            count?: long(name='Count'),
          }
        ](name='BreakCodeDetailList'),
        breakingAgents?: long(name='BreakingAgents', example='0'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        loggedInAgents?: long(name='LoggedInAgents', example='2'),
        longestWaitingTime?: long(name='LongestWaitingTime', example='0'),
        outboundScenarioReadyAgents?: long(name='OutboundScenarioReadyAgents', example='0'),
        readyAgents?: long(name='ReadyAgents', example='2'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='skillgroup'),
        talkingAgents?: long(name='TalkingAgents', example='0'),
        totalAgents?: long(name='TotalAgents'),
        waitingCalls?: long(name='WaitingCalls', example='0'),
        workingAgents?: long(name='WorkingAgents', example='0'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='26A34338-5CD9-4C95-A7A6-5BDCE76C6B94'),
}

model ListRealtimeSkillGroupStatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRealtimeSkillGroupStatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRealtimeSkillGroupStates  ListRealtimeSkillGroupStatesRequest
  * @return ListRealtimeSkillGroupStatesResponse
 */
async function listRealtimeSkillGroupStates(request: ListRealtimeSkillGroupStatesRequest): ListRealtimeSkillGroupStatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRealtimeSkillGroupStates', 'POST', '/', 'json', true, 'form', request);
}

model ListRecentCallDetailRecordsRequest {
  criteria?: string(name='Criteria', example='{"phoneNumber":"1312121****","callingNumber":"1312121****","calledNumber":"1312121****"}', position='Query'),
  endTime?: long(name='EndTime', example='1604639129000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  startTime?: long(name='StartTime', example='1604638129000', minimum=0, maximum=4133952000000, position='Body'),
}

model ListRecentCallDetailRecordsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentIds?: string(name='AgentIds', example='agent@ccc-test'),
        callDuration?: string(name='CallDuration', example='16'),
        calledNumber?: string(name='CalledNumber', example='1332315****'),
        callingNumber?: string(name='CallingNumber', example='0533128****'),
        contactDisposition?: string(name='ContactDisposition', example='Success'),
        contactId?: string(name='ContactId', example='job-7660472242845****'),
        contactType?: string(name='ContactType', example='Outbound'),
        duration?: long(name='Duration', example='16'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        skillGroupIds?: string(name='SkillGroupIds', example='skillgroup@ccc-test'),
        startTime?: long(name='StartTime', example='1532448000000'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListRecentCallDetailRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecentCallDetailRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRecentCallDetailRecords  ListRecentCallDetailRecordsRequest
  * @return ListRecentCallDetailRecordsResponse
 */
async function listRecentCallDetailRecords(request: ListRecentCallDetailRecordsRequest): ListRecentCallDetailRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRecentCallDetailRecords', 'POST', '/', 'json', true, 'form', request);
}

model ListRolesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ListRolesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      name?: string(name='Name', example='Admin'),
      roleId?: string(name='RoleId', example='Admin@ccc-test'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='711D948F-C616-4E23-8573-0F260513CE09'),
}

model ListRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoles  ListRolesRequest
  * @return ListRolesResponse
 */
async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListSkillGroupStatesRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  skillGroupIds?: string(name='SkillGroupIds', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]', position='Query'),
}

model ListSkillGroupStatesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        averageWaitingTime?: long(name='AverageWaitingTime', example='3'),
        breakingAgents?: long(name='BreakingAgents', example='0'),
        inboundTalkingAgents?: long(name='InboundTalkingAgents'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        loggedInAgents?: long(name='LoggedInAgents', example='0'),
        longestCall?: long(name='LongestCall', example='0'),
        outboundScenarioReadyAgents?: long(name='OutboundScenarioReadyAgents', example='0'),
        outboundTalkingAgents?: long(name='OutboundTalkingAgents'),
        readyAgents?: long(name='ReadyAgents', example='1'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup1@ccc-test'),
        skillGroupName?: string(name='SkillGroupName'),
        talkingAgents?: long(name='TalkingAgents', example='0'),
        waitingCalls?: long(name='WaitingCalls', example='0'),
        waitingCallsLevel10?: long(name='WaitingCallsLevel10', example='0'),
        waitingCallsLevel20?: long(name='WaitingCallsLevel20', example='0'),
        waitingCallsLevel30?: long(name='WaitingCallsLevel30', example='0'),
        workingAgents?: long(name='WorkingAgents', example='0'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='1F69EBB0-63E9-5DDE-887F-9FC040ADF309'),
  success?: boolean(name='Success', example='true'),
}

model ListSkillGroupStatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSkillGroupStatesResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListSkillGroupStates is deprecated, please use CCC::2020-07-01::ListRealtimeSkillGroupStates instead.  * @param request  the request parameters of ListSkillGroupStates  ListSkillGroupStatesRequest
  * @return ListSkillGroupStatesResponse
 */
// Deprecated
async function listSkillGroupStates(request: ListSkillGroupStatesRequest): ListSkillGroupStatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSkillGroupStates', 'GET', '/', 'json', false, 'json', request);
}

model ListSkillGroupSummaryReportsSinceMidnightRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  skillGroups?: string(name='SkillGroups', example='["skillgroup1@ccc-test", "skillgroup2@ccc-test2"]', position='Query'),
}

model ListSkillGroupSummaryReportsSinceMidnightResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  pagedSkillGroupSummaryReport?: {
    list?: [ 
      {
        inbound?: {
          abandonedInQueueOfQueueCount?: long(name='AbandonedInQueueOfQueueCount', example='0'),
          answeredByAgentOfQueueCount?: long(name='AnsweredByAgentOfQueueCount', example='0'),
          answeredByAgentOfQueueMaxWaitTimeDuration?: long(name='AnsweredByAgentOfQueueMaxWaitTimeDuration', example='0'),
          answeredByAgentOfQueueWaitTimeDuration?: long(name='AnsweredByAgentOfQueueWaitTimeDuration', example='0'),
          averageRingTime?: long(name='AverageRingTime', example='0'),
          averageTalkTime?: long(name='AverageTalkTime', example='0'),
          averageWorkTime?: long(name='AverageWorkTime', example='0'),
          callsAbandoned?: long(name='CallsAbandoned'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='0'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='0'),
          callsHandled?: long(name='CallsHandled', example='0'),
          callsOffered?: long(name='CallsOffered', example='0'),
          callsOverflow?: string(name='CallsOverflow'),
          callsQueuingCanceled?: string(name='CallsQueuingCanceled'),
          callsQueuingFailure?: string(name='CallsQueuingFailure'),
          callsQueuingRerouted?: string(name='CallsQueuingRerouted'),
          callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
          callsServiceLevel10?: long(name='CallsServiceLevel10', example='0'),
          callsServiceLevel20?: long(name='CallsServiceLevel20', example='0'),
          callsServiceLevel30?: long(name='CallsServiceLevel30', example='0'),
          callsTimeout?: long(name='CallsTimeout'),
          giveUpByAgentOfQueueCount?: long(name='GiveUpByAgentOfQueueCount', example='0'),
          handleRate?: float(name='HandleRate', example='0'),
          inComingQueueOfQueueCount?: long(name='InComingQueueOfQueueCount', example='0'),
          maxRingTime?: long(name='MaxRingTime', example='0'),
          maxTalkTime?: string(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          overFlowInQueueOfQueueCount?: long(name='OverFlowInQueueOfQueueCount', example='0'),
          queueMaxWaitTimeDuration?: long(name='QueueMaxWaitTimeDuration', example='0'),
          queueWaitTimeDuration?: long(name='QueueWaitTimeDuration', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          serviceLevel20?: float(name='ServiceLevel20', example='0'),
          totalRingTime?: long(name='TotalRingTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        outbound?: {
          answerRate?: float(name='AnswerRate', example='0'),
          averageDialingTime?: long(name='AverageDialingTime', example='0'),
          averageTalkTime?: long(name='AverageTalkTime', example='0'),
          averageWorkTime?: long(name='AverageWorkTime', example='0'),
          callsAbandoned?: long(name='CallsAbandoned'),
          callsAgentHandled?: long(name='CallsAgentHandled'),
          callsAnswered?: long(name='CallsAnswered', example='0'),
          callsDialed?: long(name='CallsDialed', example='0'),
          callsOffered?: long(name='CallsOffered'),
          callsQueuingCancelled?: long(name='CallsQueuingCancelled'),
          callsQueuingFailed?: long(name='CallsQueuingFailed'),
          callsQueuingFailure?: long(name='CallsQueuingFailure'),
          callsQueuingOverflow?: long(name='CallsQueuingOverflow'),
          callsQueuingRerouted?: long(name='CallsQueuingRerouted'),
          callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
          callsServiceLevel30?: string(name='CallsServiceLevel30', example='0'),
          callsServiceLevel30V2?: long(name='CallsServiceLevel30V2'),
          maxDialingTime?: long(name='MaxDialingTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalDialingTime?: long(name='TotalDialingTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWaitTime?: long(name='TotalWaitTime'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime', example='0'),
          averageTalkTime?: long(name='AverageTalkTime', example='0'),
          averageWorkTime?: long(name='AverageWorkTime', example='0'),
          maxReadyTime?: long(name='MaxReadyTime', example='0'),
          maxTalkTime?: long(name='MaxTalkTime', example='0'),
          maxWorkTime?: long(name='MaxWorkTime', example='0'),
          occupancyRate?: float(name='OccupancyRate', example='0'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='0'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='0'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='0'),
          totalBreakTime?: long(name='TotalBreakTime', example='0'),
          totalCalls?: long(name='TotalCalls', example='0'),
          totalLoggedInTime?: long(name='TotalLoggedInTime', example='0'),
          totalReadyTime?: long(name='TotalReadyTime', example='0'),
          totalTalkTime?: long(name='TotalTalkTime', example='0'),
          totalWorkTime?: long(name='TotalWorkTime', example='0'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
        skillGroupName?: string(name='SkillGroupName'),
        timestamp?: string(name='Timestamp', example='2018-09-13 00:00:00'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='3'),
  }(name='PagedSkillGroupSummaryReport'),
  requestId?: string(name='RequestId', example='2B36CEBC-6D11-5451-9E6B-C6D1927841C5'),
  success?: boolean(name='Success', example='true'),
}

model ListSkillGroupSummaryReportsSinceMidnightResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSkillGroupSummaryReportsSinceMidnightResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI ListSkillGroupSummaryReportsSinceMidnight is deprecated, please use CCC::2020-07-01::ListHistoricalSkillGroupReport instead.  * @param request  the request parameters of ListSkillGroupSummaryReportsSinceMidnight  ListSkillGroupSummaryReportsSinceMidnightRequest
  * @return ListSkillGroupSummaryReportsSinceMidnightResponse
 */
// Deprecated
async function listSkillGroupSummaryReportsSinceMidnight(request: ListSkillGroupSummaryReportsSinceMidnightRequest): ListSkillGroupSummaryReportsSinceMidnightResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSkillGroupSummaryReportsSinceMidnight', 'GET', '/', 'json', false, 'json', request);
}

model ListSkillGroupsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', position='Query'),
}

model ListSkillGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        description?: string(name='Description'),
        displayName?: string(name='DisplayName'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        mediaType?: string(name='MediaType'),
        phoneNumberCount?: int32(name='PhoneNumberCount', example='1'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='skillgroup'),
        userCount?: int32(name='UserCount', example='2'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ListSkillGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSkillGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSkillGroups  ListSkillGroupsRequest
  * @return ListSkillGroupsResponse
 */
async function listSkillGroups(request: ListSkillGroupsRequest): ListSkillGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSkillGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListSkillLevelsOfUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  isMember?: boolean(name='IsMember', example='true', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', example='skillgroup', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model ListSkillLevelsOfUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        mediaType?: string(name='MediaType'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='skillgroup'),
        skillLevel?: string(name='SkillLevel', example='5'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListSkillLevelsOfUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSkillLevelsOfUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSkillLevelsOfUser  ListSkillLevelsOfUserRequest
  * @return ListSkillLevelsOfUserResponse
 */
async function listSkillLevelsOfUser(request: ListSkillLevelsOfUserRequest): ListSkillLevelsOfUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSkillLevelsOfUser', 'POST', '/', 'json', false, 'json', request);
}

model ListSmsMetadataRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='100', position='Query'),
  scenarioListJson?: string(name='ScenarioListJson', example='["SATISFACTION_SURVEY","CONTACT_FLOW_NODE"]', position='Query'),
}

model ListSmsMetadataResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        aliyunUid?: long(name='AliyunUid', example='15772400000****'),
        description?: string(name='Description'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        name?: string(name='Name'),
        scenario?: string(name='Scenario', example='MISSED_CALL_NOTIFICATION'),
        signName?: string(name='SignName'),
        smsMetadataId?: string(name='SmsMetadataId', example='5ffc1c9a-4d3d-4019-*****-73255fb01d1c'),
        templateCode?: string(name='TemplateCode', example='SMS_468xxxx298'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='200'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='8707EB29-BAED-4302-B999-40BA61877437'),
}

model ListSmsMetadataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSmsMetadataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSmsMetadata  ListSmsMetadataRequest
  * @return ListSmsMetadataResponse
 */
async function listSmsMetadata(request: ListSmsMetadataRequest): ListSmsMetadataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSmsMetadata', 'POST', '/', 'json', false, 'json', request);
}

model ListTicketTasksRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId?: string(name='TicketId', example='5491d3b4-14ee-4341-b5f1-db2c78beddeb', position='Query'),
}

model ListTicketTasksResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      action?: string(name='Action', example='CounterSignTask'),
      assignee?: string(name='Assignee', example='assignee@ccc-test'),
      assigneeName?: string(name='AssigneeName', example='assignee'),
      comment?: string(name='Comment'),
      endTime?: long(name='EndTime', example='1620269200000'),
      fileKeys?: [ string ](name='FileKeys'),
      fileUrls?: [ string ](name='FileUrls'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      startTime?: long(name='StartTime', example='1620259200000'),
      taskDefinitionNodeId?: string(name='TaskDefinitionNodeId', example='APPROVAL__6zu2QjAz'),
      taskDefinitionNodeType?: string(name='TaskDefinitionNodeType', example='APPROVAL'),
      taskId?: string(name='TaskId', example='eb039a4a6a5742c6b44ccff0c1fca745'),
      taskName?: string(name='TaskName'),
      ticketId?: string(name='TicketId', example='5491d3b4-14ee-4341-b5f1-db2c78beddeb'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='DE803553-8AA9-4B9D-9E4E-A82BC69EDCEE'),
}

model ListTicketTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTicketTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTicketTasks  ListTicketTasksRequest
  * @return ListTicketTasksResponse
 */
async function listTicketTasks(request: ListTicketTasksRequest): ListTicketTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTicketTasks', 'POST', '/', 'json', false, 'json', request);
}

model ListTicketTemplatesRequest {
  categoryId?: string(name='CategoryId', example='43c2671b-********86d0-6bd187905cc8', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='100', position='Query'),
  searchPattern?: string(name='SearchPattern', position='Query'),
  state?: string(name='State', example='Enabled', position='Query'),
}

model ListTicketTemplatesResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        appliedVersion?: string(name='AppliedVersion', example='0'),
        categoryId?: string(name='CategoryId', example='43c2671b-*****-4223-86d0-6bd187905cc8'),
        editor?: string(name='Editor', example='creator@ccc-test'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        latestVersion?: string(name='LatestVersion', example='1715780670000'),
        name?: string(name='Name'),
        processDefinition?: string(name='ProcessDefinition'),
        state?: string(name='State', example='Enabled'),
        templateId?: string(name='TemplateId', example='b5c21219-3a1e-4bc0-92e7-da66e057d2f6'),
        ticketFields?: [ 
          {
            array?: boolean(name='Array', example='false'),
            attribute?: string(name='Attribute', example='{}'),
            createdTime?: long(name='CreatedTime', example='1715780670000'),
            creator?: string(name='Creator', example='creator'),
            dataType?: string(name='DataType', example='String'),
            description?: string(name='Description'),
            disabled?: boolean(name='Disabled', example='false'),
            displayName?: string(name='DisplayName'),
            displayOrder?: int32(name='DisplayOrder', example='1'),
            editorType?: string(name='EditorType', example='textbox'),
            maxLength?: int32(name='MaxLength', example='30'),
            maximum?: double(name='Maximum', example='10'),
            minLength?: int32(name='MinLength', example='1'),
            minimum?: double(name='Minimum', example='1'),
            name?: string(name='Name', example='name'),
            pattern?: string(name='Pattern', example='^'),
            patternErrorMessage?: string(name='PatternErrorMessage'),
            readOnly?: boolean(name='ReadOnly', example='false'),
            required?: boolean(name='Required', example='false'),
            system?: boolean(name='System', example='false'),
            updatedTime?: long(name='UpdatedTime', example='1715780670000'),
          }
        ](name='TicketFields'),
        updatedTime?: long(name='UpdatedTime', example='1715780670000'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    totalCount?: int32(name='TotalCount', example='25'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='8707EB29-BAED-4302-B999-40BA61877437'),
}

model ListTicketTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTicketTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTicketTemplates  ListTicketTemplatesRequest
  * @return ListTicketTemplatesResponse
 */
async function listTicketTemplates(request: ListTicketTemplatesRequest): ListTicketTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTicketTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListTicketsRequest {
  assignee?: string(name='Assignee', example='assignee@cccV2-kmz', position='Query'),
  assigneeType?: string(name='AssigneeType', example='Agent', position='Query'),
  categoryId?: string(name='CategoryId', example='43c2671b-****-4223-86d0-6bd187905cc8', position='Query'),
  creator?: string(name='Creator', example='creator@cccV2-kmz', position='Query'),
  customerId?: string(name='CustomerId', example='51e155ce-3747-*****-b402-13c69597b920', position='Query'),
  endTime?: long(name='EndTime', example='1646928000000', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobIdList?: string(name='JobIdList', example='["job-12******","job-23****"]', position='Query'),
  pageNumber: long(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  participant?: string(name='Participant', example='participant@cccV2-kmz', position='Query'),
  startTime?: long(name='StartTime', example='1646841600000', position='Query'),
  state?: string(name='State', example='Processing', position='Query'),
  ticketId?: string(name='TicketId', example='5491d3b4-14ee-4341-b5f1-db2c78beddeb', position='Query'),
  title?: string(name='Title', position='Query'),
}

model ListTicketsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        assignee?: string(name='Assignee', example='assignee@ccc-test'),
        assigneeName?: string(name='AssigneeName', example='Assignee'),
        categoryId?: string(name='CategoryId', example='43c2671b-*****-4223-86d0-6bd187905cc8'),
        categoryName?: string(name='CategoryName'),
        closeCode?: string(name='CloseCode', example='Completed'),
        comment?: string(name='Comment'),
        context?: string(name='Context', example='{"productName":"alynx"}'),
        createdTime?: string(name='CreatedTime', example='1631440860000'),
        creator?: string(name='Creator', example='creator@ccc-test'),
        creatorName?: string(name='CreatorName', example='Creator'),
        currentTaskId?: string(name='CurrentTaskId', example='0707dab6-34a8-11ef-9823-161e3802b2d4'),
        currentTaskName?: string(name='CurrentTaskName'),
        currentTaskStartTime?: long(name='CurrentTaskStartTime', example='1631440860000'),
        customerId?: string(name='CustomerId', example='51e155ce-*****1-b402-13c69597b920'),
        endTime?: long(name='EndTime', example='1631440860000'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        jobId?: string(name='JobId', example='job-47150***150396416'),
        source?: string(name='Source', example='CHAT'),
        startTime?: long(name='StartTime', example='1631440860000'),
        state?: string(name='State', example='Processing'),
        templateId?: string(name='TemplateId', example='c844a5f0-496c-4c5b-8a0c-dd27686e8ff6'),
        templateVersion?: string(name='TemplateVersion', example='0'),
        ticketId?: string(name='TicketId', example='feb83abd-9f08-49d2-9b56-41d1b66ca0ac'),
        title?: string(name='Title'),
        updatedTime?: string(name='UpdatedTime', example='1631440860000'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='10'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model ListTicketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTicketsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTickets  ListTicketsRequest
  * @return ListTicketsResponse
 */
async function listTickets(request: ListTicketsRequest): ListTicketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTickets', 'POST', '/', 'json', false, 'json', request);
}

model ListUnassignedNumbersRequest {
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=100, position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Query'),
  searchPattern?: string(name='SearchPattern', example='0833', position='Query'),
}

model ListUnassignedNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        city?: string(name='City'),
        number?: string(name='Number', example='08330011****'),
        province?: string(name='Province'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='3'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ListUnassignedNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUnassignedNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUnassignedNumbers  ListUnassignedNumbersRequest
  * @return ListUnassignedNumbersResponse
 */
async function listUnassignedNumbers(request: ListUnassignedNumbersRequest): ListUnassignedNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUnassignedNumbers', 'POST', '/', 'json', false, 'json', request);
}

model ListUserLevelsOfSkillGroupRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  isMember: boolean(name='IsMember', description='This parameter is required.', example='true', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model ListUserLevelsOfSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        displayName?: string(name='DisplayName'),
        loginName?: string(name='LoginName', example='agent'),
        ramId?: string(name='RamId'),
        roleId?: string(name='RoleId', example='Admin@ccc-test'),
        roleName?: string(name='RoleName', example='Admin'),
        skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='skillgroup'),
        skillLevel?: int32(name='SkillLevel', example='5'),
        userId?: string(name='UserId', example='agent@ccc-test'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListUserLevelsOfSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserLevelsOfSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserLevelsOfSkillGroup  ListUserLevelsOfSkillGroupRequest
  * @return ListUserLevelsOfSkillGroupResponse
 */
async function listUserLevelsOfSkillGroup(request: ListUserLevelsOfSkillGroupRequest): ListUserLevelsOfSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserLevelsOfSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  searchPattern?: string(name='SearchPattern', example='agent', position='Query'),
  skillGroupId?: string(name='SkillGroupId', position='Query'),
}

model ListUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        deviceExt?: string(name='DeviceExt', example='8033****'),
        deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
        deviceState?: string(name='DeviceState', example='OFFLINE'),
        displayId?: string(name='DisplayId', example='1001'),
        displayName?: string(name='DisplayName'),
        email?: string(name='Email', example='username@example.com'),
        extension?: string(name='Extension', example='8031****'),
        loginName?: string(name='LoginName', example='agent'),
        mobile?: string(name='Mobile', example='1382114****'),
        personalOutboundNumberList?: [ 
          {
            active?: boolean(name='Active', example='true'),
            city?: string(name='City'),
            number?: string(name='Number', example='0830011****'),
            province?: string(name='Province'),
            usage?: string(name='Usage', example='Bidirection'),
          }
        ](name='PersonalOutboundNumberList'),
        primary?: boolean(name='Primary'),
        primaryAccount?: boolean(name='PrimaryAccount', example='false'),
        ramId?: long(name='RamId', example='21234502254620****'),
        roleId?: string(name='RoleId', example='Admin@ccc-test'),
        roleName?: string(name='RoleName', example='Admin'),
        skillLevelList?: [ 
          {
            skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
            skillGroupName?: string(name='SkillGroupName', example='skillgroup'),
            skillLevel?: int32(name='SkillLevel', example='5'),
          }
        ](name='SkillLevelList'),
        userId?: string(name='UserId', example='agent@ccc-test'),
        workMode?: string(name='WorkMode', example='ON_SITE'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListVoicemailsRequest {
  caller?: string(name='Caller', example='073xxxx7539', position='Query'),
  contactId?: string(name='ContactId', example='job-125152394144124921', position='Query'),
  endTime?: long(name='EndTime', example='1532707199000', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  name?: string(name='Name', example='voicemail-test', deprecated='true', position='Query'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
  startTime?: long(name='StartTime', example='1532448000000', position='Query'),
}

model ListVoicemailsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        callee?: string(name='Callee', example='0533128****'),
        caller?: string(name='Caller', example='073xxxx7539'),
        cdrStartTime?: long(name='CdrStartTime'),
        contactId?: string(name='ContactId', example='job-125152394144124921'),
        duration?: long(name='Duration', example='16'),
        instanceId?: string(name='InstanceId', example='ccc-test'),
        name?: string(name='Name', example='voicemail-test'),
        recordingDuration?: long(name='RecordingDuration'),
        startTime?: string(name='StartTime', example='1631440860000'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ListVoicemailsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVoicemailsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVoicemails  ListVoicemailsRequest
  * @return ListVoicemailsResponse
 */
async function listVoicemails(request: ListVoicemailsRequest): ListVoicemailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVoicemails', 'POST', '/', 'json', false, 'json', request);
}

model ListWaitingChatsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupIdList?: string(name='SkillGroupIdList', example='["skillgroup1@ccc-test", "skillgroup2@ccc-test"]', position='Query'),
}

model ListWaitingChatsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      accessChannelId?: string(name='AccessChannelId', example='843073c2-*****-49fb-a616-738ddddfebdc'),
      accessChannelType?: string(name='AccessChannelType', example='Web'),
      beingAssigned?: boolean(name='BeingAssigned', example='false'),
      chatConversationId?: string(name='ChatConversationId', example='$23086709$EAUNIT'),
      enqueueTime?: long(name='EnqueueTime', example='1718868572094'),
      jobId?: string(name='JobId', example='chat-434537064047960064'),
      messages?: [ 
        {
          content?: string(name='Content'),
          senderId?: string(name='SenderId', example='c361765f-******-4e07-b81c-4b5d9183fac6'),
          senderType?: string(name='SenderType'),
        }
      ](name='Messages'),
      skillGroupId?: string(name='SkillGroupId'),
      userList?: [ 
        {
          avatarUrl?: string(name='AvatarUrl'),
          userId?: string(name='UserId', example='c361765f-******-4e07-b81c-4b5d9183fac6'),
          userName?: string(name='UserName'),
          userType?: string(name='UserType', example='CUSTOMER'),
        }
      ](name='UserList'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716'),
}

model ListWaitingChatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWaitingChatsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWaitingChats  ListWaitingChatsRequest
  * @return ListWaitingChatsResponse
 */
async function listWaitingChats(request: ListWaitingChatsRequest): ListWaitingChatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWaitingChats', 'POST', '/', 'json', false, 'json', request);
}

model MakeCallRequest {
  callee: string(name='Callee', description='This parameter is required.', example='1318888****', position='Query'),
  caller?: string(name='Caller', example='010989****', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  flashSmsVariables?: string(name='FlashSmsVariables', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  maskedCallee?: string(name='MaskedCallee', example='131****8888', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  tags?: string(name='Tags', example='tags', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='30', minimum=30, maximum=300, position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model MakeCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='NONE'),
          destination?: string(name='Destination', example='8001****'),
          jobId?: string(name='JobId', example='job-6570007401392****'),
          mediaType?: string(name='MediaType'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp', example='1609225718295'),
          userExtension?: string(name='UserExtension', example='8001****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6570007401392****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='123456'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8001****'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6570007401392****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='READY'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='26A34338-5CD9-4C95-A7A6-5BDCE76C6B94'),
}

model MakeCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MakeCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MakeCall  MakeCallRequest
  * @return MakeCallResponse
 */
async function makeCall(request: MakeCallRequest): MakeCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MakeCall', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAudioFileRequest {
  audioFileName: string(name='AudioFileName', description='This parameter is required.', example='new-test-file.wav', position='Query'),
  audioResourceId: string(name='AudioResourceId', description='This parameter is required.', example='acc300c4-75c9-41ba-ba5e-2a365c96c248', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  name: string(name='Name', description='This parameter is required.', position='Query'),
  ossFileKey: string(name='OssFileKey', description='This parameter is required.', example='ccc-test/new-test-file.wav', position='Query'),
  usage?: string(name='Usage', position='Query'),
}

model ModifyAudioFileResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='D2F84AAC-7C79-547F-8EE9-7B735F42B93F'),
}

model ModifyAudioFileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAudioFileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAudioFile  ModifyAudioFileRequest
  * @return ModifyAudioFileResponse
 */
async function modifyAudioFile(request: ModifyAudioFileRequest): ModifyAudioFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAudioFile', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCustomCallTaggingRequest {
  callTagNameList?: string(name='CallTagNameList', example='["TagA","TagB"]', position='Query'),
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='1312121****', position='Query'),
}

model ModifyCustomCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ModifyCustomCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCustomCallTaggingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCustomCallTagging  ModifyCustomCallTaggingRequest
  * @return ModifyCustomCallTaggingResponse
 */
async function modifyCustomCallTagging(request: ModifyCustomCallTaggingRequest): ModifyCustomCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCustomCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  description?: string(name='Description', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='83TKE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ModifyInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyInstance  ModifyInstanceRequest
  * @return ModifyInstanceResponse
 */
async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPhoneNumberRequest {
  contactFlowId?: string(name='ContactFlowId', example='78128960-bb00-4ddc-8a82-923a8c5bd22d', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='0102134****', position='Query'),
  usage: string(name='Usage', description='This parameter is required.', example='Bidirection', minLength=1, maxLength=200, position='Query'),
}

model ModifyPhoneNumberResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ModifyPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPhoneNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyPhoneNumber  ModifyPhoneNumberRequest
  * @return ModifyPhoneNumberResponse
 */
async function modifyPhoneNumber(request: ModifyPhoneNumberRequest): ModifyPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPhoneNumber', 'POST', '/', 'json', false, 'json', request);
}

model ModifySkillGroupRequest {
  description?: string(name='Description', position='Query'),
  displayName?: string(name='DisplayName', minLength=1, maxLength=200, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model ModifySkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ModifySkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySkillGroup  ModifySkillGroupRequest
  * @return ModifySkillGroupResponse
 */
async function modifySkillGroup(request: ModifySkillGroupRequest): ModifySkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifySkillLevelsOfUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillLevelList: string(name='SkillLevelList', description='This parameter is required.', example='[{"skillGroupId":"skillgroup1@ccc-test","skillLevel":1},{"skillGroupId":"skillgroup2@ccc-test","skillLevel":10}]', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
}

model ModifySkillLevelsOfUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E49D8B83-A3EC-44D4-A920-578BC3C698AD'),
}

model ModifySkillLevelsOfUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySkillLevelsOfUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifySkillLevelsOfUser  ModifySkillLevelsOfUserRequest
  * @return ModifySkillLevelsOfUserResponse
 */
async function modifySkillLevelsOfUser(request: ModifySkillLevelsOfUserRequest): ModifySkillLevelsOfUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySkillLevelsOfUser', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserRequest {
  avatarUrl?: string(name='AvatarUrl', position='Query'),
  displayId?: string(name='DisplayId', example='1001', position='Query'),
  displayName?: string(name='DisplayName', position='Query'),
  force?: boolean(name='Force', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  mobile?: string(name='Mobile', example='1382114****', position='Query'),
  nickname?: string(name='Nickname', position='Query'),
  roleId?: string(name='RoleId', example='Admin@ccc-test', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='user-test@ccc-test', position='Query'),
  workMode: string(name='WorkMode', description='This parameter is required.', example='ON_SITE', position='Query'),
}

model ModifyUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ModifyUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyUser  ModifyUserRequest
  * @return ModifyUserResponse
 */
async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUser', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserLevelsOfSkillGroupRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
  userLevelList: string(name='UserLevelList', description='This parameter is required.', example='[{"userId":"agent1@ccc-test","skillLevel":1},{"userId":"agent2@ccc-test","skillLevel":10}]', position='Query'),
}

model ModifyUserLevelsOfSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E49D8B83-A3EC-44D4-A920-578BC3C698AD'),
}

model ModifyUserLevelsOfSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserLevelsOfSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyUserLevelsOfSkillGroup  ModifyUserLevelsOfSkillGroupRequest
  * @return ModifyUserLevelsOfSkillGroupResponse
 */
async function modifyUserLevelsOfSkillGroup(request: ModifyUserLevelsOfSkillGroupRequest): ModifyUserLevelsOfSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserLevelsOfSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model MonitorCallRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  monitoredUserId: string(name='MonitoredUserId', description='This parameter is required.', example='agent2@ccc-test', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='30', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model MonitorCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='CREATED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='BREAK'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model MonitorCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MonitorCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MonitorCall  MonitorCallRequest
  * @return MonitorCallResponse
 */
async function monitorCall(request: MonitorCallRequest): MonitorCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MonitorCall', 'POST', '/', 'json', false, 'json', request);
}

model MuteCallRequest {
  channelId?: string(name='ChannelId', example='ch:user:1318888****->8001****:1609253204816:job-6581536084722****', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6581536084722****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model MuteCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='[]'),
          channelId?: string(name='ChannelId', example='ch:user:1318888****->8001****:1609253204816:job-6581536084722****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='8001****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6581536084722****'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp', example='1609253212511'),
          userExtension?: string(name='UserExtension', example='8001****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6581536084722****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8001****'),
      heartbeat?: long(name='Heartbeat', example='1609253205896'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6581536084722****'),
      mobile?: string(name='Mobile', example='1390000****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609253204811'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='A275B008-A25B-494D-AB53-93CE253815B6'),
}

model MuteCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MuteCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MuteCall  MuteCallRequest
  * @return MuteCallResponse
 */
async function muteCall(request: MuteCallRequest): MuteCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MuteCall', 'POST', '/', 'json', false, 'json', request);
}

model PauseCampaignRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model PauseCampaignResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='4A68E287-6888-5ADB-8048-DB488B4DEF35'),
}

model PauseCampaignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PauseCampaignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PauseCampaign  PauseCampaignRequest
  * @return PauseCampaignResponse
 */
async function pauseCampaign(request: PauseCampaignRequest): PauseCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseCampaign', 'POST', '/', 'json', false, 'json', request);
}

model PickOutboundNumbersRequest {
  calledNumber: string(name='CalledNumber', description='This parameter is required.', example='1388888****', position='Query'),
  count?: int32(name='Count', example='1', minimum=1, maximum=3, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupIdList: string(name='SkillGroupIdList', description='This parameter is required.', example='["skillgroup@ccc-test"]', position='Query'),
}

model PickOutboundNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      callee?: {
        city?: string(name='City'),
        number?: string(name='Number', example='1388888****'),
        province?: string(name='Province'),
      }(name='Callee'),
      caller?: {
        city?: string(name='City'),
        number?: string(name='Number', example='0108989****'),
        province?: string(name='Province'),
      }(name='Caller'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model PickOutboundNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PickOutboundNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PickOutboundNumbers  PickOutboundNumbersRequest
  * @return PickOutboundNumbersResponse
 */
async function pickOutboundNumbers(request: PickOutboundNumbersRequest): PickOutboundNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PickOutboundNumbers', 'POST', '/', 'json', false, 'json', request);
}

model PollUserStatusRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model PollUserStatusResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      callVariables?: string(name='CallVariables', example='a=b;c=d'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='CREATED'),
          channelVariables?: string(name='ChannelVariables', example='123'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    chatContexts?: [ 
      {
        callVariables?: string(name='CallVariables'),
        chatType?: string(name='ChatType'),
        instanceId?: string(name='InstanceId'),
        jobId?: string(name='JobId'),
        members?: [ 
          {
            index?: int32(name='Index'),
            releaseInitiator?: string(name='ReleaseInitiator'),
            releaseReason?: string(name='ReleaseReason'),
            skillGroupId?: string(name='SkillGroupId'),
            status?: string(name='Status'),
            userId?: string(name='UserId'),
            userType?: string(name='UserType'),
          }
        ](name='Members'),
      }
    ](name='ChatContexts'),
    contextId?: long(name='ContextId', example='103655'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      parallelJobList?: [ 
        {
          jobId?: string(name='JobId'),
          status?: string(name='Status'),
          timestamp?: long(name='Timestamp'),
        }
      ](name='ParallelJobList'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='BREAK'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model PollUserStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PollUserStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PollUserStatus  PollUserStatusRequest
  * @return PollUserStatusResponse
 */
async function pollUserStatus(request: PollUserStatusRequest): PollUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PollUserStatus', 'POST', '/', 'json', false, 'json', request);
}

model ProcessAliMeCallbackOfStagingRequest {
  data?: string(name='Data', position='Query'),
  token?: string(name='Token', position='Query'),
}

model ProcessAliMeCallbackOfStagingResponseBody = {
  code?: string(name='Code'),
  data?: {
    result?: string(name='Result'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ProcessAliMeCallbackOfStagingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProcessAliMeCallbackOfStagingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ProcessAliMeCallbackOfStaging  ProcessAliMeCallbackOfStagingRequest
  * @return ProcessAliMeCallbackOfStagingResponse
 */
async function processAliMeCallbackOfStaging(request: ProcessAliMeCallbackOfStagingRequest): ProcessAliMeCallbackOfStagingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ProcessAliMeCallbackOfStaging', 'POST', '/', 'json', false, 'json', request);
}

model PublishContactFlowRequest {
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='b0a063bf-f138-42a4-ad9f-9babe3ec1a9e', position='Query'),
  draftId: string(name='DraftId', description='This parameter is required.', example='0e0b8e78-af3e-4360-a5c5-f9bb5c2b8af2', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model PublishContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BFB6788F-20D4-5767-BC67-99EAAC28F789'),
}

model PublishContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishContactFlow  PublishContactFlowRequest
  * @return PublishContactFlowResponse
 */
async function publishContactFlow(request: PublishContactFlowRequest): PublishContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishContactFlow', 'POST', '/', 'json', false, 'json', request);
}

model ReadyForServiceRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  outboundScenario?: boolean(name='OutboundScenario', example='false', position='Query'),
  userId?: string(name='UserId', example='user-test@ccc-test', position='Query'),
}

model ReadyForServiceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakCode?: string(name='BreakCode', example='Warm-up'),
    deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
    extension?: string(name='Extension', example='8001****'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    jobId?: string(name='JobId', example='job-6538214103685****'),
    outboundScenario?: boolean(name='OutboundScenario', example='false'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    userState?: string(name='UserState', example='READY'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='CC49060B-87ED-489A-AD3D-00E57775DBFF'),
}

model ReadyForServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadyForServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadyForService  ReadyForServiceRequest
  * @return ReadyForServiceResponse
 */
async function readyForService(request: ReadyForServiceRequest): ReadyForServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadyForService', 'POST', '/', 'json', false, 'json', request);
}

model RedialCallRequest {
  callee?: string(name='Callee', example='1318888****', position='Query'),
  caller?: string(name='Caller', example='0109810****', position='Query'),
  deviceId?: string(name='DeviceId', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='abc', position='Query'),
  jobId?: string(name='JobId', example='job-6581536084722****', position='Query'),
  tags?: string(name='Tags', example='a=b', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='30', minimum=30, maximum=300, position='Query'),
  userId?: string(name='UserId', example='samzhang@abc', position='Query'),
}

model RedialCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='COACHING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='CREATED'),
          destination?: string(name='Destination', example='8001****'),
          jobId?: string(name='JobId', example='job-6573574060089****'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='139xxxx0501'),
          releaseReason?: string(name='ReleaseReason', example='486:USER_BUSY'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8000****'),
          userId?: string(name='UserId', example='samzhang@abc'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='abc'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='123456789'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension', example='8000****'),
      instanceId?: string(name='InstanceId', example='abc'),
      jobId?: string(name='JobId', example='job-6573574060089****'),
      outboundScenario?: boolean(name='OutboundScenario', example='False'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='samzhang@abc'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BF268B34-09C2-43FD-BAC4-5D31EA63****'),
}

model RedialCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RedialCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RedialCall  RedialCallRequest
  * @return RedialCallResponse
 */
async function redialCall(request: RedialCallRequest): RedialCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RedialCall', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDeviceRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='test-device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  password: string(name='Password', description='This parameter is required.', example='password', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RegisterDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterDevice  RegisterDeviceRequest
  * @return RegisterDeviceResponse
 */
async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDevice', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDevicesRequest {
  deviceId: string(name='DeviceId', description='This parameter is required.', example='test-device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  password: string(name='Password', description='This parameter is required.', example='password', position='Query'),
  userIdListJson?: string(name='UserIdListJson', example='["user-test@ccc-test"]', position='Query'),
}

model RegisterDevicesResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model RegisterDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDevicesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterDevices  RegisterDevicesRequest
  * @return RegisterDevicesResponse
 */
async function registerDevices(request: RegisterDevicesRequest): RegisterDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDevices', 'POST', '/', 'json', false, 'json', request);
}

model RejectChatRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='chat-65382141036853491', position='Query'),
}

model RejectChatResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='B59382D2-5755-4C6D-861F-FA2AAD8F89F7'),
}

model RejectChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RejectChat  RejectChatRequest
  * @return RejectChatResponse
 */
async function rejectChat(request: RejectChatRequest): RejectChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectChat', 'POST', '/', 'json', false, 'json', request);
}

model RejectTicketRequest {
  comment?: string(name='Comment', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId?: string(name='TicketId', example='f2c6722b-cd13-442d-bf10-22a07c70d6d5', position='Query'),
}

model RejectTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='678F7002-CA01-4ABF-A112-585AFBDF3A3B'),
}

model RejectTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RejectTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RejectTicket  RejectTicketRequest
  * @return RejectTicketResponse
 */
async function rejectTicket(request: RejectTicketRequest): RejectTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RejectTicket', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseCallRequest {
  channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-6538214103685****', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model ReleaseCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='CREATED'),
          channelVariables?: string(name='ChannelVariables'),
          destination?: string(name='Destination', example='1390501****'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    contextId?: long(name='ContextId', example='123456'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='BREAK'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ReleaseCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseCall  ReleaseCallRequest
  * @return ReleaseCallResponse
 */
async function releaseCall(request: ReleaseCallRequest): ReleaseCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseCall', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseChatRequest {
  instanceId?: string(name='InstanceId', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='chat-6538214103685****', position='Query'),
  token?: string(name='Token', example='9XYGTGWtq2wFi_Bpg7aUnIoYi_vG_rO3bjEn0YtsxbHRHrYHlz1LDBLJAyZcLxieRQR4h_6AnWvTjJeNU5jg************Hwej7WgWrmA=', position='Query'),
  userId?: string(name='UserId', example='edbcf95a-ef9f-4296-a0a6-985ac9e36db3', position='Query'),
  userType: string(name='UserType', description='This parameter is required.', example='CUSTOMER', position='Query'),
}

model ReleaseChatResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='B06B3244-1B44-481B-90C4-F2F92E59D6B5'),
}

model ReleaseChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseChat  ReleaseChatRequest
  * @return ReleaseChatResponse
 */
async function releaseChat(request: ReleaseChatRequest): ReleaseChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseChat', 'POST', '/', 'json', false, 'json', request);
}

model RemoveBlacklistCallTaggingRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId?: string(name='JobId', example='job-6538214103685****', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='1312121****', position='Query'),
}

model RemoveBlacklistCallTaggingResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='03C67DAD-EB26-41D8-949D-9B0C470FB716'),
}

model RemoveBlacklistCallTaggingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveBlacklistCallTaggingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveBlacklistCallTagging  RemoveBlacklistCallTaggingRequest
  * @return RemoveBlacklistCallTaggingResponse
 */
async function removeBlacklistCallTagging(request: RemoveBlacklistCallTaggingRequest): RemoveBlacklistCallTaggingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveBlacklistCallTagging', 'POST', '/', 'json', false, 'json', request);
}

model RemoveDoNotCallNumbersRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList?: string(name='NumberList', example='["1900000****","1312211****"]', position='Query'),
}

model RemoveDoNotCallNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model RemoveDoNotCallNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveDoNotCallNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveDoNotCallNumbers  RemoveDoNotCallNumbersRequest
  * @return RemoveDoNotCallNumbersResponse
 */
async function removeDoNotCallNumbers(request: RemoveDoNotCallNumbersRequest): RemoveDoNotCallNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveDoNotCallNumbers', 'POST', '/', 'json', false, 'json', request);
}

model RemovePersonalNumbersFromUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList: string(name='NumberList', description='This parameter is required.', example='["0101234****", "0105678****"]', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
}

model RemovePersonalNumbersFromUserResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model RemovePersonalNumbersFromUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemovePersonalNumbersFromUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemovePersonalNumbersFromUser  RemovePersonalNumbersFromUserRequest
  * @return RemovePersonalNumbersFromUserResponse
 */
async function removePersonalNumbersFromUser(request: RemovePersonalNumbersFromUserRequest): RemovePersonalNumbersFromUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemovePersonalNumbersFromUser', 'POST', '/', 'json', false, 'json', request);
}

model RemovePhoneNumberFromSkillGroupsRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  number: string(name='Number', description='This parameter is required.', example='0101234****', position='Query'),
  skillGroupIdList: string(name='SkillGroupIdList', description='This parameter is required.', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]', position='Query'),
}

model RemovePhoneNumberFromSkillGroupsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RemovePhoneNumberFromSkillGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemovePhoneNumberFromSkillGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemovePhoneNumberFromSkillGroups  RemovePhoneNumberFromSkillGroupsRequest
  * @return RemovePhoneNumberFromSkillGroupsResponse
 */
async function removePhoneNumberFromSkillGroups(request: RemovePhoneNumberFromSkillGroupsRequest): RemovePhoneNumberFromSkillGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemovePhoneNumberFromSkillGroups', 'POST', '/', 'json', false, 'json', request);
}

model RemovePhoneNumbersRequest {
  force?: boolean(name='Force', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList: string(name='NumberList', description='This parameter is required.', example='["0101234****","0105678****"]', position='Query'),
}

model RemovePhoneNumbersResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RemovePhoneNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemovePhoneNumbersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemovePhoneNumbers  RemovePhoneNumbersRequest
  * @return RemovePhoneNumbersResponse
 */
async function removePhoneNumbers(request: RemovePhoneNumbersRequest): RemovePhoneNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemovePhoneNumbers', 'POST', '/', 'json', false, 'json', request);
}

model RemovePhoneNumbersFromSkillGroupRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  numberList: string(name='NumberList', description='This parameter is required.', example='["0101234****","0105678****"]', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
}

model RemovePhoneNumbersFromSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RemovePhoneNumbersFromSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemovePhoneNumbersFromSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemovePhoneNumbersFromSkillGroup  RemovePhoneNumbersFromSkillGroupRequest
  * @return RemovePhoneNumbersFromSkillGroupResponse
 */
async function removePhoneNumbersFromSkillGroup(request: RemovePhoneNumbersFromSkillGroupRequest): RemovePhoneNumbersFromSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemovePhoneNumbersFromSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSkillGroupsFromUserRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupIdList: string(name='SkillGroupIdList', description='This parameter is required.', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
}

model RemoveSkillGroupsFromUserResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RemoveSkillGroupsFromUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSkillGroupsFromUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveSkillGroupsFromUser  RemoveSkillGroupsFromUserRequest
  * @return RemoveSkillGroupsFromUserResponse
 */
async function removeSkillGroupsFromUser(request: RemoveSkillGroupsFromUserRequest): RemoveSkillGroupsFromUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSkillGroupsFromUser', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUsersRequest {
  filePath?: string(name='FilePath', position='Query'),
  force?: boolean(name='Force', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  notificationEmail?: string(name='NotificationEmail', position='Query'),
  userIdList?: string(name='UserIdList', example='["agent1@ccc-test","agent2@ccc-test"]', position='Query'),
}

model RemoveUsersResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RemoveUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUsers  RemoveUsersRequest
  * @return RemoveUsersResponse
 */
async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsers', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUsersFromSkillGroupRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  skillGroupId: string(name='SkillGroupId', description='This parameter is required.', example='skillgroup@ccc-test', position='Query'),
  userIdList: string(name='UserIdList', description='This parameter is required.', example='["agent1@ccc-test","agent2@ccc-test"]', position='Query'),
}

model RemoveUsersFromSkillGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RemoveUsersFromSkillGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUsersFromSkillGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUsersFromSkillGroup  RemoveUsersFromSkillGroupRequest
  * @return RemoveUsersFromSkillGroupResponse
 */
async function removeUsersFromSkillGroup(request: RemoveUsersFromSkillGroupRequest): RemoveUsersFromSkillGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsersFromSkillGroup', 'POST', '/', 'json', false, 'json', request);
}

model ResetAgentStateRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model ResetAgentStateResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakCode?: string(name='BreakCode', example='Warm-up'),
    deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
    extension?: string(name='Extension', example='8001****'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    jobId?: string(name='JobId'),
    outboundScenario?: boolean(name='OutboundScenario', example='false'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    userState?: string(name='UserState', example='OFFLINE'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model ResetAgentStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAgentStateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetAgentState  ResetAgentStateRequest
  * @return ResetAgentStateResponse
 */
async function resetAgentState(request: ResetAgentStateRequest): ResetAgentStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAgentState', 'POST', '/', 'json', false, 'json', request);
}

model ResetUserPasswordRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  password: string(name='Password', description='This parameter is required.', example='password', position='Query'),
  userId: string(name='UserId', description='This parameter is required.', example='agent@ccc-test', position='Query'),
}

model ResetUserPasswordResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model ResetUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetUserPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetUserPassword  ResetUserPasswordRequest
  * @return ResetUserPasswordResponse
 */
async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetUserPassword', 'POST', '/', 'json', false, 'json', request);
}

model RestoreArchivedRecordingsRequest {
  contactIds?: string(name='ContactIds', example='[\\"job-216750038017142784\\"]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model RestoreArchivedRecordingsResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      contactId?: string(name='ContactId', example='job-25920271311543****'),
      exists?: string(name='Exists', example='False'),
      status?: string(name='Status', example='Progressing'),
      storageType?: string(name='StorageType', example='Standard'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Instance 0 does not exist.'),
  requestId?: string(name='RequestId', example='F8066648-5D95-55AB-ACD3-2F4AD3BEA715'),
}

model RestoreArchivedRecordingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestoreArchivedRecordingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestoreArchivedRecordings  RestoreArchivedRecordingsRequest
  * @return RestoreArchivedRecordingsResponse
 */
async function restoreArchivedRecordings(request: RestoreArchivedRecordingsRequest): RestoreArchivedRecordingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestoreArchivedRecordings', 'POST', '/', 'json', false, 'json', request);
}

model ResubmitTicketRequest {
  comment?: string(name='Comment', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId: string(name='TicketId', description='This parameter is required.', example='f2c6722b-cd13-442d-bf10-22a07c70d6d5', position='Query'),
}

model ResubmitTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716'),
}

model ResubmitTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResubmitTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResubmitTicket  ResubmitTicketRequest
  * @return ResubmitTicketResponse
 */
async function resubmitTicket(request: ResubmitTicketRequest): ResubmitTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResubmitTicket', 'POST', '/', 'json', false, 'json', request);
}

model ResumeCampaignRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model ResumeCampaignResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F505C4C8-1E12-573A-9BA7-4BEAAD129553'),
}

model ResumeCampaignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeCampaignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumeCampaign  ResumeCampaignRequest
  * @return ResumeCampaignResponse
 */
async function resumeCampaign(request: ResumeCampaignRequest): ResumeCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeCampaign', 'POST', '/', 'json', false, 'json', request);
}

model RetrieveCallRequest {
  channelId: string(name='ChannelId', description='This parameter is required.', example='ch:user:1390501****->8032****:1609138902226:job-6538214103685****', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6538214103685****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model RetrieveCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='CREATED'),
          destination?: string(name='Destination', example='1390501****'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='BREAK'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model RetrieveCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RetrieveCall  RetrieveCallRequest
  * @return RetrieveCallResponse
 */
async function retrieveCall(request: RetrieveCallRequest): RetrieveCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetrieveCall', 'POST', '/', 'json', false, 'json', request);
}

model SaveDocumentRequest {
  documentId?: string(name='DocumentId', example='xxx', position='Body'),
  documentJson: string(name='DocumentJson', description='This parameter is required.', example='{"name":"tom"}', position='Body'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Body'),
  requestId?: string(name='RequestId', example='EAF3C248-E123-441B-A545-B6CD02E98EED', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model SaveDocumentResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='0101234****'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='01B12EE4-6AF2-4730-8B78-EC15F4E5C025'),
}

model SaveDocumentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveDocumentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveDocument  SaveDocumentRequest
  * @return SaveDocumentResponse
 */
async function saveDocument(request: SaveDocumentRequest): SaveDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveDocument', 'POST', '/', 'json', true, 'form', request);
}

model SaveRTCStatsV2Request {
  callId: string(name='CallId', description='This parameter is required.', example='257e73de-1ee8-123b-0b9a-00163e0a****', position='Query'),
  generalInfo: string(name='GeneralInfo', description='This parameter is required.', position='Query'),
  googAddress: string(name='GoogAddress', description='This parameter is required.', example='["47.101.XX.XX","44368","47.104.XX.XX","37947"]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  receiverReport: string(name='ReceiverReport', description='This parameter is required.', example='["1","1649328987","40","PCMU","383560","89","49","ssrc_1649328987_recv","2022-03-15T09:52:08.820Z","","0","20000"]', position='Query'),
  senderReport: string(name='SenderReport', description='This parameter is required.', example='["11090","2055127460","0","2236","384592","ssrc_2055127460_send","2022-03-15T09:52:08.820Z","1"]', position='Query'),
}

model SaveRTCStatsV2ResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
  rowCount?: long(name='RowCount', example='1'),
  success?: boolean(name='Success', example='true'),
  timeStamp?: long(name='TimeStamp', example='1647309061000'),
}

model SaveRTCStatsV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveRTCStatsV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveRTCStatsV2  SaveRTCStatsV2Request
  * @return SaveRTCStatsV2Response
 */
async function saveRTCStatsV2(request: SaveRTCStatsV2Request): SaveRTCStatsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveRTCStatsV2', 'POST', '/', 'json', false, 'json', request);
}

model SaveTerminalLogRequest {
  appName: string(name='AppName', description='This parameter is required.', example='CCCClient', position='Query'),
  callId: string(name='CallId', description='This parameter is required.', example='e13c9740-1e37-123b-21b6-00163e352f9', position='Query'),
  content: string(name='Content', description='This parameter is required.', example='none', position='Query'),
  dataType: int32(name='DataType', description='This parameter is required.', example='1', minimum=0, maximum=100, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-b8b0ca63-330c-4e65-8ae3-9de2c7ce7683', position='Query'),
  methodName?: string(name='MethodName', example='TurnServerTest', position='Query'),
  status: string(name='Status', description='This parameter is required.', example='true', position='Query'),
  uniqueRequestId: string(name='UniqueRequestId', description='This parameter is required.', example='none', position='Query'),
}

model SaveTerminalLogResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
  success?: boolean(name='Success', example='true'),
  timeStamp?: long(name='TimeStamp', example='1647309061000'),
}

model SaveTerminalLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveTerminalLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveTerminalLog  SaveTerminalLogRequest
  * @return SaveTerminalLogResponse
 */
async function saveTerminalLog(request: SaveTerminalLogRequest): SaveTerminalLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTerminalLog', 'POST', '/', 'json', false, 'json', request);
}

model SaveWebRTCStatsRequest {
  callId: string(name='CallId', description='This parameter is required.', example='257e73de-1ee8-123b-0b9a-00163e0a****', position='Query'),
  generalInfo: string(name='GeneralInfo', description='This parameter is required.', position='Query'),
  googAddress: string(name='GoogAddress', description='This parameter is required.', example='["47.101.XX.XX","44368","47.104.XX.XX","37947"]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  receiverReport: string(name='ReceiverReport', description='This parameter is required.', example='["1","1649328987","40","PCMU","383560","89","49","ssrc_1649328987_recv","2022-03-15T09:52:08.820Z","","0","20000"]', position='Query'),
  senderReport: string(name='SenderReport', description='This parameter is required.', example='["11090","2055127460","0","2236","384592","ssrc_2055127460_send","2022-03-15T09:52:08.820Z","1"]', position='Query'),
}

model SaveWebRTCStatsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='CF1C21B9-2D49-4B54-880F-FBE248C16903'),
  rowCount?: long(name='RowCount', example='1'),
  success?: boolean(name='Success', example='true'),
  timeStamp?: long(name='TimeStamp', example='1555492246000'),
}

model SaveWebRTCStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveWebRTCStatsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveWebRTCStats  SaveWebRTCStatsRequest
  * @return SaveWebRTCStatsResponse
 */
async function saveWebRTCStats(request: SaveWebRTCStatsRequest): SaveWebRTCStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveWebRTCStats', 'POST', '/', 'json', false, 'json', request);
}

model SaveWebRtcInfoRequest {
  callId: string(name='CallId', description='This parameter is required.', example='e13c9740-1e37-123b-21b6-00163e352f9', position='Query'),
  content: string(name='Content', description='This parameter is required.', example='{"media_source":{},"remote_inbound_rtp":{},"outbound_rtp":{},"inbound_rtp":{},"remote_outbound_rtp":{},"candidate":{},"basic":{"callId":"e13c9740-1e37-123b-21b6-00163e352f9","timestamp":"1647262108395","callStartTime":"1647262108393","uid":"user-test","access_point":"shanghai","browser":"90","ip":"127.0.0.1"}}', position='Query'),
  contentType: string(name='ContentType', description='This parameter is required.', example='4', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-b8b0ca63-330c-4e65-8ae3-9de2c7ce7683', position='Query'),
}

model SaveWebRtcInfoResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='CF1C21B9-2D49-4B54-880F-FBE248C16903'),
  rowCount?: long(name='RowCount', example='1'),
  success?: boolean(name='Success', example='true'),
  timeStamp?: long(name='TimeStamp', example='1647262108395'),
}

model SaveWebRtcInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveWebRtcInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveWebRtcInfo  SaveWebRtcInfoRequest
  * @return SaveWebRtcInfoResponse
 */
async function saveWebRtcInfo(request: SaveWebRtcInfoRequest): SaveWebRtcInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveWebRtcInfo', 'POST', '/', 'json', false, 'json', request);
}

model SendDtmfSignalingRequest {
  channelId: string(name='ChannelId', description='This parameter is required.', example='ch:customer:0108989****->1318888****:1609234221870:job-6573574060089****', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  dtmf: string(name='Dtmf', description='This parameter is required.', example='5', maxLength=1000000, position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-6573574060089****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model SendDtmfSignalingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:131888****->8001****:1609234221870:job-6573574060089****'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='8001****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6573574060089****'),
          originator?: string(name='Originator', example='0101234****'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609234222367'),
          userExtension?: string(name='UserExtension', example='8001****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6573574060089****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8001****'),
      heartbeat?: long(name='Heartbeat', example='1609234222375'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6573574060089****'),
      mobile?: string(name='Mobile', example='1390000****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609234221864'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='842399EC-7D32-4472-AD08-9504C3F141FF'),
}

model SendDtmfSignalingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendDtmfSignalingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendDtmfSignaling  SendDtmfSignalingRequest
  * @return SendDtmfSignalingResponse
 */
async function sendDtmfSignaling(request: SendDtmfSignalingRequest): SendDtmfSignalingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendDtmfSignaling', 'POST', '/', 'json', false, 'json', request);
}

model SignInGroupRequest {
  additivity?: boolean(name='Additivity', position='Query'),
  chatDeviceId?: string(name='ChatDeviceId', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  signedSkillGroupIdList: string(name='SignedSkillGroupIdList', description='This parameter is required.', example='["skillgroup1@ccc-test","skillgroup2@ccc-test"]', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model SignInGroupResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakCode?: string(name='BreakCode', example='Warm-up'),
    chatDeviceId?: string(name='ChatDeviceId'),
    deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
    extension?: string(name='Extension', example='8032****'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    jobId?: string(name='JobId'),
    outboundScenario?: boolean(name='OutboundScenario', example='false'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    userState?: string(name='UserState', example='READY'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model SignInGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SignInGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SignInGroup  SignInGroupRequest
  * @return SignInGroupResponse
 */
async function signInGroup(request: SignInGroupRequest): SignInGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SignInGroup', 'POST', '/', 'json', false, 'json', request);
}

model SignOutGroupRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model SignOutGroupResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    breakCode?: string(name='BreakCode', example='Warm-up'),
    deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
    extension?: string(name='Extension', example='8032****'),
    heartbeat?: long(name='Heartbeat', example='1609136956378'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    jobId?: string(name='JobId', example='job-6538214103685****'),
    mobile?: string(name='Mobile', example='1324730****'),
    outboundScenario?: boolean(name='OutboundScenario', example='false'),
    reserved?: long(name='Reserved', example='1609136956378'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    userState?: string(name='UserState', example='BREAK'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model SignOutGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SignOutGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SignOutGroup  SignOutGroupRequest
  * @return SignOutGroupResponse
 */
async function signOutGroup(request: SignOutGroupRequest): SignOutGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SignOutGroup', 'POST', '/', 'json', false, 'json', request);
}

model StartBack2BackCallRequest {
  additionalBroker?: string(name='AdditionalBroker', example='0102156****', position='Query'),
  broker: string(name='Broker', description='This parameter is required.', example='0102157****', position='Query'),
  callee: string(name='Callee', description='This parameter is required.', example='1372168****', position='Query'),
  caller: string(name='Caller', description='This parameter is required.', example='1391814****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  tags?: string(name='Tags', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='30', minimum=0, maximum=3600, position='Query'),
}

model StartBack2BackCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='BACK2BACK'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='BACK2BACK'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-653821410368****'),
          channelState?: string(name='ChannelState', example='NONE'),
          destination?: string(name='Destination', example='1372168****'),
          jobId?: string(name='JobId', example='job-1034159089076****'),
          originator?: string(name='Originator', example='0102157****'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp', example='1618217874062'),
          userExtension?: string(name='UserExtension', example='8001****'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-1034159089076****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      deviceState?: string(name='DeviceState'),
      extension?: string(name='Extension', example='8020****'),
      heartbeat?: long(name='Heartbeat', example='1618217872911'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-1034159089076****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1618217794599'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='OFFLINE'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='26A34338-5CD9-4C95-A7A6-5BDCE76C6B94'),
}

model StartBack2BackCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartBack2BackCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartBack2BackCall  StartBack2BackCallRequest
  * @return StartBack2BackCallResponse
 */
async function startBack2BackCall(request: StartBack2BackCallRequest): StartBack2BackCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartBack2BackCall', 'POST', '/', 'json', false, 'json', request);
}

model StartChatRequest {
  accessChannelId?: string(name='AccessChannelId', example='cf584733-***-***-9699-cb77aa3b7aa6', position='Query'),
  instanceId?: string(name='InstanceId', example='ccc-test', position='Query'),
  token?: string(name='Token', example='9XYGTGWtq2wFi_Bpg7aUnIoYi_vG_rO3bjEn0YtsxbHRHrYHlz1LDBLJAyZcLxieRQR4h_6AnWvTjJeNU5jg************Hwej7WgWrmA=', position='Query'),
  userList: [ 
    {
      avatarUrl?: string(name='AvatarUrl', example='http://xxx.com/image'),
      nickname?: string(name='Nickname'),
      userId?: string(name='UserId', example='fcd020fe-d8e4-40e5-8c77-1a272a174a7d'),
      userType?: string(name='UserType', example='CUSTOMER'),
    }
  ](name='UserList', description='This parameter is required.', shrink='json', position='Query'),
}

model StartChatResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    chatConversationId?: string(name='ChatConversationId', example='$23086709$EAUNIT'),
    jobId?: string(name='JobId', example='chat-525523618219921408'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model StartChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartChat  StartChatRequest
  * @return StartChatResponse
 */
async function startChat(request: StartChatRequest): StartChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartChat', 'POST', '/', 'json', false, 'json', request);
}

model StartConferenceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  participantListJson: string(name='ParticipantListJson', description='This parameter is required.', example='["8045****","1317511****"]', position='Query'),
  tags?: string(name='Tags', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='30', minimum=0, maximum=3600, position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model StartConferenceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:131888****->8001****:1609225718294:job-65700074013925376'),
          channelState?: string(name='ChannelState', example='ANSWERED'),
          destination?: string(name='Destination', example='8001****'),
          jobId?: string(name='JobId', example='job-6573574060089****'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      deviceState?: string(name='DeviceState', example='false'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='1609136956378'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='FDD327D1-AB8A-596B-883F-F63582A73F1D'),
}

model StartConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartConferenceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartConference  StartConferenceRequest
  * @return StartConferenceResponse
 */
async function startConference(request: StartConferenceRequest): StartConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartConference', 'POST', '/', 'json', false, 'json', request);
}

model StartEditContactFlowRequest {
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='798e83a9-5140-4039-afa1-761ca4cca2df', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model StartEditContactFlowResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='b3114362-9062-46c7-82dc-ae55ac168b2e'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BC2733CE-C470-564A-8C11-9DC02468823A'),
}

model StartEditContactFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartEditContactFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartEditContactFlow  StartEditContactFlowRequest
  * @return StartEditContactFlowResponse
 */
async function startEditContactFlow(request: StartEditContactFlowRequest): StartEditContactFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartEditContactFlow', 'POST', '/', 'json', false, 'json', request);
}

model StartPredictiveCallRequest {
  callee: string(name='Callee', description='This parameter is required.', example='1312353****', position='Query'),
  caller: string(name='Caller', description='This parameter is required.', example='0109810****', position='Query'),
  contactFlowId: string(name='ContactFlowId', description='This parameter is required.', example='9774c36c-12fe-4e37-adce-89bc77ce****', position='Query'),
  contactFlowVariables?: string(name='ContactFlowVariables', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  maskedCallee?: string(name='MaskedCallee', example='1312353****', position='Query'),
  skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test', position='Query'),
  tags?: string(name='Tags', position='Query'),
  timeoutSeconds?: int32(name='TimeoutSeconds', example='10', minimum=0, maximum=3600, position='Query'),
}

model StartPredictiveCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='[]'),
          channelId?: string(name='ChannelId', example='ch:user:131888****->8001****:1609225718294:job-6570007401392****'),
          channelState?: string(name='ChannelState', example='NONE'),
          destination?: string(name='Destination', example='8001****'),
          jobId?: string(name='JobId', example='job-6570007401392****'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp', example='1609225718295'),
          userExtension?: string(name='UserExtension', example='8001****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6570007401392****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      deviceState?: string(name='DeviceState', example='ONLINE'),
      extension?: string(name='Extension', example='8001****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6570007401392****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      reserved?: long(name='Reserved', example='1609136956378'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='READY'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='26A34338-5CD9-4C95-A7A6-5BDCE76C6B94'),
}

model StartPredictiveCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartPredictiveCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartPredictiveCall  StartPredictiveCallRequest
  * @return StartPredictiveCallResponse
 */
async function startPredictiveCall(request: StartPredictiveCallRequest): StartPredictiveCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartPredictiveCall', 'POST', '/', 'json', false, 'json', request);
}

model StartPrivacyCallRequest {
  appId: string(name='AppId', description='This parameter is required.', example='ALIPUBB7A727C170949', position='Query'),
  callee: string(name='Callee', description='This parameter is required.', example='1888888****', position='Query'),
  caller: string(name='Caller', description='This parameter is required.', example='0109810****', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model StartPrivacyCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: string(name='Data', example='job-xxx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='0630E5DF-CEB0-445B-8626-D5C7481181C3'),
}

model StartPrivacyCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartPrivacyCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartPrivacyCall  StartPrivacyCallRequest
  * @return StartPrivacyCallResponse
 */
async function startPrivacyCall(request: StartPrivacyCallRequest): StartPrivacyCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartPrivacyCall', 'POST', '/', 'json', false, 'json', request);
}

model SubmitCampaignRequest {
  campaignId: string(name='CampaignId', description='This parameter is required.', example='6badb397-a8b5-40b6-21019d382a09', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
}

model SubmitCampaignResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: string(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7CC6523B-0E51-1B62-8DA5-6A9831CAE315'),
}

model SubmitCampaignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitCampaignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitCampaign  SubmitCampaignRequest
  * @return SubmitCampaignResponse
 */
async function submitCampaign(request: SubmitCampaignRequest): SubmitCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCampaign', 'POST', '/', 'json', false, 'json', request);
}

model SwitchToConferenceRequest {
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId: string(name='JobId', description='This parameter is required.', example='job-24114064019637****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model SwitchToConferenceResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:131888****->8001****:1609225718294:job-6538214103685****'),
          channelState?: string(name='ChannelState', example='NONE'),
          destination?: string(name='Destination', example='8001****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='1318888****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609255716900'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      deviceState?: string(name='DeviceState', example='false'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='agent@ccc-test'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='1609136956378'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='D9C96A73-09C9-5E2A-8CDB-85EC0BC246DA'),
}

model SwitchToConferenceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchToConferenceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SwitchToConference  SwitchToConferenceRequest
  * @return SwitchToConferenceResponse
 */
async function switchToConference(request: SwitchToConferenceRequest): SwitchToConferenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchToConference', 'POST', '/', 'json', false, 'json', request);
}

model TakeBreakRequest {
  code: string(name='Code', description='This parameter is required.', example='lunchtime', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model TakeBreakResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    breakCode?: string(name='BreakCode', example='lunchtime'),
    deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
    extension?: string(name='Extension', example='8001****'),
    heartbeat?: long(name='Heartbeat', example='1609249563836'),
    instanceId?: string(name='InstanceId', example='ccc-test'),
    jobId?: string(name='JobId'),
    mobile?: string(name='Mobile', example='1390000****'),
    outboundScenario?: boolean(name='OutboundScenario', example='false'),
    reserved?: long(name='Reserved', example='1609234221864'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId', example='agent@ccc-test'),
    userState?: string(name='UserState', example='BREAK'),
    workMode?: string(name='WorkMode', example='ON_SITE'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='B59382D2-5755-4C6D-861F-FA2AAD8F89F7'),
}

model TakeBreakResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TakeBreakResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TakeBreak  TakeBreakRequest
  * @return TakeBreakResponse
 */
async function takeBreak(request: TakeBreakRequest): TakeBreakResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TakeBreak', 'POST', '/', 'json', false, 'json', request);
}

model TerminateTicketRequest {
  comment?: string(name='Comment', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId?: string(name='TicketId', example='5491d3b4-14ee-4341-b5f1-db2c78beddeb', position='Query'),
}

model TerminateTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='03C67DAD-EB26-41D8-949D-9B0C470FB716'),
}

model TerminateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TerminateTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TerminateTicket  TerminateTicketRequest
  * @return TerminateTicketResponse
 */
async function terminateTicket(request: TerminateTicketRequest): TerminateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TerminateTicket', 'POST', '/', 'json', false, 'json', request);
}

model TransferTicketTaskRequest {
  assignee: string(name='Assignee', description='This parameter is required.', example='assignee@ccc-test', position='Query'),
  comment?: string(name='Comment', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  taskId?: string(name='TaskId', example='f780ade8-3ca9-458b-b067-63077946a570', position='Query'),
  ticketId?: string(name='TicketId', example='5491d3b4-14ee-4341-b5f1-db2c78beddeb', position='Query'),
}

model TransferTicketTaskResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='678F7002-CA01-4ABF-A112-585AFBDF3A3B'),
}

model TransferTicketTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TransferTicketTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TransferTicketTask  TransferTicketTaskRequest
  * @return TransferTicketTaskResponse
 */
async function transferTicketTask(request: TransferTicketTaskRequest): TransferTicketTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransferTicketTask', 'POST', '/', 'json', false, 'json', request);
}

model UnmuteCallRequest {
  channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-6538214103685****', position='Query'),
  deviceId?: string(name='DeviceId', example='device', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  jobId?: string(name='JobId', example='job-6538214103685****', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model UnmuteCallResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    callContext?: {
      callType?: string(name='CallType', example='OUTBOUND'),
      channelContexts?: [ 
        {
          callType?: string(name='CallType', example='OUTBOUND'),
          channelFlags?: string(name='ChannelFlags', example='MONITORING'),
          channelId?: string(name='ChannelId', example='ch:user:1390501****->8032****:1609138902226:job-6538214103685****'),
          channelState?: string(name='ChannelState', example='CREATED'),
          destination?: string(name='Destination', example='1390501****'),
          index?: int32(name='Index', example='1'),
          jobId?: string(name='JobId', example='job-6538214103685****'),
          originator?: string(name='Originator', example='0830019****'),
          releaseInitiator?: string(name='ReleaseInitiator', example='1390501****'),
          releaseReason?: string(name='ReleaseReason', example='404 - No destination'),
          skillGroupId?: string(name='SkillGroupId', example='skillgroup@ccc-test'),
          timestamp?: long(name='Timestamp', example='1609138903315'),
          userExtension?: string(name='UserExtension', example='8032****'),
          userId?: string(name='UserId', example='agent@ccc-test'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode', example='Warm-up'),
      deviceId?: string(name='DeviceId', example='ACC-YUNBS-1.0.10-****'),
      extension?: string(name='Extension', example='8032****'),
      heartbeat?: long(name='Heartbeat', example='1609136956378'),
      instanceId?: string(name='InstanceId', example='ccc-test'),
      jobId?: string(name='JobId', example='job-6538214103685****'),
      mobile?: string(name='Mobile', example='1324730****'),
      outboundScenario?: boolean(name='OutboundScenario', example='false'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId', example='agent@ccc-test'),
      userState?: string(name='UserState', example='TALKING'),
      workMode?: string(name='WorkMode', example='ON_SITE'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='EEEE671A-3E24-4A04-81E6-6C4F5B39DF75'),
}

model UnmuteCallResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnmuteCallResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnmuteCall  UnmuteCallRequest
  * @return UnmuteCallResponse
 */
async function unmuteCall(request: UnmuteCallRequest): UnmuteCallResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnmuteCall', 'POST', '/', 'json', false, 'json', request);
}

model UnregisterDeviceRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  userId?: string(name='UserId', example='agent@ccc-test', position='Query'),
}

model UnregisterDeviceResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BA03159C-E808-4FF1-B27E-A61B6E888D7F'),
}

model UnregisterDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnregisterDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnregisterDevice  UnregisterDeviceRequest
  * @return UnregisterDeviceResponse
 */
async function unregisterDevice(request: UnregisterDeviceRequest): UnregisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnregisterDevice', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCampaignRequest {
  callableTime?: string(name='CallableTime', example='[
      {
            "beginTime": "09:00:00",
            "endTime": "12:00:00"
      }
]', position='Query'),
  campaignId: string(name='CampaignId', description='This parameter is required.', example='ab11908b-6ebc-4b0c-b51e-3e17c7060', position='Query'),
  contactFlowId?: string(name='ContactFlowId', example='3a310f56-4d30-4081-ba24-5d87a3b7262e', position='Query'),
  endTime?: string(name='EndTime', example='1689933600000', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  name?: string(name='Name', position='Query'),
  startTime?: string(name='StartTime', example='1689901200000', position='Query'),
  strategyParameters?: string(name='StrategyParameters', position='Query'),
}

model UpdateCampaignResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E'),
}

model UpdateCampaignResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCampaignResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCampaign  UpdateCampaignRequest
  * @return UpdateCampaignResponse
 */
async function updateCampaign(request: UpdateCampaignRequest): UpdateCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCampaign', 'POST', '/', 'json', false, 'json', request);
}

model UpdateChatRoutingProfileRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='9cfad875-6260-4a53-ab6e-b13e3fb31f7d', position='Query'),
  routingProfiles: string(name='RoutingProfiles', description='This parameter is required.', example='{
    "RoutingType": "Automatic",
    "AgentConcurrencySettings": {
        "AllowExceedingLimitWhenTransferring": false,
        "ConcurrencyLimit": 4,
        "AllowExceedingLimitWhenClaiming": true,
        "Enabled": true
    },
    "ChatSettings": {
        "IdleChatTimeoutSeconds": 300
    },
    "DistributionSettings": {
        "Enabled": true,
        "AgentRingTimeoutSeconds": 119,
        "MaxNumberOfConversationsAgentCanMiss": 5,
        "PostAgentMissingConversionsAction": "Nothing"
    }
}', position='Query'),
}

model UpdateChatRoutingProfileResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E'),
}

model UpdateChatRoutingProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChatRoutingProfileResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateChatRoutingProfile  UpdateChatRoutingProfileRequest
  * @return UpdateChatRoutingProfileResponse
 */
async function updateChatRoutingProfile(request: UpdateChatRoutingProfileRequest): UpdateChatRoutingProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChatRoutingProfile', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConfigItemsRequest {
  configItems: string(name='ConfigItems', description='This parameter is required.', example='[{"name":"ShowCalledID","value":"-1"},{"name":"ShowCalleeID","value":"1"},{"name":"AllowHangup","value":"0"},{"name":"AutoAnswerCall","value":"-1"},{"name":"AllowAudioDownload","value":"1"},{"name":"AllowChooseSignedSkillGroup","value":"1"}]', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  objectId: string(name='ObjectId', description='This parameter is required.', example='ccc-test', position='Query'),
  objectType: string(name='ObjectType', description='This parameter is required.', example='INSTANCE', position='Query'),
}

model UpdateConfigItemsResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='8E7Y5B39-3E24-4A04-81E6-6C4F5B39DF75'),
}

model UpdateConfigItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConfigItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateConfigItems  UpdateConfigItemsRequest
  * @return UpdateConfigItemsResponse
 */
async function updateConfigItems(request: UpdateConfigItemsRequest): UpdateConfigItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConfigItems', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSchemaPropertyRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='b0eb2742-f37e-4c67-82d4-25c651c1xxxx', position='Body'),
  property?: {
    array?: boolean(name='Array', example='false'),
    attributes?: string(name='Attributes', example='{\\"instanceId\\":\\"4cc3f160-ca64-49ff-bc70-390a044a4e83\\",\\"appId\\":\\"1684145288664\\",\\"commodityCode\\":\\"dide_pre\\",\\"dide_pre_set\\":\\"version_ent\\"}'),
    dataType: string(name='DataType', description='This parameter is required.', example='string'),
    description?: string(name='Description', example='-'),
    disabled?: boolean(name='Disabled', example='true'),
    displayName?: string(name='DisplayName'),
    displayOrder?: int32(name='DisplayOrder', example='10'),
    editorType?: string(name='EditorType', example='textbox'),
    maxLength?: int32(name='MaxLength', example='100'),
    maximum?: double(name='Maximum', example='11'),
    minLength?: int32(name='MinLength', example='1'),
    minimum?: double(name='Minimum', example='10800'),
    name: string(name='Name', description='This parameter is required.', example='name'),
    pattern?: string(name='Pattern', example='(.*)'),
    patternErrorMessage?: string(name='PatternErrorMessage'),
    readOnly?: boolean(name='ReadOnly', example='true'),
    required?: boolean(name='Required', example='false'),
  }(name='Property', shrink='json', position='Body'),
  requestId?: string(name='RequestId', example='BC976D32-AC4C-4E0F-8AA9-F4BC6C4E2B3E', position='Body'),
  schemaId: string(name='SchemaId', description='schema id

This parameter is required.', example='profile', position='Body'),
}

model UpdateSchemaPropertyResponseBody = {
  code?: string(name='Code', example='OK'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='A450574A-337F-43E2-BC59-9C6594C994C6'),
}

model UpdateSchemaPropertyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSchemaPropertyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSchemaProperty  UpdateSchemaPropertyRequest
  * @return UpdateSchemaPropertyResponse
 */
async function updateSchemaProperty(request: UpdateSchemaPropertyRequest): UpdateSchemaPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSchemaProperty', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTicketRequest {
  context?: string(name='Context', position='Query'),
  customerId?: string(name='CustomerId', example='51e155ce-***-****-b402-13c69597b920', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId: string(name='TicketId', description='This parameter is required.', example='5491d3b4-14ee-4341-b5f1-db2c78beddeb', position='Query'),
  title?: string(name='Title', position='Query'),
}

model UpdateTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='7BEEA660-A45A-45E3-98CC-AFC65E715C23'),
}

model UpdateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTicket  UpdateTicketRequest
  * @return UpdateTicketResponse
 */
async function updateTicket(request: UpdateTicketRequest): UpdateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTicket', 'POST', '/', 'json', false, 'json', request);
}

model WithdrawTicketRequest {
  comment: string(name='Comment', description='This parameter is required.', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='ccc-test', position='Query'),
  ticketId: string(name='TicketId', description='This parameter is required.', example='5491d3b4-14ee-4341-b5f1-db2c78beddeb', position='Query'),
}

model WithdrawTicketResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId', example='2778FA12-EDD6-42AA-9B15-AF855072E5E5'),
}

model WithdrawTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WithdrawTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of WithdrawTicket  WithdrawTicketRequest
  * @return WithdrawTicketResponse
 */
async function withdrawTicket(request: WithdrawTicketRequest): WithdrawTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WithdrawTicket', 'POST', '/', 'json', false, 'json', request);
}

model DataPropertiesValue = {
  displayName?: string(name='DisplayName'),
  description?: string(name='Description', example='name'),
  name?: string(name='Name', example='name'),
  dataType?: string(name='DataType', example='string'),
  pattern?: string(name='Pattern', example='^'),
  patternErrorMessage?: string(name='PatternErrorMessage'),
  minLength?: int32(name='MinLength', example='1'),
  maxLength?: int32(name='MaxLength', example='10'),
  minimum?: double(name='Minimum', example='1'),
  maximum?: double(name='Maximum', example='10'),
  required?: boolean(name='Required', example='false'),
  system?: boolean(name='System', example='false'),
  disabled?: boolean(name='Disabled', example='false'),
  array?: boolean(name='Array', example='false'),
  readOnly?: boolean(name='ReadOnly', example='false'),
  editorType?: string(name='EditorType', example='textbox'),
  attributes?: string(name='Attributes', example='{}'),
  displayOrder?: int32(name='DisplayOrder', example='1'),
  createdTime?: long(name='CreatedTime', example='2021-07-14 10:48:43.0'),
  updatedTime?: long(name='UpdatedTime', example='2021-07-14 10:48:43.0'),
  creator?: string(name='Creator', example='tom'),
}

model DataSchemaPropertiesValue = {
  displayName?: string(name='DisplayName', example='name'),
  description?: string(name='Description', example='-'),
  name?: string(name='Name', example='name'),
  dataType?: string(name='DataType', example='string'),
  pattern?: string(name='Pattern', example='*'),
  patternErrorMessage?: string(name='PatternErrorMessage'),
  minLength?: int32(name='MinLength', example='1'),
  maxLength?: int32(name='MaxLength', example='1'),
  minimum?: double(name='Minimum', example='1'),
  maximum?: double(name='Maximum', example='1'),
  required?: boolean(name='Required', example='false'),
  system?: boolean(name='System', example='false'),
  disabled?: boolean(name='Disabled', example='false'),
  array?: boolean(name='Array', example='false'),
  readOnly?: boolean(name='ReadOnly', example='false'),
  editorType?: string(name='EditorType', example='textbox'),
  attributes?: string(name='Attributes', example='{}'),
  displayOrder?: int32(name='DisplayOrder', example='1'),
  createdTime?: long(name='CreatedTime', example='2020-10-14T09:53:53Z'),
  updatedTime?: long(name='UpdatedTime', example='2020-10-14T09:53:53Z'),
  creator?: string(name='Creator', example='tom'),
}

