/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'ccc.aliyuncs.com',
    ap-south-1 = 'ccc.aliyuncs.com',
    ap-southeast-1 = 'ccc.aliyuncs.com',
    ap-southeast-2 = 'ccc.aliyuncs.com',
    ap-southeast-3 = 'ccc.aliyuncs.com',
    ap-southeast-5 = 'ccc.aliyuncs.com',
    cn-beijing = 'ccc.aliyuncs.com',
    cn-chengdu = 'ccc.aliyuncs.com',
    cn-hongkong = 'ccc.aliyuncs.com',
    cn-huhehaote = 'ccc.aliyuncs.com',
    cn-qingdao = 'ccc.aliyuncs.com',
    cn-shenzhen = 'ccc.aliyuncs.com',
    cn-zhangjiakou = 'ccc.aliyuncs.com',
    eu-central-1 = 'ccc.aliyuncs.com',
    eu-west-1 = 'ccc.aliyuncs.com',
    me-east-1 = 'ccc.aliyuncs.com',
    us-east-1 = 'ccc.aliyuncs.com',
    us-west-1 = 'ccc.aliyuncs.com',
    cn-hangzhou-finance = 'ccc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ccc.aliyuncs.com',
    cn-shanghai-finance-1 = 'ccc.aliyuncs.com',
    cn-north-2-gov-1 = 'ccc.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ccc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AbortCampaignRequest {
  campaignId?: string(name='CampaignId'),
  instanceId?: string(name='InstanceId'),
}

model AbortCampaignResponseBody = {
  code?: string(name='Code', description='code'),
  httpStatusCode?: string(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model AbortCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: AbortCampaignResponseBody(name='body'),
}

async function abortCampaignWithOptions(request: AbortCampaignRequest, runtime: Util.RuntimeOptions): AbortCampaignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AbortCampaign',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function abortCampaign(request: AbortCampaignRequest): AbortCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  return abortCampaignWithOptions(request, runtime);
}

model AddNumbersToSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
  skillGroupId?: string(name='SkillGroupId'),
}

model AddNumbersToSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddNumbersToSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddNumbersToSkillGroupResponseBody(name='body'),
}

async function addNumbersToSkillGroupWithOptions(request: AddNumbersToSkillGroupRequest, runtime: Util.RuntimeOptions): AddNumbersToSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddNumbersToSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addNumbersToSkillGroup(request: AddNumbersToSkillGroupRequest): AddNumbersToSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addNumbersToSkillGroupWithOptions(request, runtime);
}

model AddPersonalNumbersToUserRequest {
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
  userId?: string(name='UserId'),
}

model AddPersonalNumbersToUserResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddPersonalNumbersToUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddPersonalNumbersToUserResponseBody(name='body'),
}

async function addPersonalNumbersToUserWithOptions(request: AddPersonalNumbersToUserRequest, runtime: Util.RuntimeOptions): AddPersonalNumbersToUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPersonalNumbersToUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPersonalNumbersToUser(request: AddPersonalNumbersToUserRequest): AddPersonalNumbersToUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPersonalNumbersToUserWithOptions(request, runtime);
}

model AddPhoneNumberToSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model AddPhoneNumberToSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddPhoneNumberToSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AddPhoneNumberToSkillGroupsResponseBody(name='body'),
}

async function addPhoneNumberToSkillGroupsWithOptions(request: AddPhoneNumberToSkillGroupsRequest, runtime: Util.RuntimeOptions): AddPhoneNumberToSkillGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  if (!Util.isUnset(request.skillGroupIdList)) {
    query['SkillGroupIdList'] = request.skillGroupIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPhoneNumberToSkillGroups',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPhoneNumberToSkillGroups(request: AddPhoneNumberToSkillGroupsRequest): AddPhoneNumberToSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPhoneNumberToSkillGroupsWithOptions(request, runtime);
}

model AddPhoneNumbersRequest {
  contactFlowId?: string(name='ContactFlowId'),
  instanceId?: string(name='InstanceId'),
  numberGroupId?: string(name='NumberGroupId'),
  numberList?: string(name='NumberList'),
  usage?: string(name='Usage'),
}

model AddPhoneNumbersResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: AddPhoneNumbersResponseBody(name='body'),
}

async function addPhoneNumbersWithOptions(request: AddPhoneNumbersRequest, runtime: Util.RuntimeOptions): AddPhoneNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactFlowId)) {
    query['ContactFlowId'] = request.contactFlowId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberGroupId)) {
    query['NumberGroupId'] = request.numberGroupId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  if (!Util.isUnset(request.usage)) {
    query['Usage'] = request.usage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPhoneNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addPhoneNumbers(request: AddPhoneNumbersRequest): AddPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPhoneNumbersWithOptions(request, runtime);
}

model AddSkillGroupsToUserRequest {
  instanceId?: string(name='InstanceId'),
  skillLevelList?: string(name='SkillLevelList'),
  userId?: string(name='UserId'),
}

model AddSkillGroupsToUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model AddSkillGroupsToUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddSkillGroupsToUserResponseBody(name='body'),
}

async function addSkillGroupsToUserWithOptions(request: AddSkillGroupsToUserRequest, runtime: Util.RuntimeOptions): AddSkillGroupsToUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillLevelList)) {
    query['SkillLevelList'] = request.skillLevelList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSkillGroupsToUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSkillGroupsToUser(request: AddSkillGroupsToUserRequest): AddSkillGroupsToUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSkillGroupsToUserWithOptions(request, runtime);
}

model AddUsersToSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  userSkillLevelList?: string(name='UserSkillLevelList'),
}

model AddUsersToSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddUsersToSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddUsersToSkillGroupResponseBody(name='body'),
}

async function addUsersToSkillGroupWithOptions(request: AddUsersToSkillGroupRequest, runtime: Util.RuntimeOptions): AddUsersToSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.userSkillLevelList)) {
    query['UserSkillLevelList'] = request.userSkillLevelList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddUsersToSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addUsersToSkillGroup(request: AddUsersToSkillGroupRequest): AddUsersToSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUsersToSkillGroupWithOptions(request, runtime);
}

model AnswerCallRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model AnswerCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model AnswerCallResponse = {
  headers: map[string]string(name='headers'),
  body: AnswerCallResponseBody(name='body'),
}

async function answerCallWithOptions(request: AnswerCallRequest, runtime: Util.RuntimeOptions): AnswerCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AnswerCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function answerCall(request: AnswerCallRequest): AnswerCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return answerCallWithOptions(request, runtime);
}

model AssignUsersRequest {
  instanceId?: string(name='InstanceId'),
  ramIdList?: string(name='RamIdList'),
  roleId?: string(name='RoleId'),
  skillLevelList?: string(name='SkillLevelList'),
  workMode?: string(name='WorkMode'),
}

model AssignUsersResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sync?: string(name='Sync'),
  workflowId?: string(name='WorkflowId'),
}

model AssignUsersResponse = {
  headers: map[string]string(name='headers'),
  body: AssignUsersResponseBody(name='body'),
}

async function assignUsersWithOptions(request: AssignUsersRequest, runtime: Util.RuntimeOptions): AssignUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ramIdList)) {
    query['RamIdList'] = request.ramIdList;
  }
  if (!Util.isUnset(request.roleId)) {
    query['RoleId'] = request.roleId;
  }
  if (!Util.isUnset(request.skillLevelList)) {
    query['SkillLevelList'] = request.skillLevelList;
  }
  if (!Util.isUnset(request.workMode)) {
    query['WorkMode'] = request.workMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssignUsers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assignUsers(request: AssignUsersRequest): AssignUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignUsersWithOptions(request, runtime);
}

model BargeInCallRequest {
  bargedUserId?: string(name='BargedUserId'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  userId?: string(name='UserId'),
}

model BargeInCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model BargeInCallResponse = {
  headers: map[string]string(name='headers'),
  body: BargeInCallResponseBody(name='body'),
}

async function bargeInCallWithOptions(request: BargeInCallRequest, runtime: Util.RuntimeOptions): BargeInCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bargedUserId)) {
    query['BargedUserId'] = request.bargedUserId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BargeInCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bargeInCall(request: BargeInCallRequest): BargeInCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return bargeInCallWithOptions(request, runtime);
}

model BlindTransferRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  transferee?: string(name='Transferee'),
  transferor?: string(name='Transferor'),
  userId?: string(name='UserId'),
}

model BlindTransferResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model BlindTransferResponse = {
  headers: map[string]string(name='headers'),
  body: BlindTransferResponseBody(name='body'),
}

async function blindTransferWithOptions(request: BlindTransferRequest, runtime: Util.RuntimeOptions): BlindTransferResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.transferee)) {
    query['Transferee'] = request.transferee;
  }
  if (!Util.isUnset(request.transferor)) {
    query['Transferor'] = request.transferor;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BlindTransfer',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function blindTransfer(request: BlindTransferRequest): BlindTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return blindTransferWithOptions(request, runtime);
}

model CancelAttendedTransferRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model CancelAttendedTransferResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CancelAttendedTransferResponse = {
  headers: map[string]string(name='headers'),
  body: CancelAttendedTransferResponseBody(name='body'),
}

async function cancelAttendedTransferWithOptions(request: CancelAttendedTransferRequest, runtime: Util.RuntimeOptions): CancelAttendedTransferResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelAttendedTransfer',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelAttendedTransfer(request: CancelAttendedTransferRequest): CancelAttendedTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAttendedTransferWithOptions(request, runtime);
}

model ChangeWorkModeRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  workMode?: string(name='WorkMode'),
}

model ChangeWorkModeResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakCode?: string(name='BreakCode'),
    deviceId?: string(name='DeviceId'),
    extension?: string(name='Extension'),
    instanceId?: string(name='InstanceId'),
    jobId?: string(name='JobId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId'),
    userState?: string(name='UserState'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ChangeWorkModeResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeWorkModeResponseBody(name='body'),
}

async function changeWorkModeWithOptions(request: ChangeWorkModeRequest, runtime: Util.RuntimeOptions): ChangeWorkModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.workMode)) {
    query['WorkMode'] = request.workMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeWorkMode',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeWorkMode(request: ChangeWorkModeRequest): ChangeWorkModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeWorkModeWithOptions(request, runtime);
}

model CoachCallRequest {
  coachedUserId?: string(name='CoachedUserId'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  userId?: string(name='UserId'),
}

model CoachCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      deviceState?: string(name='DeviceState'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      uri?: string(name='Uri'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CoachCallResponse = {
  headers: map[string]string(name='headers'),
  body: CoachCallResponseBody(name='body'),
}

async function coachCallWithOptions(request: CoachCallRequest, runtime: Util.RuntimeOptions): CoachCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.coachedUserId)) {
    query['CoachedUserId'] = request.coachedUserId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CoachCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function coachCall(request: CoachCallRequest): CoachCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return coachCallWithOptions(request, runtime);
}

model CompleteAttendedTransferRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model CompleteAttendedTransferResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CompleteAttendedTransferResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteAttendedTransferResponseBody(name='body'),
}

async function completeAttendedTransferWithOptions(request: CompleteAttendedTransferRequest, runtime: Util.RuntimeOptions): CompleteAttendedTransferResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CompleteAttendedTransfer',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function completeAttendedTransfer(request: CompleteAttendedTransferRequest): CompleteAttendedTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeAttendedTransferWithOptions(request, runtime);
}

model CreateCallTagsRequest {
  callTagNameList?: string(name='CallTagNameList'),
  instanceId?: string(name='InstanceId'),
}

model CreateCallTagsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      item?: string(name='Item'),
      reason?: string(name='Reason'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateCallTagsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCallTagsResponseBody(name='body'),
}

async function createCallTagsWithOptions(request: CreateCallTagsRequest, runtime: Util.RuntimeOptions): CreateCallTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callTagNameList)) {
    query['CallTagNameList'] = request.callTagNameList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCallTags',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCallTags(request: CreateCallTagsRequest): CreateCallTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCallTagsWithOptions(request, runtime);
}

model CreateCampaignRequest {
  callableTime?: string(name='CallableTime'),
  caseFileKey?: string(name='CaseFileKey'),
  caseList?: [ 
    {
      customVariables?: string(name='CustomVariables'),
      phoneNumber?: string(name='PhoneNumber'),
      referenceId?: string(name='ReferenceId'),
    }
  ](name='CaseList'),
  contactFlowId?: string(name='ContactFlowId'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  maxAttemptCount?: long(name='MaxAttemptCount'),
  minAttemptInterval?: long(name='MinAttemptInterval'),
  name?: string(name='Name'),
  queueId?: string(name='QueueId'),
  simulation?: boolean(name='Simulation'),
  simulationParameters?: string(name='SimulationParameters'),
  startTime?: string(name='StartTime'),
  strategyParameters?: string(name='StrategyParameters'),
  strategyType?: string(name='StrategyType'),
}

model CreateCampaignShrinkRequest {
  callableTime?: string(name='CallableTime'),
  caseFileKey?: string(name='CaseFileKey'),
  caseListShrink?: string(name='CaseList'),
  contactFlowId?: string(name='ContactFlowId'),
  endTime?: string(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  maxAttemptCount?: long(name='MaxAttemptCount'),
  minAttemptInterval?: long(name='MinAttemptInterval'),
  name?: string(name='Name'),
  queueId?: string(name='QueueId'),
  simulation?: boolean(name='Simulation'),
  simulationParameters?: string(name='SimulationParameters'),
  startTime?: string(name='StartTime'),
  strategyParameters?: string(name='StrategyParameters'),
  strategyType?: string(name='StrategyType'),
}

model CreateCampaignResponseBody = {
  code?: string(name='Code', description='code'),
  data?: string(name='Data', description='campaign id'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCampaignResponseBody(name='body'),
}

async function createCampaignWithOptions(tmpReq: CreateCampaignRequest, runtime: Util.RuntimeOptions): CreateCampaignResponse {
  Util.validateModel(tmpReq);
  var request = new CreateCampaignShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.caseList)) {
    request.caseListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.caseList, 'CaseList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.callableTime)) {
    query['CallableTime'] = request.callableTime;
  }
  if (!Util.isUnset(request.caseFileKey)) {
    query['CaseFileKey'] = request.caseFileKey;
  }
  if (!Util.isUnset(request.caseListShrink)) {
    query['CaseList'] = request.caseListShrink;
  }
  if (!Util.isUnset(request.contactFlowId)) {
    query['ContactFlowId'] = request.contactFlowId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maxAttemptCount)) {
    query['MaxAttemptCount'] = request.maxAttemptCount;
  }
  if (!Util.isUnset(request.minAttemptInterval)) {
    query['MinAttemptInterval'] = request.minAttemptInterval;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.queueId)) {
    query['QueueId'] = request.queueId;
  }
  if (!Util.isUnset(request.simulation)) {
    query['Simulation'] = request.simulation;
  }
  if (!Util.isUnset(request.simulationParameters)) {
    query['SimulationParameters'] = request.simulationParameters;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.strategyParameters)) {
    query['StrategyParameters'] = request.strategyParameters;
  }
  if (!Util.isUnset(request.strategyType)) {
    query['StrategyType'] = request.strategyType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCampaign',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCampaign(request: CreateCampaignRequest): CreateCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCampaignWithOptions(request, runtime);
}

model CreateCustomCallTaggingRequest {
  customNumberList?: string(name='CustomNumberList'),
  instanceId?: string(name='InstanceId'),
}

model CreateCustomCallTaggingResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      item?: string(name='Item'),
      reason?: string(name='Reason'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model CreateCustomCallTaggingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomCallTaggingResponseBody(name='body'),
}

async function createCustomCallTaggingWithOptions(request: CreateCustomCallTaggingRequest, runtime: Util.RuntimeOptions): CreateCustomCallTaggingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.customNumberList)) {
    query['CustomNumberList'] = request.customNumberList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomCallTagging',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomCallTagging(request: CreateCustomCallTaggingRequest): CreateCustomCallTaggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomCallTaggingWithOptions(request, runtime);
}

model CreateInstanceRequest {
  adminRamIdList?: string(name='AdminRamIdList'),
  description?: string(name='Description'),
  domainName?: string(name='DomainName'),
  name?: string(name='Name'),
  numberList?: string(name='NumberList'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adminRamIdList)) {
    query['AdminRamIdList'] = request.adminRamIdList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateSkillGroupRequest {
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
}

model CreateSkillGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    description?: string(name='Description'),
    instanceId?: string(name='InstanceId'),
    name?: string(name='Name'),
    skillGroupId?: string(name='SkillGroupId'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSkillGroupResponseBody(name='body'),
}

async function createSkillGroupWithOptions(request: CreateSkillGroupRequest, runtime: Util.RuntimeOptions): CreateSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSkillGroup(request: CreateSkillGroupRequest): CreateSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSkillGroupWithOptions(request, runtime);
}

model CreateUserRequest {
  displayId?: string(name='DisplayId'),
  displayName?: string(name='DisplayName'),
  email?: string(name='Email'),
  instanceId?: string(name='InstanceId'),
  loginName?: string(name='LoginName'),
  mobile?: string(name='Mobile'),
  resetPassword?: boolean(name='ResetPassword'),
  roleId?: string(name='RoleId'),
  skillLevelList?: string(name='SkillLevelList'),
  workMode?: string(name='WorkMode'),
}

model CreateUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    displayName?: string(name='DisplayName'),
    email?: string(name='Email'),
    extension?: string(name='Extension'),
    loginName?: string(name='LoginName'),
    mobile?: string(name='Mobile'),
    userId?: string(name='UserId'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUserWithOptions(request: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.displayId)) {
    query['DisplayId'] = request.displayId;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.loginName)) {
    query['LoginName'] = request.loginName;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.resetPassword)) {
    query['ResetPassword'] = request.resetPassword;
  }
  if (!Util.isUnset(request.roleId)) {
    query['RoleId'] = request.roleId;
  }
  if (!Util.isUnset(request.skillLevelList)) {
    query['SkillLevelList'] = request.skillLevelList;
  }
  if (!Util.isUnset(request.workMode)) {
    query['WorkMode'] = request.workMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model DeleteCallTagRequest {
  instanceId?: string(name='InstanceId'),
  tagName?: string(name='TagName'),
}

model DeleteCallTagResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteCallTagResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCallTagResponseBody(name='body'),
}

async function deleteCallTagWithOptions(request: DeleteCallTagRequest, runtime: Util.RuntimeOptions): DeleteCallTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tagName)) {
    query['TagName'] = request.tagName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCallTag',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCallTag(request: DeleteCallTagRequest): DeleteCallTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCallTagWithOptions(request, runtime);
}

model DeleteCustomCallTaggingRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
}

model DeleteCustomCallTaggingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteCustomCallTaggingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomCallTaggingResponseBody(name='body'),
}

async function deleteCustomCallTaggingWithOptions(request: DeleteCustomCallTaggingRequest, runtime: Util.RuntimeOptions): DeleteCustomCallTaggingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomCallTagging',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomCallTagging(request: DeleteCustomCallTaggingRequest): DeleteCustomCallTaggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomCallTaggingWithOptions(request, runtime);
}

model DeleteSkillGroupRequest {
  force?: boolean(name='Force'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model DeleteSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSkillGroupResponseBody(name='body'),
}

async function deleteSkillGroupWithOptions(request: DeleteSkillGroupRequest, runtime: Util.RuntimeOptions): DeleteSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSkillGroup(request: DeleteSkillGroupRequest): DeleteSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSkillGroupWithOptions(request, runtime);
}

model EndConferenceRequest {
  bearerTokenClientId?: string(name='BearerTokenClientId'),
  bearerTokenScope?: string(name='BearerTokenScope'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model EndConferenceResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      deviceState?: string(name='DeviceState'),
      extension?: string(name='Extension'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      uri?: string(name='Uri'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model EndConferenceResponse = {
  headers: map[string]string(name='headers'),
  body: EndConferenceResponseBody(name='body'),
}

async function endConferenceWithOptions(request: EndConferenceRequest, runtime: Util.RuntimeOptions): EndConferenceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bearerTokenClientId)) {
    query['BearerTokenClientId'] = request.bearerTokenClientId;
  }
  if (!Util.isUnset(request.bearerTokenScope)) {
    query['BearerTokenScope'] = request.bearerTokenScope;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EndConference',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function endConference(request: EndConferenceRequest): EndConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return endConferenceWithOptions(request, runtime);
}

model ExportCustomCallTaggingRequest {
  instanceId?: string(name='InstanceId'),
}

model ExportCustomCallTaggingResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ExportCustomCallTaggingResponse = {
  headers: map[string]string(name='headers'),
  body: ExportCustomCallTaggingResponseBody(name='body'),
}

async function exportCustomCallTaggingWithOptions(request: ExportCustomCallTaggingRequest, runtime: Util.RuntimeOptions): ExportCustomCallTaggingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportCustomCallTagging',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportCustomCallTagging(request: ExportCustomCallTaggingRequest): ExportCustomCallTaggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportCustomCallTaggingWithOptions(request, runtime);
}

model ExportDoNotCallNumbersRequest {
  instanceId?: string(name='InstanceId'),
  scope?: string(name='Scope'),
  searchPattern?: string(name='SearchPattern'),
}

model ExportDoNotCallNumbersResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ExportDoNotCallNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ExportDoNotCallNumbersResponseBody(name='body'),
}

async function exportDoNotCallNumbersWithOptions(request: ExportDoNotCallNumbersRequest, runtime: Util.RuntimeOptions): ExportDoNotCallNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportDoNotCallNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function exportDoNotCallNumbers(request: ExportDoNotCallNumbersRequest): ExportDoNotCallNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportDoNotCallNumbersWithOptions(request, runtime);
}

model GetCallDetailRecordRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model GetCallDetailRecordResponseBody = {
  code?: string(name='Code'),
  data?: {
    agentEvents?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        eventSequence?: [ 
          {
            duration?: long(name='Duration'),
            event?: string(name='Event'),
            eventTime?: long(name='EventTime'),
          }
        ](name='EventSequence'),
        skillGroupId?: string(name='SkillGroupId'),
      }
    ](name='AgentEvents'),
    agentIds?: string(name='AgentIds'),
    agentNames?: string(name='AgentNames'),
    callDuration?: long(name='CallDuration'),
    calledNumber?: string(name='CalledNumber'),
    calleeLocation?: string(name='CalleeLocation'),
    callerLocation?: string(name='CallerLocation'),
    callingNumber?: string(name='CallingNumber'),
    contactDisposition?: string(name='ContactDisposition'),
    contactId?: string(name='ContactId'),
    contactType?: string(name='ContactType'),
    customerEvents?: [ 
      {
        customerId?: string(name='CustomerId'),
        eventSequence?: [ 
          {
            event?: string(name='Event'),
            eventTime?: long(name='EventTime'),
          }
        ](name='EventSequence'),
      }
    ](name='CustomerEvents'),
    earlyMediaState?: string(name='EarlyMediaState'),
    establishedTime?: long(name='EstablishedTime'),
    instanceId?: string(name='InstanceId'),
    ivrEvents?: [ 
      {
        eventSequence?: [ 
          {
            event?: string(name='Event'),
            eventTime?: long(name='EventTime'),
          }
        ](name='EventSequence'),
        flowId?: string(name='FlowId'),
        flowType?: string(name='FlowType'),
      }
    ](name='IvrEvents'),
    queueEvents?: [ 
      {
        eventSequence?: [ 
          {
            event?: string(name='Event'),
            eventTime?: long(name='EventTime'),
          }
        ](name='EventSequence'),
        flowId?: string(name='FlowId'),
        queueId?: string(name='QueueId'),
        queueName?: string(name='QueueName'),
        queueType?: int32(name='QueueType'),
      }
    ](name='QueueEvents'),
    recordingReady?: boolean(name='RecordingReady'),
    releaseInitiator?: string(name='ReleaseInitiator'),
    releaseTime?: long(name='ReleaseTime'),
    satisfaction?: int32(name='Satisfaction'),
    satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel'),
    satisfactionSurveyOffered?: boolean(name='SatisfactionSurveyOffered'),
    skillGroupIds?: string(name='SkillGroupIds'),
    skillGroupNames?: string(name='SkillGroupNames'),
    startTime?: long(name='StartTime'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetCallDetailRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallDetailRecordResponseBody(name='body'),
}

async function getCallDetailRecordWithOptions(request: GetCallDetailRecordRequest, runtime: Util.RuntimeOptions): GetCallDetailRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCallDetailRecord',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCallDetailRecord(request: GetCallDetailRecordRequest): GetCallDetailRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallDetailRecordWithOptions(request, runtime);
}

model GetCampaignRequest {
  campaignId?: string(name='CampaignId'),
  instanceId?: string(name='InstanceId'),
}

model GetCampaignResponseBody = {
  code?: string(name='Code'),
  data?: {
    actualEndTime?: long(name='ActualEndTime'),
    actualStartTime?: long(name='ActualStartTime'),
    campaignId?: string(name='CampaignId', description='id'),
    casesAborted?: long(name='CasesAborted'),
    casesConnected?: long(name='CasesConnected'),
    casesUncompleted?: long(name='CasesUncompleted'),
    casesUncompletedAfterAttempted?: long(name='CasesUncompletedAfterAttempted'),
    maxAttemptCount?: long(name='MaxAttemptCount'),
    minAttemptInterval?: long(name='MinAttemptInterval'),
    name?: string(name='Name'),
    planedEndTime?: long(name='PlanedEndTime'),
    planedStartTime?: long(name='PlanedStartTime'),
    queueId?: string(name='QueueId'),
    queueName?: string(name='QueueName'),
    simulation?: boolean(name='Simulation'),
    simulationParameters?: string(name='SimulationParameters'),
    state?: string(name='State'),
    strategyParameters?: string(name='StrategyParameters'),
    strategyType?: string(name='StrategyType'),
    totalCases?: long(name='TotalCases'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: GetCampaignResponseBody(name='body'),
}

async function getCampaignWithOptions(request: GetCampaignRequest, runtime: Util.RuntimeOptions): GetCampaignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCampaign',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCampaign(request: GetCampaignRequest): GetCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCampaignWithOptions(request, runtime);
}

model GetCaseFileUploadUrlRequest {
  fileName?: string(name='FileName'),
  instanceId?: string(name='InstanceId'),
}

model GetCaseFileUploadUrlResponseBody = {
  code?: string(name='Code'),
  data?: {
    caseFileKey?: string(name='CaseFileKey'),
    url?: string(name='Url'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetCaseFileUploadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetCaseFileUploadUrlResponseBody(name='body'),
}

async function getCaseFileUploadUrlWithOptions(request: GetCaseFileUploadUrlRequest, runtime: Util.RuntimeOptions): GetCaseFileUploadUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCaseFileUploadUrl',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCaseFileUploadUrl(request: GetCaseFileUploadUrlRequest): GetCaseFileUploadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCaseFileUploadUrlWithOptions(request, runtime);
}

model GetDoNotCallFileUploadParametersRequest {
  fileName?: string(name='FileName'),
  instanceId?: string(name='InstanceId'),
}

model GetDoNotCallFileUploadParametersResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    expireTime?: int32(name='ExpireTime'),
    filePath?: string(name='FilePath'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDoNotCallFileUploadParametersResponse = {
  headers: map[string]string(name='headers'),
  body: GetDoNotCallFileUploadParametersResponseBody(name='body'),
}

async function getDoNotCallFileUploadParametersWithOptions(request: GetDoNotCallFileUploadParametersRequest, runtime: Util.RuntimeOptions): GetDoNotCallFileUploadParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDoNotCallFileUploadParameters',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDoNotCallFileUploadParameters(request: GetDoNotCallFileUploadParametersRequest): GetDoNotCallFileUploadParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDoNotCallFileUploadParametersWithOptions(request, runtime);
}

model GetHistoricalCallerReportRequest {
  callingNumber?: string(name='CallingNumber'),
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model GetHistoricalCallerReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    lastCallingTime?: long(name='LastCallingTime'),
    totalCalls?: long(name='TotalCalls'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetHistoricalCallerReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoricalCallerReportResponseBody(name='body'),
}

async function getHistoricalCallerReportWithOptions(request: GetHistoricalCallerReportRequest, runtime: Util.RuntimeOptions): GetHistoricalCallerReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callingNumber)) {
    query['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.stopTime)) {
    query['StopTime'] = request.stopTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHistoricalCallerReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHistoricalCallerReport(request: GetHistoricalCallerReportRequest): GetHistoricalCallerReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistoricalCallerReportWithOptions(request, runtime);
}

model GetHistoricalCampaignReportRequest {
  campaignId?: string(name='CampaignId', description='活动ID'),
  instanceId?: string(name='InstanceId', description='实例ID'),
}

model GetHistoricalCampaignReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    abandonedRate?: float(name='AbandonedRate'),
    callsAbandoned?: long(name='CallsAbandoned'),
    callsConnected?: long(name='CallsConnected'),
    callsDialed?: long(name='CallsDialed'),
    connectedRate?: float(name='ConnectedRate'),
    occupancyRate?: float(name='OccupancyRate'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetHistoricalCampaignReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoricalCampaignReportResponseBody(name='body'),
}

async function getHistoricalCampaignReportWithOptions(request: GetHistoricalCampaignReportRequest, runtime: Util.RuntimeOptions): GetHistoricalCampaignReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHistoricalCampaignReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHistoricalCampaignReport(request: GetHistoricalCampaignReportRequest): GetHistoricalCampaignReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistoricalCampaignReportWithOptions(request, runtime);
}

model GetHistoricalInstanceReportRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
}

model GetHistoricalInstanceReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    inbound?: {
      abandonRate?: float(name='AbandonRate'),
      averageAbandonTime?: float(name='AverageAbandonTime'),
      averageAbandonedInIVRTime?: float(name='AverageAbandonedInIVRTime'),
      averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
      averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
      averageHoldTime?: float(name='AverageHoldTime'),
      averageRingTime?: float(name='AverageRingTime'),
      averageTalkTime?: float(name='AverageTalkTime'),
      averageWaitTime?: float(name='AverageWaitTime'),
      averageWorkTime?: float(name='AverageWorkTime'),
      callsAbandoned?: long(name='CallsAbandoned'),
      callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
      callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
      callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
      callsAbandonedInVoiceNavigator?: long(name='CallsAbandonedInVoiceNavigator'),
      callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
      callsBlindTransferred?: long(name='CallsBlindTransferred'),
      callsForwardToOutsideNumber?: long(name='CallsForwardToOutsideNumber'),
      callsHandled?: long(name='CallsHandled'),
      callsHold?: long(name='CallsHold'),
      callsIVRException?: long(name='CallsIVRException'),
      callsOffered?: long(name='CallsOffered'),
      callsQueued?: long(name='CallsQueued'),
      callsQueuingFailed?: long(name='CallsQueuingFailed'),
      callsQueuingOverflow?: long(name='CallsQueuingOverflow'),
      callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
      callsRinged?: long(name='CallsRinged'),
      callsVoicemail?: long(name='CallsVoicemail'),
      handleRate?: float(name='HandleRate'),
      maxAbandonTime?: long(name='MaxAbandonTime'),
      maxAbandonedInIVRTime?: long(name='MaxAbandonedInIVRTime'),
      maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
      maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
      maxHoldTime?: long(name='MaxHoldTime'),
      maxRingTime?: long(name='MaxRingTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxWaitTime?: long(name='MaxWaitTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionRate?: float(name='SatisfactionRate'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      serviceLevel20?: float(name='ServiceLevel20'),
      totalAbandonTime?: long(name='TotalAbandonTime'),
      totalAbandonedInIVRTime?: long(name='TotalAbandonedInIVRTime'),
      totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
      totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
      totalHoldTime?: long(name='TotalHoldTime'),
      totalRingTime?: long(name='TotalRingTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWaitTime?: long(name='TotalWaitTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Inbound'),
    outbound?: {
      answerRate?: float(name='AnswerRate'),
      averageDialingTime?: float(name='AverageDialingTime'),
      averageHoldTime?: float(name='AverageHoldTime'),
      averageRingTime?: float(name='AverageRingTime'),
      averageTalkTime?: float(name='AverageTalkTime'),
      averageWorkTime?: float(name='AverageWorkTime'),
      callsAnswered?: long(name='CallsAnswered'),
      callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
      callsBlindTransferred?: long(name='CallsBlindTransferred'),
      callsDialed?: long(name='CallsDialed'),
      callsHold?: int32(name='CallsHold'),
      callsRinged?: long(name='CallsRinged'),
      maxDialingTime?: long(name='MaxDialingTime'),
      maxHoldTime?: long(name='MaxHoldTime'),
      maxRingTime?: long(name='MaxRingTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionRate?: float(name='SatisfactionRate'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      totalDialingTime?: long(name='TotalDialingTime'),
      totalHoldTime?: long(name='TotalHoldTime'),
      totalRingTime?: long(name='TotalRingTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Outbound'),
    overall?: {
      averageBreakTime?: float(name='AverageBreakTime'),
      averageHoldTime?: float(name='AverageHoldTime'),
      averageReadyTime?: float(name='AverageReadyTime'),
      averageTalkTime?: float(name='AverageTalkTime'),
      averageWorkTime?: float(name='AverageWorkTime'),
      maxBreakTime?: long(name='MaxBreakTime'),
      maxHoldTime?: long(name='MaxHoldTime'),
      maxReadyTime?: long(name='MaxReadyTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      occupancyRate?: float(name='OccupancyRate'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionRate?: float(name='SatisfactionRate'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      totalBreakTime?: long(name='TotalBreakTime'),
      totalCalls?: long(name='TotalCalls'),
      totalHoldTime?: long(name='TotalHoldTime'),
      totalLoggedInTime?: long(name='TotalLoggedInTime'),
      totalReadyTime?: long(name='TotalReadyTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
    }(name='Overall'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetHistoricalInstanceReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoricalInstanceReportResponseBody(name='body'),
}

async function getHistoricalInstanceReportWithOptions(request: GetHistoricalInstanceReportRequest, runtime: Util.RuntimeOptions): GetHistoricalInstanceReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHistoricalInstanceReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHistoricalInstanceReport(request: GetHistoricalInstanceReportRequest): GetHistoricalInstanceReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistoricalInstanceReportWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model GetInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    adminList?: [ 
      {
        displayName?: string(name='DisplayName'),
        email?: string(name='Email'),
        extension?: string(name='Extension'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        mobile?: string(name='Mobile'),
        roleId?: string(name='RoleId'),
        roleName?: string(name='RoleName'),
        userId?: string(name='UserId'),
        workMode?: string(name='WorkMode'),
      }
    ](name='AdminList'),
    aliyunUid?: string(name='AliyunUid'),
    consoleUrl?: string(name='ConsoleUrl'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    id?: string(name='Id'),
    name?: string(name='Name'),
    numberList?: [ 
      {
        active?: boolean(name='Active'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        province?: string(name='Province'),
        skillGroups?: [ 
          {
            description?: string(name='Description'),
            displayName?: string(name='DisplayName'),
            instanceId?: string(name='InstanceId'),
            name?: string(name='Name'),
            phoneNumberCount?: int32(name='PhoneNumberCount'),
            skillGroupId?: string(name='SkillGroupId'),
            userCount?: int32(name='UserCount'),
          }
        ](name='SkillGroups'),
        usage?: string(name='Usage'),
        userId?: string(name='UserId'),
      }
    ](name='NumberList'),
    status?: string(name='Status'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetInstanceTrendingReportRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
}

model GetInstanceTrendingReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    inbound?: [ 
      {
        callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
        callsHandled?: long(name='CallsHandled'),
        callsQueued?: long(name='CallsQueued'),
        statsTime?: long(name='StatsTime'),
        totalCalls?: long(name='TotalCalls'),
      }
    ](name='Inbound'),
    outbound?: [ 
      {
        callsAnswered?: long(name='CallsAnswered'),
        statsTime?: long(name='StatsTime'),
        totalCalls?: long(name='TotalCalls'),
      }
    ](name='Outbound'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetInstanceTrendingReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceTrendingReportResponseBody(name='body'),
}

async function getInstanceTrendingReportWithOptions(request: GetInstanceTrendingReportRequest, runtime: Util.RuntimeOptions): GetInstanceTrendingReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceTrendingReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceTrendingReport(request: GetInstanceTrendingReportRequest): GetInstanceTrendingReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceTrendingReportWithOptions(request, runtime);
}

model GetLoginDetailsRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model GetLoginDetailsResponseBody = {
  code?: string(name='Code'),
  data?: {
    agentServerUrl?: string(name='AgentServerUrl'),
    deviceExt?: string(name='DeviceExt'),
    deviceId?: string(name='DeviceId'),
    deviceState?: string(name='DeviceState'),
    displayName?: string(name='DisplayName'),
    extension?: string(name='Extension'),
    signature?: string(name='Signature'),
    signature2?: string(name='Signature2'),
    sipServerUrl?: string(name='SipServerUrl'),
    userId?: string(name='UserId'),
    userKey?: string(name='UserKey'),
    userKey2?: string(name='UserKey2'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model GetLoginDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoginDetailsResponseBody(name='body'),
}

async function getLoginDetailsWithOptions(request: GetLoginDetailsRequest, runtime: Util.RuntimeOptions): GetLoginDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLoginDetails',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLoginDetails(request: GetLoginDetailsRequest): GetLoginDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoginDetailsWithOptions(request, runtime);
}

model GetMonoRecordingRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model GetMonoRecordingResponseBody = {
  code?: string(name='Code'),
  data?: {
    fileName?: string(name='FileName'),
    fileUrl?: string(name='FileUrl'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMonoRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: GetMonoRecordingResponseBody(name='body'),
}

async function getMonoRecordingWithOptions(request: GetMonoRecordingRequest, runtime: Util.RuntimeOptions): GetMonoRecordingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMonoRecording',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMonoRecording(request: GetMonoRecordingRequest): GetMonoRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonoRecordingWithOptions(request, runtime);
}

model GetMultiChannelRecordingRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model GetMultiChannelRecordingResponseBody = {
  code?: string(name='Code'),
  data?: {
    fileName?: string(name='FileName'),
    fileUrl?: string(name='FileUrl'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetMultiChannelRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiChannelRecordingResponseBody(name='body'),
}

async function getMultiChannelRecordingWithOptions(request: GetMultiChannelRecordingRequest, runtime: Util.RuntimeOptions): GetMultiChannelRecordingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMultiChannelRecording',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getMultiChannelRecording(request: GetMultiChannelRecordingRequest): GetMultiChannelRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiChannelRecordingWithOptions(request, runtime);
}

model GetNumberLocationRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
}

model GetNumberLocationResponseBody = {
  code?: string(name='Code'),
  data?: {
    city?: string(name='City'),
    number?: string(name='Number'),
    province?: string(name='Province'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetNumberLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetNumberLocationResponseBody(name='body'),
}

async function getNumberLocationWithOptions(request: GetNumberLocationRequest, runtime: Util.RuntimeOptions): GetNumberLocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetNumberLocation',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNumberLocation(request: GetNumberLocationRequest): GetNumberLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNumberLocationWithOptions(request, runtime);
}

model GetRealtimeCampaignStatsRequest {
  instanceId?: string(name='InstanceId', description='实例ID'),
  queueId?: string(name='QueueId', description='活动ID'),
}

model GetRealtimeCampaignStatsResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakingAgents?: long(name='BreakingAgents'),
    caps?: long(name='Caps'),
    loggedInAgents?: long(name='LoggedInAgents'),
    readyAgents?: long(name='ReadyAgents'),
    talkingAgents?: long(name='TalkingAgents'),
    totalAgents?: long(name='TotalAgents'),
    workingAgents?: long(name='WorkingAgents'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetRealtimeCampaignStatsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealtimeCampaignStatsResponseBody(name='body'),
}

async function getRealtimeCampaignStatsWithOptions(request: GetRealtimeCampaignStatsRequest, runtime: Util.RuntimeOptions): GetRealtimeCampaignStatsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRealtimeCampaignStats',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRealtimeCampaignStats(request: GetRealtimeCampaignStatsRequest): GetRealtimeCampaignStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealtimeCampaignStatsWithOptions(request, runtime);
}

model GetRealtimeInstanceStatesRequest {
  instanceId?: string(name='InstanceId'),
}

model GetRealtimeInstanceStatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakingAgents?: long(name='BreakingAgents'),
    instanceId?: string(name='InstanceId'),
    interactiveCalls?: long(name='InteractiveCalls'),
    loggedInAgents?: long(name='LoggedInAgents'),
    longestWaitingTime?: long(name='LongestWaitingTime'),
    readyAgents?: long(name='ReadyAgents'),
    talkingAgents?: long(name='TalkingAgents'),
    totalAgents?: long(name='TotalAgents'),
    waitingCalls?: long(name='WaitingCalls'),
    workingAgents?: long(name='WorkingAgents'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetRealtimeInstanceStatesResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealtimeInstanceStatesResponseBody(name='body'),
}

async function getRealtimeInstanceStatesWithOptions(request: GetRealtimeInstanceStatesRequest, runtime: Util.RuntimeOptions): GetRealtimeInstanceStatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRealtimeInstanceStates',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRealtimeInstanceStates(request: GetRealtimeInstanceStatesRequest): GetRealtimeInstanceStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealtimeInstanceStatesWithOptions(request, runtime);
}

model GetSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model GetSkillGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    description?: string(name='Description'),
    displayName?: string(name='DisplayName'),
    instanceId?: string(name='InstanceId'),
    name?: string(name='Name'),
    skillGroupId?: string(name='SkillGroupId'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupResponseBody(name='body'),
}

async function getSkillGroupWithOptions(request: GetSkillGroupRequest, runtime: Util.RuntimeOptions): GetSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSkillGroup(request: GetSkillGroupRequest): GetSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSkillGroupWithOptions(request, runtime);
}

model GetTurnCredentialsRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model GetTurnCredentialsResponseBody = {
  code?: string(name='Code'),
  data?: {
    password?: string(name='Password'),
    userName?: string(name='UserName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model GetTurnCredentialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTurnCredentialsResponseBody(name='body'),
}

async function getTurnCredentialsWithOptions(request: GetTurnCredentialsRequest, runtime: Util.RuntimeOptions): GetTurnCredentialsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTurnCredentials',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTurnCredentials(request: GetTurnCredentialsRequest): GetTurnCredentialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTurnCredentialsWithOptions(request, runtime);
}

model GetTurnServerListRequest {
  instanceId?: string(name='InstanceId'),
}

model GetTurnServerListResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model GetTurnServerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTurnServerListResponseBody(name='body'),
}

async function getTurnServerListWithOptions(request: GetTurnServerListRequest, runtime: Util.RuntimeOptions): GetTurnServerListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTurnServerList',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTurnServerList(request: GetTurnServerListRequest): GetTurnServerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTurnServerListWithOptions(request, runtime);
}

model GetUserRequest {
  extension?: string(name='Extension'),
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model GetUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceExt?: string(name='DeviceExt'),
    deviceId?: string(name='DeviceId'),
    deviceState?: string(name='DeviceState'),
    displayId?: string(name='DisplayId'),
    displayName?: string(name='DisplayName'),
    email?: string(name='Email'),
    extension?: string(name='Extension'),
    instanceId?: string(name='InstanceId'),
    loginName?: string(name='LoginName'),
    mobile?: string(name='Mobile'),
    roleId?: string(name='RoleId'),
    roleName?: string(name='RoleName'),
    userId?: string(name='UserId'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.extension)) {
    query['Extension'] = request.extension;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model GetVoicemailRecordingRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model GetVoicemailRecordingResponseBody = {
  code?: string(name='Code'),
  data?: {
    fileName?: string(name='FileName'),
    fileUrl?: string(name='FileUrl'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetVoicemailRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: GetVoicemailRecordingResponseBody(name='body'),
}

async function getVoicemailRecordingWithOptions(request: GetVoicemailRecordingRequest, runtime: Util.RuntimeOptions): GetVoicemailRecordingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetVoicemailRecording',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getVoicemailRecording(request: GetVoicemailRecordingRequest): GetVoicemailRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVoicemailRecordingWithOptions(request, runtime);
}

model HoldCallRequest {
  channelId?: string(name='ChannelId'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  music?: string(name='Music'),
  userId?: string(name='UserId'),
}

model HoldCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model HoldCallResponse = {
  headers: map[string]string(name='headers'),
  body: HoldCallResponseBody(name='body'),
}

async function holdCallWithOptions(request: HoldCallRequest, runtime: Util.RuntimeOptions): HoldCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.music)) {
    query['Music'] = request.music;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'HoldCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function holdCall(request: HoldCallRequest): HoldCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return holdCallWithOptions(request, runtime);
}

model ImportAdminsRequest {
  instanceId?: string(name='InstanceId'),
  ramIdList?: string(name='RamIdList'),
}

model ImportAdminsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      extension?: string(name='Extension'),
      instanceId?: string(name='InstanceId'),
      ramId?: string(name='RamId'),
      roleId?: string(name='RoleId'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ImportAdminsResponse = {
  headers: map[string]string(name='headers'),
  body: ImportAdminsResponseBody(name='body'),
}

async function importAdminsWithOptions(request: ImportAdminsRequest, runtime: Util.RuntimeOptions): ImportAdminsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ramIdList)) {
    query['RamIdList'] = request.ramIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportAdmins',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importAdmins(request: ImportAdminsRequest): ImportAdminsResponse {
  var runtime = new Util.RuntimeOptions{};
  return importAdminsWithOptions(request, runtime);
}

model ImportCustomCallTaggingRequest {
  filePath?: string(name='FilePath'),
  instanceId?: string(name='InstanceId'),
}

model ImportCustomCallTaggingResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      item?: string(name='Item'),
      reason?: string(name='Reason'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ImportCustomCallTaggingResponse = {
  headers: map[string]string(name='headers'),
  body: ImportCustomCallTaggingResponseBody(name='body'),
}

async function importCustomCallTaggingWithOptions(request: ImportCustomCallTaggingRequest, runtime: Util.RuntimeOptions): ImportCustomCallTaggingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportCustomCallTagging',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importCustomCallTagging(request: ImportCustomCallTaggingRequest): ImportCustomCallTaggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return importCustomCallTaggingWithOptions(request, runtime);
}

model ImportDoNotCallNumbersRequest {
  filePath?: string(name='FilePath'),
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
  remark?: string(name='Remark'),
}

model ImportDoNotCallNumbersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ImportDoNotCallNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ImportDoNotCallNumbersResponseBody(name='body'),
}

async function importDoNotCallNumbersWithOptions(request: ImportDoNotCallNumbersRequest, runtime: Util.RuntimeOptions): ImportDoNotCallNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportDoNotCallNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importDoNotCallNumbers(request: ImportDoNotCallNumbersRequest): ImportDoNotCallNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDoNotCallNumbersWithOptions(request, runtime);
}

model InitiateAttendedTransferRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  transferee?: string(name='Transferee'),
  transferor?: string(name='Transferor'),
  userId?: string(name='UserId'),
}

model InitiateAttendedTransferResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model InitiateAttendedTransferResponse = {
  headers: map[string]string(name='headers'),
  body: InitiateAttendedTransferResponseBody(name='body'),
}

async function initiateAttendedTransferWithOptions(request: InitiateAttendedTransferRequest, runtime: Util.RuntimeOptions): InitiateAttendedTransferResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.transferee)) {
    query['Transferee'] = request.transferee;
  }
  if (!Util.isUnset(request.transferor)) {
    query['Transferor'] = request.transferor;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitiateAttendedTransfer',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initiateAttendedTransfer(request: InitiateAttendedTransferRequest): InitiateAttendedTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return initiateAttendedTransferWithOptions(request, runtime);
}

model InterceptCallRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  interceptedUserId?: string(name='InterceptedUserId'),
  jobId?: string(name='JobId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  userId?: string(name='UserId'),
}

model InterceptCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model InterceptCallResponse = {
  headers: map[string]string(name='headers'),
  body: InterceptCallResponseBody(name='body'),
}

async function interceptCallWithOptions(request: InterceptCallRequest, runtime: Util.RuntimeOptions): InterceptCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interceptedUserId)) {
    query['InterceptedUserId'] = request.interceptedUserId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InterceptCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function interceptCall(request: InterceptCallRequest): InterceptCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return interceptCallWithOptions(request, runtime);
}

model LaunchAuthenticationRequest {
  contactFlowId?: string(name='ContactFlowId'),
  contactFlowVariables?: string(name='ContactFlowVariables'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model LaunchAuthenticationResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model LaunchAuthenticationResponse = {
  headers: map[string]string(name='headers'),
  body: LaunchAuthenticationResponseBody(name='body'),
}

async function launchAuthenticationWithOptions(request: LaunchAuthenticationRequest, runtime: Util.RuntimeOptions): LaunchAuthenticationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactFlowId)) {
    query['ContactFlowId'] = request.contactFlowId;
  }
  if (!Util.isUnset(request.contactFlowVariables)) {
    query['ContactFlowVariables'] = request.contactFlowVariables;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LaunchAuthentication',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function launchAuthentication(request: LaunchAuthenticationRequest): LaunchAuthenticationResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchAuthenticationWithOptions(request, runtime);
}

model LaunchSurveyRequest {
  contactFlowId?: string(name='ContactFlowId'),
  contactFlowVariables?: string(name='ContactFlowVariables'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  smsMetadataId?: string(name='SmsMetadataId'),
  surveyChannel?: string(name='SurveyChannel'),
  userId?: string(name='UserId'),
}

model LaunchSurveyResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model LaunchSurveyResponse = {
  headers: map[string]string(name='headers'),
  body: LaunchSurveyResponseBody(name='body'),
}

async function launchSurveyWithOptions(request: LaunchSurveyRequest, runtime: Util.RuntimeOptions): LaunchSurveyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactFlowId)) {
    query['ContactFlowId'] = request.contactFlowId;
  }
  if (!Util.isUnset(request.contactFlowVariables)) {
    query['ContactFlowVariables'] = request.contactFlowVariables;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.smsMetadataId)) {
    query['SmsMetadataId'] = request.smsMetadataId;
  }
  if (!Util.isUnset(request.surveyChannel)) {
    query['SurveyChannel'] = request.surveyChannel;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LaunchSurvey',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function launchSurvey(request: LaunchSurveyRequest): LaunchSurveyResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchSurveyWithOptions(request, runtime);
}

model ListAgentStateLogsRequest {
  agentId?: string(name='AgentId'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
}

model ListAgentStateLogsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      duration?: long(name='Duration'),
      outboundScenario?: boolean(name='OutboundScenario'),
      startTime?: long(name='StartTime'),
      state?: string(name='State'),
      stateCode?: string(name='StateCode'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListAgentStateLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentStateLogsResponseBody(name='body'),
}

async function listAgentStateLogsWithOptions(request: ListAgentStateLogsRequest, runtime: Util.RuntimeOptions): ListAgentStateLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentId)) {
    query['AgentId'] = request.agentId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgentStateLogs',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAgentStateLogs(request: ListAgentStateLogsRequest): ListAgentStateLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentStateLogsWithOptions(request, runtime);
}

model ListAgentStatesRequest {
  agentIds?: string(name='AgentIds'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
  state?: string(name='State'),
}

model ListAgentStatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        dn?: string(name='Dn'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        state?: string(name='State'),
        stateDuration?: string(name='StateDuration'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentStatesResponseBody(name='body'),
}

async function listAgentStatesWithOptions(request: ListAgentStatesRequest, runtime: Util.RuntimeOptions): ListAgentStatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentIds)) {
    query['AgentIds'] = request.agentIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgentStates',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAgentStates(request: ListAgentStatesRequest): ListAgentStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentStatesWithOptions(request, runtime);
}

model ListAgentSummaryReportsSinceMidnightRequest {
  agentIds?: string(name='AgentIds'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ListAgentSummaryReportsSinceMidnightResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedAgentSummaryReport?: {
    list?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        inbound?: {
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          handleRate?: float(name='HandleRate'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        loginName?: string(name='LoginName'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: string(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          oneTransferCalls?: long(name='OneTransferCalls'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        skillGroupIds?: string(name='SkillGroupIds'),
        skillGroupNames?: string(name='SkillGroupNames'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedAgentSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAgentSummaryReportsSinceMidnightResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentSummaryReportsSinceMidnightResponseBody(name='body'),
}

async function listAgentSummaryReportsSinceMidnightWithOptions(request: ListAgentSummaryReportsSinceMidnightRequest, runtime: Util.RuntimeOptions): ListAgentSummaryReportsSinceMidnightResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgentSummaryReportsSinceMidnight',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAgentSummaryReportsSinceMidnight(request: ListAgentSummaryReportsSinceMidnightRequest): ListAgentSummaryReportsSinceMidnightResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentSummaryReportsSinceMidnightWithOptions(request, runtime);
}

model ListAttemptsRequest {
  agentId?: string(name='AgentId', description='坐席ID'),
  attemptId?: string(name='AttemptId', description='记录ID'),
  callee?: string(name='Callee', description='被叫'),
  caller?: string(name='Caller', description='主叫'),
  campaignId?: string(name='CampaignId', description='活动ID'),
  caseId?: string(name='CaseId', description='CaseID'),
  contactId?: string(name='ContactId', description='话务ID'),
  endTime?: long(name='EndTime', description='结束时间'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  pageNumber?: int32(name='PageNumber', description='页码'),
  pageSize?: int32(name='PageSize', description='页大小'),
  queueId?: string(name='QueueId', description='队列ID'),
  startTime?: long(name='StartTime', description='开始时间'),
}

model ListAttemptsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        agentEstablishedTime?: long(name='AgentEstablishedTime'),
        agentId?: string(name='AgentId'),
        agentRingDuration?: long(name='AgentRingDuration'),
        assignAgentTime?: long(name='AssignAgentTime'),
        attemptId?: string(name='AttemptId'),
        callee?: string(name='Callee'),
        caller?: string(name='Caller'),
        campaignId?: string(name='CampaignId'),
        caseId?: string(name='CaseId'),
        contactId?: string(name='ContactId'),
        customerEstablishedTime?: long(name='CustomerEstablishedTime'),
        customerReleasedTime?: long(name='CustomerReleasedTime'),
        dialDuration?: long(name='DialDuration'),
        dialTime?: long(name='DialTime'),
        enqueueTime?: long(name='EnqueueTime'),
        enterIvrTime?: long(name='EnterIvrTime'),
        instanceId?: string(name='InstanceId'),
        ivrDuration?: long(name='IvrDuration'),
        queueDuration?: long(name='QueueDuration'),
        queueId?: string(name='QueueId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListAttemptsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAttemptsResponseBody(name='body'),
}

async function listAttemptsWithOptions(request: ListAttemptsRequest, runtime: Util.RuntimeOptions): ListAttemptsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAttempts',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAttempts(request: ListAttemptsRequest): ListAttemptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAttemptsWithOptions(request, runtime);
}

model ListBriefSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListBriefSkillGroupsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        description?: string(name='Description'),
        displayName?: string(name='DisplayName'),
        instanceId?: string(name='InstanceId'),
        phoneNumberCount?: int32(name='PhoneNumberCount'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        userCount?: int32(name='UserCount'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListBriefSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBriefSkillGroupsResponseBody(name='body'),
}

async function listBriefSkillGroupsWithOptions(request: ListBriefSkillGroupsRequest, runtime: Util.RuntimeOptions): ListBriefSkillGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBriefSkillGroups',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBriefSkillGroups(request: ListBriefSkillGroupsRequest): ListBriefSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBriefSkillGroupsWithOptions(request, runtime);
}

model ListCallDetailRecordsRequest {
  agentId?: string(name='AgentId'),
  calledNumber?: string(name='CalledNumber'),
  callingNumber?: string(name='CallingNumber'),
  contactDisposition?: string(name='ContactDisposition'),
  contactDispositionList?: string(name='ContactDispositionList'),
  contactId?: string(name='ContactId'),
  contactType?: string(name='ContactType'),
  contactTypeList?: string(name='ContactTypeList'),
  criteria?: string(name='Criteria'),
  earlyMediaStateList?: string(name='EarlyMediaStateList'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  orderByField?: string(name='OrderByField'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  satisfactionDescriptionList?: string(name='SatisfactionDescriptionList'),
  satisfactionList?: string(name='SatisfactionList'),
  satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel'),
  skillGroupId?: string(name='SkillGroupId'),
  sortOrder?: string(name='SortOrder'),
  startTime?: long(name='StartTime'),
}

model ListCallDetailRecordsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        additionalBroker?: string(name='AdditionalBroker'),
        agentIds?: string(name='AgentIds'),
        agentNames?: string(name='AgentNames'),
        broker?: string(name='Broker'),
        callDuration?: string(name='CallDuration'),
        calledNumber?: string(name='CalledNumber'),
        calleeLocation?: string(name='CalleeLocation'),
        callerLocation?: string(name='CallerLocation'),
        callingNumber?: string(name='CallingNumber'),
        contactDisposition?: string(name='ContactDisposition'),
        contactId?: string(name='ContactId'),
        contactType?: string(name='ContactType'),
        earlyMediaState?: string(name='EarlyMediaState'),
        establishedTime?: long(name='EstablishedTime'),
        instanceId?: string(name='InstanceId'),
        ivrTime?: long(name='IvrTime'),
        queueTime?: long(name='QueueTime'),
        recordingDuration?: long(name='RecordingDuration'),
        recordingReady?: boolean(name='RecordingReady'),
        releaseInitiator?: string(name='ReleaseInitiator'),
        releaseTime?: long(name='ReleaseTime'),
        ringTime?: long(name='RingTime'),
        satisfactionDescription?: string(name='SatisfactionDescription'),
        satisfactionIndex?: int32(name='SatisfactionIndex'),
        satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel'),
        satisfactionSurveyOffered?: boolean(name='SatisfactionSurveyOffered'),
        skillGroupIds?: string(name='SkillGroupIds'),
        skillGroupNames?: string(name='SkillGroupNames'),
        startTime?: long(name='StartTime'),
        waitTime?: long(name='WaitTime'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListCallDetailRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallDetailRecordsResponseBody(name='body'),
}

async function listCallDetailRecordsWithOptions(request: ListCallDetailRecordsRequest, runtime: Util.RuntimeOptions): ListCallDetailRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentId)) {
    query['AgentId'] = request.agentId;
  }
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.callingNumber)) {
    query['CallingNumber'] = request.callingNumber;
  }
  if (!Util.isUnset(request.contactDisposition)) {
    query['ContactDisposition'] = request.contactDisposition;
  }
  if (!Util.isUnset(request.contactDispositionList)) {
    query['ContactDispositionList'] = request.contactDispositionList;
  }
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.contactType)) {
    query['ContactType'] = request.contactType;
  }
  if (!Util.isUnset(request.contactTypeList)) {
    query['ContactTypeList'] = request.contactTypeList;
  }
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.earlyMediaStateList)) {
    query['EarlyMediaStateList'] = request.earlyMediaStateList;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderByField)) {
    query['OrderByField'] = request.orderByField;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.satisfactionDescriptionList)) {
    query['SatisfactionDescriptionList'] = request.satisfactionDescriptionList;
  }
  if (!Util.isUnset(request.satisfactionList)) {
    query['SatisfactionList'] = request.satisfactionList;
  }
  if (!Util.isUnset(request.satisfactionSurveyChannel)) {
    query['SatisfactionSurveyChannel'] = request.satisfactionSurveyChannel;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.sortOrder)) {
    query['SortOrder'] = request.sortOrder;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCallDetailRecords',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCallDetailRecords(request: ListCallDetailRecordsRequest): ListCallDetailRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallDetailRecordsWithOptions(request, runtime);
}

model ListCallTagsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListCallTagsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        instanceId?: string(name='InstanceId'),
        tagName?: string(name='TagName'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListCallTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallTagsResponseBody(name='body'),
}

async function listCallTagsWithOptions(request: ListCallTagsRequest, runtime: Util.RuntimeOptions): ListCallTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCallTags',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCallTags(request: ListCallTagsRequest): ListCallTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallTagsWithOptions(request, runtime);
}

model ListCampaignTrendingReportRequest {
  campaignId?: string(name='CampaignId', description='活动ID'),
  endTime?: long(name='EndTime', description='结束时间'),
  instanceId?: string(name='InstanceId', description='实例ID'),
  startTime?: long(name='StartTime', description='开始时间'),
}

model ListCampaignTrendingReportResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      breakAgents?: long(name='BreakAgents'),
      concurrency?: long(name='Concurrency'),
      datetime?: long(name='Datetime'),
      loggedInAgents?: long(name='LoggedInAgents'),
      readyAgents?: long(name='ReadyAgents'),
      talkAgents?: long(name='TalkAgents'),
      workAgents?: long(name='WorkAgents'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListCampaignTrendingReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListCampaignTrendingReportResponseBody(name='body'),
}

async function listCampaignTrendingReportWithOptions(request: ListCampaignTrendingReportRequest, runtime: Util.RuntimeOptions): ListCampaignTrendingReportResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCampaignTrendingReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCampaignTrendingReport(request: ListCampaignTrendingReportRequest): ListCampaignTrendingReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCampaignTrendingReportWithOptions(request, runtime);
}

model ListCampaignsRequest {
  actualStartTimeFrom?: string(name='ActualStartTimeFrom'),
  actualStartTimeTo?: string(name='ActualStartTimeTo'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  planedStartTimeFrom?: string(name='PlanedStartTimeFrom'),
  planedStartTimeTo?: string(name='PlanedStartTimeTo'),
  queueId?: string(name='QueueId'),
  state?: string(name='State'),
}

model ListCampaignsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        actualEndTime?: long(name='ActualEndTime'),
        actualStartTime?: long(name='ActualStartTime'),
        campaignId?: string(name='CampaignId', description='id'),
        casesAborted?: long(name='CasesAborted'),
        casesConnected?: long(name='CasesConnected'),
        casesUncompleted?: long(name='CasesUncompleted'),
        maxAttemptCount?: long(name='MaxAttemptCount'),
        minAttemptInterval?: long(name='MinAttemptInterval'),
        name?: string(name='Name'),
        planedEndTime?: long(name='PlanedEndTime'),
        planedStartTime?: long(name='PlanedStartTime'),
        queueId?: string(name='QueueId'),
        queueName?: string(name='QueueName'),
        simulation?: boolean(name='Simulation'),
        state?: string(name='State', description='state'),
        strategyParameters?: string(name='StrategyParameters'),
        strategyType?: string(name='StrategyType'),
        totalCases?: long(name='TotalCases'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCampaignsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCampaignsResponseBody(name='body'),
}

async function listCampaignsWithOptions(request: ListCampaignsRequest, runtime: Util.RuntimeOptions): ListCampaignsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actualStartTimeFrom)) {
    query['ActualStartTimeFrom'] = request.actualStartTimeFrom;
  }
  if (!Util.isUnset(request.actualStartTimeTo)) {
    query['ActualStartTimeTo'] = request.actualStartTimeTo;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.planedStartTimeFrom)) {
    query['PlanedStartTimeFrom'] = request.planedStartTimeFrom;
  }
  if (!Util.isUnset(request.planedStartTimeTo)) {
    query['PlanedStartTimeTo'] = request.planedStartTimeTo;
  }
  if (!Util.isUnset(request.queueId)) {
    query['QueueId'] = request.queueId;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCampaigns',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCampaigns(request: ListCampaignsRequest): ListCampaignsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCampaignsWithOptions(request, runtime);
}

model ListCasesRequest {
  campaignId?: string(name='CampaignId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
}

model ListCasesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        abandonType?: string(name='AbandonType'),
        attemptCount?: long(name='AttemptCount'),
        caseId?: string(name='CaseId'),
        customVariables?: string(name='CustomVariables'),
        expandInfo?: string(name='ExpandInfo'),
        failureReason?: string(name='FailureReason'),
        phoneNumber?: string(name='PhoneNumber'),
        state?: string(name='State'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data', description='data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCasesResponseBody(name='body'),
}

async function listCasesWithOptions(request: ListCasesRequest, runtime: Util.RuntimeOptions): ListCasesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCases',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCases(request: ListCasesRequest): ListCasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCasesWithOptions(request, runtime);
}

model ListConfigItemsRequest {
  instanceId?: string(name='InstanceId'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
}

model ListConfigItemsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      objectId?: string(name='ObjectId'),
      objectType?: string(name='ObjectType'),
      value?: string(name='Value'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ListConfigItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigItemsResponseBody(name='body'),
}

async function listConfigItemsWithOptions(request: ListConfigItemsRequest, runtime: Util.RuntimeOptions): ListConfigItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConfigItems',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConfigItems(request: ListConfigItemsRequest): ListConfigItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigItemsWithOptions(request, runtime);
}

model ListContactFlowsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  type?: string(name='Type'),
}

model ListContactFlowsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        contactFlowId?: string(name='ContactFlowId'),
        createdTime?: string(name='CreatedTime'),
        definition?: string(name='Definition'),
        description?: string(name='Description'),
        draftId?: string(name='DraftId'),
        editor?: string(name='Editor'),
        instanceId?: string(name='InstanceId'),
        name?: string(name='Name'),
        numberList?: [ string ](name='NumberList'),
        published?: boolean(name='Published'),
        type?: string(name='Type'),
        updatedTime?: string(name='UpdatedTime'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListContactFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListContactFlowsResponseBody(name='body'),
}

async function listContactFlowsWithOptions(request: ListContactFlowsRequest, runtime: Util.RuntimeOptions): ListContactFlowsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListContactFlows',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listContactFlows(request: ListContactFlowsRequest): ListContactFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listContactFlowsWithOptions(request, runtime);
}

model ListCustomCallTaggingRequest {
  callTagNameList?: string(name='CallTagNameList'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListCustomCallTaggingResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        callTagList?: [ 
          {
            instanceId?: string(name='InstanceId'),
            tagName?: string(name='TagName'),
          }
        ](name='CallTagList'),
        creator?: string(name='Creator'),
        description?: string(name='Description'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        updateTime?: string(name='UpdateTime'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListCustomCallTaggingResponse = {
  headers: map[string]string(name='headers'),
  body: ListCustomCallTaggingResponseBody(name='body'),
}

async function listCustomCallTaggingWithOptions(request: ListCustomCallTaggingRequest, runtime: Util.RuntimeOptions): ListCustomCallTaggingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callTagNameList)) {
    query['CallTagNameList'] = request.callTagNameList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomCallTagging',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCustomCallTagging(request: ListCustomCallTaggingRequest): ListCustomCallTaggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCustomCallTaggingWithOptions(request, runtime);
}

model ListDevicesRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model ListDevicesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      callId?: string(name='CallId'),
      contact?: string(name='Contact'),
      deviceId?: string(name='DeviceId'),
      expires?: long(name='Expires'),
      extension?: string(name='Extension'),
      instanceId?: string(name='InstanceId'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDevices',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model ListDoNotCallNumbersRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  scope?: string(name='Scope'),
  searchPattern?: string(name='SearchPattern'),
}

model ListDoNotCallNumbersResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        createTime?: long(name='CreateTime'),
        creator?: string(name='Creator'),
        number?: string(name='Number'),
        remark?: string(name='Remark'),
        scope?: string(name='Scope'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ListDoNotCallNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListDoNotCallNumbersResponseBody(name='body'),
}

async function listDoNotCallNumbersWithOptions(request: ListDoNotCallNumbersRequest, runtime: Util.RuntimeOptions): ListDoNotCallNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDoNotCallNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDoNotCallNumbers(request: ListDoNotCallNumbersRequest): ListDoNotCallNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDoNotCallNumbersWithOptions(request, runtime);
}

model ListHistoricalAgentReportRequest {
  agentIdList?: string(name='AgentIdList'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
}

model ListHistoricalAgentReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        displayId?: string(name='DisplayId'),
        inbound?: {
          averageHoldTime?: float(name='AverageHoldTime'),
          averageRingTime?: float(name='AverageRingTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          callsHandled?: long(name='CallsHandled'),
          callsHold?: long(name='CallsHold'),
          callsOffered?: long(name='CallsOffered'),
          callsRinged?: long(name='CallsRinged'),
          handleRate?: float(name='HandleRate'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionRate?: float(name='SatisfactionRate'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: float(name='AverageDialingTime'),
          averageHoldTime?: float(name='AverageHoldTime'),
          averageRingTime?: float(name='AverageRingTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          callsDialed?: long(name='CallsDialed'),
          callsHold?: long(name='CallsHold'),
          callsRinged?: long(name='CallsRinged'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionRate?: float(name='SatisfactionRate'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageBreakTime?: float(name='AverageBreakTime'),
          averageHoldTime?: float(name='AverageHoldTime'),
          averageReadyTime?: float(name='AverageReadyTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          maxBreakTime?: long(name='MaxBreakTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionRate?: float(name='SatisfactionRate'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListHistoricalAgentReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListHistoricalAgentReportResponseBody(name='body'),
}

async function listHistoricalAgentReportWithOptions(request: ListHistoricalAgentReportRequest, runtime: Util.RuntimeOptions): ListHistoricalAgentReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.stopTime)) {
    query['StopTime'] = request.stopTime;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.agentIdList)) {
    body['AgentIdList'] = request.agentIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHistoricalAgentReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHistoricalAgentReport(request: ListHistoricalAgentReportRequest): ListHistoricalAgentReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHistoricalAgentReportWithOptions(request, runtime);
}

model ListHistoricalSkillGroupReportRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
  startTime?: long(name='StartTime'),
}

model ListHistoricalSkillGroupReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        inbound?: {
          abandonRate?: float(name='AbandonRate'),
          averageAbandonTime?: float(name='AverageAbandonTime'),
          averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
          averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
          averageHoldTime?: float(name='AverageHoldTime'),
          averageRingTime?: float(name='AverageRingTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          averageWaitTime?: float(name='AverageWaitTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsAbandoned?: long(name='CallsAbandoned'),
          callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
          callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          callsHandled?: long(name='CallsHandled'),
          callsHold?: long(name='CallsHold'),
          callsOffered?: long(name='CallsOffered'),
          callsOverflow?: long(name='CallsOverflow'),
          callsQueued?: long(name='CallsQueued'),
          callsRinged?: long(name='CallsRinged'),
          callsTimeout?: long(name='CallsTimeout'),
          handleRate?: float(name='HandleRate'),
          maxAbandonTime?: long(name='MaxAbandonTime'),
          maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
          maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWaitTime?: long(name='MaxWaitTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionRate?: float(name='SatisfactionRate'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalAbandonTime?: long(name='TotalAbandonTime'),
          totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
          totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWaitTime?: long(name='TotalWaitTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: float(name='AverageDialingTime'),
          averageHoldTime?: float(name='AverageHoldTime'),
          averageRingTime?: float(name='AverageRingTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          callsDialed?: long(name='CallsDialed'),
          callsHold?: long(name='CallsHold'),
          callsRinged?: long(name='CallsRinged'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionRate?: float(name='SatisfactionRate'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageBreakTime?: float(name='AverageBreakTime'),
          averageHoldTime?: float(name='AverageHoldTime'),
          averageReadyTime?: float(name='AverageReadyTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          maxBreakTime?: long(name='MaxBreakTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionRate?: float(name='SatisfactionRate'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalHoldTime?: long(name='TotalHoldTime'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListHistoricalSkillGroupReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListHistoricalSkillGroupReportResponseBody(name='body'),
}

async function listHistoricalSkillGroupReportWithOptions(request: ListHistoricalSkillGroupReportRequest, runtime: Util.RuntimeOptions): ListHistoricalSkillGroupReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.skillGroupIdList)) {
    body['SkillGroupIdList'] = request.skillGroupIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHistoricalSkillGroupReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHistoricalSkillGroupReport(request: ListHistoricalSkillGroupReportRequest): ListHistoricalSkillGroupReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHistoricalSkillGroupReportWithOptions(request, runtime);
}

model ListInstancesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        adminList?: [ 
          {
            displayName?: string(name='DisplayName'),
            email?: string(name='Email'),
            extension?: string(name='Extension'),
            instanceId?: string(name='InstanceId'),
            loginName?: string(name='LoginName'),
            mobile?: string(name='Mobile'),
            roleId?: string(name='RoleId'),
            roleName?: string(name='RoleName'),
            userId?: string(name='UserId'),
            workMode?: string(name='WorkMode'),
          }
        ](name='AdminList'),
        aliyunUid?: string(name='AliyunUid'),
        consoleUrl?: string(name='ConsoleUrl'),
        createTime?: long(name='CreateTime'),
        description?: string(name='Description'),
        domainName?: string(name='DomainName'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        numberList?: [ 
          {
            number?: string(name='Number'),
          }
        ](name='NumberList'),
        status?: string(name='Status'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListInstancesOfUserRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInstancesOfUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        adminList?: [ 
          {
            displayName?: string(name='DisplayName'),
            email?: string(name='Email'),
            extension?: string(name='Extension'),
            instanceId?: string(name='InstanceId'),
            loginName?: string(name='LoginName'),
            mobile?: string(name='Mobile'),
            roleId?: string(name='RoleId'),
            roleName?: string(name='RoleName'),
            userId?: string(name='UserId'),
            workMode?: string(name='WorkMode'),
          }
        ](name='AdminList'),
        aliyunUid?: string(name='AliyunUid'),
        consoleUrl?: string(name='ConsoleUrl'),
        description?: string(name='Description'),
        domainName?: string(name='DomainName'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        numberList?: [ 
          {
            active?: boolean(name='Active'),
            city?: string(name='City'),
            contactFlowId?: string(name='ContactFlowId'),
            instanceId?: string(name='InstanceId'),
            number?: string(name='Number'),
            province?: string(name='Province'),
            skillGroups?: [ 
              {
                description?: string(name='Description'),
                displayName?: string(name='DisplayName'),
                instanceId?: string(name='InstanceId'),
                name?: string(name='Name'),
                phoneNumberCount?: int32(name='PhoneNumberCount'),
                skillGroupId?: string(name='SkillGroupId'),
                userCount?: int32(name='UserCount'),
              }
            ](name='SkillGroups'),
            usage?: string(name='Usage'),
            userId?: string(name='UserId'),
          }
        ](name='NumberList'),
        status?: string(name='Status'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ListInstancesOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesOfUserResponseBody(name='body'),
}

async function listInstancesOfUserWithOptions(request: ListInstancesOfUserRequest, runtime: Util.RuntimeOptions): ListInstancesOfUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstancesOfUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstancesOfUser(request: ListInstancesOfUserRequest): ListInstancesOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesOfUserWithOptions(request, runtime);
}

model ListIntervalAgentReportRequest {
  agentId?: string(name='AgentId'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  startTime?: long(name='StartTime'),
}

model ListIntervalAgentReportResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      inbound?: {
        averageHoldTime?: float(name='AverageHoldTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        callsHandled?: long(name='CallsHandled'),
        callsHold?: long(name='CallsHold'),
        callsOffered?: long(name='CallsOffered'),
        callsRinged?: long(name='CallsRinged'),
        handleRate?: float(name='HandleRate'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Inbound'),
      outbound?: {
        answerRate?: float(name='AnswerRate'),
        averageDialingTime?: float(name='AverageDialingTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsAnswered?: long(name='CallsAnswered'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        callsDialed?: long(name='CallsDialed'),
        callsHold?: long(name='CallsHold'),
        callsRinged?: long(name='CallsRinged'),
        maxDialingTime?: long(name='MaxDialingTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        totalDialingTime?: long(name='TotalDialingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageReadyTime?: float(name='AverageReadyTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        firstCheckInTime?: long(name='FirstCheckInTime'),
        lastCheckoutTime?: long(name='LastCheckoutTime'),
        maxBreakTime?: long(name='MaxBreakTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxReadyTime?: long(name='MaxReadyTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        occupancyRate?: float(name='OccupancyRate'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        totalBreakTime?: long(name='TotalBreakTime'),
        totalCalls?: long(name='TotalCalls'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListIntervalAgentReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntervalAgentReportResponseBody(name='body'),
}

async function listIntervalAgentReportWithOptions(request: ListIntervalAgentReportRequest, runtime: Util.RuntimeOptions): ListIntervalAgentReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentId)) {
    query['AgentId'] = request.agentId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIntervalAgentReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIntervalAgentReport(request: ListIntervalAgentReportRequest): ListIntervalAgentReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntervalAgentReportWithOptions(request, runtime);
}

model ListIntervalInstanceReportRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  startTime?: long(name='StartTime'),
}

model ListIntervalInstanceReportResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      inbound?: {
        abandonedRate?: float(name='AbandonedRate'),
        averageAbandonTime?: float(name='AverageAbandonTime'),
        averageAbandonedInIVRTime?: float(name='AverageAbandonedInIVRTime'),
        averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
        averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWaitTime?: float(name='AverageWaitTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsAbandoned?: long(name='CallsAbandoned'),
        callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
        callsAbandonedInVoiceNavigator?: long(name='CallsAbandonedInVoiceNavigator'),
        callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
        callsBlindTransferred?: long(name='CallsBlindTransferred'),
        callsForwardToOutsideNumber?: long(name='CallsForwardToOutsideNumber'),
        callsHandled?: long(name='CallsHandled'),
        callsHold?: long(name='CallsHold'),
        callsIVRException?: long(name='CallsIVRException'),
        callsOffered?: long(name='CallsOffered'),
        callsQueued?: long(name='CallsQueued'),
        callsQueuingFailed?: long(name='CallsQueuingFailed'),
        callsQueuingOverflow?: long(name='CallsQueuingOverflow'),
        callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
        callsRinged?: long(name='CallsRinged'),
        callsVoicemail?: long(name='CallsVoicemail'),
        handleRate?: float(name='HandleRate'),
        maxAbandonTime?: long(name='MaxAbandonTime'),
        maxAbandonedInIVRTime?: long(name='MaxAbandonedInIVRTime'),
        maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
        maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWaitTime?: long(name='MaxWaitTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        serviceLevel20?: float(name='ServiceLevel20'),
        totalAbandonTime?: long(name='TotalAbandonTime'),
        totalAbandonedInIVRTime?: long(name='TotalAbandonedInIVRTime'),
        totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
        totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWaitTime?: long(name='TotalWaitTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Inbound'),
      outbound?: {
        answerRate?: float(name='AnswerRate'),
        averageDialingTime?: float(name='AverageDialingTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsAnswered?: long(name='CallsAnswered'),
        callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
        callsBlindTransferred?: long(name='CallsBlindTransferred'),
        callsDialed?: long(name='CallsDialed'),
        callsHold?: long(name='CallsHold'),
        callsRinged?: long(name='CallsRinged'),
        maxDialingTime?: long(name='MaxDialingTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        totalDialingTime?: long(name='TotalDialingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageReadyTime?: float(name='AverageReadyTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        maxBreakTime?: long(name='MaxBreakTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxReadyTime?: long(name='MaxReadyTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        occupancyRate?: float(name='OccupancyRate'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        totalBreakTime?: long(name='TotalBreakTime'),
        totalCalls?: long(name='TotalCalls'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListIntervalInstanceReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntervalInstanceReportResponseBody(name='body'),
}

async function listIntervalInstanceReportWithOptions(request: ListIntervalInstanceReportRequest, runtime: Util.RuntimeOptions): ListIntervalInstanceReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIntervalInstanceReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIntervalInstanceReport(request: ListIntervalInstanceReportRequest): ListIntervalInstanceReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntervalInstanceReportWithOptions(request, runtime);
}

model ListIntervalSkillGroupReportRequest {
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
  skillGroupId?: string(name='SkillGroupId'),
  startTime?: long(name='StartTime'),
}

model ListIntervalSkillGroupReportResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      inbound?: {
        abandonRate?: float(name='AbandonRate'),
        averageAbandonTime?: float(name='AverageAbandonTime'),
        averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
        averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWaitTime?: float(name='AverageWaitTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsAbandoned?: long(name='CallsAbandoned'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        callsHandled?: long(name='CallsHandled'),
        callsHold?: long(name='CallsHold'),
        callsOffered?: long(name='CallsOffered'),
        callsOverflow?: long(name='CallsOverflow'),
        callsQueued?: long(name='CallsQueued'),
        callsRinged?: long(name='CallsRinged'),
        callsTimeout?: long(name='CallsTimeout'),
        handleRate?: float(name='HandleRate'),
        maxAbandonTime?: long(name='MaxAbandonTime'),
        maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
        maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWaitTime?: long(name='MaxWaitTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        serviceLevel20?: float(name='ServiceLevel20'),
        totalAbandonTime?: long(name='TotalAbandonTime'),
        totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
        totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWaitTime?: long(name='TotalWaitTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Inbound'),
      outbound?: {
        answerRate?: float(name='AnswerRate'),
        averageDialingTime?: float(name='AverageDialingTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageRingTime?: float(name='AverageRingTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsAnswered?: long(name='CallsAnswered'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        callsDialed?: long(name='CallsDialed'),
        callsHold?: long(name='CallsHold'),
        callsRinged?: long(name='CallsRinged'),
        maxDialingTime?: long(name='MaxDialingTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxRingTime?: long(name='MaxRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        totalDialingTime?: long(name='TotalDialingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageReadyTime?: float(name='AverageReadyTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        maxBreakTime?: long(name='MaxBreakTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxReadyTime?: long(name='MaxReadyTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        occupancyRate?: float(name='OccupancyRate'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        totalBreakTime?: long(name='TotalBreakTime'),
        totalCalls?: long(name='TotalCalls'),
        totalHoldTime?: long(name='TotalHoldTime'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListIntervalSkillGroupReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntervalSkillGroupReportResponseBody(name='body'),
}

async function listIntervalSkillGroupReportWithOptions(request: ListIntervalSkillGroupReportRequest, runtime: Util.RuntimeOptions): ListIntervalSkillGroupReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.interval)) {
    query['Interval'] = request.interval;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIntervalSkillGroupReport',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIntervalSkillGroupReport(request: ListIntervalSkillGroupReportRequest): ListIntervalSkillGroupReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntervalSkillGroupReportWithOptions(request, runtime);
}

model ListIvrTrackingDetailsRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListIvrTrackingDetailsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        callee?: string(name='Callee'),
        caller?: string(name='Caller'),
        channelId?: string(name='ChannelId'),
        channelVariables?: string(name='ChannelVariables'),
        contactId?: string(name='ContactId'),
        enterTime?: long(name='EnterTime'),
        flowId?: string(name='FlowId'),
        flowName?: string(name='FlowName'),
        instance?: string(name='Instance'),
        leaveTime?: long(name='LeaveTime'),
        nodeExitCode?: string(name='NodeExitCode'),
        nodeId?: string(name='NodeId'),
        nodeName?: string(name='NodeName'),
        nodeProperties?: map[string]any(name='NodeProperties'),
        nodeType?: string(name='NodeType'),
        nodeVariables?: map[string]any(name='NodeVariables'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListIvrTrackingDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIvrTrackingDetailsResponseBody(name='body'),
}

async function listIvrTrackingDetailsWithOptions(request: ListIvrTrackingDetailsRequest, runtime: Util.RuntimeOptions): ListIvrTrackingDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListIvrTrackingDetails',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listIvrTrackingDetails(request: ListIvrTrackingDetailsRequest): ListIvrTrackingDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIvrTrackingDetailsWithOptions(request, runtime);
}

model ListMonoRecordingsRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model ListMonoRecordingsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      agentId?: string(name='AgentId'),
      agentName?: string(name='AgentName'),
      contactId?: string(name='ContactId'),
      duration?: string(name='Duration'),
      fileName?: string(name='FileName'),
      fileUrl?: string(name='FileUrl'),
      ramId?: string(name='RamId'),
      skillGroupId?: string(name='SkillGroupId'),
      startTime?: string(name='StartTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListMonoRecordingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMonoRecordingsResponseBody(name='body'),
}

async function listMonoRecordingsWithOptions(request: ListMonoRecordingsRequest, runtime: Util.RuntimeOptions): ListMonoRecordingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMonoRecordings',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMonoRecordings(request: ListMonoRecordingsRequest): ListMonoRecordingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMonoRecordingsWithOptions(request, runtime);
}

model ListMultiChannelRecordingsRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model ListMultiChannelRecordingsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      agentChannelId?: string(name='AgentChannelId'),
      agentId?: string(name='AgentId'),
      agentName?: string(name='AgentName'),
      contactId?: string(name='ContactId'),
      duration?: string(name='Duration'),
      fileName?: string(name='FileName'),
      fileUrl?: string(name='FileUrl'),
      ramId?: string(name='RamId'),
      skillGroupId?: string(name='SkillGroupId'),
      startTime?: long(name='StartTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListMultiChannelRecordingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMultiChannelRecordingsResponseBody(name='body'),
}

async function listMultiChannelRecordingsWithOptions(request: ListMultiChannelRecordingsRequest, runtime: Util.RuntimeOptions): ListMultiChannelRecordingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactId)) {
    query['ContactId'] = request.contactId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMultiChannelRecordings',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listMultiChannelRecordings(request: ListMultiChannelRecordingsRequest): ListMultiChannelRecordingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMultiChannelRecordingsWithOptions(request, runtime);
}

model ListOutboundNumbersOfUserRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
  userId?: string(name='UserId'),
}

model ListOutboundNumbersOfUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListOutboundNumbersOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundNumbersOfUserResponseBody(name='body'),
}

async function listOutboundNumbersOfUserWithOptions(request: ListOutboundNumbersOfUserRequest, runtime: Util.RuntimeOptions): ListOutboundNumbersOfUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.skillGroupIdList)) {
    query['SkillGroupIdList'] = request.skillGroupIdList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOutboundNumbersOfUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOutboundNumbersOfUser(request: ListOutboundNumbersOfUserRequest): ListOutboundNumbersOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundNumbersOfUserWithOptions(request, runtime);
}

model ListPersonalNumbersOfUserRequest {
  instanceId?: string(name='InstanceId'),
  isMember?: boolean(name='IsMember'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
  userId?: string(name='UserId'),
}

model ListPersonalNumbersOfUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        active?: boolean(name='Active'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListPersonalNumbersOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonalNumbersOfUserResponseBody(name='body'),
}

async function listPersonalNumbersOfUserWithOptions(request: ListPersonalNumbersOfUserRequest, runtime: Util.RuntimeOptions): ListPersonalNumbersOfUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isMember)) {
    query['IsMember'] = request.isMember;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPersonalNumbersOfUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPersonalNumbersOfUser(request: ListPersonalNumbersOfUserRequest): ListPersonalNumbersOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonalNumbersOfUserWithOptions(request, runtime);
}

model ListPhoneNumbersRequest {
  active?: boolean(name='Active'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
  usage?: string(name='Usage'),
}

model ListPhoneNumbersResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        active?: boolean(name='Active'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId'),
        contactFlowName?: string(name='ContactFlowName'),
        createTime?: string(name='CreateTime'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        provider?: string(name='Provider'),
        province?: string(name='Province'),
        skillGroups?: [ 
          {
            displayName?: string(name='DisplayName'),
            instanceId?: string(name='InstanceId'),
            name?: string(name='Name'),
            skillGroupId?: string(name='SkillGroupId'),
          }
        ](name='SkillGroups'),
        tags?: string(name='Tags'),
        usage?: string(name='Usage'),
        userId?: string(name='UserId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
}

model ListPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhoneNumbersResponseBody(name='body'),
}

async function listPhoneNumbersWithOptions(request: ListPhoneNumbersRequest, runtime: Util.RuntimeOptions): ListPhoneNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.active)) {
    query['Active'] = request.active;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  if (!Util.isUnset(request.usage)) {
    query['Usage'] = request.usage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPhoneNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPhoneNumbers(request: ListPhoneNumbersRequest): ListPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhoneNumbersWithOptions(request, runtime);
}

model ListPhoneNumbersOfSkillGroupRequest {
  active?: boolean(name='Active'),
  instanceId?: string(name='InstanceId'),
  isMember?: boolean(name='IsMember'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ListPhoneNumbersOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        active?: boolean(name='Active'),
        city?: string(name='City'),
        contactFlowId?: string(name='ContactFlowId'),
        instanceId?: string(name='InstanceId'),
        number?: string(name='Number'),
        province?: string(name='Province'),
        usage?: string(name='Usage'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListPhoneNumbersOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhoneNumbersOfSkillGroupResponseBody(name='body'),
}

async function listPhoneNumbersOfSkillGroupWithOptions(request: ListPhoneNumbersOfSkillGroupRequest, runtime: Util.RuntimeOptions): ListPhoneNumbersOfSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.active)) {
    query['Active'] = request.active;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isMember)) {
    query['IsMember'] = request.isMember;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPhoneNumbersOfSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPhoneNumbersOfSkillGroup(request: ListPhoneNumbersOfSkillGroupRequest): ListPhoneNumbersOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhoneNumbersOfSkillGroupWithOptions(request, runtime);
}

model ListPrivilegesOfUserRequest {
  instanceId?: string(name='InstanceId'),
}

model ListPrivilegesOfUserResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      scope?: string(name='Scope'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListPrivilegesOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrivilegesOfUserResponseBody(name='body'),
}

async function listPrivilegesOfUserWithOptions(request: ListPrivilegesOfUserRequest, runtime: Util.RuntimeOptions): ListPrivilegesOfUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPrivilegesOfUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPrivilegesOfUser(request: ListPrivilegesOfUserRequest): ListPrivilegesOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivilegesOfUserWithOptions(request, runtime);
}

model ListRamUsersRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListRamUsersResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        aliyunUid?: long(name='AliyunUid'),
        displayName?: string(name='DisplayName'),
        email?: string(name='Email'),
        loginName?: string(name='LoginName'),
        mobile?: string(name='Mobile'),
        primary?: boolean(name='Primary'),
        ramId?: string(name='RamId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ListRamUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListRamUsersResponseBody(name='body'),
}

async function listRamUsersWithOptions(request: ListRamUsersRequest, runtime: Util.RuntimeOptions): ListRamUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRamUsers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRamUsers(request: ListRamUsersRequest): ListRamUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRamUsersWithOptions(request, runtime);
}

model ListRealtimeAgentStatesRequest {
  agentIdList?: string(name='AgentIdList'),
  agentName?: string(name='AgentName'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupId?: string(name='SkillGroupId'),
  stateList?: string(name='StateList'),
}

model ListRealtimeAgentStatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId'),
        agentName?: string(name='AgentName'),
        counterParty?: string(name='CounterParty'),
        extension?: string(name='Extension'),
        instanceId?: string(name='InstanceId'),
        skillGroupIdList?: [ string ](name='SkillGroupIdList'),
        skillGroupNameList?: [ string ](name='SkillGroupNameList'),
        state?: string(name='State'),
        stateCode?: string(name='StateCode'),
        stateTime?: long(name='StateTime'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListRealtimeAgentStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeAgentStatesResponseBody(name='body'),
}

async function listRealtimeAgentStatesWithOptions(request: ListRealtimeAgentStatesRequest, runtime: Util.RuntimeOptions): ListRealtimeAgentStatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentName)) {
    query['AgentName'] = request.agentName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.agentIdList)) {
    body['AgentIdList'] = request.agentIdList;
  }
  if (!Util.isUnset(request.stateList)) {
    body['StateList'] = request.stateList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRealtimeAgentStates',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRealtimeAgentStates(request: ListRealtimeAgentStatesRequest): ListRealtimeAgentStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeAgentStatesWithOptions(request, runtime);
}

model ListRealtimeSkillGroupStatesRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model ListRealtimeSkillGroupStatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        breakingAgents?: long(name='BreakingAgents'),
        instanceId?: string(name='InstanceId'),
        loggedInAgents?: long(name='LoggedInAgents'),
        longestWaitingTime?: long(name='LongestWaitingTime'),
        readyAgents?: long(name='ReadyAgents'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        talkingAgents?: long(name='TalkingAgents'),
        waitingCalls?: long(name='WaitingCalls'),
        workingAgents?: long(name='WorkingAgents'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListRealtimeSkillGroupStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeSkillGroupStatesResponseBody(name='body'),
}

async function listRealtimeSkillGroupStatesWithOptions(request: ListRealtimeSkillGroupStatesRequest, runtime: Util.RuntimeOptions): ListRealtimeSkillGroupStatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.skillGroupIdList)) {
    body['SkillGroupIdList'] = request.skillGroupIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRealtimeSkillGroupStates',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRealtimeSkillGroupStates(request: ListRealtimeSkillGroupStatesRequest): ListRealtimeSkillGroupStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeSkillGroupStatesWithOptions(request, runtime);
}

model ListRecentCallDetailRecordsRequest {
  criteria?: string(name='Criteria'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
}

model ListRecentCallDetailRecordsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        agentIds?: string(name='AgentIds'),
        callDuration?: string(name='CallDuration'),
        calledNumber?: string(name='CalledNumber'),
        callingNumber?: string(name='CallingNumber'),
        contactDisposition?: string(name='ContactDisposition'),
        contactId?: string(name='ContactId'),
        contactType?: string(name='ContactType'),
        duration?: long(name='Duration'),
        instanceId?: string(name='InstanceId'),
        skillGroupIds?: string(name='SkillGroupIds'),
        startTime?: long(name='StartTime'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListRecentCallDetailRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecentCallDetailRecordsResponseBody(name='body'),
}

async function listRecentCallDetailRecordsWithOptions(request: ListRecentCallDetailRecordsRequest, runtime: Util.RuntimeOptions): ListRecentCallDetailRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.criteria)) {
    query['Criteria'] = request.criteria;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRecentCallDetailRecords',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRecentCallDetailRecords(request: ListRecentCallDetailRecordsRequest): ListRecentCallDetailRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecentCallDetailRecordsWithOptions(request, runtime);
}

model ListRolesRequest {
  instanceId?: string(name='InstanceId'),
}

model ListRolesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      name?: string(name='Name'),
      roleId?: string(name='RoleId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRolesWithOptions(request: ListRolesRequest, runtime: Util.RuntimeOptions): ListRolesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRoles',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRolesWithOptions(request, runtime);
}

model ListSipCallRecordsRequest {
  contactIdList?: string(name='ContactIdList'),
  instanceId?: string(name='InstanceId'),
}

model ListSipCallRecordsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      callId?: string(name='CallId'),
      callee?: string(name='Callee'),
      calleeClusterId?: string(name='CalleeClusterId'),
      caller?: string(name='Caller'),
      callerClusterId?: string(name='CallerClusterId'),
      contactId?: string(name='ContactId'),
      earlyMediaText?: string(name='EarlyMediaText'),
      earlyMediaUrl?: string(name='EarlyMediaUrl'),
      establishedTime?: long(name='EstablishedTime'),
      instanceId?: string(name='InstanceId'),
      inviteTime?: long(name='InviteTime'),
      lastResponseCode?: int32(name='LastResponseCode'),
      lastResponseText?: string(name='LastResponseText'),
      releaseReasonCode?: int32(name='ReleaseReasonCode'),
      releasedTime?: long(name='ReleasedTime'),
      ringTime?: long(name='RingTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListSipCallRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSipCallRecordsResponseBody(name='body'),
}

async function listSipCallRecordsWithOptions(request: ListSipCallRecordsRequest, runtime: Util.RuntimeOptions): ListSipCallRecordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactIdList)) {
    query['ContactIdList'] = request.contactIdList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSipCallRecords',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSipCallRecords(request: ListSipCallRecordsRequest): ListSipCallRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSipCallRecordsWithOptions(request, runtime);
}

model ListSipTracesRequest {
  callId?: string(name='CallId'),
  instanceId?: string(name='InstanceId'),
}

model ListSipTracesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      callId?: string(name='CallId'),
      contactId?: string(name='ContactId'),
      destinationNodeIp?: string(name='DestinationNodeIp'),
      firstLine?: string(name='FirstLine'),
      payload?: string(name='Payload'),
      sourceNodeIp?: string(name='SourceNodeIp'),
      timestamp?: long(name='Timestamp'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListSipTracesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSipTracesResponseBody(name='body'),
}

async function listSipTracesWithOptions(request: ListSipTracesRequest, runtime: Util.RuntimeOptions): ListSipTracesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSipTraces',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSipTraces(request: ListSipTracesRequest): ListSipTracesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSipTracesWithOptions(request, runtime);
}

model ListSkillGroupStatesRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIds?: string(name='SkillGroupIds'),
}

model ListSkillGroupStatesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        breakingAgents?: long(name='BreakingAgents'),
        instanceId?: string(name='InstanceId'),
        loggedInAgents?: long(name='LoggedInAgents'),
        longestCall?: long(name='LongestCall'),
        readyAgents?: long(name='ReadyAgents'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        talkingAgents?: long(name='TalkingAgents'),
        waitingCalls?: long(name='WaitingCalls'),
        workingAgents?: long(name='WorkingAgents'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupStatesResponseBody(name='body'),
}

async function listSkillGroupStatesWithOptions(request: ListSkillGroupStatesRequest, runtime: Util.RuntimeOptions): ListSkillGroupStatesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSkillGroupStates',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSkillGroupStates(request: ListSkillGroupStatesRequest): ListSkillGroupStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupStatesWithOptions(request, runtime);
}

model ListSkillGroupSummaryReportsSinceMidnightRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroups?: string(name='SkillGroups'),
}

model ListSkillGroupSummaryReportsSinceMidnightResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pagedSkillGroupSummaryReport?: {
    list?: [ 
      {
        inbound?: {
          abandonedInQueueOfQueueCount?: long(name='AbandonedInQueueOfQueueCount'),
          answeredByAgentOfQueueCount?: long(name='AnsweredByAgentOfQueueCount'),
          answeredByAgentOfQueueMaxWaitTimeDuration?: long(name='AnsweredByAgentOfQueueMaxWaitTimeDuration'),
          answeredByAgentOfQueueWaitTimeDuration?: long(name='AnsweredByAgentOfQueueWaitTimeDuration'),
          averageRingTime?: long(name='AverageRingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsHandled?: long(name='CallsHandled'),
          callsOffered?: long(name='CallsOffered'),
          callsServiceLevel20?: long(name='CallsServiceLevel20'),
          callsServiceLevel30?: long(name='CallsServiceLevel30'),
          giveUpByAgentOfQueueCount?: long(name='GiveUpByAgentOfQueueCount'),
          handleRate?: float(name='HandleRate'),
          inComingQueueOfQueueCount?: long(name='InComingQueueOfQueueCount'),
          maxRingTime?: long(name='MaxRingTime'),
          maxTalkTime?: string(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          overFlowInQueueOfQueueCount?: long(name='OverFlowInQueueOfQueueCount'),
          queueMaxWaitTimeDuration?: long(name='QueueMaxWaitTimeDuration'),
          queueWaitTimeDuration?: long(name='QueueWaitTimeDuration'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          serviceLevel20?: float(name='ServiceLevel20'),
          totalRingTime?: long(name='TotalRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Inbound'),
        instanceId?: string(name='InstanceId'),
        outbound?: {
          answerRate?: float(name='AnswerRate'),
          averageDialingTime?: long(name='AverageDialingTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          callsAnswered?: long(name='CallsAnswered'),
          callsDialed?: long(name='CallsDialed'),
          maxDialingTime?: long(name='MaxDialingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Outbound'),
        overall?: {
          averageReadyTime?: long(name='AverageReadyTime'),
          averageTalkTime?: long(name='AverageTalkTime'),
          averageWorkTime?: long(name='AverageWorkTime'),
          maxReadyTime?: long(name='MaxReadyTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          occupancyRate?: float(name='OccupancyRate'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          totalBreakTime?: long(name='TotalBreakTime'),
          totalCalls?: long(name='TotalCalls'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalWorkTime?: long(name='TotalWorkTime'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PagedSkillGroupSummaryReport'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupSummaryReportsSinceMidnightResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupSummaryReportsSinceMidnightResponseBody(name='body'),
}

async function listSkillGroupSummaryReportsSinceMidnightWithOptions(request: ListSkillGroupSummaryReportsSinceMidnightRequest, runtime: Util.RuntimeOptions): ListSkillGroupSummaryReportsSinceMidnightResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSkillGroupSummaryReportsSinceMidnight',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSkillGroupSummaryReportsSinceMidnight(request: ListSkillGroupSummaryReportsSinceMidnightRequest): ListSkillGroupSummaryReportsSinceMidnightResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupSummaryReportsSinceMidnightWithOptions(request, runtime);
}

model ListSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListSkillGroupsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        description?: string(name='Description'),
        displayName?: string(name='DisplayName'),
        instanceId?: string(name='InstanceId'),
        phoneNumberCount?: int32(name='PhoneNumberCount'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        userCount?: int32(name='UserCount'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupsResponseBody(name='body'),
}

async function listSkillGroupsWithOptions(request: ListSkillGroupsRequest, runtime: Util.RuntimeOptions): ListSkillGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSkillGroups',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSkillGroups(request: ListSkillGroupsRequest): ListSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupsWithOptions(request, runtime);
}

model ListSkillLevelsOfUserRequest {
  instanceId?: string(name='InstanceId'),
  isMember?: boolean(name='IsMember'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
  userId?: string(name='UserId'),
}

model ListSkillLevelsOfUserResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        skillLevel?: string(name='SkillLevel'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListSkillLevelsOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillLevelsOfUserResponseBody(name='body'),
}

async function listSkillLevelsOfUserWithOptions(request: ListSkillLevelsOfUserRequest, runtime: Util.RuntimeOptions): ListSkillLevelsOfUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isMember)) {
    query['IsMember'] = request.isMember;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSkillLevelsOfUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSkillLevelsOfUser(request: ListSkillLevelsOfUserRequest): ListSkillLevelsOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillLevelsOfUserWithOptions(request, runtime);
}

model ListUnassignedNumbersRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListUnassignedNumbersResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        active?: boolean(name='Active'),
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
        usage?: boolean(name='Usage'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListUnassignedNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUnassignedNumbersResponseBody(name='body'),
}

async function listUnassignedNumbersWithOptions(request: ListUnassignedNumbersRequest, runtime: Util.RuntimeOptions): ListUnassignedNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUnassignedNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUnassignedNumbers(request: ListUnassignedNumbersRequest): ListUnassignedNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUnassignedNumbersWithOptions(request, runtime);
}

model ListUserLevelsOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  isMember?: boolean(name='IsMember'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ListUserLevelsOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        displayName?: string(name='DisplayName'),
        loginName?: string(name='LoginName'),
        roleId?: string(name='RoleId'),
        roleName?: string(name='RoleName'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        skillLevel?: int32(name='SkillLevel'),
        userId?: string(name='UserId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListUserLevelsOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserLevelsOfSkillGroupResponseBody(name='body'),
}

async function listUserLevelsOfSkillGroupWithOptions(request: ListUserLevelsOfSkillGroupRequest, runtime: Util.RuntimeOptions): ListUserLevelsOfSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.isMember)) {
    query['IsMember'] = request.isMember;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserLevelsOfSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUserLevelsOfSkillGroup(request: ListUserLevelsOfSkillGroupRequest): ListUserLevelsOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserLevelsOfSkillGroupWithOptions(request, runtime);
}

model ListUsersRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListUsersResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        deviceExt?: string(name='DeviceExt'),
        deviceId?: string(name='DeviceId'),
        deviceState?: string(name='DeviceState'),
        displayId?: string(name='DisplayId'),
        displayName?: string(name='DisplayName'),
        email?: string(name='Email'),
        extension?: string(name='Extension'),
        loginName?: string(name='LoginName'),
        mobile?: string(name='Mobile'),
        personalOutboundNumberList?: [ 
          {
            active?: boolean(name='Active'),
            city?: string(name='City'),
            number?: string(name='Number'),
            province?: string(name='Province'),
            usage?: string(name='Usage'),
          }
        ](name='PersonalOutboundNumberList'),
        primaryAccount?: boolean(name='PrimaryAccount'),
        ramId?: long(name='RamId'),
        roleId?: string(name='RoleId'),
        roleName?: string(name='RoleName'),
        skillLevelList?: [ 
          {
            skillGroupId?: string(name='SkillGroupId'),
            skillGroupName?: string(name='SkillGroupName'),
            skillLevel?: int32(name='SkillLevel'),
          }
        ](name='SkillLevelList'),
        userId?: string(name='UserId'),
        workMode?: string(name='WorkMode'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchPattern)) {
    query['SearchPattern'] = request.searchPattern;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model MakeCallRequest {
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  maskedCallee?: string(name='MaskedCallee'),
  tags?: string(name='Tags'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  userId?: string(name='UserId'),
}

model MakeCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model MakeCallResponse = {
  headers: map[string]string(name='headers'),
  body: MakeCallResponseBody(name='body'),
}

async function makeCallWithOptions(request: MakeCallRequest, runtime: Util.RuntimeOptions): MakeCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callee)) {
    query['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.caller)) {
    query['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maskedCallee)) {
    query['MaskedCallee'] = request.maskedCallee;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MakeCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function makeCall(request: MakeCallRequest): MakeCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return makeCallWithOptions(request, runtime);
}

model ModifyCustomCallTaggingRequest {
  callTagNameList?: string(name='CallTagNameList'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
}

model ModifyCustomCallTaggingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ModifyCustomCallTaggingResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCustomCallTaggingResponseBody(name='body'),
}

async function modifyCustomCallTaggingWithOptions(request: ModifyCustomCallTaggingRequest, runtime: Util.RuntimeOptions): ModifyCustomCallTaggingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callTagNameList)) {
    query['CallTagNameList'] = request.callTagNameList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCustomCallTagging',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCustomCallTagging(request: ModifyCustomCallTaggingRequest): ModifyCustomCallTaggingResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCustomCallTaggingWithOptions(request, runtime);
}

model ModifyInstanceRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstance',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceWithOptions(request, runtime);
}

model ModifyPhoneNumberRequest {
  contactFlowId?: string(name='ContactFlowId'),
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  usage?: string(name='Usage'),
}

model ModifyPhoneNumberResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhoneNumberResponseBody(name='body'),
}

async function modifyPhoneNumberWithOptions(request: ModifyPhoneNumberRequest, runtime: Util.RuntimeOptions): ModifyPhoneNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contactFlowId)) {
    query['ContactFlowId'] = request.contactFlowId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  if (!Util.isUnset(request.usage)) {
    query['Usage'] = request.usage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPhoneNumber',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPhoneNumber(request: ModifyPhoneNumberRequest): ModifyPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhoneNumberWithOptions(request, runtime);
}

model ModifySkillGroupRequest {
  description?: string(name='Description'),
  displayName?: string(name='DisplayName'),
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
}

model ModifySkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifySkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySkillGroupResponseBody(name='body'),
}

async function modifySkillGroupWithOptions(request: ModifySkillGroupRequest, runtime: Util.RuntimeOptions): ModifySkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.displayName)) {
    query['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySkillGroup(request: ModifySkillGroupRequest): ModifySkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySkillGroupWithOptions(request, runtime);
}

model ModifySkillLevelsOfUserRequest {
  instanceId?: string(name='InstanceId'),
  skillLevelList?: string(name='SkillLevelList'),
  userId?: string(name='UserId'),
}

model ModifySkillLevelsOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ModifySkillLevelsOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySkillLevelsOfUserResponseBody(name='body'),
}

async function modifySkillLevelsOfUserWithOptions(request: ModifySkillLevelsOfUserRequest, runtime: Util.RuntimeOptions): ModifySkillLevelsOfUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillLevelList)) {
    query['SkillLevelList'] = request.skillLevelList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySkillLevelsOfUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySkillLevelsOfUser(request: ModifySkillLevelsOfUserRequest): ModifySkillLevelsOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySkillLevelsOfUserWithOptions(request, runtime);
}

model ModifyUserRequest {
  displayId?: string(name='DisplayId'),
  instanceId?: string(name='InstanceId'),
  mobile?: string(name='Mobile'),
  roleId?: string(name='RoleId'),
  userId?: string(name='UserId'),
  workMode?: string(name='WorkMode'),
}

model ModifyUserResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ModifyUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserResponseBody(name='body'),
}

async function modifyUserWithOptions(request: ModifyUserRequest, runtime: Util.RuntimeOptions): ModifyUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.displayId)) {
    query['DisplayId'] = request.displayId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mobile)) {
    query['Mobile'] = request.mobile;
  }
  if (!Util.isUnset(request.roleId)) {
    query['RoleId'] = request.roleId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  if (!Util.isUnset(request.workMode)) {
    query['WorkMode'] = request.workMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserWithOptions(request, runtime);
}

model ModifyUserLevelsOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  userLevelList?: string(name='UserLevelList'),
}

model ModifyUserLevelsOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyUserLevelsOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserLevelsOfSkillGroupResponseBody(name='body'),
}

async function modifyUserLevelsOfSkillGroupWithOptions(request: ModifyUserLevelsOfSkillGroupRequest, runtime: Util.RuntimeOptions): ModifyUserLevelsOfSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.userLevelList)) {
    query['UserLevelList'] = request.userLevelList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserLevelsOfSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUserLevelsOfSkillGroup(request: ModifyUserLevelsOfSkillGroupRequest): ModifyUserLevelsOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserLevelsOfSkillGroupWithOptions(request, runtime);
}

model MonitorCallRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  monitoredUserId?: string(name='MonitoredUserId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  userId?: string(name='UserId'),
}

model MonitorCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model MonitorCallResponse = {
  headers: map[string]string(name='headers'),
  body: MonitorCallResponseBody(name='body'),
}

async function monitorCallWithOptions(request: MonitorCallRequest, runtime: Util.RuntimeOptions): MonitorCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.monitoredUserId)) {
    query['MonitoredUserId'] = request.monitoredUserId;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MonitorCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function monitorCall(request: MonitorCallRequest): MonitorCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return monitorCallWithOptions(request, runtime);
}

model MuteCallRequest {
  channelId?: string(name='ChannelId'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model MuteCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model MuteCallResponse = {
  headers: map[string]string(name='headers'),
  body: MuteCallResponseBody(name='body'),
}

async function muteCallWithOptions(request: MuteCallRequest, runtime: Util.RuntimeOptions): MuteCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MuteCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function muteCall(request: MuteCallRequest): MuteCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return muteCallWithOptions(request, runtime);
}

model PauseCampaignRequest {
  campaignId?: string(name='CampaignId'),
  instanceId?: string(name='InstanceId'),
}

model PauseCampaignResponseBody = {
  code?: string(name='Code', description='code'),
  httpStatusCode?: string(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model PauseCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: PauseCampaignResponseBody(name='body'),
}

async function pauseCampaignWithOptions(request: PauseCampaignRequest, runtime: Util.RuntimeOptions): PauseCampaignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PauseCampaign',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pauseCampaign(request: PauseCampaignRequest): PauseCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  return pauseCampaignWithOptions(request, runtime);
}

model PickOutboundNumbersRequest {
  calledNumber?: string(name='CalledNumber'),
  count?: int32(name='Count'),
  instanceId?: string(name='InstanceId'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model PickOutboundNumbersResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      callee?: {
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }(name='Callee'),
      caller?: {
        city?: string(name='City'),
        number?: string(name='Number'),
        province?: string(name='Province'),
      }(name='Caller'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model PickOutboundNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: PickOutboundNumbersResponseBody(name='body'),
}

async function pickOutboundNumbersWithOptions(request: PickOutboundNumbersRequest, runtime: Util.RuntimeOptions): PickOutboundNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.calledNumber)) {
    query['CalledNumber'] = request.calledNumber;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupIdList)) {
    query['SkillGroupIdList'] = request.skillGroupIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PickOutboundNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pickOutboundNumbers(request: PickOutboundNumbersRequest): PickOutboundNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return pickOutboundNumbersWithOptions(request, runtime);
}

model PollUserStatusRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model PollUserStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          channelVariables?: string(name='ChannelVariables'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model PollUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: PollUserStatusResponseBody(name='body'),
}

async function pollUserStatusWithOptions(request: PollUserStatusRequest, runtime: Util.RuntimeOptions): PollUserStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PollUserStatus',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pollUserStatus(request: PollUserStatusRequest): PollUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return pollUserStatusWithOptions(request, runtime);
}

model ReadyForServiceRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  outboundScenario?: boolean(name='OutboundScenario'),
  userId?: string(name='UserId'),
}

model ReadyForServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakCode?: string(name='BreakCode'),
    deviceId?: string(name='DeviceId'),
    extension?: string(name='Extension'),
    instanceId?: string(name='InstanceId'),
    jobId?: string(name='JobId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId'),
    userState?: string(name='UserState'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ReadyForServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ReadyForServiceResponseBody(name='body'),
}

async function readyForServiceWithOptions(request: ReadyForServiceRequest, runtime: Util.RuntimeOptions): ReadyForServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.outboundScenario)) {
    query['OutboundScenario'] = request.outboundScenario;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReadyForService',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function readyForService(request: ReadyForServiceRequest): ReadyForServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return readyForServiceWithOptions(request, runtime);
}

model RegisterDeviceRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  password?: string(name='Password'),
  userId?: string(name='UserId'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDevice',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model RegisterDevicesRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  password?: string(name='Password'),
  userIdListJson?: string(name='UserIdListJson'),
}

model RegisterDevicesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model RegisterDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDevicesResponseBody(name='body'),
}

async function registerDevicesWithOptions(request: RegisterDevicesRequest, runtime: Util.RuntimeOptions): RegisterDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.userIdListJson)) {
    query['UserIdListJson'] = request.userIdListJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDevices',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerDevices(request: RegisterDevicesRequest): RegisterDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDevicesWithOptions(request, runtime);
}

model ReleaseCallRequest {
  channelId?: string(name='ChannelId'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model ReleaseCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    contextId?: long(name='ContextId'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ReleaseCallResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseCallResponseBody(name='body'),
}

async function releaseCallWithOptions(request: ReleaseCallRequest, runtime: Util.RuntimeOptions): ReleaseCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseCall(request: ReleaseCallRequest): ReleaseCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseCallWithOptions(request, runtime);
}

model RemoveDoNotCallNumbersRequest {
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
}

model RemoveDoNotCallNumbersResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model RemoveDoNotCallNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveDoNotCallNumbersResponseBody(name='body'),
}

async function removeDoNotCallNumbersWithOptions(request: RemoveDoNotCallNumbersRequest, runtime: Util.RuntimeOptions): RemoveDoNotCallNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveDoNotCallNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeDoNotCallNumbers(request: RemoveDoNotCallNumbersRequest): RemoveDoNotCallNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDoNotCallNumbersWithOptions(request, runtime);
}

model RemovePersonalNumbersFromUserRequest {
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
  userId?: string(name='UserId'),
}

model RemovePersonalNumbersFromUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemovePersonalNumbersFromUserResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePersonalNumbersFromUserResponseBody(name='body'),
}

async function removePersonalNumbersFromUserWithOptions(request: RemovePersonalNumbersFromUserRequest, runtime: Util.RuntimeOptions): RemovePersonalNumbersFromUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemovePersonalNumbersFromUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removePersonalNumbersFromUser(request: RemovePersonalNumbersFromUserRequest): RemovePersonalNumbersFromUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePersonalNumbersFromUserWithOptions(request, runtime);
}

model RemovePhoneNumberFromSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model RemovePhoneNumberFromSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemovePhoneNumberFromSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePhoneNumberFromSkillGroupsResponseBody(name='body'),
}

async function removePhoneNumberFromSkillGroupsWithOptions(request: RemovePhoneNumberFromSkillGroupsRequest, runtime: Util.RuntimeOptions): RemovePhoneNumberFromSkillGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.number)) {
    query['Number'] = request.number;
  }
  if (!Util.isUnset(request.skillGroupIdList)) {
    query['SkillGroupIdList'] = request.skillGroupIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemovePhoneNumberFromSkillGroups',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removePhoneNumberFromSkillGroups(request: RemovePhoneNumberFromSkillGroupsRequest): RemovePhoneNumberFromSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePhoneNumberFromSkillGroupsWithOptions(request, runtime);
}

model RemovePhoneNumbersRequest {
  force?: boolean(name='Force'),
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
}

model RemovePhoneNumbersResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model RemovePhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePhoneNumbersResponseBody(name='body'),
}

async function removePhoneNumbersWithOptions(request: RemovePhoneNumbersRequest, runtime: Util.RuntimeOptions): RemovePhoneNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemovePhoneNumbers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removePhoneNumbers(request: RemovePhoneNumbersRequest): RemovePhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePhoneNumbersWithOptions(request, runtime);
}

model RemovePhoneNumbersFromSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
  skillGroupId?: string(name='SkillGroupId'),
}

model RemovePhoneNumbersFromSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemovePhoneNumbersFromSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePhoneNumbersFromSkillGroupResponseBody(name='body'),
}

async function removePhoneNumbersFromSkillGroupWithOptions(request: RemovePhoneNumbersFromSkillGroupRequest, runtime: Util.RuntimeOptions): RemovePhoneNumbersFromSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.numberList)) {
    query['NumberList'] = request.numberList;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemovePhoneNumbersFromSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removePhoneNumbersFromSkillGroup(request: RemovePhoneNumbersFromSkillGroupRequest): RemovePhoneNumbersFromSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePhoneNumbersFromSkillGroupWithOptions(request, runtime);
}

model RemoveSkillGroupsFromUserRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
  userId?: string(name='UserId'),
}

model RemoveSkillGroupsFromUserResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemoveSkillGroupsFromUserResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSkillGroupsFromUserResponseBody(name='body'),
}

async function removeSkillGroupsFromUserWithOptions(request: RemoveSkillGroupsFromUserRequest, runtime: Util.RuntimeOptions): RemoveSkillGroupsFromUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupIdList)) {
    query['SkillGroupIdList'] = request.skillGroupIdList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSkillGroupsFromUser',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeSkillGroupsFromUser(request: RemoveSkillGroupsFromUserRequest): RemoveSkillGroupsFromUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSkillGroupsFromUserWithOptions(request, runtime);
}

model RemoveUsersRequest {
  instanceId?: string(name='InstanceId'),
  userIdList?: string(name='UserIdList'),
}

model RemoveUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsersWithOptions(request: RemoveUsersRequest, runtime: Util.RuntimeOptions): RemoveUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userIdList)) {
    query['UserIdList'] = request.userIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUsers',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersWithOptions(request, runtime);
}

model RemoveUsersFromSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  userIdList?: string(name='UserIdList'),
}

model RemoveUsersFromSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemoveUsersFromSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersFromSkillGroupResponseBody(name='body'),
}

async function removeUsersFromSkillGroupWithOptions(request: RemoveUsersFromSkillGroupRequest, runtime: Util.RuntimeOptions): RemoveUsersFromSkillGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.userIdList)) {
    query['UserIdList'] = request.userIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveUsersFromSkillGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeUsersFromSkillGroup(request: RemoveUsersFromSkillGroupRequest): RemoveUsersFromSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersFromSkillGroupWithOptions(request, runtime);
}

model ResetAgentStateRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model ResetAgentStateResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakCode?: string(name='BreakCode'),
    deviceId?: string(name='DeviceId'),
    extension?: string(name='Extension'),
    instanceId?: string(name='InstanceId'),
    jobId?: string(name='JobId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId'),
    userState?: string(name='UserState'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model ResetAgentStateResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAgentStateResponseBody(name='body'),
}

async function resetAgentStateWithOptions(request: ResetAgentStateRequest, runtime: Util.RuntimeOptions): ResetAgentStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAgentState',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAgentState(request: ResetAgentStateRequest): ResetAgentStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAgentStateWithOptions(request, runtime);
}

model ResetUserPasswordRequest {
  instanceId?: string(name='InstanceId'),
  password?: string(name='Password'),
  userId?: string(name='UserId'),
}

model ResetUserPasswordResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPasswordWithOptions(request: ResetUserPasswordRequest, runtime: Util.RuntimeOptions): ResetUserPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetUserPassword',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetUserPasswordWithOptions(request, runtime);
}

model ResumeCampaignRequest {
  campaignId?: string(name='CampaignId'),
  instanceId?: string(name='InstanceId'),
}

model ResumeCampaignResponseBody = {
  code?: string(name='Code', description='code'),
  httpStatusCode?: string(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ResumeCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeCampaignResponseBody(name='body'),
}

async function resumeCampaignWithOptions(request: ResumeCampaignRequest, runtime: Util.RuntimeOptions): ResumeCampaignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResumeCampaign',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resumeCampaign(request: ResumeCampaignRequest): ResumeCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeCampaignWithOptions(request, runtime);
}

model RetrieveCallRequest {
  channelId?: string(name='ChannelId'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model RetrieveCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model RetrieveCallResponse = {
  headers: map[string]string(name='headers'),
  body: RetrieveCallResponseBody(name='body'),
}

async function retrieveCallWithOptions(request: RetrieveCallRequest, runtime: Util.RuntimeOptions): RetrieveCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RetrieveCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retrieveCall(request: RetrieveCallRequest): RetrieveCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return retrieveCallWithOptions(request, runtime);
}

model SaveRTCStatsV2Request {
  callId?: string(name='CallId'),
  generalInfo?: string(name='GeneralInfo'),
  googAddress?: string(name='GoogAddress'),
  instanceId?: string(name='InstanceId'),
  receiverReport?: string(name='ReceiverReport'),
  senderReport?: string(name='SenderReport'),
}

model SaveRTCStatsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rowCount?: long(name='RowCount'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveRTCStatsV2Response = {
  headers: map[string]string(name='headers'),
  body: SaveRTCStatsV2ResponseBody(name='body'),
}

async function saveRTCStatsV2WithOptions(request: SaveRTCStatsV2Request, runtime: Util.RuntimeOptions): SaveRTCStatsV2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.generalInfo)) {
    query['GeneralInfo'] = request.generalInfo;
  }
  if (!Util.isUnset(request.googAddress)) {
    query['GoogAddress'] = request.googAddress;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.receiverReport)) {
    query['ReceiverReport'] = request.receiverReport;
  }
  if (!Util.isUnset(request.senderReport)) {
    query['SenderReport'] = request.senderReport;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveRTCStatsV2',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveRTCStatsV2(request: SaveRTCStatsV2Request): SaveRTCStatsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return saveRTCStatsV2WithOptions(request, runtime);
}

model SaveTerminalLogRequest {
  appName?: string(name='AppName'),
  callId?: string(name='CallId'),
  content?: string(name='Content'),
  dataType?: int32(name='DataType'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  methodName?: string(name='MethodName'),
  status?: string(name='Status'),
  uniqueRequestId?: string(name='UniqueRequestId'),
}

model SaveTerminalLogResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveTerminalLogResponse = {
  headers: map[string]string(name='headers'),
  body: SaveTerminalLogResponseBody(name='body'),
}

async function saveTerminalLogWithOptions(request: SaveTerminalLogRequest, runtime: Util.RuntimeOptions): SaveTerminalLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.methodName)) {
    query['MethodName'] = request.methodName;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.uniqueRequestId)) {
    query['UniqueRequestId'] = request.uniqueRequestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveTerminalLog',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveTerminalLog(request: SaveTerminalLogRequest): SaveTerminalLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveTerminalLogWithOptions(request, runtime);
}

model SaveWebRTCStatsRequest {
  callId?: string(name='CallId'),
  generalInfo?: string(name='GeneralInfo'),
  googAddress?: string(name='GoogAddress'),
  instanceId?: string(name='InstanceId'),
  receiverReport?: string(name='ReceiverReport'),
  senderReport?: string(name='SenderReport'),
}

model SaveWebRTCStatsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rowCount?: long(name='RowCount'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveWebRTCStatsResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebRTCStatsResponseBody(name='body'),
}

async function saveWebRTCStatsWithOptions(request: SaveWebRTCStatsRequest, runtime: Util.RuntimeOptions): SaveWebRTCStatsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.generalInfo)) {
    query['GeneralInfo'] = request.generalInfo;
  }
  if (!Util.isUnset(request.googAddress)) {
    query['GoogAddress'] = request.googAddress;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.receiverReport)) {
    query['ReceiverReport'] = request.receiverReport;
  }
  if (!Util.isUnset(request.senderReport)) {
    query['SenderReport'] = request.senderReport;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveWebRTCStats',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveWebRTCStats(request: SaveWebRTCStatsRequest): SaveWebRTCStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWebRTCStatsWithOptions(request, runtime);
}

model SaveWebRtcInfoRequest {
  callId?: string(name='CallId'),
  content?: string(name='Content'),
  contentType?: string(name='ContentType'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
}

model SaveWebRtcInfoResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rowCount?: long(name='RowCount'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveWebRtcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebRtcInfoResponseBody(name='body'),
}

async function saveWebRtcInfoWithOptions(request: SaveWebRtcInfoRequest, runtime: Util.RuntimeOptions): SaveWebRtcInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callId)) {
    query['CallId'] = request.callId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveWebRtcInfo',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveWebRtcInfo(request: SaveWebRtcInfoRequest): SaveWebRtcInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWebRtcInfoWithOptions(request, runtime);
}

model SendDtmfSignalingRequest {
  channelId?: string(name='ChannelId'),
  deviceId?: string(name='DeviceId'),
  dtmf?: string(name='Dtmf'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model SendDtmfSignalingResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model SendDtmfSignalingResponse = {
  headers: map[string]string(name='headers'),
  body: SendDtmfSignalingResponseBody(name='body'),
}

async function sendDtmfSignalingWithOptions(request: SendDtmfSignalingRequest, runtime: Util.RuntimeOptions): SendDtmfSignalingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.dtmf)) {
    query['Dtmf'] = request.dtmf;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendDtmfSignaling',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendDtmfSignaling(request: SendDtmfSignalingRequest): SendDtmfSignalingResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendDtmfSignalingWithOptions(request, runtime);
}

model SignInGroupRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  signedSkillGroupIdList?: string(name='SignedSkillGroupIdList'),
  userId?: string(name='UserId'),
}

model SignInGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakCode?: string(name='BreakCode'),
    deviceId?: string(name='DeviceId'),
    extension?: string(name='Extension'),
    instanceId?: string(name='InstanceId'),
    jobId?: string(name='JobId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId'),
    userState?: string(name='UserState'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model SignInGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SignInGroupResponseBody(name='body'),
}

async function signInGroupWithOptions(request: SignInGroupRequest, runtime: Util.RuntimeOptions): SignInGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.signedSkillGroupIdList)) {
    query['SignedSkillGroupIdList'] = request.signedSkillGroupIdList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SignInGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function signInGroup(request: SignInGroupRequest): SignInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return signInGroupWithOptions(request, runtime);
}

model SignOutGroupRequest {
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model SignOutGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakCode?: string(name='BreakCode'),
    deviceId?: string(name='DeviceId'),
    extension?: string(name='Extension'),
    heartbeat?: long(name='Heartbeat'),
    instanceId?: string(name='InstanceId'),
    jobId?: string(name='JobId'),
    mobile?: string(name='Mobile'),
    outboundScenario?: boolean(name='OutboundScenario'),
    reserved?: long(name='Reserved'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId'),
    userState?: string(name='UserState'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model SignOutGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SignOutGroupResponseBody(name='body'),
}

async function signOutGroupWithOptions(request: SignOutGroupRequest, runtime: Util.RuntimeOptions): SignOutGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SignOutGroup',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function signOutGroup(request: SignOutGroupRequest): SignOutGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return signOutGroupWithOptions(request, runtime);
}

model StartBack2BackCallRequest {
  additionalBroker?: string(name='AdditionalBroker'),
  broker?: string(name='Broker'),
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  instanceId?: string(name='InstanceId'),
  tags?: string(name='Tags'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
}

model StartBack2BackCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      deviceState?: string(name='DeviceState'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      uri?: string(name='Uri'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model StartBack2BackCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartBack2BackCallResponseBody(name='body'),
}

async function startBack2BackCallWithOptions(request: StartBack2BackCallRequest, runtime: Util.RuntimeOptions): StartBack2BackCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.additionalBroker)) {
    query['AdditionalBroker'] = request.additionalBroker;
  }
  if (!Util.isUnset(request.broker)) {
    query['Broker'] = request.broker;
  }
  if (!Util.isUnset(request.callee)) {
    query['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.caller)) {
    query['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartBack2BackCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startBack2BackCall(request: StartBack2BackCallRequest): StartBack2BackCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBack2BackCallWithOptions(request, runtime);
}

model StartConferenceRequest {
  instanceId?: string(name='InstanceId'),
  participantListJson?: string(name='ParticipantListJson'),
  tags?: string(name='Tags'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  userId?: string(name='UserId'),
}

model StartConferenceResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      deviceState?: string(name='DeviceState'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      uri?: string(name='Uri'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model StartConferenceResponse = {
  headers: map[string]string(name='headers'),
  body: StartConferenceResponseBody(name='body'),
}

async function startConferenceWithOptions(request: StartConferenceRequest, runtime: Util.RuntimeOptions): StartConferenceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.participantListJson)) {
    query['ParticipantListJson'] = request.participantListJson;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartConference',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startConference(request: StartConferenceRequest): StartConferenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startConferenceWithOptions(request, runtime);
}

model StartPredictiveCallRequest {
  callee?: string(name='Callee'),
  caller?: string(name='Caller'),
  contactFlowId?: string(name='ContactFlowId'),
  contactFlowVariables?: string(name='ContactFlowVariables'),
  instanceId?: string(name='InstanceId'),
  maskedCallee?: string(name='MaskedCallee'),
  skillGroupId?: string(name='SkillGroupId'),
  tags?: string(name='Tags'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
}

model StartPredictiveCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      deviceState?: string(name='DeviceState'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      reserved?: long(name='Reserved'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model StartPredictiveCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartPredictiveCallResponseBody(name='body'),
}

async function startPredictiveCallWithOptions(request: StartPredictiveCallRequest, runtime: Util.RuntimeOptions): StartPredictiveCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.callee)) {
    query['Callee'] = request.callee;
  }
  if (!Util.isUnset(request.caller)) {
    query['Caller'] = request.caller;
  }
  if (!Util.isUnset(request.contactFlowId)) {
    query['ContactFlowId'] = request.contactFlowId;
  }
  if (!Util.isUnset(request.contactFlowVariables)) {
    query['ContactFlowVariables'] = request.contactFlowVariables;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maskedCallee)) {
    query['MaskedCallee'] = request.maskedCallee;
  }
  if (!Util.isUnset(request.skillGroupId)) {
    query['SkillGroupId'] = request.skillGroupId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.timeoutSeconds)) {
    query['TimeoutSeconds'] = request.timeoutSeconds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartPredictiveCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startPredictiveCall(request: StartPredictiveCallRequest): StartPredictiveCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return startPredictiveCallWithOptions(request, runtime);
}

model SubmitCampaignRequest {
  campaignId?: string(name='CampaignId'),
  instanceId?: string(name='InstanceId'),
}

model SubmitCampaignResponseBody = {
  code?: string(name='Code', description='code'),
  httpStatusCode?: string(name='HttpStatusCode', description='httpStatusCode'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SubmitCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCampaignResponseBody(name='body'),
}

async function submitCampaignWithOptions(request: SubmitCampaignRequest, runtime: Util.RuntimeOptions): SubmitCampaignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.campaignId)) {
    query['CampaignId'] = request.campaignId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitCampaign',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitCampaign(request: SubmitCampaignRequest): SubmitCampaignResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitCampaignWithOptions(request, runtime);
}

model TakeBreakRequest {
  code?: string(name='Code'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model TakeBreakResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakCode?: string(name='BreakCode'),
    deviceId?: string(name='DeviceId'),
    extension?: string(name='Extension'),
    heartbeat?: long(name='Heartbeat'),
    instanceId?: string(name='InstanceId'),
    jobId?: string(name='JobId'),
    mobile?: string(name='Mobile'),
    outboundScenario?: boolean(name='OutboundScenario'),
    reserved?: long(name='Reserved'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    userId?: string(name='UserId'),
    userState?: string(name='UserState'),
    workMode?: string(name='WorkMode'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model TakeBreakResponse = {
  headers: map[string]string(name='headers'),
  body: TakeBreakResponseBody(name='body'),
}

async function takeBreakWithOptions(request: TakeBreakRequest, runtime: Util.RuntimeOptions): TakeBreakResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TakeBreak',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function takeBreak(request: TakeBreakRequest): TakeBreakResponse {
  var runtime = new Util.RuntimeOptions{};
  return takeBreakWithOptions(request, runtime);
}

model UnmuteCallRequest {
  channelId?: string(name='ChannelId'),
  deviceId?: string(name='DeviceId'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  userId?: string(name='UserId'),
}

model UnmuteCallResponseBody = {
  code?: string(name='Code'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      channelContexts?: [ 
        {
          associatedData?: map[string]any(name='AssociatedData'),
          callType?: string(name='CallType'),
          channelFlags?: string(name='ChannelFlags'),
          channelId?: string(name='ChannelId'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          index?: int32(name='Index'),
          jobId?: string(name='JobId'),
          originator?: string(name='Originator'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          releaseReason?: string(name='ReleaseReason'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          userExtension?: string(name='UserExtension'),
          userId?: string(name='UserId'),
        }
      ](name='ChannelContexts'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
    }(name='CallContext'),
    userContext?: {
      breakCode?: string(name='BreakCode'),
      deviceId?: string(name='DeviceId'),
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      mobile?: string(name='Mobile'),
      outboundScenario?: boolean(name='OutboundScenario'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
      userId?: string(name='UserId'),
      userState?: string(name='UserState'),
      workMode?: string(name='WorkMode'),
    }(name='UserContext'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model UnmuteCallResponse = {
  headers: map[string]string(name='headers'),
  body: UnmuteCallResponseBody(name='body'),
}

async function unmuteCallWithOptions(request: UnmuteCallRequest, runtime: Util.RuntimeOptions): UnmuteCallResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnmuteCall',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unmuteCall(request: UnmuteCallRequest): UnmuteCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return unmuteCallWithOptions(request, runtime);
}

model UnregisterDeviceRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model UnregisterDeviceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnregisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterDeviceResponseBody(name='body'),
}

async function unregisterDeviceWithOptions(request: UnregisterDeviceRequest, runtime: Util.RuntimeOptions): UnregisterDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnregisterDevice',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unregisterDevice(request: UnregisterDeviceRequest): UnregisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unregisterDeviceWithOptions(request, runtime);
}

model UpdateConfigItemsRequest {
  configItems?: string(name='ConfigItems'),
  instanceId?: string(name='InstanceId'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
}

model UpdateConfigItemsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model UpdateConfigItemsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigItemsResponseBody(name='body'),
}

async function updateConfigItemsWithOptions(request: UpdateConfigItemsRequest, runtime: Util.RuntimeOptions): UpdateConfigItemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configItems)) {
    query['ConfigItems'] = request.configItems;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.objectId)) {
    query['ObjectId'] = request.objectId;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConfigItems',
    version = '2020-07-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConfigItems(request: UpdateConfigItemsRequest): UpdateConfigItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigItemsWithOptions(request, runtime);
}

