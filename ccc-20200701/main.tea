/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'ccc.aliyuncs.com',
    ap-south-1 = 'ccc.aliyuncs.com',
    ap-southeast-1 = 'ccc.aliyuncs.com',
    ap-southeast-2 = 'ccc.aliyuncs.com',
    ap-southeast-3 = 'ccc.aliyuncs.com',
    ap-southeast-5 = 'ccc.aliyuncs.com',
    cn-beijing = 'ccc.aliyuncs.com',
    cn-chengdu = 'ccc.aliyuncs.com',
    cn-hongkong = 'ccc.aliyuncs.com',
    cn-huhehaote = 'ccc.aliyuncs.com',
    cn-qingdao = 'ccc.aliyuncs.com',
    cn-shenzhen = 'ccc.aliyuncs.com',
    cn-zhangjiakou = 'ccc.aliyuncs.com',
    eu-central-1 = 'ccc.aliyuncs.com',
    eu-west-1 = 'ccc.aliyuncs.com',
    me-east-1 = 'ccc.aliyuncs.com',
    us-east-1 = 'ccc.aliyuncs.com',
    us-west-1 = 'ccc.aliyuncs.com',
    cn-hangzhou-finance = 'ccc.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ccc.aliyuncs.com',
    cn-shanghai-finance-1 = 'ccc.aliyuncs.com',
    cn-north-2-gov-1 = 'ccc.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ccc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddSkillGroupsToUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  skillLevelList?: string(name='SkillLevelList'),
}

model AddSkillGroupsToUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model AddSkillGroupsToUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddSkillGroupsToUserResponseBody(name='body'),
}

async function addSkillGroupsToUserWithOptions(request: AddSkillGroupsToUserRequest, runtime: Util.RuntimeOptions): AddSkillGroupsToUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddSkillGroupsToUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addSkillGroupsToUser(request: AddSkillGroupsToUserRequest): AddSkillGroupsToUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSkillGroupsToUserWithOptions(request, runtime);
}

model SaveWebRTCStatsRequest {
  instanceId?: string(name='InstanceId'),
  callId?: string(name='CallId'),
  generalInfo?: string(name='GeneralInfo'),
  senderReport?: string(name='SenderReport'),
  receiverReport?: string(name='ReceiverReport'),
  googAddress?: string(name='GoogAddress'),
}

model SaveWebRTCStatsResponseBody = {
  httpStatusCode?: long(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  timeStamp?: long(name='TimeStamp'),
  rowCount?: long(name='RowCount'),
}

model SaveWebRTCStatsResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebRTCStatsResponseBody(name='body'),
}

async function saveWebRTCStatsWithOptions(request: SaveWebRTCStatsRequest, runtime: Util.RuntimeOptions): SaveWebRTCStatsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveWebRTCStats', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveWebRTCStats(request: SaveWebRTCStatsRequest): SaveWebRTCStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWebRTCStatsWithOptions(request, runtime);
}

model GetMonoRecordingRequest {
  instanceId?: string(name='InstanceId'),
  contactId?: string(name='ContactId'),
}

model GetMonoRecordingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    fileUrl?: string(name='FileUrl'),
    fileName?: string(name='FileName'),
  }(name='Data'),
}

model GetMonoRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: GetMonoRecordingResponseBody(name='body'),
}

async function getMonoRecordingWithOptions(request: GetMonoRecordingRequest, runtime: Util.RuntimeOptions): GetMonoRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMonoRecording', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMonoRecording(request: GetMonoRecordingRequest): GetMonoRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMonoRecordingWithOptions(request, runtime);
}

model ListUsersRequest {
  instanceId?: string(name='InstanceId'),
  searchPattern?: string(name='SearchPattern'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        displayName?: string(name='DisplayName'),
        loginName?: string(name='LoginName'),
        email?: string(name='Email'),
        workMode?: string(name='WorkMode'),
        mobile?: string(name='Mobile'),
        userId?: string(name='UserId'),
        roleName?: string(name='RoleName'),
        roleId?: string(name='RoleId'),
        primaryAccount?: boolean(name='PrimaryAccount'),
        personalOutboundNumberList?: [ 
          {
            number?: string(name='Number'),
            active?: boolean(name='Active'),
            city?: string(name='City'),
            usage?: string(name='Usage'),
            province?: string(name='Province'),
          }
        ](name='PersonalOutboundNumberList'),
        skillLevelList?: [ 
          {
            skillLevel?: int32(name='SkillLevel'),
            skillGroupId?: string(name='SkillGroupId'),
            skillGroupName?: string(name='SkillGroupName'),
          }
        ](name='SkillLevelList'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUsers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model ListAgentStateLogsRequest {
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  agentId?: string(name='AgentId'),
  instanceId?: string(name='InstanceId'),
}

model ListAgentStateLogsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      startTime?: long(name='StartTime'),
      stateCode?: string(name='StateCode'),
      duration?: long(name='Duration'),
      state?: string(name='State'),
    }
  ](name='Data'),
}

model ListAgentStateLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAgentStateLogsResponseBody(name='body'),
}

async function listAgentStateLogsWithOptions(request: ListAgentStateLogsRequest, runtime: Util.RuntimeOptions): ListAgentStateLogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAgentStateLogs', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAgentStateLogs(request: ListAgentStateLogsRequest): ListAgentStateLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAgentStateLogsWithOptions(request, runtime);
}

model RemovePhoneNumberFromSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model RemovePhoneNumberFromSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemovePhoneNumberFromSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePhoneNumberFromSkillGroupsResponseBody(name='body'),
}

async function removePhoneNumberFromSkillGroupsWithOptions(request: RemovePhoneNumberFromSkillGroupsRequest, runtime: Util.RuntimeOptions): RemovePhoneNumberFromSkillGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemovePhoneNumberFromSkillGroups', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removePhoneNumberFromSkillGroups(request: RemovePhoneNumberFromSkillGroupsRequest): RemovePhoneNumberFromSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePhoneNumberFromSkillGroupsWithOptions(request, runtime);
}

model ListPhoneNumbersRequest {
  instanceId?: string(name='InstanceId'),
  searchPattern?: string(name='SearchPattern'),
  usage?: string(name='Usage'),
  active?: boolean(name='Active'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListPhoneNumbersResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        active?: boolean(name='Active'),
        createTime?: string(name='CreateTime'),
        userId?: string(name='UserId'),
        tags?: string(name='Tags'),
        city?: string(name='City'),
        instanceId?: string(name='InstanceId'),
        usage?: string(name='Usage'),
        contactFlowName?: string(name='ContactFlowName'),
        provider?: string(name='Provider'),
        number?: string(name='Number'),
        contactFlowId?: string(name='ContactFlowId'),
        province?: string(name='Province'),
        skillGroups?: [ 
          {
            displayName?: string(name='DisplayName'),
            instanceId?: string(name='InstanceId'),
            name?: string(name='Name'),
            skillGroupId?: string(name='SkillGroupId'),
          }
        ](name='SkillGroups'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhoneNumbersResponseBody(name='body'),
}

async function listPhoneNumbersWithOptions(request: ListPhoneNumbersRequest, runtime: Util.RuntimeOptions): ListPhoneNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPhoneNumbers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPhoneNumbers(request: ListPhoneNumbersRequest): ListPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhoneNumbersWithOptions(request, runtime);
}

model AddNumbersToSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  numberList?: string(name='NumberList'),
}

model AddNumbersToSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddNumbersToSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddNumbersToSkillGroupResponseBody(name='body'),
}

async function addNumbersToSkillGroupWithOptions(request: AddNumbersToSkillGroupRequest, runtime: Util.RuntimeOptions): AddNumbersToSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddNumbersToSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addNumbersToSkillGroup(request: AddNumbersToSkillGroupRequest): AddNumbersToSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addNumbersToSkillGroupWithOptions(request, runtime);
}

model ResetAgentStateRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
}

model ResetAgentStateResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    extension?: string(name='Extension'),
    workMode?: string(name='WorkMode'),
    deviceId?: string(name='DeviceId'),
    jobId?: string(name='JobId'),
    userId?: string(name='UserId'),
    breakCode?: string(name='BreakCode'),
    instanceId?: string(name='InstanceId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    userState?: string(name='UserState'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
  }(name='Data'),
}

model ResetAgentStateResponse = {
  headers: map[string]string(name='headers'),
  body: ResetAgentStateResponseBody(name='body'),
}

async function resetAgentStateWithOptions(request: ResetAgentStateRequest, runtime: Util.RuntimeOptions): ResetAgentStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetAgentState', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetAgentState(request: ResetAgentStateRequest): ResetAgentStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAgentStateWithOptions(request, runtime);
}

model ChangeWorkModeRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  workMode?: string(name='WorkMode'),
}

model ChangeWorkModeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    extension?: string(name='Extension'),
    workMode?: string(name='WorkMode'),
    deviceId?: string(name='DeviceId'),
    jobId?: string(name='JobId'),
    userId?: string(name='UserId'),
    breakCode?: string(name='BreakCode'),
    instanceId?: string(name='InstanceId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    userState?: string(name='UserState'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
  }(name='Data'),
}

model ChangeWorkModeResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeWorkModeResponseBody(name='body'),
}

async function changeWorkModeWithOptions(request: ChangeWorkModeRequest, runtime: Util.RuntimeOptions): ChangeWorkModeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeWorkMode', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeWorkMode(request: ChangeWorkModeRequest): ChangeWorkModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeWorkModeWithOptions(request, runtime);
}

model GetTurnCredentialsRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model GetTurnCredentialsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    userName?: string(name='UserName'),
    password?: string(name='Password'),
  }(name='Data'),
}

model GetTurnCredentialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTurnCredentialsResponseBody(name='body'),
}

async function getTurnCredentialsWithOptions(request: GetTurnCredentialsRequest, runtime: Util.RuntimeOptions): GetTurnCredentialsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTurnCredentials', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTurnCredentials(request: GetTurnCredentialsRequest): GetTurnCredentialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTurnCredentialsWithOptions(request, runtime);
}

model AddPhoneNumbersRequest {
  instanceId?: string(name='InstanceId'),
  contactFlowId?: string(name='ContactFlowId'),
  usage?: string(name='Usage'),
  numberList?: string(name='NumberList'),
  numberGroupId?: string(name='NumberGroupId'),
}

model AddPhoneNumbersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ string ](name='Data'),
}

model AddPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: AddPhoneNumbersResponseBody(name='body'),
}

async function addPhoneNumbersWithOptions(request: AddPhoneNumbersRequest, runtime: Util.RuntimeOptions): AddPhoneNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddPhoneNumbers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addPhoneNumbers(request: AddPhoneNumbersRequest): AddPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPhoneNumbersWithOptions(request, runtime);
}

model SaveWebRtcInfoRequest {
  instanceId?: string(name='InstanceId'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  contentType?: string(name='ContentType'),
  content?: string(name='Content'),
}

model SaveWebRtcInfoResponseBody = {
  httpStatusCode?: long(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  timeStamp?: long(name='TimeStamp'),
  rowCount?: long(name='RowCount'),
}

model SaveWebRtcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebRtcInfoResponseBody(name='body'),
}

async function saveWebRtcInfoWithOptions(request: SaveWebRtcInfoRequest, runtime: Util.RuntimeOptions): SaveWebRtcInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveWebRtcInfo', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveWebRtcInfo(request: SaveWebRtcInfoRequest): SaveWebRtcInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveWebRtcInfoWithOptions(request, runtime);
}

model ListIntervalSkillGroupReportRequest {
  skillGroupId?: string(name='SkillGroupId'),
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  interval?: string(name='Interval'),
}

model ListIntervalSkillGroupReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      statsTime?: long(name='StatsTime'),
      inbound?: {
        averageRingTime?: float(name='AverageRingTime'),
        callsOverflow?: long(name='CallsOverflow'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
        callsHandled?: long(name='CallsHandled'),
        totalWorkTime?: long(name='TotalWorkTime'),
        totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        averageWaitTime?: float(name='AverageWaitTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        maxAbandonTime?: long(name='MaxAbandonTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsQueued?: long(name='CallsQueued'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
        averageAbandonTime?: float(name='AverageAbandonTime'),
        callsRinged?: long(name='CallsRinged'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsAbandoned?: long(name='CallsAbandoned'),
        maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
        totalWaitTime?: long(name='TotalWaitTime'),
        totalRingTime?: long(name='TotalRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxRingTime?: long(name='MaxRingTime'),
        abandonRate?: float(name='AbandonRate'),
        totalTalkTime?: long(name='TotalTalkTime'),
        totalAbandonTime?: long(name='TotalAbandonTime'),
        callsOffered?: long(name='CallsOffered'),
        maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
        maxWaitTime?: long(name='MaxWaitTime'),
        averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
        serviceLevel20?: float(name='ServiceLevel20'),
        maxHoldTime?: long(name='MaxHoldTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        averageTalkTime?: float(name='AverageTalkTime'),
        callsHold?: long(name='CallsHold'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        handleRate?: float(name='HandleRate'),
        callsTimeout?: long(name='CallsTimeout'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        averageHoldTime?: float(name='AverageHoldTime'),
        totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
      }(name='Inbound'),
      outbound?: {
        averageRingTime?: float(name='AverageRingTime'),
        callsDialed?: long(name='CallsDialed'),
        callsAnswered?: long(name='CallsAnswered'),
        totalWorkTime?: long(name='TotalWorkTime'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        maxWorkTime?: long(name='MaxWorkTime'),
        totalDialingTime?: long(name='TotalDialingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        callsRinged?: long(name='CallsRinged'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        totalRingTime?: long(name='TotalRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxRingTime?: long(name='MaxRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        maxDialingTime?: long(name='MaxDialingTime'),
        answerRate?: float(name='AnswerRate'),
        maxHoldTime?: long(name='MaxHoldTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        callsHold?: long(name='CallsHold'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageDialingTime?: float(name='AverageDialingTime'),
      }(name='Outbound'),
      overall?: {
        totalTalkTime?: long(name='TotalTalkTime'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        occupancyRate?: float(name='OccupancyRate'),
        totalWorkTime?: long(name='TotalWorkTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        averageBreakTime?: float(name='AverageBreakTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        maxBreakTime?: long(name='MaxBreakTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        maxReadyTime?: long(name='MaxReadyTime'),
        averageReadyTime?: float(name='AverageReadyTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
        totalBreakTime?: long(name='TotalBreakTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        totalCalls?: long(name='TotalCalls'),
      }(name='Overall'),
    }
  ](name='Data'),
}

model ListIntervalSkillGroupReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntervalSkillGroupReportResponseBody(name='body'),
}

async function listIntervalSkillGroupReportWithOptions(request: ListIntervalSkillGroupReportRequest, runtime: Util.RuntimeOptions): ListIntervalSkillGroupReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIntervalSkillGroupReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIntervalSkillGroupReport(request: ListIntervalSkillGroupReportRequest): ListIntervalSkillGroupReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntervalSkillGroupReportWithOptions(request, runtime);
}

model MonitorCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  monitoredUserId?: string(name='MonitoredUserId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
}

model MonitorCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model MonitorCallResponse = {
  headers: map[string]string(name='headers'),
  body: MonitorCallResponseBody(name='body'),
}

async function monitorCallWithOptions(request: MonitorCallRequest, runtime: Util.RuntimeOptions): MonitorCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MonitorCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function monitorCall(request: MonitorCallRequest): MonitorCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return monitorCallWithOptions(request, runtime);
}

model RemoveUsersFromSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  userIdList?: string(name='UserIdList'),
}

model RemoveUsersFromSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemoveUsersFromSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersFromSkillGroupResponseBody(name='body'),
}

async function removeUsersFromSkillGroupWithOptions(request: RemoveUsersFromSkillGroupRequest, runtime: Util.RuntimeOptions): RemoveUsersFromSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUsersFromSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUsersFromSkillGroup(request: RemoveUsersFromSkillGroupRequest): RemoveUsersFromSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersFromSkillGroupWithOptions(request, runtime);
}

model DeleteSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  force?: boolean(name='Force'),
}

model DeleteSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSkillGroupResponseBody(name='body'),
}

async function deleteSkillGroupWithOptions(request: DeleteSkillGroupRequest, runtime: Util.RuntimeOptions): DeleteSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSkillGroup(request: DeleteSkillGroupRequest): DeleteSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSkillGroupWithOptions(request, runtime);
}

model BlindTransferRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  transferor?: string(name='Transferor'),
  transferee?: string(name='Transferee'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  jobId?: string(name='JobId'),
}

model BlindTransferResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model BlindTransferResponse = {
  headers: map[string]string(name='headers'),
  body: BlindTransferResponseBody(name='body'),
}

async function blindTransferWithOptions(request: BlindTransferRequest, runtime: Util.RuntimeOptions): BlindTransferResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BlindTransfer', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function blindTransfer(request: BlindTransferRequest): BlindTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return blindTransferWithOptions(request, runtime);
}

model ListSkillLevelsOfUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  isMember?: boolean(name='IsMember'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListSkillLevelsOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        skillLevel?: string(name='SkillLevel'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListSkillLevelsOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillLevelsOfUserResponseBody(name='body'),
}

async function listSkillLevelsOfUserWithOptions(request: ListSkillLevelsOfUserRequest, runtime: Util.RuntimeOptions): ListSkillLevelsOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillLevelsOfUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillLevelsOfUser(request: ListSkillLevelsOfUserRequest): ListSkillLevelsOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillLevelsOfUserWithOptions(request, runtime);
}

model ListUnassignedNumbersRequest {
  searchPattern?: string(name='SearchPattern'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
}

model ListUnassignedNumbersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        number?: string(name='Number'),
        active?: boolean(name='Active'),
        city?: string(name='City'),
        usage?: boolean(name='Usage'),
        province?: string(name='Province'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListUnassignedNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUnassignedNumbersResponseBody(name='body'),
}

async function listUnassignedNumbersWithOptions(request: ListUnassignedNumbersRequest, runtime: Util.RuntimeOptions): ListUnassignedNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUnassignedNumbers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUnassignedNumbers(request: ListUnassignedNumbersRequest): ListUnassignedNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUnassignedNumbersWithOptions(request, runtime);
}

model GetInstanceTrendingReportRequest {
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model GetInstanceTrendingReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    inbound?: [ 
      {
        statsTime?: long(name='StatsTime'),
        callsQueued?: long(name='CallsQueued'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
        callsHandled?: long(name='CallsHandled'),
        totalCalls?: long(name='TotalCalls'),
        callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
      }
    ](name='Inbound'),
    outbound?: [ 
      {
        statsTime?: long(name='StatsTime'),
        callsAnswered?: long(name='CallsAnswered'),
        totalCalls?: long(name='TotalCalls'),
      }
    ](name='Outbound'),
  }(name='Data'),
}

model GetInstanceTrendingReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceTrendingReportResponseBody(name='body'),
}

async function getInstanceTrendingReportWithOptions(request: GetInstanceTrendingReportRequest, runtime: Util.RuntimeOptions): GetInstanceTrendingReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceTrendingReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceTrendingReport(request: GetInstanceTrendingReportRequest): GetInstanceTrendingReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceTrendingReportWithOptions(request, runtime);
}

model ListInstancesOfUserRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInstancesOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        status?: string(name='Status'),
        consoleUrl?: string(name='ConsoleUrl'),
        description?: string(name='Description'),
        aliyunUid?: string(name='AliyunUid'),
        name?: string(name='Name'),
        domainName?: string(name='DomainName'),
        id?: string(name='Id'),
        adminList?: [ 
          {
            displayName?: string(name='DisplayName'),
            extension?: string(name='Extension'),
            loginName?: string(name='LoginName'),
            email?: string(name='Email'),
            workMode?: string(name='WorkMode'),
            mobile?: string(name='Mobile'),
            userId?: string(name='UserId'),
            roleName?: string(name='RoleName'),
            instanceId?: string(name='InstanceId'),
            roleId?: string(name='RoleId'),
          }
        ](name='AdminList'),
        numberList?: [ 
          {
            active?: boolean(name='Active'),
            userId?: string(name='UserId'),
            number?: string(name='Number'),
            city?: string(name='City'),
            instanceId?: string(name='InstanceId'),
            usage?: string(name='Usage'),
            contactFlowId?: string(name='ContactFlowId'),
            province?: string(name='Province'),
            skillGroups?: [ 
              {
                displayName?: string(name='DisplayName'),
                description?: string(name='Description'),
                phoneNumberCount?: int32(name='PhoneNumberCount'),
                skillGroupId?: string(name='SkillGroupId'),
                userCount?: int32(name='UserCount'),
                instanceId?: string(name='InstanceId'),
                name?: string(name='Name'),
              }
            ](name='SkillGroups'),
          }
        ](name='NumberList'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListInstancesOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesOfUserResponseBody(name='body'),
}

async function listInstancesOfUserWithOptions(request: ListInstancesOfUserRequest, runtime: Util.RuntimeOptions): ListInstancesOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListInstancesOfUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listInstancesOfUser(request: ListInstancesOfUserRequest): ListInstancesOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesOfUserWithOptions(request, runtime);
}

model LaunchSurveyRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  contactFlowId?: string(name='ContactFlowId'),
}

model LaunchSurveyResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model LaunchSurveyResponse = {
  headers: map[string]string(name='headers'),
  body: LaunchSurveyResponseBody(name='body'),
}

async function launchSurveyWithOptions(request: LaunchSurveyRequest, runtime: Util.RuntimeOptions): LaunchSurveyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LaunchSurvey', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function launchSurvey(request: LaunchSurveyRequest): LaunchSurveyResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchSurveyWithOptions(request, runtime);
}

model ListIvrTrackingDetailsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model ListIvrTrackingDetailsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        instance?: string(name='Instance'),
        callee?: string(name='Callee'),
        enterTime?: long(name='EnterTime'),
        nodeVariables?: map[string]any(name='NodeVariables'),
        nodeExitCode?: string(name='NodeExitCode'),
        flowName?: string(name='FlowName'),
        flowId?: string(name='FlowId'),
        nodeProperties?: map[string]any(name='NodeProperties'),
        nodeType?: string(name='NodeType'),
        caller?: string(name='Caller'),
        nodeName?: string(name='NodeName'),
        contactId?: string(name='ContactId'),
        leaveTime?: long(name='LeaveTime'),
        channelVariables?: string(name='ChannelVariables'),
        channelId?: string(name='ChannelId'),
        nodeId?: string(name='NodeId'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListIvrTrackingDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListIvrTrackingDetailsResponseBody(name='body'),
}

async function listIvrTrackingDetailsWithOptions(request: ListIvrTrackingDetailsRequest, runtime: Util.RuntimeOptions): ListIvrTrackingDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIvrTrackingDetails', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIvrTrackingDetails(request: ListIvrTrackingDetailsRequest): ListIvrTrackingDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIvrTrackingDetailsWithOptions(request, runtime);
}

model ListBriefSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  searchPattern?: string(name='SearchPattern'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListBriefSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        displayName?: string(name='DisplayName'),
        description?: string(name='Description'),
        phoneNumberCount?: int32(name='PhoneNumberCount'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        userCount?: int32(name='UserCount'),
        instanceId?: string(name='InstanceId'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListBriefSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBriefSkillGroupsResponseBody(name='body'),
}

async function listBriefSkillGroupsWithOptions(request: ListBriefSkillGroupsRequest, runtime: Util.RuntimeOptions): ListBriefSkillGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListBriefSkillGroups', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listBriefSkillGroups(request: ListBriefSkillGroupsRequest): ListBriefSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBriefSkillGroupsWithOptions(request, runtime);
}

model UnmuteCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  channelId?: string(name='ChannelId'),
}

model UnmuteCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      heartbeat?: long(name='Heartbeat'),
      extension?: string(name='Extension'),
      workMode?: string(name='WorkMode'),
      mobile?: string(name='Mobile'),
      deviceId?: string(name='DeviceId'),
      jobId?: string(name='JobId'),
      userId?: string(name='UserId'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model UnmuteCallResponse = {
  headers: map[string]string(name='headers'),
  body: UnmuteCallResponseBody(name='body'),
}

async function unmuteCallWithOptions(request: UnmuteCallRequest, runtime: Util.RuntimeOptions): UnmuteCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnmuteCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unmuteCall(request: UnmuteCallRequest): UnmuteCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return unmuteCallWithOptions(request, runtime);
}

model ModifySkillLevelsOfUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  skillLevelList?: string(name='SkillLevelList'),
}

model ModifySkillLevelsOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model ModifySkillLevelsOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySkillLevelsOfUserResponseBody(name='body'),
}

async function modifySkillLevelsOfUserWithOptions(request: ModifySkillLevelsOfUserRequest, runtime: Util.RuntimeOptions): ModifySkillLevelsOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySkillLevelsOfUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySkillLevelsOfUser(request: ModifySkillLevelsOfUserRequest): ModifySkillLevelsOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySkillLevelsOfUserWithOptions(request, runtime);
}

model AssignUsersRequest {
  instanceId?: string(name='InstanceId'),
  roleId?: string(name='RoleId'),
  skillLevelList?: string(name='SkillLevelList'),
  ramIdList?: string(name='RamIdList'),
  workMode?: string(name='WorkMode'),
}

model AssignUsersResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  sync?: string(name='Sync'),
  code?: string(name='Code'),
  workflowId?: string(name='WorkflowId'),
  message?: string(name='Message'),
}

model AssignUsersResponse = {
  headers: map[string]string(name='headers'),
  body: AssignUsersResponseBody(name='body'),
}

async function assignUsersWithOptions(request: AssignUsersRequest, runtime: Util.RuntimeOptions): AssignUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssignUsers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assignUsers(request: AssignUsersRequest): AssignUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignUsersWithOptions(request, runtime);
}

model ListUserLevelsOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  isMember?: boolean(name='IsMember'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  searchPattern?: string(name='SearchPattern'),
}

model ListUserLevelsOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        displayName?: string(name='DisplayName'),
        skillLevel?: int32(name='SkillLevel'),
        loginName?: string(name='LoginName'),
        userId?: string(name='UserId'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        roleName?: string(name='RoleName'),
        roleId?: string(name='RoleId'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListUserLevelsOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserLevelsOfSkillGroupResponseBody(name='body'),
}

async function listUserLevelsOfSkillGroupWithOptions(request: ListUserLevelsOfSkillGroupRequest, runtime: Util.RuntimeOptions): ListUserLevelsOfSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUserLevelsOfSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUserLevelsOfSkillGroup(request: ListUserLevelsOfSkillGroupRequest): ListUserLevelsOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserLevelsOfSkillGroupWithOptions(request, runtime);
}

model ListRolesRequest {
  instanceId?: string(name='InstanceId'),
}

model ListRolesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      name?: string(name='Name'),
      roleId?: string(name='RoleId'),
    }
  ](name='Data'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRolesWithOptions(request: ListRolesRequest, runtime: Util.RuntimeOptions): ListRolesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRoles', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRolesWithOptions(request, runtime);
}

model UpdateConfigItemsRequest {
  instanceId?: string(name='InstanceId'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
  configItems?: string(name='ConfigItems'),
}

model UpdateConfigItemsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model UpdateConfigItemsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigItemsResponseBody(name='body'),
}

async function updateConfigItemsWithOptions(request: UpdateConfigItemsRequest, runtime: Util.RuntimeOptions): UpdateConfigItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateConfigItems', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateConfigItems(request: UpdateConfigItemsRequest): UpdateConfigItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConfigItemsWithOptions(request, runtime);
}

model GetCallDetailRecordRequest {
  contactId?: string(name='ContactId'),
  instanceId?: string(name='InstanceId'),
}

model GetCallDetailRecordResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    releaseInitiator?: string(name='ReleaseInitiator'),
    contactDisposition?: string(name='ContactDisposition'),
    contactType?: string(name='ContactType'),
    agentIds?: string(name='AgentIds'),
    callDuration?: long(name='CallDuration'),
    recordingReady?: boolean(name='RecordingReady'),
    establishedTime?: long(name='EstablishedTime'),
    instanceId?: string(name='InstanceId'),
    satisfactionSurveyOffered?: boolean(name='SatisfactionSurveyOffered'),
    calledNumber?: string(name='CalledNumber'),
    agentNames?: string(name='AgentNames'),
    satisfaction?: int32(name='Satisfaction'),
    startTime?: long(name='StartTime'),
    contactId?: string(name='ContactId'),
    satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel'),
    releaseTime?: long(name='ReleaseTime'),
    callingNumber?: string(name='CallingNumber'),
    skillGroupNames?: string(name='SkillGroupNames'),
    skillGroupIds?: string(name='SkillGroupIds'),
    agentEvents?: [ 
      {
        agentName?: string(name='AgentName'),
        agentId?: string(name='AgentId'),
        skillGroupId?: string(name='SkillGroupId'),
        eventSequence?: [ 
          {
            event?: string(name='Event'),
            eventTime?: long(name='EventTime'),
          }
        ](name='EventSequence'),
      }
    ](name='AgentEvents'),
    ivrEvents?: [ 
      {
        flowId?: string(name='FlowId'),
        eventSequence?: [ 
          {
            event?: string(name='Event'),
            eventTime?: long(name='EventTime'),
          }
        ](name='EventSequence'),
      }
    ](name='IvrEvents'),
    queueEvents?: [ 
      {
        queueId?: string(name='QueueId'),
        queueName?: string(name='QueueName'),
        flowId?: string(name='FlowId'),
        queueType?: int32(name='QueueType'),
        eventSequence?: [ 
          {
            event?: string(name='Event'),
            eventTime?: long(name='EventTime'),
          }
        ](name='EventSequence'),
      }
    ](name='QueueEvents'),
    callerLocation?: string(name='CallerLocation'),
    calleeLocation?: string(name='CalleeLocation'),
  }(name='Data'),
}

model GetCallDetailRecordResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallDetailRecordResponseBody(name='body'),
}

async function getCallDetailRecordWithOptions(request: GetCallDetailRecordRequest, runtime: Util.RuntimeOptions): GetCallDetailRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCallDetailRecord', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCallDetailRecord(request: GetCallDetailRecordRequest): GetCallDetailRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallDetailRecordWithOptions(request, runtime);
}

model ModifyPhoneNumberRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  usage?: string(name='Usage'),
  contactFlowId?: string(name='ContactFlowId'),
}

model ModifyPhoneNumberResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhoneNumberResponseBody(name='body'),
}

async function modifyPhoneNumberWithOptions(request: ModifyPhoneNumberRequest, runtime: Util.RuntimeOptions): ModifyPhoneNumberResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPhoneNumber', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPhoneNumber(request: ModifyPhoneNumberRequest): ModifyPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhoneNumberWithOptions(request, runtime);
}

model CoachCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  coachedUserId?: string(name='CoachedUserId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
}

model CoachCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      uri?: string(name='Uri'),
      deviceState?: string(name='DeviceState'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model CoachCallResponse = {
  headers: map[string]string(name='headers'),
  body: CoachCallResponseBody(name='body'),
}

async function coachCallWithOptions(request: CoachCallRequest, runtime: Util.RuntimeOptions): CoachCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CoachCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function coachCall(request: CoachCallRequest): CoachCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return coachCallWithOptions(request, runtime);
}

model CreateUserRequest {
  instanceId?: string(name='InstanceId'),
  loginName?: string(name='LoginName'),
  displayName?: string(name='DisplayName'),
  mobile?: string(name='Mobile'),
  email?: string(name='Email'),
  workMode?: string(name='WorkMode'),
  roleId?: string(name='RoleId'),
  skillLevelList?: string(name='SkillLevelList'),
  resetPassword?: boolean(name='ResetPassword'),
}

model CreateUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    displayName?: string(name='DisplayName'),
    extension?: string(name='Extension'),
    email?: string(name='Email'),
    loginName?: string(name='LoginName'),
    workMode?: string(name='WorkMode'),
    mobile?: string(name='Mobile'),
    userId?: string(name='UserId'),
  }(name='Data'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUserWithOptions(request: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model ListPrivilegesOfUserRequest {
  instanceId?: string(name='InstanceId'),
}

model ListPrivilegesOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      instanceId?: string(name='InstanceId'),
      scope?: string(name='Scope'),
      name?: string(name='Name'),
    }
  ](name='Data'),
}

model ListPrivilegesOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrivilegesOfUserResponseBody(name='body'),
}

async function listPrivilegesOfUserWithOptions(request: ListPrivilegesOfUserRequest, runtime: Util.RuntimeOptions): ListPrivilegesOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPrivilegesOfUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPrivilegesOfUser(request: ListPrivilegesOfUserRequest): ListPrivilegesOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPrivilegesOfUserWithOptions(request, runtime);
}

model AddPersonalNumbersToUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  numberList?: string(name='NumberList'),
}

model AddPersonalNumbersToUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ string ](name='Data'),
}

model AddPersonalNumbersToUserResponse = {
  headers: map[string]string(name='headers'),
  body: AddPersonalNumbersToUserResponseBody(name='body'),
}

async function addPersonalNumbersToUserWithOptions(request: AddPersonalNumbersToUserRequest, runtime: Util.RuntimeOptions): AddPersonalNumbersToUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddPersonalNumbersToUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addPersonalNumbersToUser(request: AddPersonalNumbersToUserRequest): AddPersonalNumbersToUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPersonalNumbersToUserWithOptions(request, runtime);
}

model ListHistoricalAgentReportRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  agentIdList?: string(name='AgentIdList'),
  startTime?: long(name='StartTime'),
  stopTime?: long(name='StopTime'),
  instanceId?: string(name='InstanceId'),
}

model ListHistoricalAgentReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        agentName?: string(name='AgentName'),
        agentId?: string(name='AgentId'),
        inbound?: {
          averageRingTime?: float(name='AverageRingTime'),
          callsHandled?: long(name='CallsHandled'),
          totalWorkTime?: long(name='TotalWorkTime'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          maxWorkTime?: long(name='MaxWorkTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          callsRinged?: long(name='CallsRinged'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          totalRingTime?: long(name='TotalRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxRingTime?: long(name='MaxRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          callsOffered?: long(name='CallsOffered'),
          maxHoldTime?: long(name='MaxHoldTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          satisfactionRate?: float(name='SatisfactionRate'),
          callsHold?: long(name='CallsHold'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          handleRate?: float(name='HandleRate'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          averageHoldTime?: float(name='AverageHoldTime'),
        }(name='Inbound'),
        outbound?: {
          averageRingTime?: float(name='AverageRingTime'),
          callsDialed?: long(name='CallsDialed'),
          callsAnswered?: long(name='CallsAnswered'),
          totalWorkTime?: long(name='TotalWorkTime'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          maxWorkTime?: long(name='MaxWorkTime'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          callsRinged?: long(name='CallsRinged'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          totalRingTime?: long(name='TotalRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxRingTime?: long(name='MaxRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          maxDialingTime?: long(name='MaxDialingTime'),
          answerRate?: float(name='AnswerRate'),
          maxHoldTime?: long(name='MaxHoldTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          satisfactionRate?: float(name='SatisfactionRate'),
          callsHold?: long(name='CallsHold'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          averageHoldTime?: float(name='AverageHoldTime'),
          averageDialingTime?: float(name='AverageDialingTime'),
        }(name='Outbound'),
        overall?: {
          totalTalkTime?: long(name='TotalTalkTime'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          occupancyRate?: float(name='OccupancyRate'),
          totalWorkTime?: long(name='TotalWorkTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          averageBreakTime?: float(name='AverageBreakTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          satisfactionRate?: float(name='SatisfactionRate'),
          maxBreakTime?: long(name='MaxBreakTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          maxReadyTime?: long(name='MaxReadyTime'),
          averageReadyTime?: float(name='AverageReadyTime'),
          averageHoldTime?: float(name='AverageHoldTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalBreakTime?: long(name='TotalBreakTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          totalCalls?: long(name='TotalCalls'),
        }(name='Overall'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListHistoricalAgentReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListHistoricalAgentReportResponseBody(name='body'),
}

async function listHistoricalAgentReportWithOptions(request: ListHistoricalAgentReportRequest, runtime: Util.RuntimeOptions): ListHistoricalAgentReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHistoricalAgentReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHistoricalAgentReport(request: ListHistoricalAgentReportRequest): ListHistoricalAgentReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHistoricalAgentReportWithOptions(request, runtime);
}

model InterceptCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  interceptedUserId?: string(name='InterceptedUserId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
}

model InterceptCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model InterceptCallResponse = {
  headers: map[string]string(name='headers'),
  body: InterceptCallResponseBody(name='body'),
}

async function interceptCallWithOptions(request: InterceptCallRequest, runtime: Util.RuntimeOptions): InterceptCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InterceptCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function interceptCall(request: InterceptCallRequest): InterceptCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return interceptCallWithOptions(request, runtime);
}

model ListContactFlowsRequest {
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  type?: string(name='Type'),
}

model ListContactFlowsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        type?: string(name='Type'),
        definition?: string(name='Definition'),
        draftId?: string(name='DraftId'),
        description?: string(name='Description'),
        updatedTime?: string(name='UpdatedTime'),
        editor?: string(name='Editor'),
        published?: boolean(name='Published'),
        instanceId?: string(name='InstanceId'),
        name?: string(name='Name'),
        contactFlowId?: string(name='ContactFlowId'),
        createdTime?: string(name='CreatedTime'),
        numberList?: [ string ](name='NumberList'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListContactFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListContactFlowsResponseBody(name='body'),
}

async function listContactFlowsWithOptions(request: ListContactFlowsRequest, runtime: Util.RuntimeOptions): ListContactFlowsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListContactFlows', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listContactFlows(request: ListContactFlowsRequest): ListContactFlowsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listContactFlowsWithOptions(request, runtime);
}

model ListPersonalNumbersOfUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  isMember?: boolean(name='IsMember'),
  searchPattern?: string(name='SearchPattern'),
}

model ListPersonalNumbersOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        active?: boolean(name='Active'),
        number?: string(name='Number'),
        city?: string(name='City'),
        instanceId?: string(name='InstanceId'),
        contactFlowId?: string(name='ContactFlowId'),
        province?: string(name='Province'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListPersonalNumbersOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListPersonalNumbersOfUserResponseBody(name='body'),
}

async function listPersonalNumbersOfUserWithOptions(request: ListPersonalNumbersOfUserRequest, runtime: Util.RuntimeOptions): ListPersonalNumbersOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPersonalNumbersOfUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPersonalNumbersOfUser(request: ListPersonalNumbersOfUserRequest): ListPersonalNumbersOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPersonalNumbersOfUserWithOptions(request, runtime);
}

model StartPredictiveCallRequest {
  instanceId?: string(name='InstanceId'),
  caller?: string(name='Caller'),
  callee?: string(name='Callee'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  contactFlowId?: string(name='ContactFlowId'),
  tags?: string(name='Tags'),
  contactFlowVariables?: string(name='ContactFlowVariables'),
}

model StartPredictiveCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      deviceState?: string(name='DeviceState'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model StartPredictiveCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartPredictiveCallResponseBody(name='body'),
}

async function startPredictiveCallWithOptions(request: StartPredictiveCallRequest, runtime: Util.RuntimeOptions): StartPredictiveCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartPredictiveCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startPredictiveCall(request: StartPredictiveCallRequest): StartPredictiveCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return startPredictiveCallWithOptions(request, runtime);
}

model ListIntervalInstanceReportRequest {
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  interval?: string(name='Interval'),
}

model ListIntervalInstanceReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      statsTime?: long(name='StatsTime'),
      inbound?: {
        averageRingTime?: float(name='AverageRingTime'),
        callsVoicemail?: long(name='CallsVoicemail'),
        maxAbandonedInIVRTime?: long(name='MaxAbandonedInIVRTime'),
        callsHandled?: long(name='CallsHandled'),
        callsIVRException?: long(name='CallsIVRException'),
        callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
        maxWorkTime?: long(name='MaxWorkTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        maxAbandonTime?: long(name='MaxAbandonTime'),
        averageAbandonTime?: float(name='AverageAbandonTime'),
        abandonedRate?: float(name='AbandonedRate'),
        callsRinged?: long(name='CallsRinged'),
        callsQueuingFailed?: long(name='CallsQueuingFailed'),
        totalRingTime?: long(name='TotalRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
        callsBlindTransferred?: long(name='CallsBlindTransferred'),
        averageAbandonedInIVRTime?: float(name='AverageAbandonedInIVRTime'),
        averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
        maxWaitTime?: long(name='MaxWaitTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
        totalAbandonedInIVRTime?: long(name='TotalAbandonedInIVRTime'),
        callsQueuingOverflow?: long(name='CallsQueuingOverflow'),
        callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
        totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
        totalWorkTime?: long(name='TotalWorkTime'),
        averageWaitTime?: float(name='AverageWaitTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsQueued?: long(name='CallsQueued'),
        averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        callsAbandoned?: long(name='CallsAbandoned'),
        maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
        callsAbandonedInVoiceNavigator?: long(name='CallsAbandonedInVoiceNavigator'),
        totalWaitTime?: long(name='TotalWaitTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxRingTime?: long(name='MaxRingTime'),
        totalAbandonTime?: long(name='TotalAbandonTime'),
        callsOffered?: long(name='CallsOffered'),
        callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
        serviceLevel20?: float(name='ServiceLevel20'),
        maxHoldTime?: long(name='MaxHoldTime'),
        callsForwardToOutsideNumber?: long(name='CallsForwardToOutsideNumber'),
        satisfactionRate?: float(name='SatisfactionRate'),
        callsHold?: long(name='CallsHold'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        handleRate?: float(name='HandleRate'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        averageHoldTime?: float(name='AverageHoldTime'),
        callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
        totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
      }(name='Inbound'),
      outbound?: {
        averageRingTime?: float(name='AverageRingTime'),
        callsDialed?: long(name='CallsDialed'),
        callsAnswered?: long(name='CallsAnswered'),
        totalWorkTime?: long(name='TotalWorkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        totalDialingTime?: long(name='TotalDialingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        callsRinged?: long(name='CallsRinged'),
        totalRingTime?: long(name='TotalRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxRingTime?: long(name='MaxRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        maxDialingTime?: long(name='MaxDialingTime'),
        callsBlindTransferred?: long(name='CallsBlindTransferred'),
        answerRate?: float(name='AnswerRate'),
        maxHoldTime?: long(name='MaxHoldTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
        callsHold?: long(name='CallsHold'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageDialingTime?: float(name='AverageDialingTime'),
      }(name='Outbound'),
      overall?: {
        totalTalkTime?: long(name='TotalTalkTime'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        occupancyRate?: float(name='OccupancyRate'),
        totalWorkTime?: long(name='TotalWorkTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        averageBreakTime?: float(name='AverageBreakTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        maxBreakTime?: long(name='MaxBreakTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        maxReadyTime?: long(name='MaxReadyTime'),
        averageReadyTime?: float(name='AverageReadyTime'),
        averageHoldTime?: float(name='AverageHoldTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
        totalBreakTime?: long(name='TotalBreakTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        totalCalls?: long(name='TotalCalls'),
      }(name='Overall'),
    }
  ](name='Data'),
}

model ListIntervalInstanceReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntervalInstanceReportResponseBody(name='body'),
}

async function listIntervalInstanceReportWithOptions(request: ListIntervalInstanceReportRequest, runtime: Util.RuntimeOptions): ListIntervalInstanceReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIntervalInstanceReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIntervalInstanceReport(request: ListIntervalInstanceReportRequest): ListIntervalInstanceReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntervalInstanceReportWithOptions(request, runtime);
}

model CreateInstanceRequest {
  name?: string(name='Name'),
  description?: string(name='Description'),
  domainName?: string(name='DomainName'),
  numberList?: string(name='NumberList'),
  adminRamIdList?: string(name='AdminRamIdList'),
}

model CreateInstanceResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model RemoveSkillGroupsFromUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model RemoveSkillGroupsFromUserResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model RemoveSkillGroupsFromUserResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSkillGroupsFromUserResponseBody(name='body'),
}

async function removeSkillGroupsFromUserWithOptions(request: RemoveSkillGroupsFromUserRequest, runtime: Util.RuntimeOptions): RemoveSkillGroupsFromUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveSkillGroupsFromUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeSkillGroupsFromUser(request: RemoveSkillGroupsFromUserRequest): RemoveSkillGroupsFromUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSkillGroupsFromUserWithOptions(request, runtime);
}

model ListRealtimeAgentStatesRequest {
  skillGroupId?: string(name='SkillGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
  agentIdList?: string(name='AgentIdList'),
  stateList?: string(name='StateList'),
  agentName?: string(name='AgentName'),
}

model ListRealtimeAgentStatesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        extension?: string(name='Extension'),
        stateCode?: string(name='StateCode'),
        state?: string(name='State'),
        agentId?: string(name='AgentId'),
        stateTime?: long(name='StateTime'),
        agentName?: string(name='AgentName'),
        instanceId?: string(name='InstanceId'),
        counterParty?: string(name='CounterParty'),
        skillGroupIdList?: [ string ](name='SkillGroupIdList'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListRealtimeAgentStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeAgentStatesResponseBody(name='body'),
}

async function listRealtimeAgentStatesWithOptions(request: ListRealtimeAgentStatesRequest, runtime: Util.RuntimeOptions): ListRealtimeAgentStatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRealtimeAgentStates', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRealtimeAgentStates(request: ListRealtimeAgentStatesRequest): ListRealtimeAgentStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeAgentStatesWithOptions(request, runtime);
}

model LaunchAuthenticationRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  contactFlowId?: string(name='ContactFlowId'),
}

model LaunchAuthenticationResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model LaunchAuthenticationResponse = {
  headers: map[string]string(name='headers'),
  body: LaunchAuthenticationResponseBody(name='body'),
}

async function launchAuthenticationWithOptions(request: LaunchAuthenticationRequest, runtime: Util.RuntimeOptions): LaunchAuthenticationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LaunchAuthentication', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function launchAuthentication(request: LaunchAuthenticationRequest): LaunchAuthenticationResponse {
  var runtime = new Util.RuntimeOptions{};
  return launchAuthenticationWithOptions(request, runtime);
}

model ListInstancesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListInstancesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        status?: string(name='Status'),
        consoleUrl?: string(name='ConsoleUrl'),
        description?: string(name='Description'),
        createTime?: long(name='CreateTime'),
        aliyunUid?: string(name='AliyunUid'),
        name?: string(name='Name'),
        domainName?: string(name='DomainName'),
        id?: string(name='Id'),
        adminList?: [ 
          {
            displayName?: string(name='DisplayName'),
            extension?: string(name='Extension'),
            loginName?: string(name='LoginName'),
            email?: string(name='Email'),
            workMode?: string(name='WorkMode'),
            mobile?: string(name='Mobile'),
            userId?: string(name='UserId'),
            roleName?: string(name='RoleName'),
            instanceId?: string(name='InstanceId'),
            roleId?: string(name='RoleId'),
          }
        ](name='AdminList'),
        numberList?: [ 
          {
            number?: string(name='Number'),
          }
        ](name='NumberList'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListInstances', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model GetHistoricalInstanceReportRequest {
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model GetHistoricalInstanceReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    inbound?: {
      averageRingTime?: float(name='AverageRingTime'),
      callsVoicemail?: long(name='CallsVoicemail'),
      maxAbandonedInIVRTime?: long(name='MaxAbandonedInIVRTime'),
      callsHandled?: long(name='CallsHandled'),
      callsIVRException?: long(name='CallsIVRException'),
      callsAbandonedInIVR?: long(name='CallsAbandonedInIVR'),
      maxWorkTime?: long(name='MaxWorkTime'),
      totalHoldTime?: long(name='TotalHoldTime'),
      maxAbandonTime?: long(name='MaxAbandonTime'),
      averageAbandonTime?: float(name='AverageAbandonTime'),
      callsRinged?: long(name='CallsRinged'),
      callsQueuingFailed?: long(name='CallsQueuingFailed'),
      totalRingTime?: long(name='TotalRingTime'),
      abandonRate?: float(name='AbandonRate'),
      totalTalkTime?: long(name='TotalTalkTime'),
      maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
      callsBlindTransferred?: long(name='CallsBlindTransferred'),
      averageAbandonedInIVRTime?: float(name='AverageAbandonedInIVRTime'),
      averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
      maxWaitTime?: long(name='MaxWaitTime'),
      averageTalkTime?: float(name='AverageTalkTime'),
      callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
      totalAbandonedInIVRTime?: long(name='TotalAbandonedInIVRTime'),
      callsQueuingOverflow?: long(name='CallsQueuingOverflow'),
      callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
      totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
      totalWorkTime?: long(name='TotalWorkTime'),
      averageWaitTime?: float(name='AverageWaitTime'),
      averageWorkTime?: float(name='AverageWorkTime'),
      callsQueued?: long(name='CallsQueued'),
      averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      callsAbandoned?: long(name='CallsAbandoned'),
      maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
      callsAbandonedInVoiceNavigator?: long(name='CallsAbandonedInVoiceNavigator'),
      totalWaitTime?: long(name='TotalWaitTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxRingTime?: long(name='MaxRingTime'),
      totalAbandonTime?: long(name='TotalAbandonTime'),
      callsOffered?: long(name='CallsOffered'),
      callsQueuingTimeout?: long(name='CallsQueuingTimeout'),
      serviceLevel20?: float(name='ServiceLevel20'),
      maxHoldTime?: long(name='MaxHoldTime'),
      callsForwardToOutsideNumber?: long(name='CallsForwardToOutsideNumber'),
      satisfactionRate?: float(name='SatisfactionRate'),
      callsHold?: long(name='CallsHold'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      handleRate?: float(name='HandleRate'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      averageHoldTime?: float(name='AverageHoldTime'),
      callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
      totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
    }(name='Inbound'),
    outbound?: {
      averageRingTime?: float(name='AverageRingTime'),
      callsDialed?: long(name='CallsDialed'),
      callsAnswered?: long(name='CallsAnswered'),
      totalWorkTime?: long(name='TotalWorkTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      totalDialingTime?: long(name='TotalDialingTime'),
      totalHoldTime?: long(name='TotalHoldTime'),
      averageWorkTime?: float(name='AverageWorkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      callsRinged?: long(name='CallsRinged'),
      totalRingTime?: long(name='TotalRingTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      maxRingTime?: long(name='MaxRingTime'),
      totalTalkTime?: long(name='TotalTalkTime'),
      maxDialingTime?: long(name='MaxDialingTime'),
      callsBlindTransferred?: long(name='CallsBlindTransferred'),
      answerRate?: float(name='AnswerRate'),
      maxHoldTime?: long(name='MaxHoldTime'),
      averageTalkTime?: float(name='AverageTalkTime'),
      satisfactionRate?: float(name='SatisfactionRate'),
      callsAttendedTransferred?: long(name='CallsAttendedTransferred'),
      callsHold?: int32(name='CallsHold'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      averageHoldTime?: float(name='AverageHoldTime'),
      averageDialingTime?: float(name='AverageDialingTime'),
    }(name='Outbound'),
    overall?: {
      totalTalkTime?: long(name='TotalTalkTime'),
      totalLoggedInTime?: long(name='TotalLoggedInTime'),
      occupancyRate?: float(name='OccupancyRate'),
      totalWorkTime?: long(name='TotalWorkTime'),
      maxHoldTime?: long(name='MaxHoldTime'),
      maxWorkTime?: long(name='MaxWorkTime'),
      averageBreakTime?: float(name='AverageBreakTime'),
      totalHoldTime?: long(name='TotalHoldTime'),
      satisfactionRate?: float(name='SatisfactionRate'),
      maxBreakTime?: long(name='MaxBreakTime'),
      averageWorkTime?: float(name='AverageWorkTime'),
      averageTalkTime?: float(name='AverageTalkTime'),
      satisfactionIndex?: float(name='SatisfactionIndex'),
      satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
      satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
      maxReadyTime?: long(name='MaxReadyTime'),
      averageReadyTime?: float(name='AverageReadyTime'),
      averageHoldTime?: float(name='AverageHoldTime'),
      totalReadyTime?: long(name='TotalReadyTime'),
      totalBreakTime?: long(name='TotalBreakTime'),
      maxTalkTime?: long(name='MaxTalkTime'),
      totalCalls?: long(name='TotalCalls'),
    }(name='Overall'),
  }(name='Data'),
}

model GetHistoricalInstanceReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoricalInstanceReportResponseBody(name='body'),
}

async function getHistoricalInstanceReportWithOptions(request: GetHistoricalInstanceReportRequest, runtime: Util.RuntimeOptions): GetHistoricalInstanceReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHistoricalInstanceReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHistoricalInstanceReport(request: GetHistoricalInstanceReportRequest): GetHistoricalInstanceReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistoricalInstanceReportWithOptions(request, runtime);
}

model RemoveUsersRequest {
  instanceId?: string(name='InstanceId'),
  userIdList?: string(name='UserIdList'),
}

model RemoveUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model RemoveUsersResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveUsersResponseBody(name='body'),
}

async function removeUsersWithOptions(request: RemoveUsersRequest, runtime: Util.RuntimeOptions): RemoveUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveUsers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeUsers(request: RemoveUsersRequest): RemoveUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeUsersWithOptions(request, runtime);
}

model StartBack2BackCallRequest {
  instanceId?: string(name='InstanceId'),
  caller?: string(name='Caller'),
  callee?: string(name='Callee'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  broker?: string(name='Broker'),
  additionalBroker?: string(name='AdditionalBroker'),
  tags?: string(name='Tags'),
}

model StartBack2BackCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      uri?: string(name='Uri'),
      deviceState?: string(name='DeviceState'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model StartBack2BackCallResponse = {
  headers: map[string]string(name='headers'),
  body: StartBack2BackCallResponseBody(name='body'),
}

async function startBack2BackCallWithOptions(request: StartBack2BackCallRequest, runtime: Util.RuntimeOptions): StartBack2BackCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartBack2BackCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startBack2BackCall(request: StartBack2BackCallRequest): StartBack2BackCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return startBack2BackCallWithOptions(request, runtime);
}

model GetUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  extension?: string(name='Extension'),
}

model GetUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    displayName?: string(name='DisplayName'),
    extension?: string(name='Extension'),
    loginName?: string(name='LoginName'),
    email?: string(name='Email'),
    workMode?: string(name='WorkMode'),
    mobile?: string(name='Mobile'),
    userId?: string(name='UserId'),
    roleName?: string(name='RoleName'),
    instanceId?: string(name='InstanceId'),
    roleId?: string(name='RoleId'),
  }(name='Data'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model RemovePhoneNumbersFromSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
  skillGroupId?: string(name='SkillGroupId'),
}

model RemovePhoneNumbersFromSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemovePhoneNumbersFromSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePhoneNumbersFromSkillGroupResponseBody(name='body'),
}

async function removePhoneNumbersFromSkillGroupWithOptions(request: RemovePhoneNumbersFromSkillGroupRequest, runtime: Util.RuntimeOptions): RemovePhoneNumbersFromSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemovePhoneNumbersFromSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removePhoneNumbersFromSkillGroup(request: RemovePhoneNumbersFromSkillGroupRequest): RemovePhoneNumbersFromSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePhoneNumbersFromSkillGroupWithOptions(request, runtime);
}

model CompleteAttendedTransferRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
}

model CompleteAttendedTransferResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    contextId?: long(name='ContextId'),
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model CompleteAttendedTransferResponse = {
  headers: map[string]string(name='headers'),
  body: CompleteAttendedTransferResponseBody(name='body'),
}

async function completeAttendedTransferWithOptions(request: CompleteAttendedTransferRequest, runtime: Util.RuntimeOptions): CompleteAttendedTransferResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CompleteAttendedTransfer', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function completeAttendedTransfer(request: CompleteAttendedTransferRequest): CompleteAttendedTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return completeAttendedTransferWithOptions(request, runtime);
}

model ResetUserPasswordRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  password?: string(name='Password'),
}

model ResetUserPasswordResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ResetUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ResetUserPasswordResponseBody(name='body'),
}

async function resetUserPasswordWithOptions(request: ResetUserPasswordRequest, runtime: Util.RuntimeOptions): ResetUserPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetUserPassword', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetUserPassword(request: ResetUserPasswordRequest): ResetUserPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetUserPasswordWithOptions(request, runtime);
}

model GetTurnServerListRequest {
  instanceId?: string(name='InstanceId'),
}

model GetTurnServerListResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model GetTurnServerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetTurnServerListResponseBody(name='body'),
}

async function getTurnServerListWithOptions(request: GetTurnServerListRequest, runtime: Util.RuntimeOptions): GetTurnServerListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTurnServerList', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTurnServerList(request: GetTurnServerListRequest): GetTurnServerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTurnServerListWithOptions(request, runtime);
}

model GetNumberLocationRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
}

model GetNumberLocationResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    number?: string(name='Number'),
    city?: string(name='City'),
    province?: string(name='Province'),
  }(name='Data'),
}

model GetNumberLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GetNumberLocationResponseBody(name='body'),
}

async function getNumberLocationWithOptions(request: GetNumberLocationRequest, runtime: Util.RuntimeOptions): GetNumberLocationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNumberLocation', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNumberLocation(request: GetNumberLocationRequest): GetNumberLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNumberLocationWithOptions(request, runtime);
}

model ListRamUsersRequest {
  instanceId?: string(name='InstanceId'),
  searchPattern?: string(name='SearchPattern'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListRamUsersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        displayName?: string(name='DisplayName'),
        email?: string(name='Email'),
        loginName?: string(name='LoginName'),
        mobile?: string(name='Mobile'),
        aliyunUid?: long(name='AliyunUid'),
        primary?: boolean(name='Primary'),
        ramId?: string(name='RamId'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListRamUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListRamUsersResponseBody(name='body'),
}

async function listRamUsersWithOptions(request: ListRamUsersRequest, runtime: Util.RuntimeOptions): ListRamUsersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRamUsers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRamUsers(request: ListRamUsersRequest): ListRamUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRamUsersWithOptions(request, runtime);
}

model MuteCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  channelId?: string(name='ChannelId'),
}

model MuteCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model MuteCallResponse = {
  headers: map[string]string(name='headers'),
  body: MuteCallResponseBody(name='body'),
}

async function muteCallWithOptions(request: MuteCallRequest, runtime: Util.RuntimeOptions): MuteCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MuteCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function muteCall(request: MuteCallRequest): MuteCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return muteCallWithOptions(request, runtime);
}

model AnswerCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
}

model AnswerCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    contextId?: long(name='ContextId'),
    callContext?: {
      jobId?: string(name='JobId'),
      instanceId?: string(name='InstanceId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model AnswerCallResponse = {
  headers: map[string]string(name='headers'),
  body: AnswerCallResponseBody(name='body'),
}

async function answerCallWithOptions(request: AnswerCallRequest, runtime: Util.RuntimeOptions): AnswerCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AnswerCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function answerCall(request: AnswerCallRequest): AnswerCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return answerCallWithOptions(request, runtime);
}

model ListIntervalAgentReportRequest {
  agentId?: string(name='AgentId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  interval?: string(name='Interval'),
}

model ListIntervalAgentReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      statsTime?: long(name='StatsTime'),
      inbound?: {
        averageRingTime?: float(name='AverageRingTime'),
        callsHandled?: long(name='CallsHandled'),
        totalWorkTime?: long(name='TotalWorkTime'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        maxWorkTime?: long(name='MaxWorkTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        callsRinged?: long(name='CallsRinged'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        totalRingTime?: long(name='TotalRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxRingTime?: long(name='MaxRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        callsOffered?: long(name='CallsOffered'),
        maxHoldTime?: long(name='MaxHoldTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        callsHold?: long(name='CallsHold'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        handleRate?: float(name='HandleRate'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        averageHoldTime?: float(name='AverageHoldTime'),
      }(name='Inbound'),
      outbound?: {
        averageRingTime?: float(name='AverageRingTime'),
        callsDialed?: long(name='CallsDialed'),
        callsAnswered?: long(name='CallsAnswered'),
        totalWorkTime?: long(name='TotalWorkTime'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
        maxWorkTime?: long(name='MaxWorkTime'),
        totalDialingTime?: long(name='TotalDialingTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        callsRinged?: long(name='CallsRinged'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
        totalRingTime?: long(name='TotalRingTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        maxRingTime?: long(name='MaxRingTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        maxDialingTime?: long(name='MaxDialingTime'),
        answerRate?: float(name='AnswerRate'),
        maxHoldTime?: long(name='MaxHoldTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        callsHold?: long(name='CallsHold'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageDialingTime?: float(name='AverageDialingTime'),
      }(name='Outbound'),
      overall?: {
        occupancyRate?: float(name='OccupancyRate'),
        totalWorkTime?: long(name='TotalWorkTime'),
        maxWorkTime?: long(name='MaxWorkTime'),
        totalHoldTime?: long(name='TotalHoldTime'),
        averageWorkTime?: float(name='AverageWorkTime'),
        maxBreakTime?: long(name='MaxBreakTime'),
        satisfactionIndex?: float(name='SatisfactionIndex'),
        maxReadyTime?: long(name='MaxReadyTime'),
        maxTalkTime?: long(name='MaxTalkTime'),
        totalReadyTime?: long(name='TotalReadyTime'),
        lastCheckoutTime?: long(name='LastCheckoutTime'),
        totalCalls?: long(name='TotalCalls'),
        totalLoggedInTime?: long(name='TotalLoggedInTime'),
        totalTalkTime?: long(name='TotalTalkTime'),
        maxHoldTime?: long(name='MaxHoldTime'),
        averageBreakTime?: float(name='AverageBreakTime'),
        averageTalkTime?: float(name='AverageTalkTime'),
        satisfactionRate?: float(name='SatisfactionRate'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
        firstCheckInTime?: long(name='FirstCheckInTime'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
        averageHoldTime?: float(name='AverageHoldTime'),
        averageReadyTime?: float(name='AverageReadyTime'),
        totalBreakTime?: long(name='TotalBreakTime'),
      }(name='Overall'),
    }
  ](name='Data'),
}

model ListIntervalAgentReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntervalAgentReportResponseBody(name='body'),
}

async function listIntervalAgentReportWithOptions(request: ListIntervalAgentReportRequest, runtime: Util.RuntimeOptions): ListIntervalAgentReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListIntervalAgentReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listIntervalAgentReport(request: ListIntervalAgentReportRequest): ListIntervalAgentReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listIntervalAgentReportWithOptions(request, runtime);
}

model ListCallDetailRecordsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  contactType?: string(name='ContactType'),
  contactDisposition?: string(name='ContactDisposition'),
  contactId?: string(name='ContactId'),
  agentId?: string(name='AgentId'),
  skillGroupId?: string(name='SkillGroupId'),
  sortOrder?: string(name='SortOrder'),
  instanceId?: string(name='InstanceId'),
  orderByField?: string(name='OrderByField'),
  criteria?: string(name='Criteria'),
  callingNumber?: string(name='CallingNumber'),
  calledNumber?: string(name='CalledNumber'),
  satisfactionList?: string(name='SatisfactionList'),
  satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel'),
  satisfactionDescriptionList?: string(name='SatisfactionDescriptionList'),
}

model ListCallDetailRecordsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        contactDisposition?: string(name='ContactDisposition'),
        contactType?: string(name='ContactType'),
        establishedTime?: long(name='EstablishedTime'),
        calledNumber?: string(name='CalledNumber'),
        additionalBroker?: string(name='AdditionalBroker'),
        satisfactionIndex?: int32(name='SatisfactionIndex'),
        satisfactionSurveyChannel?: string(name='SatisfactionSurveyChannel'),
        releaseTime?: long(name='ReleaseTime'),
        waitTime?: long(name='WaitTime'),
        skillGroupNames?: string(name='SkillGroupNames'),
        ivrTime?: long(name='IvrTime'),
        satisfactionDescription?: string(name='SatisfactionDescription'),
        releaseInitiator?: string(name='ReleaseInitiator'),
        agentIds?: string(name='AgentIds'),
        callDuration?: string(name='CallDuration'),
        recordingReady?: boolean(name='RecordingReady'),
        instanceId?: string(name='InstanceId'),
        ringTime?: long(name='RingTime'),
        satisfactionSurveyOffered?: boolean(name='SatisfactionSurveyOffered'),
        agentNames?: string(name='AgentNames'),
        startTime?: long(name='StartTime'),
        contactId?: string(name='ContactId'),
        recordingDuration?: long(name='RecordingDuration'),
        callingNumber?: string(name='CallingNumber'),
        queueTime?: long(name='QueueTime'),
        broker?: string(name='Broker'),
        skillGroupIds?: string(name='SkillGroupIds'),
        callerLocation?: string(name='CallerLocation'),
        calleeLocation?: string(name='CalleeLocation'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListCallDetailRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCallDetailRecordsResponseBody(name='body'),
}

async function listCallDetailRecordsWithOptions(request: ListCallDetailRecordsRequest, runtime: Util.RuntimeOptions): ListCallDetailRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListCallDetailRecords', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listCallDetailRecords(request: ListCallDetailRecordsRequest): ListCallDetailRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCallDetailRecordsWithOptions(request, runtime);
}

model RemovePhoneNumbersRequest {
  instanceId?: string(name='InstanceId'),
  numberList?: string(name='NumberList'),
}

model RemovePhoneNumbersResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  failureList?: [ string ](name='FailureList'),
  params?: [ string ](name='Params'),
}

model RemovePhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePhoneNumbersResponseBody(name='body'),
}

async function removePhoneNumbersWithOptions(request: RemovePhoneNumbersRequest, runtime: Util.RuntimeOptions): RemovePhoneNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemovePhoneNumbers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removePhoneNumbers(request: RemovePhoneNumbersRequest): RemovePhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePhoneNumbersWithOptions(request, runtime);
}

model CancelAttendedTransferRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
}

model CancelAttendedTransferResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    contextId?: long(name='ContextId'),
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model CancelAttendedTransferResponse = {
  headers: map[string]string(name='headers'),
  body: CancelAttendedTransferResponseBody(name='body'),
}

async function cancelAttendedTransferWithOptions(request: CancelAttendedTransferRequest, runtime: Util.RuntimeOptions): CancelAttendedTransferResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelAttendedTransfer', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelAttendedTransfer(request: CancelAttendedTransferRequest): CancelAttendedTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAttendedTransferWithOptions(request, runtime);
}

model TakeBreakRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  code?: string(name='Code'),
}

model TakeBreakResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    extension?: string(name='Extension'),
    heartbeat?: long(name='Heartbeat'),
    workMode?: string(name='WorkMode'),
    deviceId?: string(name='DeviceId'),
    userId?: string(name='UserId'),
    reserved?: long(name='Reserved'),
    breakCode?: string(name='BreakCode'),
    instanceId?: string(name='InstanceId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    mobile?: string(name='Mobile'),
    jobId?: string(name='JobId'),
    userState?: string(name='UserState'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
  }(name='Data'),
}

model TakeBreakResponse = {
  headers: map[string]string(name='headers'),
  body: TakeBreakResponseBody(name='body'),
}

async function takeBreakWithOptions(request: TakeBreakRequest, runtime: Util.RuntimeOptions): TakeBreakResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TakeBreak', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function takeBreak(request: TakeBreakRequest): TakeBreakResponse {
  var runtime = new Util.RuntimeOptions{};
  return takeBreakWithOptions(request, runtime);
}

model ListHistoricalSkillGroupReportRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
}

model ListHistoricalSkillGroupReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        skillGroupName?: string(name='SkillGroupName'),
        skillGroupId?: string(name='SkillGroupId'),
        inbound?: {
          averageRingTime?: float(name='AverageRingTime'),
          callsOverflow?: long(name='CallsOverflow'),
          callsAbandonedInRing?: long(name='CallsAbandonedInRing'),
          callsHandled?: long(name='CallsHandled'),
          totalWorkTime?: long(name='TotalWorkTime'),
          totalAbandonedInRingTime?: long(name='TotalAbandonedInRingTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          averageWaitTime?: float(name='AverageWaitTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          maxAbandonTime?: long(name='MaxAbandonTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsQueued?: long(name='CallsQueued'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          averageAbandonedInRingTime?: float(name='AverageAbandonedInRingTime'),
          averageAbandonTime?: float(name='AverageAbandonTime'),
          callsRinged?: long(name='CallsRinged'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsAbandoned?: long(name='CallsAbandoned'),
          maxAbandonedInQueueTime?: long(name='MaxAbandonedInQueueTime'),
          totalWaitTime?: long(name='TotalWaitTime'),
          totalRingTime?: long(name='TotalRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxRingTime?: long(name='MaxRingTime'),
          abandonRate?: float(name='AbandonRate'),
          totalTalkTime?: long(name='TotalTalkTime'),
          totalAbandonTime?: long(name='TotalAbandonTime'),
          callsOffered?: long(name='CallsOffered'),
          maxAbandonedInRingTime?: long(name='MaxAbandonedInRingTime'),
          maxWaitTime?: long(name='MaxWaitTime'),
          averageAbandonedInQueueTime?: float(name='AverageAbandonedInQueueTime'),
          serviceLevel20?: float(name='ServiceLevel20'),
          maxHoldTime?: long(name='MaxHoldTime'),
          satisfactionRate?: float(name='SatisfactionRate'),
          averageTalkTime?: float(name='AverageTalkTime'),
          callsHold?: long(name='CallsHold'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          handleRate?: float(name='HandleRate'),
          callsTimeout?: long(name='CallsTimeout'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          averageHoldTime?: float(name='AverageHoldTime'),
          totalAbandonedInQueueTime?: long(name='TotalAbandonedInQueueTime'),
          callsAbandonedInQueue?: long(name='CallsAbandonedInQueue'),
        }(name='Inbound'),
        outbound?: {
          averageRingTime?: float(name='AverageRingTime'),
          callsDialed?: long(name='CallsDialed'),
          callsAnswered?: long(name='CallsAnswered'),
          totalWorkTime?: long(name='TotalWorkTime'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut'),
          maxWorkTime?: long(name='MaxWorkTime'),
          totalDialingTime?: long(name='TotalDialingTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          callsRinged?: long(name='CallsRinged'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut'),
          totalRingTime?: long(name='TotalRingTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          maxRingTime?: long(name='MaxRingTime'),
          totalTalkTime?: long(name='TotalTalkTime'),
          maxDialingTime?: long(name='MaxDialingTime'),
          answerRate?: float(name='AnswerRate'),
          maxHoldTime?: long(name='MaxHoldTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          satisfactionRate?: float(name='SatisfactionRate'),
          callsHold?: long(name='CallsHold'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          averageHoldTime?: float(name='AverageHoldTime'),
          averageDialingTime?: float(name='AverageDialingTime'),
        }(name='Outbound'),
        overall?: {
          totalTalkTime?: long(name='TotalTalkTime'),
          totalLoggedInTime?: long(name='TotalLoggedInTime'),
          occupancyRate?: float(name='OccupancyRate'),
          totalWorkTime?: long(name='TotalWorkTime'),
          maxHoldTime?: long(name='MaxHoldTime'),
          maxWorkTime?: long(name='MaxWorkTime'),
          averageBreakTime?: float(name='AverageBreakTime'),
          totalHoldTime?: long(name='TotalHoldTime'),
          satisfactionRate?: float(name='SatisfactionRate'),
          maxBreakTime?: long(name='MaxBreakTime'),
          averageWorkTime?: float(name='AverageWorkTime'),
          averageTalkTime?: float(name='AverageTalkTime'),
          satisfactionIndex?: float(name='SatisfactionIndex'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded'),
          maxReadyTime?: long(name='MaxReadyTime'),
          averageReadyTime?: float(name='AverageReadyTime'),
          averageHoldTime?: float(name='AverageHoldTime'),
          totalReadyTime?: long(name='TotalReadyTime'),
          totalBreakTime?: long(name='TotalBreakTime'),
          maxTalkTime?: long(name='MaxTalkTime'),
          totalCalls?: long(name='TotalCalls'),
        }(name='Overall'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListHistoricalSkillGroupReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListHistoricalSkillGroupReportResponseBody(name='body'),
}

async function listHistoricalSkillGroupReportWithOptions(request: ListHistoricalSkillGroupReportRequest, runtime: Util.RuntimeOptions): ListHistoricalSkillGroupReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListHistoricalSkillGroupReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listHistoricalSkillGroupReport(request: ListHistoricalSkillGroupReportRequest): ListHistoricalSkillGroupReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return listHistoricalSkillGroupReportWithOptions(request, runtime);
}

model SendDtmfSignalingRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  channelId?: string(name='ChannelId'),
  dtmf?: string(name='Dtmf'),
}

model SendDtmfSignalingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model SendDtmfSignalingResponse = {
  headers: map[string]string(name='headers'),
  body: SendDtmfSignalingResponseBody(name='body'),
}

async function sendDtmfSignalingWithOptions(request: SendDtmfSignalingRequest, runtime: Util.RuntimeOptions): SendDtmfSignalingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendDtmfSignaling', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendDtmfSignaling(request: SendDtmfSignalingRequest): SendDtmfSignalingResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendDtmfSignalingWithOptions(request, runtime);
}

model ListRecentCallDetailRecordsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  criteria?: string(name='Criteria'),
}

model ListRecentCallDetailRecordsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        startTime?: long(name='StartTime'),
        contactDisposition?: string(name='ContactDisposition'),
        contactType?: string(name='ContactType'),
        agentIds?: string(name='AgentIds'),
        contactId?: string(name='ContactId'),
        callDuration?: string(name='CallDuration'),
        callingNumber?: string(name='CallingNumber'),
        duration?: long(name='Duration'),
        instanceId?: string(name='InstanceId'),
        calledNumber?: string(name='CalledNumber'),
        skillGroupIds?: string(name='SkillGroupIds'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListRecentCallDetailRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRecentCallDetailRecordsResponseBody(name='body'),
}

async function listRecentCallDetailRecordsWithOptions(request: ListRecentCallDetailRecordsRequest, runtime: Util.RuntimeOptions): ListRecentCallDetailRecordsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRecentCallDetailRecords', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRecentCallDetailRecords(request: ListRecentCallDetailRecordsRequest): ListRecentCallDetailRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRecentCallDetailRecordsWithOptions(request, runtime);
}

model InitiateAttendedTransferRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  transferor?: string(name='Transferor'),
  transferee?: string(name='Transferee'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  jobId?: string(name='JobId'),
}

model InitiateAttendedTransferResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    contextId?: long(name='ContextId'),
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model InitiateAttendedTransferResponse = {
  headers: map[string]string(name='headers'),
  body: InitiateAttendedTransferResponseBody(name='body'),
}

async function initiateAttendedTransferWithOptions(request: InitiateAttendedTransferRequest, runtime: Util.RuntimeOptions): InitiateAttendedTransferResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InitiateAttendedTransfer', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function initiateAttendedTransfer(request: InitiateAttendedTransferRequest): InitiateAttendedTransferResponse {
  var runtime = new Util.RuntimeOptions{};
  return initiateAttendedTransferWithOptions(request, runtime);
}

model MakeCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  caller?: string(name='Caller'),
  callee?: string(name='Callee'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
  tags?: string(name='Tags'),
}

model MakeCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    contextId?: long(name='ContextId'),
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      jobId?: string(name='JobId'),
      userId?: string(name='UserId'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model MakeCallResponse = {
  headers: map[string]string(name='headers'),
  body: MakeCallResponseBody(name='body'),
}

async function makeCallWithOptions(request: MakeCallRequest, runtime: Util.RuntimeOptions): MakeCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MakeCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function makeCall(request: MakeCallRequest): MakeCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return makeCallWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model GetInstanceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    status?: string(name='Status'),
    consoleUrl?: string(name='ConsoleUrl'),
    description?: string(name='Description'),
    aliyunUid?: string(name='AliyunUid'),
    name?: string(name='Name'),
    domainName?: string(name='DomainName'),
    id?: string(name='Id'),
    adminList?: [ 
      {
        displayName?: string(name='DisplayName'),
        extension?: string(name='Extension'),
        loginName?: string(name='LoginName'),
        email?: string(name='Email'),
        workMode?: string(name='WorkMode'),
        mobile?: string(name='Mobile'),
        userId?: string(name='UserId'),
        roleName?: string(name='RoleName'),
        instanceId?: string(name='InstanceId'),
        roleId?: string(name='RoleId'),
      }
    ](name='AdminList'),
    numberList?: [ 
      {
        active?: boolean(name='Active'),
        userId?: string(name='UserId'),
        number?: string(name='Number'),
        city?: string(name='City'),
        instanceId?: string(name='InstanceId'),
        usage?: string(name='Usage'),
        contactFlowId?: string(name='ContactFlowId'),
        province?: string(name='Province'),
        skillGroups?: [ 
          {
            displayName?: string(name='DisplayName'),
            description?: string(name='Description'),
            phoneNumberCount?: int32(name='PhoneNumberCount'),
            skillGroupId?: string(name='SkillGroupId'),
            userCount?: int32(name='UserCount'),
            instanceId?: string(name='InstanceId'),
            name?: string(name='Name'),
          }
        ](name='SkillGroups'),
      }
    ](name='NumberList'),
  }(name='Data'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstance', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model AddUsersToSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  userSkillLevelList?: string(name='UserSkillLevelList'),
}

model AddUsersToSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddUsersToSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddUsersToSkillGroupResponseBody(name='body'),
}

async function addUsersToSkillGroupWithOptions(request: AddUsersToSkillGroupRequest, runtime: Util.RuntimeOptions): AddUsersToSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddUsersToSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addUsersToSkillGroup(request: AddUsersToSkillGroupRequest): AddUsersToSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addUsersToSkillGroupWithOptions(request, runtime);
}

model ListConfigItemsRequest {
  instanceId?: string(name='InstanceId'),
  objectId?: string(name='ObjectId'),
  objectType?: string(name='ObjectType'),
}

model ListConfigItemsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: [ 
    {
      objectId?: string(name='ObjectId'),
      value?: string(name='Value'),
      objectType?: string(name='ObjectType'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
    }
  ](name='Data'),
}

model ListConfigItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConfigItemsResponseBody(name='body'),
}

async function listConfigItemsWithOptions(request: ListConfigItemsRequest, runtime: Util.RuntimeOptions): ListConfigItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListConfigItems', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listConfigItems(request: ListConfigItemsRequest): ListConfigItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConfigItemsWithOptions(request, runtime);
}

model SignInGroupRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  signedSkillGroupIdList?: string(name='SignedSkillGroupIdList'),
}

model SignInGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    extension?: string(name='Extension'),
    workMode?: string(name='WorkMode'),
    deviceId?: string(name='DeviceId'),
    jobId?: string(name='JobId'),
    userId?: string(name='UserId'),
    breakCode?: string(name='BreakCode'),
    instanceId?: string(name='InstanceId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    userState?: string(name='UserState'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
  }(name='Data'),
}

model SignInGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SignInGroupResponseBody(name='body'),
}

async function signInGroupWithOptions(request: SignInGroupRequest, runtime: Util.RuntimeOptions): SignInGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SignInGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function signInGroup(request: SignInGroupRequest): SignInGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return signInGroupWithOptions(request, runtime);
}

model GetRealtimeInstanceStatesRequest {
  instanceId?: string(name='InstanceId'),
}

model GetRealtimeInstanceStatesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    workingAgents?: long(name='WorkingAgents'),
    longestWaitingTime?: long(name='LongestWaitingTime'),
    loggedInAgents?: long(name='LoggedInAgents'),
    totalAgents?: long(name='TotalAgents'),
    waitingCalls?: long(name='WaitingCalls'),
    breakingAgents?: long(name='BreakingAgents'),
    talkingAgents?: long(name='TalkingAgents'),
    interactiveCalls?: long(name='InteractiveCalls'),
    readyAgents?: long(name='ReadyAgents'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
}

model GetRealtimeInstanceStatesResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealtimeInstanceStatesResponseBody(name='body'),
}

async function getRealtimeInstanceStatesWithOptions(request: GetRealtimeInstanceStatesRequest, runtime: Util.RuntimeOptions): GetRealtimeInstanceStatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRealtimeInstanceStates', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRealtimeInstanceStates(request: GetRealtimeInstanceStatesRequest): GetRealtimeInstanceStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRealtimeInstanceStatesWithOptions(request, runtime);
}

model ModifySkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  displayName?: string(name='DisplayName'),
  description?: string(name='Description'),
}

model ModifySkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifySkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySkillGroupResponseBody(name='body'),
}

async function modifySkillGroupWithOptions(request: ModifySkillGroupRequest, runtime: Util.RuntimeOptions): ModifySkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySkillGroup(request: ModifySkillGroupRequest): ModifySkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySkillGroupWithOptions(request, runtime);
}

model ModifyUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  mobile?: string(name='Mobile'),
  workMode?: string(name='WorkMode'),
  roleId?: string(name='RoleId'),
}

model ModifyUserResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model ModifyUserResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserResponseBody(name='body'),
}

async function modifyUserWithOptions(request: ModifyUserRequest, runtime: Util.RuntimeOptions): ModifyUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUser(request: ModifyUserRequest): ModifyUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserWithOptions(request, runtime);
}

model AddPhoneNumberToSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  number?: string(name='Number'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model AddPhoneNumberToSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AddPhoneNumberToSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: AddPhoneNumberToSkillGroupsResponseBody(name='body'),
}

async function addPhoneNumberToSkillGroupsWithOptions(request: AddPhoneNumberToSkillGroupsRequest, runtime: Util.RuntimeOptions): AddPhoneNumberToSkillGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddPhoneNumberToSkillGroups', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addPhoneNumberToSkillGroups(request: AddPhoneNumberToSkillGroupsRequest): AddPhoneNumberToSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPhoneNumberToSkillGroupsWithOptions(request, runtime);
}

model ListDevicesRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model ListDevicesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: [ 
    {
      extension?: string(name='Extension'),
      expires?: long(name='Expires'),
      contact?: string(name='Contact'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      callId?: string(name='CallId'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Data'),
}

model ListDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: ListDevicesResponseBody(name='body'),
}

async function listDevicesWithOptions(request: ListDevicesRequest, runtime: Util.RuntimeOptions): ListDevicesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDevices', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDevices(request: ListDevicesRequest): ListDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDevicesWithOptions(request, runtime);
}

model RetrieveCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  channelId?: string(name='ChannelId'),
}

model RetrieveCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model RetrieveCallResponse = {
  headers: map[string]string(name='headers'),
  body: RetrieveCallResponseBody(name='body'),
}

async function retrieveCallWithOptions(request: RetrieveCallRequest, runtime: Util.RuntimeOptions): RetrieveCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RetrieveCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function retrieveCall(request: RetrieveCallRequest): RetrieveCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return retrieveCallWithOptions(request, runtime);
}

model ListSkillGroupsRequest {
  instanceId?: string(name='InstanceId'),
  searchPattern?: string(name='SearchPattern'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListSkillGroupsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        displayName?: string(name='DisplayName'),
        description?: string(name='Description'),
        phoneNumberCount?: int32(name='PhoneNumberCount'),
        skillGroupId?: string(name='SkillGroupId'),
        skillGroupName?: string(name='SkillGroupName'),
        userCount?: int32(name='UserCount'),
        instanceId?: string(name='InstanceId'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListSkillGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupsResponseBody(name='body'),
}

async function listSkillGroupsWithOptions(request: ListSkillGroupsRequest, runtime: Util.RuntimeOptions): ListSkillGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSkillGroups', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSkillGroups(request: ListSkillGroupsRequest): ListSkillGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSkillGroupsWithOptions(request, runtime);
}

model HoldCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  channelId?: string(name='ChannelId'),
  music?: string(name='Music'),
}

model HoldCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model HoldCallResponse = {
  headers: map[string]string(name='headers'),
  body: HoldCallResponseBody(name='body'),
}

async function holdCallWithOptions(request: HoldCallRequest, runtime: Util.RuntimeOptions): HoldCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('HoldCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function holdCall(request: HoldCallRequest): HoldCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return holdCallWithOptions(request, runtime);
}

model RegisterDeviceRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  password?: string(name='Password'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterDevice', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model RemovePersonalNumbersFromUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  numberList?: string(name='NumberList'),
}

model RemovePersonalNumbersFromUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RemovePersonalNumbersFromUserResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePersonalNumbersFromUserResponseBody(name='body'),
}

async function removePersonalNumbersFromUserWithOptions(request: RemovePersonalNumbersFromUserRequest, runtime: Util.RuntimeOptions): RemovePersonalNumbersFromUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemovePersonalNumbersFromUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removePersonalNumbersFromUser(request: RemovePersonalNumbersFromUserRequest): RemovePersonalNumbersFromUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePersonalNumbersFromUserWithOptions(request, runtime);
}

model ModifyInstanceRequest {
  instanceId?: string(name='InstanceId'),
  description?: string(name='Description'),
}

model ModifyInstanceResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstance', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceWithOptions(request, runtime);
}

model ListOutboundNumbersOfUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model ListOutboundNumbersOfUserResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        number?: string(name='Number'),
        city?: string(name='City'),
        province?: string(name='Province'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListOutboundNumbersOfUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListOutboundNumbersOfUserResponseBody(name='body'),
}

async function listOutboundNumbersOfUserWithOptions(request: ListOutboundNumbersOfUserRequest, runtime: Util.RuntimeOptions): ListOutboundNumbersOfUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOutboundNumbersOfUser', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOutboundNumbersOfUser(request: ListOutboundNumbersOfUserRequest): ListOutboundNumbersOfUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOutboundNumbersOfUserWithOptions(request, runtime);
}

model PollUserStatusRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
}

model PollUserStatusResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    contextId?: long(name='ContextId'),
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          channelVariables?: string(name='ChannelVariables'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model PollUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: PollUserStatusResponseBody(name='body'),
}

async function pollUserStatusWithOptions(request: PollUserStatusRequest, runtime: Util.RuntimeOptions): PollUserStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PollUserStatus', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pollUserStatus(request: PollUserStatusRequest): PollUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return pollUserStatusWithOptions(request, runtime);
}

model ReadyForServiceRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  outboundScenario?: boolean(name='OutboundScenario'),
}

model ReadyForServiceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    extension?: string(name='Extension'),
    workMode?: string(name='WorkMode'),
    deviceId?: string(name='DeviceId'),
    jobId?: string(name='JobId'),
    userId?: string(name='UserId'),
    breakCode?: string(name='BreakCode'),
    instanceId?: string(name='InstanceId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    userState?: string(name='UserState'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
  }(name='Data'),
}

model ReadyForServiceResponse = {
  headers: map[string]string(name='headers'),
  body: ReadyForServiceResponseBody(name='body'),
}

async function readyForServiceWithOptions(request: ReadyForServiceRequest, runtime: Util.RuntimeOptions): ReadyForServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReadyForService', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function readyForService(request: ReadyForServiceRequest): ReadyForServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return readyForServiceWithOptions(request, runtime);
}

model GetMultiChannelRecordingRequest {
  instanceId?: string(name='InstanceId'),
  contactId?: string(name='ContactId'),
}

model GetMultiChannelRecordingResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    fileUrl?: string(name='FileUrl'),
    fileName?: string(name='FileName'),
  }(name='Data'),
}

model GetMultiChannelRecordingResponse = {
  headers: map[string]string(name='headers'),
  body: GetMultiChannelRecordingResponseBody(name='body'),
}

async function getMultiChannelRecordingWithOptions(request: GetMultiChannelRecordingRequest, runtime: Util.RuntimeOptions): GetMultiChannelRecordingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMultiChannelRecording', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMultiChannelRecording(request: GetMultiChannelRecordingRequest): GetMultiChannelRecordingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMultiChannelRecordingWithOptions(request, runtime);
}

model BargeInCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  bargedUserId?: string(name='BargedUserId'),
  timeoutSeconds?: int32(name='TimeoutSeconds'),
}

model BargeInCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      callType?: string(name='CallType'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      channelContexts?: [ 
        {
          index?: int32(name='Index'),
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          channelFlags?: string(name='ChannelFlags'),
          skillGroupId?: string(name='SkillGroupId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          userExtension?: string(name='UserExtension'),
          originator?: string(name='Originator'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      heartbeat?: long(name='Heartbeat'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      userId?: string(name='UserId'),
      reserved?: long(name='Reserved'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      mobile?: string(name='Mobile'),
      jobId?: string(name='JobId'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model BargeInCallResponse = {
  headers: map[string]string(name='headers'),
  body: BargeInCallResponseBody(name='body'),
}

async function bargeInCallWithOptions(request: BargeInCallRequest, runtime: Util.RuntimeOptions): BargeInCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BargeInCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bargeInCall(request: BargeInCallRequest): BargeInCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return bargeInCallWithOptions(request, runtime);
}

model ListPhoneNumbersOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  isMember?: boolean(name='IsMember'),
  searchPattern?: string(name='SearchPattern'),
  active?: boolean(name='Active'),
}

model ListPhoneNumbersOfSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        active?: boolean(name='Active'),
        number?: string(name='Number'),
        city?: string(name='City'),
        instanceId?: string(name='InstanceId'),
        usage?: string(name='Usage'),
        contactFlowId?: string(name='ContactFlowId'),
        province?: string(name='Province'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListPhoneNumbersOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListPhoneNumbersOfSkillGroupResponseBody(name='body'),
}

async function listPhoneNumbersOfSkillGroupWithOptions(request: ListPhoneNumbersOfSkillGroupRequest, runtime: Util.RuntimeOptions): ListPhoneNumbersOfSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListPhoneNumbersOfSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listPhoneNumbersOfSkillGroup(request: ListPhoneNumbersOfSkillGroupRequest): ListPhoneNumbersOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhoneNumbersOfSkillGroupWithOptions(request, runtime);
}

model SignOutGroupRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
}

model SignOutGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    extension?: string(name='Extension'),
    heartbeat?: long(name='Heartbeat'),
    workMode?: string(name='WorkMode'),
    deviceId?: string(name='DeviceId'),
    userId?: string(name='UserId'),
    reserved?: long(name='Reserved'),
    breakCode?: string(name='BreakCode'),
    instanceId?: string(name='InstanceId'),
    outboundScenario?: boolean(name='OutboundScenario'),
    mobile?: string(name='Mobile'),
    jobId?: string(name='JobId'),
    userState?: string(name='UserState'),
    signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
  }(name='Data'),
}

model SignOutGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SignOutGroupResponseBody(name='body'),
}

async function signOutGroupWithOptions(request: SignOutGroupRequest, runtime: Util.RuntimeOptions): SignOutGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SignOutGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function signOutGroup(request: SignOutGroupRequest): SignOutGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return signOutGroupWithOptions(request, runtime);
}

model SaveRTCStatsV2Request {
  instanceId?: string(name='InstanceId'),
  callId?: string(name='CallId'),
  generalInfo?: string(name='GeneralInfo'),
  senderReport?: string(name='SenderReport'),
  receiverReport?: string(name='ReceiverReport'),
  googAddress?: string(name='GoogAddress'),
}

model SaveRTCStatsV2ResponseBody = {
  httpStatusCode?: long(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  timeStamp?: long(name='TimeStamp'),
  rowCount?: long(name='RowCount'),
}

model SaveRTCStatsV2Response = {
  headers: map[string]string(name='headers'),
  body: SaveRTCStatsV2ResponseBody(name='body'),
}

async function saveRTCStatsV2WithOptions(request: SaveRTCStatsV2Request, runtime: Util.RuntimeOptions): SaveRTCStatsV2Response {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveRTCStatsV2', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveRTCStatsV2(request: SaveRTCStatsV2Request): SaveRTCStatsV2Response {
  var runtime = new Util.RuntimeOptions{};
  return saveRTCStatsV2WithOptions(request, runtime);
}

model GetHistoricalCallerReportRequest {
  instanceId?: string(name='InstanceId'),
  callingNumber?: string(name='CallingNumber'),
  stopTime?: long(name='StopTime'),
  startTime?: long(name='StartTime'),
}

model GetHistoricalCallerReportResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    lastCallingTime?: long(name='LastCallingTime'),
    totalCalls?: long(name='TotalCalls'),
  }(name='Data'),
}

model GetHistoricalCallerReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoricalCallerReportResponseBody(name='body'),
}

async function getHistoricalCallerReportWithOptions(request: GetHistoricalCallerReportRequest, runtime: Util.RuntimeOptions): GetHistoricalCallerReportResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetHistoricalCallerReport', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getHistoricalCallerReport(request: GetHistoricalCallerReportRequest): GetHistoricalCallerReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHistoricalCallerReportWithOptions(request, runtime);
}

model ModifyUserLevelsOfSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  skillGroupId?: string(name='SkillGroupId'),
  userLevelList?: string(name='UserLevelList'),
}

model ModifyUserLevelsOfSkillGroupResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model ModifyUserLevelsOfSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserLevelsOfSkillGroupResponseBody(name='body'),
}

async function modifyUserLevelsOfSkillGroupWithOptions(request: ModifyUserLevelsOfSkillGroupRequest, runtime: Util.RuntimeOptions): ModifyUserLevelsOfSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUserLevelsOfSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUserLevelsOfSkillGroup(request: ModifyUserLevelsOfSkillGroupRequest): ModifyUserLevelsOfSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserLevelsOfSkillGroupWithOptions(request, runtime);
}

model SaveTerminalLogRequest {
  instanceId?: string(name='InstanceId'),
  callId?: string(name='CallId'),
  jobId?: string(name='JobId'),
  appName?: string(name='AppName'),
  dataType?: int32(name='DataType'),
  content?: string(name='Content'),
  status?: string(name='Status'),
  uniqueRequestId?: string(name='UniqueRequestId'),
  methodName?: string(name='MethodName'),
}

model SaveTerminalLogResponseBody = {
  httpStatusCode?: long(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveTerminalLogResponse = {
  headers: map[string]string(name='headers'),
  body: SaveTerminalLogResponseBody(name='body'),
}

async function saveTerminalLogWithOptions(request: SaveTerminalLogRequest, runtime: Util.RuntimeOptions): SaveTerminalLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveTerminalLog', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveTerminalLog(request: SaveTerminalLogRequest): SaveTerminalLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveTerminalLogWithOptions(request, runtime);
}

model ListRealtimeSkillGroupStatesRequest {
  skillGroupIdList?: string(name='SkillGroupIdList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
}

model ListRealtimeSkillGroupStatesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    list?: [ 
      {
        workingAgents?: long(name='WorkingAgents'),
        longestWaitingTime?: long(name='LongestWaitingTime'),
        loggedInAgents?: long(name='LoggedInAgents'),
        waitingCalls?: long(name='WaitingCalls'),
        breakingAgents?: long(name='BreakingAgents'),
        talkingAgents?: long(name='TalkingAgents'),
        skillGroupName?: string(name='SkillGroupName'),
        skillGroupId?: string(name='SkillGroupId'),
        readyAgents?: long(name='ReadyAgents'),
        instanceId?: string(name='InstanceId'),
      }
    ](name='List'),
  }(name='Data'),
}

model ListRealtimeSkillGroupStatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRealtimeSkillGroupStatesResponseBody(name='body'),
}

async function listRealtimeSkillGroupStatesWithOptions(request: ListRealtimeSkillGroupStatesRequest, runtime: Util.RuntimeOptions): ListRealtimeSkillGroupStatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRealtimeSkillGroupStates', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRealtimeSkillGroupStates(request: ListRealtimeSkillGroupStatesRequest): ListRealtimeSkillGroupStatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRealtimeSkillGroupStatesWithOptions(request, runtime);
}

model CreateSkillGroupRequest {
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  displayName?: string(name='DisplayName'),
  description?: string(name='Description'),
}

model CreateSkillGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: {
    instanceId?: string(name='InstanceId'),
    description?: string(name='Description'),
    name?: string(name='Name'),
    skillGroupId?: string(name='SkillGroupId'),
  }(name='Data'),
}

model CreateSkillGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSkillGroupResponseBody(name='body'),
}

async function createSkillGroupWithOptions(request: CreateSkillGroupRequest, runtime: Util.RuntimeOptions): CreateSkillGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSkillGroup', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSkillGroup(request: CreateSkillGroupRequest): CreateSkillGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSkillGroupWithOptions(request, runtime);
}

model PickOutboundNumbersRequest {
  instanceId?: string(name='InstanceId'),
  calledNumber?: string(name='CalledNumber'),
  count?: int32(name='Count'),
  skillGroupIdList?: string(name='SkillGroupIdList'),
}

model PickOutboundNumbersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      callee?: {
        number?: string(name='Number'),
        city?: string(name='City'),
        province?: string(name='Province'),
      }(name='Callee'),
      caller?: {
        number?: string(name='Number'),
        city?: string(name='City'),
        province?: string(name='Province'),
      }(name='Caller'),
    }
  ](name='Data'),
}

model PickOutboundNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: PickOutboundNumbersResponseBody(name='body'),
}

async function pickOutboundNumbersWithOptions(request: PickOutboundNumbersRequest, runtime: Util.RuntimeOptions): PickOutboundNumbersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PickOutboundNumbers', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pickOutboundNumbers(request: PickOutboundNumbersRequest): PickOutboundNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return pickOutboundNumbersWithOptions(request, runtime);
}

model ReleaseCallRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
  deviceId?: string(name='DeviceId'),
  jobId?: string(name='JobId'),
  channelId?: string(name='ChannelId'),
}

model ReleaseCallResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    callContext?: {
      jobId?: string(name='JobId'),
      instanceId?: string(name='InstanceId'),
      channelContexts?: [ 
        {
          releaseInitiator?: string(name='ReleaseInitiator'),
          channelState?: string(name='ChannelState'),
          destination?: string(name='Destination'),
          userId?: string(name='UserId'),
          timestamp?: long(name='Timestamp'),
          associatedData?: map[string]any(name='AssociatedData'),
          releaseReason?: string(name='ReleaseReason'),
          callType?: string(name='CallType'),
          jobId?: string(name='JobId'),
          channelId?: string(name='ChannelId'),
          originator?: string(name='Originator'),
          userExtension?: string(name='UserExtension'),
        }
      ](name='ChannelContexts'),
    }(name='CallContext'),
    userContext?: {
      extension?: string(name='Extension'),
      workMode?: string(name='WorkMode'),
      deviceId?: string(name='DeviceId'),
      jobId?: string(name='JobId'),
      userId?: string(name='UserId'),
      breakCode?: string(name='BreakCode'),
      instanceId?: string(name='InstanceId'),
      outboundScenario?: boolean(name='OutboundScenario'),
      userState?: string(name='UserState'),
      signedSkillGroupIdList?: [ string ](name='SignedSkillGroupIdList'),
    }(name='UserContext'),
  }(name='Data'),
}

model ReleaseCallResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseCallResponseBody(name='body'),
}

async function releaseCallWithOptions(request: ReleaseCallRequest, runtime: Util.RuntimeOptions): ReleaseCallResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseCall', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseCall(request: ReleaseCallRequest): ReleaseCallResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseCallWithOptions(request, runtime);
}

model GetLoginDetailsRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model GetLoginDetailsResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  params?: [ string ](name='Params'),
  data?: {
    displayName?: string(name='DisplayName'),
    extension?: string(name='Extension'),
    signature?: string(name='Signature'),
    sipServerUrl?: string(name='SipServerUrl'),
    deviceId?: string(name='DeviceId'),
    agentServerUrl?: string(name='AgentServerUrl'),
    userId?: string(name='UserId'),
    userKey?: string(name='UserKey'),
  }(name='Data'),
}

model GetLoginDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoginDetailsResponseBody(name='body'),
}

async function getLoginDetailsWithOptions(request: GetLoginDetailsRequest, runtime: Util.RuntimeOptions): GetLoginDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLoginDetails', '2020-07-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLoginDetails(request: GetLoginDetailsRequest): GetLoginDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoginDetailsWithOptions(request, runtime);
}

