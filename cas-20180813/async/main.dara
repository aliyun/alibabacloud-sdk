/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cas';
  @version = '2018-08-13';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'cas.aliyuncs.com',
    'ap-northeast-2-pop' = 'cas.aliyuncs.com',
    'ap-southeast-3' = 'cas.aliyuncs.com',
    'ap-southeast-5' = 'cas.aliyuncs.com',
    'cn-beijing' = 'cas.aliyuncs.com',
    'cn-beijing-finance-1' = 'cas.aliyuncs.com',
    'cn-beijing-finance-pop' = 'cas.aliyuncs.com',
    'cn-beijing-gov-1' = 'cas.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'cas.aliyuncs.com',
    'cn-chengdu' = 'cas.aliyuncs.com',
    'cn-edge-1' = 'cas.aliyuncs.com',
    'cn-fujian' = 'cas.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'cas.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'cas.aliyuncs.com',
    'cn-hangzhou-finance' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'cas.aliyuncs.com',
    'cn-hangzhou-test-306' = 'cas.aliyuncs.com',
    'cn-hongkong' = 'cas.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'cas.aliyuncs.com',
    'cn-huhehaote' = 'cas.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'cas.aliyuncs.com',
    'cn-north-2-gov-1' = 'cas.aliyuncs.com',
    'cn-qingdao' = 'cas.aliyuncs.com',
    'cn-qingdao-nebula' = 'cas.aliyuncs.com',
    'cn-shanghai' = 'cas.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'cas.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'cas.aliyuncs.com',
    'cn-shanghai-finance-1' = 'cas.aliyuncs.com',
    'cn-shanghai-inner' = 'cas.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'cas.aliyuncs.com',
    'cn-shenzhen' = 'cas.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'cas.aliyuncs.com',
    'cn-shenzhen-inner' = 'cas.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'cas.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'cas.aliyuncs.com',
    'cn-wuhan' = 'cas.aliyuncs.com',
    'cn-wulanchabu' = 'cas.aliyuncs.com',
    'cn-yushanfang' = 'cas.aliyuncs.com',
    'cn-zhangbei' = 'cas.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'cas.aliyuncs.com',
    'cn-zhangjiakou' = 'cas.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'cas.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'cas.aliyuncs.com',
    'eu-west-1' = 'cas.aliyuncs.com',
    'eu-west-1-oxs' = 'cas.aliyuncs.com',
    'rus-west-1-pop' = 'cas.aliyuncs.com',
    'us-east-1' = 'cas.aliyuncs.com',
    'us-west-1' = 'cas.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ListPCAInstanceRequest {
  currentPage?: long(name='CurrentPage', example='1', position='Query'),
  showSize?: long(name='ShowSize', example='10', position='Query'),
  type?: string(name='Type', example='iTrusChina', position='Query'),
}

model ListPCAInstanceResponseBody = {
  currentPage?: long(name='CurrentPage', example='1'),
  PCAInstanceList?: [ 
    {
      algorithm?: string(name='Algorithm', example='RSA'),
      aliasName?: string(name='AliasName', example='qingqitest'),
      caIdentifier?: string(name='CaIdentifier', example='1efb82eb-19e5-620f-bdaa-11cc6cb2a720'),
      certCount?: long(name='CertCount', example='10'),
      endTime?: long(name='EndTime', example='2024-08-09T10:05:18'),
      instanceUuid?: string(name='InstanceUuid', example='1ef3fefc-8065-60de-871e-d15cf842aab6'),
      issuedCertCount?: long(name='IssuedCertCount', example='0'),
      relateStatus?: boolean(name='RelateStatus', example='false'),
      shareFlag?: int32(name='ShareFlag', example='1'),
      trial?: string(name='Trial', example='0'),
    }
  ](name='PCAInstanceList'),
  requestId?: string(name='RequestId', example='EECA10D5-BD0F-4EF1-B3EA-B4578E5C6F8E'),
  showSize?: long(name='ShowSize', example='20'),
  totalCount?: long(name='TotalCount', example='3'),
}

model ListPCAInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPCAInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPCAInstance  ListPCAInstanceRequest
  * @return ListPCAInstanceResponse
 */
async function listPCAInstance(request: ListPCAInstanceRequest): ListPCAInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPCAInstance', 'POST', '/', 'json', false, 'json', request);
}

