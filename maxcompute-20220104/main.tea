/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'maxcompute.aliyuncs.com',
    ap-northeast-2-pop = 'maxcompute.aliyuncs.com',
    ap-south-1 = 'maxcompute.aliyuncs.com',
    ap-southeast-1 = 'maxcompute.aliyuncs.com',
    ap-southeast-2 = 'maxcompute.aliyuncs.com',
    ap-southeast-3 = 'maxcompute.aliyuncs.com',
    ap-southeast-5 = 'maxcompute.aliyuncs.com',
    cn-beijing = 'maxcompute.aliyuncs.com',
    cn-beijing-finance-1 = 'maxcompute.aliyuncs.com',
    cn-beijing-finance-pop = 'maxcompute.aliyuncs.com',
    cn-beijing-gov-1 = 'maxcompute.aliyuncs.com',
    cn-beijing-nu16-b01 = 'maxcompute.aliyuncs.com',
    cn-chengdu = 'maxcompute.aliyuncs.com',
    cn-edge-1 = 'maxcompute.aliyuncs.com',
    cn-fujian = 'maxcompute.aliyuncs.com',
    cn-haidian-cm12-c01 = 'maxcompute.aliyuncs.com',
    cn-hangzhou = 'maxcompute.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-finance = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-test-306 = 'maxcompute.aliyuncs.com',
    cn-hongkong = 'maxcompute.aliyuncs.com',
    cn-hongkong-finance-pop = 'maxcompute.aliyuncs.com',
    cn-huhehaote = 'maxcompute.aliyuncs.com',
    cn-north-2-gov-1 = 'maxcompute.aliyuncs.com',
    cn-qingdao = 'maxcompute.aliyuncs.com',
    cn-qingdao-nebula = 'maxcompute.aliyuncs.com',
    cn-shanghai = 'maxcompute.aliyuncs.com',
    cn-shanghai-et15-b01 = 'maxcompute.aliyuncs.com',
    cn-shanghai-et2-b01 = 'maxcompute.aliyuncs.com',
    cn-shanghai-finance-1 = 'maxcompute.aliyuncs.com',
    cn-shanghai-inner = 'maxcompute.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'maxcompute.aliyuncs.com',
    cn-shenzhen = 'maxcompute.aliyuncs.com',
    cn-shenzhen-finance-1 = 'maxcompute.aliyuncs.com',
    cn-shenzhen-inner = 'maxcompute.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'maxcompute.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'maxcompute.aliyuncs.com',
    cn-wuhan = 'maxcompute.aliyuncs.com',
    cn-yushanfang = 'maxcompute.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'maxcompute.aliyuncs.com',
    cn-zhangjiakou = 'maxcompute.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'maxcompute.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'maxcompute.aliyuncs.com',
    eu-central-1 = 'maxcompute.aliyuncs.com',
    eu-west-1 = 'maxcompute.aliyuncs.com',
    eu-west-1-oxs = 'maxcompute.aliyuncs.com',
    me-east-1 = 'maxcompute.aliyuncs.com',
    rus-west-1-pop = 'maxcompute.aliyuncs.com',
    us-east-1 = 'maxcompute.aliyuncs.com',
    us-west-1 = 'maxcompute.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('maxcompute', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateQuotaRequest {
  nickname?: string(name='Nickname'),
  parameters?: {
    adhocCU?: long(name='AdhocCU'),
    elasticCU?: long(name='ElasticCU'),
    enablePreemptiveScheduling?: string(name='EnablePreemptiveScheduling'),
    enablePriority?: string(name='EnablePriority'),
    maxCU?: long(name='MaxCU'),
    minCU?: long(name='MinCU'),
    singleJobCULimit?: long(name='SingleJobCULimit'),
  }(name='Parameters'),
  tag?: string(name='Tag'),
  type?: string(name='Type'),
  region?: string(name='region'),
  tenantId?: string(name='tenantId'),
}

model CreateQuotaResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model CreateQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQuotaResponseBody(name='body'),
}

async function createQuota(request: CreateQuotaRequest): CreateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createQuotaWithOptions(request, headers, runtime);
}

async function createQuotaWithOptions(request: CreateQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateQuotaResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.nickname)) {
    body['Nickname'] = request.nickname;
  }
  if (!Util.isUnset(request.parameters)) {
    body['Parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateQuota',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteQuotaRequest {
  region?: string(name='region'),
  tenantId?: string(name='tenantId'),
}

model DeleteQuotaResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQuotaResponseBody(name='body'),
}

async function deleteQuota(nickname: string, request: DeleteQuotaRequest): DeleteQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteQuotaWithOptions(nickname, request, headers, runtime);
}

async function deleteQuotaWithOptions(nickname: string, request: DeleteQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteQuotaResponse {
  Util.validateModel(request);
  nickname = OpenApiUtil.getEncodeParam(nickname);
  var query : map[string]any= {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQuota',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${nickname}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetQuotaRequest {
  mock?: boolean(name='mock'),
  region?: string(name='region'),
  tenantId?: string(name='tenantId'),
}

model GetQuotaResponseBody = {
  billingPolicy?: {
    billingMethod?: string(name='billingMethod', description='"PAYASYOUGO" 表示后付费'),
    odpsSpecCode?: string(name='odpsSpecCode'),
  }(name='billingPolicy'),
  cluster?: string(name='cluster'),
  createTime?: long(name='createTime'),
  creatorId?: string(name='creatorId'),
  id?: string(name='id'),
  name?: string(name='name'),
  nickName?: string(name='nickName'),
  parameter?: map[string]any(name='parameter'),
  parentId?: string(name='parentId'),
  regionId?: string(name='regionId'),
  status?: string(name='status'),
  subQuotaInfoList?: [ 
    {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='"PAYASYOUGO" 表示后付费'),
        odpsSpecCode?: string(name='odpsSpecCode'),
      }(name='billingPolicy'),
      cluster?: string(name='cluster'),
      createTime?: long(name='createTime'),
      creatorId?: string(name='creatorId'),
      id?: string(name='id'),
      name?: string(name='name'),
      nickName?: string(name='nickName'),
      parameter?: map[string]any(name='parameter'),
      parentId?: string(name='parentId'),
      regionId?: string(name='regionId'),
      status?: string(name='status'),
      tag?: string(name='tag'),
      tenantId?: string(name='tenantId'),
      type?: string(name='type', description='对应控制集群的resourceSystemType字段'),
      version?: string(name='version'),
    }
  ](name='subQuotaInfoList'),
  tag?: string(name='tag'),
  tenantId?: string(name='tenantId'),
  type?: string(name='type', description='对应控制集群的resourceSystemType字段'),
  version?: string(name='version'),
}

model GetQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuotaResponseBody(name='body'),
}

async function getQuota(nickname: string, request: GetQuotaRequest): GetQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getQuotaWithOptions(nickname, request, headers, runtime);
}

async function getQuotaWithOptions(nickname: string, request: GetQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetQuotaResponse {
  Util.validateModel(request);
  nickname = OpenApiUtil.getEncodeParam(nickname);
  var query : map[string]any= {};
  if (!Util.isUnset(request.mock)) {
    query['mock'] = request.mock;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQuota',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${nickname}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListQuotasRequest {
  billingType?: string(name='billingType'),
  marker?: string(name='marker'),
  maxItem?: long(name='maxItem'),
  productId?: string(name='productId'),
  region?: string(name='region'),
  tenantId?: string(name='tenantId'),
}

model ListQuotasResponseBody = {
  marker?: string(name='marker'),
  maxItem?: long(name='maxItem'),
  quotaInfoList?: [ 
    {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='"PAYASYOUGO" 表示后付费'),
        odpsSpecCode?: string(name='odpsSpecCode'),
      }(name='billingPolicy'),
      cluster?: string(name='cluster'),
      createTime?: long(name='createTime'),
      creatorId?: string(name='creatorId'),
      id?: string(name='id'),
      name?: string(name='name'),
      nickName?: string(name='nickName'),
      parameter?: map[string]any(name='parameter'),
      parentId?: string(name='parentId'),
      regionId?: string(name='regionId'),
      status?: string(name='status'),
      subQuotaInfoList?: [ 
        {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='"PAYASYOUGO" 表示后付费'),
            odpsSpecCode?: string(name='odpsSpecCode'),
          }(name='billingPolicy'),
          cluster?: string(name='cluster'),
          createTime?: long(name='createTime'),
          creatorId?: string(name='creatorId'),
          id?: string(name='id'),
          name?: string(name='name'),
          nickName?: string(name='nickName'),
          parameter?: map[string]any(name='parameter'),
          parentId?: string(name='parentId'),
          regionId?: string(name='regionId'),
          status?: string(name='status'),
          tag?: string(name='tag'),
          tenantId?: string(name='tenantId'),
          type?: string(name='type', description='对应控制集群的resourceSystemType字段'),
          version?: string(name='version'),
        }
      ](name='subQuotaInfoList'),
      tag?: string(name='tag'),
      tenantId?: string(name='tenantId'),
      type?: string(name='type', description='对应控制集群的resourceSystemType字段'),
      version?: string(name='version'),
    }
  ](name='quotaInfoList'),
}

model ListQuotasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuotasResponseBody(name='body'),
}

async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasWithOptions(request, headers, runtime);
}

async function listQuotasWithOptions(request: ListQuotasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotasResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.billingType)) {
    query['billingType'] = request.billingType;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItem)) {
    query['maxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.productId)) {
    query['productId'] = request.productId;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQuotas',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateQuotaRequest {
  body?: string(name='body'),
  region?: string(name='region'),
  tenantId?: string(name='tenantId'),
}

model UpdateQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function updateQuota(nickname: string, request: UpdateQuotaRequest): UpdateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateQuotaWithOptions(nickname, request, headers, runtime);
}

async function updateQuotaWithOptions(nickname: string, request: UpdateQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateQuotaResponse {
  Util.validateModel(request);
  nickname = OpenApiUtil.getEncodeParam(nickname);
  var query : map[string]any= {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateQuota',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${nickname}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'string',
  };
  return callApi(params, req, runtime);
}

model UpdateSubQuotasRequest {
  body?: string(name='body'),
  region?: string(name='region'),
  tenantId?: string(name='tenantId'),
}

model UpdateSubQuotasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function updateSubQuotas(nickname: string, request: UpdateSubQuotasRequest): UpdateSubQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateSubQuotasWithOptions(nickname, request, headers, runtime);
}

async function updateSubQuotasWithOptions(nickname: string, request: UpdateSubQuotasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateSubQuotasResponse {
  Util.validateModel(request);
  nickname = OpenApiUtil.getEncodeParam(nickname);
  var query : map[string]any= {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateSubQuotas',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${nickname}/subquotas`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'string',
  };
  return callApi(params, req, runtime);
}

