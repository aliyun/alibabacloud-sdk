/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'maxcompute.aliyuncs.com',
    ap-northeast-2-pop = 'maxcompute.aliyuncs.com',
    ap-south-1 = 'maxcompute.aliyuncs.com',
    ap-southeast-1 = 'maxcompute.aliyuncs.com',
    ap-southeast-2 = 'maxcompute.aliyuncs.com',
    ap-southeast-3 = 'maxcompute.aliyuncs.com',
    ap-southeast-5 = 'maxcompute.aliyuncs.com',
    cn-beijing = 'maxcompute.aliyuncs.com',
    cn-beijing-finance-1 = 'maxcompute.aliyuncs.com',
    cn-beijing-finance-pop = 'maxcompute.aliyuncs.com',
    cn-beijing-gov-1 = 'maxcompute.aliyuncs.com',
    cn-beijing-nu16-b01 = 'maxcompute.aliyuncs.com',
    cn-chengdu = 'maxcompute.aliyuncs.com',
    cn-edge-1 = 'maxcompute.aliyuncs.com',
    cn-fujian = 'maxcompute.aliyuncs.com',
    cn-haidian-cm12-c01 = 'maxcompute.aliyuncs.com',
    cn-hangzhou = 'maxcompute.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-finance = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-test-306 = 'maxcompute.aliyuncs.com',
    cn-hongkong = 'maxcompute.aliyuncs.com',
    cn-hongkong-finance-pop = 'maxcompute.aliyuncs.com',
    cn-huhehaote = 'maxcompute.aliyuncs.com',
    cn-north-2-gov-1 = 'maxcompute.aliyuncs.com',
    cn-qingdao = 'maxcompute.aliyuncs.com',
    cn-qingdao-nebula = 'maxcompute.aliyuncs.com',
    cn-shanghai = 'maxcompute.aliyuncs.com',
    cn-shanghai-et15-b01 = 'maxcompute.aliyuncs.com',
    cn-shanghai-et2-b01 = 'maxcompute.aliyuncs.com',
    cn-shanghai-finance-1 = 'maxcompute.aliyuncs.com',
    cn-shanghai-inner = 'maxcompute.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'maxcompute.aliyuncs.com',
    cn-shenzhen = 'maxcompute.aliyuncs.com',
    cn-shenzhen-finance-1 = 'maxcompute.aliyuncs.com',
    cn-shenzhen-inner = 'maxcompute.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'maxcompute.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'maxcompute.aliyuncs.com',
    cn-wuhan = 'maxcompute.aliyuncs.com',
    cn-yushanfang = 'maxcompute.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'maxcompute.aliyuncs.com',
    cn-zhangjiakou = 'maxcompute.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'maxcompute.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'maxcompute.aliyuncs.com',
    eu-central-1 = 'maxcompute.aliyuncs.com',
    eu-west-1 = 'maxcompute.aliyuncs.com',
    eu-west-1-oxs = 'maxcompute.aliyuncs.com',
    me-east-1 = 'maxcompute.aliyuncs.com',
    rus-west-1-pop = 'maxcompute.aliyuncs.com',
    us-east-1 = 'maxcompute.aliyuncs.com',
    us-west-1 = 'maxcompute.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('maxcompute', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreatePackageRequest {
  body?: string(name='body', description='The request body parameters.', example='{
"name": "test_packege", 
    "resourceList": { 
        "table": [
            {
                "name": "table_name",
                "actions": [
                    "Describe",
                    "Select"
                ]
            },
            {
                "name": "table_name",
                "actions": [
                    "Describe",
                    "Select"
                ]
            }
        ],
        "resource": [
            {
                "name": "",
                "actions": []
            },
            {
                "name": "",
                "actions": []
            }
        ],
        "function": [
            {
                "name": "",
                "actions": []
            },
            {
                "name": "",
                "actions": []
            }
        ]
    }
}'),
  isInstall?: boolean(name='isInstall', description='Specifies whether to install the package.', example='false'),
}

model CreatePackageResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ab16684833172127321e2c25'),
}

model CreatePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePackageResponseBody(name='body'),
}

async function createPackageWithOptions(projectName: string, request: CreatePackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePackageResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.isInstall)) {
    query['isInstall'] = request.isInstall;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CreatePackage',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/packages`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPackage(projectName: string, request: CreatePackageRequest): CreatePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPackageWithOptions(projectName, request, headers, runtime);
}

model CreateProjectRequest {
  body?: string(name='body', description='The request body parameters.', example='{ "name": "project_name", "comment": "", "productType":"payasyougo/subscription/dev", /\\*\\* \\* "PAYASYOUGO": specifies a pay-as-you-go project. \\* "SUBSCRIPTION": specifies a subscription project. \\* "DEV": specifies that the project is created in Developer Edition. \\*/ "defaultQuota": "quota_nick_name", "properties": { "sqlMeteringMax":"", "typeSystem": "",// The string type. Valid values: 1, 2, and hive. "encryption": { "enable": true, "algorithm":"" , // The name of the encryption algorithm. "key":"" // The key of the encryption algorithm. } // json: This field is required only when data encryption is enabled. } }'),
}

model CreateProjectResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7a316654730544735643e9200'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProjectWithOptions(request: CreateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProjectWithOptions(request, headers, runtime);
}

model CreateQuotaPlanRequest {
  body?: string(name='body', description='The request body parameters.', example='{ "name": "planA", // The quota is a level-1 quota. You can select only the fields that are related to the quota plan. "quota": { "name": "a", "nickName": "aaa_nick", "tenantId": "10001", "regionId": "cn-hangzhou", "parentId": "0", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false }, "subQuotaInfoList": \\[ { "nickName": "WlmFuxiSecondaryOnlineQuotaTest", "name": "WlmFuxiSecondaryOnlineQuotaTest", "type": "FUXI_ONLINE", "tenantId": "10001", "regionId": "cn-hangzhou", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false } } ] } }'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='228451885265153'),
}

model CreateQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4b016674434996033675e71ee'),
}

model CreateQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQuotaPlanResponseBody(name='body'),
}

async function createQuotaPlanWithOptions(nickname: string, request: CreateQuotaPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateQuotaPlanResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CreateQuotaPlan',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/plans`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQuotaPlan(nickname: string, request: CreateQuotaPlanRequest): CreateQuotaPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createQuotaPlanWithOptions(nickname, request, headers, runtime);
}

model CreateQuotaScheduleRequest {
  body?: string(name='body', description='The request body parameters.', example='\\# The quota plan immediately takes effect. \\[ { "type": "once", "plan": "planA", "operator":"xxx" } ] # The quota plan is scheduled on a regular basis. \\[ { "id": "bi", "type": "daily", "condition": { "at": "0800", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planA" }, { "id": "bi", "type": "daily", "condition": { "at": "0900", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planB" }, ]'),
  region?: string(name='region', description='The ID of the region.', example='cn-chengdu'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='407137536592384'),
}

model CreateQuotaScheduleResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0b716671885050924814e3623'),
}

model CreateQuotaScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateQuotaScheduleResponseBody(name='body'),
}

async function createQuotaScheduleWithOptions(nickname: string, request: CreateQuotaScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateQuotaScheduleResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CreateQuotaSchedule',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/schedule`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createQuotaSchedule(nickname: string, request: CreateQuotaScheduleRequest): CreateQuotaScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createQuotaScheduleWithOptions(nickname, request, headers, runtime);
}

model CreateRoleRequest {
  body?: string(name='body', description='The request body parameters. For valid values, see [MaxCompute permissions](~~27935~~).', example='{"name": "role_name","type": "resource/adminn","policy": "", // The document of the policy. This parameter is not required if an access-control list (ACL) is used. "acl": { // This parameter is not required if a policy is used. "table": \\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"resource":\\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"function":\\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"package":\\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"project":\\[{"name": "", "actions":\\[]}], // Only the current project is displayed in the console. "instance":\\[{"name": "", "actions":\\[]}] // The parameter name must be set to an asterisk (\\*) in the console. }}// An asterisk (\\*) can be specified for name.'),
}

model CreateRoleResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7e716665825896565060e87a4'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRoleWithOptions(projectName: string, request: CreateRoleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CreateRole',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/roles`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRole(projectName: string, request: CreateRoleRequest): CreateRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRoleWithOptions(projectName, request, headers, runtime);
}

model DeleteQuotaPlanRequest {
  region?: string(name='region', description='The ID of the region.', example='cn-hangzhou'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='416441016836866'),
}

model DeleteQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b57ff7616612271051086500ea3ce'),
}

model DeleteQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteQuotaPlanResponseBody(name='body'),
}

async function deleteQuotaPlanWithOptions(nickname: string, planName: string, request: DeleteQuotaPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteQuotaPlanResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQuotaPlan',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/plans/${OpenApiUtil.getEncodeParam(planName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteQuotaPlan(nickname: string, planName: string, request: DeleteQuotaPlanRequest): DeleteQuotaPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteQuotaPlanWithOptions(nickname, planName, request, headers, runtime);
}

model GetJobResourceUsageRequest {
  date?: string(name='date', description='The date that is accurate to the day part for the query. The date must be in the yyyy-MM-dd format.', example='2023-05-15'),
  jobOwnerList?: [ string ](name='jobOwnerList', description='The list of job executors.'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
  pageSize?: long(name='pageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  quotaNicknameList?: [ string ](name='quotaNicknameList', description='The list of nicknames of quotas that are used by jobs.'),
}

model GetJobResourceUsageShrinkRequest {
  date?: string(name='date', description='The date that is accurate to the day part for the query. The date must be in the yyyy-MM-dd format.', example='2023-05-15'),
  jobOwnerListShrink?: string(name='jobOwnerList', description='The list of job executors.'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
  pageSize?: long(name='pageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10'),
  quotaNicknameListShrink?: string(name='quotaNicknameList', description='The list of nicknames of quotas that are used by jobs.'),
}

model GetJobResourceUsageResponseBody = {
  data?: {
    jobResourceUsageList?: [ 
      {
        cuUsage?: long(name='cuUsage', description='The total number of used compute units (CUs).', example='1185100'),
        date?: string(name='date', description='The start date of the query in the format of yyyy-MM-dd.', example='2023-05-09'),
        jobOwner?: string(name='jobOwner', description='The job executor.', example='ALIYUN$xxx@test.aliyunid.com'),
        memoryUsage?: long(name='memoryUsage', description='The total memory usage.', example='15169536'),
        quotaNickname?: string(name='quotaNickname', description='The quota nickname.', example='my_quota'),
      }
    ](name='jobResourceUsageList', description='The data list returned.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='2'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='64'),
  }(name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='The error code returned if the request failed.', example='success'),
  errorMsg?: string(name='errorMsg', description='The error message returned if the request failed.', example='0A3B1E82006A23A918C70905BF08AEC7'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0b57ff7616612271051086500ea3ce'),
}

model GetJobResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetJobResourceUsageResponseBody(name='body'),
}

async function getJobResourceUsageWithOptions(tmpReq: GetJobResourceUsageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobResourceUsageResponse {
  Util.validateModel(tmpReq);
  var request = new GetJobResourceUsageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobOwnerList)) {
    request.jobOwnerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobOwnerList, 'jobOwnerList', 'simple');
  }
  if (!Util.isUnset(tmpReq.quotaNicknameList)) {
    request.quotaNicknameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.quotaNicknameList, 'quotaNicknameList', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.date)) {
    query['date'] = request.date;
  }
  if (!Util.isUnset(request.jobOwnerListShrink)) {
    query['jobOwnerList'] = request.jobOwnerListShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.quotaNicknameListShrink)) {
    query['quotaNicknameList'] = request.quotaNicknameListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobResourceUsage',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/resourceUsage`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getJobResourceUsage(request: GetJobResourceUsageRequest): GetJobResourceUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobResourceUsageWithOptions(request, headers, runtime);
}

model GetPackageRequest {
  sourceProject?: string(name='sourceProject', description='The project to which the package belongs. This parameter is required if the package is installed in the MaxCompute project.', example='projectB'),
}

model GetPackageResponseBody = {
  data?: {
    allowedProjectList?: [ 
      {
        label?: string(name='label', description='The security level for sensitive data.', example='2'),
        project?: string(name='project', description='The name of the MaxCompute project.', example='proejctB'),
      }
    ](name='allowedProjectList', description='The projects in which the package is installed.'),
    resourceList?: {
      function?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
          name?: string(name='name', description='The name of the function.', example='function_1'),
          schemaName?: string(name='schemaName', description='The name of schema.', example='default'),
        }
      ](name='function', description='The functions.'),
      resource?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
          name?: string(name='name', description='The name of the resource.', example='res_1'),
          schemaName?: string(name='schemaName', description='The name of schema.', example='default'),
        }
      ](name='resource', description='The resources.'),
      table?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
          name?: string(name='name', description='The name of the table.', example='dim_odps'),
          schemaName?: string(name='schemaName', description='The name of schema.', example='default'),
        }
      ](name='table', description='The tables.'),
    }(name='resourceList', description='The details of the resources that are included in the package.'),
  }(name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='The error code returned if the request failed.', example='040002'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='error message.'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b57ff8316614119858417939e3e54'),
}

model GetPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPackageResponseBody(name='body'),
}

async function getPackageWithOptions(projectName: string, packageName: string, request: GetPackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetPackageResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.sourceProject)) {
    query['sourceProject'] = request.sourceProject;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPackage',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/packages/${OpenApiUtil.getEncodeParam(packageName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPackage(projectName: string, packageName: string, request: GetPackageRequest): GetPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPackageWithOptions(projectName, packageName, request, headers, runtime);
}

model GetProjectRequest {
  verbose?: boolean(name='verbose', description='Specifies whether to use additional information.', example='true'),
}

model GetProjectResponseBody = {
  data?: {
    comment?: string(name='comment', description='The comment of the project.', example='maxcompute project'),
    costStorage?: string(name='costStorage', description='The storage usage.', example='16489027'),
    createdTime?: long(name='createdTime', description='Create time', example='1704380838000'),
    defaultQuota?: string(name='defaultQuota', description='The default computing quota.', example='quota_a'),
    ipWhiteList?: {
      ipList?: string(name='ipList', description='The list of IP addresses.', example='10.88.111.3'),
      vpcIpList?: string(name='vpcIpList', description='The list of virtual private cloud (VPC) IP addresses.', example='10.88.111.3'),
    }(name='ipWhiteList', description='The IP address whitelist.'),
    name?: string(name='name', description='The name of the MaxCompute project.', example='odps_project'),
    owner?: string(name='owner', description='The owner of the project.', example='1565950907343451'),
    productType?: string(name='productType', description='The billing method of the project.', example='PayAsYouGo'),
    properties?: {
      allowFullScan?: boolean(name='allowFullScan', description='Indicates whether a full table scan on the project is enabled.', example='false'),
      elderTunnelQuota?: string(name='elderTunnelQuota', description='This operation does not return a value for this parameter.', example='No value'),
      enableDecimal2?: boolean(name='enableDecimal2', description='Indicates whether the DECIMAL data type in MaxCompute V2.0 is enabled.', example='true'),
      enableTunnelQuotaRoute?: boolean(name='enableTunnelQuotaRoute', description='Indicates whether tunnel quota routing is enabled.', example='true'),
      encryption?: {
        algorithm?: string(name='algorithm', description='The name of the encryption algorithm.', example='SHA1'),
        enable?: boolean(name='enable', description='Indicates whether data encryption is enabled. Valid values: true and false.', example='true'),
        key?: string(name='key', description='The key of the encryption algorithm.', example='dafault'),
      }(name='encryption', description='The encryption information.'),
      retentionDays?: long(name='retentionDays', description='The number of days for which backup data can be retained.', example='1'),
      sqlMeteringMax?: string(name='sqlMeteringMax', description='The upper limit for the resources that are consumed by an SQL statement.', example='1500'),
      storageTierInfo?: {
        projectBackupSize?: long(name='projectBackupSize', description='The backup storage.', example='86672917'),
        projectTotalSize?: long(name='projectTotalSize', description='The total storage.', example='56066037'),
        storageTierSize?: {
          longTermSize?: long(name='longTermSize', description='The long-term storage.', example='21764917'),
          lowFrequencySize?: long(name='lowFrequencySize', description='The IA storage.', example='767693'),
          standardSize?: long(name='standardSize', description='The standard storage.', example='27649172'),
        }(name='storageTierSize', description='The tiered storage.'),
      }(name='storageTierInfo', description='The information about the tiered storage.'),
      tableLifecycle?: {
        type?: string(name='type', description='The type of the lifecycle. Valid values: -**mandatory**: The lifecycle clause is required. You must configure a lifecycle for a table. -**optional**: The lifecycle clause is optional in a table creation statement. If you do not configure a lifecycle for a table, the table does not expire. -**inherit**: If you do not configure a lifecycle for a table when you create the table, the value of the odps.table.lifecycle.value parameter is used by default.', example='optional'),
        value?: string(name='value', description='The retention period of a table. Unit: days.', example='37231'),
      }(name='tableLifecycle', description='The lifecycle of the table in the project.'),
      timezone?: string(name='timezone', description='The time zone of the project.', example='Asia/Shanghai'),
      tunnelQuota?: string(name='tunnelQuota', description='The name of the tunnel quota.', example='Quota'),
      typeSystem?: string(name='typeSystem', description='The data type edition. Valid values: -**1**: MaxCompute V1.0 data type edition. -**2**: MaxCompute V2.0 data type edition. -**hive**: Hive-compatible data type edition.', example='2.0'),
    }(name='properties', description='The properties of the project.'),
    regionId?: string(name='regionId', description='RegionID', example='cn-beijing'),
    saleTag?: {
      resourceId?: string(name='resourceId', description='The ID of the resource.', example='project_name'),
      resourceType?: string(name='resourceType', description='The type of the resource.', example='project'),
    }(name='saleTag', description='The tag.'),
    securityProperties?: {
      enableDownloadPrivilege?: boolean(name='enableDownloadPrivilege', description='Indicates whether Download control is enabled.', example='false'),
      labelSecurity?: boolean(name='labelSecurity', description='Indicates whether label-based access control is enabled.', example='false'),
      objectCreatorHasAccessPermission?: boolean(name='objectCreatorHasAccessPermission', description='Indicates whether the object creator is allowed to perform operations on objects.', example='true'),
      objectCreatorHasGrantPermission?: boolean(name='objectCreatorHasGrantPermission', description='Indicates whether the object creator is allowed to authorize other users to perform operations on objects.', example='true'),
      projectProtection?: {
        exceptionPolicy?: string(name='exceptionPolicy', description='The exception policy. If cross-project data access operations are required, the project owner must configure an exception policy in advance to allow the specified user to transfer data of a specified object from the current project to a specified project. After the exception policy is configured, data of the object can be transferred to the specified project even if the project data protection feature is enabled.', example='{
    "Version": "1",
    "Statement":
    [{
        "Effect":"Allow",
        "Principal":"<Principal>",
        "Action":["odps:<Action1>[, <Action2>, ...]"],
        "Resource":"acs:odps:*:<Resource>",
        "Condition":{
            "StringEquals": {
                "odps:TaskType":["<Tasktype>"]
            }
        }
    }]
    }'),
        protected?: boolean(name='protected', description='Indicates whether project data protection is enabled.', example='true'),
      }(name='projectProtection', description='Indicates whether project data protection is enabled.'),
      usingAcl?: boolean(name='usingAcl', description='Indicates whether ACL-based access control is enabled.', example='true'),
      usingPolicy?: boolean(name='usingPolicy', description='Indicates whether policy-based access control is enabled.', example='true'),
    }(name='securityProperties', description='The permission properties.'),
    status?: string(name='status', description='The status of the project. Valid values: -**AVAILABLE**: The project was available. -**READONLY**: The project was read only. -**FROZEN**: The project was frozen. -**DELETING**: The project was being deleted.', example='AVAILABLE'),
    superAdmins?: [ string ](name='superAdmins', description='The Super_Administrator role.'),
    threeTierModel?: boolean(name='threeTierModel', description='Indicates whether the current project supports the three-layer model of MaxCompute.', example='true'),
    type?: string(name='type', description='The type of the project. Valid values: -**managed**: The project is an internal project. -**external**: The project is an external project.', example='managed'),
  }(name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='The error code.', example='040002'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='error message.'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7b316643495896551555e855b'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProjectResponseBody(name='body'),
}

async function getProjectWithOptions(projectName: string, request: GetProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.verbose)) {
    query['verbose'] = request.verbose;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getProject(projectName: string, request: GetProjectRequest): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectWithOptions(projectName, request, headers, runtime);
}

model GetQuotaRequest {
  akProven?: string(name='AkProven', description='The trusted AccessKey pairs.', example='null'),
  mock?: boolean(name='mock', description='Specifies whether to include submodules. Valid values: -true: The request includes submodules. -false: The request does not include submodules. This is the default value.', example='false'),
  region?: string(name='region', description='The region ID.', example='cn-chengdu'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='520539530998273'),
}

model GetQuotaResponseBody = {
  billingPolicy?: {
    billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
    odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
    orderId?: string(name='orderId', description='The order ID.', example='45245678'),
  }(name='billingPolicy', description='The information about the order.'),
  cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
  createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
  creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
  data?: {
    billingPolicy?: {
      billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
      odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
      orderId?: string(name='orderId', description='The order ID.', example='45245678'),
    }(name='billingPolicy', description='The information about the order.'),
    cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
    createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
    creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
    id?: string(name='id', description='The quota ID.', example='0'),
    name?: string(name='name', description='The name of the quota.', example='quota_a'),
    nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
    parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
    parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
    saleTag?: {
      resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
      resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
    }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
    scheduleInfo?: {
      currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
      currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
      nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
      nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
      oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
      onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
      operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
      timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
    }(name='scheduleInfo', description='The information about the scheduling plan.'),
    status?: string(name='status', description='The status of the resource.', example='ON'),
    subQuotaInfoList?: [ 
      {
        billingPolicy?: {
          billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
          odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
          orderId?: string(name='orderId', description='The order ID.', example='45245678'),
        }(name='billingPolicy', description='The information about the order.'),
        cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
        createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
        creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
        id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
        name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
        nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
        parameter?: map[string]any(name='parameter', description='The description of the quota.'),
        parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
        saleTag?: {
          resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
          resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
        }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
        scheduleInfo?: {
          currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
          currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
          nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
          nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
          oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
          onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
          operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
        }(name='scheduleInfo', description='The information about the scheduling plan.'),
        status?: string(name='status', description='The status of the resource.', example='ON'),
        tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
        tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
        type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
        version?: string(name='version', description='The version number.', example='1'),
      }
    ](name='subQuotaInfoList', description='The information about the level-2 quota.'),
    tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
    tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
    type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
    version?: string(name='version', description='The version number.', example='1'),
  }(name='data', description='The returned data.'),
  id?: string(name='id', description='The quota ID.', example='0'),
  name?: string(name='name', description='The name of the quota.', example='quota_a'),
  nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
  parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
  parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7a316654730544735643e9200'),
  saleTag?: {
    resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
    resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
  }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
  scheduleInfo?: {
    currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
    currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
    nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
    nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
    oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
    onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
    operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
    timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
  }(name='scheduleInfo', description='The information about the scheduling plan.'),
  status?: string(name='status', description='The status of the resource.', example='ON'),
  subQuotaInfoList?: [ 
    {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
        orderId?: string(name='orderId', description='The order ID.', example='45245678'),
      }(name='billingPolicy', description='The information about the order.'),
      cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
      name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
      nickName?: string(name='nickName', description='The alias of the level-2 quota.', example='subquotaA'),
      parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
      parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
      saleTag?: {
        resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
        resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
      }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
        currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
        nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
        nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
        oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
        onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
        operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
        timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
      }(name='scheduleInfo', description='The information about the scheduling plan.'),
      status?: string(name='status', description='The status of the resource.', example='ON'),
      tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
      tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
      type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version number.', example='1'),
    }
  ](name='subQuotaInfoList', description='The information about the level-2 quota.'),
  tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
  type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
  version?: string(name='version', description='The version number.', example='1'),
}

model GetQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuotaResponseBody(name='body'),
}

async function getQuotaWithOptions(nickname: string, request: GetQuotaRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetQuotaResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.akProven)) {
    query['AkProven'] = request.akProven;
  }
  if (!Util.isUnset(request.mock)) {
    query['mock'] = request.mock;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQuota',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQuota(nickname: string, request: GetQuotaRequest): GetQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getQuotaWithOptions(nickname, request, headers, runtime);
}

model GetQuotaPlanRequest {
  region?: string(name='region', description='The ID of the region.', example='cn-beijing'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='483212237127906'),
}

model GetQuotaPlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='The time when the quota plan was created.', example='2022-05-16T06:07:45Z'),
    name?: string(name='name', description='The name of the quota plan.', example='planA'),
    quota?: {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
        orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
      }(name='billingPolicy', description='The information of the order.'),
      cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The ID of the quota.', example='0'),
      name?: string(name='name', description='The name of the quota.', example='quota_a'),
      nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
      parameter?: map[string]any(name='parameter', description='The description of the quota.'),
      parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
      regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
        currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
        nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
        nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
        oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
        onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
        operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
      }(name='scheduleInfo', description='The information of the scheduling plan.'),
      status?: string(name='status', description='The status of the resource.', example='ON'),
      subQuotaInfoList?: [ 
        {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the user who created the quota plan.', example='672863518'),
          id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
          name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
          nickName?: string(name='nickName', description='The alias of the level-2 quota.', example='subquotaA'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
          regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the resource.', example='ON'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }
      ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
      tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
      tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
      type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version number.', example='1'),
    }(name='quota', description='The details of the quota.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0aa16667684362147582e038f'),
}

model GetQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuotaPlanResponseBody(name='body'),
}

async function getQuotaPlanWithOptions(nickname: string, planName: string, request: GetQuotaPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetQuotaPlanResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQuotaPlan',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/plans/${OpenApiUtil.getEncodeParam(planName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQuotaPlan(nickname: string, planName: string, request: GetQuotaPlanRequest): GetQuotaPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getQuotaPlanWithOptions(nickname, planName, request, headers, runtime);
}

model GetQuotaScheduleRequest {
  displayTimezone?: string(name='displayTimezone', description='The time zone.', example='UTC+8'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
}

model GetQuotaScheduleResponseBody = {
  data?: [ 
    {
      condition?: {
        after?: string(name='after', description='The start time when the quota plan takes effect.', example='2022-04-25T04:23:04Z'),
        at?: string(name='at', description='The time when the quota plan takes effect.', example='0900'),
      }(name='condition', description='The condition value.'),
      id?: string(name='id', description='The ID of the quota plan.', example='63'),
      operator?: string(name='operator', description='The name of the operator.', example='userA'),
      plan?: string(name='plan', description='The name of the quota plan.', example='planA'),
      timezone?: string(name='timezone', description='The time zone.', example='UTC+8'),
      type?: string(name='type', description='The type of the quota plan.', example='once'),
    }
  ](name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='success'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='errorMsg'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc059b716696296266308790e0d3e'),
}

model GetQuotaScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetQuotaScheduleResponseBody(name='body'),
}

async function getQuotaScheduleWithOptions(nickname: string, request: GetQuotaScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetQuotaScheduleResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.displayTimezone)) {
    query['displayTimezone'] = request.displayTimezone;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQuotaSchedule',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/schedule`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getQuotaSchedule(nickname: string, request: GetQuotaScheduleRequest): GetQuotaScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getQuotaScheduleWithOptions(nickname, request, headers, runtime);
}

model GetRoleAclResponseBody = {
  data?: {
    function?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
        name?: string(name='name', description='The name of the function.', example='functionA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='function', description='The function.'),
    instance?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the instance.'),
        name?: string(name='name', description='The name of the instance.', example='instanceA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='instance', description='The instance.'),
    package?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the package.'),
        name?: string(name='name', description='The name of the package.', example='packageA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='package', description='The package.'),
    project?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the project.'),
        name?: string(name='name', description='The name of the MaxCompute project.', example='projectA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='project', description='The project.'),
    resource?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
        name?: string(name='name', description='The name of the resource.', example='resourceA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='resource', description='The resource.'),
    table?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
        name?: string(name='name', description='The name of the table.', example='tableA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='table', description='The table.'),
  }(name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='The error code returned if the request failed.', example='040002'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='error message'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dc0916696898838762018e9564'),
}

model GetRoleAclResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRoleAclResponseBody(name='body'),
}

async function getRoleAclWithOptions(projectName: string, roleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRoleAclResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRoleAcl',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/roles/${OpenApiUtil.getEncodeParam(roleName)}/roleAcl`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRoleAcl(projectName: string, roleName: string): GetRoleAclResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRoleAclWithOptions(projectName, roleName, headers, runtime);
}

model GetRoleAclOnObjectRequest {
  objectName?: string(name='objectName', description='The name of the object.', example='tableA'),
  objectType?: string(name='objectType', description='The type of the object.', example='table'),
}

model GetRoleAclOnObjectResponseBody = {
  data?: {
    actions?: [ string ](name='actions', description='The operations that were performed on the object.'),
    name?: string(name='name', description='The name of the object.', example='tableA'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1366d16686529650188023ef87f'),
}

model GetRoleAclOnObjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRoleAclOnObjectResponseBody(name='body'),
}

async function getRoleAclOnObjectWithOptions(projectName: string, roleName: string, request: GetRoleAclOnObjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRoleAclOnObjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.objectName)) {
    query['objectName'] = request.objectName;
  }
  if (!Util.isUnset(request.objectType)) {
    query['objectType'] = request.objectType;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRoleAclOnObject',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/roles/${OpenApiUtil.getEncodeParam(roleName)}/acl`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRoleAclOnObject(projectName: string, roleName: string, request: GetRoleAclOnObjectRequest): GetRoleAclOnObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRoleAclOnObjectWithOptions(projectName, roleName, request, headers, runtime);
}

model GetRolePolicyResponseBody = {
  data?: string(name='data', description='The returned data.', example='{
      "Statement": [
            {
                  "Action": [
                        "odps:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                        "acs:odps:*:projects/{projectname}/authorization/packages"
                  ]
            }
      ],
      "Version": "1"
}'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1eeed16675342848904412e08dd'),
}

model GetRolePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRolePolicyResponseBody(name='body'),
}

async function getRolePolicyWithOptions(projectName: string, roleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRolePolicyResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRolePolicy',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/roles/${OpenApiUtil.getEncodeParam(roleName)}/policy`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRolePolicy(projectName: string, roleName: string): GetRolePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRolePolicyWithOptions(projectName, roleName, headers, runtime);
}

model GetRunningJobsRequest {
  from?: long(name='from', description='The time when the query starts. This parameter specifies the time when a job is submitted.

*   The time range that is specified by the **from** and **to** request parameters is a closed interval. The start time and end time are included in the range. If the value of **from** is the same as the value of **to**, the time range is invalid, and a null value is returned.
*   The value is a UNIX timestamp that represents the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1683785928'),
  jobOwnerList?: [ string ](name='jobOwnerList', description='The list of job executors.'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
  pageSize?: long(name='pageSize', description='The number of entries per page. Default value: 10. Maximum value: 20.', example='10'),
  quotaNicknameList?: [ string ](name='quotaNicknameList', description='The list of nicknames of quotas that are used by jobs.'),
  to?: long(name='to', description='The time when the query ends. This parameter specifies the time when a job is submitted.

*   The time interval that is specified by the **from** and **to** request parameters is a closed interval. The start time and end time are included in the interval. If the value of **from** is the same as the value of **to**, the interval is invalid, and a null value is returned.
*   The value is a UNIX timestamp that represents the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1683612946'),
}

model GetRunningJobsShrinkRequest {
  from?: long(name='from', description='The time when the query starts. This parameter specifies the time when a job is submitted.

*   The time range that is specified by the **from** and **to** request parameters is a closed interval. The start time and end time are included in the range. If the value of **from** is the same as the value of **to**, the time range is invalid, and a null value is returned.
*   The value is a UNIX timestamp that represents the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1683785928'),
  jobOwnerListShrink?: string(name='jobOwnerList', description='The list of job executors.'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
  pageSize?: long(name='pageSize', description='The number of entries per page. Default value: 10. Maximum value: 20.', example='10'),
  quotaNicknameListShrink?: string(name='quotaNicknameList', description='The list of nicknames of quotas that are used by jobs.'),
  to?: long(name='to', description='The time when the query ends. This parameter specifies the time when a job is submitted.

*   The time interval that is specified by the **from** and **to** request parameters is a closed interval. The start time and end time are included in the interval. If the value of **from** is the same as the value of **to**, the interval is invalid, and a null value is returned.
*   The value is a UNIX timestamp that represents the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1683612946'),
}

model GetRunningJobsResponseBody = {
  data?: {
    pageNumber?: long(name='pageNumber', description='The page number.', example='2'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    runningJobInfoList?: [ 
      {
        cuSnapshot?: double(name='cuSnapshot', description='The compute unit (CU) snapshot proportion of the job.', example='0.45'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='2023050206371544gomgtp3ljcr4'),
        jobOwner?: string(name='jobOwner', description='The account that submits the job.', example='ALIYUN$xxx@test.aliyunid.com'),
        memorySnapshot?: double(name='memorySnapshot', description='The memory snapshot proportion of the job.', example='0.45'),
        progress?: double(name='progress', description='The progress of the job.', example='0'),
        project?: string(name='project', description='The name of the MaxCompute project.', example='project_20221021123044_981b'),
        quotaNickname?: string(name='quotaNickname', description='The nickname of the quota that is used by the job.', example='my_quota'),
        runningAtTime?: long(name='runningAtTime', description='The time when the job starts to run.', example='1689746864'),
        submittedAtTime?: long(name='submittedAtTime', description='The time when the job is submitted.', example='1689746864'),
      }
    ](name='runningJobInfoList', description='The list of jobs in the running state.'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='64'),
  }(name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='success'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='0A3B1FD2006A24C8D8BE65CDAC028298'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ab16684833172127321e2c25'),
}

model GetRunningJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRunningJobsResponseBody(name='body'),
}

async function getRunningJobsWithOptions(tmpReq: GetRunningJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetRunningJobsResponse {
  Util.validateModel(tmpReq);
  var request = new GetRunningJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobOwnerList)) {
    request.jobOwnerListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobOwnerList, 'jobOwnerList', 'simple');
  }
  if (!Util.isUnset(tmpReq.quotaNicknameList)) {
    request.quotaNicknameListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.quotaNicknameList, 'quotaNicknameList', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.jobOwnerListShrink)) {
    query['jobOwnerList'] = request.jobOwnerListShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.quotaNicknameListShrink)) {
    query['quotaNicknameList'] = request.quotaNicknameListShrink;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRunningJobs',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/runningJobs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRunningJobs(request: GetRunningJobsRequest): GetRunningJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRunningJobsWithOptions(request, headers, runtime);
}

model GetTrustedProjectsResponseBody = {
  data?: [ string ](name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc0590416675329272834336e4387'),
}

model GetTrustedProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTrustedProjectsResponseBody(name='body'),
}

async function getTrustedProjectsWithOptions(projectName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTrustedProjectsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTrustedProjects',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/trustedProjects`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getTrustedProjects(projectName: string): GetTrustedProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTrustedProjectsWithOptions(projectName, headers, runtime);
}

model KillJobsRequest {
  body?: string(name='body', description='The request body parameters.', example='[
      {
            "instanceId": "",
            "projectName": ""
      },
      {
            "instanceId": "",
            "projectName": ""
      }
]'),
  region?: string(name='region', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
}

model KillJobsResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0abb7ede16814560741256732e91b6'),
}

model KillJobsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: KillJobsResponseBody(name='body'),
}

async function killJobsWithOptions(request: KillJobsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): KillJobsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'KillJobs',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs/kill`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function killJobs(request: KillJobsRequest): KillJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return killJobsWithOptions(request, headers, runtime);
}

model ListFunctionsRequest {
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10'),
  prefix?: string(name='prefix', description='The names of the returned resources. The names must start with the value specified by the prefix parameter. If the prefix parameter is set to a, the names of the returned resources must start with a.', example='a'),
  schemaName?: string(name='schemaName', description='the name of schema.', example='default'),
}

model ListFunctionsResponseBody = {
  data?: {
    functions?: [ 
      {
        class?: string(name='class', description='The class in which the function was defined.', example='abc'),
        creationTime?: long(name='creationTime', description='The time when the function was created. Unit: milliseconds.', example='1664505167000'),
        displayName?: string(name='displayName', description='The display name of the function.', example='getdate'),
        name?: string(name='name', description='The name of the function.', example='getdate'),
        owner?: string(name='owner', description='The owner of the function.', example='odpsowner'),
        resources?: string(name='resources', description='The name of the resource that was associated with the function.', example='abc'),
        schema?: string(name='schema', description='The schema of the function.', example='abc'),
      }
    ](name='functions', description='The information about each function.'),
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0b716671885050924814e3623'),
}

model ListFunctionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListFunctionsResponseBody(name='body'),
}

async function listFunctionsWithOptions(projectName: string, request: ListFunctionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListFunctionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItem)) {
    query['maxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.prefix)) {
    query['prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['schemaName'] = request.schemaName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFunctions',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/functions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFunctions(projectName: string, request: ListFunctionsRequest): ListFunctionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listFunctionsWithOptions(projectName, request, headers, runtime);
}

model ListJobInfosRequest {
  ascOrder?: boolean(name='ascOrder', description='Specifies whether to sort query results in ascending or descending order.', example='true'),
  body?: string(name='body', description='The request body parameters.', example='{
  "from":1672112000, 
  "to":1672112130, 
  "statusList":[], 
  "quotaNickname":"quota_nickname", 
  "projectList":[], 
  "typeList":[], 
  "jobOwnerList":[], 
  "signatureList":[], 
  "extNodeIdList":[], 
  "instanceIdList":[], 
  "priorityList":[], 
  "settings":{
    "key":"value"
  }
}'),
  orderColumn?: string(name='orderColumn', description='The column based on which you want to sort query results.', example='cuUsage'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1'),
  pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
  region?: string(name='region', description='The region ID.', example='cn-shanghai'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
}

model ListJobInfosResponseBody = {
  data?: {
    jobInfoList?: [ 
      {
        cluster?: string(name='cluster', description='The cluster ID.', example='AY20A'),
        cuSnapshot?: double(name='cuSnapshot', description='The CU snapshot proportion of the job.', example='0.48'),
        cuUsage?: long(name='cuUsage', description='The total number of used compute units (CUs).', example='10'),
        endAtTime?: long(name='endAtTime', description='The time when the job stops running.', example='0'),
        extNodeId?: string(name='extNodeId', description='The node ID of DataWorks.', example='node_4'),
        extNodeOnDuty?: string(name='extNodeOnDuty', description='The account of the node owner.', example='duty_2'),
        extPlantFrom?: string(name='extPlantFrom', description='The upstream platform.', example='platform_3'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='20230410050036549gfmsdwf60gg'),
        jobOwner?: string(name='jobOwner', description='The account that commits the job.', example='ALIYUN$xxx@test.aliyunid.com'),
        jobType?: string(name='jobType', description='The type of the job.', example='SQL'),
        memorySnapshot?: double(name='memorySnapshot', description='The memory snapshot proportion of the job.', example='0.42'),
        memoryUsage?: long(name='memoryUsage', description='The total memory usage.', example='40'),
        priority?: long(name='priority', description='The priority of the job.', example='1'),
        project?: string(name='project', description='The name of the MaxCompute project.', example='openrec_new'),
        quotaNickname?: string(name='quotaNickname', description='The nickname of the quota that is used by the job.', example='my_quota'),
        quotaType?: string(name='quotaType', description='The type of the quota.', example='subscription'),
        region?: string(name='region', description='The region ID.', example='cn-shanghai'),
        runningAtTime?: long(name='runningAtTime', description='The time when the job starts to run.', example='1672112113'),
        runningTime?: long(name='runningTime', description='The period for which the job runs.', example='800'),
        signature?: string(name='signature', description='The signature of the SQL job.', example='i094KijGrN3kOXZ74kbexB77XQY='),
        status?: string(name='status', description='The status of the job.', example='running'),
        statusSnapshot?: string(name='statusSnapshot', description='The status of the snapshot.', example='running'),
        submittedAtTime?: long(name='submittedAtTime', description='The time when the job was committed.', example='1672112013'),
        tags?: string(name='tags', description='The tags.', example='[]'),
        tenantId?: string(name='tenantId', description='The tenant ID.', example='213065738244354'),
        totalTime?: long(name='totalTime', description='The total period for which the job runs.', example='900'),
        waitingTime?: long(name='waitingTime', description='The duration for which the job waits to start.', example='100'),
      }
    ](name='jobInfoList', description='The list of the information about the jobs.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='2'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='64'),
  }(name='data', description='The returned data.'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0bc13a9516807484336515320e38f5'),
}

model ListJobInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJobInfosResponseBody(name='body'),
}

async function listJobInfosWithOptions(request: ListJobInfosRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobInfosResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.ascOrder)) {
    query['ascOrder'] = request.ascOrder;
  }
  if (!Util.isUnset(request.orderColumn)) {
    query['orderColumn'] = request.orderColumn;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'ListJobInfos',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/jobs`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listJobInfos(request: ListJobInfosRequest): ListJobInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobInfosWithOptions(request, headers, runtime);
}

model ListPackagesResponseBody = {
  data?: {
    createdPackages?: [ 
      {
        createTime?: long(name='createTime', description='The time when the package was created.', example='2022-08-02T02:30:34Z'),
        name?: string(name='name', description='The name of the package.', example='packageA'),
      }
    ](name='createdPackages', description='The packages that were created.'),
    installedPackages?: [ 
      {
        installTime?: long(name='installTime', description='The time when the package was installed.', example='2022-09-02T02:30:34Z'),
        name?: string(name='name', description='The name of the package.', example='packageB'),
        sourceProject?: string(name='sourceProject', description='The project to which the package belongs. This parameter is required if the package is installed in the MaxCompute project.', example='projectB'),
        status?: string(name='status', description='The status of the package.', example='OK'),
      }
    ](name='installedPackages', description='The packages that were installed.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4aa16677927210252786e4cb6'),
}

model ListPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPackagesResponseBody(name='body'),
}

async function listPackagesWithOptions(projectName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListPackagesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListPackages',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/packages`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listPackages(projectName: string): ListPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPackagesWithOptions(projectName, headers, runtime);
}

model ListProjectUsersResponseBody = {
  data?: {
    users?: [ 
      {
        name?: string(name='name', description='The name of the user.', example='userA'),
      }
    ](name='users', description='An array that contains users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7b316643495896551555e855b'),
}

model ListProjectUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectUsersResponseBody(name='body'),
}

async function listProjectUsersWithOptions(projectName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectUsersResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListProjectUsers',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjectUsers(projectName: string): ListProjectUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectUsersWithOptions(projectName, headers, runtime);
}

model ListProjectsRequest {
  listSystemCatalog?: boolean(name='listSystemCatalog', description='Specifies whether to list a project named SystemCatalog.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
  marker?: string(name='marker', description='The maximum number of entries to return on each page.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
  maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
  prefix?: string(name='prefix', description='Specifies the marker after which the returned list begins.', example='a'),
  quotaName?: string(name='quotaName', description='The name of the quota. The value of this parameter is the identifier of the quota in MaxCompute, which differs from the quotaNickname parameter. You can configure the quotaNickname parameter. The system automatically generates a value for the quotaName parameter. This parameter is only used to describe the tunnel quota.', example='"hsajkdgbkaubh"'),
  quotaNickName?: string(name='quotaNickName', description='The name of the quota.', example='quotaA'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing'),
  saleTags?: string(name='saleTags', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.', example='"aaaa-bbbb"'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='549532154333697'),
  type?: string(name='type', description='The project type. Valid values: external and managed. The value external indicates an external project, which is used in the data lakehouse solution. The value managed indicates an internal project.', example='"managed"'),
}

model ListProjectsResponseBody = {
  data?: {
    nextToken?: string(name='NextToken', description='A pagination token. Only continuous page turning is supported. If NextToken is not empty, the next page exists. The value of NextToken can be used in the next request to retrieve a new page of results.', example='AAAAAV3MpHK1AP0pfERHZN5pu6kvikyUl3ChyRxN+qLPvtOb'),
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    projects?: [ 
      {
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key.', example='Department'),
            tagValue?: string(name='TagValue', description='The tag value.', example='acceptance test'),
          }
        ](name='Tags', description='The tags.'),
        comment?: string(name='comment', description='The remarks.', example='maxcompute projects'),
        costStorage?: string(name='costStorage', description='The storage usage.', example='16489027'),
        createdTime?: long(name='createdTime', description='Create time', example='1704380838000'),
        defaultQuota?: string(name='defaultQuota', description='The default computing quota.', example='quotaA'),
        ipWhiteList?: {
          ipList?: string(name='ipList', description='The list of IP addresses.', example='10.88.111.3'),
          vpcIpList?: string(name='vpcIpList', description='The list of virtual private cloud (VPC) IP addresses.', example='10.88.111.3'),
        }(name='ipWhiteList', description='The IP address whitelist.'),
        name?: string(name='name', description='The name of the project.', example='odps_project'),
        owner?: string(name='owner', description='The owner of the project.', example='1139815775606813'),
        properties?: {
          allowFullScan?: boolean(name='allowFullScan', description='Indicates whether a full table scan on the project is enabled.', example='false'),
          enableDecimal2?: boolean(name='enableDecimal2', description='Indicates whether the DECIMAL data type in the MaxCompute V2.0 data type edition is enabled.', example='true'),
          enableTunnelQuotaRoute?: boolean(name='enableTunnelQuotaRoute', description='Indicates whether tunnel quota routing is enabled.', example='true'),
          encryption?: {
            algorithm?: string(name='algorithm', description='The name of the encryption algorithm.', example='SHA1'),
            enable?: boolean(name='enable', description='Indicates whether data encryption is enabled. Valid values: true and false.', example='true'),
            key?: string(name='key', description='The key of the encryption algorithm.', example='dafault'),
          }(name='encryption', description='The encryption information.'),
          retentionDays?: long(name='retentionDays', description='The maximum number of days for which backup data can be retained.', example='1'),
          sqlMeteringMax?: string(name='sqlMeteringMax', description='The upper limit for the resources that are consumed by an SQL statement.', example='1500'),
          tableLifecycle?: {
            type?: string(name='type', description='The type of the lifecycle. Valid values: -mandatory: The lifecycle clause is required. You must configure a lifecycle for a table. -optional: The lifecycle clause is optional in a table creation statement. If you do not configure a lifecycle for a table, the table does not expire. -inherit: If you do not configure a lifecycle for a table when you create the table, the value of odps.table.lifecycle.value is used by default.', example='optional'),
            value?: string(name='value', description='The retention period of a table. Unit: days.', example='37231'),
          }(name='tableLifecycle', description='The lifecycle of a table in the project.'),
          timezone?: string(name='timezone', description='The time zone of the instance.', example='Asia/Shanghai'),
          tunnelQuota?: string(name='tunnelQuota', description='The name of the tunnel quota.', example='quota_tunnel'),
          typeSystem?: string(name='typeSystem', description='The data type edition. Valid values: -1: MaxCompute V1.0 data type edition. -2: MaxCompute V2.0 data type edition. -hive: Hive-compatible data type edition.', example='2'),
        }(name='properties', description='The properties of the project.'),
        regionId?: string(name='regionId', description='Region Id', example='cn-beijing'),
        saleTag?: {
          resourceId?: string(name='resourceId', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.', example='"aaaa-bbbb"'),
          resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"project"'),
        }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
        securityProperties?: {
          enableDownloadPrivilege?: boolean(name='enableDownloadPrivilege', description='Indicates whether Download control is enabled.', example='false'),
          labelSecurity?: boolean(name='labelSecurity', description='Indicates whether label-based access control is enabled.', example='false'),
          objectCreatorHasAccessPermission?: boolean(name='objectCreatorHasAccessPermission', description='Indicates whether the object creator is allowed to perform operations on objects.', example='true'),
          objectCreatorHasGrantPermission?: boolean(name='objectCreatorHasGrantPermission', description='Indicates whether the object creator is allowed to authorize other users to perform operations on objects.', example='true'),
          projectProtection?: {
            exceptionPolicy?: string(name='exceptionPolicy', description='The exception policy. If cross-project data access operations are required, the project owner must configure an exception policy in advance to allow the specified user to transfer data of a specified object from the current project to a specified project. After the exception policy is configured, data of the object can be transferred to the specified project even if the project data protection feature is enabled.', example='{
      "Version": "1",
      "Statement": [
            {
                  "Effect": "Allow",
                  "Principal": "",
                  "Action": [
                        "odps:[, , ...]"
                  ],
                  "Resource": "acs:odps:*:",
                  "Condition": {
                        "StringEquals": {
                              "odps:TaskType": [
                                    ""
                              ]
                        }
                  }
            }
      ]
}'),
            protected?: boolean(name='protected', description='Indicates whether project data protection is enabled.', example='true'),
          }(name='projectProtection', description='Indicates whether project data protection is enabled.'),
          usingAcl?: boolean(name='usingAcl', description='Indicates whether ACL-based access control is enabled.', example='true'),
          usingPolicy?: boolean(name='usingPolicy', description='Indicates whether policy-based access control is enabled.', example='true'),
        }(name='securityProperties', description='The permission properties.'),
        status?: string(name='status', description='The status of the project. Valid values: -AVAILABLE: The project is available. -READONLY: The project is read-only. -FROZEN: The project is frozen. -DELETING: The project is being deleted.', example='AVAILABLE'),
        threeTierModel?: boolean(name='threeTierModel', description='Indicates whether the current project supports the MaxCompute three-layer model.

Valid values:

*   true

    <!-- -->

    <!-- -->

    <!-- -->

*   false

    <!-- -->

    <!-- -->

    <!-- -->', example='true'),
        type?: string(name='type', description='The project type. Valid values: -managed: The project is an internal project. -external: The project is an external project.', example='managed'),
      }
    ](name='projects', description='The description of the project.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='0b16399216671970335563173e2340'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjectsWithOptions(request: ListProjectsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.listSystemCatalog)) {
    query['listSystemCatalog'] = request.listSystemCatalog;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItem)) {
    query['maxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.prefix)) {
    query['prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.quotaName)) {
    query['quotaName'] = request.quotaName;
  }
  if (!Util.isUnset(request.quotaNickName)) {
    query['quotaNickName'] = request.quotaNickName;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.saleTags)) {
    query['saleTags'] = request.saleTags;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectsWithOptions(request, headers, runtime);
}

model ListQuotasRequest {
  billingType?: string(name='billingType', description='The billing method of the quota.', example='subscription'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
  maxItem?: long(name='maxItem', description='The maximum number of entries to return on each page.', example='100'),
  productId?: string(name='productId', description='The service ID.', example='ODPS'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing'),
  saleTags?: string(name='saleTags', description='The cost tag. You can filter out quota objects based on the cost tag. The cost tag is created when you tag a service.', example='{"tag":"this_is_tag_demo"}'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='280747109771520'),
}

model ListQuotasResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. Only continuous page turning is supported. If NextToken is not empty, the next page exists. The value of NextToken can be used in the next request to retrieve a new page of results.', example='AAAAAdDWBF2w6Olxc+cMPjUtUMo/CvPe4IK7f7kIQFrIZjyc'),
  data?: {
    nextToken?: string(name='NextToken', description='A pagination token. Only continuous page turning is supported. If NextToken is not empty, the next page exists. The value of NextToken can be used in the next request to retrieve a new page of results.', example='"abcde"'),
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: long(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    quotaInfoList?: [ 
      {
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The key of the tag.', example='Department'),
            tagValue?: string(name='TagValue', description='The value of the tag.', example='a12351qHDP6YEQMt'),
          }
        ](name='Tags', description='The tags.'),
        billingPolicy?: {
          billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
          odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
          orderId?: string(name='orderId', description='The order ID.', example='45245678'),
        }(name='billingPolicy', description='The information of the order.'),
        cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
        createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
        creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
        id?: string(name='id', description='The quota ID.', example='0'),
        name?: string(name='name', description='The name of the quota.', example='quota_a'),
        nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
        parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
        parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
        saleTag?: {
          resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
          resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
        }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
        scheduleInfo?: {
          currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
          currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
          nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
          nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
          oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
          onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
          operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
        }(name='scheduleInfo', description='The information of the scheduling plan.'),
        status?: string(name='status', description='The status of the endpoint group.', example='ON'),
        subQuotaInfoList?: [ 
          {
            billingPolicy?: {
              billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
              odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
              orderId?: string(name='orderId', description='The order ID.', example='45245678'),
            }(name='billingPolicy', description='The information of the order.'),
            cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
            createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
            creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
            id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
            name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
            nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
            parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
            parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
            regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
            saleTag?: {
              resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
              resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
            }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
            scheduleInfo?: {
              currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
              currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
              nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
              nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
              oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
              onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
              operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
              timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
            }(name='scheduleInfo', description='The information of the scheduling plan.'),
            status?: string(name='status', description='The status of the endpoint group.', example='ON'),
            tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
            tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
            type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
            version?: string(name='version', description='The version of the algorithm image.', example='1'),
          }
        ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
        tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
        tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
        type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
        version?: string(name='version', description='The version number.', example='1'),
      }
    ](name='quotaInfoList', description='The list of quotas.'),
  }(name='data', description='The returned data.'),
  marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
  maxItem?: long(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
  quotaInfoList?: [ 
    {
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='Department'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='1'),
        }
      ](name='Tags', description='The tags.'),
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
        orderId?: string(name='orderId', description='The order ID.', example='45245678'),
      }(name='billingPolicy', description='The information of the order.'),
      cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The quota ID.', example='0'),
      name?: string(name='name', description='The name of the quota.', example='quota_a'),
      nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
      parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
      parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
      saleTag?: {
        resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
        resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"project"'),
      }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
        currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
        nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
        nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
        oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
        onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
        operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
        timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
      }(name='scheduleInfo', description='The information of the scheduling plan.'),
      status?: string(name='status', description='The status of the endpoint group.', example='ON'),
      subQuotaInfoList?: [ 
        {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The order ID.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
          id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
          name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
          nickName?: string(name='nickName', description='The alias of the level-2 quota.', example='subquotaA'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
          regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
          saleTag?: {
            resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
            resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
          }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
            timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the endpoint group.', example='ON'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }
      ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
      tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
      tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
      type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version.', example='1'),
    }
  ](name='quotaInfoList', description='The list of quotas.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc12e6f16677875480593081d2956'),
}

model ListQuotasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuotasResponseBody(name='body'),
}

async function listQuotasWithOptions(request: ListQuotasRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotasResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.billingType)) {
    query['billingType'] = request.billingType;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItem)) {
    query['maxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.productId)) {
    query['productId'] = request.productId;
  }
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.saleTags)) {
    query['saleTags'] = request.saleTags;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQuotas',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasWithOptions(request, headers, runtime);
}

model ListQuotasPlansRequest {
  region?: string(name='region', description='The ID of the region.', example='cn-beijing'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
}

model ListQuotasPlansResponseBody = {
  data?: {
    planList?: [ 
      {
        createTime?: string(name='createTime', description='The time when the quota plan was created.', example='2022-05-16T06:07:45Z'),
        name?: string(name='name', description='The name of the quota plan.', example='planA'),
        quota?: {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
          id?: string(name='id', description='The ID of the quota.', example='0'),
          name?: string(name='name', description='The name of the quota.', example='quota_a'),
          nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
          regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the resource.', example='ON'),
          subQuotaInfoList?: [ 
            {
              billingPolicy?: {
                billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
                odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
                orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
              }(name='billingPolicy', description='The information of the order.'),
              cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
              createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
              creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
              id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
              name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
              nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
              parameter?: map[string]any(name='parameter', description='The description of the quota.'),
              parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
              regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
              scheduleInfo?: {
                currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
                currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
                nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
                nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
                oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
                onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
                operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
              }(name='scheduleInfo', description='The information of the scheduling plan.'),
              status?: string(name='status', description='The status of the resource.', example='ON'),
              tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
              tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
              type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
              version?: string(name='version', description='The version number.', example='1'),
            }
          ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }(name='quota', description='The details of the quota.'),
      }
    ](name='planList', description='The list of quota plans.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0bd16661643917136451ebf55'),
}

model ListQuotasPlansResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListQuotasPlansResponseBody(name='body'),
}

async function listQuotasPlansWithOptions(nickname: string, request: ListQuotasPlansRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListQuotasPlansResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQuotasPlans',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/plans`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listQuotasPlans(nickname: string, request: ListQuotasPlansRequest): ListQuotasPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listQuotasPlansWithOptions(nickname, request, headers, runtime);
}

model ListResourcesRequest {
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10'),
  name?: string(name='name', description='The name of the resource.', example='res'),
  schemaName?: string(name='schemaName', description='The name of the schema.', example='default'),
}

model ListResourcesResponseBody = {
  data?: {
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='ZmN0X21vbnRoX3Rhb2Jhb19pbmRleCE='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    resources?: [ 
      {
        comment?: string(name='comment', description='The remarks.', example='file'),
        contentMD5?: string(name='contentMD5', description='The Base64-encoded 128-bit MD5 hash value of the HTTP request body.', example='MACiECZtnLiNkNS1v5****=1'),
        creationTime?: long(name='creationTime', description='The time when the resource was created.', example='2022-01-29T03:34:09Z'),
        displayName?: string(name='displayName', description='The display name.', example='res_1'),
        lastModifiedTime?: long(name='lastModifiedTime', description='The time when the resource was modified.', example='2023-04-18T06:15:05Z'),
        lastUpdator?: string(name='lastUpdator', description='The user who updated the resource.', example='ALIYUN$xxx@test.aliyunid.com'),
        name?: string(name='name', description='The name of the resource.', example='res_1'),
        owner?: string(name='owner', description='The owner of the resource.', example='1265860483008101'),
        schema?: string(name='schema', description='The schema to which the resource belongs.', example='schemaA'),
        size?: long(name='size', description='The size of the resource.', example='10'),
        type?: string(name='type', description='The resource type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   py

    <!-- -->

    <!-- -->

    <!-- -->

*   jar

    <!-- -->

    <!-- -->

    <!-- -->

*   volumefile

    <!-- -->

    <!-- -->

    <!-- -->

*   table

    <!-- -->

    <!-- -->

    <!-- -->', example='file'),
      }
    ](name='resources', description='The list of resources.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ae16685836687916212e7850'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResourcesWithOptions(projectName: string, request: ListResourcesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListResourcesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItem)) {
    query['maxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.name)) {
    query['name'] = request.name;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['schemaName'] = request.schemaName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResources',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/resources`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResources(projectName: string, request: ListResourcesRequest): ListResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listResourcesWithOptions(projectName, request, headers, runtime);
}

model ListRolesResponseBody = {
  data?: {
    roles?: [ 
      {
        acl?: {
          function?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
              name?: string(name='name', description='The name of the function.', example='functionA'),
            }
          ](name='function', description='The function.'),
          instance?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the instance.'),
              name?: string(name='name', description='The name of the instance.', example='instanceA'),
            }
          ](name='instance', description='The instance.'),
          package?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the package.'),
              name?: string(name='name', description='The name of the package.', example='packageA'),
            }
          ](name='package', description='The package.'),
          project?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the project.'),
              name?: string(name='name', description='The name of the MaxCompute project.', example='projectA'),
            }
          ](name='project', description='The project.'),
          resource?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
              name?: string(name='name', description='The name of the resource.', example='resourceA'),
            }
          ](name='resource', description='The resource.'),
          table?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
              name?: string(name='name', description='The name of the table.', example='tableA'),
            }
          ](name='table', description='The table.'),
        }(name='acl', description='The ACL-based permissions that are granted to the role.'),
        name?: string(name='name', description='The name of the role.', example='roleA'),
        policy?: string(name='policy', description='The policy that is attached to the role.', example='{
      "Statement": [
            {
                  "Action": [
                        "odps:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                        "acs:odps:*:projects/{projectname}/authorization/packages"
                  ]
            }
      ],
      "Version": "1"
}'),
        type?: string(name='type', description='The type of the role.', example='admin'),
      }
    ](name='roles', description='The MaxCompute project-level roles.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe716686526652451361e80ae'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRolesResponseBody(name='body'),
}

async function listRolesWithOptions(projectName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListRolesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListRoles',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/roles`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRoles(projectName: string): ListRolesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRolesWithOptions(projectName, headers, runtime);
}

model ListTablesRequest {
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='Y29tbWlzc2lvbl9leHRlcm5hbF91cmdlXzFfd3Ih'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10'),
  prefix?: string(name='prefix', description='The names of the returned resources. The names must start with the value specified by the prefix parameter. If the prefix parameter is set to a, the names of the returned resources must start with a.', example='a'),
  schemaName?: string(name='schemaName', description='The name of the schema.', example='default'),
  type?: string(name='type', description='The type of the table.', example='internal'),
}

model ListTablesResponseBody = {
  data?: {
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    tables?: [ 
      {
        autoRefreshEnabled?: boolean(name='autoRefreshEnabled', description='Indicates whether to enable the scheduled update feature for the materialized view.', example='false'),
        createTableDDL?: string(name='createTableDDL', description='The DDL statement that is used to create the table.', example='create table if not exists sale_detail(
 shop_name     STRING,
 customer_id   STRING,
 total_price   DOUBLE)
partitioned by (sale_date STRING, region STRING);'),
        creationTime?: long(name='creationTime', description='The time when the table was created.', example='2022-01-17T07:07:47Z'),
        displayName?: string(name='displayName', description='The display name of the table.', example='sale_detail'),
        fileNum?: long(name='fileNum', description='The number of files.', example='200'),
        isExternalTable?: boolean(name='isExternalTable', description='Indicates whether the table is an external table.', example='False'),
        isOutdated?: boolean(name='isOutdated', description='Indicates whether the data in the materialized view is invalid due to data changes in the source table.', example='false'),
        lastAccessTime?: long(name='lastAccessTime', description='The time when the data was last accessed.', example='2023-12-21T02:05:56Z'),
        lastDDLTime?: long(name='lastDDLTime', description='The last time when the DDL statement of the table was updated.', example='2023-11-21T02:05:56Z'),
        lastModifiedTime?: long(name='lastModifiedTime', description='The time when the data was last updated.', example='2023-11-21T02:05:56Z'),
        lifecycle?: string(name='lifecycle', description='The lifecycle of the table.', example='-1'),
        location?: string(name='location', description='The storage location of the external table.', example='oss://oss-cn-hangzhou-internal.aliyuncs.com/oss-mc-test/Demo1/'),
        materializedView?: boolean(name='materializedView', description='Indicates whether a materialized view is created.', example='false'),
        name?: string(name='name', description='The name of the table.', example='dim_odps'),
        nativeColumns?: [ 
          {
            comment?: string(name='comment', description='The remarks.', example='Store name'),
            label?: string(name='label', description='The security level of the column.', example='0'),
            name?: string(name='name', description='The name of the column.', example='shop_name'),
            type?: string(name='type', description='The type of the column.', example='STRING'),
          }
        ](name='nativeColumns', description='The information about columns.'),
        odpsPropertiesRolearn?: string(name='odpsPropertiesRolearn', description='The Alibaba Cloud Resource Name (ARN) of AliyunODPSDefaultRole in Resource Access Management (RAM).', example='acs:ram::xxxxx:role/aliyunodpsdefaultrole'),
        odpsSqlTextOptionFlushHeader?: boolean(name='odpsSqlTextOptionFlushHeader', description='Indicates whether to ignore the table header.', example='true'),
        odpsTextOptionHeaderLinesCount?: long(name='odpsTextOptionHeaderLinesCount', description='Indicates whether to ignore the first N rows of the table header.', example='1'),
        owner?: string(name='owner', description='The owner of the table.', example='1887853961230110'),
        partitionColumns?: [ 
          {
            comment?: string(name='comment', description='The remarks.', example='Sale date'),
            label?: string(name='label', description='The security level of the partition column.', example='0'),
            name?: string(name='name', description='The name of the partition column.', example='sale_date'),
            type?: string(name='type', description='The type of the partition column.', example='STRING'),
          }
        ](name='partitionColumns', description='The information about the partition column.'),
        physicalSize?: long(name='physicalSize', description='The physical size of the table.', example='2763'),
        projectName?: string(name='projectName', description='The name of the project.', example='projectA'),
        rewriteEnabled?: boolean(name='rewriteEnabled', description='Indicates whether to enable the query rewrite operation that is performed based on the materialized view.', example='false'),
        schema?: string(name='schema', description='The schema to which the table belongs.', example='default'),
        size?: long(name='size', description='The size of the table.', example='5372'),
        storageHandler?: string(name='storageHandler', description='The extractor of the external table.', example='com.aliyun.odps.CsvStorageHandler'),
        tableComment?: string(name='tableComment', description='The description of the table.', example='sale_detail'),
        tableLabel?: string(name='tableLabel', description='The security level of the table.', example='0'),
        tablesotreTableName?: string(name='tablesotreTableName', description='The name of the Tablestore table that you want MaxCompute to access.', example='ots_tpch_orders'),
        tablestoreColumnsMapping?: string(name='tablestoreColumnsMapping', description='The columns of the Tablestore table that you want MaxCompute to access. The columns include primary key columns and attribute columns.', example=':o_orderkey,:o_orderdate,o_custkey,o_orderstatus,o_totalprice'),
        type?: string(name='type', description='The type of the table.', example='internal'),
        viewText?: string(name='viewText', description='The statement that is used to generate the view.', example='select shop_name, sum(total_price) 
from sale_detail group by shop_name'),
      }
    ](name='tables', description='The information about tables.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='0a06dd4516687375802853481ec9fd'),
}

model ListTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTablesResponseBody(name='body'),
}

async function listTablesWithOptions(projectName: string, request: ListTablesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTablesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.maxItem)) {
    query['maxItem'] = request.maxItem;
  }
  if (!Util.isUnset(request.prefix)) {
    query['prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.schemaName)) {
    query['schemaName'] = request.schemaName;
  }
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTables',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/tables`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTables(projectName: string, request: ListTablesRequest): ListTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTablesWithOptions(projectName, request, headers, runtime);
}

model ListUsersRequest {
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='10'),
}

model ListUsersResponseBody = {
  data?: {
    pageNumber?: int32(name='pageNumber', description='The page number of the returned page.', example='2'),
    pageSize?: int32(name='pageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='totalCount', description='The total number of returned entries.', example='64'),
    users?: [ 
      {
        accountId?: string(name='accountId', description='The ID of the Alibaba Cloud account.', example='167835629082'),
        accountName?: string(name='accountName', description='The username of the account.', example='Bob@'),
        accountType?: string(name='accountType', description='The type of the account.', example='ALIYUN'),
        displayName?: string(name='displayName', description='The display name.', example='Bob'),
        tenantId?: string(name='tenantId', description='The ID of the tenant.', example='1567253789'),
      }
    ](name='users', description='The users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dd4816687424611405643e3730'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUsersWithOptions(request, headers, runtime);
}

model ListUsersByRoleResponseBody = {
  data?: {
    users?: [ 
      {
        name?: string(name='name', description='The name of the user.', example='ALIYUN${account_name}'),
      }
    ](name='users', description='The users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0bb16654558425251398e27a9'),
}

model ListUsersByRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersByRoleResponseBody(name='body'),
}

async function listUsersByRoleWithOptions(projectName: string, roleName: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListUsersByRoleResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListUsersByRole',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/roles/${OpenApiUtil.getEncodeParam(roleName)}/users`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsersByRole(projectName: string, roleName: string): ListUsersByRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listUsersByRoleWithOptions(projectName, roleName, headers, runtime);
}

model UpdatePackageRequest {
  body?: string(name='body', description='The request body parameters.', example='{
    "add": {
        "allowedProjectList": [
            {
                "label": "2",
                "project": "project_name"
            }
        ],
        "resourceList": {
            "table": [
                {
                    "name": "table_name",
                    "actions": [
                        "Describe",
                        "Select"
                    ]
                },
                {
                    "name": "table_name",
                    "actions": [
                        "Describe",
                        "Select"
                    ]
                }
            ],
            "resource": [
                {
                    "name": "",
                    "actions": []
                },
                {
                    "name": "",
                    "actions": []
                }
            ],
            "function": [
                {
                    "name": "",
                    "actions": []
                },
                {
                    "name": "",
                    "actions": []
                }
            ]
        }
    },
    "remove": {
        "allowedProjectList": [
            {
                "project": "project_name"
            },
            {
                "project": "project_2"
            }
        ],
        "resourceList": {
            "table": [
                {
                    "name": "table_name"
                },
                {
                    "name": "table_name"
                }
            ],
            "resource": [
                {
                    "name": ""
                },
                {
                    "name": ""
                }
            ],
            "function": [
                {
                    "name": ""
                },
                {
                    "name": ""
                }
            ]
        }
    }
}'),
}

model UpdatePackageResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1ec4016697018733156991e0888'),
}

model UpdatePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePackageResponseBody(name='body'),
}

async function updatePackageWithOptions(projectName: string, packageName: string, request: UpdatePackageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdatePackage',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/packages/${OpenApiUtil.getEncodeParam(packageName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePackage(projectName: string, packageName: string, request: UpdatePackageRequest): UpdatePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePackageWithOptions(projectName, packageName, request, headers, runtime);
}

model UpdateProjectIpWhiteListRequest {
  body?: string(name='body', description='The request body parameters.', example='json {"ipWhiteList":{"ipList": "", // The IP address whitelists are of the STRING data type. Separate multiple IP address whitelists with commas (,). "vpcIpList": "", //} }'),
}

model UpdateProjectIpWhiteListResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc12e4316675560945192024e1044'),
}

model UpdateProjectIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProjectIpWhiteListResponseBody(name='body'),
}

async function updateProjectIpWhiteListWithOptions(projectName: string, request: UpdateProjectIpWhiteListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProjectIpWhiteListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateProjectIpWhiteList',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/projects/${OpenApiUtil.getEncodeParam(projectName)}/ipWhiteList`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProjectIpWhiteList(projectName: string, request: UpdateProjectIpWhiteListRequest): UpdateProjectIpWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProjectIpWhiteListWithOptions(projectName, request, headers, runtime);
}

model UpdateQuotaHeaders {
  commonHeaders?: map[string]string,
  akProven?: string(name='AkProven', description='The trusted AccessKey pairs.', example='null'),
}

model UpdateQuotaRequest {
  body?: string(name='body', description='The request body parameter.', example='{
      "id": "0",
      "name": "a",
      "nickName": "VIRTUAL",
      "type": "",
      "status": "ON",
      "tenantId": "10001",
      "regionId": "cn-hangzhou",
      "parentId": "0",
      "cluster": "AT-ODPS-TEST3",
      "version": "",
      "billingPolicy": {
            "odpsSpecCode": "",
            "billingMethod": "subscription"
      },
      "parameter": {
            "minCU": 40,
            "maxCU": 40,
            "adhocCU": 0, 
            "elasticMinCU": 40, 
            "elasticMaxCU": 40,
            "enablePreemptiveScheduling": false,
            "forceReservedMin": true,
            "enablePriority": false,
            "singleJobCULimit": 100,
            "adhocQuotaBeginTimeInSec": 1345,
            "adhocQuotaEndTimeInSec": 1234,
            "ignoreAdhocQuota": false
      },
      "subQuotaInfoList": [
            {
                  "id": "1000048",
                  "nickName": "WlmFuxiSecondaryOnlineQuotaTest",
                  "name": "WlmFuxiSecondaryOnlineQuotaTest",
                  "type": "FUXI_ONLINE",
                  "status": "ON",
                  "tenantId": "10001",
                  "regionId": "cn-hangzhou",
                  "parentId": "0",
                  "cluster": "AT-ODPS-TEST3",
                  "version": "",
                  "billingPolicy": {
                        "odpsSpecCode": "",
                        "billingMethod": "subscription"
                  },
                  "parameter": {
                        "minCU": 40,
                        "maxCU": 40,
                        "adhocCU": 0, 
                        "elasticMinCU": 40, 
                        "elasticMaxCU": 40,
                        "enablePreemptiveScheduling": false,
                        "forceReservedMin": true,
                        "enablePriority": false,
                        "singleJobCULimit": 100,
                        "adhocQuotaBeginTimeInSec": 1345,
                        "adhocQuotaEndTimeInSec": 1234,
                        "ignoreAdhocQuota": false
                  }
            }
      ]
}'),
  region?: string(name='region', description='The region ID.', example='cn-shanghai'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='196871833188896'),
}

model UpdateQuotaResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='0bc12e6a16679892465424670db3eb'),
}

model UpdateQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQuotaResponseBody(name='body'),
}

async function updateQuotaWithOptions(nickname: string, request: UpdateQuotaRequest, headers: UpdateQuotaHeaders, runtime: Util.RuntimeOptions): UpdateQuotaResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.akProven)) {
    realHeaders['AkProven'] = Util.toJSONString(headers.akProven);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateQuota',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQuota(nickname: string, request: UpdateQuotaRequest): UpdateQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateQuotaHeaders{};
  return updateQuotaWithOptions(nickname, request, headers, runtime);
}

model UpdateQuotaPlanRequest {
  body?: string(name='body', description='The request body parameters.', example='{ "name": "planA", // The quota is a level-1 quota. You can select only the fields that are related to the quota plan. "quota": { "name": "a", "nickName": "aaa_nick", "tenantId": "10001", "regionId": "cn-hangzhou", "parentId": "0", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false }, "subQuotaInfoList": \\[ { "nickName": "WlmFuxiSecondaryOnlineQuotaTest", "name": "WlmFuxiSecondaryOnlineQuotaTest", "type": "FUXI_ONLINE", "tenantId": "10001", "regionId": "cn-hangzhou", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false } } ] } }'),
  region?: string(name='region', description='The ID of the region.', example='cn-hangzhou'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
}

model UpdateQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe516688379832875789e2c65'),
}

model UpdateQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQuotaPlanResponseBody(name='body'),
}

async function updateQuotaPlanWithOptions(nickname: string, planName: string, request: UpdateQuotaPlanRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateQuotaPlanResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateQuotaPlan',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/plans/${OpenApiUtil.getEncodeParam(planName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQuotaPlan(nickname: string, planName: string, request: UpdateQuotaPlanRequest): UpdateQuotaPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateQuotaPlanWithOptions(nickname, planName, request, headers, runtime);
}

model UpdateQuotaScheduleRequest {
  body?: string(name='body', description='The request body parameters.', example='\\# The quota plan immediately takes effect. \\[ { "type": "once", "plan": "planA", "operator":"userA" } ] # The quota plan is scheduled on a regular basis. \\[ { "id": "etl_time", "type": "daily", "condition": { "at": "0800", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planA" }, { "id": "bi", "type": "daily", "condition": { "at": "0900", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planB" }, ]'),
  region?: string(name='region', description='The ID of the region.', example='cn-chengdu'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
}

model UpdateQuotaScheduleResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe516691014920015940e1c9d'),
}

model UpdateQuotaScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateQuotaScheduleResponseBody(name='body'),
}

async function updateQuotaScheduleWithOptions(nickname: string, request: UpdateQuotaScheduleRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateQuotaScheduleResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.region)) {
    query['region'] = request.region;
  }
  if (!Util.isUnset(request.tenantId)) {
    query['tenantId'] = request.tenantId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'UpdateQuotaSchedule',
    version = '2022-01-04',
    protocol = 'HTTPS',
    pathname = `/api/v1/quotas/${OpenApiUtil.getEncodeParam(nickname)}/schedule`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateQuotaSchedule(nickname: string, request: UpdateQuotaScheduleRequest): UpdateQuotaScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateQuotaScheduleWithOptions(nickname, request, headers, runtime);
}

