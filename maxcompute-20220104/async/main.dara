/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'MaxCompute';
  @version = '2022-01-04';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'maxcompute.aliyuncs.com',
    ap-northeast-2-pop = 'maxcompute.aliyuncs.com',
    ap-south-1 = 'maxcompute.aliyuncs.com',
    ap-southeast-1 = 'maxcompute.aliyuncs.com',
    ap-southeast-2 = 'maxcompute.aliyuncs.com',
    ap-southeast-3 = 'maxcompute.aliyuncs.com',
    ap-southeast-5 = 'maxcompute.aliyuncs.com',
    cn-beijing = 'maxcompute.aliyuncs.com',
    cn-beijing-finance-1 = 'maxcompute.aliyuncs.com',
    cn-beijing-finance-pop = 'maxcompute.aliyuncs.com',
    cn-beijing-gov-1 = 'maxcompute.aliyuncs.com',
    cn-beijing-nu16-b01 = 'maxcompute.aliyuncs.com',
    cn-chengdu = 'maxcompute.aliyuncs.com',
    cn-edge-1 = 'maxcompute.aliyuncs.com',
    cn-fujian = 'maxcompute.aliyuncs.com',
    cn-haidian-cm12-c01 = 'maxcompute.aliyuncs.com',
    cn-hangzhou = 'maxcompute.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-finance = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'maxcompute.aliyuncs.com',
    cn-hangzhou-test-306 = 'maxcompute.aliyuncs.com',
    cn-hongkong = 'maxcompute.aliyuncs.com',
    cn-hongkong-finance-pop = 'maxcompute.aliyuncs.com',
    cn-huhehaote = 'maxcompute.aliyuncs.com',
    cn-north-2-gov-1 = 'maxcompute.aliyuncs.com',
    cn-qingdao = 'maxcompute.aliyuncs.com',
    cn-qingdao-nebula = 'maxcompute.aliyuncs.com',
    cn-shanghai = 'maxcompute.aliyuncs.com',
    cn-shanghai-et15-b01 = 'maxcompute.aliyuncs.com',
    cn-shanghai-et2-b01 = 'maxcompute.aliyuncs.com',
    cn-shanghai-finance-1 = 'maxcompute.aliyuncs.com',
    cn-shanghai-inner = 'maxcompute.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'maxcompute.aliyuncs.com',
    cn-shenzhen = 'maxcompute.aliyuncs.com',
    cn-shenzhen-finance-1 = 'maxcompute.aliyuncs.com',
    cn-shenzhen-inner = 'maxcompute.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'maxcompute.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'maxcompute.aliyuncs.com',
    cn-wuhan = 'maxcompute.aliyuncs.com',
    cn-yushanfang = 'maxcompute.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'maxcompute.aliyuncs.com',
    cn-zhangjiakou = 'maxcompute.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'maxcompute.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'maxcompute.aliyuncs.com',
    eu-central-1 = 'maxcompute.aliyuncs.com',
    eu-west-1 = 'maxcompute.aliyuncs.com',
    eu-west-1-oxs = 'maxcompute.aliyuncs.com',
    me-east-1 = 'maxcompute.aliyuncs.com',
    rus-west-1-pop = 'maxcompute.aliyuncs.com',
    us-east-1 = 'maxcompute.aliyuncs.com',
    us-west-1 = 'maxcompute.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreatePackageRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{
"name": "test_packege", 
    "resourceList": { 
        "table": [
            {
                "name": "table_name",
                "actions": [
                    "Describe",
                    "Select"
                ]
            },
            {
                "name": "table_name",
                "actions": [
                    "Describe",
                    "Select"
                ]
            }
        ],
        "resource": [
            {
                "name": "",
                "actions": []
            },
            {
                "name": "",
                "actions": []
            }
        ],
        "function": [
            {
                "name": "",
                "actions": []
            },
            {
                "name": "",
                "actions": []
            }
        ]
    }
}', position='Body'),
  isInstall?: boolean(name='isInstall', description='Specifies whether to install the package.', example='false', position='Query'),
}

model CreatePackageResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ab16684833172127321e2c25'),
}

model CreatePackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePackageResponseBody(name='body'),
}

async function createPackage(request: CreatePackageRequest): CreatePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePackage', 'POST', '/api/v1/projects/{projectName}/packages', 'json', false, 'json', request);
}

model CreateProjectRequest {
  body?: string(name='body', description='The request body parameters.', example='{ "name": "project_name", "comment": "", "productType":"payasyougo/subscription/dev", /\\*\\* \\* "PAYASYOUGO": specifies a pay-as-you-go project. \\* "SUBSCRIPTION": specifies a subscription project. \\* "DEV": specifies that the project is created in Developer Edition. \\*/ "defaultQuota": "quota_nick_name", "properties": { "sqlMeteringMax":"", "typeSystem": "",// The string type. Valid values: 1, 2, and hive. "encryption": { "enable": true, "algorithm":"" , // The name of the encryption algorithm. "key":"" // The key of the encryption algorithm. } // json: This field is required only when data encryption is enabled. } }', position='Body'),
}

model CreateProjectResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7a316654730544735643e9200'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/api/v1/projects', 'json', false, 'json', request);
}

model CreateQuotaPlanRequest {
  nickname: string(name='nickname', description='QuotaNickName', example='planA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{ "name": "planA", // The quota is a level-1 quota. You can select only the fields that are related to the quota plan. "quota": { "name": "a", "nickName": "aaa_nick", "tenantId": "10001", "regionId": "cn-hangzhou", "parentId": "0", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false }, "subQuotaInfoList": \\[ { "nickName": "WlmFuxiSecondaryOnlineQuotaTest", "name": "WlmFuxiSecondaryOnlineQuotaTest", "type": "FUXI_ONLINE", "tenantId": "10001", "regionId": "cn-hangzhou", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false } } ] } }', position='Body'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='228451885265153', position='Query'),
}

model CreateQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4b016674434996033675e71ee'),
}

model CreateQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQuotaPlanResponseBody(name='body'),
}

async function createQuotaPlan(request: CreateQuotaPlanRequest): CreateQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateQuotaPlan', 'POST', '/api/v1/quotas/{nickname}/plans', 'json', false, 'json', request);
}

model CreateQuotaScheduleRequest {
  nickname: string(name='nickname', description='QuotaNickName', example='quota_A', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='\\# The quota plan immediately takes effect. \\[ { "type": "once", "plan": "planA", "operator":"xxx" } ] # The quota plan is scheduled on a regular basis. \\[ { "id": "bi", "type": "daily", "condition": { "at": "0800", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planA" }, { "id": "bi", "type": "daily", "condition": { "at": "0900", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planB" }, ]', position='Body'),
  region?: string(name='region', description='The ID of the region.', example='cn-chengdu', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='407137536592384', position='Query'),
}

model CreateQuotaScheduleResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0b716671885050924814e3623'),
}

model CreateQuotaScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQuotaScheduleResponseBody(name='body'),
}

async function createQuotaSchedule(request: CreateQuotaScheduleRequest): CreateQuotaScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateQuotaSchedule', 'POST', '/api/v1/quotas/{nickname}/schedule', 'json', false, 'json', request);
}

model CreateRoleRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  body?: string(name='body', description='The request body parameters. For valid values, see [MaxCompute permissions](~~27935~~).', example='{"name": "role_name","type": "resource/adminn","policy": "", // The document of the policy. This parameter is not required if an access-control list (ACL) is used. "acl": { // This parameter is not required if a policy is used. "table": \\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"resource":\\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"function":\\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"package":\\[{"name": "", "actions":\\["","",]}, {"name": "", "actions":\\[]}],"project":\\[{"name": "", "actions":\\[]}], // Only the current project is displayed in the console. "instance":\\[{"name": "", "actions":\\[]}] // The parameter name must be set to an asterisk (\\*) in the console. }}// An asterisk (\\*) can be specified for name.', position='Body'),
}

model CreateRoleResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7e716665825896565060e87a4'),
}

model CreateRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRoleResponseBody(name='body'),
}

async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRole', 'POST', '/api/v1/projects/{projectName}/roles', 'json', false, 'json', request);
}

model DeleteQuotaPlanRequest {
  nickname: string(name='nickname', description='QuotaNickName', example='quota_A', position='Path'),
  planName: string(name='planName', description='The name of the quota plan.', example='planA', position='Path'),
  region?: string(name='region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='416441016836866', position='Query'),
}

model DeleteQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b57ff7616612271051086500ea3ce'),
}

model DeleteQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQuotaPlanResponseBody(name='body'),
}

async function deleteQuotaPlan(request: DeleteQuotaPlanRequest): DeleteQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteQuotaPlan', 'DELETE', '/api/v1/quotas/{nickname}/plans/{planName}', 'json', false, 'json', request);
}

model GetJobResourceUsageRequest {
  date: string(name='date', example='2023-05-15', position='Query'),
  jobOwnerList?: [ string ](name='jobOwnerList', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  quotaNicknameList?: [ string ](name='quotaNicknameList', shrink='simple', position='Query'),
}

model GetJobResourceUsageResponseBody = {
  data?: {
    jobResourceUsageList?: [ 
      {
        cuUsage?: long(name='cuUsage', example='1185100'),
        date?: string(name='date', example='2023-05-09'),
        jobOwner?: string(name='jobOwner', example='ALIYUN$xxx@test.aliyunid.com'),
        memoryUsage?: long(name='memoryUsage', example='15169536'),
        quotaNickname?: string(name='quotaNickname', example='my_quota'),
      }
    ](name='jobResourceUsageList'),
    pageNumber?: long(name='pageNumber', example='2'),
    pageSize?: long(name='pageSize', example='10'),
    totalCount?: long(name='totalCount', example='64'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='success'),
  errorMsg?: string(name='errorMsg', example='0A3B1E82006A23A918C70905BF08AEC7'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0b57ff7616612271051086500ea3ce'),
}

model GetJobResourceUsageResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobResourceUsageResponseBody(name='body'),
}

async function getJobResourceUsage(request: GetJobResourceUsageRequest): GetJobResourceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJobResourceUsage', 'GET', '/api/v1/jobs/resourceUsage', 'json', false, 'json', request);
}

model GetPackageRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  packageName: string(name='packageName', description='The name of the package.', example='test_package', position='Path'),
  sourceProject?: string(name='sourceProject', description='The project to which the package belongs. This parameter is required if the package is installed in the MaxCompute project.', example='projectB', position='Query'),
}

model GetPackageResponseBody = {
  data?: {
    allowedProjectList?: [ 
      {
        label?: string(name='label', description='The security level for sensitive data.', example='2'),
        project?: string(name='project', description='The name of the MaxCompute project.', example='proejctB'),
      }
    ](name='allowedProjectList', description='The projects in which the package is installed.'),
    resourceList?: {
      function?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
          name?: string(name='name', description='The name of the function.', example='function_1'),
        }
      ](name='function', description='The functions.'),
      resource?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
          name?: string(name='name', description='The name of the resource.', example='res_1'),
        }
      ](name='resource', description='The resources.'),
      table?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
          name?: string(name='name', description='The name of the table.', example='dim_odps'),
        }
      ](name='table', description='The tables.'),
    }(name='resourceList', description='The details of the resources that are included in the package.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b57ff8316614119858417939e3e54'),
}

model GetPackageResponse = {
  headers: map[string]string(name='headers'),
  body: GetPackageResponseBody(name='body'),
}

async function getPackage(request: GetPackageRequest): GetPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPackage', 'GET', '/api/v1/projects/{projectName}/packages/{packageName}', 'json', false, 'json', request);
}

model GetProjectRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='odps_project', position='Path'),
}

model GetProjectResponseBody = {
  data?: {
    comment?: string(name='comment', description='The comment of the project.', example='maxcompute project'),
    costStorage?: string(name='costStorage', description='The storage usage.', example='16489027'),
    defaultQuota?: string(name='defaultQuota', description='The default computing quota.', example='quota_a'),
    ipWhiteList?: {
      ipList?: string(name='ipList', description='The list of IP addresses.', example='10.88.111.3'),
      vpcIpList?: string(name='vpcIpList', description='The list of virtual private cloud (VPC) IP addresses.', example='10.88.111.3'),
    }(name='ipWhiteList', description='The IP address whitelist.'),
    name?: string(name='name', description='The name of the MaxCompute project.', example='odps_project'),
    owner?: string(name='owner', description='The owner of the project.', example='1565950907343451'),
    productType?: string(name='productType', description='The billing method of the project.', example='PayAsYouGo'),
    properties?: {
      allowFullScan?: boolean(name='allowFullScan', description='Indicates whether a full table scan on the project is enabled.', example='false'),
      elderTunnelQuota?: string(name='elderTunnelQuota', description='This operation does not return a value for this parameter.', example='No value'),
      enableDecimal2?: boolean(name='enableDecimal2', description='Indicates whether the DECIMAL data type in MaxCompute V2.0 is enabled.', example='true'),
      enableTunnelQuotaRoute?: boolean(name='enableTunnelQuotaRoute', description='Indicates whether tunnel quota routing is enabled.', example='true'),
      encryption?: {
        algorithm?: string(name='algorithm', description='The name of the encryption algorithm.', example='SHA1'),
        enable?: boolean(name='enable', description='Indicates whether data encryption is enabled. Valid values: true and false.', example='true'),
        key?: string(name='key', description='The key of the encryption algorithm.', example='dafault'),
      }(name='encryption', description='The encryption information.'),
      retentionDays?: long(name='retentionDays', description='The number of days for which backup data can be retained.', example='1'),
      sqlMeteringMax?: string(name='sqlMeteringMax', description='The upper limit for the resources that are consumed by an SQL statement.', example='1500'),
      tableLifecycle?: {
        type?: string(name='type', description='The type of the lifecycle. Valid values: -**mandatory**: The lifecycle clause is required. You must configure a lifecycle for a table. -**optional**: The lifecycle clause is optional in a table creation statement. If you do not configure a lifecycle for a table, the table does not expire. -**inherit**: If you do not configure a lifecycle for a table when you create the table, the value of the odps.table.lifecycle.value parameter is used by default.', example='optional'),
        value?: string(name='value', description='The retention period of a table. Unit: days.', example='37231'),
      }(name='tableLifecycle', description='The lifecycle of the table in the project.'),
      timezone?: string(name='timezone', description='The time zone of the project.', example='Asia/Shanghai'),
      tunnelQuota?: string(name='tunnelQuota', description='The name of the tunnel quota.', example='Quota'),
      typeSystem?: string(name='typeSystem', description='The data type edition. Valid values: -**1**: MaxCompute V1.0 data type edition. -**2**: MaxCompute V2.0 data type edition. -**hive**: Hive-compatible data type edition.', example='2.0'),
    }(name='properties', description='The properties of the project.'),
    saleTag?: {
      resourceId?: string(name='resourceId', description='The ID of the resource.', example='project_name'),
      resourceType?: string(name='resourceType', description='The type of the resource.', example='project'),
    }(name='saleTag', description='The tag.'),
    securityProperties?: {
      enableDownloadPrivilege?: boolean(name='enableDownloadPrivilege', description='Indicates whether Download control is enabled.', example='false'),
      labelSecurity?: boolean(name='labelSecurity', description='Indicates whether label-based access control is enabled.', example='false'),
      objectCreatorHasAccessPermission?: boolean(name='objectCreatorHasAccessPermission', description='Indicates whether the object creator is allowed to perform operations on objects.', example='true'),
      objectCreatorHasGrantPermission?: boolean(name='objectCreatorHasGrantPermission', description='Indicates whether the object creator is allowed to authorize other users to perform operations on objects.', example='true'),
      projectProtection?: {
        exceptionPolicy?: string(name='exceptionPolicy', description='The exception policy. If cross-project data access operations are required, the project owner must configure an exception policy in advance to allow the specified user to transfer data of a specified object from the current project to a specified project. After the exception policy is configured, data of the object can be transferred to the specified project even if the project data protection feature is enabled.', example='{
    "Version": "1",
    "Statement":
    [{
        "Effect":"Allow",
        "Principal":"<Principal>",
        "Action":["odps:<Action1>[, <Action2>, ...]"],
        "Resource":"acs:odps:*:<Resource>",
        "Condition":{
            "StringEquals": {
                "odps:TaskType":["<Tasktype>"]
            }
        }
    }]
    }'),
        protected?: boolean(name='protected', description='Indicates whether project data protection is enabled.', example='true'),
      }(name='projectProtection', description='Indicates whether project data protection is enabled.'),
      usingAcl?: boolean(name='usingAcl', description='Indicates whether ACL-based access control is enabled.', example='true'),
      usingPolicy?: boolean(name='usingPolicy', description='Indicates whether policy-based access control is enabled.', example='true'),
    }(name='securityProperties', description='The permission properties.'),
    status?: string(name='status', description='The status of the project. Valid values: -**AVAILABLE**: The project was available. -**READONLY**: The project was read only. -**FROZEN**: The project was frozen. -**DELETING**: The project was being deleted.', example='AVAILABLE'),
    type?: string(name='type', description='The type of the project. Valid values: -**managed**: The project is an internal project. -**external**: The project is an external project.', example='managed'),
  }(name='data', description='The returned data.'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7b316643495896551555e855b'),
}

model GetProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetProjectResponseBody(name='body'),
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/api/v1/projects/{projectName}', 'json', false, 'json', request);
}

model GetQuotaRequest {
  nickname: string(name='nickname', example='quota_a', position='Path'),
  akProven?: string(name='AkProven', example='null', position='Query'),
  mock?: boolean(name='mock', example='false', position='Query'),
  region?: string(name='region', example='cn-chengdu', position='Query'),
  tenantId?: string(name='tenantId', example='520539530998273', position='Query'),
}

model GetQuotaResponseBody = {
  billingPolicy?: {
    billingMethod?: string(name='billingMethod', example='subscription'),
    odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
    orderId?: string(name='orderId', example='45245678'),
  }(name='billingPolicy'),
  cluster?: string(name='cluster', example='AT-120N'),
  createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
  creatorId?: string(name='creatorId', example='672863518'),
  data?: {
    billingPolicy?: {
      billingMethod?: string(name='billingMethod', example='subscription'),
      odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
      orderId?: string(name='orderId', example='45245678'),
    }(name='billingPolicy'),
    cluster?: string(name='cluster', example='AT-120N'),
    createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
    creatorId?: string(name='creatorId', example='672863518'),
    groupName?: string(name='groupName'),
    id?: string(name='id', example='0'),
    name?: string(name='name', example='quota_a'),
    nickName?: string(name='nickName', example='quota_nickname'),
    parameter?: map[string]any(name='parameter'),
    parentId?: string(name='parentId', example='null'),
    regionId?: string(name='regionId', example='cn-beijing'),
    saleTag?: {
      resourceIds?: [ string ](name='resourceIds'),
      resourceType?: string(name='resourceType'),
    }(name='saleTag'),
    scheduleInfo?: {
      currPlan?: string(name='currPlan', example='planA'),
      currTime?: string(name='currTime', example='0800'),
      nextPlan?: string(name='nextPlan', example='planB'),
      nextTime?: string(name='nextTime', example='1700'),
      oncePlan?: string(name='oncePlan', example='planC'),
      onceTime?: string(name='onceTime', example='1500'),
      operatorName?: string(name='operatorName', example='userA'),
      timezone?: string(name='timezone'),
    }(name='scheduleInfo'),
    status?: string(name='status', example='ON'),
    subQuotaInfoList?: [ 
      {
        billingPolicy?: {
          billingMethod?: string(name='billingMethod', example='subscription'),
          odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
          orderId?: string(name='orderId', example='45245678'),
        }(name='billingPolicy'),
        cluster?: string(name='cluster', example='AT-120N'),
        createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
        creatorId?: string(name='creatorId', example='672863518'),
        groupName?: string(name='groupName'),
        id?: string(name='id', example='1000048'),
        name?: string(name='name', example='subquotaA'),
        nickName?: string(name='nickName', example='subquotaA'),
        parameter?: map[string]any(name='parameter'),
        parentId?: string(name='parentId', example='0'),
        regionId?: string(name='regionId', example='cn-beijing'),
        saleTag?: {
          resourceIds?: [ string ](name='resourceIds'),
          resourceType?: string(name='resourceType'),
        }(name='saleTag'),
        scheduleInfo?: {
          currPlan?: string(name='currPlan', example='planA'),
          currTime?: string(name='currTime', example='0800'),
          nextPlan?: string(name='nextPlan', example='planB'),
          nextTime?: string(name='nextTime', example='1700'),
          oncePlan?: string(name='oncePlan', example='planC'),
          onceTime?: string(name='onceTime', example='1500'),
          operatorName?: string(name='operatorName', example='userA'),
          timezone?: string(name='timezone'),
        }(name='scheduleInfo'),
        status?: string(name='status', example='ON'),
        tag?: string(name='tag', example='abc'),
        tenantId?: string(name='tenantId', example='478403690625249'),
        type?: string(name='type', example='FUXI_ONLINE'),
        version?: string(name='version', example='1'),
      }
    ](name='subQuotaInfoList'),
    tag?: string(name='tag', example='abc'),
    tenantId?: string(name='tenantId', example='478403690625249'),
    type?: string(name='type', example='FUXI_ONLINE'),
    version?: string(name='version', example='1'),
  }(name='data'),
  id?: string(name='id', example='0'),
  name?: string(name='name', example='quota_a'),
  nickName?: string(name='nickName', example='quota_nickname'),
  parameter?: map[string]any(name='parameter'),
  parentId?: string(name='parentId', example='null'),
  regionId?: string(name='regionId', example='cn-beijing'),
  requestId?: string(name='requestId', example='0b87b7a316654730544735643e9200'),
  saleTag?: {
    resourceIds?: [ string ](name='resourceIds'),
    resourceType?: string(name='resourceType'),
  }(name='saleTag'),
  scheduleInfo?: {
    currPlan?: string(name='currPlan', example='planA'),
    currTime?: string(name='currTime', example='0800'),
    nextPlan?: string(name='nextPlan', example='planB'),
    nextTime?: string(name='nextTime', example='1700'),
    oncePlan?: string(name='oncePlan', example='planC'),
    onceTime?: string(name='onceTime', example='1500'),
    operatorName?: string(name='operatorName', example='userA'),
    timezone?: string(name='timezone'),
  }(name='scheduleInfo'),
  status?: string(name='status', example='ON'),
  subQuotaInfoList?: [ 
    {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
        orderId?: string(name='orderId', example='45245678'),
      }(name='billingPolicy'),
      cluster?: string(name='cluster', example='AT-120N'),
      createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', example='672863518'),
      id?: string(name='id', example='1000048'),
      name?: string(name='name', example='subquotaA'),
      nickName?: string(name='nickName', example='subquotaA'),
      parameter?: map[string]any(name='parameter'),
      parentId?: string(name='parentId', example='0'),
      regionId?: string(name='regionId', example='cn-beijing'),
      saleTag?: {
        resourceIds?: [ string ](name='resourceIds'),
        resourceType?: string(name='resourceType'),
      }(name='saleTag'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', example='planA'),
        currTime?: string(name='currTime', example='0800'),
        nextPlan?: string(name='nextPlan', example='planB'),
        nextTime?: string(name='nextTime', example='1700'),
        oncePlan?: string(name='oncePlan', example='planC'),
        onceTime?: string(name='onceTime', example='1500'),
        operatorName?: string(name='operatorName', example='userA'),
        timezone?: string(name='timezone'),
      }(name='scheduleInfo'),
      status?: string(name='status', example='ON'),
      tag?: string(name='tag', example='abc'),
      tenantId?: string(name='tenantId', example='478403690625249'),
      type?: string(name='type', example='FUXI_ONLINE'),
      version?: string(name='version', example='1'),
    }
  ](name='subQuotaInfoList'),
  tag?: string(name='tag', example='abc'),
  tenantId?: string(name='tenantId', example='478403690625249'),
  type?: string(name='type', example='FUXI_ONLINE'),
  version?: string(name='version', example='1'),
}

model GetQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: GetQuotaResponseBody(name='body'),
}

async function getQuota(request: GetQuotaRequest): GetQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuota', 'GET', '/api/v1/quotas/{nickname}', 'json', false, 'json', request);
}

model GetQuotaPlanRequest {
  nickname: string(name='nickname', description='The name of the quota.', example='quotaA', position='Path'),
  planName: string(name='planName', description='The name of the quota plan.', example='planA', position='Path'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='483212237127906', position='Query'),
}

model GetQuotaPlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='The time when the quota plan was created.', example='2022-05-16T06:07:45Z'),
    name?: string(name='name', description='The name of the quota plan.', example='planA'),
    quota?: {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
        orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
      }(name='billingPolicy', description='The information of the order.'),
      cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The ID of the quota.', example='0'),
      name?: string(name='name', description='The name of the quota.', example='quota_a'),
      nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
      parameter?: map[string]any(name='parameter', description='The description of the quota.'),
      parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
      regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
        currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
        nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
        nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
        oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
        onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
        operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
      }(name='scheduleInfo', description='The information of the scheduling plan.'),
      status?: string(name='status', description='The status of the resource.', example='ON'),
      subQuotaInfoList?: [ 
        {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the user who created the quota plan.', example='672863518'),
          id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
          name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
          nickName?: string(name='nickName', description='The alias of the level-2 quota.', example='subquotaA'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
          regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the resource.', example='ON'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }
      ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
      tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
      tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
      type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version number.', example='1'),
    }(name='quota', description='The details of the quota.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0aa16667684362147582e038f'),
}

model GetQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  body: GetQuotaPlanResponseBody(name='body'),
}

async function getQuotaPlan(request: GetQuotaPlanRequest): GetQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuotaPlan', 'GET', '/api/v1/quotas/{nickname}/plans/{planName}', 'json', false, 'json', request);
}

model GetRoleAclRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.', example='roleA', position='Path'),
}

model GetRoleAclResponseBody = {
  data?: {
    function?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
        name?: string(name='name', description='The name of the function.', example='functionA'),
      }
    ](name='function', description='The function.'),
    instance?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the instance.'),
        name?: string(name='name', description='The name of the instance.', example='instanceA'),
      }
    ](name='instance', description='The instance.'),
    package?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the package.'),
        name?: string(name='name', description='The name of the package.', example='packageA'),
      }
    ](name='package', description='The package.'),
    project?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the project.'),
        name?: string(name='name', description='The name of the MaxCompute project.', example='projectA'),
      }
    ](name='project', description='The project.'),
    resource?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
        name?: string(name='name', description='The name of the resource.', example='resourceA'),
      }
    ](name='resource', description='The resource.'),
    table?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
        name?: string(name='name', description='The name of the table.', example='tableA'),
      }
    ](name='table', description='The table.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dc0916696898838762018e9564'),
}

model GetRoleAclResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleAclResponseBody(name='body'),
}

async function getRoleAcl(request: GetRoleAclRequest): GetRoleAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRoleAcl', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/roleAcl', 'json', false, 'json', request);
}

model GetRoleAclOnObjectRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.', example='roleA', position='Path'),
  objectName: string(name='objectName', description='The name of the object.', example='tableA', position='Query'),
  objectType: string(name='objectType', description='The type of the object.', example='table', position='Query'),
}

model GetRoleAclOnObjectResponseBody = {
  data?: {
    actions?: [ string ](name='actions', description='The operations that were performed on the object.'),
    name?: string(name='name', description='The name of the object.', example='tableA'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1366d16686529650188023ef87f'),
}

model GetRoleAclOnObjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetRoleAclOnObjectResponseBody(name='body'),
}

async function getRoleAclOnObject(request: GetRoleAclOnObjectRequest): GetRoleAclOnObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRoleAclOnObject', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/acl', 'json', false, 'json', request);
}

model GetRolePolicyRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.', example='roleA', position='Path'),
}

model GetRolePolicyResponseBody = {
  data?: string(name='data', description='The returned data.', example='{
      "Statement": [
            {
                  "Action": [
                        "odps:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                        "acs:odps:*:projects/{projectname}/authorization/packages"
                  ]
            }
      ],
      "Version": "1"
}'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1eeed16675342848904412e08dd'),
}

model GetRolePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GetRolePolicyResponseBody(name='body'),
}

async function getRolePolicy(request: GetRolePolicyRequest): GetRolePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRolePolicy', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/policy', 'json', false, 'json', request);
}

model GetRunningJobsRequest {
  from: long(name='from', example='1683785928', position='Query'),
  jobOwnerList?: [ string ](name='jobOwnerList', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  quotaNicknameList?: [ string ](name='quotaNicknameList', shrink='simple', position='Query'),
  to: long(name='to', example='1683612946', position='Query'),
}

model GetRunningJobsResponseBody = {
  data?: {
    pageNumber?: long(name='pageNumber', example='2'),
    pageSize?: long(name='pageSize', example='10'),
    runningJobInfoList?: [ 
      {
        cuSnapshot?: double(name='cuSnapshot', example='0.45'),
        instanceId?: string(name='instanceId', example='2023050206371544gomgtp3ljcr4'),
        jobOwner?: string(name='jobOwner', example='ALIYUN$xxx@test.aliyunid.com'),
        memorySnapshot?: double(name='memorySnapshot', example='0.45'),
        progress?: double(name='progress', example='0'),
        project?: string(name='project', example='project_20221021123044_981b'),
        quotaNickname?: string(name='quotaNickname', example='my_quota'),
        runningAtTime?: long(name='runningAtTime', example='1689746864'),
        submittedAtTime?: long(name='submittedAtTime', example='1689746864'),
      }
    ](name='runningJobInfoList'),
    totalCount?: long(name='totalCount', example='64'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='success'),
  errorMsg?: string(name='errorMsg', example='0A3B1FD2006A24C8D8BE65CDAC028298'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0bc3b4ab16684833172127321e2c25'),
}

model GetRunningJobsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRunningJobsResponseBody(name='body'),
}

async function getRunningJobs(request: GetRunningJobsRequest): GetRunningJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRunningJobs', 'GET', '/api/v1/jobs/runningJobs', 'json', false, 'json', request);
}

model GetTrustedProjectsRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='odps_project', position='Path'),
}

model GetTrustedProjectsResponseBody = {
  data?: [ string ](name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc0590416675329272834336e4387'),
}

model GetTrustedProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: GetTrustedProjectsResponseBody(name='body'),
}

async function getTrustedProjects(request: GetTrustedProjectsRequest): GetTrustedProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrustedProjects', 'GET', '/api/v1/projects/{projectName}/trustedProjects', 'json', false, 'json', request);
}

model KillJobsRequest {
  body?: string(name='body', example='[
      {
            "instanceId": "",
            "projectName": ""
      },
      {
            "instanceId": "",
            "projectName": ""
      }
]', position='Body'),
  region?: string(name='region', example='cn-hangzhou', position='Query'),
  tenantId?: string(name='tenantId', example='478403690625249', position='Query'),
}

model KillJobsResponseBody = {
  data?: string(name='data', example='success'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0abb7ede16814560741256732e91b6'),
}

model KillJobsResponse = {
  headers: map[string]string(name='headers'),
  body: KillJobsResponseBody(name='body'),
}

async function killJobs(request: KillJobsRequest): KillJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'KillJobs', 'POST', '/api/v1/jobs/kill', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='odps_project', position='Path'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10', position='Query'),
  prefix?: string(name='prefix', description='The names of the returned resources. The names must start with the value specified by the prefix parameter. If the prefix parameter is set to a, the names of the returned resources must start with a.', example='a', position='Query'),
}

model ListFunctionsResponseBody = {
  data?: {
    functions?: [ 
      {
        class?: string(name='class', description='The class in which the function was defined.', example='abc'),
        creationTime?: long(name='creationTime', description='The time when the function was created. Unit: milliseconds.', example='1664505167000'),
        name?: string(name='name', description='The name of the function.', example='getdate'),
        owner?: string(name='owner', description='The owner of the function.', example='odpsowner'),
        resources?: string(name='resources', description='The name of the resource that was associated with the function.', example='abc'),
        schema?: string(name='schema', description='The schema of the function.', example='abc'),
      }
    ](name='functions', description='The information about each function.'),
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0b716671885050924814e3623'),
}

model ListFunctionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFunctionsResponseBody(name='body'),
}

async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctions', 'GET', '/api/v1/projects/{projectName}/functions', 'json', false, 'json', request);
}

model ListPackagesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
}

model ListPackagesResponseBody = {
  data?: {
    createdPackages?: [ 
      {
        createTime?: long(name='createTime', description='The time when the package was created.', example='2022-08-02T02:30:34Z'),
        name?: string(name='name', description='The name of the package.', example='packageA'),
      }
    ](name='createdPackages', description='The packages that were created.'),
    installedPackages?: [ 
      {
        installTime?: long(name='installTime', description='The time when the package was installed.', example='2022-09-02T02:30:34Z'),
        name?: string(name='name', description='The name of the package.', example='packageB'),
        sourceProject?: string(name='sourceProject', description='The project to which the package belongs. This parameter is required if the package is installed in the MaxCompute project.', example='projectB'),
        status?: string(name='status', description='The status of the package.', example='OK'),
      }
    ](name='installedPackages', description='The packages that were installed.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4aa16677927210252786e4cb6'),
}

model ListPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPackagesResponseBody(name='body'),
}

async function listPackages(request: ListPackagesRequest): ListPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPackages', 'GET', '/api/v1/projects/{projectName}/packages', 'json', false, 'json', request);
}

model ListProjectUsersRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
}

model ListProjectUsersResponseBody = {
  data?: {
    users?: [ 
      {
        name?: string(name='name', description='The name of the user.', example='userA'),
      }
    ](name='users', description='An array that contains users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7b316643495896551555e855b'),
}

model ListProjectUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectUsersResponseBody(name='body'),
}

async function listProjectUsers(request: ListProjectUsersRequest): ListProjectUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectUsers', 'GET', '/api/v1/projects/{projectName}/users', 'json', false, 'json', request);
}

model ListProjectsRequest {
  marker?: string(name='marker', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: int32(name='maxItem', example='10', position='Query'),
  prefix?: string(name='prefix', example='a', position='Query'),
  quotaName?: string(name='quotaName', position='Query'),
  quotaNickName?: string(name='quotaNickName', example='quotaA', position='Query'),
  region?: string(name='region', example='cn-beijing', position='Query'),
  saleTags?: string(name='saleTags', position='Query'),
  tenantId?: string(name='tenantId', example='549532154333697', position='Query'),
  type?: string(name='type', position='Query'),
}

model ListProjectsResponseBody = {
  data?: {
    nextToken?: string(name='NextToken'),
    marker?: string(name='marker', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', example='10'),
    projects?: [ 
      {
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        comment?: string(name='comment'),
        costStorage?: string(name='costStorage', example='16489027'),
        defaultQuota?: string(name='defaultQuota', example='quotaA'),
        ipWhiteList?: {
          ipList?: string(name='ipList', example='10.88.111.3'),
          vpcIpList?: string(name='vpcIpList', example='10.88.111.3'),
        }(name='ipWhiteList'),
        name?: string(name='name', example='odps_project'),
        owner?: string(name='owner', example='1139815775606813'),
        properties?: {
          allowFullScan?: boolean(name='allowFullScan', example='false'),
          elderTunnelQuota?: string(name='elderTunnelQuota'),
          enableDecimal2?: boolean(name='enableDecimal2', example='true'),
          enableTunnelQuotaRoute?: boolean(name='enableTunnelQuotaRoute', example='true'),
          encryption?: {
            algorithm?: string(name='algorithm', example='SHA1'),
            enable?: boolean(name='enable', example='true'),
            key?: string(name='key', example='dafault'),
          }(name='encryption'),
          retentionDays?: long(name='retentionDays', example='1'),
          sqlMeteringMax?: string(name='sqlMeteringMax', example='1500'),
          tableLifecycle?: {
            type?: string(name='type', example='optional'),
            value?: string(name='value', example='37231'),
          }(name='tableLifecycle'),
          timezone?: string(name='timezone', example='Asia/Shanghai'),
          tunnelQuota?: string(name='tunnelQuota', example='quota_tunnel'),
          typeSystem?: string(name='typeSystem', example='2'),
        }(name='properties'),
        saleTag?: {
          resourceId?: string(name='resourceId'),
          resourceType?: string(name='resourceType'),
        }(name='saleTag'),
        securityProperties?: {
          enableDownloadPrivilege?: boolean(name='enableDownloadPrivilege', example='false'),
          labelSecurity?: boolean(name='labelSecurity', example='false'),
          objectCreatorHasAccessPermission?: boolean(name='objectCreatorHasAccessPermission', example='true'),
          objectCreatorHasGrantPermission?: boolean(name='objectCreatorHasGrantPermission', example='true'),
          projectProtection?: {
            exceptionPolicy?: string(name='exceptionPolicy', example='{
      "Version": "1",
      "Statement": [
            {
                  "Effect": "Allow",
                  "Principal": "",
                  "Action": [
                        "odps:[, , ...]"
                  ],
                  "Resource": "acs:odps:*:",
                  "Condition": {
                        "StringEquals": {
                              "odps:TaskType": [
                                    ""
                              ]
                        }
                  }
            }
      ]
}'),
            protected?: boolean(name='protected', example='true'),
          }(name='projectProtection'),
          usingAcl?: boolean(name='usingAcl', example='true'),
          usingPolicy?: boolean(name='usingPolicy', example='true'),
        }(name='securityProperties'),
        status?: string(name='status', example='AVAILABLE'),
        type?: string(name='type', example='managed'),
      }
    ](name='projects'),
  }(name='data'),
  requestId?: string(name='requestId', example='0b16399216671970335563173e2340'),
}

model ListProjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/api/v1/projects', 'json', false, 'json', request);
}

model ListQuotasRequest {
  billingType?: string(name='billingType', example='subscription', position='Query'),
  marker?: string(name='marker', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: long(name='maxItem', example='100', position='Query'),
  productId?: string(name='productId', example='ODPS', position='Query'),
  region?: string(name='region', example='cn-beijing', position='Query'),
  saleTags?: string(name='saleTags', position='Query'),
  tenantId?: string(name='tenantId', example='280747109771520', position='Query'),
}

model ListQuotasResponseBody = {
  nextToken?: string(name='NextToken'),
  data?: {
    nextToken?: string(name='NextToken'),
    marker?: string(name='marker', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: long(name='maxItem', example='10'),
    quotaInfoList?: [ 
      {
        tags?: [ 
          {
            tagKey?: string(name='TagKey'),
            tagValue?: string(name='TagValue'),
          }
        ](name='Tags'),
        billingPolicy?: {
          billingMethod?: string(name='billingMethod', example='subscription'),
          odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
          orderId?: string(name='orderId', example='45245678'),
        }(name='billingPolicy'),
        cluster?: string(name='cluster', example='AT-120N'),
        createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
        creatorId?: string(name='creatorId', example='672863518'),
        groupName?: string(name='groupName'),
        id?: string(name='id', example='0'),
        name?: string(name='name', example='quota_a'),
        nickName?: string(name='nickName', example='quota_nickname'),
        parameter?: map[string]any(name='parameter'),
        parentId?: string(name='parentId', example='null'),
        regionId?: string(name='regionId', example='cn-beijing'),
        saleTag?: {
          resourceIds?: [ string ](name='resourceIds'),
          resourceType?: string(name='resourceType'),
        }(name='saleTag'),
        scheduleInfo?: {
          currPlan?: string(name='currPlan', example='planA'),
          currTime?: string(name='currTime', example='0800'),
          nextPlan?: string(name='nextPlan', example='planB'),
          nextTime?: string(name='nextTime', example='1700'),
          oncePlan?: string(name='oncePlan', example='planC'),
          onceTime?: string(name='onceTime', example='1500'),
          operatorName?: string(name='operatorName', example='userA'),
          timezone?: string(name='timezone'),
        }(name='scheduleInfo'),
        status?: string(name='status', example='ON'),
        subQuotaInfoList?: [ 
          {
            billingPolicy?: {
              billingMethod?: string(name='billingMethod', example='subscription'),
              odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
              orderId?: string(name='orderId', example='45245678'),
            }(name='billingPolicy'),
            cluster?: string(name='cluster', example='AT-120N'),
            createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
            creatorId?: string(name='creatorId', example='672863518'),
            groupName?: string(name='groupName'),
            id?: string(name='id', example='1000048'),
            name?: string(name='name', example='subquotaA'),
            nickName?: string(name='nickName', example='subquotaA'),
            parameter?: map[string]any(name='parameter'),
            parentId?: string(name='parentId', example='0'),
            regionId?: string(name='regionId', example='cn-beijing'),
            saleTag?: {
              resourceIds?: [ string ](name='resourceIds'),
              resourceType?: string(name='resourceType'),
            }(name='saleTag'),
            scheduleInfo?: {
              currPlan?: string(name='currPlan', example='planA'),
              currTime?: string(name='currTime', example='0800'),
              nextPlan?: string(name='nextPlan', example='planB'),
              nextTime?: string(name='nextTime', example='1700'),
              oncePlan?: string(name='oncePlan', example='planC'),
              onceTime?: string(name='onceTime', example='1500'),
              operatorName?: string(name='operatorName', example='userA'),
              timezone?: string(name='timezone'),
            }(name='scheduleInfo'),
            status?: string(name='status', example='ON'),
            tag?: string(name='tag', example='abc'),
            tenantId?: string(name='tenantId', example='280747109771520'),
            type?: string(name='type', example='FUXI_ONLINE'),
            version?: string(name='version', example='1'),
          }
        ](name='subQuotaInfoList'),
        tag?: string(name='tag', example='abc'),
        tenantId?: string(name='tenantId', example='280747109771520'),
        type?: string(name='type', example='FUXI_ONLINE'),
        version?: string(name='version', example='1'),
      }
    ](name='quotaInfoList'),
  }(name='data'),
  marker?: string(name='marker', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
  maxItem?: long(name='maxItem', example='10'),
  quotaInfoList?: [ 
    {
      tags?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
        orderId?: string(name='orderId', example='45245678'),
      }(name='billingPolicy'),
      cluster?: string(name='cluster', example='AT-120N'),
      createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', example='672863518'),
      groupName?: string(name='groupName'),
      id?: string(name='id', example='0'),
      name?: string(name='name', example='quota_a'),
      nickName?: string(name='nickName', example='quota_nickname'),
      parameter?: map[string]any(name='parameter'),
      parentId?: string(name='parentId', example='null'),
      regionId?: string(name='regionId', example='cn-beijing'),
      saleTag?: {
        resourceIds?: [ string ](name='resourceIds'),
        resourceType?: string(name='resourceType'),
      }(name='saleTag'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', example='planA'),
        currTime?: string(name='currTime', example='0800'),
        nextPlan?: string(name='nextPlan', example='planB'),
        nextTime?: string(name='nextTime', example='1700'),
        oncePlan?: string(name='oncePlan', example='planC'),
        onceTime?: string(name='onceTime', example='1500'),
        operatorName?: string(name='operatorName', example='userA'),
        timezone?: string(name='timezone'),
      }(name='scheduleInfo'),
      status?: string(name='status', example='ON'),
      subQuotaInfoList?: [ 
        {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
            orderId?: string(name='orderId', example='45245678'),
          }(name='billingPolicy'),
          cluster?: string(name='cluster', example='AT-120N'),
          createTime?: long(name='createTime', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', example='672863518'),
          groupName?: string(name='groupName'),
          id?: string(name='id', example='1000048'),
          name?: string(name='name', example='subquotaA'),
          nickName?: string(name='nickName', example='subquotaA'),
          parameter?: map[string]any(name='parameter'),
          parentId?: string(name='parentId', example='0'),
          regionId?: string(name='regionId', example='cn-beijing'),
          saleTag?: {
            resourceIds?: [ string ](name='resourceIds'),
            resourceType?: string(name='resourceType'),
          }(name='saleTag'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', example='planA'),
            currTime?: string(name='currTime', example='0800'),
            nextPlan?: string(name='nextPlan', example='planB'),
            nextTime?: string(name='nextTime', example='1700'),
            oncePlan?: string(name='oncePlan', example='planC'),
            onceTime?: string(name='onceTime', example='1500'),
            operatorName?: string(name='operatorName', example='userA'),
            timezone?: string(name='timezone'),
          }(name='scheduleInfo'),
          status?: string(name='status', example='ON'),
          tag?: string(name='tag', example='abc'),
          tenantId?: string(name='tenantId', example='280747109771520'),
          type?: string(name='type', example='FUXI_ONLINE'),
          version?: string(name='version', example='1'),
        }
      ](name='subQuotaInfoList'),
      tag?: string(name='tag', example='abc'),
      tenantId?: string(name='tenantId', example='280747109771520'),
      type?: string(name='type', example='FUXI_ONLINE'),
      version?: string(name='version', example='1'),
    }
  ](name='quotaInfoList'),
  requestId?: string(name='requestId', example='0bc12e6f16677875480593081d2956'),
}

model ListQuotasResponse = {
  headers: map[string]string(name='headers'),
  body: ListQuotasResponseBody(name='body'),
}

async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQuotas', 'GET', '/api/v1/quotas', 'json', false, 'json', request);
}

model ListQuotasPlansRequest {
  nickname: string(name='nickname', description='The name of the quota.', example='quotaA', position='Path'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model ListQuotasPlansResponseBody = {
  data?: {
    planList?: [ 
      {
        createTime?: string(name='createTime', description='The time when the quota plan was created.', example='2022-05-16T06:07:45Z'),
        name?: string(name='name', description='The name of the quota plan.', example='planA'),
        quota?: {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
          id?: string(name='id', description='The ID of the quota.', example='0'),
          name?: string(name='name', description='The name of the quota.', example='quota_a'),
          nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
          regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the resource.', example='ON'),
          subQuotaInfoList?: [ 
            {
              billingPolicy?: {
                billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
                odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
                orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
              }(name='billingPolicy', description='The information of the order.'),
              cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
              createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
              creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
              id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
              name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
              nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
              parameter?: map[string]any(name='parameter', description='The description of the quota.'),
              parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
              regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
              scheduleInfo?: {
                currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
                currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
                nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
                nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
                oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
                onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
                operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
              }(name='scheduleInfo', description='The information of the scheduling plan.'),
              status?: string(name='status', description='The status of the resource.', example='ON'),
              tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
              tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
              type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
              version?: string(name='version', description='The version number.', example='1'),
            }
          ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }(name='quota', description='The details of the quota.'),
      }
    ](name='planList', description='The list of quota plans.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0bd16661643917136451ebf55'),
}

model ListQuotasPlansResponse = {
  headers: map[string]string(name='headers'),
  body: ListQuotasPlansResponseBody(name='body'),
}

async function listQuotasPlans(request: ListQuotasPlansRequest): ListQuotasPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQuotasPlans', 'GET', '/api/v1/quotas/{nickname}/plans', 'json', false, 'json', request);
}

model ListResourcesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10', position='Query'),
  name?: string(name='name', description='The name of the resource.', example='res', position='Query'),
}

model ListResourcesResponseBody = {
  data?: {
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='ZmN0X21vbnRoX3Rhb2Jhb19pbmRleCE='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    resources?: [ 
      {
        creationTime?: long(name='creationTime', description='The time when the resource was created.', example='2022-01-29T03:34:09Z'),
        name?: string(name='name', description='The name of the resource.', example='res_1'),
        owner?: string(name='owner', description='The owner of the resource.', example='1265860483008101'),
        schema?: string(name='schema', description='The schema of the resource.', example='schemaA'),
        type?: string(name='type', description='The type of the resource.', example='file'),
      }
    ](name='resources', description='The list of resources.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ae16685836687916212e7850'),
}

model ListResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v1/projects/{projectName}/resources', 'json', false, 'json', request);
}

model ListRolesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
}

model ListRolesResponseBody = {
  data?: {
    roles?: [ 
      {
        acl?: {
          function?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
              name?: string(name='name', description='The name of the function.', example='functionA'),
            }
          ](name='function', description='The function.'),
          instance?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the instance.'),
              name?: string(name='name', description='The name of the instance.', example='instanceA'),
            }
          ](name='instance', description='The instance.'),
          package?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the package.'),
              name?: string(name='name', description='The name of the package.', example='packageA'),
            }
          ](name='package', description='The package.'),
          project?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the project.'),
              name?: string(name='name', description='The name of the MaxCompute project.', example='projectA'),
            }
          ](name='project', description='The project.'),
          resource?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
              name?: string(name='name', description='The name of the resource.', example='resourceA'),
            }
          ](name='resource', description='The resource.'),
          table?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
              name?: string(name='name', description='The name of the table.', example='tableA'),
            }
          ](name='table', description='The table.'),
        }(name='acl', description='The ACL-based permissions that are granted to the role.'),
        name?: string(name='name', description='The name of the role.', example='roleA'),
        policy?: string(name='policy', description='The policy that is attached to the role.', example='{
      "Statement": [
            {
                  "Action": [
                        "odps:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                        "acs:odps:*:projects/{projectname}/authorization/packages"
                  ]
            }
      ],
      "Version": "1"
}'),
        type?: string(name='type', description='The type of the role.', example='admin'),
      }
    ](name='roles', description='The MaxCompute project-level roles.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe716686526652451361e80ae'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRoles', 'GET', '/api/v1/projects/{projectName}/roles', 'json', false, 'json', request);
}

model ListTablesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='Y29tbWlzc2lvbl9leHRlcm5hbF91cmdlXzFfd3Ih', position='Query'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10', position='Query'),
  prefix?: string(name='prefix', description='The names of the returned resources. The names must start with the value specified by the prefix parameter. If the prefix parameter is set to a, the names of the returned resources must start with a.', example='a', position='Query'),
  type?: string(name='type', description='The type of the table.', example='internal', position='Query'),
}

model ListTablesResponseBody = {
  data?: {
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    tables?: [ 
      {
        creationTime?: long(name='creationTime', description='The time when the table was created.', example='2022-01-17T07:07:47Z'),
        name?: string(name='name', description='The name of the table.', example='dim_odps'),
        owner?: string(name='owner', description='The owner of the table.', example='1887853961230110'),
        schema?: string(name='schema', description='The schema of the table.', example='default'),
        type?: string(name='type', description='The type of the table.', example='internal'),
      }
    ](name='tables', description='The information about tables.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dd4516687375802853481ec9fd'),
}

model ListTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTablesResponseBody(name='body'),
}

async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTables', 'GET', '/api/v1/projects/{projectName}/tables', 'json', false, 'json', request);
}

model ListUsersRequest {
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
}

model ListUsersResponseBody = {
  data?: {
    pageNumber?: int32(name='pageNumber', example='2'),
    pageSize?: int32(name='pageSize', example='10'),
    totalCount?: int32(name='totalCount', example='64'),
    users?: [ 
      {
        accountId?: string(name='accountId', example='167835629082'),
        accountName?: string(name='accountName', example='Bob@'),
        accountType?: string(name='accountType', example='ALIYUN'),
        displayName?: string(name='displayName', example='Bob'),
        tenantId?: string(name='tenantId', example='1567253789'),
      }
    ](name='users'),
  }(name='data'),
  requestId?: string(name='requestId', example='0a06dd4816687424611405643e3730'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'GET', '/api/v1/users', 'json', false, 'json', request);
}

model ListUsersByRoleRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.', example='roleA', position='Path'),
}

model ListUsersByRoleResponseBody = {
  data?: {
    users?: [ 
      {
        name?: string(name='name', description='The name of the user.', example='ALIYUN${account_name}'),
      }
    ](name='users', description='The users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0bb16654558425251398e27a9'),
}

model ListUsersByRoleResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersByRoleResponseBody(name='body'),
}

async function listUsersByRole(request: ListUsersByRoleRequest): ListUsersByRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsersByRole', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/users', 'json', false, 'json', request);
}

model UpdatePackageRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='projectA', position='Path'),
  packageName: string(name='packageName', description='The name of the package.', example='packageA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{
    "add": {
        "allowedProjectList": [
            {
                "label": "2",
                "project": "project_name"
            }
        ],
        "resourceList": {
            "table": [
                {
                    "name": "table_name",
                    "actions": [
                        "Describe",
                        "Select"
                    ]
                },
                {
                    "name": "table_name",
                    "actions": [
                        "Describe",
                        "Select"
                    ]
                }
            ],
            "resource": [
                {
                    "name": "",
                    "actions": []
                },
                {
                    "name": "",
                    "actions": []
                }
            ],
            "function": [
                {
                    "name": "",
                    "actions": []
                },
                {
                    "name": "",
                    "actions": []
                }
            ]
        }
    },
    "remove": {
        "allowedProjectList": [
            {
                "project": "project_name"
            },
            {
                "project": "project_2"
            }
        ],
        "resourceList": {
            "table": [
                {
                    "name": "table_name"
                },
                {
                    "name": "table_name"
                }
            ],
            "resource": [
                {
                    "name": ""
                },
                {
                    "name": ""
                }
            ],
            "function": [
                {
                    "name": ""
                },
                {
                    "name": ""
                }
            ]
        }
    }
}', position='Body'),
}

model UpdatePackageResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1ec4016697018733156991e0888'),
}

model UpdatePackageResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePackageResponseBody(name='body'),
}

async function updatePackage(request: UpdatePackageRequest): UpdatePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePackage', 'PUT', '/api/v1/projects/{projectName}/packages/{packageName}', 'json', false, 'json', request);
}

model UpdateProjectIpWhiteListRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.', example='odps_project', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='json {"ipWhiteList":{"ipList": "", // The IP address whitelists are of the STRING data type. Separate multiple IP address whitelists with commas (,). "vpcIpList": "", //} }', position='Body'),
}

model UpdateProjectIpWhiteListResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc12e4316675560945192024e1044'),
}

model UpdateProjectIpWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProjectIpWhiteListResponseBody(name='body'),
}

async function updateProjectIpWhiteList(request: UpdateProjectIpWhiteListRequest): UpdateProjectIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProjectIpWhiteList', 'PUT', '/api/v1/projects/{projectName}/ipWhiteList', 'json', false, 'json', request);
}

model UpdateQuotaRequest {
  nickname: string(name='nickname', example='quota_a', position='Path'),
  akProven?: string(name='AkProven', example='null', position='Header'),
  body?: string(name='body', position='Body'),
  region?: string(name='region', example='cn-shanghai', position='Query'),
  tenantId?: string(name='tenantId', example='196871833188896', position='Query'),
}

model UpdateQuotaResponseBody = {
  data?: string(name='data', example='success'),
  requestId?: string(name='requestId', example='0bc12e6a16679892465424670db3eb'),
}

model UpdateQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQuotaResponseBody(name='body'),
}

async function updateQuota(request: UpdateQuotaRequest): UpdateQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateQuota', 'PUT', '/api/v1/quotas/{nickname}', 'json', false, 'json', request);
}

model UpdateQuotaPlanRequest {
  nickname: string(name='nickname', description='The name of the quota.', example='quotaA', position='Path'),
  planName: string(name='planName', description='The name of the quota plan.', example='planA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{ "name": "planA", // The quota is a level-1 quota. You can select only the fields that are related to the quota plan. "quota": { "name": "a", "nickName": "aaa_nick", "tenantId": "10001", "regionId": "cn-hangzhou", "parentId": "0", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false }, "subQuotaInfoList": \\[ { "nickName": "WlmFuxiSecondaryOnlineQuotaTest", "name": "WlmFuxiSecondaryOnlineQuotaTest", "type": "FUXI_ONLINE", "tenantId": "10001", "regionId": "cn-hangzhou", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false } } ] } }', position='Body'),
  region?: string(name='region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model UpdateQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe516688379832875789e2c65'),
}

model UpdateQuotaPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQuotaPlanResponseBody(name='body'),
}

async function updateQuotaPlan(request: UpdateQuotaPlanRequest): UpdateQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateQuotaPlan', 'PUT', '/api/v1/quotas/{nickname}/plans/{planName}', 'json', false, 'json', request);
}

model UpdateQuotaScheduleRequest {
  nickname: string(name='nickname', description='The name of the quota.', example='quotaA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='\\# The quota plan immediately takes effect. \\[ { "type": "once", "plan": "planA", "operator":"userA" } ] # The quota plan is scheduled on a regular basis. \\[ { "id": "etl_time", "type": "daily", "condition": { "at": "0800", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planA" }, { "id": "bi", "type": "daily", "condition": { "at": "0900", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planB" }, ]', position='Body'),
  region?: string(name='region', description='The ID of the region.', example='cn-chengdu', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model UpdateQuotaScheduleResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe516691014920015940e1c9d'),
}

model UpdateQuotaScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQuotaScheduleResponseBody(name='body'),
}

async function updateQuotaSchedule(request: UpdateQuotaScheduleRequest): UpdateQuotaScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateQuotaSchedule', 'PUT', '/api/v1/quotas/{nickname}/schedule', 'json', false, 'json', request);
}

