/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'MaxCompute';
  @version = '2022-01-04';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'maxcompute.aliyuncs.com',
    'ap-northeast-2-pop' = 'maxcompute.aliyuncs.com',
    'ap-south-1' = 'maxcompute.aliyuncs.com',
    'ap-southeast-1' = 'maxcompute.aliyuncs.com',
    'ap-southeast-2' = 'maxcompute.aliyuncs.com',
    'ap-southeast-3' = 'maxcompute.aliyuncs.com',
    'ap-southeast-5' = 'maxcompute.aliyuncs.com',
    'cn-beijing' = 'maxcompute.aliyuncs.com',
    'cn-beijing-finance-1' = 'maxcompute.aliyuncs.com',
    'cn-beijing-finance-pop' = 'maxcompute.aliyuncs.com',
    'cn-beijing-gov-1' = 'maxcompute.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'maxcompute.aliyuncs.com',
    'cn-chengdu' = 'maxcompute.aliyuncs.com',
    'cn-edge-1' = 'maxcompute.aliyuncs.com',
    'cn-fujian' = 'maxcompute.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou-finance' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'maxcompute.aliyuncs.com',
    'cn-hangzhou-test-306' = 'maxcompute.aliyuncs.com',
    'cn-hongkong' = 'maxcompute.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'maxcompute.aliyuncs.com',
    'cn-huhehaote' = 'maxcompute.aliyuncs.com',
    'cn-north-2-gov-1' = 'maxcompute.aliyuncs.com',
    'cn-qingdao' = 'maxcompute.aliyuncs.com',
    'cn-qingdao-nebula' = 'maxcompute.aliyuncs.com',
    'cn-shanghai' = 'maxcompute.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'maxcompute.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'maxcompute.aliyuncs.com',
    'cn-shanghai-finance-1' = 'maxcompute.aliyuncs.com',
    'cn-shanghai-inner' = 'maxcompute.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'maxcompute.aliyuncs.com',
    'cn-shenzhen' = 'maxcompute.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'maxcompute.aliyuncs.com',
    'cn-shenzhen-inner' = 'maxcompute.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'maxcompute.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'maxcompute.aliyuncs.com',
    'cn-wuhan' = 'maxcompute.aliyuncs.com',
    'cn-yushanfang' = 'maxcompute.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'maxcompute.aliyuncs.com',
    'cn-zhangjiakou' = 'maxcompute.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'maxcompute.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'maxcompute.aliyuncs.com',
    'eu-central-1' = 'maxcompute.aliyuncs.com',
    'eu-west-1' = 'maxcompute.aliyuncs.com',
    'eu-west-1-oxs' = 'maxcompute.aliyuncs.com',
    'me-east-1' = 'maxcompute.aliyuncs.com',
    'rus-west-1-pop' = 'maxcompute.aliyuncs.com',
    'us-east-1' = 'maxcompute.aliyuncs.com',
    'us-west-1' = 'maxcompute.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ApplyComputeQuotaPlanRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  planName: string(name='planName', description='The name of quota plan.

This parameter is required.', example='planA', position='Path'),
}

model ApplyComputeQuotaPlanResponseBody = {
  data?: string(name='data', description='The data returned.', example='success'),
  errorCode?: string(name='errorCode', description='The error code.', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='this quota plan is not exist.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7a316654730544735643e9200'),
}

model ApplyComputeQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyComputeQuotaPlanResponseBody(name='body'),
}

/**
  * @description Please ensure that before using this interface, you have fully understood the <props="china">[Pricing and Charges](https://help.aliyun.com/zh/maxcompute/product-overview/computing-pricing-1)
  * <props="intl">[Pricing and Charges](https://www.alibabacloud.com/help/maxcompute/product-overview/computing-pricing-1) of MaxCompute Elastic Reserved CU.
  * @param request  the request parameters of ApplyComputeQuotaPlan  ApplyComputeQuotaPlanRequest
  * @return ApplyComputeQuotaPlanResponse
 */
async function applyComputeQuotaPlan(request: ApplyComputeQuotaPlanRequest): ApplyComputeQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyComputeQuotaPlan', 'PUT', '/api/v1/quotas/{nickname}/computeQuotaPlan/{planName}/apply', 'json', false, 'json', request);
}

model CreateComputeQuotaPlanRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  name: string(name='name', description='The name of quota plan.

This parameter is required.', example='planA', position='Body'),
  quota?: {
    parameter?: {
      elasticReservedCU: long(name='elasticReservedCU', description='The value of elastic Reserved CUs in the level-1 quota.
> The default value is 0. The maximum value of this parameter must be equal to the number of subscription-based reserved CUs and cannot exceed 10,000 CUs.

This parameter is required.', example='50'),
    }(name='parameter', description='The parameters of level-1 quota.'),
    subQuotaInfoList?: [ 
      {
        nickName: string(name='nickName', description='The nickname of the level-2 quota.

This parameter is required.', example='os_ComputeQuota'),
        parameter?: {
          elasticReservedCU: long(name='elasticReservedCU', description='The value of elastic Reserved CUs.
> The total number of elastically reserved CUs in all the level-2 quotas is equal to the number of elastically reserved CUs in the level-1 quota.

This parameter is required.', example='50'),
          maxCU: long(name='maxCU', description='The value of maxCU in Reserved CUs.
> The value of maxCU must be less than or equal to the value of maxCU in the level-1 quota that you purchased.

This parameter is required.', example='50'),
          minCU: long(name='minCU', description='The value of minCU in Reserved CUs.
> 
>- The total value of minCU in all the level-2 quotas is equal to the value of minCU in the level-1 quota.
>- The value of minCU must be less than or equal to the value of maxCU in the level-2 quota and less than or equal to the value of minCU in the level-1 quota that you purchased.

This parameter is required.', example='50'),
        }(name='parameter', description='The parameters of the level-2 quota.'),
      }
    ](name='subQuotaInfoList', description='The list of level-2 quotas.'),
  }(name='quota', description='The parameters of quota plan.', position='Body'),
}

model CreateComputeQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  errorCode?: string(name='errorCode', description='The error code.', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='this quota is not exist.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7e716665825896565060e87a4'),
}

model CreateComputeQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateComputeQuotaPlanResponseBody(name='body'),
}

/**
  * @description Please ensure that before using this interface, you have fully understood the <props="china">[Pricing and Charges](https://help.aliyun.com/zh/maxcompute/product-overview/computing-pricing-1)
  * <props="intl">[Pricing and Charges](https://www.alibabacloud.com/help/maxcompute/product-overview/computing-pricing-1) of MaxCompute Elastic Reserved CU.
  * @param request  the request parameters of CreateComputeQuotaPlan  CreateComputeQuotaPlanRequest
  * @return CreateComputeQuotaPlanResponse
 */
async function createComputeQuotaPlan(request: CreateComputeQuotaPlanRequest): CreateComputeQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateComputeQuotaPlan', 'POST', '/api/v1/quotas/{nickname}/computeQuotaPlan', 'json', false, 'json', request);
}

model CreateMmsDataSourceRequest {
  config?: map[string]any(name='config', position='Body'),
  name?: string(name='name', example='demo', position='Body'),
  networklink?: string(name='networklink', example='vpc-uf6pc2vordian33gobzfr:cn-shanghai', position='Body'),
  type?: string(name='type', example='BIGQUERY', position='Body'),
}

model CreateMmsDataSourceResponseBody = {
  data?: {
    dataSourceId?: long(name='dataSourceId', example='18'),
  }(name='data'),
  requestId?: string(name='requestId', example='B42CA730-8187-50F1-9FE0-6733297036DB'),
}

model CreateMmsDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMmsDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMmsDataSource  CreateMmsDataSourceRequest
  * @return CreateMmsDataSourceResponse
 */
async function createMmsDataSource(request: CreateMmsDataSourceRequest): CreateMmsDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMmsDataSource', 'POST', '/api/v1/mms/datasources', 'json', false, 'json', request);
}

model CreateMmsFetchMetadataJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000021', position='Path'),
}

model CreateMmsFetchMetadataJobResponseBody = {
  data?: {
    scanId?: long(name='scanId', example='1000002'),
  }(name='data'),
  requestId?: string(name='requestId', example='CC4D05E8-0613-5A8E-9339-A0EBD097A69E'),
}

model CreateMmsFetchMetadataJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMmsFetchMetadataJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMmsFetchMetadataJob  CreateMmsFetchMetadataJobRequest
  * @return CreateMmsFetchMetadataJobResponse
 */
async function createMmsFetchMetadataJob(request: CreateMmsFetchMetadataJobRequest): CreateMmsFetchMetadataJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMmsFetchMetadataJob', 'POST', '/api/v1/mms/datasources/{sourceId}/scans', 'json', false, 'json', request);
}

model CreateMmsJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', position='Path,Body'),
  columnMapping?: map[string]string(name='columnMapping', position='Body'),
  dstDbName?: string(name='dstDbName', position='Body'),
  dstSchemaName?: string(name='dstSchemaName', position='Body'),
  enableVerification?: boolean(name='enableVerification', position='Body'),
  increment?: boolean(name='increment', position='Body'),
  name?: string(name='name', position='Body'),
  others?: map[string]any(name='others', position='Body'),
  partitionFilters?: map[string]string(name='partitionFilters', position='Body'),
  partitions?: [ long ](name='partitions', position='Body'),
  schemaOnly?: boolean(name='schemaOnly', position='Body'),
  sourceName?: string(name='sourceName', position='Body'),
  srcDbName?: string(name='srcDbName', position='Body'),
  srcSchemaName?: string(name='srcSchemaName', position='Body'),
  tableBlackList?: [ string ](name='tableBlackList', position='Body'),
  tableMapping?: map[string]string(name='tableMapping', position='Body'),
  tableWhiteList?: [ string ](name='tableWhiteList', position='Body'),
  tables?: [ string ](name='tables', position='Body'),
  taskType?: string(name='taskType', description='MOCK, HIVE: hive udtf task, HIVE_DATAX: hive datax task, COPY_TASK: odps Copy Task, ODPS_INSERT_OVERWRITE: odps simple insert overwrite task, MC2MC_VERIFY, OSS, HIVE_OSS', position='Body'),
}

model CreateMmsJobResponseBody = {
  data?: {
    asyncTaskId?: long(name='asyncTaskId'),
  }(name='data'),
  requestId?: string(name='requestId'),
}

model CreateMmsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMmsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMmsJob  CreateMmsJobRequest
  * @return CreateMmsJobResponse
 */
async function createMmsJob(request: CreateMmsJobRequest): CreateMmsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMmsJob', 'POST', '/api/v1/mms/datasources/{sourceId}/jobs', 'json', false, 'json', request);
}

model CreatePackageRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{
"name": "test_packege", 
    "resourceList": { 
        "table": [
            {
                "name": "table_name",
                "actions": [
                    "Describe",
                    "Select"
                ]
            },
            {
                "name": "table_name",
                "actions": [
                    "Describe",
                    "Select"
                ]
            }
        ],
        "resource": [
            {
                "name": "",
                "actions": []
            },
            {
                "name": "",
                "actions": []
            }
        ],
        "function": [
            {
                "name": "",
                "actions": []
            },
            {
                "name": "",
                "actions": []
            }
        ]
    }
}', position='Body'),
  isInstall?: boolean(name='isInstall', description='Specifies whether to install the package.', example='false', position='Query'),
}

model CreatePackageResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ab16684833172127321e2c25'),
}

model CreatePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePackage  CreatePackageRequest
  * @return CreatePackageResponse
 */
async function createPackage(request: CreatePackageRequest): CreatePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePackage', 'POST', '/api/v1/projects/{projectName}/packages', 'json', false, 'json', request);
}

model CreateProjectRequest {
  body?: string(name='body', description='The request body parameters.', position='Body'),
}

model CreateProjectResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7a316654730544735643e9200'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProject  CreateProjectRequest
  * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/api/v1/projects', 'json', false, 'json', request);
}

model CreateQuotaPlanRequest {
  nickname: string(name='nickname', description='QuotaNickName

This parameter is required.', example='planA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{ "name": "planA", // The quota is a level-1 quota. You can select only the fields that are related to the quota plan. "quota": { "name": "a", "nickName": "aaa_nick", "tenantId": "10001", "regionId": "cn-hangzhou", "parentId": "0", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false }, "subQuotaInfoList": [ { "nickName": "WlmFuxiSecondaryOnlineQuotaTest", "name": "WlmFuxiSecondaryOnlineQuotaTest", "type": "FUXI_ONLINE", "tenantId": "10001", "regionId": "cn-hangzhou", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false } } ] } }', position='Body'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='228451885265153', position='Query'),
}

model CreateQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4b016674434996033675e71ee'),
}

model CreateQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQuotaPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateQuotaPlan  CreateQuotaPlanRequest
  * @return CreateQuotaPlanResponse
 */
async function createQuotaPlan(request: CreateQuotaPlanRequest): CreateQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateQuotaPlan', 'POST', '/api/v1/quotas/{nickname}/plans', 'json', false, 'json', request);
}

model CreateRoleRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  body?: string(name='body', description='The request body parameters. For valid values, see [MaxCompute permissions](https://help.aliyun.com/document_detail/27935.html).', example='{"name": "role_name","type": "resource/adminn","policy": "", // The document of the policy. This parameter is not required if an access-control list (ACL) is used. "acl": { // This parameter is not required if a policy is used. "table": [{"name": "", "actions":["","",]}, {"name": "", "actions":[]}],"resource":[{"name": "", "actions":["","",]}, {"name": "", "actions":[]}],"function":[{"name": "", "actions":["","",]}, {"name": "", "actions":[]}],"package":[{"name": "", "actions":["","",]}, {"name": "", "actions":[]}],"project":[{"name": "", "actions":[]}], // Only the current project is displayed in the console. "instance":[{"name": "", "actions":[]}] // The parameter name must be set to an asterisk (\\*) in the console. }}// An asterisk (\\*) can be specified for name.', position='Body'),
}

model CreateRoleResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b87b7e716665825896565060e87a4'),
}

model CreateRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRole  CreateRoleRequest
  * @return CreateRoleResponse
 */
async function createRole(request: CreateRoleRequest): CreateRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRole', 'POST', '/api/v1/projects/{projectName}/roles', 'json', false, 'json', request);
}

model DeleteComputeQuotaPlanRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  planName: string(name='planName', description='The name of quota plan.

This parameter is required.', example='planA', position='Path'),
}

model DeleteComputeQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  errorCode?: string(name='errorCode', description='The error code.', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='this quota plan is not exist.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7a316654730544735643e9200'),
}

model DeleteComputeQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteComputeQuotaPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteComputeQuotaPlan  DeleteComputeQuotaPlanRequest
  * @return DeleteComputeQuotaPlanResponse
 */
async function deleteComputeQuotaPlan(request: DeleteComputeQuotaPlanRequest): DeleteComputeQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteComputeQuotaPlan', 'DELETE', '/api/v1/quotas/{nickname}/computeQuotaPlan/{planName}', 'json', false, 'json', request);
}

model DeleteMmsDataSourceRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
}

model DeleteMmsDataSourceResponseBody = {
  data?: long(name='data', example='2000015'),
  requestId?: string(name='requestId', example='EA1320AB-7766-5EC7-B0F6-8B20E2298567'),
}

model DeleteMmsDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMmsDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMmsDataSource  DeleteMmsDataSourceRequest
  * @return DeleteMmsDataSourceResponse
 */
async function deleteMmsDataSource(request: DeleteMmsDataSourceRequest): DeleteMmsDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMmsDataSource', 'DELETE', '/api/v1/mms/datasources/{sourceId}', 'json', false, 'json', request);
}

model DeleteMmsJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  jobId: long(name='jobId', description='This parameter is required.', example='88', position='Path'),
}

model DeleteMmsJobResponseBody = {
  data?: long(name='data', example='88'),
  requestId?: string(name='requestId', example='31BE216F-AEF7-581E-B9C9-DECEB5424AC4'),
}

model DeleteMmsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMmsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMmsJob  DeleteMmsJobRequest
  * @return DeleteMmsJobResponse
 */
async function deleteMmsJob(request: DeleteMmsJobRequest): DeleteMmsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMmsJob', 'POST', '/api/v1/mms/datasources/{sourceId}/jobs/{jobId}', 'json', false, 'json', request);
}

model DeleteQuotaPlanRequest {
  nickname: string(name='nickname', description='QuotaNickName

This parameter is required.', example='quota_A', position='Path'),
  planName: string(name='planName', description='The name of the quota plan.

This parameter is required.', example='planA', position='Path'),
  region?: string(name='region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='416441016836866', position='Query'),
}

model DeleteQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b57ff7616612271051086500ea3ce'),
}

model DeleteQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQuotaPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteQuotaPlan  DeleteQuotaPlanRequest
  * @return DeleteQuotaPlanResponse
 */
async function deleteQuotaPlan(request: DeleteQuotaPlanRequest): DeleteQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteQuotaPlan', 'DELETE', '/api/v1/quotas/{nickname}/plans/{planName}', 'json', false, 'json', request);
}

model GetComputeEffectivePlanRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
}

model GetComputeEffectivePlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='The time when the quota plan was created.', example='1714356241163'),
    isEffective?: boolean(name='isEffective', description='Whether it is currently effective.
> A Quota plan that has taken effect cannot be deleted, i.e., isEffective=true', example='ture/false'),
    name?: string(name='name', description='The name of the quota plan.', example='planA'),
    quota?: {
      cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the level-1 quota was created.', example='1719886322347'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The ID of the level-1 quota.', example='2413'),
      name?: string(name='name', description='The name of the level-1 quota.', example='dp_cn_shanghai_1699533470_p'),
      nickName?: string(name='nickName', description='The nickname of the level-1 quota.', example='os_MyQuota_p'),
      parameter?: map[string]any(name='parameter', description='The description of the level-2 quota.', example='{
  "enablePriority": false,
  "minCU": 25,
  "adhocCU": 0,
  "elasticReservedCU": 0,
  "forceReservedMin": false,
  "maxCU": 50,
  "schedulerType": "Fifo"
}'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
      status?: string(name='status', description='The status of the resource.', example='ON'),
      subQuotaInfoList?: [ 
        {
          cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the resource was created.', example='1718155201628'),
          creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
          id?: string(name='id', description='The ID of the level-2 quota.', example='10940'),
          name?: string(name='name', description='The name of the level-2 quota.', example='dp_cn_shanghai_1696659792_p'),
          nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='os_MyQuota'),
          parameter?: map[string]any(name='parameter', description='The description of the level-2 quota.', example='{
  "enablePriority": false,
  "minCU": 25,
  "adhocCU": 0,
  "elasticReservedCU": 0,
  "forceReservedMin": false,
  "maxCU": 50,
  "schedulerType": "Fifo"
}'),
          regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
          status?: string(name='status', description='Resource status.', example='ON'),
          tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
          type?: string(name='type', description='The type of quota.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1386'),
        }
      ](name='subQuotaInfoList', description='The list of subquotas.'),
      tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
      type?: string(name='type', description='The type of quota.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version number.', example='1964'),
    }(name='quota', description='The details of the quota.'),
  }(name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='The error code.', example='success'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='plan \\"***\\" does not exist'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='688003E1-D1B4-5468-957E-2FFB3AC8D79B'),
}

model GetComputeEffectivePlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetComputeEffectivePlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetComputeEffectivePlan  GetComputeEffectivePlanRequest
  * @return GetComputeEffectivePlanResponse
 */
async function getComputeEffectivePlan(request: GetComputeEffectivePlanRequest): GetComputeEffectivePlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetComputeEffectivePlan', 'GET', '/api/v1/quotas/{nickname}/computeEffectivePlan/', 'json', false, 'json', request);
}

model GetComputeQuotaPlanRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  planName: string(name='planName', description='The name of quota plan.

This parameter is required.', example='planA', position='Path'),
}

model GetComputeQuotaPlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='The time when the quota plan was created.', example='1730946421757'),
    isEffective?: boolean(name='isEffective', description='Whether it is currently effective.
> 
> - A Quota plan that has taken effect cannot be deleted, i.e., isEffective=true', example='ture/false'),
    name?: string(name='name', description='The name of the quota plan.', example='planA'),
    quota?: {
      cluster?: string(name='cluster', description='Cluster ID.', example='AT-120N'),
      createTime?: long(name='createTime', description='Creation time.', example='1719886322347'),
      creatorId?: string(name='creatorId', description='Creator\\"s cloud account UID.', example='672863518'),
      id?: string(name='id', description='The ID of the level-1 quota.', example='2413'),
      name?: string(name='name', description='The name of the level-1 quota.', example='quota_a'),
      nickName?: string(name='nickName', description='The nickname of the level-1 quota.', example='quota_nickname'),
      parameter?: {
        elasticReservedCU?: long(name='elasticReservedCU', description='The value of elastic Reserved CUs.', example='50'),
        maxCU?: long(name='maxCU', description='The value of maxCU in Reserved CUs.', example='50'),
        minCU?: long(name='minCU', description='The value of minCU in Reserved CUs.', example='50'),
      }(name='parameter', description='CU value parameters for the level-1 quota.'),
      regionId?: string(name='regionId', description='Region ID.', example='cn-beijing'),
      status?: string(name='status', description='Resource status.', example='ON'),
      subQuotaInfoList?: [ 
        {
          cluster?: string(name='cluster', description='Cluster ID.', example='AT-120N'),
          createTime?: long(name='createTime', description='Creation time.', example='1718155201628'),
          creatorId?: string(name='creatorId', description='Creator cloud account UID.', example='672863518'),
          id?: string(name='id', description='The ID of the level-2 quota.', example='10940'),
          name?: string(name='name', description='The name of the level-2 quota.', example='dp_cn_shanghai_1696659792_p'),
          nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
          parameter?: {
            elasticReservedCU?: long(name='elasticReservedCU', description='The value of elastic Reserved CUs.', example='50'),
            enablePriority?: boolean(name='enablePriority', description='whether to enable the priority feature.', example='true/false'),
            forceReservedMin?: boolean(name='forceReservedMin', description='Whether it is exclusive.', example='true/false'),
            maxCU?: long(name='maxCU', description='The value of maxCU in Reserved CUs.', example='50'),
            minCU?: long(name='minCU', description='The value of minCU in Reserved CUs.', example='50'),
            schedulerType?: string(name='schedulerType', description='Scheduling policy.', example='Fifo/Fair'),
            singleJobCULimit?: long(name='singleJobCULimit', description='The upper limit for CUs that can be concurrently used by a job scheduled to the quota.', example='50'),
          }(name='parameter', description='The parameters of the level-2 quota.'),
          regionId?: string(name='regionId', description='Region ID。', example='cn-beijing'),
          status?: string(name='status', description='Resource status.', example='ON'),
          tenantId?: string(name='tenantId', description='Tenant ID.', example='478403690625249'),
          type?: string(name='type', description='The type of quota.', example='FUXI_ONLINE'),
          version?: string(name='version', description='Version number.', example='1386'),
        }
      ](name='subQuotaInfoList', description='The list of level-2 quotas.'),
      tenantId?: string(name='tenantId', description='Tenant ID.', example='478403690625249'),
      type?: string(name='type', description='Corresponds to the `resourceSystemType` field of the control cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='Version number.', example='1964'),
    }(name='quota', description='The details of the quota.'),
  }(name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='The error code.', example='QUOTA_PLAN_NOT_FOUND'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='plan \\"***\\" does not exist'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='EA1320AB-7766-5EC7-B0F6-8B20E2298567'),
}

model GetComputeQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetComputeQuotaPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetComputeQuotaPlan  GetComputeQuotaPlanRequest
  * @return GetComputeQuotaPlanResponse
 */
async function getComputeQuotaPlan(request: GetComputeQuotaPlanRequest): GetComputeQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetComputeQuotaPlan', 'GET', '/api/v1/quotas/{nickname}/computeQuotaPlan/{planName}', 'json', false, 'json', request);
}

model GetComputeQuotaScheduleRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  displayTimezone?: string(name='displayTimezone', description='Display time zone.', example='UTC+8', position='Query'),
}

model GetComputeQuotaScheduleResponseBody = {
  data?: [ 
    {
      condition?: {
        at?: string(name='at', description='The start time when the quota plan takes effect.', example='09:00'),
      }(name='condition', description='The value of effective condition.'),
      id?: string(name='id', description='The ID of the quota plan.', example='89b54db44d384f26964951ea457f64a5'),
      plan?: string(name='plan', description='The name of the quota plan.', example='planA'),
      timezone?: string(name='timezone', description='The time zone property.', example='UTC+8'),
      type?: string(name='type', description='The type of the quota plan.', example='daily'),
    }
  ](name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='The error code.', example='QUOTA_UNKNOWN_NICKNAME'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='Cannot found quota **'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='B42CA730-8187-50F1-9FE0-6733297036DB'),
}

model GetComputeQuotaScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetComputeQuotaScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetComputeQuotaSchedule  GetComputeQuotaScheduleRequest
  * @return GetComputeQuotaScheduleResponse
 */
async function getComputeQuotaSchedule(request: GetComputeQuotaScheduleRequest): GetComputeQuotaScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetComputeQuotaSchedule', 'GET', '/api/v1/quotas/{nickname}/computeQuotaSchedule', 'json', false, 'json', request);
}

model GetJobResourceUsageRequest {
  date: string(name='date', description='The date that is accurate to the day part for the query. The date must be in the yyyy-MM-dd format.

This parameter is required.', example='2023-05-15', position='Query'),
  jobOwnerList?: [ string ](name='jobOwnerList', description='The list of job executors.', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: long(name='pageSize', description='The number of entries per page. Default value: 10. Maximum value: 100.', example='10', position='Query'),
  quotaNicknameList?: [ string ](name='quotaNicknameList', description='The list of nicknames of quotas that are used by jobs.', shrink='simple', position='Query'),
}

model GetJobResourceUsageResponseBody = {
  data?: {
    jobResourceUsageList?: [ 
      {
        cuUsage?: long(name='cuUsage', description='The total number of used compute units (CUs).', example='1185100'),
        date?: string(name='date', description='The start date of the query in the format of yyyy-MM-dd.', example='2023-05-09'),
        jobOwner?: string(name='jobOwner', description='The job executor.', example='ALIYUN$xxx@test.aliyunid.com'),
        memoryUsage?: long(name='memoryUsage', description='The total memory usage.', example='15169536'),
        quotaNickname?: string(name='quotaNickname', description='The quota nickname.', example='my_quota'),
      }
    ](name='jobResourceUsageList', description='The data list returned.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='2'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='64'),
  }(name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='The error code returned if the request failed.', example='success'),
  errorMsg?: string(name='errorMsg', description='The error message returned if the request failed.', example='0A3B1E82006A23A918C70905BF08AEC7'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0b57ff7616612271051086500ea3ce'),
}

model GetJobResourceUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResourceUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJobResourceUsage  GetJobResourceUsageRequest
  * @return GetJobResourceUsageResponse
 */
async function getJobResourceUsage(request: GetJobResourceUsageRequest): GetJobResourceUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJobResourceUsage', 'GET', '/api/v1/jobs/resourceUsage', 'json', false, 'json', request);
}

model GetMmsAsyncTaskRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000028', position='Path'),
  asyncTaskId: long(name='asyncTaskId', description='This parameter is required.', example='1000286', position='Path'),
}

model GetMmsAsyncTaskResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2024-12-17 15:44:00'),
    endTime?: string(name='endTime', example='2024-12-17 17:44:17'),
    errorMsg?: string(name='errorMsg', example='null'),
    id?: long(name='id', example='2523'),
    objectId?: long(name='objectId', example='232'),
    progress?: int32(name='progress', example='0'),
    result?: string(name='result', example='null'),
    running?: boolean(name='running', example='false'),
    sourceId?: long(name='sourceId', example='2000017'),
    startTime?: string(name='startTime', example='2024-12-17 15:44:17'),
    status?: string(name='status', example='DONE'),
    type?: string(name='type', example='TASK_CREATE'),
  }(name='data'),
  requestId?: string(name='requestId', example='688003E1-D1B4-5468-957E-2FFB3AC8D79B'),
}

model GetMmsAsyncTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsAsyncTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsAsyncTask  GetMmsAsyncTaskRequest
  * @return GetMmsAsyncTaskResponse
 */
async function getMmsAsyncTask(request: GetMmsAsyncTaskRequest): GetMmsAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsAsyncTask', 'GET', '/api/v1/mms/datasources/{sourceId}/asyncTasks/{asyncTaskId}', 'json', false, 'json', request);
}

model GetMmsDataSourceRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  lang?: string(name='lang', example='en_US', position='Query'),
  withConfig?: boolean(name='withConfig', example='true', position='Query'),
}

model GetMmsDataSourceResponseBody = {
  data?: {
    agentIsOnline?: boolean(name='agentIsOnline', example='true'),
    config?: [ 
      {
        desc?: string(name='desc'),
        enums?: [ string ](name='enums'),
        group?: string(name='group', example='basic_group'),
        key?: string(name='key', example='bigquery.range.partition.migrate.type'),
        name?: string(name='name'),
        placeHolder?: string(name='placeHolder', example='Cluster or Partition'),
        required?: boolean(name='required', example='true'),
        subType?: string(name='subType', example='.keytab'),
        type?: string(name='type', example='string'),
        value?: any(name='value', example='Partition'),
      }
    ](name='config'),
    createTime?: string(name='createTime', example='2024-12-17 09:29:58'),
    dbNum?: int32(name='dbNum', example='3'),
    errMsg?: string(name='errMsg', example='unexpected exception'),
    id?: long(name='id', example='2000015'),
    lastUpdateTime?: string(name='lastUpdateTime', example='2024-12-17 15:44:17'),
    name?: string(name='name', example='demo'),
    networklink?: string(name='networklink', example='vpc-2zebqp6uojhdla46677tl:cn-shanghai'),
    partitionNum?: int32(name='partitionNum', example='10000000'),
    partitionsDoingNum?: int32(name='partitionsDoingNum', example='23322'),
    partitionsDoneNum?: int32(name='partitionsDoneNum', example='11113'),
    partitionsFailedNum?: int32(name='partitionsFailedNum', example='32'),
    region?: string(name='region', example='cn-shanghai'),
    scanId?: long(name='scanId', example='1000253'),
    status?: string(name='status', example='STARTED'),
    tableNum?: int32(name='tableNum', example='1000'),
    tablesDoingNum?: int32(name='tablesDoingNum', example='19'),
    tablesDoneNum?: int32(name='tablesDoneNum', example='16'),
    tablesFailedNum?: int32(name='tablesFailedNum', example='2'),
    tablesPartDoneNum?: int32(name='tablesPartDoneNum', example='123'),
    type?: string(name='type', example='BIGQUERY'),
  }(name='data'),
  requestId?: string(name='requestId', example='98EC8C47-3D6D-560C-808B-84E494220A32'),
}

model GetMmsDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsDataSource  GetMmsDataSourceRequest
  * @return GetMmsDataSourceResponse
 */
async function getMmsDataSource(request: GetMmsDataSourceRequest): GetMmsDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsDataSource', 'GET', '/api/v1/mms/datasources/{sourceId}', 'json', false, 'json', request);
}

model GetMmsDbRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000017', position='Path'),
  dbId: long(name='dbId', description='This parameter is required.', example='1232', position='Path'),
}

model GetMmsDbResponseBody = {
  data?: {
    description?: string(name='description', example='for mms_test'),
    extra?: string(name='extra', example='{}'),
    id?: long(name='id', example='63'),
    lastDdlTime?: string(name='lastDdlTime', description='last ddl time', example='2024-12-17 15:44:42'),
    location?: string(name='location', example='hdfs://master-1-1.c-6fc187819ed6bae0.cn-shanghai.emr.aliyuncs.com:9000/user/hive/warehouse'),
    name?: string(name='name', example='mms_test'),
    numRows?: long(name='numRows', example='2323'),
    owner?: string(name='owner', example='System user'),
    partitions?: int32(name='partitions', example='2000'),
    partitionsDoing?: int32(name='partitionsDoing', example='200'),
    partitionsDone?: int32(name='partitionsDone', example='1400'),
    partitionsFailed?: int32(name='partitionsFailed', example='400'),
    size?: long(name='size', example='323232332'),
    sourceId?: long(name='sourceId', example='2000017'),
    sourceName?: string(name='sourceName', example='demo'),
    status?: string(name='status', example='DOING'),
    tables?: int32(name='tables', example='200'),
    tablesDoing?: int32(name='tablesDoing', example='20'),
    tablesDone?: int32(name='tablesDone', example='120'),
    tablesFailed?: int32(name='tablesFailed', example='20'),
    tablesPartDone?: int32(name='tablesPartDone', example='20'),
    updated?: boolean(name='updated', example='true'),
  }(name='data'),
  requestId?: string(name='requestId', example='90D64EB6-2962-5B1C-A039-BC41C8176C7F'),
}

model GetMmsDbResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsDbResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsDb  GetMmsDbRequest
  * @return GetMmsDbResponse
 */
async function getMmsDb(request: GetMmsDbRequest): GetMmsDbResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsDb', 'GET', '/api/v1/mms/datasources/{sourceId}/dbs/{dbId}', 'json', false, 'json', request);
}

model GetMmsFetchMetadataJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  scanId: long(name='scanId', description='This parameter is required.', example='1000002', position='Path'),
}

model GetMmsFetchMetadataJobResponseBody = {
  data?: {
    endTime?: string(name='endTime', example='2024-12-16 19:10:07'),
    errorMsg?: string(name='errorMsg', example='unexpected exception'),
    id?: long(name='id', example='1000002'),
    progress?: float(name='progress', example='5000'),
    result?: string(name='result', example='{"databases":5,"tables":75,"partitions":215}'),
    sourceId?: long(name='sourceId', example='2000015'),
    startTime?: string(name='startTime', example='2024-12-16 19:09:37'),
    status?: string(name='status', example='SCAN_DOING'),
  }(name='data'),
  requestId?: string(name='requestId', example='5CA6292A-E301-5CD8-B4E2-AF060F99147B'),
}

model GetMmsFetchMetadataJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsFetchMetadataJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsFetchMetadataJob  GetMmsFetchMetadataJobRequest
  * @return GetMmsFetchMetadataJobResponse
 */
async function getMmsFetchMetadataJob(request: GetMmsFetchMetadataJobRequest): GetMmsFetchMetadataJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsFetchMetadataJob', 'GET', '/api/v1/mms/datasources/{sourceId}/scans/{scanId}', 'json', false, 'json', request);
}

model GetMmsJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  jobId: long(name='jobId', description='This parameter is required.', example='10', position='Path'),
}

model GetMmsJobResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2024-12-17 15:44:17'),
    dbId?: long(name='dbId', example='23'),
    dstDbName?: string(name='dstDbName', example='mms_target'),
    dstSchemaName?: string(name='dstSchemaName', example='default'),
    id?: long(name='id', example='10'),
    name?: string(name='name', example='migrate_db_1'),
    sourceId?: long(name='sourceId', example='2'),
    sourceName?: string(name='sourceName', example='demo'),
    srcDbName?: string(name='srcDbName', example='mms_test'),
    srcSchemaName?: string(name='srcSchemaName', example='default'),
    status?: string(name='status', example='DOING'),
    stopped?: boolean(name='stopped', example='false'),
    taskDone?: int32(name='taskDone', example='100'),
    taskNum?: int32(name='taskNum', example='100'),
    type?: string(name='type', example='Tables'),
  }(name='data'),
  requestId?: string(name='requestId', example='D9F872FD-5DDE-30A6-8C8A-1B8C6A81059F'),
}

model GetMmsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsJob  GetMmsJobRequest
  * @return GetMmsJobResponse
 */
async function getMmsJob(request: GetMmsJobRequest): GetMmsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsJob', 'GET', '/api/v1/mms/datasources/{sourceId}/jobs/{jobId}', 'json', false, 'json', request);
}

model GetMmsPartitionRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='200018', position='Path'),
  partitionId: long(name='partitionId', description='This parameter is required.', example='2323', position='Path'),
}

model GetMmsPartitionResponseBody = {
  data?: {
    dbId?: long(name='DbId', example='2'),
    dbName?: string(name='dbName', example='d1'),
    id?: long(name='id', example='2323'),
    lastDdlTime?: string(name='lastDdlTime', description='lastDdlTime', example='2024-12-17 15:44:42'),
    numRows?: long(name='numRows', example='2323'),
    size?: long(name='size', example='12323'),
    sourceId?: long(name='sourceId', example='200018'),
    sourceName?: string(name='sourceName', example='demo'),
    status?: string(name='status', example='DONE'),
    tableId?: long(name='tableId', example='23'),
    tableName?: string(name='tableName', example='t1'),
    updated?: boolean(name='updated', example='false'),
    value?: string(name='value', example='p1=1/p2=abc'),
  }(name='data'),
  requestId?: string(name='requestId', example='D9F872FD-5DDE-30A6-8C8A-1B8C6A81059F'),
}

model GetMmsPartitionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsPartitionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsPartition  GetMmsPartitionRequest
  * @return GetMmsPartitionResponse
 */
async function getMmsPartition(request: GetMmsPartitionRequest): GetMmsPartitionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsPartition', 'GET', '/api/v1/mms/datasources/{sourceId}/partitions/{partitionId}', 'json', false, 'json', request);
}

model GetMmsTableRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='12323', position='Path'),
  tableId: long(name='tableId', description='This parameter is required.', example='22', position='Path'),
}

model GetMmsTableResponseBody = {
  data?: {
    dbId?: long(name='dbId', example='3'),
    dbName?: string(name='dbName', example='mms_test'),
    extra?: string(name='extra', example='{"mapkey.delim":":","collection.delim":",","serialization.format":"|","field.delim":"|"}'),
    hasPartitions?: boolean(name='hasPartitions', example='true'),
    id?: long(name='id', description='table ID', example='22'),
    inputFormat?: string(name='inputFormat', description='inputFormat', example='org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat'),
    lastDdlTime?: string(name='lastDdlTime', description='lastDdlTime', example='2024-12-17 15:44:42'),
    location?: string(name='location', example='| hdfs://master-1-1.c-c127cd184bb029ea.cn-zhangjiakou.emr.aliyuncs.com:9000/user/hive/warehouse/demo'),
    name?: string(name='name', example='test'),
    numRows?: long(name='numRows', example='233232'),
    outputFormat?: string(name='outputFormat', description='outputFormat', example='org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'),
    owner?: string(name='owner', example='Hive'),
    partitions?: int32(name='partitions', example='100'),
    partitionsDoing?: int32(name='partitionsDoing', example='20'),
    partitionsDone?: int32(name='partitionsDone', example='80'),
    partitionsFailed?: int32(name='partitionsFailed', example='0'),
    schema?: {
      columns?: [ 
        {
          comment?: string(name='comment', example='user id'),
          defaultValue?: string(name='defaultValue', example='10'),
          name?: string(name='name', example='user_id'),
          nullable?: boolean(name='nullable', example='false'),
          type?: string(name='type', example='bigint'),
        }
      ](name='columns'),
      comment?: string(name='comment', example='for mms test'),
      name?: string(name='name', example='test'),
      partitions?: [ 
        {
          comment?: string(name='comment', example='first partition level'),
          defaultValue?: string(name='defaultValue', example='abc'),
          name?: string(name='name', example='p1'),
          nullable?: boolean(name='nullable', example='false'),
          type?: string(name='type', example='string'),
        }
      ](name='partitions'),
    }(name='schema'),
    serde?: string(name='serde', description='serde', example='org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe'),
    size?: long(name='size', example='23232'),
    sourceId?: long(name='sourceId', example='2000028'),
    sourceName?: string(name='sourceName', example='demo'),
    status?: string(name='status', example='DONE'),
    type?: string(name='type', example='MANAGED_TABLED'),
    updated?: boolean(name='updated', example='false'),
  }(name='data'),
  requestId?: string(name='requestId', example='E7FB14F1-4ACD-5C73-A755-B302D70AB9AD'),
}

model GetMmsTableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsTableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsTable  GetMmsTableRequest
  * @return GetMmsTableResponse
 */
async function getMmsTable(request: GetMmsTableRequest): GetMmsTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsTable', 'GET', '/api/v1/mms/datasources/{sourceId}/tables/{tableId}', 'json', false, 'json', request);
}

model GetMmsTaskRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  taskId: long(name='taskId', description='This parameter is required.', example='7680', position='Path'),
}

model GetMmsTaskResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2024-10-25 04:21:01'),
    dbId?: long(name='dbId', example='23'),
    dstDbName?: string(name='dstDbName', example='mms_target'),
    dstSchemaName?: string(name='dstSchemaName', example='default'),
    dstTableName?: string(name='dstTableName', example='table_1'),
    endTime?: string(name='endTime', example='2024-10-25 07:21:01'),
    id?: long(name='id', example='7680'),
    jobId?: long(name='jobId', example='87'),
    jobName?: string(name='jobName', example='test_odps_spark'),
    retriedTimes?: int32(name='retriedTimes', example='1'),
    running?: boolean(name='running', example='true'),
    sourceId?: long(name='sourceId', example='2000015'),
    sourceName?: string(name='sourceName', example='demo'),
    srcDbName?: string(name='srcDbName', example='mms_test'),
    srcSchemaName?: string(name='srcSchemaName', example='default'),
    srcTableName?: string(name='srcTableName', example='table_1'),
    startTime?: string(name='startTime', example='2024-10-25 06:21:01'),
    status?: string(name='status', example='DATA_DOING'),
    stopped?: boolean(name='stopped', example='false'),
    tableId?: long(name='tableId', example='2323'),
    type?: string(name='type', example='BIGQUERY'),
  }(name='data'),
  requestId?: string(name='requestId', example='73207140-0FD5-588A-B11A-3CE093924196'),
}

model GetMmsTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMmsTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMmsTask  GetMmsTaskRequest
  * @return GetMmsTaskResponse
 */
async function getMmsTask(request: GetMmsTaskRequest): GetMmsTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMmsTask', 'GET', '/api/v1/mms/datasources/{sourceId}/tasks/{taskId}', 'json', false, 'json', request);
}

model GetPackageRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  packageName: string(name='packageName', description='The name of the package.

This parameter is required.', example='test_package', position='Path'),
  sourceProject?: string(name='sourceProject', description='The project to which the package belongs. This parameter is required if the package is installed in the MaxCompute project.', example='projectB', position='Query'),
}

model GetPackageResponseBody = {
  data?: {
    allowedProjectList?: [ 
      {
        label?: string(name='label', description='The security level for sensitive data.', example='2'),
        project?: string(name='project', description='The name of the MaxCompute project.', example='proejctB'),
      }
    ](name='allowedProjectList', description='The projects in which the package is installed.'),
    resourceList?: {
      function?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
          name?: string(name='name', description='The name of the function.', example='function_1'),
          schemaName?: string(name='schemaName', description='The name of schema.', example='default'),
        }
      ](name='function', description='The functions.'),
      resource?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
          name?: string(name='name', description='The name of the resource.', example='res_1'),
          schemaName?: string(name='schemaName', description='The name of schema.', example='default'),
        }
      ](name='resource', description='The resources.'),
      table?: [ 
        {
          actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
          name?: string(name='name', description='The name of the table.', example='dim_odps'),
          schemaName?: string(name='schemaName', description='The name of schema.', example='default'),
        }
      ](name='table', description='The tables.'),
    }(name='resourceList', description='The details of the resources that are included in the package.'),
  }(name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='The error code returned if the request failed.', example='040002'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='error message.'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b57ff8316614119858417939e3e54'),
}

model GetPackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPackage  GetPackageRequest
  * @return GetPackageResponse
 */
async function getPackage(request: GetPackageRequest): GetPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPackage', 'GET', '/api/v1/projects/{projectName}/packages/{packageName}', 'json', false, 'json', request);
}

model GetProjectRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='odps_project', position='Path'),
  verbose?: boolean(name='verbose', description='Specifies whether to use additional information.', example='true', position='Query'),
}

model GetProjectResponseBody = {
  data?: {
    comment?: string(name='comment', description='The project description.', example='maxcompute project'),
    costStorage?: string(name='costStorage', description='The total storage usage. The storage space that is occupied by your project, which is the logical storage space after your project data is collected and compressed.', example='16489027'),
    createdTime?: long(name='createdTime', description='The creation time.', example='1704380838000'),
    defaultQuota?: string(name='defaultQuota', description='The default computing quota that is used to allocate computing resources. If you do not specify a computing quota for your project, the jobs that are initiated by your project consume the computing resources in the default quota. For more information about how to use computing resources, see [Use quota groups for computing resources](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/use-of-computing-resources).', example='quota_a'),
    ipWhiteList?: {
      ipList?: string(name='ipList', description='The IP address whitelist for access over the Internet or the network for interconnecting with other Alibaba Cloud services.

>  If you configure only the IP address whitelist for access over the Internet or the network for interconnecting with other Alibaba Cloud services, the access over the Internet or the network for interconnecting with other Alibaba Cloud services is subject to configurations, and access over a virtual private cloud (VPC) is not allowed.', example='10.88.111.3'),
      vpcIpList?: string(name='vpcIpList', description='The IP address whitelist for access over a VPC.

>  If you configure only the IP address whitelist for access over a VPC, the access over a VPC is subject to configurations, and the access over the Internet or the network for interconnecting with other Alibaba Cloud services is not allowed.', example='10.88.111.3'),
    }(name='ipWhiteList', description='The information about the IP address whitelist.'),
    name?: string(name='name', description='The project name.', example='odps_project'),
    owner?: string(name='owner', description='The account information of the project owner.', example='1565950907343451'),
    productType?: string(name='productType', description='The billing method of the default computing quota.', example='PayAsYouGo'),
    properties?: {
      allowFullScan?: boolean(name='allowFullScan', description='Indicates whether a full table scan is allowed in the project. A full table scan occupies a large number of resources, which reduces data processing efficiency. By default, the full table scan feature is disabled.', example='false'),
      elderTunnelQuota?: string(name='elderTunnelQuota', description='The Tunnel parent resource group that is bound to the project. You do not need to pay attention to this group.', example='No value'),
      enableDecimal2?: boolean(name='enableDecimal2', description='Indicates whether the DECIMAL type of the MaxCompute V2.0 data type edition is enabled.', example='true'),
      enableFdcCacheForce?: boolean(name='enableFdcCacheForce', description='Indicates whether external table caching is forcefully enabled.', example='true'),
      enableTieredStorage?: boolean(name='enableTieredStorage', description='Indicates whether [tiered storage](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/tiered-storage) is enabled.', example='true'),
      enableTunnelQuotaRoute?: boolean(name='enableTunnelQuotaRoute', description='Indicates whether the routing of the Tunnel resource group is enabled.

*   true: The data transfer tasks that are submitted by the project by default use the Tunnel resource group that is bound to the project.
*   false: The data transfer tasks that are submitted by the project by default use the Tunnel shared resource group.', example='true'),
      encryption?: {
        algorithm?: string(name='algorithm', description='The data encryption algorithm that is supported by the key. Valid values: AES256, AESCTR, and RC4.', example='SHA1'),
        enable?: boolean(name='enable', description='Indicates whether the data encryption feature needs to be enabled for the project. For more information about data encryption, see

[Storage encryption](https://www.alibabacloud.com/help/zh/maxcompute/security-and-compliance/storage-encryption).', example='true'),
        key?: string(name='key', description='The type of key that is used for data encryption. You can select MaxCompute Default Key or Bring Your Own Key (BYOK) as the key type. If you select MaxCompute Default Key, the default key that is created by MaxCompute is used.', example='dafault'),
      }(name='encryption', description='The storage encryption properties.'),
      externalProjectProperties?: {
        isExternalCatalogBound?: string(name='isExternalCatalogBound', description='Indicates whether the external project is an external project for [data lakehouse solution 2.0](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/lake-warehouse-integrated-2-0-use-guide).', example='true'),
      }(name='externalProjectProperties', description='The properties of the external project.'),
      fdcQuota?: string(name='fdcQuota', description='The quota for external table caching.', example='fdc_quota'),
      retentionDays?: long(name='retentionDays', description='The retention period for backup data. Unit: days. During the retention period, you can restore data of the version in use to the backup data of any version. Valid values: [0,30]. Default value: 1. The value 0 indicates that the backup feature is disabled.', example='1'),
      sqlMeteringMax?: string(name='sqlMeteringMax', description='The maximum consumption threshold of a single SQL statement. Formula: Amount of scanned data (GB) × Complexity.', example='1500'),
      storageTierInfo?: {
        projectBackupSize?: long(name='projectBackupSize', description='The backup storage usage.', example='86672917'),
        projectTotalSize?: long(name='projectTotalSize', description='The total storage usage.', example='56066037'),
        storageTierSize?: {
          longTermSize?: long(name='longTermSize', description='The storage usage at the long-term storage tier.', example='21764917'),
          lowFrequencySize?: long(name='lowFrequencySize', description='The storage usage at the Infrequent Access (IA) layer.', example='767693'),
          standardSize?: long(name='standardSize', description='The storage usage at the standard storage tier.', example='27649172'),
        }(name='storageTierSize', description='The [storage tier](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/tiered-storage) information.'),
      }(name='storageTierInfo', description='The [storage tier](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/tiered-storage) information.'),
      tableLifecycle?: {
        type?: string(name='type', description='The lifecycle type. Valid values:

*   **mandatory**: The lifecycle clause is required in a table creation statement.
*   **optional**: The lifecycle clause is optional in a table creation statement. If you do not configure a lifecycle for a table, the table does not expire.
*   **inherit**: If you do not configure a lifecycle for a table when you create the table, the value of the odps.table.lifecycle.value parameter is used as the table lifecycle by default.', example='optional'),
        value?: string(name='value', description='The table lifecycle. Unit: days. Valid values: 1 to 37231. Default value: 37231.', example='37231'),
      }(name='tableLifecycle', description='The table lifecycle properties.'),
      tableLifecycleConfig?: {
        tierToLongterm?: {
          daysAfterLastAccessGreaterThan?: long(name='DaysAfterLastAccessGreaterThan', description='The system triggers an automatic storage tier change N days after the last access time of data. N is specified by this parameter and corresponds to `LastAccessTime` that is configured for the table or partition.

>  If LastAccessTime of a table or partition is left empty, the following rules are applied:

*   For tables or partitions that you created before October 1, 2023, 2023.10.01 00:00:00 in UTC+0 is considered as the last access time.

*   For tables or partitions that you created on or after October 1, 2023, if no data is accessed, the table or partition creation time is considered as the last access time.', example='180'),
          daysAfterLastModificationGreaterThan?: long(name='DaysAfterLastModificationGreaterThan', description='The system triggers an automatic storage tier change N days after the last modification time of data. N is specified by this parameter and corresponds to `LastModifiedTime` that is configured for the table or partition.', example='180'),
          daysAfterLastTierModificationGreaterThan?: long(name='DaysAfterLastTierModificationGreaterThan', description='The period after the previous storage tier change time.', example='1'),
        }(name='TierToLongterm', description='The information about the long-term storage tier.'),
        tierToLowFrequency?: {
          daysAfterLastAccessGreaterThan?: long(name='DaysAfterLastAccessGreaterThan', description='The system triggers an automatic storage tier change N days after the last access time of data. N is specified by this parameter and corresponds to `LastAccessTime` that is configured for the table or partition.

>  If LastAccessTime of a table or partition is left empty, the following rules are applied:

*   For tables or partitions that you created before October 1, 2023, 2023.10.01 00:00:00 in UTC+0 is considered as the last access time.

*   For tables or partitions that you created on or after October 1, 2023, if no data is accessed, the table or partition creation time is considered as the last access time.', example='30'),
          daysAfterLastModificationGreaterThan?: long(name='DaysAfterLastModificationGreaterThan', description='The system triggers an automatic storage tier change N days after the last modification time of data. N is specified by this parameter and corresponds to `LastModifiedTime` that is configured for the table or partition.', example='30'),
          daysAfterLastTierModificationGreaterThan?: long(name='DaysAfterLastTierModificationGreaterThan', description='The period after the previous storage tier change time.', example='1'),
        }(name='TierToLowFrequency', description='The information about the IA storage tier.'),
      }(name='tableLifecycleConfig', description='The [properties of tiered storage lifecycle rules](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/tiered-storage#f61fc9db76nna). After you configure the properties, the system triggers automatic switching of storage tiers based on the rules.'),
      timezone?: string(name='timezone', description='The time zone that is used by your project. The time zone is the same as the time zone specified by `odps.sql.timezone`.', example='Asia/Shanghai'),
      tunnelQuota?: string(name='tunnelQuota', description='The [Tunnel](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/overview-of-dts) resource group that is bound to the project.

*   Default resource group: The Tunnel shared resource group is used. You cannot use the subscription-based Tunnel resource group for the project. The default resource group is automatically used by the Tunnel service of your project, regardless of the parameter setting.
*   Subscription-based Tunnel resource group: You can use the subscription-based Tunnel resource group for the project.', example='Quota'),
      typeSystem?: string(name='typeSystem', description='The data type edition. Valid values:

*   **1**: MaxCompute V1.0 data type edition
*   **2**: MaxCompute V2.0 data type edition
*   **hive**: Hive-compatible data type edition

For more information about the differences among the three data type editions, see [Data type editions](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/data-type-editions).', example='2.0'),
    }(name='properties', description='The basic properties of the project.'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
    saleTag?: {
      resourceId?: string(name='resourceId', description='The instance ID of the default computing quota.', example='project_name'),
      resourceType?: string(name='resourceType', description='The billing method of the default computing quota.', example='project'),
    }(name='saleTag', description='The instance ID and billing method of the default computing quota.'),
    securityProperties?: {
      enableDownloadPrivilege?: boolean(name='enableDownloadPrivilege', description='Indicates whether the [download control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/label-based-access-control) feature is enabled. By default, this feature is disabled.', example='false'),
      labelSecurity?: boolean(name='labelSecurity', description='Indicates whether the [label-based access control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/label-based-access-control) feature is enabled. By default, this feature is disabled.', example='false'),
      objectCreatorHasAccessPermission?: boolean(name='objectCreatorHasAccessPermission', description='Indicates whether to allow the object creator to have the access permissions on the object. The default value is true, which indicates that the object creator has the access permissions on the object.', example='true'),
      objectCreatorHasGrantPermission?: boolean(name='objectCreatorHasGrantPermission', description='Indicates whether the object creator has the authorization permissions on the object. The default value is true, which indicates that the object creator has the authorization permissions on the object.', example='true'),
      projectProtection?: {
        exceptionPolicy?: string(name='exceptionPolicy', description='If you enable the project data protection mechanism, you can configure exception or trusted projects. This allows specified users to transfer data of a specified object to a specified project. The project data protection mechanism does not take effect in all the situations that are specified in the exception policy.', example='{
    "Version": "1",
    "Statement":
    [{
        "Effect":"Allow",
        "Principal":"<Principal>",
        "Action":["odps:<Action1>[, <Action2>, ...]"],
        "Resource":"acs:odps:*:<Resource>",
        "Condition":{
            "StringEquals": {
                "odps:TaskType":["<Tasktype>"]
            }
        }
    }]
    }'),
        protected?: boolean(name='protected', description='Indicates whether the [data protection mechanism](https://www.alibabacloud.com/help/zh/maxcompute/security-and-compliance/project-data-protection) is enabled for the project. This allows or denies data transfer across projects. By default, the data protection mechanism is disabled.', example='true'),
      }(name='projectProtection', description='The properties of the [data protection mechanism](https://www.alibabacloud.com/help/zh/maxcompute/security-and-compliance/project-data-protection).'),
      usingAcl?: boolean(name='usingAcl', description='Indicates whether the [ACL-based access control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/acl-based-access-control) feature is enabled. By default, this feature is enabled.', example='true'),
      usingPolicy?: boolean(name='usingPolicy', description='Indicates whether the [policy-based access control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/policy-based-access-control-1) feature is enabled. By default, this feature is enabled.', example='true'),
    }(name='securityProperties', description='The permission properties.'),
    status?: string(name='status', description='The project status. Valid values:

*   **AVAILABLE**
*   **READONLY**
*   **FROZEN**
*   **DELETING**', example='AVAILABLE'),
    superAdmins?: [ string ](name='superAdmins', description='The list of `Super_Administrator` role members of the project.'),
    threeTierModel?: boolean(name='threeTierModel', description='Indicates whether data storage by schema is supported. MaxCompute supports the schema feature. This feature allows you to classify objects such as tables, resources, and user-defined functions (UDFs) in a project by schema. You can create multiple schemas in a project. For more information, see [Schema-related operations](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/schema-related-operations).', example='true'),
    type?: string(name='type', description='The project type. Valid values:

*   **managed**: internal project
*   **external**: external project', example='managed'),
  }(name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='The error code.', example='040002'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='error message.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

*   1xx: informational response. The request is received and is being processed.
*   2xx: success. The request is successfully received, understood, and accepted by the server.
*   3xx: redirection. The request is redirected, and further actions are required to complete the request.
*   4xx: client error. The request contains invalid request parameters and syntaxes, or specific request conditions cannot be met.
*   5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7b316643495896551555e855b'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProject  GetProjectRequest
  * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/api/v1/projects/{projectName}', 'json', false, 'json', request);
}

model GetQuotaRequest {
  nickname: string(name='nickname', description='The name of the quota.

This parameter is required.', example='quota_a', position='Path'),
  akProven?: string(name='AkProven', description='The trusted AccessKey pairs.', example='null', position='Query'),
  mock?: boolean(name='mock', description='Specifies whether to include submodules. Valid values: -true: The request includes submodules. -false: The request does not include submodules. This is the default value.', example='false', position='Query'),
  region?: string(name='region', description='The region ID.', example='cn-chengdu', position='Query'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='520539530998273', position='Query'),
}

model GetQuotaResponseBody = {
  billingPolicy?: {
    billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
    odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
    orderId?: string(name='orderId', description='The order ID.', example='45245678'),
  }(name='billingPolicy', description='The information about the order.'),
  cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
  createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
  creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
  data?: {
    billingPolicy?: {
      billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
      odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
      orderId?: string(name='orderId', description='The order ID.', example='45245678'),
    }(name='billingPolicy', description='The information about the order.'),
    cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
    createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
    creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
    id?: string(name='id', description='The quota ID.', example='0'),
    name?: string(name='name', description='The name of the quota.', example='quota_a'),
    nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
    parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
    parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
    regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
    saleTag?: {
      resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
      resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
    }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
    scheduleInfo?: {
      currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
      currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
      nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
      nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
      oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
      onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
      operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
      timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
    }(name='scheduleInfo', description='The information about the scheduling plan.'),
    status?: string(name='status', description='The status of the resource.', example='ON'),
    subQuotaInfoList?: [ 
      {
        billingPolicy?: {
          billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
          odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
          orderId?: string(name='orderId', description='The order ID.', example='45245678'),
        }(name='billingPolicy', description='The information about the order.'),
        cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
        createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
        creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
        id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
        name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
        nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
        parameter?: map[string]any(name='parameter', description='The description of the quota.'),
        parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
        saleTag?: {
          resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
          resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
        }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
        scheduleInfo?: {
          currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
          currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
          nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
          nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
          oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
          onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
          operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
        }(name='scheduleInfo', description='The information about the scheduling plan.'),
        status?: string(name='status', description='The status of the resource.', example='ON'),
        tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
        tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
        type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
        version?: string(name='version', description='The version number.', example='1'),
      }
    ](name='subQuotaInfoList', description='The information about the level-2 quota.'),
    tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
    tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
    type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
    version?: string(name='version', description='The version number.', example='1'),
  }(name='data', description='The returned data.'),
  id?: string(name='id', description='The quota ID.', example='0'),
  name?: string(name='name', description='The name of the quota.', example='quota_a'),
  nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
  parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
  parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
  regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7a316654730544735643e9200'),
  saleTag?: {
    resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
    resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
  }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
  scheduleInfo?: {
    currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
    currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
    nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
    nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
    oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
    onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
    operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
    timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
  }(name='scheduleInfo', description='The information about the scheduling plan.'),
  status?: string(name='status', description='The status of the resource.', example='ON'),
  subQuotaInfoList?: [ 
    {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
        orderId?: string(name='orderId', description='The order ID.', example='45245678'),
      }(name='billingPolicy', description='The information about the order.'),
      cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
      name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
      nickName?: string(name='nickName', description='The alias of the level-2 quota.', example='subquotaA'),
      parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
      parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
      saleTag?: {
        resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
        resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
      }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
        currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
        nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
        nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
        oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
        onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
        operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
        timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
      }(name='scheduleInfo', description='The information about the scheduling plan.'),
      status?: string(name='status', description='The status of the resource.', example='ON'),
      tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
      tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
      type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version number.', example='1'),
    }
  ](name='subQuotaInfoList', description='The information about the level-2 quota.'),
  tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249'),
  type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
  version?: string(name='version', description='The version number.', example='1'),
}

model GetQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQuota  GetQuotaRequest
  * @return GetQuotaResponse
 */
async function getQuota(request: GetQuotaRequest): GetQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuota', 'GET', '/api/v1/quotas/{nickname}', 'json', false, 'json', request);
}

model GetQuotaPlanRequest {
  nickname: string(name='nickname', description='The name of the quota.

This parameter is required.', example='quotaA', position='Path'),
  planName: string(name='planName', description='The name of the quota plan.

This parameter is required.', example='planA', position='Path'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='483212237127906', position='Query'),
}

model GetQuotaPlanResponseBody = {
  data?: {
    createTime?: string(name='createTime', description='The time when the quota plan was created.', example='2022-05-16T06:07:45Z'),
    name?: string(name='name', description='The name of the quota plan.', example='planA'),
    quota?: {
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
        orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
      }(name='billingPolicy', description='The information of the order.'),
      cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The ID of the quota.', example='0'),
      name?: string(name='name', description='The name of the quota.', example='quota_a'),
      nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
      parameter?: map[string]any(name='parameter', description='The description of the quota.'),
      parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
      regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
        currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
        nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
        nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
        oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
        onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
        operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
      }(name='scheduleInfo', description='The information of the scheduling plan.'),
      status?: string(name='status', description='The status of the resource.', example='ON'),
      subQuotaInfoList?: [ 
        {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the user who created the quota plan.', example='672863518'),
          id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
          name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
          nickName?: string(name='nickName', description='The alias of the level-2 quota.', example='subquotaA'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
          regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the resource.', example='ON'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }
      ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
      tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
      tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
      type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version number.', example='1'),
    }(name='quota', description='The details of the quota.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0aa16667684362147582e038f'),
}

model GetQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQuotaPlan  GetQuotaPlanRequest
  * @return GetQuotaPlanResponse
 */
async function getQuotaPlan(request: GetQuotaPlanRequest): GetQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuotaPlan', 'GET', '/api/v1/quotas/{nickname}/plans/{planName}', 'json', false, 'json', request);
}

model GetQuotaScheduleRequest {
  nickname: string(name='nickname', description='The name of the quota.

This parameter is required.', example='quotaA', position='Path'),
  displayTimezone?: string(name='displayTimezone', description='The time zone.', example='UTC+8', position='Query'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model GetQuotaScheduleResponseBody = {
  data?: [ 
    {
      condition?: {
        after?: string(name='after', description='The start time when the quota plan takes effect.', example='2022-04-25T04:23:04Z'),
        at?: string(name='at', description='The time when the quota plan takes effect.', example='0900'),
      }(name='condition', description='The condition value.'),
      id?: string(name='id', description='The ID of the quota plan.', example='63'),
      operator?: string(name='operator', description='The name of the operator.', example='userA'),
      plan?: string(name='plan', description='The name of the quota plan.', example='planA'),
      timezone?: string(name='timezone', description='The time zone.', example='UTC+8'),
      type?: string(name='type', description='The type of the quota plan.', example='once'),
    }
  ](name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='success'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='errorMsg'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc059b716696296266308790e0d3e'),
}

model GetQuotaScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQuotaSchedule  GetQuotaScheduleRequest
  * @return GetQuotaScheduleResponse
 */
async function getQuotaSchedule(request: GetQuotaScheduleRequest): GetQuotaScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuotaSchedule', 'GET', '/api/v1/quotas/{nickname}/schedule', 'json', false, 'json', request);
}

model GetQuotaUsageRequest {
  nickname: string(name='nickname', description='This parameter is required.', example='os_quota_p', position='Path'),
  aggMethod?: string(name='aggMethod', example='max', position='Query'),
  from: long(name='from', description='This parameter is required.', example='1669081045', position='Query'),
  plotTypes?: [ string ](name='plotTypes', shrink='simple', position='Query'),
  productId?: string(name='productId', example='ODPS', position='Query'),
  region?: string(name='region', example='cn-chengdu', position='Query'),
  subQuotaNickname?: string(name='subQuotaNickname', example='ot_tunnel_quota', position='Query'),
  tenantId?: string(name='tenantId', example='478403690625249', position='Query'),
  to: long(name='to', description='This parameter is required.', example='1669360870', position='Query'),
  yAxisTypes?: [ string ](name='yAxisTypes', shrink='simple', position='Query'),
}

model GetQuotaUsageResponseBody = {
  data?: {
    metrics?: map[string]any(name='metrics'),
    plot?: [ 
      {
        title?: string(name='title'),
        type?: string(name='type', example='request'),
        yAxis?: [ string ](name='yAxis'),
      }
    ](name='plot'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', example='This object does not exist.'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0b87b7a416652014358483492eea0b'),
}

model GetQuotaUsageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQuotaUsageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetQuotaUsage  GetQuotaUsageRequest
  * @return GetQuotaUsageResponse
 */
async function getQuotaUsage(request: GetQuotaUsageRequest): GetQuotaUsageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetQuotaUsage', 'GET', '/api/v1/quotas/{nickname}/usage', 'json', false, 'json', request);
}

model GetRoleAclRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.

This parameter is required.', example='roleA', position='Path'),
}

model GetRoleAclResponseBody = {
  data?: {
    function?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
        name?: string(name='name', description='The name of the function.', example='functionA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='function', description='The function.'),
    instance?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the instance.'),
        name?: string(name='name', description='The name of the instance.', example='instanceA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='instance', description='The instance.'),
    package?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the package.'),
        name?: string(name='name', description='The name of the package.', example='packageA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='package', description='The package.'),
    project?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the project.'),
        name?: string(name='name', description='The name of the MaxCompute project.', example='projectA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='project', description='The project.'),
    resource?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
        name?: string(name='name', description='The name of the resource.', example='resourceA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='resource', description='The resource.'),
    table?: [ 
      {
        actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
        name?: string(name='name', description='The name of the table.', example='tableA'),
        schemaName?: string(name='schemaName', description='The Schema name.', example='default'),
      }
    ](name='table', description='The table.'),
  }(name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='The error code returned if the request failed.', example='040002'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='error message'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dc0916696898838762018e9564'),
}

model GetRoleAclResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoleAclResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRoleAcl  GetRoleAclRequest
  * @return GetRoleAclResponse
 */
async function getRoleAcl(request: GetRoleAclRequest): GetRoleAclResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRoleAcl', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/roleAcl', 'json', false, 'json', request);
}

model GetRoleAclOnObjectRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.

This parameter is required.', example='roleA', position='Path'),
  objectName: string(name='objectName', description='The name of the object.

This parameter is required.', example='tableA', position='Query'),
  objectType: string(name='objectType', description='The type of the object.

This parameter is required.', example='table', position='Query'),
}

model GetRoleAclOnObjectResponseBody = {
  data?: {
    actions?: [ string ](name='actions', description='The operations that were performed on the object.'),
  }(name='data', description='The returned data'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1366d16686529650188023ef87f'),
}

model GetRoleAclOnObjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRoleAclOnObjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRoleAclOnObject  GetRoleAclOnObjectRequest
  * @return GetRoleAclOnObjectResponse
 */
async function getRoleAclOnObject(request: GetRoleAclOnObjectRequest): GetRoleAclOnObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRoleAclOnObject', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/acl', 'json', false, 'json', request);
}

model GetRolePolicyRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.

This parameter is required.', example='roleA', position='Path'),
}

model GetRolePolicyResponseBody = {
  data?: string(name='data', description='The returned data.', example='{
      "Statement": [
            {
                  "Action": [
                        "odps:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                        "acs:odps:*:projects/{projectname}/authorization/packages"
                  ]
            }
      ],
      "Version": "1"
}'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1eeed16675342848904412e08dd'),
}

model GetRolePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRolePolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRolePolicy  GetRolePolicyRequest
  * @return GetRolePolicyResponse
 */
async function getRolePolicy(request: GetRolePolicyRequest): GetRolePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRolePolicy', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/policy', 'json', false, 'json', request);
}

model GetRunningJobsRequest {
  from: long(name='from', description='The time when the query starts. This parameter specifies the time when a job is submitted.

*   The time range that is specified by the **from** and **to** request parameters is a closed interval. The start time and end time are included in the range. If the value of **from** is the same as the value of **to**, the time range is invalid, and a null value is returned.
*   The value is a UNIX timestamp that represents the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1683785928', position='Query'),
  jobOwnerList?: [ string ](name='jobOwnerList', description='The list of job executors.', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: long(name='pageSize', description='The number of entries per page. Default value: 10. Maximum value: 20.', example='10', position='Query'),
  quotaNicknameList?: [ string ](name='quotaNicknameList', description='The list of nicknames of quotas that are used by jobs.', shrink='simple', position='Query'),
  to: long(name='to', description='The time when the query ends. This parameter specifies the time when a job is submitted.

*   The time interval that is specified by the **from** and **to** request parameters is a closed interval. The start time and end time are included in the interval. If the value of **from** is the same as the value of **to**, the interval is invalid, and a null value is returned.
*   The value is a UNIX timestamp that represents the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.

This parameter is required.', example='1683612946', position='Query'),
}

model GetRunningJobsResponseBody = {
  data?: {
    pageNumber?: long(name='pageNumber', description='The page number.', example='2'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    runningJobInfoList?: [ 
      {
        cuSnapshot?: double(name='cuSnapshot', description='The compute unit (CU) snapshot proportion of the job.', example='0.45'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='2023050206371544gomgtp3ljcr4'),
        jobOwner?: string(name='jobOwner', description='The account that submits the job.', example='ALIYUN$xxx@test.aliyunid.com'),
        memorySnapshot?: double(name='memorySnapshot', description='The memory snapshot proportion of the job.', example='0.45'),
        progress?: double(name='progress', description='The progress of the job.', example='0'),
        project?: string(name='project', description='The name of the MaxCompute project.', example='project_20221021123044_981b'),
        quotaNickname?: string(name='quotaNickname', description='The nickname of the quota that is used by the job.', example='my_quota'),
        runningAtTime?: long(name='runningAtTime', description='The time when the job starts to run.', example='1689746864'),
        submittedAtTime?: long(name='submittedAtTime', description='The time when the job is submitted.', example='1689746864'),
      }
    ](name='runningJobInfoList', description='The list of jobs in the running state.'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='64'),
  }(name='data', description='The returned data.'),
  errorCode?: string(name='errorCode', description='*   If the value of success was false, an error code was returned.
*   If the value of success was true, a null value was returned.', example='success'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='0A3B1FD2006A24C8D8BE65CDAC028298'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ab16684833172127321e2c25'),
}

model GetRunningJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRunningJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRunningJobs  GetRunningJobsRequest
  * @return GetRunningJobsResponse
 */
async function getRunningJobs(request: GetRunningJobsRequest): GetRunningJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRunningJobs', 'GET', '/api/v1/jobs/runningJobs', 'json', false, 'json', request);
}

model GetTableInfoRequest {
  projectName: string(name='projectName', description='The name of the project to which the table or view belongs.

This parameter is required.', example='projectA', position='Path'),
  tableName: string(name='tableName', description='The name of the table or view that you want to view.

This parameter is required.', example='sale_detail', position='Path'),
  schemaName?: string(name='schemaName', description='The name of the schema to which the table or view belongs.', example='default', position='Query'),
  type?: string(name='type', description='The type of the table or view that you want to view. Valid values:

*   **internal**: internal table
*   **external**: external table
*   **view**: view
*   **materializedView**: [materialize view](https://www.alibabacloud.com/help/maxcompute/user-guide/materialized-view-operations)', example='internal', position='Query'),
}

model GetTableInfoResponseBody = {
  data?: {
    autoRefreshEnabled?: boolean(name='autoRefreshEnabled', description='Indicates whether the materialized view is automatically refreshed. This response parameter is returned when type is set to materializedView.', example='false'),
    clusterInfo?: {
      bucketNum?: long(name='bucketNum', description='Optional. The number of buckets in the clustered table. The value 0 indicates that the number of buckets dynamically changes when a job is running.', example='1024'),
      clusterCols?: [ string ](name='clusterCols', description='The cluster keys.'),
      clusterType?: string(name='clusterType', description='The clustering type of the table. MaxCompute supports [hash clustering](https://www.alibabacloud.com/help/maxcompute/use-cases/hash-clustering) and

[range clustering](https://www.alibabacloud.com/help/maxcompute/use-cases/range-clustering).', example='Hash'),
      sortCols?: [ 
        {
          name?: string(name='name', description='The name of the sorting field.', example='col_2'),
          order?: string(name='order', description='The sorting order.', example='DESC'),
        }
      ](name='sortCols', description='The condition by which the results are sorted.'),
    }(name='clusterInfo', description='The clustering attribute. This response parameter is returned when the table is a clustered table.'),
    comment?: string(name='comment', description='The comments of the table.', example='sale_detail'),
    createTableDDL?: string(name='createTableDDL', description='DDL statement to create a table.', example='create table if not exists sale_detail( shop_name STRING, customer_id STRING, total_price DOUBLE) partitioned by (sale_date STRING, region STRING);'),
    creationTime?: long(name='creationTime', description='The creation time.', example='2022-01-17T07:07:47Z'),
    displayName?: string(name='displayName', description='The display name.', example='project_name.schema_name.table_name'),
    fileNum?: long(name='fileNum', description='The number of file of the table.', example='200'),
    isExternalTable?: boolean(name='isExternalTable', description='Indicates whether the table is an external table. This response parameter is returned when type is set to external.', example='false'),
    isOutdated?: boolean(name='isOutdated', description='Indicates whether data of the materialized view is invalid due to changes in the data of the source table. This response parameter is returned when type is set to materializedView.', example='false'),
    lastAccessTime?: long(name='lastAccessTime', description='The time when data of the table or view was last accessed.', example='2023-11-21T02:05:56Z'),
    lastDDLTime?: long(name='lastDDLTime', description='The time when the data definition language (DDL) statement of the table or view was last modified.', example='2023-11-21T02:05:56Z'),
    lastModifiedTime?: long(name='lastModifiedTime', description='The time when data of the table or view was last modified.', example='2023-11-21T02:05:56Z'),
    lifecycle?: string(name='lifecycle', description='The lifecycle. Unit: days.', example='-1'),
    location?: string(name='location', description='The path of the external table. This response parameter is returned when type is set to external.', example='oss://oss-cn-hangzhou-internal.aliyuncs.com/oss-mc-test/Demo1/'),
    materializedView?: boolean(name='materializedView', description='Indicates whether the table or view is a [materialize view](https://www.alibabacloud.com/help/maxcompute/user-guide/materialized-view-operations).', example='false'),
    name?: string(name='name', description='The name of the table or view.', example='sale_detail'),
    nativeColumns?: [ 
      {
        comment?: string(name='comment', description='The column comments.', example='The name of shop.'),
        label?: string(name='label', description='The sensitivity-level label of the column. For more information, see [Label-based access control](https://www.alibabacloud.com/help/maxcompute/user-guide/label-based-access-control).', example='0'),
        name?: string(name='name', description='The column name.', example='shop_name'),
        type?: string(name='type', description='The column type.', example='STRING'),
      }
    ](name='nativeColumns', description='The field information.'),
    odpsPropertiesRolearn?: string(name='odpsPropertiesRolearn', description='The Alibaba Cloud Resource Name (ARN) of the role AliyunODPSDefaultRole in Resource Access Management (RAM). This response parameter is returned when type is set to external.', example='acs:ram::xxxxx:role/aliyunodpsdefaultrole'),
    odpsSqlTextOptionFlushHeader?: boolean(name='odpsSqlTextOptionFlushHeader', description='Indicates whether the table header is ignored. This response parameter is returned when type is set to external.', example='true'),
    odpsTextOptionHeaderLinesCount?: long(name='odpsTextOptionHeaderLinesCount', description='The first N rows that were ignored in the table header. This response parameter is returned when type is set to external.', example='1'),
    owner?: string(name='owner', description='The account information of the table or view owner.', example='188785396123****'),
    partitionColumns?: [ 
      {
        comment?: string(name='comment', description='The comments of the partition key column.', example='Sale date.'),
        label?: string(name='label', description='The sensitivity-level label of the column. For more information, see [Label-based access control](https://www.alibabacloud.com/help/maxcompute/user-guide/label-based-access-control).', example='0'),
        name?: string(name='name', description='The partition name.', example='sale_date'),
        type?: string(name='type', description='The partition column type.', example='STRING'),
      }
    ](name='partitionColumns', description='The information about partition key columns. This response parameter is returned only for partitioned tables.'),
    physicalSize?: long(name='physicalSize', description='The physical size of the table.', example='2763'),
    projectName?: string(name='projectName', description='The name of the project to which the table or view belongs.', example='projectA'),
    rewriteEnabled?: boolean(name='rewriteEnabled', description='Indicates whether the query rewrite operation can be performed by using the materialized view. This response parameter is returned when type is set to materializedView.', example='false'),
    schema?: string(name='schema', description='The name of the schema to which the table or the view belongs.', example='default'),
    size?: long(name='size', description='The data size of the non-partitioned table. If the table is a partitioned table, the system does not calculate the data size of the table. In this case, the value of this parameter is NULL. The PARTITIONS view includes the data size of each partition in a partitioned table. Unit: bytes.', example='5372'),
    storageHandler?: string(name='storageHandler', description='The storage handler of the external table. This response parameter is returned when type is set to external.', example='com.aliyun.odps.CsvStorageHandler'),
    tableLabel?: string(name='tableLabel', description='The sensitivity-level label of the table. For more information, see [Label-based access control](https://www.alibabacloud.com/help/maxcompute/user-guide/label-based-access-control).', example='0'),
    tablesotreTableName?: string(name='tablesotreTableName', description='The name of the Tablestore table to be accessed. This response parameter is returned when type is set to external.', example='ots_tpch_orders'),
    tablestoreColumnsMapping?: string(name='tablestoreColumnsMapping', description='The columns of the Tablestore table to be accessed, including the primary key column and attribute column. This response parameter is returned when type is set to external.', example=':o_orderkey,:o_orderdate,o_custkey,o_orderstatus,o_totalprice'),
    type?: string(name='type', description='The type of the table or view. Valid values:

*   **internal**: internal table
*   **external**: external table
*   **view**: view
*   **materializedView**: [materialize view](https://www.alibabacloud.com/help/maxcompute/user-guide/materialized-view-operations)', example='internal'),
    viewText?: string(name='viewText', description='The statement that generates the view. This response parameter is returned when type is set to view.', example='select shop_name, sum(total_price) from sale_detail group by shop_name'),
  }(name='data', description='The data returned.'),
  requestId?: string(name='requestId', description='The request ID.', example='0a06dd4516687375802853481ec9fd'),
}

model GetTableInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTableInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTableInfo  GetTableInfoRequest
  * @return GetTableInfoResponse
 */
async function getTableInfo(request: GetTableInfoRequest): GetTableInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableInfo', 'GET', '/api/v1/projects/{projectName}/tables/{tableName}', 'json', false, 'json', request);
}

model GetTrustedProjectsRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='odps_project', position='Path'),
}

model GetTrustedProjectsResponseBody = {
  data?: [ string ](name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc0590416675329272834336e4387'),
}

model GetTrustedProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTrustedProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTrustedProjects  GetTrustedProjectsRequest
  * @return GetTrustedProjectsResponse
 */
async function getTrustedProjects(request: GetTrustedProjectsRequest): GetTrustedProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTrustedProjects', 'GET', '/api/v1/projects/{projectName}/trustedProjects', 'json', false, 'json', request);
}

model KillJobsRequest {
  body?: string(name='body', description='The request body parameters.', example='[
      {
            "instanceId": "",
            "projectName": ""
      },
      {
            "instanceId": "",
            "projectName": ""
      }
]', position='Body'),
  region?: string(name='region', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model KillJobsResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0abb7ede16814560741256732e91b6'),
}

model KillJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: KillJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of KillJobs  KillJobsRequest
  * @return KillJobsResponse
 */
async function killJobs(request: KillJobsRequest): KillJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'KillJobs', 'POST', '/api/v1/jobs/kill', 'json', false, 'json', request);
}

model ListComputeQuotaPlanRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_MyQuota_p', position='Path'),
}

model ListComputeQuotaPlanResponseBody = {
  data?: {
    planList?: [ 
      {
        createTime?: string(name='createTime', description='The time when the quota plan was created.', example='1731394621890'),
        name?: string(name='name', description='The name of the quota plan.', example='planA'),
        quota?: {
          cluster?: string(name='cluster', description='Cluster ID.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the level-1 quota was created.', example='1730247361356'),
          creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
          id?: string(name='id', description='The ID of the level-1 quota.', example='186'),
          name?: string(name='name', description='The name of the level-1 quota.', example='dp_cn_hangzhou_1717465943_p'),
          nickName?: string(name='nickName', description='The nickname of the level-1 quota.', example='os_MyQuota_p'),
          parameter?: map[string]any(name='parameter', description='The description of the level-1 quota.', example='{
  "enablePriority": false,
  "minCU": 25,
  "adhocCU": 0,
  "elasticReservedCU": 0,
  "forceReservedMin": false,
  "maxCU": 50,
  "schedulerType": "Fifo"
}'),
          regionId?: string(name='regionId', description='Region ID.', example='cn-beijing'),
          status?: string(name='status', description='Resource status.', example='ON'),
          subQuotaInfoList?: [ 
            {
              cluster?: string(name='cluster', description='Cluster ID.', example='AT-120N'),
              createTime?: long(name='createTime', description='The creation time.', example='1730946421757'),
              creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
              id?: string(name='id', description='The ID of the level-2 quota.', example='6790'),
              name?: string(name='name', description='The name of the level-2 quota.', example='dp_cn_shanghai_1702627945_p'),
              nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='os_MyQuota'),
              parameter?: map[string]any(name='parameter', description='The description of the level-2 quota.', example='{
  "enablePriority": false,
  "minCU": 25,
  "adhocCU": 0,
  "elasticReservedCU": 0,
  "forceReservedMin": false,
  "maxCU": 50,
  "schedulerType": "Fifo"
}'),
              regionId?: string(name='regionId', description='Region ID.', example='cn-beijing'),
              status?: string(name='status', description='Resource status.', example='ON'),
              tenantId?: string(name='tenantId', description='Tenant ID.', example='478403690625249'),
              type?: string(name='type', description='The type of quota.', example='FUXI_ONLINE'),
              version?: string(name='version', description='The version number.', example='2056'),
            }
          ](name='subQuotaInfoList', description='The list of subquotas.'),
          tenantId?: string(name='tenantId', description='Tenant ID.', example='478403690625249'),
          type?: string(name='type', description='The type of quota.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='2056'),
        }(name='quota', description='The details of the quota.'),
      }
    ](name='planList', description='The list of quota plan.'),
  }(name='data', description='The data returned.'),
  errorCode?: string(name='errorCode', description='The error code.', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='This object does not exist.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0bc3b4ae16685836687916212e7850'),
}

model ListComputeQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListComputeQuotaPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListComputeQuotaPlan  ListComputeQuotaPlanRequest
  * @return ListComputeQuotaPlanResponse
 */
async function listComputeQuotaPlan(request: ListComputeQuotaPlanRequest): ListComputeQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListComputeQuotaPlan', 'GET', '/api/v1/quotas/{nickname}/computeQuotaPlan', 'json', false, 'json', request);
}

model ListFunctionsRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='odps_project', position='Path'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10', position='Query'),
  prefix?: string(name='prefix', description='The names of the returned resources. The names must start with the value specified by the prefix parameter. If the prefix parameter is set to a, the names of the returned resources must start with a.', example='a', position='Query'),
  schemaName?: string(name='schemaName', description='the name of schema.', example='default', position='Query'),
}

model ListFunctionsResponseBody = {
  data?: {
    functions?: [ 
      {
        class?: string(name='class', description='The class in which the function was defined.', example='abc'),
        creationTime?: long(name='creationTime', description='The time when the function was created. Unit: milliseconds.', example='1664505167000'),
        displayName?: string(name='displayName', description='The display name of the function.', example='getdate'),
        name?: string(name='name', description='The name of the function.', example='getdate'),
        owner?: string(name='owner', description='The owner of the function.', example='odpsowner'),
        resources?: string(name='resources', description='The name of the resource that was associated with the function.', example='abc'),
        schema?: string(name='schema', description='The schema of the function.', example='abc'),
      }
    ](name='functions', description='The information about each function.'),
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0b716671885050924814e3623'),
}

model ListFunctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFunctionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFunctions  ListFunctionsRequest
  * @return ListFunctionsResponse
 */
async function listFunctions(request: ListFunctionsRequest): ListFunctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListFunctions', 'GET', '/api/v1/projects/{projectName}/functions', 'json', false, 'json', request);
}

model ListJobInfosRequest {
  ascOrder?: boolean(name='ascOrder', description='Specifies whether to sort query results in ascending or descending order.', example='true', position='Query'),
  extNodeIdList?: [ string ](name='extNodeIdList', position='Body'),
  from: long(name='from', description='This parameter is required.', position='Body'),
  instanceIdList?: [ string ](name='instanceIdList', position='Body'),
  jobOwnerList?: [ string ](name='jobOwnerList', position='Body'),
  priorityList?: [ long ](name='priorityList', position='Body'),
  projectList?: [ string ](name='projectList', position='Body'),
  quotaNickname?: string(name='quotaNickname', position='Body'),
  sceneTagList?: [ string ](name='sceneTagList', position='Body'),
  signatureList?: [ string ](name='signatureList', position='Body'),
  sortByList?: [ string ](name='sortByList', position='Body'),
  sortOrderList?: [ string ](name='sortOrderList', position='Body'),
  statusList?: [ string ](name='statusList', position='Body'),
  to: long(name='to', description='This parameter is required.', position='Body'),
  typeList?: [ string ](name='typeList', position='Body'),
  orderColumn?: string(name='orderColumn', description='The column based on which you want to sort query results.', example='cuUsage', position='Query'),
  pageNumber?: long(name='pageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: long(name='pageSize', description='The number of entries per page.', example='10', position='Query'),
  region?: string(name='region', description='The region ID.', example='cn-shanghai', position='Query'),
  tenantId?: string(name='tenantId', description='The tenant ID.', example='478403690625249', position='Query'),
}

model ListJobInfosResponseBody = {
  data?: {
    jobInfoList?: [ 
      {
        cluster?: string(name='cluster', description='The cluster ID.', example='AY20A'),
        cuSnapshot?: double(name='cuSnapshot', description='The CU snapshot proportion of the job.', example='0.48'),
        cuUsage?: long(name='cuUsage', description='The total number of used compute units (CUs).', example='10'),
        endAtTime?: long(name='endAtTime', description='The time when the job stops running.', example='0'),
        extNodeId?: string(name='extNodeId', description='The node ID of DataWorks.', example='node_4'),
        extNodeOnDuty?: string(name='extNodeOnDuty', description='The account of the node owner.', example='duty_2'),
        extPlantFrom?: string(name='extPlantFrom', description='The upstream platform.', example='platform_3'),
        instanceId?: string(name='instanceId', description='The instance ID.', example='20230410050036549gfmsdwf60gg'),
        jobOwner?: string(name='jobOwner', description='The account that commits the job.', example='ALIYUN$xxx@test.aliyunid.com'),
        jobType?: string(name='jobType', description='The type of the job.', example='SQL'),
        memorySnapshot?: double(name='memorySnapshot', description='The memory snapshot proportion of the job.', example='0.42'),
        memoryUsage?: long(name='memoryUsage', description='The total memory usage.', example='40'),
        priority?: long(name='priority', description='The priority of the job.', example='1'),
        project?: string(name='project', description='The name of the MaxCompute project.', example='openrec_new'),
        quotaNickname?: string(name='quotaNickname', description='The nickname of the quota that is used by the job.', example='my_quota'),
        quotaType?: string(name='quotaType', description='The type of the quota.', example='subscription'),
        region?: string(name='region', description='The region ID.', example='cn-shanghai'),
        runningAtTime?: long(name='runningAtTime', description='The time when the job starts to run.', example='1672112113'),
        runningTime?: long(name='runningTime', description='The period for which the job runs.', example='800'),
        sceneResults?: [ 
          {
            description?: string(name='description', description='The intelligent diagnostics result description.', example='This job uses annual and monthly computing resources. It may be that the job is waiting for resources due to the large amount of overall job running data, many resources requested, and low job priority. Please go to Resource Consumption to view the specific situation. You can also go to Cost Optimization to see if you need to adjust resource configuration.'),
            params?: map[string]string(name='params', description='Information about the nodes where data skew or data expansion is detected. This parameter is returned only when the diagnostics scenario is data skew or data expansion.'),
            scene?: string(name='scene', description='The intelligent diagnostics result scenario.', example='LackResource'),
            sceneTag?: string(name='sceneTag', description='The intelligent diagnostics result tag.', example='SubscriptionLackResource'),
            summary?: string(name='summary', description='The intelligent diagnostics result summary.', example='Insufficient computing resources available for the job. Click to view details.'),
            type?: string(name='type', description='The intelligent diagnostics result type.', example='warning'),
          }
        ](name='sceneResults', description='The intelligent diagnostics results.'),
        signature?: string(name='signature', description='The signature of the SQL job.', example='i094KijGrN3kOXZ74kbexB77XQY='),
        status?: string(name='status', description='The status of the job.', example='running'),
        statusSnapshot?: string(name='statusSnapshot', description='The status of the snapshot.', example='running'),
        submittedAtTime?: long(name='submittedAtTime', description='The time when the job was committed.', example='1672112013'),
        tags?: string(name='tags', description='The tags.', example='[]'),
        tenantId?: string(name='tenantId', description='The tenant ID.', example='213065738244354'),
        totalTime?: long(name='totalTime', description='The total period for which the job runs.', example='900'),
        waitingTime?: long(name='waitingTime', description='The duration for which the job waits to start.', example='100'),
      }
    ](name='jobInfoList', description='The information about the jobs.'),
    pageNumber?: long(name='pageNumber', description='The page number.', example='2'),
    pageSize?: long(name='pageSize', description='The number of entries per page.', example='10'),
    totalCount?: long(name='totalCount', description='The total number of returned entries.', example='64'),
  }(name='data', description='The data returned.'),
  httpCode?: int32(name='httpCode', description='Indicates whether the request was successful. If this parameter was not empty and the value of this parameter was not 200, the request failed.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0bc13a9516807484336515320e38f5'),
}

model ListJobInfosResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobInfosResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListJobInfos  ListJobInfosRequest
  * @return ListJobInfosResponse
 */
async function listJobInfos(request: ListJobInfosRequest): ListJobInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobInfos', 'POST', '/api/v1/jobs', 'json', false, 'json', request);
}

model ListMmsDataSourcesRequest {
  name?: string(name='name', example='demo', position='Query'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  region?: string(name='region', example='cn-shanghai', position='Query'),
  type?: string(name='type', example='BIGQUERY', position='Query'),
}

model ListMmsDataSourcesResponseBody = {
  data?: {
    objectList?: [ 
      {
        agentIsOnline?: boolean(name='agentIsOnline', example='true'),
        config?: [ 
          {
            desc?: string(name='desc'),
            enums?: [ string ](name='enums'),
            group?: string(name='group', example='basic_group'),
            key?: string(name='key', example='bigquery.range.partition.migrate.type'),
            name?: string(name='name'),
            placeHolder?: string(name='placeHolder', example='Cluster or Partition'),
            required?: boolean(name='required', example='true'),
            subType?: string(name='subType', example='.keytab'),
            type?: string(name='type', example='string'),
            value?: any(name='value', example='Partition'),
          }
        ](name='config'),
        createTime?: string(name='createTime', example='2024-12-17 09:29:58'),
        dbNum?: int32(name='dbNum', example='3'),
        errMsg?: string(name='errMsg', example='unexpected exception'),
        id?: long(name='id', example='2000015'),
        lastUpdateTime?: string(name='lastUpdateTime', example='2024-12-17 15:44:17'),
        name?: string(name='name', example='demo'),
        networklink?: string(name='networklink', example='vpc-2zebqp6uojhdla46677tl:cn-beijing'),
        partitionNum?: int32(name='partitionNum', example='10000000'),
        partitionsDoingNum?: int32(name='partitionsDoingNum', example='2332'),
        partitionsDoneNum?: int32(name='partitionsDoneNum', example='23'),
        partitionsFailedNum?: int32(name='partitionsFailedNum', example='2323'),
        region?: string(name='region', example='cn-beijing'),
        scanId?: long(name='scanId', example='1000253'),
        status?: string(name='status', example='STARTED'),
        tableNum?: int32(name='tableNum', example='1000'),
        tablesDoingNum?: int32(name='tablesDoingNum', example='18'),
        tablesDoneNum?: int32(name='tablesDoneNum', example='2323'),
        tablesFailedNum?: int32(name='tablesFailedNum', example='2'),
        tablesPartDoneNum?: int32(name='tablesPartDoneNum', example='22'),
        type?: string(name='type', example='BIGQUERY'),
      }
    ](name='objectList'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: int32(name='total', example='9'),
  }(name='data'),
  requestId?: string(name='requestId', example='C1F7715F-D316-5AB6-BD02-5241083F4003'),
}

model ListMmsDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmsDataSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmsDataSources  ListMmsDataSourcesRequest
  * @return ListMmsDataSourcesResponse
 */
async function listMmsDataSources(request: ListMmsDataSourcesRequest): ListMmsDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMmsDataSources', 'GET', '/api/v1/mms/datasources', 'json', false, 'json', request);
}

model ListMmsDbsRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000018', position='Path'),
  name?: string(name='name', example='demo', position='Query'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  sorter?: {
    numRows?: string(name='numRows', example='desc'),
    size?: string(name='size', example='asc'),
    updateTime?: string(name='updateTime', example='2024-12-17 15:44:17'),
  }(name='sorter', shrink='json', position='Query'),
  status?: string(name='status', example='STARTED', position='Query'),
}

model ListMmsDbsResponseBody = {
  data?: {
    objectList?: [ 
      {
        createTime?: string(name='createTime', example='2024-12-17 15:44:42'),
        deleted?: boolean(name='deleted', example='false'),
        description?: string(name='description', example='for mms test'),
        extra?: string(name='extra', example='{}'),
        id?: long(name='id', example='1530'),
        lastDdlTime?: string(name='lastDdlTime', description='Last DDL Time', example='2024-12-17 15:44:42'),
        location?: string(name='location', example='hdfs://master-1-1.c-6fc187819ed6bae0.cn-shanghai.emr.aliyuncs.com:9000/user/hive/warehouse'),
        name?: string(name='name', example='mms_test'),
        numRows?: long(name='numRows', example='23232'),
        owner?: string(name='owner', example='xxx@yy.com'),
        partitions?: int32(name='partitions', example='1000'),
        partitionsDoing?: int32(name='partitionsDoing', example='400'),
        partitionsDone?: int32(name='partitionsDone', example='200'),
        partitionsFailed?: int32(name='partitionsFailed', example='200'),
        size?: long(name='size', example='2342342'),
        sourceId?: long(name='sourceId', example='2000015'),
        sourceName?: string(name='sourceName', example='demo'),
        status?: string(name='status', example='DOING'),
        tables?: int32(name='tables', example='100'),
        tablesDoing?: int32(name='tablesDoing', example='20'),
        tablesDone?: int32(name='tablesDone', example='20'),
        tablesFailed?: int32(name='tablesFailed', example='20'),
        tablesPartDone?: int32(name='tablesPartDone', example='20'),
        updateTime?: string(name='updateTime', example='2024-12-17 15:44:42'),
        updated?: boolean(name='updated', example='true'),
      }
    ](name='objectList'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='13'),
  }(name='data'),
  requestId?: string(name='requestId', example='CF3F9978-260F-5204-94BE-30A4E6B54443'),
}

model ListMmsDbsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmsDbsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmsDbs  ListMmsDbsRequest
  * @return ListMmsDbsResponse
 */
async function listMmsDbs(request: ListMmsDbsRequest): ListMmsDbsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMmsDbs', 'GET', '/api/v1/mms/datasources/{sourceId}/dbs', 'json', false, 'json', request);
}

model ListMmsJobsRequest {
  sorter?: {
    status?: string(name='status', example='desc'),
  }(name='sorter', position='Query'),
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000002', position='Path'),
  dstDbName?: string(name='dstDbName', example='mms_test', position='Query'),
  dstTableName?: string(name='dstTableName', example='test_table_1', position='Query'),
  name?: string(name='name', example='demo', position='Query'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  srcDbName?: string(name='srcDbName', example='test_db_1', position='Query'),
  srcTableName?: string(name='srcTableName', example='test_table_1', position='Query'),
  status?: string(name='status', example='DOING', position='Query'),
  stopped?: long(name='stopped', example='false', position='Query'),
}

model ListMmsJobsResponseBody = {
  data?: {
    objectList?: [ 
      {
        createTime?: string(name='createTime', example='2024-12-17 15:44:17'),
        dbId?: long(name='dbId', example='196'),
        dstDbName?: string(name='dstDbName', example='mms_test'),
        dstSchemaName?: string(name='dstSchemaName', example='test_table_1'),
        id?: long(name='id', example='18'),
        name?: string(name='name', example='migrate_db_1'),
        sourceId?: long(name='sourceId', example='2000015'),
        sourceName?: string(name='sourceName', example='demo'),
        srcDbName?: string(name='srcDbName', example='test_db_1'),
        srcSchemaName?: string(name='srcSchemaName', example='test_table_1'),
        status?: string(name='status', example='DONE'),
        stopped?: boolean(name='stopped', example='false'),
        taskDone?: int32(name='taskDone', example='10'),
        taskNum?: int32(name='taskNum', example='10'),
        type?: string(name='type', example='Tables'),
      }
    ](name='objectList'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  requestId?: string(name='requestId', example='1112E7C7-C65F-57A2-A7C7-3B178AA257B6'),
}

model ListMmsJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmsJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmsJobs  ListMmsJobsRequest
  * @return ListMmsJobsResponse
 */
async function listMmsJobs(request: ListMmsJobsRequest): ListMmsJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMmsJobs', 'GET', '/api/v1/mms/datasources/{sourceId}/jobs', 'json', false, 'json', request);
}

model ListMmsPartitionsRequest {
  sorter?: {
    lastDdlTime?: string(name='lastDdlTime', example='desc'),
    numRows?: string(name='numRows', example='desc'),
    size?: string(name='size', example='asc'),
  }(name='sorter', position='Query'),
  sourceId: long(name='sourceId', description='This parameter is required.', example='200018', position='Path'),
  dbId?: long(name='dbId', example='2', position='Query'),
  dbName?: string(name='dbName', example='d1', position='Query'),
  lastDdlTimeEnd?: string(name='lastDdlTimeEnd', example='2024-12-17 19:44:42', position='Query'),
  lastDdlTimeStart?: string(name='lastDdlTimeStart', example='2024-12-17 15:44:42', position='Query'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='100', position='Query'),
  status?: [ string ](name='status', shrink='json', position='Query'),
  tableName?: string(name='tableName', example='t1', position='Query'),
  updated?: boolean(name='updated', example='false', position='Query'),
  value?: string(name='value', example='p1=1/p2=abc', position='Query'),
}

model ListMmsPartitionsResponseBody = {
  data?: {
    objectList?: [ 
      {
        dbId?: long(name='DbId', example='2'),
        dbName?: string(name='dbName', example='d1'),
        id?: long(name='id', example='2323'),
        lastDdlTime?: string(name='lastDdlTime', description='lastDdlTime', example='2024-12-17 15:44:42'),
        numRows?: long(name='numRows', example='2323'),
        size?: long(name='size', example='23223'),
        sourceId?: long(name='sourceId', example='200018'),
        sourceName?: string(name='sourceName', example='demo'),
        status?: string(name='status', example='DONE'),
        tableId?: long(name='tableId', example='23'),
        tableName?: string(name='tableName', example='t1'),
        updated?: boolean(name='updated', example='false'),
        value?: string(name='value', example='p1=1/p2=abc'),
      }
    ](name='objectList'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='1000'),
  }(name='data'),
  requestId?: string(name='requestId', example='D9F872FD-5DDE-30A6-8C8A-1B8C6A81059F'),
}

model ListMmsPartitionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmsPartitionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmsPartitions  ListMmsPartitionsRequest
  * @return ListMmsPartitionsResponse
 */
async function listMmsPartitions(request: ListMmsPartitionsRequest): ListMmsPartitionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMmsPartitions', 'GET', '/api/v1/mms/datasources/{sourceId}/partitions', 'json', false, 'json', request);
}

model ListMmsTablesRequest {
  sorter?: {
    lastDdlTime?: string(name='lastDdlTime', example='desc'),
    numRows?: string(name='numRows', example='desc'),
    size?: string(name='size', example='asc'),
  }(name='sorter', position='Query'),
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  dbId?: long(name='dbId', example='197', position='Query'),
  dbName?: string(name='dbName', example='mms_test', position='Query'),
  hasPartitions?: boolean(name='hasPartitions', example='true', position='Query'),
  lastDdlTimeEnd?: string(name='lastDdlTimeEnd', example='2024-12-19 15:44:42', position='Query'),
  lastDdlTimeStart?: string(name='lastDdlTimeStart', example='2024-12-17 15:44:42', position='Query'),
  name?: string(name='name', example='test', position='Query'),
  onlyName?: boolean(name='onlyName', example='false', position='Query'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  status?: [ string ](name='status', shrink='json', position='Query'),
  type?: string(name='type', example='MANAGED_TABLE', position='Query'),
}

model ListMmsTablesResponseBody = {
  data?: {
    objectList?: [ 
      {
        dbId?: long(name='dbId', example='196'),
        dbName?: string(name='dbName', example='demo'),
        extra?: string(name='extra', example='{"mapkey.delim":":","collection.delim":",","serialization.format":"|","field.delim":"|"}'),
        hasPartitions?: boolean(name='hasPartitions', example='true'),
        id?: long(name='id', description='table ID', example='1003476'),
        inputFormat?: string(name='inputFormat', description='inputFormat', example='org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat'),
        lastDdlTime?: string(name='lastDdlTime', description='lastDdlTime', example='2024-12-17 15:44:42'),
        location?: string(name='location', example='| hdfs://master-1-1.c-c127cd184bb029ea.cn-zhangjiakou.emr.aliyuncs.com:9000/user/hive/warehouse/demo'),
        name?: string(name='name', example='test'),
        numRows?: long(name='numRows', example='232323'),
        outputFormat?: string(name='outputFormat', description='outFormat', example='org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'),
        owner?: string(name='owner', example='Hive'),
        partitions?: int32(name='partitions', example='100'),
        partitionsDoing?: int32(name='partitionsDoing', example='20'),
        partitionsDone?: int32(name='partitionsDone', example='60'),
        partitionsFailed?: int32(name='partitionsFailed', example='40'),
        schema?: {
          columns?: [ 
            {
              comment?: string(name='comment', example='user id'),
              defaultValue?: string(name='defaultValue', example='""'),
              name?: string(name='name', example='user_id'),
              nullable?: boolean(name='nullable', example='false'),
              type?: string(name='type', example='bigint'),
            }
          ](name='columns'),
          comment?: string(name='comment', example='for mms test'),
          name?: string(name='name', example='test'),
          partitions?: [ 
            {
              comment?: string(name='comment'),
              defaultValue?: string(name='defaultValue', example='abc'),
              name?: string(name='name', example='p1'),
              nullable?: boolean(name='nullable', example='false'),
              type?: string(name='type', example='string'),
            }
          ](name='partitions'),
        }(name='schema'),
        serde?: string(name='serde', description='serde', example='org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe'),
        size?: long(name='size', example='2985028'),
        sourceId?: long(name='sourceId', example='2000028'),
        sourceName?: string(name='sourceName', example='demo'),
        status?: string(name='status', example='DONE'),
        type?: string(name='type', example='MANAGED_TABLE'),
        updated?: boolean(name='updated', example='true'),
      }
    ](name='objectList'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  requestId?: string(name='requestId', example='E7FB14F1-4ACD-5C73-A755-B302D70AB9AD'),
}

model ListMmsTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmsTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmsTables  ListMmsTablesRequest
  * @return ListMmsTablesResponse
 */
async function listMmsTables(request: ListMmsTablesRequest): ListMmsTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMmsTables', 'GET', '/api/v1/mms/datasources/{sourceId}/tables', 'json', false, 'json', request);
}

model ListMmsTaskLogsRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  taskId: long(name='taskId', description='This parameter is required.', example='4032', position='Path'),
}

model ListMmsTaskLogsResponseBody = {
  data?: [ 
    {
      action?: string(name='action', example='create schema if not exists mms_test.default;'),
      createTime?: string(name='createTime', example='2024-12-17 15:44:00'),
      id?: long(name='id', example='10000'),
      msg?: string(name='msg', example='ok'),
      sourceId?: long(name='sourceId', example='2000015'),
      status?: string(name='status', example='DATA_DOING'),
      taskId?: long(name='taskId', example='4023'),
    }
  ](name='data'),
  requestId?: string(name='requestId', example='A3AE5649-EF90-54BD-86D0-C632FA950988'),
}

model ListMmsTaskLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmsTaskLogsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmsTaskLogs  ListMmsTaskLogsRequest
  * @return ListMmsTaskLogsResponse
 */
async function listMmsTaskLogs(request: ListMmsTaskLogsRequest): ListMmsTaskLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMmsTaskLogs', 'GET', '/api/v1/mms/datasources/{sourceId}/tasks/{taskId}/logs', 'json', false, 'json', request);
}

model ListMmsTasksRequest {
  sorter?: {
    startTime?: string(name='startTime', example='desc'),
    status?: string(name='status', example='asc'),
  }(name='sorter', position='Query'),
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000028', position='Path'),
  dstDbName?: string(name='dstDbName', example='mms_test', position='Query'),
  dstTableName?: string(name='dstTableName', example='test_table_1', position='Query'),
  jobId?: long(name='jobId', example='10', position='Query'),
  jobName?: string(name='jobName', example='test1', position='Query'),
  pageNum?: int32(name='pageNum', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  partition?: string(name='partition', example='p1=1/p2=abc', position='Query'),
  srcDbName?: string(name='srcDbName', example='test_db_1', position='Query'),
  srcTableName?: string(name='srcTableName', example='test_table_1', position='Query'),
  status?: string(name='status', example='DATA_DOING', position='Query'),
}

model ListMmsTasksResponseBody = {
  data?: {
    objectList?: [ 
      {
        createTime?: string(name='createTime', example='2024-10-25 04:21:01'),
        dbId?: long(name='dbId', example='196'),
        dstDbName?: string(name='dstDbName', example='mms_test'),
        dstSchemaName?: string(name='dstSchemaName', example='default'),
        dstTableName?: string(name='dstTableName', example='table_1'),
        endTime?: string(name='endTime', example='2024-10-25 07:21:01'),
        id?: long(name='id', example='2323'),
        jobId?: long(name='jobId', example='87'),
        jobName?: string(name='jobName', example='test_odps_spark'),
        retriedTimes?: int32(name='retriedTimes', example='1'),
        running?: boolean(name='running', example='true'),
        sourceId?: long(name='sourceId', example='2000028'),
        sourceName?: string(name='sourceName', example='demo'),
        srcDbName?: string(name='srcDbName', example='db_1'),
        srcSchemaName?: string(name='srcSchemaName', example='default'),
        srcTableName?: string(name='srcTableName', example='table_1'),
        startTime?: string(name='startTime', example='2024-10-25 06:21:01'),
        status?: string(name='status', example='DATA_DOING'),
        stopped?: boolean(name='stopped', example='false'),
        tableId?: long(name='tableId', example='23'),
        type?: string(name='type', example='BIGQUERY'),
      }
    ](name='objectList'),
    pageNum?: int32(name='pageNum', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: int32(name='total', example='100'),
  }(name='data'),
  requestId?: string(name='requestId', example='373A5CB2-8570-53BE-A98F-729B11D7A8B0'),
}

model ListMmsTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMmsTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMmsTasks  ListMmsTasksRequest
  * @return ListMmsTasksResponse
 */
async function listMmsTasks(request: ListMmsTasksRequest): ListMmsTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMmsTasks', 'GET', '/api/v1/mms/datasources/{sourceId}/tasks', 'json', false, 'json', request);
}

model ListPackagesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
}

model ListPackagesResponseBody = {
  data?: {
    createdPackages?: [ 
      {
        createTime?: long(name='createTime', description='The time when the package was created.', example='2022-08-02T02:30:34Z'),
        name?: string(name='name', description='The name of the package.', example='packageA'),
      }
    ](name='createdPackages', description='The packages that were created.'),
    installedPackages?: [ 
      {
        installTime?: long(name='installTime', description='The time when the package was installed.', example='2022-09-02T02:30:34Z'),
        name?: string(name='name', description='The name of the package.', example='packageB'),
        sourceProject?: string(name='sourceProject', description='The project to which the package belongs. This parameter is required if the package is installed in the MaxCompute project.', example='projectB'),
        status?: string(name='status', description='The status of the package.', example='OK'),
      }
    ](name='installedPackages', description='The packages that were installed.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4aa16677927210252786e4cb6'),
}

model ListPackagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPackagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPackages  ListPackagesRequest
  * @return ListPackagesResponse
 */
async function listPackages(request: ListPackagesRequest): ListPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPackages', 'GET', '/api/v1/projects/{projectName}/packages', 'json', false, 'json', request);
}

model ListProjectUsersRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
}

model ListProjectUsersResponseBody = {
  data?: {
    users?: [ 
      {
        name?: string(name='name', description='The name of the user.', example='userA'),
      }
    ](name='users', description='An array that contains users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7b316643495896551555e855b'),
}

model ListProjectUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProjectUsers  ListProjectUsersRequest
  * @return ListProjectUsersResponse
 */
async function listProjectUsers(request: ListProjectUsersRequest): ListProjectUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectUsers', 'GET', '/api/v1/projects/{projectName}/users', 'json', false, 'json', request);
}

model ListProjectsRequest {
  listSystemCatalog?: boolean(name='listSystemCatalog', description='Specifies whether to list the built-in **SYSTEM_CATALOG** projects that are used to provide data such as project metadata and historical usage data. For more information, see [Tenant-level Information Schema](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/tenant-level-information-schema).

Valid values:

*   true: The built-in SYSTEM_CATALOG projects are listed.
*   false: The built-in SYSTEM_CATALOG projects are not listed.', example='true', position='Query'),
  marker?: string(name='marker', description='The maximum number of entries to return on each page.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries per page. Default value: 10.', example='10', position='Query'),
  prefix?: string(name='prefix', description='Specifies the marker after which the returned list begins.', example='a', position='Query'),
  quotaName?: string(name='quotaName', description='The quota name that is automatically generated. You can log on to the [MaxCompute console](https://maxcompute.console.aliyun.com), choose **Workspace** > **Quotas** from the left-side navigation pane, and then view the quota name on the **Quotas** page.', example='"hsajkdgbkaubh"', position='Query'),
  quotaNickName?: string(name='quotaNickName', description='The quota nickname. You can log on to the [MaxCompute console](https://maxcompute.console.aliyun.com), choose **Workspace** > **Quotas** from the left-side navigation pane, and then view the quota nickname on the **Quotas** page.', example='quotaA', position='Query'),
  region?: string(name='region', description='The region ID.', example='cn-beijing', position='Query'),
  saleTags?: string(name='saleTags', description='The instance ID and billing method of the default computing quota.', example='"aaaa-bbbb"', position='Query'),
  tenantId?: string(name='tenantId', description='The tenant ID. You can log on to the [MaxCompute console](https://maxcompute.console.aliyun.com), and choose **Tenants** > **Tenant Property** from the left-side navigation pane to view the tenant ID.', example='549532154333697', position='Query'),
  type?: string(name='type', description='The project type. Valid values:

*   **managed**: internal project
*   **external**: external project', example='"managed"', position='Query'),
}

model ListProjectsResponseBody = {
  data?: {
    nextToken?: string(name='NextToken', description='A pagination token. Only continuous page turning is supported. If NextToken is not empty, the next page exists. The value of NextToken can be used in the next request to retrieve a new page of results.', example='AAAAAV3MpHK1AP0pfERHZN5pu6kvikyUl3ChyRxN+qLPvtOb'),
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    projects?: [ 
      {
        comment?: string(name='comment', description='The project description.', example='maxcompute projects'),
        costStorage?: string(name='costStorage', description='The total storage usage. The storage space that is occupied by your project, which is the logical storage space after your project data is collected and compressed.', example='16489027'),
        createdTime?: long(name='createdTime', description='The creation time.', example='1704380838000'),
        defaultQuota?: string(name='defaultQuota', description='The default computing quota that is used to allocate computing resources. If you do not specify a computing quota for your project, the jobs that are initiated by your project consume the computing resources in the default quota. For more information about how to use computing resources, see [Use quota groups for computing resources](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/use-of-computing-resources)', example='quotaA'),
        ipWhiteList?: {
          ipList?: string(name='ipList', description='The IP address whitelist for access over the Internet or the network for interconnecting with other Alibaba Cloud services.

>  If you configure only the IP address whitelist for access over the Internet or the network for interconnecting with other Alibaba Cloud services, the access over the Internet or the network for interconnecting with other Alibaba Cloud services is subject to configurations, and access over a virtual private cloud (VPC) is not allowed.', example='10.88.111.3'),
          vpcIpList?: string(name='vpcIpList', description='The IP address whitelist for access over a VPC.

>  If you configure only the IP address whitelist for access over a VPC, the access over a VPC is subject to configurations, and the access over the Internet or the network for interconnecting with other Alibaba Cloud services is not allowed.', example='10.88.111.3'),
        }(name='ipWhiteList', description='The information about the IP address whitelist.'),
        name?: string(name='name', description='The name of the project.', example='odps_project'),
        owner?: string(name='owner', description='The account information of the project owner.', example='1139815775606813'),
        properties?: {
          allowFullScan?: boolean(name='allowFullScan', description='Indicates whether a full table scan is allowed in the project. A full table scan occupies a large number of resources, which reduces data processing efficiency. By default, the full table scan feature is disabled.', example='false'),
          enableDecimal2?: boolean(name='enableDecimal2', description='Indicates whether the DECIMAL type of the MaxCompute V2.0 data type edition is enabled.', example='true'),
          enableTunnelQuotaRoute?: boolean(name='enableTunnelQuotaRoute', description='Indicates whether the routing of the Tunnel resource group is enabled.

*   true: The data transfer tasks that are submitted by the project by default use the Tunnel resource group that is bound to the project.
*   false: The data transfer tasks that are submitted by the project by default use the Tunnel shared resource group.', example='true'),
          encryption?: {
            algorithm?: string(name='algorithm', description='The data encryption algorithm that is supported by the key. Valid values: AES256, AESCTR, and RC4.', example='SHA1'),
            enable?: boolean(name='enable', description='Indicates whether the data encryption feature needs to be enabled for the project. For more information about data encryption, see

[Storage encryption](https://www.alibabacloud.com/help/zh/maxcompute/security-and-compliance/storage-encryption).', example='true'),
            key?: string(name='key', description='The type of key that is used for data encryption. You can select MaxCompute Default Key or Bring Your Own Key (BYOK) as the key type. If you select MaxCompute Default Key, the default key that is created by MaxCompute is used.', example='dafault'),
          }(name='encryption', description='The storage encryption properties.'),
          externalProjectProperties?: {
            isExternalCatalogBound?: string(name='isExternalCatalogBound', description='Indicates whether the external project is an external project for [data lakehouse solution 2.0](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/lake-warehouse-integrated-2-0-use-guide).', example='true'),
          }(name='externalProjectProperties', description='The properties of the external project.'),
          retentionDays?: long(name='retentionDays', description='The retention period for backup data. Unit: days. During the retention period, you can restore data of the version in use to the backup data of any version. Valid values: [0,30]. Default value: 1. The value 0 indicates that the backup feature is disabled.', example='1'),
          sqlMeteringMax?: string(name='sqlMeteringMax', description='The maximum consumption threshold of a single SQL statement. Formula: Amount of scanned data (GB) × Complexity.', example='1500'),
          tableLifecycle?: {
            type?: string(name='type', description='The lifecycle type. Valid values:

*   **mandatory**: The lifecycle clause is required in a table creation statement.
*   **optional**: The lifecycle clause is optional in a table creation statement. If you do not configure a lifecycle for a table, the table does not expire.
*   **inherit**: If you do not configure a lifecycle for a table when you create the table, the value of the odps.table.lifecycle.value parameter is used as the table lifecycle by default.', example='optional'),
            value?: string(name='value', description='The table lifecycle. Unit: days. Valid values: 1 to 37231. Default value: 37231.', example='37231'),
          }(name='tableLifecycle', description='The table lifecycle properties.'),
          timezone?: string(name='timezone', description='The time zone that is used by your project. The time zone is the same as the time zone specified by `odps.sql.timezone`.', example='Asia/Shanghai'),
          tunnelQuota?: string(name='tunnelQuota', description='The [Tunnel](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/overview-of-dts) resource group that is bound to the project.

*   Default resource group: The Tunnel shared resource group is used. You cannot use the subscription-based Tunnel resource group for the project. The default resource group is automatically used by the Tunnel service of your project, regardless of the parameter setting.
*   Subscription-based Tunnel resource group: You can use the subscription-based Tunnel resource group for the project.', example='quota_tunnel'),
          typeSystem?: string(name='typeSystem', description='The data type edition. Valid values:

*   **1**: MaxCompute V1.0 data type edition
*   **2**: MaxCompute V2.0 data type edition
*   **hive**: Hive-compatible data type edition

For more information about the differences among the three data type editions, see [Data type editions](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/data-type-editions).', example='2'),
        }(name='properties', description='The basic properties of the project.'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
        saleTag?: {
          resourceId?: string(name='resourceId', description='The instance ID of the default computing quota.', example='"aaaa-bbbb"'),
          resourceType?: string(name='resourceType', description='The billing method of the default computing quota.', example='"project"'),
        }(name='saleTag', description='The instance ID and billing method of the default computing quota.'),
        securityProperties?: {
          enableDownloadPrivilege?: boolean(name='enableDownloadPrivilege', description='Indicates whether the [download control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/label-based-access-control) feature is enabled. By default, this feature is disabled.', example='false'),
          labelSecurity?: boolean(name='labelSecurity', description='Indicates whether the [label-based access control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/label-based-access-control) feature is enabled. By default, this feature is disabled.', example='false'),
          objectCreatorHasAccessPermission?: boolean(name='objectCreatorHasAccessPermission', description='Indicates whether to allow the object creator to have the access permissions on the object. The default value is true, which indicates that the object creator has the access permissions on the object.', example='true'),
          objectCreatorHasGrantPermission?: boolean(name='objectCreatorHasGrantPermission', description='Indicates whether the object creator has the authorization permissions on the object. The default value is true, which indicates that the object creator has the authorization permissions on the object.', example='true'),
          projectProtection?: {
            exceptionPolicy?: string(name='exceptionPolicy', description='If you enable the project data protection mechanism, you can configure exception or trusted projects. This allows specified users to transfer data of a specified object to a specified project. The project data protection mechanism does not take effect in all the situations that are specified in the exception policy.', example='{
      "Version": "1",
      "Statement": [
            {
                  "Effect": "Allow",
                  "Principal": "",
                  "Action": [
                        "odps:[, , ...]"
                  ],
                  "Resource": "acs:odps:*:",
                  "Condition": {
                        "StringEquals": {
                              "odps:TaskType": [
                                    ""
                              ]
                        }
                  }
            }
      ]
}'),
            protected?: boolean(name='protected', description='Indicates whether the [data protection mechanism](https://www.alibabacloud.com/help/zh/maxcompute/security-and-compliance/project-data-protection) is enabled for the project. This allows or denies data transfer across projects. By default, the data protection mechanism is disabled.', example='true'),
          }(name='projectProtection', description='The properties of the [data protection mechanism](https://www.alibabacloud.com/help/zh/maxcompute/security-and-compliance/project-data-protection).'),
          usingAcl?: boolean(name='usingAcl', description='Indicates whether the [ACL-based access control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/acl-based-access-control) feature is enabled. By default, this feature is enabled.', example='true'),
          usingPolicy?: boolean(name='usingPolicy', description='Indicates whether the [policy-based access control](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/policy-based-access-control-1) feature is enabled. By default, this feature is enabled.', example='true'),
        }(name='securityProperties', description='The permission properties.'),
        status?: string(name='status', description='The project status. Valid values:

*   **AVAILABLE**
*   **READONLY**
*   **FROZEN**
*   **DELETING**', example='AVAILABLE'),
        threeTierModel?: boolean(name='threeTierModel', description='Indicates whether data storage by schema is supported. MaxCompute supports the schema feature. This feature allows you to classify objects such as tables, resources, and user-defined functions (UDFs) in a project by schema. You can create multiple schemas in a project. For more information, see [Schema-related operations](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/schema-related-operations).

Valid values:

*   true: supported
*   false: not supported', example='true'),
        type?: string(name='type', description='The project type. Valid values:

*   **managed**: internal project
*   **external**: external project', example='managed'),
      }
    ](name='projects', description='The list of projects.'),
  }(name='data', description='The data returned.'),
  requestId?: string(name='requestId', description='The request ID.', example='0b16399216671970335563173e2340'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProjects  ListProjectsRequest
  * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/api/v1/projects', 'json', false, 'json', request);
}

model ListQuotasRequest {
  billingType?: string(name='billingType', description='The billing method of the quota.', example='subscription', position='Query'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: long(name='maxItem', description='The maximum number of entries to return on each page.', example='100', position='Query'),
  productId?: string(name='productId', description='The service ID.', example='ODPS', position='Query'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  saleTags?: string(name='saleTags', description='The cost tag. You can filter out quota objects based on the cost tag. The cost tag is created when you tag a service.', example='{"tag":"this_is_tag_demo"}', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='280747109771520', position='Query'),
}

model ListQuotasResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. Only continuous page turning is supported. If NextToken is not empty, the next page exists. The value of NextToken can be used in the next request to retrieve a new page of results.', example='AAAAAdDWBF2w6Olxc+cMPjUtUMo/CvPe4IK7f7kIQFrIZjyc'),
  data?: {
    nextToken?: string(name='NextToken', description='A pagination token. Only continuous page turning is supported. If NextToken is not empty, the next page exists. The value of NextToken can be used in the next request to retrieve a new page of results.', example='"abcde"'),
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: long(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    quotaInfoList?: [ 
      {
        tags?: [ 
          {
            tagKey?: string(name='TagKey', description='The key of the tag.', example='Department'),
            tagValue?: string(name='TagValue', description='The value of the tag.', example='a12351qHDP6YEQMt'),
          }
        ](name='Tags', description='The tags.'),
        billingPolicy?: {
          billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
          odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
          orderId?: string(name='orderId', description='The order ID.', example='45245678'),
        }(name='billingPolicy', description='The information of the order.'),
        cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
        createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
        creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
        id?: string(name='id', description='The quota ID.', example='0'),
        name?: string(name='name', description='The name of the quota.', example='quota_a'),
        nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
        parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
        parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
        regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
        saleTag?: {
          resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
          resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
        }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
        scheduleInfo?: {
          currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
          currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
          nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
          nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
          oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
          onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
          operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
        }(name='scheduleInfo', description='The information of the scheduling plan.'),
        status?: string(name='status', description='The status of the endpoint group.', example='ON'),
        subQuotaInfoList?: [ 
          {
            billingPolicy?: {
              billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
              odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
              orderId?: string(name='orderId', description='The order ID.', example='45245678'),
            }(name='billingPolicy', description='The information of the order.'),
            cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
            createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
            creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
            id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
            name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
            nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
            parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
            parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
            regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
            saleTag?: {
              resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
              resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
            }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
            scheduleInfo?: {
              currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
              currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
              nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
              nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
              oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
              onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
              operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
              timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
            }(name='scheduleInfo', description='The information of the scheduling plan.'),
            status?: string(name='status', description='The status of the endpoint group.', example='ON'),
            tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
            tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
            type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
            version?: string(name='version', description='The version of the algorithm image.', example='1'),
          }
        ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
        tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
        tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
        type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
        version?: string(name='version', description='The version number.', example='1'),
      }
    ](name='quotaInfoList', description='The list of quotas.'),
  }(name='data', description='The returned data.'),
  marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
  maxItem?: long(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
  quotaInfoList?: [ 
    {
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='Department'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='1'),
        }
      ](name='Tags', description='The tags.'),
      billingPolicy?: {
        billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
        odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
        orderId?: string(name='orderId', description='The order ID.', example='45245678'),
      }(name='billingPolicy', description='The information of the order.'),
      cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
      createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
      creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
      id?: string(name='id', description='The quota ID.', example='0'),
      name?: string(name='name', description='The name of the quota.', example='quota_a'),
      nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
      parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
      parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
      regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
      saleTag?: {
        resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
        resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"project"'),
      }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
      scheduleInfo?: {
        currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
        currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
        nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
        nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
        oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
        onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
        operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
        timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
      }(name='scheduleInfo', description='The information of the scheduling plan.'),
      status?: string(name='status', description='The status of the endpoint group.', example='ON'),
      subQuotaInfoList?: [ 
        {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The order ID.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The cluster ID.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the resource was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
          id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
          name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
          nickName?: string(name='nickName', description='The alias of the level-2 quota.', example='subquotaA'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
          regionId?: string(name='regionId', description='The region ID.', example='cn-beijing'),
          saleTag?: {
            resourceIds?: [ string ](name='resourceIds', description='The identifier of an object in a MaxCompute quota. This identifier exists in the sales bill of Alibaba Cloud. You can use this identifier to associate the cost of a quota object with a tag.'),
            resourceType?: string(name='resourceType', description='The type of the object. Valid values: quota and project.', example='"quota"'),
          }(name='saleTag', description='The identifier of an object in a MaxCompute quota. This identifier is the same as the identifier in the sales bill of Alibaba Cloud. This parameter is used for tags.'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='The quota plan that immediately takes effect. If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
            timezone?: string(name='timezone', description='The time zone of the project.', example='UTC+8'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the endpoint group.', example='ON'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }
      ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
      tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
      tenantId?: string(name='tenantId', description='The tenant ID.', example='280747109771520'),
      type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
      version?: string(name='version', description='The version.', example='1'),
    }
  ](name='quotaInfoList', description='The list of quotas.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc12e6f16677875480593081d2956'),
}

model ListQuotasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQuotasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListQuotas  ListQuotasRequest
  * @return ListQuotasResponse
 */
async function listQuotas(request: ListQuotasRequest): ListQuotasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQuotas', 'GET', '/api/v1/quotas', 'json', false, 'json', request);
}

model ListQuotasPlansRequest {
  nickname: string(name='nickname', description='The name of the quota.

This parameter is required.', example='quotaA', position='Path'),
  region?: string(name='region', description='The ID of the region.', example='cn-beijing', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model ListQuotasPlansResponseBody = {
  data?: {
    planList?: [ 
      {
        createTime?: string(name='createTime', description='The time when the quota plan was created.', example='2022-05-16T06:07:45Z'),
        name?: string(name='name', description='The name of the quota plan.', example='planA'),
        quota?: {
          billingPolicy?: {
            billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
            odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
            orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
          }(name='billingPolicy', description='The information of the order.'),
          cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
          createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
          creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
          id?: string(name='id', description='The ID of the quota.', example='0'),
          name?: string(name='name', description='The name of the quota.', example='quota_a'),
          nickName?: string(name='nickName', description='The alias of the quota.', example='quota_nickname'),
          parameter?: map[string]any(name='parameter', description='The description of the quota.'),
          parentId?: string(name='parentId', description='The ID of the parent resource.', example='null'),
          regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
          scheduleInfo?: {
            currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
            currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
            nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
            nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
            oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
            onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
            operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
          }(name='scheduleInfo', description='The information of the scheduling plan.'),
          status?: string(name='status', description='The status of the resource.', example='ON'),
          subQuotaInfoList?: [ 
            {
              billingPolicy?: {
                billingMethod?: string(name='billingMethod', description='The billing method of the quota. Valid values:

*   subscription: a subscription quota.
*   payasyougo: a pay-as-you-go quota.', example='subscription'),
                odpsSpecCode?: string(name='odpsSpecCode', description='The specifications of the order.', example='OdpsStandard'),
                orderId?: string(name='orderId', description='The ID of the order.', example='45245678'),
              }(name='billingPolicy', description='The information of the order.'),
              cluster?: string(name='cluster', description='The ID of the cluster.', example='AT-120N'),
              createTime?: long(name='createTime', description='The time when the quota plan was created.', example='2022-09-06T02:14:44Z'),
              creatorId?: string(name='creatorId', description='The ID of the Alibaba Cloud account that is used to create the resource.', example='672863518'),
              id?: string(name='id', description='The ID of the level-2 quota.', example='1000048'),
              name?: string(name='name', description='The name of the level-2 quota.', example='subquotaA'),
              nickName?: string(name='nickName', description='The nickname of the level-2 quota.', example='subquotaA'),
              parameter?: map[string]any(name='parameter', description='The description of the quota.'),
              parentId?: string(name='parentId', description='The ID of the parent resource.', example='0'),
              regionId?: string(name='regionId', description='The ID of the region.', example='cn-beijing'),
              scheduleInfo?: {
                currPlan?: string(name='currPlan', description='The quota plan that takes effect based on the scheduling plan.', example='planA'),
                currTime?: string(name='currTime', description='The time when the current quota plan is scheduled.', example='0800'),
                nextPlan?: string(name='nextPlan', description='The next quota plan that will take effect based on the scheduling plan.', example='planB'),
                nextTime?: string(name='nextTime', description='The time when the next quota plan is scheduled.', example='1700'),
                oncePlan?: string(name='oncePlan', description='If the quota plan that immediately takes effect is different from the current quota plan, this parameter is not empty.', example='planC'),
                onceTime?: string(name='onceTime', description='The time when the quota plan immediately takes effect.', example='1500'),
                operatorName?: string(name='operatorName', description='The name of the operator.', example='userA'),
              }(name='scheduleInfo', description='The information of the scheduling plan.'),
              status?: string(name='status', description='The status of the resource.', example='ON'),
              tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
              tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
              type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
              version?: string(name='version', description='The version number.', example='1'),
            }
          ](name='subQuotaInfoList', description='The information of the level-2 quota.'),
          tag?: string(name='tag', description='The tag of the resource for the quota.', example='abc'),
          tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249'),
          type?: string(name='type', description='The type of the resource system. This parameter corresponds to the resourceSystemType parameter of the cluster.', example='FUXI_ONLINE'),
          version?: string(name='version', description='The version number.', example='1'),
        }(name='quota', description='The details of the quota.'),
      }
    ](name='planList', description='The list of quota plans.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0bd16661643917136451ebf55'),
}

model ListQuotasPlansResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQuotasPlansResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListQuotasPlans  ListQuotasPlansRequest
  * @return ListQuotasPlansResponse
 */
async function listQuotasPlans(request: ListQuotasPlansRequest): ListQuotasPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListQuotasPlans', 'GET', '/api/v1/quotas/{nickname}/plans', 'json', false, 'json', request);
}

model ListResourcesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg==', position='Query'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10', position='Query'),
  name?: string(name='name', description='The name of the resource.', example='res', position='Query'),
  schemaName?: string(name='schemaName', description='The name of the schema.', example='default', position='Query'),
}

model ListResourcesResponseBody = {
  data?: {
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='ZmN0X21vbnRoX3Rhb2Jhb19pbmRleCE='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    resources?: [ 
      {
        comment?: string(name='comment', description='The remarks.', example='file'),
        contentMD5?: string(name='contentMD5', description='The Base64-encoded 128-bit MD5 hash value of the HTTP request body.', example='MACiECZtnLiNkNS1v5****=1'),
        creationTime?: long(name='creationTime', description='The time when the resource was created.', example='2022-01-29T03:34:09Z'),
        displayName?: string(name='displayName', description='The display name.', example='res_1'),
        lastModifiedTime?: long(name='lastModifiedTime', description='The time when the resource was modified.', example='2023-04-18T06:15:05Z'),
        lastUpdator?: string(name='lastUpdator', description='The user who updated the resource.', example='ALIYUN$xxx@test.aliyunid.com'),
        name?: string(name='name', description='The name of the resource.', example='res_1'),
        owner?: string(name='owner', description='The owner of the resource.', example='1265860483008101'),
        schema?: string(name='schema', description='The schema to which the resource belongs.', example='schemaA'),
        size?: long(name='size', description='The size of the resource.', example='10'),
        type?: string(name='type', description='The resource type.

Valid values:

*   file

    <!-- -->

    <!-- -->

    <!-- -->

*   py

    <!-- -->

    <!-- -->

    <!-- -->

*   jar

    <!-- -->

    <!-- -->

    <!-- -->

*   volumefile

    <!-- -->

    <!-- -->

    <!-- -->

*   table

    <!-- -->

    <!-- -->

    <!-- -->', example='file'),
      }
    ](name='resources', description='The list of resources.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc3b4ae16685836687916212e7850'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResources  ListResourcesRequest
  * @return ListResourcesResponse
 */
async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/api/v1/projects/{projectName}/resources', 'json', false, 'json', request);
}

model ListRolesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
}

model ListRolesResponseBody = {
  data?: {
    roles?: [ 
      {
        acl?: {
          function?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the function.'),
              name?: string(name='name', description='The name of the function.', example='functionA'),
            }
          ](name='function', description='The function.'),
          instance?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the instance.'),
              name?: string(name='name', description='The name of the instance.', example='instanceA'),
            }
          ](name='instance', description='The instance.'),
          package?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the package.'),
              name?: string(name='name', description='The name of the package.', example='packageA'),
            }
          ](name='package', description='The package.'),
          project?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the project.'),
              name?: string(name='name', description='The name of the MaxCompute project.', example='projectA'),
            }
          ](name='project', description='The project.'),
          resource?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the resource.'),
              name?: string(name='name', description='The name of the resource.', example='resourceA'),
            }
          ](name='resource', description='The resource.'),
          table?: [ 
            {
              actions?: [ string ](name='actions', description='The operations that were performed on the table.'),
              name?: string(name='name', description='The name of the table.', example='tableA'),
            }
          ](name='table', description='The table.'),
        }(name='acl', description='The ACL-based permissions that are granted to the role.'),
        name?: string(name='name', description='The name of the role.', example='roleA'),
        policy?: string(name='policy', description='The policy that is attached to the role.', example='{
      "Statement": [
            {
                  "Action": [
                        "odps:*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                        "acs:odps:*:projects/{projectname}/authorization/packages"
                  ]
            }
      ],
      "Version": "1"
}'),
        type?: string(name='type', description='The type of the role.', example='admin'),
      }
    ](name='roles', description='The MaxCompute project-level roles.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe716686526652451361e80ae'),
}

model ListRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRoles  ListRolesRequest
  * @return ListRolesResponse
 */
async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRoles', 'GET', '/api/v1/projects/{projectName}/roles', 'json', false, 'json', request);
}

model ListStoragePartitionsInfoRequest {
  project: string(name='project', description='This parameter is required.', example='odps_project', position='Path'),
  table: string(name='table', description='This parameter is required.', example='bank_data', position='Path'),
  ascOrder?: boolean(name='ascOrder', example='false', position='Query'),
  date: string(name='date', description='This parameter is required.', example='20241205', position='Query'),
  orderColumn?: string(name='orderColumn', example='totalFrequency', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  partitionPrefix?: string(name='partitionPrefix', example='20241201', position='Query'),
  region?: string(name='region', example='cn-beijing', position='Query'),
  schema?: string(name='schema', example='schema', position='Query'),
  tenantId?: string(name='tenantId', example='40713753659****', position='Query'),
  types?: [ string ](name='types', shrink='json', position='Query'),
}

model ListStoragePartitionsInfoResponseBody = {
  data?: {
    date?: string(name='date', example='20241205'),
    pageNumber?: long(name='pageNumber', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    storagePartitionInfoList?: [ 
      {
        fileCount?: long(name='fileCount', example='2'),
        fileSize?: double(name='fileSize', example='1'),
        fileSizeUnit?: string(name='fileSizeUnit', example='GB'),
        isPartitioned?: boolean(name='isPartitioned', example='false'),
        lastAccessTime?: long(name='lastAccessTime', example='1694589365'),
        partition?: string(name='partition', example='ds=20241201'),
        projectName?: string(name='projectName', example='odps_project'),
        rate?: double(name='rate', example='1%'),
        schemaName?: string(name='schemaName', example='schema'),
        storageType?: string(name='storageType', example='standard'),
        tableName?: string(name='tableName', example='bank_data'),
        totalFrequency?: long(name='totalFrequency', example='10'),
        totalInputAmount?: double(name='totalInputAmount', example='1'),
        totalInputAmountUnit?: string(name='totalInputAmountUnit', example='GB'),
        type?: string(name='type', example='PARTITION'),
      }
    ](name='storagePartitionInfoList'),
    totalCount?: long(name='totalCount', example='57'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', example='This object does not exist.'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0be3e0bd16661643917136451ebf55'),
}

model ListStoragePartitionsInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListStoragePartitionsInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListStoragePartitionsInfo  ListStoragePartitionsInfoRequest
  * @return ListStoragePartitionsInfoResponse
 */
async function listStoragePartitionsInfo(request: ListStoragePartitionsInfoRequest): ListStoragePartitionsInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStoragePartitionsInfo', 'GET', '/api/v1/observations/analysis/storage/projects/{project}/tables/{table}/partitionsInfo', 'json', false, 'json', request);
}

model ListStorageTablesInfoRequest {
  project: string(name='project', description='This parameter is required.', example='odps_project', position='Path'),
  ascOrder?: boolean(name='ascOrder', example='false', position='Query'),
  date: string(name='date', description='This parameter is required.', example='20241205', position='Query'),
  orderColumn?: string(name='orderColumn', example='totalFrequency', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
  recentDays?: int32(name='recentDays', example='1', position='Query'),
  region?: string(name='region', example='cn-beijing', position='Query'),
  schema?: string(name='schema', example='schema', position='Query'),
  tablePrefix?: string(name='tablePrefix', example='bank', position='Query'),
  tenantId?: string(name='tenantId', example='28074710977****', position='Query'),
  types?: [ string ](name='types', shrink='simple', position='Query'),
}

model ListStorageTablesInfoResponseBody = {
  data?: {
    date?: string(name='date', example='20241205'),
    pageNumber?: long(name='pageNumber', example='1'),
    pageSize?: long(name='pageSize', example='10'),
    storageTableInfoList?: [ 
      {
        date?: string(name='date', example='20241205'),
        isPartitioned?: boolean(name='isPartitioned', example='false'),
        lastAccessTime?: long(name='lastAccessTime', example='1694589365'),
        longTermStorage?: double(name='longTermStorage', example='0'),
        longTermStorageFileCount?: long(name='longTermStorageFileCount', example='0'),
        longTermStorageUnit?: string(name='longTermStorageUnit', example='B'),
        lowFreqStorage?: double(name='lowFreqStorage', example='0'),
        lowFreqStorageFileCount?: long(name='lowFreqStorageFileCount', example='0'),
        lowFreqStorageUnit?: string(name='lowFreqStorageUnit', example='B'),
        projectName?: string(name='projectName', example='odps_project'),
        rate?: double(name='rate', example='0'),
        schemaName?: string(name='schemaName', example='schema'),
        standardStorage?: double(name='standardStorage', example='600'),
        standardStorageFileCount?: long(name='standardStorageFileCount', example='2'),
        standardStorageUnit?: string(name='standardStorageUnit', example='KB'),
        storageType?: string(name='storageType', example='standard'),
        tableName?: string(name='tableName', example='bank_data'),
        totalFrequency?: long(name='totalFrequency', example='10'),
        totalInputAmount?: double(name='totalInputAmount', example='1'),
        totalInputAmountUnit?: string(name='totalInputAmountUnit', example='GB'),
        totalStorage?: double(name='totalStorage', example='600'),
        totalStorageFileCount?: long(name='totalStorageFileCount', example='2'),
        totalStorageUnit?: string(name='totalStorageUnit', example='KB'),
      }
    ](name='storageTableInfoList'),
    totalCount?: long(name='totalCount', example='1'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', example='This object does not exist.'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0bc12e6a16679892465424670db3eb'),
}

model ListStorageTablesInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListStorageTablesInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListStorageTablesInfo  ListStorageTablesInfoRequest
  * @return ListStorageTablesInfoResponse
 */
async function listStorageTablesInfo(request: ListStorageTablesInfoRequest): ListStorageTablesInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListStorageTablesInfo', 'GET', '/api/v1/observations/analysis/storage/projects/{project}/tablesInfo', 'json', false, 'json', request);
}

model ListTablesRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  marker?: string(name='marker', description='Specifies the marker after which the returned list begins.', example='Y29tbWlzc2lvbl9leHRlcm5hbF91cmdlXzFfd3Ih', position='Query'),
  maxItem?: int32(name='maxItem', description='The maximum number of entries to return on each page.', example='10', position='Query'),
  prefix?: string(name='prefix', description='The names of the returned resources. The names must start with the value specified by the prefix parameter. If the prefix parameter is set to a, the names of the returned resources must start with a.', example='a', position='Query'),
  schemaName?: string(name='schemaName', description='The name of the schema.', example='default', position='Query'),
  type?: string(name='type', description='The type of the table.', example='internal', position='Query'),
}

model ListTablesResponseBody = {
  data?: {
    marker?: string(name='marker', description='Indicates the marker after which the returned list begins.', example='cHlvZHBzX3VkZl8xMDExNV8xNDU3NDI4NDkzKg=='),
    maxItem?: int32(name='maxItem', description='The maximum number of entries returned per page.', example='10'),
    tables?: [ 
      {
        creationTime?: long(name='creationTime', description='The time when the table was created.', example='2022-01-17T07:07:47Z'),
        displayName?: string(name='displayName', description='The display name of the table.', example='sale_detail'),
        name?: string(name='name', description='The name of the table.', example='dim_odps'),
        owner?: string(name='owner', description='The owner of the table.', example='1887853961230110'),
        schema?: string(name='schema', description='The schema to which the table belongs.', example='default'),
        type?: string(name='type', description='The type of the table.', example='internal'),
      }
    ](name='tables', description='The information about tables.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The request ID.', example='0a06dd4516687375802853481ec9fd'),
}

model ListTablesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTablesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTables  ListTablesRequest
  * @return ListTablesResponse
 */
async function listTables(request: ListTablesRequest): ListTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTables', 'GET', '/api/v1/projects/{projectName}/tables', 'json', false, 'json', request);
}

model ListTunnelQuotaTimerRequest {
  nickname: string(name='nickname', description='This parameter is required.', example='ot_tunnel_quota_p', position='Path'),
}

model ListTunnelQuotaTimerResponseBody = {
  data?: [ 
    {
      beginTime?: string(name='beginTime', example='00:00'),
      endTime?: string(name='endTime', example='08:00'),
      timezone?: string(name='timezone', example='Asia/Shanghai'),
      tunnelQuotaParameter?: {
        elasticReservedSlotNum?: long(name='elasticReservedSlotNum', example='100'),
        slotNum?: long(name='slotNum', example='100'),
      }(name='tunnelQuotaParameter'),
    }
  ](name='data'),
  errorCode?: string(name='errorCode', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', example='This object does not exist.'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0be3e0b716671885050924814e3623'),
}

model ListTunnelQuotaTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTunnelQuotaTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTunnelQuotaTimer  ListTunnelQuotaTimerRequest
  * @return ListTunnelQuotaTimerResponse
 */
async function listTunnelQuotaTimer(request: ListTunnelQuotaTimerRequest): ListTunnelQuotaTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTunnelQuotaTimer', 'GET', '/api/v1/tunnel/{nickname}/timers', 'json', false, 'json', request);
}

model ListUsersRequest {
  pageNumber?: int32(name='pageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='The number of entries to return on each page.', example='10', position='Query'),
}

model ListUsersResponseBody = {
  data?: {
    pageNumber?: int32(name='pageNumber', description='The page number of the returned page.', example='2'),
    pageSize?: int32(name='pageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='totalCount', description='The total number of returned entries.', example='64'),
    users?: [ 
      {
        accountId?: string(name='accountId', description='The ID of the Alibaba Cloud account.', example='167835629082'),
        accountName?: string(name='accountName', description='The username of the account.', example='Bob@'),
        accountType?: string(name='accountType', description='The type of the account.', example='ALIYUN'),
        displayName?: string(name='displayName', description='The display name.', example='Bob'),
        tenantId?: string(name='tenantId', description='The ID of the tenant.', example='1567253789'),
      }
    ](name='users', description='The users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dd4816687424611405643e3730'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsers', 'GET', '/api/v1/users', 'json', false, 'json', request);
}

model ListUsersByRoleRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  roleName: string(name='roleName', description='The name of the role.

This parameter is required.', example='roleA', position='Path'),
}

model ListUsersByRoleResponseBody = {
  data?: {
    users?: [ 
      {
        name?: string(name='name', description='The name of the user.', example='ALIYUN${account_name}'),
      }
    ](name='users', description='The users.'),
  }(name='data', description='The returned data.'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0be3e0bb16654558425251398e27a9'),
}

model ListUsersByRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersByRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsersByRole  ListUsersByRoleRequest
  * @return ListUsersByRoleResponse
 */
async function listUsersByRole(request: ListUsersByRoleRequest): ListUsersByRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUsersByRole', 'GET', '/api/v1/projects/{projectName}/roles/{roleName}/users', 'json', false, 'json', request);
}

model QueryQuotaRequest {
  nickname: string(name='nickname', description='This parameter is required.', position='Path'),
  akProven?: string(name='AkProven', example='null', position='Query'),
  mock?: boolean(name='mock', example='false', position='Query'),
  region?: string(name='region', example='cn-chengdu', position='Query'),
  tenantId?: string(name='tenantId', example='483212237127906', position='Query'),
}

model QueryQuotaResponseBody = {
  data?: {
    billingPolicy?: {
      billingMethod?: string(name='billingMethod', example='subscription'),
      instanceId?: string(name='instanceId', example='880c0d0d-5d79-4217-b683-8e8bdd2a2523'),
      odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
      orderId?: string(name='orderId', example='880c0d0d-5d79-4217-b683-8e8bdd2a2523'),
    }(name='billingPolicy'),
    cluster?: string(name='cluster', example='AT-120N'),
    createTime?: long(name='createTime', example='1714356241163'),
    creatorId?: string(name='creatorId', example='1248953767546358'),
    groupName?: string(name='groupName', example='abc'),
    id?: string(name='id', description='quota ID', example='2523'),
    name?: string(name='name', example='quota_a'),
    nickName?: string(name='nickName', example='quota_nickname'),
    parameter?: map[string]any(name='parameter', example='{"minCU":10,	
"adhocCU":0,
"maxCU":10,
"schedulerType":"Fair",
}'),
    parentId?: string(name='parentId', example='null'),
    regionId?: string(name='regionId', example='cn-beijing'),
    saleTag?: {
      resourceIds?: [ string ](name='resourceIds'),
      resourceType?: string(name='resourceType', example='project'),
    }(name='saleTag'),
    scheduleInfo?: {
      currPlan?: string(name='currPlan', example='planA'),
      currTime?: string(name='currTime', example='0800'),
      nextPlan?: string(name='nextPlan', example='planB'),
      nextTime?: string(name='nextTime', example='1700'),
      oncePlan?: string(name='oncePlan', example='planC'),
      onceTime?: string(name='onceTime', example='1500'),
      operatorName?: string(name='operatorName', example='userA'),
      timezone?: string(name='timezone', example='UTC+8'),
    }(name='scheduleInfo'),
    status?: string(name='status', example='ON'),
    subQuotaInfoList?: [ 
      {
        billingPolicy?: {
          billingMethod?: string(name='billingMethod', example='subscription'),
          instanceId?: string(name='instanceId', example='880c0d0d-5d79-4217-b683-8e8bdd2a2523'),
          odpsSpecCode?: string(name='odpsSpecCode', example='OdpsStandard'),
          orderId?: string(name='orderId', example='880c0d0d-5d79-4217-b683-8e8bdd2a2523'),
        }(name='billingPolicy'),
        cluster?: string(name='cluster', example='AT-120N'),
        createTime?: long(name='createTime', example='1688653978768'),
        creatorId?: string(name='creatorId', example='672863518'),
        groupName?: string(name='groupName', example='abc'),
        id?: string(name='id', example='1000048'),
        name?: string(name='name', example='subquotaA'),
        nickName?: string(name='nickName', example='subquotaA'),
        parameter?: map[string]any(name='parameter', example='{\\"maxCU\\": 10, \\"minCU\\": 10, \\"adhocCU\\": 0, \\"schedulerType\\": \\"Fifo\\"}'),
        parentId?: string(name='parentId', example='0'),
        regionId?: string(name='regionId', example='cn-beijing'),
        saleTag?: {
          resourceIds?: [ string ](name='resourceIds'),
          resourceType?: string(name='resourceType', example='"quota"'),
        }(name='saleTag'),
        scheduleInfo?: {
          currPlan?: string(name='currPlan', example='planA'),
          currTime?: string(name='currTime', example='0800'),
          nextPlan?: string(name='nextPlan', example='planB'),
          nextTime?: string(name='nextTime', example='1700'),
          oncePlan?: string(name='oncePlan', example='planC'),
          onceTime?: string(name='onceTime', example='1500'),
          operatorName?: string(name='operatorName', example='userA'),
          timezone?: string(name='timezone', example='UTC+8'),
        }(name='scheduleInfo'),
        status?: string(name='status', example='ON'),
        tag?: string(name='tag', example='abc'),
        tenantId?: string(name='tenantId', example='478403690625249'),
        type?: string(name='type', example='FUXI_ONLINE'),
        version?: string(name='version', example='1'),
      }
    ](name='subQuotaInfoList'),
    tag?: string(name='tag', example='abc'),
    tenantId?: string(name='tenantId', example='478403690625249'),
    type?: string(name='type', example='FUXI_OFFLINE'),
    version?: string(name='version', example='1'),
  }(name='data'),
  errorCode?: string(name='errorCode', example='success'),
  errorMsg?: string(name='errorMsg'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0bc1eeed16675342848904412e08dd'),
}

model QueryQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryQuota  QueryQuotaRequest
  * @return QueryQuotaResponse
 */
async function queryQuota(request: QueryQuotaRequest): QueryQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryQuota', 'GET', '/api/v1/quotas/{nickname}/query', 'json', false, 'json', request);
}

model RetryMmsJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  jobId: long(name='jobId', description='This parameter is required.', example='78', position='Path'),
}

model RetryMmsJobResponseBody = {
  data?: long(name='data', example='78'),
  requestId?: string(name='requestId', example='7F5DAD1C-9EC2-5FE5-97CF-BCE21B4ABA29'),
}

model RetryMmsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetryMmsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RetryMmsJob  RetryMmsJobRequest
  * @return RetryMmsJobResponse
 */
async function retryMmsJob(request: RetryMmsJobRequest): RetryMmsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetryMmsJob', 'POST', '/api/v1/mms/datasources/{sourceId}/jobs/{jobId}/retry', 'json', false, 'json', request);
}

model StartMmsJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  jobId: long(name='jobId', description='This parameter is required.', example='88', position='Path'),
}

model StartMmsJobResponseBody = {
  data?: long(name='data', example='88'),
  requestId?: string(name='requestId', example='5CA6292A-E301-5CD8-B4E2-AF060F99147B'),
}

model StartMmsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartMmsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartMmsJob  StartMmsJobRequest
  * @return StartMmsJobResponse
 */
async function startMmsJob(request: StartMmsJobRequest): StartMmsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartMmsJob', 'POST', '/api/v1/mms/datasources/{sourceId}/jobs/{jobId}/start', 'json', false, 'json', request);
}

model StopMmsJobRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', example='2000015', position='Path'),
  jobId: long(name='jobId', description='This parameter is required.', example='88', position='Path'),
}

model StopMmsJobResponseBody = {
  data?: long(name='data', example='88'),
  requestId?: string(name='requestId', example='8023D058-62B7-5C49-8EB6-AD9BA7942BC5'),
}

model StopMmsJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopMmsJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopMmsJob  StopMmsJobRequest
  * @return StopMmsJobResponse
 */
async function stopMmsJob(request: StopMmsJobRequest): StopMmsJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopMmsJob', 'POST', '/api/v1/mms/datasources/{sourceId}/jobs/{jobId}/stop', 'json', false, 'json', request);
}

model UpdateComputeQuotaPlanRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  name: string(name='name', description='The name of quota plan.

This parameter is required.', example='planA', position='Body'),
  quota?: {
    parameter?: {
      elasticReservedCU: long(name='elasticReservedCU', description='The value of elastic Reserved CUs in the level-1 quota.
> The default value is 0. The maximum value of this parameter must be equal to the number of subscription-based reserved CUs and cannot exceed 10,000 CUs.

This parameter is required.', example='50'),
    }(name='parameter', description='The parameters of level-1 quota.'),
    subQuotaInfoList?: [ 
      {
        nickName: string(name='nickName', description='The nickname of the level-2 quota.

This parameter is required.', example='os_ComputeQuota'),
        parameter?: {
          elasticReservedCU: long(name='elasticReservedCU', description='The value of elastic Reserved CUs.
> The total number of elastically reserved CUs in all the level-2 quotas is equal to the number of elastically reserved CUs in the level-1 quota.

This parameter is required.', example='50'),
          maxCU: long(name='maxCU', description='The value of maxCU in Reserved CUs.
> The value of maxCU must be less than or equal to the value of maxCU in the level-1 quota that you purchased.

This parameter is required.', example='50'),
          minCU: long(name='minCU', description='The value of minCU in Reserved CUs.
> 
>- The total value of minCU in all the level-2 quotas is equal to the value of minCU in the level-1 quota.
>- The value of minCU must be less than or equal to the value of maxCU in the level-2 quota and less than or equal to the value of minCU in the level-1 quota that you purchased.

This parameter is required.', example='50'),
        }(name='parameter', description='The parameters of the level-2 quota.'),
      }
    ](name='subQuotaInfoList', description='The list of level-2 quotas.'),
  }(name='quota', description='The parameters of quota plan.', position='Body'),
}

model UpdateComputeQuotaPlanResponseBody = {
  data?: string(name='data', description='The data returned.', example='success'),
  errorCode?: string(name='errorCode', description='The error code.', example='QUOTA_PLAN_NOT_FOUND'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='plan \\"***\\" does not exist'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0be3e0aa16667684362147582e038f'),
}

model UpdateComputeQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateComputeQuotaPlanResponseBody(name='body'),
}

/**
  * @description Please ensure that before using this interface, you have fully understood the <props="china">[Pricing and Charges](https://help.aliyun.com/zh/maxcompute/product-overview/computing-pricing-1)
  * <props="intl">[Pricing and Charges](https://www.alibabacloud.com/help/maxcompute/product-overview/computing-pricing-1) of MaxCompute Elastic Reserved CU.
  * @param request  the request parameters of UpdateComputeQuotaPlan  UpdateComputeQuotaPlanRequest
  * @return UpdateComputeQuotaPlanResponse
 */
async function updateComputeQuotaPlan(request: UpdateComputeQuotaPlanRequest): UpdateComputeQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateComputeQuotaPlan', 'PUT', '/api/v1/quotas/{nickname}/computeQuotaPlan', 'json', false, 'json', request);
}

model UpdateComputeQuotaScheduleRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  body?: [ 
    {
      condition?: {
        at: string(name='at', description='The start time when the quota plan takes effect.

This parameter is required.', example='10:00'),
      }(name='condition', description='The value of effective condition.'),
      plan: string(name='plan', description='The name of the quota plan.

This parameter is required.', example='planA'),
      timezone?: string(name='timezone', description='Time zone.

> Default Key: UTC+8', example='UTC+8'),
      type: string(name='type', description='The type of the quota plan.

>Notice: Currently, only daily is supported.</notice>

This parameter is required.', example='daily'),
    }
  ](name='body', description='The request body parameters.', position='Body'),
}

model UpdateComputeQuotaScheduleResponseBody = {
  data?: string(name='data', description='The data returned.', example='success'),
  errorCode?: string(name='errorCode', description='The error code.', example='QUOTA_PLAN_NOT_FOUND'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='plan \\"***\\" does not exist'),
  httpCode?: int32(name='httpCode', description='HTTP status code.
- 1xx: Informational - The request has been received and is being processed.
- 2xx: Success - The request action was successfully received, understood, and accepted by the server.
- 3xx: Redirection - Further action must be taken to complete the request.
- 4xx: Client Error - The request contains an error in the request parameters, syntax, or specific request conditions cannot be met.
- 5xx: Server Error - The server could not fulfill the request due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0be3e0aa16667684362147582e038f'),
}

model UpdateComputeQuotaScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateComputeQuotaScheduleResponseBody(name='body'),
}

/**
  * @description Please ensure that before using this interface, you have fully understood the<props="china">[Pricing and Billing](https://help.aliyun.com/zh/maxcompute/product-overview/computing-pricing-1)
  * <props="intl">[Pricing and Billing](https://www.alibabacloud.com/help/maxcompute/product-overview/computing-pricing-1) of MaxCompute Elastic Reserved CU.
  * @param request  the request parameters of UpdateComputeQuotaSchedule  UpdateComputeQuotaScheduleRequest
  * @return UpdateComputeQuotaScheduleResponse
 */
async function updateComputeQuotaSchedule(request: UpdateComputeQuotaScheduleRequest): UpdateComputeQuotaScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateComputeQuotaSchedule', 'PUT', '/api/v1/quotas/{nickname}/computeQuotaSchedule', 'json', false, 'json', request);
}

model UpdateComputeSubQuotaRequest {
  nickname: string(name='nickname', description='The nickname of level-1 compute quota.

This parameter is required.', example='os_ComputeQuota_p', position='Path'),
  subQuotaInfoList?: [ 
    {
      nickName: string(name='nickName', description='The nickname of the level-2 quota.

This parameter is required.', example='os_ComputeQuota'),
      parameter?: {
        enablePriority?: boolean(name='enablePriority', description='Specifies whether to enable the priority feature.', example='false'),
        forceReservedMin?: boolean(name='forceReservedMin', description='Specifies whether the quota is strongly exclusive.', example='false'),
        maxCU: long(name='maxCU', description='The value of minCU in Reserved CUs.
> The value of maxCU must be less than or equal to the value of maxCU in the level-1 quota that you purchased.

This parameter is required.', example='50'),
        minCU: long(name='minCU', description='The value of maxCU in Reserved CUs.
> 
>- The total value of minCU in all the level-2 quotas is equal to the value of minCU in the level-1 quota.
>- The value of minCU must be less than or equal to the value of maxCU in the level-2 quota and less than or equal to the value of minCU in the level-1 quota that you purchased.

This parameter is required.', example='50'),
        schedulerType?: string(name='schedulerType', description='Scheduling policy of the quota.', example='Fifo/Fair'),
        singleJobCULimit?: long(name='singleJobCULimit', description='The upper limit for CUs that can be concurrently used by a job scheduled to the quota.', example='10'),
      }(name='parameter', description='The parameters of the level-2 quota.'),
      type?: string(name='type', description='The type of quota.

> 
> - FUXI_OFFLINE(default) : Quotas of this type are used to run batch jobs.', example='FUXI_OFFLINE'),
    }
  ](name='subQuotaInfoList', description='The list of level-2 quotas.', position='Body'),
}

model UpdateComputeSubQuotaResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  errorCode?: string(name='errorCode', description='The error code.', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='this quota is not exist.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.
- 4xx: client error. The request contains invalid request parameters or syntaxes, or specific request conditions cannot be met.
- 5xx: server error. The server cannot meet requirements due to other reasons.', example='200'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0b57ff7616612271051086500ea3ce'),
}

model UpdateComputeSubQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateComputeSubQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateComputeSubQuota  UpdateComputeSubQuotaRequest
  * @return UpdateComputeSubQuotaResponse
 */
async function updateComputeSubQuota(request: UpdateComputeSubQuotaRequest): UpdateComputeSubQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateComputeSubQuota', 'PUT', '/api/v1/quotas/{nickname}/computeSubQuota', 'json', false, 'json', request);
}

model UpdateMmsDataSourceRequest {
  sourceId: long(name='sourceId', description='This parameter is required.', position='Path'),
  action?: string(name='action', position='Body'),
  config?: map[string]any(name='config', position='Body'),
  name?: string(name='name', position='Body'),
  test?: boolean(name='test', position='Body'),
}

model UpdateMmsDataSourceResponseBody = {
  data?: {
    asyncTaskId?: long(name='asyncTaskId'),
    sourceId?: long(name='sourceId'),
  }(name='data'),
  requestId?: string(name='requestId', example='76CE80C8-7392-5591-BCC8-610AFBF78ADF'),
}

model UpdateMmsDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMmsDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMmsDataSource  UpdateMmsDataSourceRequest
  * @return UpdateMmsDataSourceResponse
 */
async function updateMmsDataSource(request: UpdateMmsDataSourceRequest): UpdateMmsDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMmsDataSource', 'PUT', '/api/v1/mms/datasources/{sourceId}', 'json', false, 'json', request);
}

model UpdatePackageRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='projectA', position='Path'),
  packageName: string(name='packageName', description='The name of the package.

This parameter is required.', example='packageA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{
    "add": {
        "allowedProjectList": [
            {
                "label": "2",
                "project": "project_name"
            }
        ],
        "resourceList": {
            "table": [
                {
                    "name": "table_name",
                    "actions": [
                        "Describe",
                        "Select"
                    ]
                },
                {
                    "name": "table_name",
                    "actions": [
                        "Describe",
                        "Select"
                    ]
                }
            ],
            "resource": [
                {
                    "name": "",
                    "actions": []
                },
                {
                    "name": "",
                    "actions": []
                }
            ],
            "function": [
                {
                    "name": "",
                    "actions": []
                },
                {
                    "name": "",
                    "actions": []
                }
            ]
        }
    },
    "remove": {
        "allowedProjectList": [
            {
                "project": "project_name"
            },
            {
                "project": "project_2"
            }
        ],
        "resourceList": {
            "table": [
                {
                    "name": "table_name"
                },
                {
                    "name": "table_name"
                }
            ],
            "resource": [
                {
                    "name": ""
                },
                {
                    "name": ""
                }
            ],
            "function": [
                {
                    "name": ""
                },
                {
                    "name": ""
                }
            ]
        }
    }
}', position='Body'),
}

model UpdatePackageResponseBody = {
  data?: string(name='data', description='The returned data.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc1ec4016697018733156991e0888'),
}

model UpdatePackageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePackageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePackage  UpdatePackageRequest
  * @return UpdatePackageResponse
 */
async function updatePackage(request: UpdatePackageRequest): UpdatePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePackage', 'PUT', '/api/v1/projects/{projectName}/packages/{packageName}', 'json', false, 'json', request);
}

model UpdateProjectBasicMetaRequest {
  projectName: string(name='projectName', description='Project name.

This parameter is required.', example='odps_project', position='Path'),
  comment?: string(name='comment', description='The project description.', example='BI_Analysis', position='Body'),
  properties?: {
    allowFullScan?: boolean(name='allowFullScan', description='Indicates whether a full table scan is allowed in the project. A full table scan occupies a large number of resources, which reduces data processing efficiency. By default, the full table scan feature is disabled.', example='false'),
    enableDecimal2?: boolean(name='enableDecimal2', description='Indicates whether the DECIMAL type of the MaxCompute V2.0 data type edition is enabled.', example='true'),
    enableTunnelQuotaRoute?: boolean(name='enableTunnelQuotaRoute', description='Indicates whether the routing of the Tunnel resource group is enabled.

- true: The data transfer tasks that are submitted by the project by default use the Tunnel resource group that is bound to the project.
- false: The data transfer tasks that are submitted by the project by default use the Tunnel shared resource group.', example='true'),
    encryption?: {
      algorithm?: string(name='algorithm', description='The data encryption algorithm that is supported by the key. Valid values: AES256, AESCTR, and RC4.', example='AES256'),
      enable?: boolean(name='enable', description='Indicates whether the data encryption feature needs to be enabled for the project. For more information about data encryption, see
<props="china">[Storage Encryption](https://help.aliyun.com/zh/maxcompute/security-and-compliance/storage-encryption)
<props="intl">[Storage Encryption](https://www.alibabacloud.com/help/zh/maxcompute/security-and-compliance/storage-encryption).', example='true'),
      key?: string(name='key', description='The type of key that is used for data encryption. You can select MaxCompute Default Key or Bring Your Own Key (BYOK) as the key type. If you select MaxCompute Default Key, the default key that is created by MaxCompute is used.', example='default'),
    }(name='encryption', description='The storage encryption properties.'),
    retentionDays?: long(name='retentionDays', description='The retention period for backup data. Unit: days. During the retention period, you can restore data of the version in use to the backup data of any version. Valid values: [0,30]. Default value: 1. The value 0 indicates that the backup feature is disabled.', example='1'),
    sqlMeteringMax?: string(name='sqlMeteringMax', description='The maximum consumption threshold of a single SQL statement. Formula: Amount of scanned data (GB) × Complexity.', example='1500'),
    tableLifecycle?: {
      type?: string(name='type', description='The lifecycle type. Valid values:
- *mandatory*: The lifecycle clause is required in a table creation statement.
- *optional*: The lifecycle clause is optional in a table creation statement. If you do not configure a lifecycle for a table, the table does not expire.
- *inherit*: If you do not configure a lifecycle for a table when you create the table, the value of the odps.table.lifecycle.value parameter is used as the table lifecycle by default.', example='optional'),
      value?: string(name='value', description='The table lifecycle. Unit: days. Valid values: 1 to 37231. Default value: 37231.', example='37231'),
    }(name='tableLifecycle', description='The table lifecycle properties.'),
    timezone?: string(name='timezone', description='The time zone that is used by your project. The time zone is the same as the time zone specified by `odps.sql.timezone` .', example='Asia/Shanghai'),
    tunnelQuota?: string(name='tunnelQuota', description='The <props="china">[Data Transmission Service](https://help.aliyun.com/zh/maxcompute/user-guide/overview-of-dts)
<props="intl">[Data Transmission Service](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/overview-of-dts) resource group that is bound to the project.

- Default resource group: The Tunnel shared resource group is used. You cannot use the subscription-based Tunnel resource group for the project. The default resource group is automatically used by the Tunnel service of your project, regardless of the parameter setting.
- Subscription-based Tunnel resource group: You can use the subscription-based Tunnel resource group for the project.', example='Default'),
    typeSystem?: string(name='typeSystem', description='The data type edition. Valid values:

- *1*: MaxCompute V1.0 data type edition
- *2*: MaxCompute V2.0 data type edition
- *hive*: Hive-compatible data type edition
For more information about the differences among the three data type editions, see <props="china">[Data Type Versions](https://help.aliyun.com/zh/maxcompute/user-guide/data-type-editions)
<props="intl">[Data Type Versions](https://www.alibabacloud.com/help/zh/maxcompute/user-guide/data-type-editions).', example='2.0'),
  }(name='properties', description='The basic properties of the project.', position='Body'),
}

model UpdateProjectBasicMetaResponseBody = {
  data?: string(name='data', description='The data returned.', example='success'),
  errorCode?: string(name='errorCode', description='The error code.', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', description='The error message.', example='This object does not exist.'),
  httpCode?: int32(name='httpCode', description='The HTTP status code.

- 1xx: informational response. The request is received and is being processed.
- 2xx: success. The request is successfully received, understood, and accepted by the server.
- 3xx: redirection. The request is redirected, and further actions are required to complete the request.', example='200'),
  requestId?: string(name='requestId', description='The request ID.', example='0b87b7e216652820458545253e8b0a'),
}

model UpdateProjectBasicMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectBasicMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProjectBasicMeta  UpdateProjectBasicMetaRequest
  * @return UpdateProjectBasicMetaResponse
 */
async function updateProjectBasicMeta(request: UpdateProjectBasicMetaRequest): UpdateProjectBasicMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProjectBasicMeta', 'PUT', '/api/v1/projects/{projectName}/meta', 'json', false, 'json', request);
}

model UpdateProjectDefaultQuotaRequest {
  projectName: string(name='projectName', description='Project name.

This parameter is required.', example='odps_project', position='Path'),
  quota?: string(name='quota', description='The default computing quota that is used to allocate computing resources, the jobs that are initiated by this project consume the computing resources in the default quota.', example='os_PayAsYouGoQuota', position='Body'),
}

model UpdateProjectDefaultQuotaResponseBody = {
  data?: string(name='data', description='The data returned.', example='success'),
  requestId?: string(name='requestId', description='The request ID.', example='0a06dfe716674588654372173ec0da'),
}

model UpdateProjectDefaultQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectDefaultQuotaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProjectDefaultQuota  UpdateProjectDefaultQuotaRequest
  * @return UpdateProjectDefaultQuotaResponse
 */
async function updateProjectDefaultQuota(request: UpdateProjectDefaultQuotaRequest): UpdateProjectDefaultQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProjectDefaultQuota', 'PUT', '/api/v1/projects/{projectName}/quota', 'json', false, 'json', request);
}

model UpdateProjectIpWhiteListRequest {
  projectName: string(name='projectName', description='The name of the MaxCompute project.

This parameter is required.', example='odps_project', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='json {"ipWhiteList":{"ipList": "", // The IP address whitelists are of the STRING data type. Separate multiple IP address whitelists with commas (,). "vpcIpList": "", //} }', position='Body'),
}

model UpdateProjectIpWhiteListResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0bc12e4316675560945192024e1044'),
}

model UpdateProjectIpWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectIpWhiteListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProjectIpWhiteList  UpdateProjectIpWhiteListRequest
  * @return UpdateProjectIpWhiteListResponse
 */
async function updateProjectIpWhiteList(request: UpdateProjectIpWhiteListRequest): UpdateProjectIpWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProjectIpWhiteList', 'PUT', '/api/v1/projects/{projectName}/ipWhiteList', 'json', false, 'json', request);
}

model UpdateQuotaPlanRequest {
  nickname: string(name='nickname', description='The name of the quota.

This parameter is required.', example='quotaA', position='Path'),
  planName: string(name='planName', description='The name of the quota plan.

This parameter is required.', example='planA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='{ "name": "planA", // The quota is a level-1 quota. You can select only the fields that are related to the quota plan. "quota": { "name": "a", "nickName": "aaa_nick", "tenantId": "10001", "regionId": "cn-hangzhou", "parentId": "0", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false }, "subQuotaInfoList": [ { "nickName": "WlmFuxiSecondaryOnlineQuotaTest", "name": "WlmFuxiSecondaryOnlineQuotaTest", "type": "FUXI_ONLINE", "tenantId": "10001", "regionId": "cn-hangzhou", "cluster": "AT-ODPS-TEST3", "parameter": { "minCU": 40, "maxCU": 40, "adhocCU": 0, "elasticMinCU": 40, "elasticMaxCU": 40, "enablePreemptiveScheduling": false, "forceReservedMin":true, "enablePriority":false, "singleJobCULimit":100, "adhocQuotaBeginTimeInSec": 1345, "adhocQuotaEndTimeInSec": 1234, "ignoreAdhocQuota":false } } ] } }', position='Body'),
  region?: string(name='region', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model UpdateQuotaPlanResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe516688379832875789e2c65'),
}

model UpdateQuotaPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQuotaPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateQuotaPlan  UpdateQuotaPlanRequest
  * @return UpdateQuotaPlanResponse
 */
async function updateQuotaPlan(request: UpdateQuotaPlanRequest): UpdateQuotaPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateQuotaPlan', 'PUT', '/api/v1/quotas/{nickname}/plans/{planName}', 'json', false, 'json', request);
}

model UpdateQuotaScheduleRequest {
  nickname: string(name='nickname', description='The name of the quota.

This parameter is required.', example='quotaA', position='Path'),
  body?: string(name='body', description='The request body parameters.', example='\\# The quota plan immediately takes effect. [ { "type": "once", "plan": "planA", "operator":"userA" } ] # The quota plan is scheduled on a regular basis. [ { "id": "etl_time", "type": "daily", "condition": { "at": "0800", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planA" }, { "id": "bi", "type": "daily", "condition": { "at": "0900", "after": "2022-04-25T04:23:04Z" // optional }, "plan": "planB" }, ]', position='Body'),
  region?: string(name='region', description='The ID of the region.', example='cn-chengdu', position='Query'),
  tenantId?: string(name='tenantId', description='The ID of the tenant.', example='478403690625249', position='Query'),
}

model UpdateQuotaScheduleResponseBody = {
  data?: string(name='data', description='The returned result.', example='success'),
  requestId?: string(name='requestId', description='The ID of the request.', example='0a06dfe516691014920015940e1c9d'),
}

model UpdateQuotaScheduleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQuotaScheduleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateQuotaSchedule  UpdateQuotaScheduleRequest
  * @return UpdateQuotaScheduleResponse
 */
async function updateQuotaSchedule(request: UpdateQuotaScheduleRequest): UpdateQuotaScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateQuotaSchedule', 'PUT', '/api/v1/quotas/{nickname}/schedule', 'json', false, 'json', request);
}

model UpdateTunnelQuotaTimerRequest {
  nickname: string(name='nickname', description='This parameter is required.', example='ot_tunnel_quota_p', position='Path'),
  body?: [ 
    {
      beginTime?: string(name='beginTime', example='00:00'),
      endTime?: string(name='endTime', example='08:00'),
      timezone?: string(name='timezone', example='Asia/Shanghai'),
      tunnelQuotaParameter?: {
        elasticReservedSlotNum?: long(name='elasticReservedSlotNum', example='100'),
        slotNum?: long(name='slotNum', example='100'),
      }(name='tunnelQuotaParameter'),
    }
  ](name='body', position='Body'),
}

model UpdateTunnelQuotaTimerResponseBody = {
  data?: string(name='data', example='success'),
  errorCode?: string(name='errorCode', example='OBJECT_NOT_EXIST'),
  errorMsg?: string(name='errorMsg', example='This object does not exist.'),
  httpCode?: int32(name='httpCode', example='200'),
  requestId?: string(name='requestId', example='0bc12e4316675560945192024e1044'),
}

model UpdateTunnelQuotaTimerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTunnelQuotaTimerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTunnelQuotaTimer  UpdateTunnelQuotaTimerRequest
  * @return UpdateTunnelQuotaTimerResponse
 */
async function updateTunnelQuotaTimer(request: UpdateTunnelQuotaTimerRequest): UpdateTunnelQuotaTimerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTunnelQuotaTimer', 'PUT', '/api/v1/tunnel/{nickname}/timers', 'json', false, 'json', request);
}

