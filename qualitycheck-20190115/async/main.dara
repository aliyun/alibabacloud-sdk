/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Qualitycheck';
  @version = '2019-01-15';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BusinessCategoryBasicInfo {
  bid?: int32(name='Bid', description='业务ID'),
  name?: string(name='Name', description='业务名称'),
  originalId?: long(name='OriginalId', description='originalId'),
  serviceType?: int32(name='ServiceType', description='服务类型(ServiceCategory)'),
}

model ConditionBasicInfo {
  checkRange?: {
    absolute?: boolean(name='Absolute', description='false: 相对位置; 会结合anchor以及角色来决定句子位置'),
    allSentencesSatisfy?: boolean(name='AllSentencesSatisfy', description='true: 每句话都必须满足条件；'),
    anchor?: {
      cid?: string(name='Cid', description='条件ID'),
      hitTime?: int32(name='Hit_time', description='命中次数'),
      location?: string(name='Location', description='位置'),
    }(name='Anchor', description='前置后置条件'),
    range?: {
      from?: int32(name='From', description='对话开始索引'),
      to?: int32(name='To', description='对话结束索引'),
    }(name='Range', description='相对范围'),
    role?: string(name='Role', description='对应 RoleType.type'),
    roleId?: int32(name='RoleId', description='对应 RoleType.id'),
  }(name='Check_range', description='检测范围'),
  cid?: string(name='Cid', description='条件id，可能是db中的主键，也可能是转换成的a, b, c'),
  exclusion?: int32(name='Exclusion', description='排除'),
  id?: long(name='Id', description='在db中的主键'),
  lambda?: string(name='Lambda', description='Lambda表达式：例如:a&&b'),
  name?: string(name='Name', description='条件名'),
  operators?: [
    OperatorBasicInfo
  ](name='Operators', description='算子列表'),
  rid?: string(name='Rid', description='条件所属的规则id'),
  userGroup?: string(name='UserGroup', description='用户组'),
}

model GraphFlowNode {
  conditions?: [
    ConditionBasicInfo
  ](name='Conditions', description='算子信息'),
  content?: string(name='Content', description='前端展示使用'),
  id?: long(name='Id', description='节点id'),
  index?: int32(name='Index', description='index'),
  name?: string(name='Name', description='节点名字'),
  nextNodes?: [ 
    {
      checkType?: int32(name='CheckType', description='质检维度'),
      index?: int32(name='Index', description='流程分支优先级。越小优先级越高'),
      lambda?: string(name='Lambda', description='通往下一跳的Lambda表达式'),
      name?: string(name='Name', description='条件分支名'),
      nextNodeId?: long(name='NextNodeId', description='后续节点ID'),
      triggers?: [ string ](name='Triggers', description='关注的算子'),
    }
  ](name='NextNodes', description='子节点'),
  nodeType?: string(name='NodeType', description='节点类型'),
  properties?: {
    autoReview?: int32(name='AutoReview', description='1 "不自动审核"'),
    branchJudge?: boolean(name='BranchJudge', description='是否开启分支判断'),
    checkMoreSize?: int32(name='CheckMoreSize', description='最多检测N句'),
    checkType?: int32(name='CheckType', description='质检维度'),
    lambda?: string(name='Lambda', description='普通算子逻辑'),
    role?: string(name='Role', description='single类型时，角色'),
    ruleScoreType?: int32(name='RuleScoreType', description='是否计分'),
    sayType?: string(name='SayType', description='single类型时，是否表达'),
    scoreNum?: int32(name='ScoreNum', description='计分值'),
    scoreNumType?: int32(name='ScoreNumType', description='0-触发规则后加减分;1-触发规则后一次性得分'),
    scoreRuleHitType?: int32(name='ScoreRuleHitType', description='0-命中节点时计分'),
    scoreType?: int32(name='ScoreType', description='1加分 3减分 默认1'),
    triggers?: [ string ](name='Triggers', description='关注的算子'),
    type?: string(name='Type', description='属性类型'),
  }(name='Properties', description='节点属性'),
  rid?: long(name='Rid', description='规则ID，当规则没有落库时 rid为空。当规则落库时 rid == id'),
  useConditions?: boolean(name='UseConditions', description='是否使用 算子匹配还是使用老板的匹配'),
}

model JudgeNodeMetaDesc {
  actualValue?: string(name='ActualValue', description='实际值'),
  dataType?: int32(name='DataType', description='数据类型'),
  field?: string(name='Field', description='系统字段'),
  fieldType?: int32(name='FieldType', description='字段数据来源类型：1：系统预定义字段 2：传参质检字段'),
  symbol?: int32(name='Symbol', description='逻辑表达式'),
  value?: string(name='Value', description='预设值的值'),
}

model NextNodeSituations {
  conditionGroup?: [ 
    {
      conditions?: [
        JudgeNodeMetaDesc
      ](name='Conditions', description='匹配条件集合'),
      type?: string(name='Type', description='条件之间的匹配关系'),
    }
  ](name='ConditionGroup', description='判断条件'),
  type?: string(name='Type', description='条件之间的匹配关系 目前都是or的关系'),
}

model OperatorBasicInfo {
  id?: long(name='Id', description='主键id'),
  name?: string(name='Name', description='算子名'),
  oid?: string(name='Oid', description='可能是主键id，也可能是前端生成的id'),
  param?: {
    answerThreshold?: string(name='AnswerThreshold', description='答案命中阈值'),
    antModelInfo?: map[string]string(name='AntModelInfo', description='蚂蚁模型信息'),
    average?: boolean(name='Average', description='语速检测，是否计算整个对话平均语速，默认false'),
    beginType?: string(name='BeginType', description='时长算子，时长计算开始类型，录音开始，还是某句对话开始'),
    botId?: string(name='BotId', description='机器人id'),
    caseSensitive?: boolean(name='Case_sensitive', description='区分大小写'),
    categoryPathCode?: string(name='CategoryPathCode', description='知识类目路径'),
    checkFirstSentence?: boolean(name='CheckFirstSentence', description='静音检测：要不要检测第一句话'),
    checkType?: int32(name='CheckType', description='检测方式，1 相邻句能量波动 2 最大能量跨度 默认1'),
    compareOperator?: string(name='CompareOperator', description='大于，还是小于，gt/lt'),
    contextChatMatch?: boolean(name='ContextChatMatch', description='是否单句话匹配；'),
    customerParam?: JudgeNodeMetaDesc(name='CustomerParam', description='随录参数算子参数'),
    delayTime?: int32(name='DelayTime', description='抢话算子 延时时长'),
    differentRole?: boolean(name='Different_role', description='different_role'),
    endType?: string(name='EndType', description='时长算子，时长计算结束类型，录音结束，还是某句对话结束'),
    excludes?: [ string ](name='Excludes', description='上下文重复算子：排除掉某些对话'),
    from?: int32(name='From', description='上下文重复算子：检测当前句的前from句是否有重复；0表示前面的所有句'),
    fromEnd?: boolean(name='From_end', description='from_end'),
    hitTime?: int32(name='Hit_time', description='上下文重复算子：重复几次'),
    inSentence?: boolean(name='In_sentence', description='生效句子， true单个句子，false多个句子'),
    interval?: int32(name='Interval', description='interval代表区间范围开始'),
    intervalEnd?: int32(name='IntervalEnd', description='intervalEnd 代表区间范围结束'),
    keywordExtension?: int32(name='KeywordExtension', description='关键字扩展'),
    keywordMatchSize?: int32(name='KeywordMatchSize', description='匹配到的关键字数量'),
    keywords?: [ string ](name='Keywords', description='关键词'),
    knowledgeInfo?: string(name='KnowledgeInfo', description='知识信息'),
    knowledgeSentenceNum?: int32(name='KnowledgeSentenceNum', description='命中问题后几句内检测答案'),
    knowledgeTargetId?: string(name='KnowledgeTargetId', description='知识类目或者知识Id'),
    knowledgeTargetName?: string(name='KnowledgeTargetName', description='知识类目名字或知识名字'),
    knowledgeTargetType?: int32(name='KnowledgeTargetType', description='0-类目 1-知识'),
    lgfSentences?: [ string ](name='LgfSentences', description='lgf句子'),
    maxEmotionChangeValue?: int32(name='MaxEmotionChangeValue', description='能量值变化，默认3, 1~9'),
    minWordSize?: int32(name='MinWordSize', description='句子中最少字数，小于此字数的句子不检查'),
    nearDialogue?: boolean(name='Near_dialogue', description='true表示取不同角色相邻的两句话，false表示取不同角色的第一句话比较响应时间（默认）'),
    notRegex?: string(name='NotRegex', description='排除的正则表达式'),
    phrase?: string(name='Phrase', description='语句'),
    pkey?: string(name='Pkey', description='涉外属性需要的变量'),
    poutputType?: int32(name='Poutput_type', description='poutput类型'),
    questionThreshold?: string(name='QuestionThreshold', description='问题命中阈值'),
    references?: [ string ](name='References', description='references引用'),
    regex?: string(name='Regex', description='正则表达式'),
    roleId?: int32(name='RoleId', description='算子中使用角色，目前用于上下文重复算子，与target_role一起使用。'),
    score?: int32(name='Score', description='分数'),
    similarityThreshold?: double(name='Similarity_threshold', description='相似度阈值'),
    similarlySentences?: [ string ](name='SimilarlySentences', description='相识问'),
    synonyms?: map[string][ string ](name='Synonyms', description='同义词'),
    target?: int32(name='Target', description='target'),
    targetRole?: string(name='Target_role', description='target_role'),
    threshold?: float(name='Threshold', description='阈值'),
    useEasAlgorithm?: boolean(name='UseEasAlgorithm', description='使用eas算法'),
    velocity?: double(name='Velocity', description='速度'),
    velocityInMint?: int32(name='VelocityInMint', description='velocityInMint'),
  }(name='Param', description='算子参数'),
  qualityCheckType?: int32(name='QualityCheckType', description='质检类型：0 离线质检，1 实时质检'),
  type?: string(name='Type', description='算子类别'),
  userGroup?: string(name='UserGroup', description='用户组'),
}

model RuleCountInfo {
  autoReview?: int32(name='AutoReview', description='审核选项 1 不自动审核 3 自动审核'),
  businessCategoryBasicInfoList?: [
    BusinessCategoryBasicInfo
  ](name='BusinessCategoryBasicInfoList', description='业务类别基本信息列表'),
  businessCategoryNameList?: [ string ](name='BusinessCategoryNameList', description='业务类别名称列表'),
  businessRange?: [ int32 ](name='BusinessRange', description='业务范围'),
  checkNumber?: long(name='CheckNumber', description='检测会话数'),
  comments?: string(name='Comments', description='评论'),
  createEmpName?: string(name='CreateEmpName', description='创建人姓名'),
  createEmpid?: string(name='CreateEmpid', description='创建人工号'),
  createTime?: string(name='CreateTime', description='创建时间'),
  deny?: int32(name='Deny', description='1拒绝编辑规则，0/null可以编辑规则'),
  effective?: int32(name='Effective', description='是否生效：0否，1是'),
  effectiveEndTime?: string(name='EffectiveEndTime', description='生效结束时间'),
  effectiveStartTime?: string(name='EffectiveStartTime', description='生效开始时间'),
  endTime?: string(name='EndTime', description='结束时间'),
  fullCycle?: int32(name='FullCycle', description='是否为全生命周期生效，0否，1是'),
  graphFlow?: any(name='GraphFlow', description='流程画布'),
  hitNumber?: long(name='HitNumber', description='命中会话量'),
  hitRate?: float(name='HitRate', description='命中率'),
  hitRealViolationRate?: float(name='HitRealViolationRate', description='命中违规率'),
  isDelete?: int32(name='IsDelete', description='是否删除'),
  isSelect?: boolean(name='IsSelect', description='是否选择'),
  jobName?: string(name='JobName', description='定时任务名称'),
  lastUpdateEmpName?: string(name='LastUpdateEmpName', description='最后更新人姓名'),
  lastUpdateEmpid?: string(name='LastUpdateEmpid', description='最后更新人工号'),
  lastUpdateTime?: string(name='LastUpdateTime', description='最后更新时间'),
  name?: string(name='Name', description='规则名称'),
  operationMode?: int32(name='OperationMode', description='操作模式'),
  preReviewNumber?: long(name='PreReviewNumber', description='待复核数'),
  problemNumber?: long(name='ProblemNumber', description='发现问题数'),
  qualityCheckType?: int32(name='QualityCheckType', description='质检类型：0 离线质检，1 实时质检'),
  realViolationNumber?: int32(name='RealViolationNumber', description='复核后真实违规的数量'),
  reviewAccuracyRate?: float(name='ReviewAccuracyRate', description='复核准确率'),
  reviewNumber?: long(name='ReviewNumber', description='已复核数'),
  reviewRate?: float(name='ReviewRate', description='复核率'),
  reviewStatusName?: string(name='ReviewStatusName', description='审核状态名字'),
  rid?: long(name='Rid', description='规则ID'),
  ruleScoreSingleType?: int32(name='RuleScoreSingleType', description='-- 8-未设置评分'),
  ruleScoreType?: int32(name='RuleScoreType', description='是否计分 1不计分 3计分'),
  ruleType?: int32(name='RuleType', description='内置规则Or用户创建规则'),
  scoreSubId?: long(name='ScoreSubId', description='小项id'),
  startTime?: string(name='StartTime', description='开始时间'),
  status?: int32(name='Status', description='状态：待生效 / 生效中 / 已失效:  0 / 1 / 2'),
  targetType?: int32(name='TargetType', description='规则种类：10-普通规则，11-流程规则'),
  type?: int32(name='Type', description='规则类型'),
  typeName?: string(name='TypeName', description='类型名称'),
  unReviewNumber?: long(name='UnReviewNumber', description='未复核数量'),
  userGroup?: string(name='UserGroup', description='用户组'),
}

model RuleInfo {
  autoReview?: int32(name='AutoReview', description='审核选项 1 不自动审核 3 自动审核 //4.0 协议兼容使用'),
  businessCategoryNameList?: [ string ](name='BusinessCategoryNameList', description='业务名称列表'),
  checkType?: long(name='CheckType', description='0-服务规范性检测 1-服务态度检测 2-服务专业性检测 3-客户态度检测  4-服务流程正确性检测'),
  comments?: string(name='Comments', description='备注'),
  configType?: int32(name='ConfigType', description='配置类型：1：简单条件配置，2：高级配置，默认1 //4.0协议专用'),
  createEmpName?: string(name='CreateEmpName', description='创建人姓名'),
  createEmpid?: string(name='CreateEmpid', description='创建人工号'),
  createTime?: string(name='CreateTime', description='创建时间'),
  deny?: int32(name='Deny', description='1拒绝编辑规则，0/null可以编辑规则'),
  dialogues?: [
    RuleTestDialogue
  ](name='Dialogues', description='测试文案'),
  effective?: int32(name='Effective', description='是否生效：0否，1是'),
  effectiveEndTime?: string(name='EffectiveEndTime', description='生效结束时间'),
  effectiveStartTime?: string(name='EffectiveStartTime', description='生效开始时间'),
  endTime?: string(name='EndTime', description='结束时间'),
  externalProperty?: int32(name='ExternalProperty', description='外部属性'),
  fullCycle?: int32(name='FullCycle', description='是否为全生命周期生效，0否，1是'),
  graphFlow?: any(name='GraphFlow', description='图流程画布'),
  isDelete?: int32(name='IsDelete', description='是否已删除'),
  isOnline?: int32(name='IsOnline', description='是否在线'),
  lambda?: string(name='Lambda', description='形如a&&b的条件表达式'),
  lastUpdateEmpName?: string(name='LastUpdateEmpName', description='最后更新人姓名'),
  lastUpdateEmpid?: string(name='LastUpdateEmpid', description='最后更新人工号'),
  lastUpdateTime?: string(name='LastUpdateTime', description='最后更新时间'),
  level?: int32(name='Level', description='规则级别：0 重度违规 1 中度违规 2 轻度违规'),
  meet?: int32(name='Meet', description='是否满足'),
  modifyType?: int32(name='ModifyType', description='在质检方案中是否已修改'),
  name?: string(name='Name', description='规则名称'),
  operationMode?: int32(name='OperationMode', description='操作模式'),
  qualityCheckType?: int32(name='QualityCheckType', description='质检类型：0 离线质检，1 实时质检 //4.0逻辑兼容使用'),
  rid?: string(name='Rid', description='规则ID'),
  ruleCategoryName?: string(name='RuleCategoryName', description='规则类别名称'),
  ruleScoreType?: int32(name='RuleScoreType', description='是否计分 1不计分 3计分 //4.0 协议兼容使用'),
  ruleType?: int32(name='RuleType', description='0：默认；1：用户创建 //4.0逻辑兼容使用'),
  schemeCheckType?: SchemeCheckType(name='SchemeCheckType', description='质检维度对象'),
  schemeId?: long(name='SchemeId', description='所属质检方案Id'),
  schemeName?: string(name='SchemeName', description='质检方案名称'),
  schemeRuleMappingId?: long(name='SchemeRuleMappingId', description='质检方案与规则映射ID'),
  scoreDeleted?: boolean(name='ScoreDeleted', description='评分项是否删除，用于删除时显示置灰'),
  scoreId?: long(name='ScoreId', description='评分大项ID'),
  scoreName?: string(name='ScoreName', description='评分大项名称'),
  scoreNum?: int32(name='ScoreNum', description='分数num'),
  scoreNumType?: int32(name='ScoreNumType', description='0-触发规则后加减分 1-触发规则后一次性得分 //4.0协议专用'),
  scoreRuleHitType?: int32(name='ScoreRuleHitType', description='0-命中节点时计分'),
  scoreSubId?: long(name='ScoreSubId', description='小项id'),
  scoreSubName?: string(name='ScoreSubName', description='评分小项'),
  scoreType?: int32(name='ScoreType', description='加分或者减分'),
  sortIndex?: int32(name='SortIndex', description='质检维度内的排序'),
  startTime?: string(name='StartTime', description='开始时间'),
  status?: int32(name='Status', description='规则状态'),
  targetType?: int32(name='TargetType', description='规则类别：10：质检方案-通用规则；11：质检方案-流程规则 //4.0协议专用'),
  taskFlowId?: long(name='TaskFlowId', description='流程画布ID'),
  taskFlowType?: int32(name='TaskFlowType', description='流程图类型-已废弃-默认-1'),
  triggers?: [ string ](name='Triggers', description='关注的条件列表'),
  type?: int32(name='Type', description='RuleCategory，2舆情监控，3业务类  //4.0 逻辑兼容使用'),
  weight?: string(name='Weight', description='权重'),
}

model RuleTestDialogue {
  content?: [ 
    {
      begin?: long(name='Begin', description='开始时间InLong'),
      beginTime?: long(name='BeginTime', description='开始时间InLong'),
      emotionValue?: int32(name='EmotionValue', description='情绪能量值'),
      end?: long(name='End', description='结束时间inLong'),
      hourMinSec?: string(name='HourMinSec', description='时分秒'),
      identity?: string(name='Identity', description='身份标识'),
      role?: string(name='Role', description='角色'),
      silenceDuration?: long(name='SilenceDuration', description='静音时长'),
      speechRate?: long(name='SpeechRate', description='语速'),
      words?: string(name='Words', description='对话'),
    }
  ](name='Content', description='对话内容'),
  id?: long(name='Id', description='对话ID'),
  name?: string(name='Name', description='对话名称'),
  userGroup?: string(name='UserGroup', description='用户组'),
}

model RulesInfo {
  conditions?: [
    ConditionBasicInfo
  ](name='Conditions', description='规则条件信息，多个规则的条件都放在一个list中'),
  count?: int32(name='Count', description='总条数'),
  dialogues?: [
    RuleTestDialogue
  ](name='Dialogues', description='测试文案'),
  pageNumber?: int32(name='PageNumber', description='当前页'),
  pageSize?: int32(name='PageSize', description='页数'),
  rules?: [
    RuleInfo
  ](name='Rules', description='规则基本信息，可能有多个规则'),
}

model SchemeCheckType {
  checkName?: string(name='CheckName', description='检测项名称'),
  checkType?: long(name='CheckType', description='检测项类型：默认如下'),
  enable?: int32(name='Enable', description='是否启用'),
  schemeId?: long(name='SchemeId', description='质检方案ID'),
  schemeScoreInfoList?: [ 
    {
      name?: string(name='Name', description='规则名称'),
      rid?: long(name='Rid', description='规则ID'),
      scoreNum?: int32(name='ScoreNum', description='客服评分：默认0，[0, 100]'),
      scoreNumType?: int32(name='ScoreNumType', description='0-触发规则后加减分'),
      scoreRuleHitType?: int32(name='ScoreRuleHitType', description='0-命中节点时计分'),
      scoreType?: int32(name='ScoreType', description='1加分 3减分 默认1'),
      taskFlowId?: long(name='TaskFlowId', description='流程ID'),
      taskFlowName?: string(name='TaskFlowName', description='流程名称'),
    }
  ](name='SchemeScoreInfoList', description='检测项下评分项列表，见SchemeScoreInfo'),
  score?: int32(name='Score', description='最终得分'),
  sourceScore?: int32(name='SourceScore', description='原始得分'),
  taskFlowScoreInfoList?: [ 
    {
      schemeScoreInfoList?: [ 
        {
          name?: string(name='Name', description='规则名称'),
          rid?: long(name='Rid', description='规则ID'),
          scoreNum?: int32(name='ScoreNum', description='客服评分：默认0，[0, 100]'),
          scoreNumType?: int32(name='ScoreNumType', description='0-触发规则后加减分'),
          scoreRuleHitType?: int32(name='ScoreRuleHitType', description='0-命中节点时计分'),
          scoreType?: int32(name='ScoreType', description='1加分 3减分 默认1'),
          taskFlowId?: long(name='TaskFlowId', description='流程ID'),
          taskFlowName?: string(name='TaskFlowName', description='流程名称'),
        }
      ](name='SchemeScoreInfoList', description='评分项列表'),
      taskFlowId?: long(name='TaskFlowId', description='流程ID'),
      taskFlowName?: string(name='TaskFlowName', description='流程名称'),
      taskFlowType?: int32(name='TaskFlowType', description='"流程版本：0：树，1：图"'),
    }
  ](name='TaskFlowScoreInfoList', description='检测项下评分项列表，见TaskFlowScoreInfo'),
}

model TaskGraphFlow {
  flowRuleScoreType?: int32(name='FlowRuleScoreType', description='流程计分逻辑设置'),
  id?: long(name='Id', description='流程画布id'),
  nodes?: [
    GraphFlowNode
  ](name='Nodes', description='流程所有节点'),
  rid?: long(name='Rid', description='规则ID'),
  ruleName?: string(name='RuleName', description='规则名称'),
  showProperties?: string(name='ShowProperties', description='前端展示使用'),
  skipWhenFirstSessionNodeMiss?: boolean(name='SkipWhenFirstSessionNodeMiss', description='首个对话节点未命中则跳过'),
}

model AddBusinessCategoryRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model AddBusinessCategoryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddBusinessCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: AddBusinessCategoryResponseBody(name='body'),
}

async function addBusinessCategory(request: AddBusinessCategoryRequest): AddBusinessCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddBusinessCategory', 'POST', '/', 'json', false, 'json', request);
}

model AddRuleCategoryRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model AddRuleCategoryResponseBody = {
  code?: string(name='Code'),
  data?: {
    select?: boolean(name='Select'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddRuleCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: AddRuleCategoryResponseBody(name='body'),
}

async function addRuleCategory(request: AddRuleCategoryRequest): AddRuleCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRuleCategory', 'POST', '/', 'json', false, 'json', request);
}

model AddRuleV4Request {
  isCopy?: boolean(name='IsCopy', position='Body'),
  jsonStrForRule: string(name='JsonStrForRule', position='Body'),
}

model AddRuleV4ResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddRuleV4Response = {
  headers: map[string]string(name='headers'),
  body: AddRuleV4ResponseBody(name='body'),
}

async function addRuleV4(request: AddRuleV4Request): AddRuleV4Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddRuleV4', 'POST', '/', 'json', true, 'form', request);
}

model AddThesaurusForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model AddThesaurusForApiResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddThesaurusForApiResponse = {
  headers: map[string]string(name='headers'),
  body: AddThesaurusForApiResponseBody(name='body'),
}

async function addThesaurusForApi(request: AddThesaurusForApiRequest): AddThesaurusForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddThesaurusForApi', 'POST', '/', 'json', false, 'json', request);
}

model AssignReviewerRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model AssignReviewerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignReviewerResponse = {
  headers: map[string]string(name='headers'),
  body: AssignReviewerResponseBody(name='body'),
}

async function assignReviewer(request: AssignReviewerRequest): AssignReviewerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignReviewer', 'POST', '/', 'json', false, 'json', request);
}

model AssignReviewerBySessionGroupRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model AssignReviewerBySessionGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AssignReviewerBySessionGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AssignReviewerBySessionGroupResponseBody(name='body'),
}

async function assignReviewerBySessionGroup(request: AssignReviewerBySessionGroupRequest): AssignReviewerBySessionGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssignReviewerBySessionGroup', 'POST', '/', 'json', false, 'json', request);
}

model BatchSubmitReviewInfoRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model BatchSubmitReviewInfoResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchSubmitReviewInfoResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSubmitReviewInfoResponseBody(name='body'),
}

async function batchSubmitReviewInfo(request: BatchSubmitReviewInfoRequest): BatchSubmitReviewInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSubmitReviewInfo', 'POST', '/', 'json', false, 'json', request);
}

model CreateAsrVocabRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model CreateAsrVocabResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAsrVocabResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAsrVocabResponseBody(name='body'),
}

async function createAsrVocab(request: CreateAsrVocabRequest): CreateAsrVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAsrVocab', 'POST', '/', 'json', false, 'json', request);
}

model CreateCheckTypeToSchemeRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model CreateCheckTypeToSchemeResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCheckTypeToSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCheckTypeToSchemeResponseBody(name='body'),
}

async function createCheckTypeToScheme(request: CreateCheckTypeToSchemeRequest): CreateCheckTypeToSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCheckTypeToScheme', 'POST', '/', 'json', false, 'json', request);
}

model CreateQualityCheckSchemeRequest {
  jsonStr: string(name='jsonStr', position='Query'),
}

model CreateQualityCheckSchemeResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateQualityCheckSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateQualityCheckSchemeResponseBody(name='body'),
}

async function createQualityCheckScheme(request: CreateQualityCheckSchemeRequest): CreateQualityCheckSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQualityCheckScheme', 'POST', '/', 'json', false, 'json', request);
}

model CreateSchemeTaskConfigRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model CreateSchemeTaskConfigResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSchemeTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSchemeTaskConfigResponseBody(name='body'),
}

async function createSchemeTaskConfig(request: CreateSchemeTaskConfigRequest): CreateSchemeTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSchemeTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateSkillGroupConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model CreateSkillGroupConfigResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSkillGroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSkillGroupConfigResponseBody(name='body'),
}

async function createSkillGroupConfig(request: CreateSkillGroupConfigRequest): CreateSkillGroupConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSkillGroupConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateTaskAssignRuleRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model CreateTaskAssignRuleResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTaskAssignRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTaskAssignRuleResponseBody(name='body'),
}

async function createTaskAssignRule(request: CreateTaskAssignRuleRequest): CreateTaskAssignRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTaskAssignRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model CreateUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model CreateWarningConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model CreateWarningConfigResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateWarningConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWarningConfigResponseBody(name='body'),
}

async function createWarningConfig(request: CreateWarningConfigRequest): CreateWarningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWarningConfig', 'POST', '/', 'json', false, 'json', request);
}

model CreateWarningStrategyConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model CreateWarningStrategyConfigResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateWarningStrategyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWarningStrategyConfigResponseBody(name='body'),
}

async function createWarningStrategyConfig(request: CreateWarningStrategyConfigRequest): CreateWarningStrategyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWarningStrategyConfig', 'POST', '/', 'json', false, 'json', request);
}

model DelRuleCategoryRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DelRuleCategoryResponseBody = {
  code?: string(name='Code'),
  data?: {
    select?: boolean(name='Select'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelRuleCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DelRuleCategoryResponseBody(name='body'),
}

async function delRuleCategory(request: DelRuleCategoryRequest): DelRuleCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelRuleCategory', 'POST', '/', 'json', false, 'json', request);
}

model DelThesaurusForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DelThesaurusForApiResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelThesaurusForApiResponse = {
  headers: map[string]string(name='headers'),
  body: DelThesaurusForApiResponseBody(name='body'),
}

async function delThesaurusForApi(request: DelThesaurusForApiRequest): DelThesaurusForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelThesaurusForApi', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAsrVocabRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteAsrVocabResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAsrVocabResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAsrVocabResponseBody(name='body'),
}

async function deleteAsrVocab(request: DeleteAsrVocabRequest): DeleteAsrVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAsrVocab', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBusinessCategoryRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteBusinessCategoryResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBusinessCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBusinessCategoryResponseBody(name='body'),
}

async function deleteBusinessCategory(request: DeleteBusinessCategoryRequest): DeleteBusinessCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBusinessCategory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomizationConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteCustomizationConfigResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCustomizationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomizationConfigResponseBody(name='body'),
}

async function deleteCustomizationConfig(request: DeleteCustomizationConfigRequest): DeleteCustomizationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomizationConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataSetRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteDataSetResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDataSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSetResponseBody(name='body'),
}

async function deleteDataSet(request: DeleteDataSetRequest): DeleteDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSet', 'POST', '/', 'json', false, 'json', request);
}

model DeletePrecisionTaskRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeletePrecisionTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeletePrecisionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePrecisionTaskResponseBody(name='body'),
}

async function deletePrecisionTask(request: DeletePrecisionTaskRequest): DeletePrecisionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePrecisionTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteQualityCheckSchemeRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model DeleteQualityCheckSchemeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteQualityCheckSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQualityCheckSchemeResponseBody(name='body'),
}

async function deleteQualityCheckScheme(request: DeleteQualityCheckSchemeRequest): DeleteQualityCheckSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQualityCheckScheme', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  forceDelete?: boolean(name='ForceDelete', position='Body'),
  isSchemeData?: int32(name='IsSchemeData', position='Body'),
  ruleId: long(name='RuleId', position='Body'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteRuleV4Request {
  forceDelete?: boolean(name='ForceDelete', position='Body'),
  ruleId: long(name='RuleId', position='Body'),
}

model DeleteRuleV4ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRuleV4Response = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleV4ResponseBody(name='body'),
}

async function deleteRuleV4(request: DeleteRuleV4Request): DeleteRuleV4Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRuleV4', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSchemeTaskConfigRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model DeleteSchemeTaskConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSchemeTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSchemeTaskConfigResponseBody(name='body'),
}

async function deleteSchemeTaskConfig(request: DeleteSchemeTaskConfigRequest): DeleteSchemeTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchemeTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteScoreForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteScoreForApiResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteScoreForApiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteScoreForApiResponseBody(name='body'),
}

async function deleteScoreForApi(request: DeleteScoreForApiRequest): DeleteScoreForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteScoreForApi', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSkillGroupConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteSkillGroupConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSkillGroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSkillGroupConfigResponseBody(name='body'),
}

async function deleteSkillGroupConfig(request: DeleteSkillGroupConfigRequest): DeleteSkillGroupConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSkillGroupConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSubScoreForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteSubScoreForApiResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSubScoreForApiResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubScoreForApiResponseBody(name='body'),
}

async function deleteSubScoreForApi(request: DeleteSubScoreForApiRequest): DeleteSubScoreForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubScoreForApi', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTaskAssignRuleRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteTaskAssignRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTaskAssignRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTaskAssignRuleResponseBody(name='body'),
}

async function deleteTaskAssignRule(request: DeleteTaskAssignRuleRequest): DeleteTaskAssignRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTaskAssignRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWarningConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteWarningConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteWarningConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWarningConfigResponseBody(name='body'),
}

async function deleteWarningConfig(request: DeleteWarningConfigRequest): DeleteWarningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWarningConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWarningStrategyConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model DeleteWarningStrategyConfigResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteWarningStrategyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWarningStrategyConfigResponseBody(name='body'),
}

async function deleteWarningStrategyConfig(request: DeleteWarningStrategyConfigRequest): DeleteWarningStrategyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWarningStrategyConfig', 'POST', '/', 'json', false, 'json', request);
}

model EditThesaurusForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model EditThesaurusForApiResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EditThesaurusForApiResponse = {
  headers: map[string]string(name='headers'),
  body: EditThesaurusForApiResponseBody(name='body'),
}

async function editThesaurusForApi(request: EditThesaurusForApiRequest): EditThesaurusForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditThesaurusForApi', 'POST', '/', 'json', false, 'json', request);
}

model GetAsrVocabRequest {
  jsonStr?: string(name='JsonStr', position='Query'),
}

model GetAsrVocabResponseBody = {
  code?: string(name='Code'),
  data?: {
    name?: string(name='Name'),
    words?: {
      word?: [ 
      {
        weight?: int32(name='Weight'),
        word?: string(name='Word'),
      }
    ](name='Word')
    }(name='Words'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAsrVocabResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsrVocabResponseBody(name='body'),
}

async function getAsrVocab(request: GetAsrVocabRequest): GetAsrVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsrVocab', 'POST', '/', 'json', false, 'json', request);
}

model GetBusinessCategoryListRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetBusinessCategoryListResponseBody = {
  code?: string(name='Code'),
  data?: {
    businessCategoryBasicInfo?: [ 
    {
      bid?: int32(name='Bid'),
      businessName?: string(name='BusinessName'),
      serviceType?: int32(name='ServiceType'),
    }
  ](name='BusinessCategoryBasicInfo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetBusinessCategoryListResponse = {
  headers: map[string]string(name='headers'),
  body: GetBusinessCategoryListResponseBody(name='body'),
}

async function getBusinessCategoryList(request: GetBusinessCategoryListRequest): GetBusinessCategoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBusinessCategoryList', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomizationConfigListRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetCustomizationConfigListResponseBody = {
  code?: string(name='Code'),
  data?: {
    modelCustomizationDataSetPo?: [ 
    {
      createTime?: string(name='CreateTime'),
      modeCustomizationId?: string(name='ModeCustomizationId'),
      modelId?: long(name='ModelId'),
      modelName?: string(name='ModelName'),
      modelStatus?: int32(name='ModelStatus'),
      taskType?: int32(name='TaskType'),
    }
  ](name='ModelCustomizationDataSetPo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCustomizationConfigListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomizationConfigListResponseBody(name='body'),
}

async function getCustomizationConfigList(request: GetCustomizationConfigListRequest): GetCustomizationConfigListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomizationConfigList', 'POST', '/', 'json', false, 'json', request);
}

model GetHitResultRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetHitResultResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    resultInfo?: [ 
    {
      rid?: long(name='Rid'),
      ruleName?: string(name='RuleName'),
    }
  ](name='ResultInfo')
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetHitResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetHitResultResponseBody(name='body'),
}

async function getHitResult(request: GetHitResultRequest): GetHitResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHitResult', 'POST', '/', 'json', false, 'json', request);
}

model GetNextResultToVerifyRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetNextResultToVerifyResponseBody = {
  code?: string(name='Code'),
  data?: {
    audioScheme?: string(name='AudioScheme'),
    audioURL?: string(name='AudioURL'),
    dialogues?: {
      dialogue?: [ 
      {
        begin?: long(name='Begin'),
        beginTime?: string(name='BeginTime'),
        deltas?: {
          delta?: [ 
          {
            source?: {
              line?: {
                line?: [ string ](name='Line')
              }(name='Line'),
              position?: int32(name='Position'),
            }(name='Source'),
            target?: {
              line?: {
                line?: [ string ](name='Line')
              }(name='Line'),
              position?: int32(name='Position'),
            }(name='Target'),
            type?: string(name='Type'),
          }
        ](name='Delta')
        }(name='Deltas'),
        emotionValue?: int32(name='EmotionValue'),
        end?: long(name='End'),
        hourMinSec?: string(name='HourMinSec'),
        identity?: string(name='Identity'),
        incorrectWords?: int32(name='IncorrectWords'),
        role?: string(name='Role'),
        silenceDuration?: int32(name='SilenceDuration'),
        sourceRole?: string(name='SourceRole'),
        sourceWords?: string(name='SourceWords'),
        speechRate?: int32(name='SpeechRate'),
        words?: string(name='Words'),
      }
    ](name='Dialogue')
    }(name='Dialogues'),
    duration?: int32(name='Duration'),
    fileId?: string(name='FileId'),
    fileName?: string(name='FileName'),
    incorrectWords?: int32(name='IncorrectWords'),
    index?: int32(name='Index'),
    precision?: float(name='Precision'),
    status?: int32(name='Status'),
    totalCount?: int32(name='TotalCount'),
    updateTime?: string(name='UpdateTime'),
    verified?: boolean(name='Verified'),
    verifiedCount?: int32(name='VerifiedCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetNextResultToVerifyResponse = {
  headers: map[string]string(name='headers'),
  body: GetNextResultToVerifyResponseBody(name='body'),
}

async function getNextResultToVerify(request: GetNextResultToVerifyRequest): GetNextResultToVerifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNextResultToVerify', 'POST', '/', 'json', false, 'json', request);
}

model GetPrecisionTaskRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetPrecisionTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    dataSetId?: long(name='DataSetId'),
    dataSetName?: string(name='DataSetName'),
    duration?: int32(name='Duration'),
    incorrectWords?: int32(name='IncorrectWords'),
    name?: string(name='Name'),
    precisions?: {
      precision?: [ 
      {
        modelId?: long(name='ModelId'),
        modelName?: string(name='ModelName'),
        precision?: float(name='Precision'),
        status?: int32(name='Status'),
        taskId?: string(name='TaskId'),
      }
    ](name='Precision')
    }(name='Precisions'),
    source?: int32(name='Source'),
    status?: int32(name='Status'),
    taskId?: string(name='TaskId'),
    totalCount?: int32(name='TotalCount'),
    updateTime?: string(name='UpdateTime'),
    verifiedCount?: int32(name='VerifiedCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPrecisionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetPrecisionTaskResponseBody(name='body'),
}

async function getPrecisionTask(request: GetPrecisionTaskRequest): GetPrecisionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPrecisionTask', 'POST', '/', 'json', false, 'json', request);
}

model GetQualityCheckSchemeRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model GetQualityCheckSchemeResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: string(name='CreateTime'),
    createUserName?: string(name='CreateUserName'),
    dataType?: int32(name='DataType'),
    description?: string(name='Description'),
    name?: string(name='Name'),
    ruleIds?: [ string ](name='RuleIds'),
    ruleList?: [
      RulesInfo
    ](name='RuleList'),
    schemeCheckTypeList?: [ 
      {
        checkName?: string(name='CheckName'),
        checkType?: long(name='CheckType'),
        enable?: int32(name='Enable'),
        schemeId?: long(name='SchemeId'),
        score?: int32(name='Score'),
        sourceScore?: int32(name='SourceScore'),
      }
    ](name='SchemeCheckTypeList'),
    schemeId?: long(name='SchemeId', description='质检方案id'),
    schemeTemplateId?: long(name='SchemeTemplateId'),
    status?: int32(name='Status'),
    templateType?: int32(name='TemplateType'),
    type?: int32(name='Type'),
    updateTime?: string(name='UpdateTime'),
    updateUserName?: string(name='UpdateUserName'),
    version?: long(name='Version'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: [ string ](name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetQualityCheckSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: GetQualityCheckSchemeResponseBody(name='body'),
}

async function getQualityCheckScheme(request: GetQualityCheckSchemeRequest): GetQualityCheckSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQualityCheckScheme', 'POST', '/', 'json', false, 'json', request);
}

model GetResultRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetResultResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    resultInfo?: [ 
    {
      agent?: {
        id?: string(name='Id'),
        name?: string(name='Name'),
        skillGroup?: string(name='SkillGroup'),
      }(name='Agent'),
      asrResult?: {
        asrResult?: [ 
        {
          begin?: long(name='Begin'),
          emotionValue?: int32(name='EmotionValue'),
          end?: long(name='End'),
          role?: string(name='Role'),
          speechRate?: int32(name='SpeechRate'),
          words?: string(name='Words'),
        }
      ](name='AsrResult')
      }(name='AsrResult'),
      assignmentTime?: string(name='AssignmentTime'),
      comments?: string(name='Comments'),
      createTime?: string(name='CreateTime'),
      createTimeLong?: string(name='CreateTimeLong'),
      errorMessage?: string(name='ErrorMessage'),
      hitResult?: {
        hitResult?: [ 
        {
          hits?: {
            hit?: [ 
            {
              cid?: {
                cid?: [ string ](name='Cid')
              }(name='Cid'),
              keyWords?: {
                keyWord?: [ 
                {
                  cid?: string(name='Cid'),
                  from?: int32(name='From'),
                  to?: int32(name='To'),
                  val?: string(name='Val'),
                }
              ](name='KeyWord')
              }(name='KeyWords'),
              phrase?: {
                begin?: long(name='Begin'),
                emotionValue?: int32(name='EmotionValue'),
                end?: int32(name='End'),
                role?: string(name='Role'),
                words?: string(name='Words'),
              }(name='Phrase'),
            }
          ](name='Hit')
          }(name='Hits'),
          name?: string(name='Name'),
          reviewResult?: int32(name='ReviewResult'),
          rid?: string(name='Rid'),
          schemeId?: long(name='SchemeId'),
          schemeVersion?: long(name='SchemeVersion'),
          type?: string(name='Type'),
        }
      ](name='HitResult')
      }(name='HitResult'),
      hitScore?: {
        hitScore?: [ 
        {
          ruleId?: string(name='RuleId'),
          scoreId?: string(name='ScoreId'),
          scoreName?: string(name='ScoreName'),
          scoreNumber?: string(name='ScoreNumber'),
        }
      ](name='HitScore')
      }(name='HitScore'),
      lastDataId?: string(name='LastDataId'),
      recording?: {
        business?: string(name='Business'),
        callId?: string(name='CallId'),
        callTime?: string(name='CallTime'),
        callType?: int32(name='CallType'),
        callee?: string(name='Callee'),
        caller?: string(name='Caller'),
        dataSetName?: string(name='DataSetName'),
        dialogueSize?: int32(name='DialogueSize'),
        duration?: long(name='Duration'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        primaryId?: string(name='PrimaryId'),
        remark1?: string(name='Remark1'),
        remark10?: string(name='Remark10'),
        remark11?: string(name='Remark11'),
        remark12?: string(name='Remark12'),
        remark13?: string(name='Remark13'),
        remark2?: string(name='Remark2'),
        remark3?: string(name='Remark3'),
        remark4?: string(name='Remark4'),
        remark5?: long(name='Remark5'),
        remark6?: string(name='Remark6'),
        remark7?: string(name='Remark7'),
        remark8?: string(name='Remark8'),
        remark9?: string(name='Remark9'),
        url?: string(name='Url'),
      }(name='Recording'),
      resolver?: string(name='Resolver'),
      reviewResult?: int32(name='ReviewResult'),
      reviewStatus?: int32(name='ReviewStatus'),
      reviewTime?: string(name='ReviewTime'),
      reviewTimeLong?: string(name='ReviewTimeLong'),
      reviewType?: int32(name='ReviewType'),
      reviewer?: string(name='Reviewer'),
      schemeIdList?: {
        schemeIdList?: [ long ](name='SchemeIdList')
      }(name='SchemeIdList'),
      schemeNameList?: {
        schemeNameList?: [ string ](name='SchemeNameList')
      }(name='SchemeNameList'),
      score?: int32(name='Score'),
      status?: int32(name='Status'),
      taskId?: string(name='TaskId'),
      taskName?: string(name='TaskName'),
    }
  ](name='ResultInfo')
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCountId?: string(name='ResultCountId'),
  success?: boolean(name='Success'),
}

model GetResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetResultResponseBody(name='body'),
}

async function getResult(request: GetResultRequest): GetResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResult', 'POST', '/', 'json', false, 'json', request);
}

model GetResultCallbackRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetResultCallbackResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetResultCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetResultCallbackResponseBody(name='body'),
}

async function getResultCallback(request: GetResultCallbackRequest): GetResultCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResultCallback', 'POST', '/', 'json', false, 'json', request);
}

model GetResultToReviewRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetResultToReviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    audioScheme?: string(name='AudioScheme'),
    audioURL?: string(name='AudioURL'),
    comments?: string(name='Comments'),
    dialogues?: {
      dialogue?: [ 
      {
        begin?: long(name='Begin'),
        beginTime?: string(name='BeginTime'),
        emotionValue?: int32(name='EmotionValue'),
        end?: long(name='End'),
        hourMinSec?: string(name='HourMinSec'),
        identity?: string(name='Identity'),
        role?: string(name='Role'),
        silenceDuration?: int32(name='SilenceDuration'),
        speechRate?: int32(name='SpeechRate'),
        words?: string(name='Words'),
      }
    ](name='Dialogue')
    }(name='Dialogues'),
    fileId?: string(name='FileId'),
    fileMergeName?: string(name='FileMergeName'),
    hitRuleReviewInfoList?: {
      hitRuleReviewInfo?: [ 
      {
        autoReview?: int32(name='AutoReview'),
        complainHistories?: {
          complainHistories?: [ 
          {
            comments?: string(name='Comments'),
            operationTime?: string(name='OperationTime'),
            operationType?: int32(name='OperationType'),
            operator?: long(name='Operator'),
            operatorName?: string(name='OperatorName'),
          }
        ](name='ComplainHistories')
        }(name='ComplainHistories'),
        complainable?: boolean(name='Complainable'),
        conditionHitInfoList?: {
          conditionHitInfo?: [ 
          {
            cid?: {
              cid?: [ string ](name='Cid')
            }(name='Cid'),
            keyWords?: {
              keyWord?: [ 
              {
                cid?: string(name='Cid'),
                customizeCode?: string(name='CustomizeCode'),
                from?: int32(name='From'),
                pid?: int32(name='Pid'),
                tid?: string(name='Tid'),
                to?: int32(name='To'),
                val?: string(name='Val'),
              }
            ](name='KeyWord')
            }(name='KeyWords'),
            phrase?: {
              begin?: long(name='Begin'),
              emotionValue?: int32(name='EmotionValue'),
              end?: long(name='End'),
              identity?: string(name='Identity'),
              pid?: int32(name='Pid'),
              role?: string(name='Role'),
              words?: string(name='Words'),
            }(name='Phrase'),
          }
        ](name='ConditionHitInfo')
        }(name='ConditionHitInfoList'),
        reviewInfo?: {
          hitId?: string(name='HitId'),
          reviewResult?: int32(name='ReviewResult'),
          reviewTime?: string(name='ReviewTime'),
          reviewer?: string(name='Reviewer'),
          rid?: long(name='Rid'),
        }(name='ReviewInfo'),
        rid?: long(name='Rid'),
        ruleName?: string(name='RuleName'),
        scoreId?: long(name='ScoreId'),
        scoreNum?: int32(name='ScoreNum'),
        scoreSubId?: long(name='ScoreSubId'),
        scoreSubName?: string(name='ScoreSubName'),
      }
    ](name='HitRuleReviewInfo')
    }(name='HitRuleReviewInfoList'),
    manualScoreInfoList?: {
      manualScoreInfo?: [ 
      {
        complainHistories?: {
          complainHistories?: [ 
          {
            comments?: string(name='Comments'),
            operationTime?: string(name='OperationTime'),
            operationType?: int32(name='OperationType'),
            operator?: long(name='Operator'),
            operatorName?: string(name='OperatorName'),
          }
        ](name='ComplainHistories')
        }(name='ComplainHistories'),
        complainable?: boolean(name='Complainable'),
        scoreId?: long(name='ScoreId'),
        scoreNum?: int32(name='ScoreNum'),
        scoreSubId?: long(name='ScoreSubId'),
        scoreSubName?: string(name='ScoreSubName'),
      }
    ](name='ManualScoreInfo')
    }(name='ManualScoreInfoList'),
    reviewHistoryList?: {
      reviewHistory?: [ 
      {
        complainResult?: int32(name='ComplainResult'),
        oldScore?: int32(name='OldScore'),
        operatorName?: string(name='OperatorName'),
        reviewResult?: int32(name='ReviewResult'),
        score?: int32(name='Score'),
        timeStr?: string(name='TimeStr'),
        type?: int32(name='Type'),
      }
    ](name='ReviewHistory')
    }(name='ReviewHistoryList'),
    status?: int32(name='Status'),
    totalScore?: int32(name='TotalScore'),
    vid?: string(name='Vid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetResultToReviewResponse = {
  headers: map[string]string(name='headers'),
  body: GetResultToReviewResponseBody(name='body'),
}

async function getResultToReview(request: GetResultToReviewRequest): GetResultToReviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResultToReview', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    rules?: {
      ruleInfo?: [ 
      {
        autoReview?: int32(name='AutoReview'),
        businessCategoryNameList?: {
          businessCategoryNameList?: [ string ](name='BusinessCategoryNameList')
        }(name='BusinessCategoryNameList'),
        comments?: string(name='Comments'),
        createEmpid?: string(name='CreateEmpid'),
        createTime?: string(name='CreateTime'),
        endTime?: string(name='EndTime'),
        isDelete?: int32(name='IsDelete'),
        isOnline?: int32(name='IsOnline'),
        lastUpdateEmpid?: string(name='LastUpdateEmpid'),
        lastUpdateTime?: string(name='LastUpdateTime'),
        name?: string(name='Name'),
        rid?: string(name='Rid'),
        ruleLambda?: string(name='RuleLambda'),
        ruleScoreType?: int32(name='RuleScoreType'),
        scoreId?: int32(name='ScoreId'),
        scoreName?: string(name='ScoreName'),
        scoreSubId?: int32(name='ScoreSubId'),
        scoreSubName?: string(name='ScoreSubName'),
        startTime?: string(name='StartTime'),
        status?: int32(name='Status'),
        type?: int32(name='Type'),
        weight?: string(name='Weight'),
      }
    ](name='RuleInfo')
    }(name='Rules'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleResponseBody(name='body'),
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRule', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleByIdRequest {
  ruleId: long(name='RuleId', position='Body'),
}

model GetRuleByIdResponseBody = {
  code?: string(name='Code'),
  data?: RulesInfo(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: [ string ](name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRuleByIdResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleByIdResponseBody(name='body'),
}

async function getRuleById(request: GetRuleByIdRequest): GetRuleByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleById', 'POST', '/', 'json', true, 'form', request);
}

model GetRuleCategoryRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetRuleCategoryResponseBody = {
  code?: string(name='Code'),
  data?: {
    ruleCountInfo?: [ 
    {
      select?: boolean(name='Select'),
      type?: int32(name='Type'),
      typeName?: string(name='TypeName'),
    }
  ](name='RuleCountInfo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRuleCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleCategoryResponseBody(name='body'),
}

async function getRuleCategory(request: GetRuleCategoryRequest): GetRuleCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleCategory', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleDetailRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetRuleDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    conditions?: {
      conditionBasicInfo?: [ 
      {
        checkRange?: {
          absolute?: boolean(name='Absolute'),
          anchor?: {
            anchorCid?: string(name='AnchorCid'),
            hitTime?: int32(name='HitTime'),
            location?: string(name='Location'),
          }(name='Anchor'),
          range?: {
            from?: int32(name='From'),
            to?: int32(name='To'),
          }(name='Range'),
          role?: string(name='Role'),
        }(name='CheckRange'),
        conditionInfoCid?: string(name='ConditionInfoCid'),
        operLambda?: string(name='OperLambda'),
        operators?: {
          operatorBasicInfo?: [ 
          {
            oid?: string(name='Oid'),
            operName?: string(name='OperName'),
            param?: {
              antModelInfo?: {
                antModelInfo?: [ string ](name='AntModelInfo')
              }(name='AntModelInfo'),
              average?: boolean(name='Average'),
              beginType?: string(name='BeginType'),
              checkType?: int32(name='CheckType'),
              compareOperator?: string(name='CompareOperator'),
              contextChatMatch?: boolean(name='ContextChatMatch'),
              delayTime?: int32(name='DelayTime'),
              differentRole?: boolean(name='DifferentRole'),
              excludes?: {
                excludes?: [ string ](name='Excludes')
              }(name='Excludes'),
              from?: int32(name='From'),
              fromEnd?: boolean(name='FromEnd'),
              hitTime?: int32(name='HitTime'),
              inSentence?: boolean(name='InSentence'),
              interval?: int32(name='Interval'),
              keywordExtension?: boolean(name='KeywordExtension'),
              keywordMatchSize?: int32(name='KeywordMatchSize'),
              maxEmotionChangeValue?: int32(name='MaxEmotionChangeValue'),
              minWordSize?: int32(name='MinWordSize'),
              notRegex?: string(name='NotRegex'),
              operKeyWords?: {
                operKeyWord?: [ string ](name='OperKeyWord')
              }(name='OperKeyWords'),
              phrase?: string(name='Phrase'),
              pvalues?: {
                pvalues?: [ string ](name='Pvalues')
              }(name='Pvalues'),
              references?: {
                reference?: [ string ](name='Reference')
              }(name='References'),
              regex?: string(name='Regex'),
              score?: int32(name='Score'),
              similarityThreshold?: float(name='Similarity_threshold'),
              similarlySentences?: {
                similarlySentence?: [ string ](name='SimilarlySentence')
              }(name='SimilarlySentences'),
              target?: int32(name='Target'),
              targetRole?: string(name='TargetRole'),
              threshold?: float(name='Threshold'),
              velocityInMint?: int32(name='VelocityInMint'),
            }(name='Param'),
            type?: string(name='Type'),
          }
        ](name='OperatorBasicInfo')
        }(name='Operators'),
      }
    ](name='ConditionBasicInfo')
    }(name='Conditions'),
    count?: int32(name='Count'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    rules?: {
      ruleBasicInfo?: [ 
      {
        businessCategories?: {
          businessCategoryBasicInfo?: [ 
          {
            bid?: int32(name='Bid'),
            businessName?: string(name='BusinessName'),
            serviceType?: int32(name='ServiceType'),
          }
        ](name='BusinessCategoryBasicInfo')
        }(name='BusinessCategories'),
        rid?: string(name='Rid'),
        ruleLambda?: string(name='RuleLambda'),
        triggers?: {
          trigger?: [ string ](name='Trigger')
        }(name='Triggers'),
      }
    ](name='RuleBasicInfo')
    }(name='Rules'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRuleDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleDetailResponseBody(name='body'),
}

async function getRuleDetail(request: GetRuleDetailRequest): GetRuleDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleV4Request {
  ruleId: long(name='RuleId', position='Body'),
}

model GetRuleV4ResponseBody = {
  code?: string(name='Code'),
  data?: RulesInfo(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: [ string ](name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetRuleV4Response = {
  headers: map[string]string(name='headers'),
  body: GetRuleV4ResponseBody(name='body'),
}

async function getRuleV4(request: GetRuleV4Request): GetRuleV4Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleV4', 'POST', '/', 'json', true, 'form', request);
}

model GetRulesCountListRequest {
  businessName?: string(name='BusinessName', position='Body'),
  businessRange?: int32(name='BusinessRange', position='Body'),
  categoryName?: string(name='CategoryName', position='Body'),
  countTotal?: boolean(name='CountTotal', position='Body'),
  createEmpid?: string(name='CreateEmpid', position='Body'),
  createUserId?: long(name='CreateUserId', position='Body'),
  currentPage?: int32(name='CurrentPage', position='Body'),
  endTime?: string(name='EndTime', position='Body'),
  lastUpdateEmpid?: string(name='LastUpdateEmpid', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
  requireInfos?: [ string ](name='RequireInfos', position='Body'),
  rid?: long(name='Rid', position='Body'),
  ruleIdOrRuleName?: string(name='RuleIdOrRuleName', position='Body'),
  ruleScoreSingleType?: int32(name='RuleScoreSingleType', position='Body'),
  ruleType?: int32(name='RuleType', position='Body'),
  schemeId?: long(name='SchemeId', position='Body'),
  sourceType?: int32(name='SourceType', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
  status?: int32(name='Status', position='Body'),
  type?: int32(name='Type', position='Body'),
  typeName?: string(name='TypeName', position='Body'),
  updateEndTime?: string(name='UpdateEndTime', position='Body'),
  updateStartTime?: string(name='UpdateStartTime', position='Body'),
  updateUserId?: long(name='UpdateUserId', position='Body'),
}

model GetRulesCountListResponseBody = {
  businessType?: int32(name='BusinessType'),
  code?: string(name='Code'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    data?: [ string ](name='Data')
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model GetRulesCountListResponse = {
  headers: map[string]string(name='headers'),
  body: GetRulesCountListResponseBody(name='body'),
}

async function getRulesCountList(request: GetRulesCountListRequest): GetRulesCountListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRulesCountList', 'POST', '/', 'json', true, 'form', request);
}

model GetScoreInfoRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetScoreInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    scorePo?: [ 
    {
      scoreId?: int32(name='ScoreId'),
      scoreInfos?: {
        scoreParam?: [ 
        {
          scoreNum?: int32(name='ScoreNum'),
          scoreSubId?: int32(name='ScoreSubId'),
          scoreSubName?: string(name='ScoreSubName'),
          scoreType?: int32(name='ScoreType'),
        }
      ](name='ScoreParam')
      }(name='ScoreInfos'),
      scoreName?: string(name='ScoreName'),
    }
  ](name='ScorePo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetScoreInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetScoreInfoResponseBody(name='body'),
}

async function getScoreInfo(request: GetScoreInfoRequest): GetScoreInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScoreInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetSkillGroupConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetSkillGroupConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    allContentQualityCheck?: int32(name='AllContentQualityCheck'),
    allRids?: string(name='AllRids'),
    allRuleList?: {
      ruleNameInfo?: [ 
      {
        rid?: long(name='Rid'),
        ruleName?: string(name='RuleName'),
      }
    ](name='RuleNameInfo')
    }(name='AllRuleList'),
    createTime?: string(name='CreateTime'),
    id?: long(name='Id'),
    instanceId?: string(name='InstanceId'),
    modelId?: long(name='ModelId'),
    modelName?: string(name='ModelName'),
    name?: string(name='Name'),
    qualityCheckType?: int32(name='QualityCheckType'),
    rid?: string(name='Rid'),
    ruleList?: {
      ruleNameInfo?: [ 
      {
        rid?: long(name='Rid'),
        ruleName?: string(name='RuleName'),
      }
    ](name='RuleNameInfo')
    }(name='RuleList'),
    skillGroupFrom?: int32(name='SkillGroupFrom'),
    skillGroupId?: string(name='SkillGroupId'),
    skillGroupName?: string(name='SkillGroupName'),
    status?: int32(name='Status'),
    type?: int32(name='Type'),
    updateTime?: string(name='UpdateTime'),
    vocabId?: long(name='VocabId'),
    vocabName?: string(name='VocabName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSkillGroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetSkillGroupConfigResponseBody(name='body'),
}

async function getSkillGroupConfig(request: GetSkillGroupConfigRequest): GetSkillGroupConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSkillGroupConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetSyncResultRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetSyncResultResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: [ 
    {
      agent?: {
        id?: string(name='Id'),
        name?: string(name='Name'),
        skillGroup?: string(name='SkillGroup'),
      }(name='Agent'),
      asrResult?: [ 
        {
          begin?: long(name='Begin'),
          emotionValue?: int32(name='EmotionValue'),
          end?: long(name='End'),
          role?: string(name='Role'),
          silenceDuration?: int32(name='SilenceDuration'),
          speechRate?: int32(name='SpeechRate'),
          words?: string(name='Words'),
        }
      ](name='AsrResult'),
      comments?: string(name='Comments'),
      createTime?: string(name='CreateTime'),
      errorMessage?: string(name='ErrorMessage'),
      hitResult?: [ 
        {
          hits?: [ 
            {
              cid?: [ string ](name='Cid'),
              keyWords?: [ 
                {
                  cid?: string(name='Cid'),
                  from?: int32(name='From'),
                  to?: int32(name='To'),
                  val?: string(name='Val'),
                }
              ](name='KeyWords'),
              phrase?: {
                begin?: long(name='Begin'),
                emotionValue?: int32(name='EmotionValue'),
                end?: int32(name='End'),
                role?: string(name='Role'),
                silenceDuration?: int32(name='SilenceDuration'),
                speechRate?: int32(name='SpeechRate'),
                words?: string(name='Words'),
              }(name='Phrase'),
            }
          ](name='Hits'),
          name?: string(name='Name'),
          reviewResult?: int32(name='ReviewResult'),
          rid?: string(name='Rid'),
          type?: string(name='Type'),
        }
      ](name='HitResult'),
      recording?: {
        business?: string(name='Business'),
        callId?: string(name='CallId'),
        callTime?: string(name='CallTime'),
        callType?: int32(name='CallType'),
        callee?: string(name='Callee'),
        caller?: string(name='Caller'),
        dataSetName?: string(name='DataSetName'),
        duration?: long(name='Duration'),
        durationAudio?: long(name='DurationAudio'),
        id?: string(name='Id'),
        name?: string(name='Name'),
        primaryId?: string(name='PrimaryId'),
        remark1?: string(name='Remark1'),
        remark2?: string(name='Remark2'),
        remark3?: string(name='Remark3'),
        url?: string(name='Url'),
      }(name='Recording'),
      resolver?: string(name='Resolver'),
      reviewResult?: int32(name='ReviewResult'),
      reviewStatus?: int32(name='ReviewStatus'),
      reviewer?: string(name='Reviewer'),
      score?: int32(name='Score'),
      status?: int32(name='Status'),
      taskId?: string(name='TaskId'),
      taskName?: string(name='TaskName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCountId?: string(name='ResultCountId'),
  success?: boolean(name='Success'),
}

model GetSyncResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetSyncResultResponseBody(name='body'),
}

async function getSyncResult(request: GetSyncResultRequest): GetSyncResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSyncResult', 'POST', '/', 'json', false, 'json', request);
}

model GetThesaurusBySynonymForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetThesaurusBySynonymForApiResponseBody = {
  code?: string(name='Code'),
  data?: {
    thesaurusPo?: [ 
    {
      business?: string(name='Business'),
      id?: long(name='Id'),
      synonymList?: {
        synonymList?: [ string ](name='SynonymList')
      }(name='SynonymList'),
    }
  ](name='ThesaurusPo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetThesaurusBySynonymForApiResponse = {
  headers: map[string]string(name='headers'),
  body: GetThesaurusBySynonymForApiResponseBody(name='body'),
}

async function getThesaurusBySynonymForApi(request: GetThesaurusBySynonymForApiRequest): GetThesaurusBySynonymForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThesaurusBySynonymForApi', 'POST', '/', 'json', false, 'json', request);
}

model GetWarningStrategyConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model GetWarningStrategyConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    id?: long(name='Id'),
    intervalTime?: long(name='IntervalTime'),
    lambda?: string(name='Lambda'),
    level?: long(name='Level'),
    maxNumber?: long(name='MaxNumber'),
    name?: string(name='Name'),
    warningStrategyList?: {
      warningStrategyList?: [ 
      {
        code?: string(name='Code'),
        duration?: long(name='Duration'),
        durationExpression?: long(name='DurationExpression'),
        hitNumber?: long(name='HitNumber'),
        hitNumberExpression?: long(name='HitNumberExpression'),
        hitRuleList?: string(name='HitRuleList'),
        hitType?: long(name='HitType'),
        id?: long(name='Id'),
        range?: {
          rangeNum?: long(name='RangeNum'),
          type?: long(name='Type'),
        }(name='Range'),
        status?: long(name='Status'),
      }
    ](name='warningStrategyList')
    }(name='WarningStrategyList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetWarningStrategyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetWarningStrategyConfigResponseBody(name='body'),
}

async function getWarningStrategyConfig(request: GetWarningStrategyConfigRequest): GetWarningStrategyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWarningStrategyConfig', 'POST', '/', 'json', false, 'json', request);
}

model HandleComplaintRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model HandleComplaintResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model HandleComplaintResponse = {
  headers: map[string]string(name='headers'),
  body: HandleComplaintResponseBody(name='body'),
}

async function handleComplaint(request: HandleComplaintRequest): HandleComplaintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'HandleComplaint', 'POST', '/', 'json', false, 'json', request);
}

model InsertScoreForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model InsertScoreForApiResponseBody = {
  code?: string(name='Code'),
  data?: {
    scoreId?: long(name='ScoreId'),
    scoreName?: string(name='ScoreName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InsertScoreForApiResponse = {
  headers: map[string]string(name='headers'),
  body: InsertScoreForApiResponseBody(name='body'),
}

async function insertScoreForApi(request: InsertScoreForApiRequest): InsertScoreForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertScoreForApi', 'POST', '/', 'json', false, 'json', request);
}

model InsertSubScoreForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model InsertSubScoreForApiResponseBody = {
  code?: string(name='Code'),
  data?: {
    scoreSubId?: long(name='ScoreSubId'),
    scoreSubName?: string(name='ScoreSubName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InsertSubScoreForApiResponse = {
  headers: map[string]string(name='headers'),
  body: InsertSubScoreForApiResponseBody(name='body'),
}

async function insertSubScoreForApi(request: InsertSubScoreForApiRequest): InsertSubScoreForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InsertSubScoreForApi', 'POST', '/', 'json', false, 'json', request);
}

model InvalidRuleRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model InvalidRuleResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InvalidRuleResponse = {
  headers: map[string]string(name='headers'),
  body: InvalidRuleResponseBody(name='body'),
}

async function invalidRule(request: InvalidRuleRequest): InvalidRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvalidRule', 'POST', '/', 'json', false, 'json', request);
}

model ListAsrVocabRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListAsrVocabResponseBody = {
  code?: string(name='Code'),
  data?: {
    asrVocab?: [ 
    {
      createTime?: string(name='CreateTime'),
      id?: string(name='Id'),
      name?: string(name='Name'),
      updateTime?: string(name='UpdateTime'),
      vocabularyId?: string(name='VocabularyId'),
    }
  ](name='AsrVocab')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAsrVocabResponse = {
  headers: map[string]string(name='headers'),
  body: ListAsrVocabResponseBody(name='body'),
}

async function listAsrVocab(request: ListAsrVocabRequest): ListAsrVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAsrVocab', 'POST', '/', 'json', false, 'json', request);
}

model ListBusinessSpacesRequest {
  jsonStr?: string(name='JsonStr', position='Query'),
}

model ListBusinessSpacesResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: [ 
    {
      aliUid?: long(name='AliUid'),
      businessSpaceCode?: string(name='BusinessSpaceCode'),
      businessSpaceName?: string(name='BusinessSpaceName'),
      currentStatus?: int32(name='CurrentStatus'),
      endTime?: string(name='EndTime'),
      id?: long(name='Id'),
      language?: string(name='Language'),
      loginUserType?: int32(name='LoginUserType'),
      orderInstanceId?: string(name='OrderInstanceId'),
      productType?: string(name='ProductType'),
      roleName?: string(name='RoleName'),
      startTime?: string(name='StartTime'),
      subAliUid?: long(name='SubAliUid'),
      xspaceCommodityCode?: string(name='XspaceCommodityCode'),
      xspaceProductCode?: string(name='XspaceProductCode'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListBusinessSpacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListBusinessSpacesResponseBody(name='body'),
}

async function listBusinessSpaces(request: ListBusinessSpacesRequest): ListBusinessSpacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBusinessSpaces', 'POST', '/', 'json', false, 'json', request);
}

model ListDataSetRequest {
  jsonStr?: string(name='JsonStr', description='入参json字符串', position='Query'),
}

model ListDataSetResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    data?: [ 
    {
      autoTranscoding?: int32(name='AutoTranscoding'),
      channelId0?: int32(name='ChannelId0'),
      channelId1?: int32(name='ChannelId1'),
      channelType?: int32(name='ChannelType'),
      createTime?: string(name='CreateTime'),
      createType?: int32(name='CreateType'),
      dataSetType?: int32(name='DataSetType'),
      isDelete?: int32(name='IsDelete'),
      roleConfigProp?: string(name='RoleConfigProp'),
      roleConfigStatus?: int32(name='RoleConfigStatus'),
      roleConfigTask?: string(name='RoleConfigTask'),
      setBucketName?: string(name='SetBucketName'),
      setDomain?: string(name='SetDomain'),
      setFolderName?: string(name='SetFolderName'),
      setId?: long(name='SetId'),
      setName?: string(name='SetName'),
      setNumber?: int32(name='SetNumber'),
      setRoleArn?: string(name='SetRoleArn'),
      setType?: int32(name='SetType'),
      sourceDataType?: int32(name='SourceDataType'),
      subDir?: string(name='SubDir'),
      updateTime?: string(name='UpdateTime'),
      userGroup?: string(name='UserGroup'),
    }
  ](name='Data')
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataSetResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSetResponseBody(name='body'),
}

async function listDataSet(request: ListDataSetRequest): ListDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSet', 'POST', '/', 'json', false, 'json', request);
}

model ListHotWordsTasksRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListHotWordsTasksResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    hotWordsTaskPo?: [ 
    {
      dialogueParam?: {
        dataSetIds?: string(name='DataSetIds'),
        dialogueId?: long(name='DialogueId'),
        endIndex?: int32(name='EndIndex'),
        endTime?: string(name='EndTime'),
        role?: int32(name='Role'),
        sourceType?: int32(name='SourceType'),
        startIndex?: int32(name='StartIndex'),
        startTime?: string(name='StartTime'),
      }(name='DialogueParam'),
      endTime?: string(name='EndTime'),
      instanceStatus?: int32(name='InstanceStatus'),
      lastExecutionTime?: string(name='LastExecutionTime'),
      message?: string(name='Message'),
      name?: string(name='Name'),
      startTime?: string(name='StartTime'),
      status?: int32(name='Status'),
      taskConfigId?: long(name='TaskConfigId'),
      timeInterval?: int32(name='TimeInterval'),
      timeUnit?: int32(name='TimeUnit'),
      type?: int32(name='Type'),
      wordsParam?: {
        excludes?: string(name='Excludes'),
        extraConfigId?: long(name='ExtraConfigId'),
        includes?: string(name='Includes'),
      }(name='WordsParam'),
    }
  ](name='HotWordsTaskPo')
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListHotWordsTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListHotWordsTasksResponseBody(name='body'),
}

async function listHotWordsTasks(request: ListHotWordsTasksRequest): ListHotWordsTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHotWordsTasks', 'POST', '/', 'json', false, 'json', request);
}

model ListPrecisionTaskRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListPrecisionTaskResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    precisionTask?: [ 
    {
      createTime?: string(name='CreateTime'),
      dataSetId?: long(name='DataSetId'),
      dataSetName?: string(name='DataSetName'),
      duration?: int32(name='Duration'),
      incorrectWords?: int32(name='IncorrectWords'),
      name?: string(name='Name'),
      precisions?: {
        precision?: [ 
        {
          createTime?: string(name='CreateTime'),
          modelId?: long(name='ModelId'),
          modelName?: string(name='ModelName'),
          precision?: float(name='Precision'),
          status?: int32(name='Status'),
          taskId?: string(name='TaskId'),
        }
      ](name='Precision')
      }(name='Precisions'),
      source?: int32(name='Source'),
      status?: int32(name='Status'),
      taskId?: string(name='TaskId'),
      totalCount?: int32(name='TotalCount'),
      updateTime?: string(name='UpdateTime'),
      verifiedCount?: int32(name='VerifiedCount'),
    }
  ](name='PrecisionTask')
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListPrecisionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListPrecisionTaskResponseBody(name='body'),
}

async function listPrecisionTask(request: ListPrecisionTaskRequest): ListPrecisionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPrecisionTask', 'POST', '/', 'json', false, 'json', request);
}

model ListQualityCheckSchemeRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListQualityCheckSchemeResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserName?: string(name='CreateUserName', description='创建人'),
      dataType?: int32(name='DataType'),
      description?: string(name='Description', description='描述'),
      name?: string(name='Name', description='质检方案名称'),
      ruleList?: [ 
        {
          rules?: [ 
            {
              checkType?: int32(name='CheckType'),
              name?: string(name='Name'),
              rid?: long(name='Rid'),
              ruleScoreType?: int32(name='RuleScoreType'),
              scoreNum?: int32(name='ScoreNum'),
              scoreNumType?: int32(name='ScoreNumType'),
              scoreType?: int32(name='ScoreType'),
              targetType?: int32(name='TargetType'),
            }
          ](name='Rules'),
        }
      ](name='RuleList', description='规则列表'),
      schemeCheckTypeList?: [ 
        {
          checkName?: string(name='CheckName'),
          checkType?: int32(name='CheckType'),
          enable?: int32(name='Enable'),
          score?: int32(name='Score'),
          targetType?: int32(name='TargetType'),
        }
      ](name='SchemeCheckTypeList'),
      schemeId?: long(name='SchemeId', description='质检方案Id'),
      status?: int32(name='Status'),
      templateType?: int32(name='TemplateType'),
      type?: int32(name='Type'),
      updateTime?: string(name='UpdateTime'),
      updateUserName?: string(name='UpdateUserName', description='更新人'),
      version?: long(name='Version', description='质检方案版本'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCountId?: string(name='ResultCountId'),
  success?: boolean(name='Success'),
}

model ListQualityCheckSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: ListQualityCheckSchemeResponseBody(name='body'),
}

async function listQualityCheckScheme(request: ListQualityCheckSchemeRequest): ListQualityCheckSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQualityCheckScheme', 'POST', '/', 'json', false, 'json', request);
}

model ListRolesRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListRolesResponseBody = {
  code?: string(name='Code'),
  data?: {
    role?: [ 
    {
      createTime?: string(name='CreateTime'),
      displayName?: string(name='DisplayName'),
      id?: long(name='Id'),
      level?: int32(name='Level'),
      name?: string(name='Name'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Role')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRolesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRolesResponseBody(name='body'),
}

async function listRoles(request: ListRolesRequest): ListRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListRulesRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListRulesResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: [ 
    {
      businessCategoryNameList?: [ string ](name='BusinessCategoryNameList'),
      comments?: string(name='Comments'),
      createTime?: string(name='CreateTime'),
      name?: string(name='Name'),
      rid?: long(name='Rid'),
      ruleType?: int32(name='RuleType'),
      type?: int32(name='Type'),
      typeName?: string(name='TypeName'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRulesResponseBody(name='body'),
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRules', 'POST', '/', 'json', false, 'json', request);
}

model ListRulesV4Request {
  businessName?: string(name='BusinessName', position='Body'),
  businessRange?: int32(name='BusinessRange', position='Body'),
  categoryName?: string(name='CategoryName', position='Body'),
  countTotal?: boolean(name='CountTotal', position='Body'),
  createEmpid?: string(name='CreateEmpid', position='Body'),
  createUserId?: long(name='CreateUserId', position='Body'),
  currentPage?: int32(name='CurrentPage', position='Body'),
  endTime?: string(name='EndTime', position='Body'),
  lastUpdateEmpid?: string(name='LastUpdateEmpid', position='Body'),
  pageNumber?: int32(name='PageNumber', position='Body'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Body'),
  requireInfos?: [ string ](name='RequireInfos', position='Body'),
  rid?: long(name='Rid', position='Body'),
  ruleIdOrRuleName?: string(name='RuleIdOrRuleName', position='Body'),
  ruleScoreSingleType?: int32(name='RuleScoreSingleType', position='Body'),
  ruleType?: int32(name='RuleType', position='Body'),
  schemeId?: long(name='SchemeId', position='Body'),
  sourceType?: int32(name='SourceType', position='Body'),
  startTime?: string(name='StartTime', position='Body'),
  status?: int32(name='Status', position='Body'),
  type?: int32(name='Type', position='Body'),
  typeName?: string(name='TypeName', position='Body'),
  updateEndTime?: string(name='UpdateEndTime', position='Body'),
  updateStartTime?: string(name='UpdateStartTime', position='Body'),
  updateUserId?: long(name='UpdateUserId', position='Body'),
}

model ListRulesV4ResponseBody = {
  businessType?: int32(name='BusinessType'),
  code?: string(name='Code'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  data?: [
    RuleCountInfo
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: [ string ](name='Messages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListRulesV4Response = {
  headers: map[string]string(name='headers'),
  body: ListRulesV4ResponseBody(name='body'),
}

async function listRulesV4(request: ListRulesV4Request): ListRulesV4Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRulesV4', 'POST', '/', 'json', true, 'form', request);
}

model ListSchemeTaskConfigRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model ListSchemeTaskConfigResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    data?: [ 
    {
      asrTaskPriority?: int32(name='AsrTaskPriority'),
      assignType?: int32(name='AssignType'),
      createTime?: string(name='CreateTime'),
      createUser?: long(name='CreateUser'),
      dataConfig?: {
        assignConfigs?: {
          assignConfig?: [ 
          {
            assignConfigContests?: {
              assignConfigContest?: [ 
              {
                dataType?: int32(name='DataType'),
                listObject?: {
                  listObject?: [ any ](name='ListObject')
                }(name='ListObject'),
                name?: string(name='Name'),
                symbol?: int32(name='Symbol'),
                value?: string(name='Value'),
              }
            ](name='AssignConfigContest')
            }(name='AssignConfigContests'),
          }
        ](name='AssignConfig')
        }(name='AssignConfigs'),
        dataSets?: string(name='DataSets'),
        index?: int32(name='Index'),
        resultParam?: string(name='ResultParam'),
      }(name='DataConfig'),
      finishRate?: double(name='FinishRate'),
      id?: long(name='Id'),
      manualReview?: int32(name='ManualReview'),
      modeCustomizationId?: string(name='ModeCustomizationId'),
      modelName?: string(name='ModelName'),
      name?: string(name='Name'),
      numberExecuting?: int32(name='NumberExecuting'),
      numberFail?: int32(name='NumberFail'),
      numberSuccess?: int32(name='NumberSuccess'),
      numberSum?: int32(name='NumberSum'),
      schemeIdList?: {
        schemeIdList?: [ long ](name='SchemeIdList')
      }(name='SchemeIdList'),
      schemeList?: {
        schemeList?: [ 
        {
          name?: string(name='Name'),
          schemeId?: long(name='SchemeId', description='质检方案id'),
        }
      ](name='SchemeList')
      }(name='SchemeList'),
      schemeTaskConfigId?: long(name='SchemeTaskConfigId'),
      sourceDataType?: int32(name='SourceDataType'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      updateTime?: string(name='UpdateTime'),
      updateUser?: long(name='UpdateUser'),
      userGroup?: string(name='UserGroup'),
      vocabId?: string(name='VocabId'),
      vocabName?: string(name='VocabName'),
    }
  ](name='Data')
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  lastDataId?: string(name='LastDataId'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCountId?: string(name='ResultCountId'),
  success?: boolean(name='Success'),
}

model ListSchemeTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListSchemeTaskConfigResponseBody(name='body'),
}

async function listSchemeTaskConfig(request: ListSchemeTaskConfigRequest): ListSchemeTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSchemeTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListSessionGroupRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model ListSessionGroupResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    data?: [ 
    {
      assignStatus?: int32(name='AssignStatus'),
      callStartTime?: string(name='CallStartTime'),
      callerList?: {
        callerList?: [ string ](name='CallerList')
      }(name='CallerList'),
      customerIdList?: {
        customerIdList?: [ string ](name='CustomerIdList')
      }(name='CustomerIdList'),
      customerNameList?: {
        customerNameList?: [ string ](name='CustomerNameList')
      }(name='CustomerNameList'),
      customerServiceIdList?: {
        customerServiceIdList?: [ string ](name='CustomerServiceIdList')
      }(name='CustomerServiceIdList'),
      customerServiceNameList?: {
        customerServiceNameList?: [ string ](name='CustomerServiceNameList')
      }(name='CustomerServiceNameList'),
      hitSessionCount?: int32(name='HitSessionCount'),
      lastDataId?: string(name='LastDataId'),
      reviewStatus?: int32(name='ReviewStatus'),
      reviewerList?: {
        reviewerList?: [ string ](name='ReviewerList')
      }(name='ReviewerList'),
      schemeTaskConfigId?: long(name='SchemeTaskConfigId'),
      schemeTaskConfigName?: string(name='SchemeTaskConfigName'),
      score?: long(name='Score'),
      sessionCount?: int32(name='SessionCount'),
      sessionGroupId?: string(name='SessionGroupId'),
      sessionGroupReviewedOrComplained?: boolean(name='SessionGroupReviewedOrComplained'),
      skillGroupNameList?: {
        skillGroupNameList?: [ string ](name='SkillGroupNameList')
      }(name='SkillGroupNameList'),
    }
  ](name='Data')
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  lastDataId?: string(name='LastDataId'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  resultCountId?: string(name='ResultCountId'),
  success?: boolean(name='Success'),
}

model ListSessionGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListSessionGroupResponseBody(name='body'),
}

async function listSessionGroup(request: ListSessionGroupRequest): ListSessionGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSessionGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListSkillGroupConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListSkillGroupConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    skillGroupConfig?: [ 
    {
      allContentQualityCheck?: int32(name='AllContentQualityCheck'),
      allRids?: string(name='AllRids'),
      allRuleList?: {
        ruleNameInfo?: [ 
        {
          rid?: long(name='Rid'),
          ruleName?: string(name='RuleName'),
        }
      ](name='RuleNameInfo')
      }(name='AllRuleList'),
      createTime?: string(name='CreateTime'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      modelId?: long(name='ModelId'),
      modelName?: string(name='ModelName'),
      name?: string(name='Name'),
      qualityCheckType?: int32(name='QualityCheckType'),
      rid?: string(name='Rid'),
      ruleList?: {
        ruleNameInfo?: [ 
        {
          rid?: long(name='Rid'),
          ruleName?: string(name='RuleName'),
        }
      ](name='RuleNameInfo')
      }(name='RuleList'),
      screenSwitch?: boolean(name='ScreenSwitch'),
      skillGroupFrom?: int32(name='SkillGroupFrom'),
      skillGroupId?: string(name='SkillGroupId'),
      skillGroupName?: string(name='SkillGroupName'),
      skillGroupScreens?: {
        skillGroupScreen?: [ 
        {
          dataType?: int32(name='DataType'),
          name?: string(name='Name'),
          symbol?: int32(name='Symbol'),
          value?: string(name='Value'),
        }
      ](name='SkillGroupScreen')
      }(name='SkillGroupScreens'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      updateTime?: string(name='UpdateTime'),
      vocabId?: long(name='VocabId'),
      vocabName?: string(name='VocabName'),
    }
  ](name='SkillGroupConfig')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListSkillGroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListSkillGroupConfigResponseBody(name='body'),
}

async function listSkillGroupConfig(request: ListSkillGroupConfigRequest): ListSkillGroupConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSkillGroupConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskAssignRulesRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListTaskAssignRulesResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    taskAssignRuleInfo?: [ 
    {
      agents?: {
        agent?: [ 
        {
          agentId?: string(name='AgentId'),
          agentName?: string(name='AgentName'),
        }
      ](name='Agent')
      }(name='Agents'),
      agentsStr?: string(name='AgentsStr'),
      assignmentType?: int32(name='AssignmentType'),
      callTimeEnd?: long(name='CallTimeEnd'),
      callTimeStart?: long(name='CallTimeStart'),
      callType?: int32(name='CallType'),
      createTime?: string(name='CreateTime'),
      durationMax?: int32(name='DurationMax'),
      durationMin?: int32(name='DurationMin'),
      enabled?: int32(name='Enabled'),
      priority?: int32(name='Priority'),
      reviewers?: {
        reviewer?: [ 
        {
          reviewerId?: string(name='ReviewerId'),
          reviewerName?: string(name='ReviewerName'),
        }
      ](name='Reviewer')
      }(name='Reviewers'),
      ruleId?: long(name='RuleId'),
      ruleName?: string(name='RuleName'),
      rules?: {
        ruleBasicInfo?: [ 
        {
          name?: string(name='Name'),
          rid?: string(name='Rid'),
        }
      ](name='RuleBasicInfo')
      }(name='Rules'),
      samplingMode?: {
        anyNumberOfDraws?: int32(name='AnyNumberOfDraws'),
        designated?: boolean(name='Designated'),
        dimension?: int32(name='Dimension'),
        limit?: int32(name='Limit'),
        numberOfDraws?: int32(name='NumberOfDraws'),
        proportion?: float(name='Proportion'),
        randomInspectionNumber?: int32(name='RandomInspectionNumber'),
        samplingModeAgents?: {
          samplingModeAgent?: [ 
          {
            agentId?: string(name='AgentId'),
            agentName?: string(name='AgentName'),
          }
        ](name='SamplingModeAgent')
        }(name='SamplingModeAgents'),
      }(name='SamplingMode'),
      skillGroups?: {
        skillGroup?: [ 
        {
          skillId?: string(name='SkillId'),
          skillName?: string(name='SkillName'),
        }
      ](name='SkillGroup')
      }(name='SkillGroups'),
      skillGroupsStr?: string(name='SkillGroupsStr'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='TaskAssignRuleInfo')
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTaskAssignRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskAssignRulesResponseBody(name='body'),
}

async function listTaskAssignRules(request: ListTaskAssignRulesRequest): ListTaskAssignRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskAssignRules', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListUsersResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    user?: [ 
    {
      aliUid?: string(name='AliUid'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      displayName?: string(name='DisplayName'),
      id?: long(name='Id'),
      loginUserType?: int32(name='LoginUserType'),
      roleName?: string(name='RoleName'),
      updateTime?: string(name='UpdateTime'),
      userName?: string(name='UserName'),
    }
  ](name='User')
  }(name='Data'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListWarningConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListWarningConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    warningConfigInfo?: [ 
    {
      channels?: {
        channel?: [ 
        {
          type?: int32(name='Type'),
          url?: string(name='Url'),
        }
      ](name='Channel')
      }(name='Channels'),
      configId?: long(name='ConfigId'),
      configName?: string(name='ConfigName'),
      createTime?: string(name='CreateTime'),
      ridList?: {
        ridList?: [ string ](name='RidList')
      }(name='RidList'),
      ruleList?: {
        warningRule?: [ 
        {
          rid?: long(name='Rid'),
          ruleName?: string(name='RuleName'),
        }
      ](name='WarningRule')
      }(name='RuleList'),
      status?: int32(name='Status'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='WarningConfigInfo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListWarningConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListWarningConfigResponseBody(name='body'),
}

async function listWarningConfig(request: ListWarningConfigRequest): ListWarningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWarningConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListWarningStrategyConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model ListWarningStrategyConfigResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    data?: [ 
    {
      id?: long(name='Id'),
      intervalTime?: long(name='IntervalTime'),
      lambda?: string(name='Lambda'),
      level?: long(name='Level'),
      maxNumber?: long(name='MaxNumber'),
      name?: string(name='Name'),
    }
  ](name='data')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListWarningStrategyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ListWarningStrategyConfigResponseBody(name='body'),
}

async function listWarningStrategyConfig(request: ListWarningStrategyConfigRequest): ListWarningStrategyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWarningStrategyConfig', 'POST', '/', 'json', false, 'json', request);
}

model RestartAsrTaskRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model RestartAsrTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    restartResult?: [ 
    {
      data?: string(name='Data'),
      message?: string(name='Message'),
      success?: boolean(name='Success'),
    }
  ](name='RestartResult')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RestartAsrTaskResponse = {
  headers: map[string]string(name='headers'),
  body: RestartAsrTaskResponseBody(name='body'),
}

async function restartAsrTask(request: RestartAsrTaskRequest): RestartAsrTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartAsrTask', 'POST', '/', 'json', false, 'json', request);
}

model RevertAssignedSessionRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model RevertAssignedSessionResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RevertAssignedSessionResponse = {
  headers: map[string]string(name='headers'),
  body: RevertAssignedSessionResponseBody(name='body'),
}

async function revertAssignedSession(request: RevertAssignedSessionRequest): RevertAssignedSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevertAssignedSession', 'POST', '/', 'json', false, 'json', request);
}

model RevertAssignedSessionGroupRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model RevertAssignedSessionGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RevertAssignedSessionGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RevertAssignedSessionGroupResponseBody(name='body'),
}

async function revertAssignedSessionGroup(request: RevertAssignedSessionGroupRequest): RevertAssignedSessionGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevertAssignedSessionGroup', 'POST', '/', 'json', false, 'json', request);
}

model SaveConfigDataSetRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model SaveConfigDataSetResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveConfigDataSetResponse = {
  headers: map[string]string(name='headers'),
  body: SaveConfigDataSetResponseBody(name='body'),
}

async function saveConfigDataSet(request: SaveConfigDataSetRequest): SaveConfigDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveConfigDataSet', 'POST', '/', 'json', false, 'json', request);
}

model SubmitComplaintRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model SubmitComplaintResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitComplaintResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitComplaintResponseBody(name='body'),
}

async function submitComplaint(request: SubmitComplaintRequest): SubmitComplaintResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitComplaint', 'POST', '/', 'json', false, 'json', request);
}

model SubmitPrecisionTaskRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model SubmitPrecisionTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitPrecisionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitPrecisionTaskResponseBody(name='body'),
}

async function submitPrecisionTask(request: SubmitPrecisionTaskRequest): SubmitPrecisionTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitPrecisionTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitQualityCheckTaskRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model SubmitQualityCheckTaskResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitQualityCheckTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitQualityCheckTaskResponseBody(name='body'),
}

async function submitQualityCheckTask(request: SubmitQualityCheckTaskRequest): SubmitQualityCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitQualityCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model SubmitReviewInfoRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model SubmitReviewInfoResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitReviewInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitReviewInfoResponseBody(name='body'),
}

async function submitReviewInfo(request: SubmitReviewInfoRequest): SubmitReviewInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitReviewInfo', 'POST', '/', 'json', false, 'json', request);
}

model SyncQualityCheckRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model SyncQualityCheckResponseBody = {
  code?: string(name='Code'),
  data?: {
    beginTime?: long(name='BeginTime'),
    rules?: [ 
      {
        hit?: [ 
          {
            hitKeyWords?: [ 
              {
                cid?: int32(name='Cid'),
                from?: int32(name='From'),
                pid?: int32(name='Pid'),
                to?: int32(name='To'),
                val?: string(name='Val'),
              }
            ](name='HitKeyWords'),
            phrase?: {
              begin?: long(name='Begin'),
              emotionValue?: int32(name='EmotionValue'),
              end?: long(name='End'),
              identity?: string(name='Identity'),
              role?: string(name='Role'),
              silenceDuration?: int32(name='SilenceDuration'),
              speechRate?: int32(name='SpeechRate'),
              words?: string(name='Words'),
            }(name='Phrase'),
          }
        ](name='Hit'),
        rid?: string(name='Rid'),
        ruleName?: string(name='RuleName'),
      }
    ](name='Rules'),
    score?: int32(name='Score'),
    taskId?: string(name='TaskId'),
    tid?: string(name='Tid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncQualityCheckResponse = {
  headers: map[string]string(name='headers'),
  body: SyncQualityCheckResponseBody(name='body'),
}

async function syncQualityCheck(request: SyncQualityCheckRequest): SyncQualityCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncQualityCheck', 'POST', '/', 'json', false, 'json', request);
}

model TestRuleV4Request {
  isSchemeData?: int32(name='IsSchemeData', position='Body'),
  testJson: string(name='TestJson', position='Body'),
}

model TestRuleV4ResponseBody = {
  code?: string(name='Code', description='结果代码，200表示成功，若为别的值则表示失败，调用方可根据此字段判断失败原因。'),
  data?: {
    hitRuleReviewInfoList?: [ 
      {
        branchHitId?: long(name='BranchHitId'),
        branchInfoList?: [ 
          {
            checkType?: int32(name='CheckType'),
            index?: int32(name='Index'),
            lambda?: string(name='Lambda'),
            name?: string(name='Name'),
            nextNodeId?: long(name='NextNodeId'),
            situation?: NextNodeSituations(name='Situation'),
            triggers?: [ string ](name='Triggers'),
          }
        ](name='BranchInfoList'),
        conditionHitInfoList?: [ 
          {
            cid?: [ string ](name='Cid'),
            keyWords?: [ 
              {
                cid?: string(name='Cid'),
                customizeCode?: string(name='CustomizeCode'),
                from?: int32(name='From'),
                oid?: string(name='Oid'),
                operatorKey?: string(name='OperatorKey'),
                pid?: int32(name='Pid'),
                similarPhrase?: string(name='SimilarPhrase'),
                tid?: string(name='Tid'),
                to?: int32(name='To'),
                uuid?: string(name='Uuid'),
                val?: string(name='Val'),
              }
            ](name='KeyWords'),
            phrase?: {
              begin?: long(name='Begin'),
              beginTime?: string(name='BeginTime'),
              channelId?: int32(name='ChannelId'),
              emotionFineGrainedValue?: int32(name='EmotionFineGrainedValue'),
              emotionValue?: int32(name='EmotionValue'),
              end?: long(name='End'),
              hitStatus?: int32(name='HitStatus'),
              hourMinSec?: string(name='HourMinSec'),
              identity?: string(name='Identity'),
              pid?: int32(name='Pid'),
              renterId?: long(name='RenterId'),
              role?: string(name='Role'),
              sid?: long(name='Sid'),
              silenceDuration?: int32(name='SilenceDuration'),
              speechRate?: int32(name='SpeechRate'),
              uuid?: string(name='Uuid'),
              words?: string(name='Words'),
            }(name='Phrase'),
          }
        ](name='ConditionHitInfoList'),
        conditionInfoList?: [
          ConditionBasicInfo
        ](name='ConditionInfoList'),
        judgeNodeName?: string(name='JudgeNodeName'),
        lambda?: string(name='Lambda'),
        matched?: boolean(name='Matched'),
        nodeType?: string(name='NodeType'),
        rid?: long(name='Rid'),
        ruleName?: string(name='RuleName'),
        ruleScoreType?: int32(name='RuleScoreType'),
        scoreNumType?: int32(name='ScoreNumType'),
        taskFlowId?: long(name='TaskFlowId'),
      }
    ](name='HitRuleReviewInfoList'),
    hitTaskFlowList?: [ 
      {
        graphFlow?: TaskGraphFlow(name='GraphFlow'),
        rid?: long(name='Rid'),
        taskFlowType?: int32(name='TaskFlowType'),
      }
    ](name='HitTaskFlowList'),
    unhitRuleReviewInfoList?: [ 
      {
        conditionInfoList?: [
          ConditionBasicInfo
        ](name='ConditionInfoList'),
        matched?: boolean(name='Matched'),
        rid?: long(name='Rid'),
        taskFlowType?: int32(name='TaskFlowType'),
      }
    ](name='UnhitRuleReviewInfoList'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP状态码。'),
  message?: string(name='Message', description='出错时表示出错详情，成功时为successful。'),
  requestId?: string(name='RequestId', description='请求Id。'),
  success?: boolean(name='Success', description='请求是否成功，调用方可根据此字段来判断请求是否成功：true表示成功；false/null表示失败。'),
}

model TestRuleV4Response = {
  headers: map[string]string(name='headers'),
  body: TestRuleV4ResponseBody(name='body'),
}

async function testRuleV4(request: TestRuleV4Request): TestRuleV4Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestRuleV4', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAsrVocabRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateAsrVocabResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateAsrVocabResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAsrVocabResponseBody(name='body'),
}

async function updateAsrVocab(request: UpdateAsrVocabRequest): UpdateAsrVocabResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAsrVocab', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCheckTypeToSchemeRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model UpdateCheckTypeToSchemeResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCheckTypeToSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCheckTypeToSchemeResponseBody(name='body'),
}

async function updateCheckTypeToScheme(request: UpdateCheckTypeToSchemeRequest): UpdateCheckTypeToSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCheckTypeToScheme', 'POST', '/', 'json', false, 'json', request);
}

model UpdateQualityCheckDataRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateQualityCheckDataResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateQualityCheckDataResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQualityCheckDataResponseBody(name='body'),
}

async function updateQualityCheckData(request: UpdateQualityCheckDataRequest): UpdateQualityCheckDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQualityCheckData', 'POST', '/', 'json', false, 'json', request);
}

model UpdateQualityCheckSchemeRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model UpdateQualityCheckSchemeResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateQualityCheckSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQualityCheckSchemeResponseBody(name='body'),
}

async function updateQualityCheckScheme(request: UpdateQualityCheckSchemeRequest): UpdateQualityCheckSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQualityCheckScheme', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleResponseBody(name='body'),
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleByIdRequest {
  isCopy?: boolean(name='IsCopy', position='Body'),
  jsonStrForRule: string(name='JsonStrForRule', position='Body'),
  returnRelatedSchemes?: boolean(name='ReturnRelatedSchemes', position='Body'),
  ruleId?: long(name='RuleId', position='Body'),
}

model UpdateRuleByIdResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRuleByIdResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleByIdResponseBody(name='body'),
}

async function updateRuleById(request: UpdateRuleByIdRequest): UpdateRuleByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleById', 'POST', '/', 'json', true, 'form', request);
}

model UpdateRuleToSchemeRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model UpdateRuleToSchemeResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRuleToSchemeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleToSchemeResponseBody(name='body'),
}

async function updateRuleToScheme(request: UpdateRuleToSchemeRequest): UpdateRuleToSchemeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleToScheme', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleV4Request {
  jsonStrForRule: string(name='JsonStrForRule', position='Body'),
  ruleId?: long(name='RuleId', position='Body'),
}

model UpdateRuleV4ResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRuleV4Response = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleV4ResponseBody(name='body'),
}

async function updateRuleV4(request: UpdateRuleV4Request): UpdateRuleV4Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleV4', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSchemeTaskConfigRequest {
  jsonStr?: string(name='jsonStr', position='Query'),
}

model UpdateSchemeTaskConfigResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  messages?: {
    message?: [ string ](name='Message')
  }(name='Messages'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSchemeTaskConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSchemeTaskConfigResponseBody(name='body'),
}

async function updateSchemeTaskConfig(request: UpdateSchemeTaskConfigRequest): UpdateSchemeTaskConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSchemeTaskConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateScoreForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateScoreForApiResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateScoreForApiResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateScoreForApiResponseBody(name='body'),
}

async function updateScoreForApi(request: UpdateScoreForApiRequest): UpdateScoreForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScoreForApi', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSkillGroupConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateSkillGroupConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSkillGroupConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSkillGroupConfigResponseBody(name='body'),
}

async function updateSkillGroupConfig(request: UpdateSkillGroupConfigRequest): UpdateSkillGroupConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSkillGroupConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubScoreForApiRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateSubScoreForApiResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSubScoreForApiResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubScoreForApiResponseBody(name='body'),
}

async function updateSubScoreForApi(request: UpdateSubScoreForApiRequest): UpdateSubScoreForApiResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubScoreForApi', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSyncQualityCheckDataRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateSyncQualityCheckDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    taskId?: string(name='TaskId'),
    tid?: string(name='Tid'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSyncQualityCheckDataResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSyncQualityCheckDataResponseBody(name='body'),
}

async function updateSyncQualityCheckData(request: UpdateSyncQualityCheckDataRequest): UpdateSyncQualityCheckDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSyncQualityCheckData', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTaskAssignRuleRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateTaskAssignRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateTaskAssignRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTaskAssignRuleResponseBody(name='body'),
}

async function updateTaskAssignRule(request: UpdateTaskAssignRuleRequest): UpdateTaskAssignRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTaskAssignRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateUserConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateUserConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserConfigResponseBody(name='body'),
}

async function updateUserConfig(request: UpdateUserConfigRequest): UpdateUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWarningConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateWarningConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWarningConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWarningConfigResponseBody(name='body'),
}

async function updateWarningConfig(request: UpdateWarningConfigRequest): UpdateWarningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWarningConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWarningStrategyConfigRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UpdateWarningStrategyConfigResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateWarningStrategyConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWarningStrategyConfigResponseBody(name='body'),
}

async function updateWarningStrategyConfig(request: UpdateWarningStrategyConfigRequest): UpdateWarningStrategyConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWarningStrategyConfig', 'POST', '/', 'json', false, 'json', request);
}

model UploadAudioDataRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UploadAudioDataResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UploadAudioDataResponse = {
  headers: map[string]string(name='headers'),
  body: UploadAudioDataResponseBody(name='body'),
}

async function uploadAudioData(request: UploadAudioDataRequest): UploadAudioDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadAudioData', 'POST', '/', 'json', false, 'json', request);
}

model UploadDataRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UploadDataResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UploadDataResponse = {
  headers: map[string]string(name='headers'),
  body: UploadDataResponseBody(name='body'),
}

async function uploadData(request: UploadDataRequest): UploadDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadData', 'POST', '/', 'json', false, 'json', request);
}

model UploadDataSyncRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UploadDataSyncResponseBody = {
  code?: string(name='Code'),
  data?: {
    resultInfo?: [ 
    {
      handScoreIdList?: {
        handScoreIdList?: [ string ](name='HandScoreIdList')
      }(name='HandScoreIdList'),
      rules?: {
        ruleHitInfo?: [ 
        {
          conditionInfo?: {
            conditionBasicInfo?: [ 
            {
              conditionInfoCid?: string(name='ConditionInfoCid'),
            }
          ](name='ConditionBasicInfo')
          }(name='ConditionInfo'),
          hit?: {
            conditionHitInfo?: [ 
            {
              hitCids?: {
                cidItem?: [ string ](name='CidItem')
              }(name='HitCids'),
              hitKeyWords?: {
                hitKeyWord?: [ 
                {
                  from?: int32(name='From'),
                  pid?: int32(name='Pid'),
                  tid?: string(name='Tid'),
                  to?: int32(name='To'),
                  val?: string(name='Val'),
                }
              ](name='HitKeyWord')
              }(name='HitKeyWords'),
              phrase?: {
                begin?: long(name='Begin'),
                beginTime?: string(name='BeginTime'),
                end?: long(name='End'),
                identity?: string(name='Identity'),
                role?: string(name='Role'),
                words?: string(name='Words'),
              }(name='Phrase'),
            }
          ](name='ConditionHitInfo')
          }(name='Hit'),
          rid?: string(name='Rid'),
          tid?: string(name='Tid'),
        }
      ](name='RuleHitInfo')
      }(name='Rules'),
      score?: int32(name='Score'),
    }
  ](name='ResultInfo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UploadDataSyncResponse = {
  headers: map[string]string(name='headers'),
  body: UploadDataSyncResponseBody(name='body'),
}

async function uploadDataSync(request: UploadDataSyncRequest): UploadDataSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadDataSync', 'POST', '/', 'json', false, 'json', request);
}

model UploadRuleRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model UploadRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    ridInfo?: [ string ](name='RidInfo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UploadRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UploadRuleResponseBody(name='body'),
}

async function uploadRule(request: UploadRuleRequest): UploadRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadRule', 'POST', '/', 'json', false, 'json', request);
}

model VerifyFileRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model VerifyFileResponseBody = {
  code?: string(name='Code'),
  data?: float(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model VerifyFileResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyFileResponseBody(name='body'),
}

async function verifyFile(request: VerifyFileRequest): VerifyFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyFile', 'POST', '/', 'json', false, 'json', request);
}

model VerifySentenceRequest {
  jsonStr: string(name='JsonStr', position='Query'),
}

model VerifySentenceResponseBody = {
  code?: string(name='Code'),
  data?: {
    delta?: [ 
    {
      source?: {
        line?: {
          line?: [ string ](name='Line')
        }(name='Line'),
        position?: int32(name='Position'),
      }(name='Source'),
      target?: {
        line?: {
          line?: [ string ](name='Line')
        }(name='Line'),
        position?: int32(name='Position'),
      }(name='Target'),
      type?: string(name='Type'),
    }
  ](name='Delta')
  }(name='Data'),
  incorrectWords?: int32(name='IncorrectWords'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  sourceRole?: int32(name='SourceRole'),
  success?: boolean(name='Success'),
  targetRole?: int32(name='TargetRole'),
}

model VerifySentenceResponse = {
  headers: map[string]string(name='headers'),
  body: VerifySentenceResponseBody(name='body'),
}

async function verifySentence(request: VerifySentenceRequest): VerifySentenceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifySentence', 'POST', '/', 'json', false, 'json', request);
}

