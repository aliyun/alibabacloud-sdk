/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('ehpc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddonNodeTemplate {
  autoRenew?: boolean(name='AutoRenew', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='1'),
  dataDisks?: [ 
    {
      category?: string(name='Category', example='cloud_auto'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', example='false'),
      level?: string(name='Level', example='PL0'),
      size?: int32(name='Size', example='40'),
    }
  ](name='DataDisks'),
  duration?: int32(name='Duration', example='1'),
  enableHT?: boolean(name='EnableHT', example='true'),
  imageId?: string(name='ImageId', description='This parameter is required.', example='aliyun_3_x64_20G_alibase_20221102.vhd'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType', description='This parameter is required.', example='ecs.c7.4xlarge'),
  osName?: string(name='OsName', description='This parameter is required.', example='CentOS  7.6 64 位'),
  osNameEN?: string(name='OsNameEN', description='This parameter is required.', example='CentOS  7.6 64 bit'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  spotPriceLimit?: float(name='SpotPriceLimit', example='0.97'),
  spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
  systemDisk?: {
    category?: string(name='Category', example='cloud_auto'),
    level?: string(name='Level', example='PL0'),
    size?: int32(name='Size', example='40'),
  }(name='SystemDisk'),
}

model NodeTemplate {
  autoRenew?: boolean(name='AutoRenew', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='1'),
  dataDisks?: [ 
    {
      category?: string(name='Category', example='cloud_auto'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', example='false'),
      level?: string(name='Level', example='PL0'),
      size?: int32(name='Size', example='40'),
    }
  ](name='DataDisks'),
  duration?: int32(name='Duration', example='1'),
  enableHT?: boolean(name='EnableHT', example='true'),
  imageId?: string(name='ImageId', example='aliyun_3_x64_20G_alibase_20221102.vhd'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  instanceType?: string(name='InstanceType', example='ecs.c7.4xlarge'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
  spotPriceLimit?: float(name='SpotPriceLimit', example='0.97'),
  spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
  systemDisk?: {
    category?: string(name='Category', example='cloud_auto'),
    level?: string(name='Level', example='PL0'),
    size?: int32(name='Size', example='40'),
  }(name='SystemDisk'),
}

model QueueTemplate {
  allocationStrategy?: string(name='AllocationStrategy', example='PriorityInstanceType'),
  computeNodes?: [
    NodeTemplate
  ](name='ComputeNodes'),
  enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
  enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
  hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
  hostnameSuffix?: string(name='HostnameSuffix'),
  initialCount?: int32(name='InitialCount', example='0'),
  interConnect?: string(name='InterConnect', example='erdma'),
  keepAliveNodes?: [ string ](name='KeepAliveNodes'),
  maxCount?: int32(name='MaxCount', example='1000'),
  maxCountPerCycle?: long(name='MaxCountPerCycle', example='99'),
  minCount?: int32(name='MinCount', example='0'),
  queueName?: string(name='QueueName', description='This parameter is required.', example='comp'),
  ramRole?: string(name='RamRole', example='AliyunECSInstanceForEHPCRole'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
}

model SharedStorageTemplate {
  fileSystemId?: string(name='FileSystemId', example='008b63****'),
  mountDirectory?: string(name='MountDirectory', example='/home'),
  mountOptions?: string(name='MountOptions', example='-t nfs -o vers=3,nolock,noresvport'),
  mountTargetDomain?: string(name='MountTargetDomain', example='008b****-sihc.cn-hangzhou.extreme.nas.aliyuncs.com'),
  NASDirectory?: string(name='NASDirectory', example='/'),
  protocolType?: string(name='ProtocolType', example='NFS'),
}

model AttachSharedStoragesRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  sharedStorages?: [ 
    {
      fileSystemId?: string(name='FileSystemId', description='This parameter is required.', example='0bd504b0**'),
      location?: string(name='Location', example='PublicCloud'),
      mountDirectory?: string(name='MountDirectory', description='This parameter is required.', example='/test'),
      mountOptions?: string(name='MountOptions', example='-t nfs -o vers=3,nolock,proto=tcp,noresvport'),
      mountTarget?: string(name='MountTarget', description='This parameter is required.', example='0bd504b***-ngq26.cn-hangzhou.nas.aliyuncs.com'),
      protocolType?: string(name='ProtocolType', description='This parameter is required.', example='NFS'),
      storageDirectory?: string(name='StorageDirectory', description='This parameter is required.', example='/testehpc'),
      volumeType?: string(name='VolumeType', description='This parameter is required.', example='nas'),
    }
  ](name='SharedStorages', description='This parameter is required.'),
}

model AttachSharedStoragesShrinkRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  sharedStoragesShrink?: string(name='SharedStorages', description='This parameter is required.'),
}

model AttachSharedStoragesResponseBody = {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  requestId?: string(name='RequestId', example='F9B7BEF8-E42E-5090-9880-55FB7872****'),
  success?: string(name='Success', example='true'),
}

model AttachSharedStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachSharedStoragesResponseBody(name='body'),
}

/**
 * @summary 挂载共享存储
 *
 * @param tmpReq AttachSharedStoragesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AttachSharedStoragesResponse
 */
async function attachSharedStoragesWithOptions(tmpReq: AttachSharedStoragesRequest, runtime: Util.RuntimeOptions): AttachSharedStoragesResponse {
  Util.validateModel(tmpReq);
  var request = new AttachSharedStoragesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sharedStorages)) {
    request.sharedStoragesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sharedStorages, 'SharedStorages', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.sharedStoragesShrink)) {
    query['SharedStorages'] = request.sharedStoragesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachSharedStorages',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 挂载共享存储
 *
 * @param request AttachSharedStoragesRequest
 * @return AttachSharedStoragesResponse
 */
async function attachSharedStorages(request: AttachSharedStoragesRequest): AttachSharedStoragesResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachSharedStoragesWithOptions(request, runtime);
}

model CreateClusterRequest {
  additionalPackages?: [ 
    {
      name?: string(name='Name', example='mpich'),
      version?: string(name='Version', example='4.0.3'),
    }
  ](name='AdditionalPackages'),
  addons?: [ 
    {
      name?: string(name='Name', description='This parameter is required.', example='Login'),
      resourcesSpec?: string(name='ResourcesSpec', example='"{\\\\\\\\"EipResource\\\\\\\\": {\\\\\\\\"AutoCreate\\\\\\\\": true}, \\\\\\\\"EcsResources\\\\\\\\": [{\\\\\\\\"InstanceType\\\\\\\\": \\\\\\\\"ecs.c7.xlarge\\\\\\\\", \\\\\\\\"ImageId\\\\\\\\": \\\\\\\\"centos_7_6_x64_20G_alibase_20211130.vhd\\\\\\\\", \\\\\\\\"SystemDisk\\\\\\\\": {\\\\\\\\"Category\\\\\\\\": \\\\\\\\"cloud_essd\\\\\\\\", \\\\\\\\"Size\\\\\\\\": 40, \\\\\\\\"Level\\\\\\\\": \\\\\\\\"PL0\\\\\\\\"}, \\\\\\\\"EnableHT\\\\\\\\": true, \\\\\\\\"InstanceChargeType\\\\\\\\": \\\\\\\\"PostPaid\\\\\\\\", \\\\\\\\"SpotStrategy\\\\\\\\": \\\\\\\\"NoSpot\\\\\\\\"}]}"'),
      servicesSpec?: string(name='ServicesSpec', example='"[{\\\\\\\\"ServiceName\\\\\\\\": \\\\\\\\"SSH\\\\\\\\", \\\\\\\\"ServiceAccessType\\\\\\\\": null, \\\\\\\\"ServiceAccessUrl\\\\\\\\": null, \\\\\\\\"NetworkACL\\\\\\\\": [{\\\\\\\\"IpProtocol\\\\\\\\": \\\\\\\\"TCP\\\\\\\\", \\\\\\\\"Port\\\\\\\\": 22, \\\\\\\\"SourceCidrIp\\\\\\\\": \\\\\\\\"0.0.0.0/0\\\\\\\\"}]}, {\\\\\\\\"ServiceName\\\\\\\\": \\\\\\\\"VNC\\\\\\\\", \\\\\\\\"ServiceAccessType\\\\\\\\": null, \\\\\\\\"ServiceAccessUrl\\\\\\\\": null, \\\\\\\\"NetworkACL\\\\\\\\": [{\\\\\\\\"IpProtocol\\\\\\\\": \\\\\\\\"TCP\\\\\\\\", \\\\\\\\"Port\\\\\\\\": 12016, \\\\\\\\"SourceCidrIp\\\\\\\\": \\\\\\\\"0.0.0.0/0\\\\\\\\"}]}, {\\\\\\\\"ServiceName\\\\\\\\": \\\\\\\\"CLIENT\\\\\\\\", \\\\\\\\"ServiceAccessType\\\\\\\\": \\\\\\\\"URL\\\\\\\\", \\\\\\\\"ServiceAccessUrl\\\\\\\\": \\\\\\\\"\\\\\\\\", \\\\\\\\"NetworkACL\\\\\\\\": [{\\\\\\\\"IpProtocol\\\\\\\\": \\\\\\\\"TCP\\\\\\\\", \\\\\\\\"Port\\\\\\\\": 12011, \\\\\\\\"SourceCidrIp\\\\\\\\": \\\\\\\\"0.0.0.0/0\\\\\\\\"}]}]"'),
      version?: string(name='Version', description='This parameter is required.', example='1.0'),
    }
  ](name='Addons'),
  clientVersion?: string(name='ClientVersion', example='2.1.0'),
  clusterCategory?: string(name='ClusterCategory', example='Standard'),
  clusterCredentials?: {
    keyPairName?: string(name='KeyPairName', example='ali0824'),
    password?: string(name='Password', example='**********'),
  }(name='ClusterCredentials'),
  clusterCustomConfiguration?: {
    args?: string(name='Args', example='E-HPC cn-hangzhou'),
    script?: string(name='Script', example='http://*****'),
  }(name='ClusterCustomConfiguration'),
  clusterDescription?: string(name='ClusterDescription', example='slurm22.05.8-cluster-20240718'),
  clusterMode?: string(name='ClusterMode', example='Integrated'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-cluster-20240718'),
  clusterVSwitchId?: string(name='ClusterVSwitchId', example='vsw-f8za5p0mwzgdu3wgx****'),
  clusterVpcId?: string(name='ClusterVpcId', example='vpc-m5efjevmclc0xdmys****'),
  deletionProtection?: boolean(name='DeletionProtection', example='false'),
  isEnterpriseSecurityGroup?: boolean(name='IsEnterpriseSecurityGroup', example='false'),
  manager?: {
    DNS?: {
      type?: string(name='Type', example='NIS'),
      version?: string(name='Version', example='2.31'),
    }(name='DNS'),
    directoryService?: {
      type?: string(name='Type', example='NIS'),
      version?: string(name='Version', example='2.31'),
    }(name='DirectoryService'),
    managerNode?: NodeTemplate(name='ManagerNode'),
    scheduler?: {
      type?: string(name='Type', example='SLURM'),
      version?: string(name='Version', example='22.05.8'),
    }(name='Scheduler'),
  }(name='Manager'),
  maxCoreCount?: int32(name='MaxCoreCount', example='10000'),
  maxCount?: int32(name='MaxCount', example='500'),
  queues?: [
    QueueTemplate
  ](name='Queues'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4******'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-bp13n61xsydodfyg****'),
  sharedStorages?: [
    SharedStorageTemplate
  ](name='SharedStorages'),
  tags?: [ 
    {
      key?: string(name='Key', example='ClusterId'),
      value?: string(name='Value', example='ehpc-hz-******'),
    }
  ](name='Tags'),
}

model CreateClusterShrinkRequest {
  additionalPackagesShrink?: string(name='AdditionalPackages'),
  addonsShrink?: string(name='Addons'),
  clientVersion?: string(name='ClientVersion', example='2.1.0'),
  clusterCategory?: string(name='ClusterCategory', example='Standard'),
  clusterCredentialsShrink?: string(name='ClusterCredentials'),
  clusterCustomConfigurationShrink?: string(name='ClusterCustomConfiguration'),
  clusterDescription?: string(name='ClusterDescription', example='slurm22.05.8-cluster-20240718'),
  clusterMode?: string(name='ClusterMode', example='Integrated'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-cluster-20240718'),
  clusterVSwitchId?: string(name='ClusterVSwitchId', example='vsw-f8za5p0mwzgdu3wgx****'),
  clusterVpcId?: string(name='ClusterVpcId', example='vpc-m5efjevmclc0xdmys****'),
  deletionProtection?: boolean(name='DeletionProtection', example='false'),
  isEnterpriseSecurityGroup?: boolean(name='IsEnterpriseSecurityGroup', example='false'),
  managerShrink?: string(name='Manager'),
  maxCoreCount?: int32(name='MaxCoreCount', example='10000'),
  maxCount?: int32(name='MaxCount', example='500'),
  queuesShrink?: string(name='Queues'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4******'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-bp13n61xsydodfyg****'),
  sharedStoragesShrink?: string(name='SharedStorages'),
  tagsShrink?: string(name='Tags'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr******'),
  requestId?: string(name='RequestId', example='F6757FA4-8FED-4602-B7F5-3550C0******'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='F6757FA4-8FED-4602-B7F5-3550C0******'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

/**
 * @summary 创建一个按量付费或者预付费（包年包月） 集群	
 *
 * @param tmpReq CreateClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateClusterResponse
 */
async function createClusterWithOptions(tmpReq: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(tmpReq);
  var request = new CreateClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.additionalPackages)) {
    request.additionalPackagesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.additionalPackages, 'AdditionalPackages', 'json');
  }
  if (!Util.isUnset(tmpReq.addons)) {
    request.addonsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addons, 'Addons', 'json');
  }
  if (!Util.isUnset(tmpReq.clusterCredentials)) {
    request.clusterCredentialsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clusterCredentials, 'ClusterCredentials', 'json');
  }
  if (!Util.isUnset(tmpReq.clusterCustomConfiguration)) {
    request.clusterCustomConfigurationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clusterCustomConfiguration, 'ClusterCustomConfiguration', 'json');
  }
  if (!Util.isUnset(tmpReq.manager)) {
    request.managerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.manager, 'Manager', 'json');
  }
  if (!Util.isUnset(tmpReq.queues)) {
    request.queuesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queues, 'Queues', 'json');
  }
  if (!Util.isUnset(tmpReq.sharedStorages)) {
    request.sharedStoragesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sharedStorages, 'SharedStorages', 'json');
  }
  if (!Util.isUnset(tmpReq.tags)) {
    request.tagsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tags, 'Tags', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.additionalPackagesShrink)) {
    query['AdditionalPackages'] = request.additionalPackagesShrink;
  }
  if (!Util.isUnset(request.addonsShrink)) {
    query['Addons'] = request.addonsShrink;
  }
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.clusterCategory)) {
    query['ClusterCategory'] = request.clusterCategory;
  }
  if (!Util.isUnset(request.clusterCredentialsShrink)) {
    query['ClusterCredentials'] = request.clusterCredentialsShrink;
  }
  if (!Util.isUnset(request.clusterCustomConfigurationShrink)) {
    query['ClusterCustomConfiguration'] = request.clusterCustomConfigurationShrink;
  }
  if (!Util.isUnset(request.clusterDescription)) {
    query['ClusterDescription'] = request.clusterDescription;
  }
  if (!Util.isUnset(request.clusterMode)) {
    query['ClusterMode'] = request.clusterMode;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.clusterVSwitchId)) {
    query['ClusterVSwitchId'] = request.clusterVSwitchId;
  }
  if (!Util.isUnset(request.clusterVpcId)) {
    query['ClusterVpcId'] = request.clusterVpcId;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.isEnterpriseSecurityGroup)) {
    query['IsEnterpriseSecurityGroup'] = request.isEnterpriseSecurityGroup;
  }
  if (!Util.isUnset(request.managerShrink)) {
    query['Manager'] = request.managerShrink;
  }
  if (!Util.isUnset(request.maxCoreCount)) {
    query['MaxCoreCount'] = request.maxCoreCount;
  }
  if (!Util.isUnset(request.maxCount)) {
    query['MaxCount'] = request.maxCount;
  }
  if (!Util.isUnset(request.queuesShrink)) {
    query['Queues'] = request.queuesShrink;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.sharedStoragesShrink)) {
    query['SharedStorages'] = request.sharedStoragesShrink;
  }
  if (!Util.isUnset(request.tagsShrink)) {
    query['Tags'] = request.tagsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCluster',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建一个按量付费或者预付费（包年包月） 集群	
 *
 * @param request CreateClusterRequest
 * @return CreateClusterResponse
 */
async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model CreateJobRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  jobName?: string(name='JobName', example='TestJob'),
  jobSpec?: {
    arrayRequest?: string(name='ArrayRequest', example='1-5:2'),
    commandLine?: string(name='CommandLine', description='This parameter is required.', example='/home/xxx/test.job'),
    jobQueue?: string(name='JobQueue', example='comp'),
    postCmdLine?: string(name='PostCmdLine', example='/bin/sleep 10'),
    priority?: string(name='Priority', example='1'),
    resources?: {
      cores?: int32(name='Cores', example='2'),
      gpus?: int32(name='Gpus', example='1'),
      memory?: string(name='Memory', example='4gb'),
      nodes?: int32(name='Nodes', example='2'),
    }(name='Resources'),
    runasUser?: string(name='RunasUser', example='testuser'),
    runasUserPassword?: string(name='RunasUserPassword', example='xxx'),
    stderrPath?: string(name='StderrPath', example='/home/xxx/job.err'),
    stdoutPath?: string(name='StdoutPath', example='/home/xxx/job.out'),
    variables?: string(name='Variables', example='[{"Name":"x", "Value":"y"}]'),
    wallTime?: string(name='WallTime', example='360:48:50'),
  }(name='JobSpec'),
}

model CreateJobShrinkRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  jobName?: string(name='JobName', example='TestJob'),
  jobSpecShrink?: string(name='JobSpec'),
}

model CreateJobResponseBody = {
  jobId?: string(name='JobId', example='Submitted batch job 10\\\\n'),
  requestId?: string(name='RequestId', example='A0A38A38-1565-555E-B597-E48A2E******'),
  success?: string(name='Success', example='true'),
}

model CreateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobResponseBody(name='body'),
}

/**
 * @summary 创建作业
 *
 * @param tmpReq CreateJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateJobResponse
 */
async function createJobWithOptions(tmpReq: CreateJobRequest, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobSpec)) {
    request.jobSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSpec, 'JobSpec', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.jobName)) {
    query['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.jobSpecShrink)) {
    query['JobSpec'] = request.jobSpecShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateJob',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建作业
 *
 * @param request CreateJobRequest
 * @return CreateJobResponse
 */
async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobWithOptions(request, runtime);
}

model CreateNodesRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  computeNode?: NodeTemplate(name='ComputeNode'),
  count?: int32(name='Count', example='10'),
  HPCInterConnect?: string(name='HPCInterConnect', example='vpc'),
  hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
  hostnameSuffix?: string(name='HostnameSuffix', example='demo'),
  keepAlive?: string(name='KeepAlive', example='false'),
  queueName?: string(name='QueueName', example='test1'),
  ramRole?: string(name='RamRole', example='AliyunServiceRoleForOOSBandwidthScheduler'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1lfcjbfb099rrjn****'),
}

model CreateNodesShrinkRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  computeNodeShrink?: string(name='ComputeNode'),
  count?: int32(name='Count', example='10'),
  HPCInterConnect?: string(name='HPCInterConnect', example='vpc'),
  hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
  hostnameSuffix?: string(name='HostnameSuffix', example='demo'),
  keepAlive?: string(name='KeepAlive', example='false'),
  queueName?: string(name='QueueName', example='test1'),
  ramRole?: string(name='RamRole', example='AliyunServiceRoleForOOSBandwidthScheduler'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1lfcjbfb099rrjn****'),
}

model CreateNodesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='true'),
}

model CreateNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodesResponseBody(name='body'),
}

/**
 * @summary 集群扩容节点
 *
 * @param tmpReq CreateNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNodesResponse
 */
async function createNodesWithOptions(tmpReq: CreateNodesRequest, runtime: Util.RuntimeOptions): CreateNodesResponse {
  Util.validateModel(tmpReq);
  var request = new CreateNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.computeNode)) {
    request.computeNodeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.computeNode, 'ComputeNode', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.computeNodeShrink)) {
    query['ComputeNode'] = request.computeNodeShrink;
  }
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.HPCInterConnect)) {
    query['HPCInterConnect'] = request.HPCInterConnect;
  }
  if (!Util.isUnset(request.hostnamePrefix)) {
    query['HostnamePrefix'] = request.hostnamePrefix;
  }
  if (!Util.isUnset(request.hostnameSuffix)) {
    query['HostnameSuffix'] = request.hostnameSuffix;
  }
  if (!Util.isUnset(request.keepAlive)) {
    query['KeepAlive'] = request.keepAlive;
  }
  if (!Util.isUnset(request.queueName)) {
    query['QueueName'] = request.queueName;
  }
  if (!Util.isUnset(request.ramRole)) {
    query['RamRole'] = request.ramRole;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNodes',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 集群扩容节点
 *
 * @param request CreateNodesRequest
 * @return CreateNodesResponse
 */
async function createNodes(request: CreateNodesRequest): CreateNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNodesWithOptions(request, runtime);
}

model CreateQueueRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  queue?: QueueTemplate(name='Queue', description='The configurations of the queue to be created.'),
}

model CreateQueueShrinkRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  queueShrink?: string(name='Queue', description='The configurations of the queue to be created.'),
}

model CreateQueueResponseBody = {
  name?: string(name='Name', description='The name of the created queue.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueueResponseBody(name='body'),
}

/**
 * @summary Creates a queue for an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @param tmpReq CreateQueueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateQueueResponse
 */
async function createQueueWithOptions(tmpReq: CreateQueueRequest, runtime: Util.RuntimeOptions): CreateQueueResponse {
  Util.validateModel(tmpReq);
  var request = new CreateQueueShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queue)) {
    request.queueShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queue, 'Queue', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.queueShrink)) {
    query['Queue'] = request.queueShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateQueue',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a queue for an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @param request CreateQueueRequest
 * @return CreateQueueResponse
 */
async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return createQueueWithOptions(request, runtime);
}

model CreateUsersRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  user?: [ 
    {
      authKey?: string(name='AuthKey', example='Abc****'),
      group?: string(name='Group', example='users'),
      password?: string(name='Password', example='1@a2****'),
      userName?: string(name='UserName', example='testuser'),
    }
  ](name='User'),
}

model CreateUsersShrinkRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  userShrink?: string(name='User'),
}

model CreateUsersResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model CreateUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUsersResponseBody(name='body'),
}

/**
 * @summary 创建集群用户
 *
 * @param tmpReq CreateUsersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUsersResponse
 */
async function createUsersWithOptions(tmpReq: CreateUsersRequest, runtime: Util.RuntimeOptions): CreateUsersResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.userShrink)) {
    query['User'] = request.userShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUsers',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建集群用户
 *
 * @param request CreateUsersRequest
 * @return CreateUsersResponse
 */
async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUsersWithOptions(request, runtime);
}

model DeleteClusterRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-QKKVqO****'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F1AB6D8D-E185-4D94-859C-7CE7B8B7****'),
  success?: boolean(name='Success', description='The request result. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  taskId?: string(name='TaskId', description='The task ID.', example='F1AB6D8D-E185-4D94-859C-7CE7B8B7****'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

/**
 * @summary Releases an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @param request DeleteClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteClusterResponse
 */
async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCluster',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @param request DeleteClusterRequest
 * @return DeleteClusterResponse
 */
async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model DeleteJobsRequest {
  jobSpec?: [ 
    {
      jobId?: string(name='JobId'),
      taskSpec?: [ 
        {
          arrayIndex?: [ int32 ](name='ArrayIndex'),
          taskName?: string(name='TaskName'),
        }
      ](name='TaskSpec'),
    }
  ](name='JobSpec'),
}

model DeleteJobsShrinkRequest {
  jobSpecShrink?: string(name='JobSpec'),
}

model DeleteJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteJobsResponseBody(name='body'),
}

/**
 * @summary 删除作业
 *
 * @param tmpReq DeleteJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteJobsResponse
 */
async function deleteJobsWithOptions(tmpReq: DeleteJobsRequest, runtime: Util.RuntimeOptions): DeleteJobsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobSpec)) {
    request.jobSpecShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobSpec, 'JobSpec', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.jobSpecShrink)) {
    query['JobSpec'] = request.jobSpecShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteJobs',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除作业
 *
 * @param request DeleteJobsRequest
 * @return DeleteJobsResponse
 */
async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteJobsWithOptions(request, runtime);
}

model DeleteNodesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID. You can call the [listclusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.', example='ehpc-hz-FYUr32****'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the compute nodes that you want to delete.'),
}

model DeleteNodesShrinkRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID. You can call the [listclusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.', example='ehpc-hz-FYUr32****'),
  instanceIdsShrink?: string(name='InstanceIds', description='The instance IDs of the compute nodes that you want to delete.'),
}

model DeleteNodesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  taskId?: string(name='TaskId', description='The task ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model DeleteNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNodesResponseBody(name='body'),
}

/**
 * @summary Deletes compute nodes from an Enterprise High Performance Computing (E-HPC) cluster at a time.
 *
 * @description ## [](#)Usage notes
 * Before you delete a compute node, we recommend that you export all job data from the node to prevent data loss.
 *
 * @param tmpReq DeleteNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNodesResponse
 */
async function deleteNodesWithOptions(tmpReq: DeleteNodesRequest, runtime: Util.RuntimeOptions): DeleteNodesResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNodes',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes compute nodes from an Enterprise High Performance Computing (E-HPC) cluster at a time.
 *
 * @description ## [](#)Usage notes
 * Before you delete a compute node, we recommend that you export all job data from the node to prevent data loss.
 *
 * @param request DeleteNodesRequest
 * @return DeleteNodesResponse
 */
async function deleteNodes(request: DeleteNodesRequest): DeleteNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNodesWithOptions(request, runtime);
}

model DeleteQueuesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  queueNames?: [ string ](name='QueueNames', description='The queues that you want to delete.'),
}

model DeleteQueuesShrinkRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  queueNamesShrink?: string(name='QueueNames', description='The queues that you want to delete.'),
}

model DeleteQueuesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model DeleteQueuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueuesResponseBody(name='body'),
}

/**
 * @summary Deletes queues from an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @description ## [](#)Usage notes
 * Before you delete a queue, you must delete all compute nodes in the queue.
 *
 * @param tmpReq DeleteQueuesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteQueuesResponse
 */
async function deleteQueuesWithOptions(tmpReq: DeleteQueuesRequest, runtime: Util.RuntimeOptions): DeleteQueuesResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteQueuesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queueNames)) {
    request.queueNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queueNames, 'QueueNames', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.queueNamesShrink)) {
    query['QueueNames'] = request.queueNamesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteQueues',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes queues from an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @description ## [](#)Usage notes
 * Before you delete a queue, you must delete all compute nodes in the queue.
 *
 * @param request DeleteQueuesRequest
 * @return DeleteQueuesResponse
 */
async function deleteQueues(request: DeleteQueuesRequest): DeleteQueuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteQueuesWithOptions(request, runtime);
}

model DeleteUsersRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  user?: [ 
    {
      userName?: string(name='UserName', description='The name of user N that you want to delete.

Valid values of N: 1 to 100.

This parameter is required.', example='testuser'),
    }
  ](name='User', description='The users that you want to delete.

This parameter is required.'),
}

model DeleteUsersShrinkRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  userShrink?: string(name='User', description='The users that you want to delete.

This parameter is required.'),
}

model DeleteUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE****'),
}

model DeleteUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUsersResponseBody(name='body'),
}

/**
 * @summary Deletes users from a cluster.
 *
 * @param tmpReq DeleteUsersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteUsersResponse
 */
async function deleteUsersWithOptions(tmpReq: DeleteUsersRequest, runtime: Util.RuntimeOptions): DeleteUsersResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteUsersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.user)) {
    request.userShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.user, 'User', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUsers',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes users from a cluster.
 *
 * @param request DeleteUsersRequest
 * @return DeleteUsersResponse
 */
async function deleteUsers(request: DeleteUsersRequest): DeleteUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUsersWithOptions(request, runtime);
}

model DescribeAddonTemplateRequest {
  addonName?: string(name='AddonName', description='This parameter is required.', example='Login'),
  addonVersion?: string(name='AddonVersion', description='This parameter is required.', example='1.0'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
}

model DescribeAddonTemplateResponseBody = {
  addon?: {
    description?: string(name='Description'),
    icon?: string(name='Icon', example='/assets/icons/your_icon.svg'),
    label?: string(name='Label'),
    lastUpdate?: string(name='LastUpdate', example='2024-08-22 18:11:17'),
    name?: string(name='Name', description='This parameter is required.', example='Login'),
    resourcesSpec?: {
      ecsResources?: [
        AddonNodeTemplate
      ](name='EcsResources'),
      eipResource?: {
        autoCreate?: boolean(name='AutoCreate', example='True'),
        bandwidth?: string(name='Bandwidth', example='100'),
        eipInstanceId?: string(name='EipInstanceId', example='eip-bp1jwtsuoiif2qf90****'),
        instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
        internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
      }(name='EipResource'),
    }(name='ResourcesSpec'),
    servicesSpec?: [ 
      {
        inputParams?: [ 
          {
            helpText?: string(name='HelpText'),
            label?: string(name='Label'),
            name?: string(name='Name', description='This parameter is required.', example='MYSQL_HOME'),
            type?: string(name='Type', description='This parameter is required.', example='String'),
            value?: string(name='Value', description='This parameter is required.', example='usr/local/mysql'),
          }
        ](name='InputParams'),
        networkACL?: [ 
          {
            ipProtocol?: string(name='IpProtocol', description='This parameter is required.', example='TCP'),
            port?: float(name='Port', description='This parameter is required.', example='3306'),
            sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is required.', example='172.16.0.0/12'),
          }
        ](name='NetworkACL'),
        serviceAccessType?: string(name='ServiceAccessType', example='URL'),
        serviceAccessUrl?: string(name='ServiceAccessUrl', example='https://47.96.xx.xx:12008'),
        serviceName?: string(name='ServiceName', description='This parameter is required.', example='Web Portal'),
      }
    ](name='ServicesSpec'),
    version?: string(name='Version', description='This parameter is required.', example='1.0'),
  }(name='Addon'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeAddonTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAddonTemplateResponseBody(name='body'),
}

/**
 * @summary 查询Add-on服务组件模板详情。
 *
 * @param request DescribeAddonTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAddonTemplateResponse
 */
async function describeAddonTemplateWithOptions(request: DescribeAddonTemplateRequest, runtime: Util.RuntimeOptions): DescribeAddonTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonName)) {
    query['AddonName'] = request.addonName;
  }
  if (!Util.isUnset(request.addonVersion)) {
    query['AddonVersion'] = request.addonVersion;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddonTemplate',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询Add-on服务组件模板详情。
 *
 * @param request DescribeAddonTemplateRequest
 * @return DescribeAddonTemplateResponse
 */
async function describeAddonTemplate(request: DescribeAddonTemplateRequest): DescribeAddonTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddonTemplateWithOptions(request, runtime);
}

model DetachSharedStoragesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  sharedStorages?: [ 
    {
      mountDirectory?: string(name='MountDirectory', description='The local mount directory of the mounted file system.

This parameter is required.', example='/test'),
    }
  ](name='SharedStorages', description='The information about mounted shared storage resources.

This parameter is required.'),
}

model DetachSharedStoragesShrinkRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  sharedStoragesShrink?: string(name='SharedStorages', description='The information about mounted shared storage resources.

This parameter is required.'),
}

model DetachSharedStoragesResponseBody = {
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.', example='ehpc-hz-FYUr32****'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DetachSharedStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachSharedStoragesResponseBody(name='body'),
}

/**
 * @summary Unmounts shared storage from the mount directory of a cluster.
 *
 * @param tmpReq DetachSharedStoragesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DetachSharedStoragesResponse
 */
async function detachSharedStoragesWithOptions(tmpReq: DetachSharedStoragesRequest, runtime: Util.RuntimeOptions): DetachSharedStoragesResponse {
  Util.validateModel(tmpReq);
  var request = new DetachSharedStoragesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sharedStorages)) {
    request.sharedStoragesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sharedStorages, 'SharedStorages', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.sharedStoragesShrink)) {
    query['SharedStorages'] = request.sharedStoragesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachSharedStorages',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Unmounts shared storage from the mount directory of a cluster.
 *
 * @param request DetachSharedStoragesRequest
 * @return DetachSharedStoragesResponse
 */
async function detachSharedStorages(request: DetachSharedStoragesRequest): DetachSharedStoragesResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachSharedStoragesWithOptions(request, runtime);
}

model GetAddonRequest {
  addonId?: string(name='AddonId', description='This parameter is required.', example='Login-1.0-W4g****'),
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
}

model GetAddonResponseBody = {
  addon?: {
    addonId?: string(name='AddonId', description='This parameter is required.', example='Login-1.0-W2g****'),
    description?: string(name='Description'),
    icon?: string(name='Icon', example='/assets/icons/your_icon.svg'),
    installTime?: string(name='InstallTime', example='2024-08-22 18:11:17'),
    label?: string(name='Label'),
    name?: string(name='Name', description='This parameter is required.', example='Login'),
    resourcesSpec?: {
      ecsResources?: [
        AddonNodeTemplate
      ](name='EcsResources'),
      eipResource?: {
        autoCreate?: boolean(name='AutoCreate', example='True'),
        bandwidth?: string(name='Bandwidth', example='100'),
        eipAddress?: string(name='EipAddress', example='39.108.xx.xx'),
        eipInstanceId?: string(name='EipInstanceId', example='eip-bp1vi9124tbx1g3kr****'),
        instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
        internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
      }(name='EipResource'),
    }(name='ResourcesSpec'),
    servicesSpec?: [ 
      {
        inputParams?: [ 
          {
            helpText?: string(name='HelpText'),
            label?: string(name='Label'),
            name?: string(name='Name', description='This parameter is required.', example='MYSQL_HOME'),
            type?: string(name='Type', description='This parameter is required.', example='String'),
            value?: string(name='Value', description='This parameter is required.', example='usr/local/mysql'),
          }
        ](name='InputParams'),
        networkACL?: [ 
          {
            ipProtocol?: string(name='IpProtocol', description='This parameter is required.', example='TCP'),
            port?: float(name='Port', description='This parameter is required.', example='3306'),
            sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is required.', example='172.16.0.0/12'),
          }
        ](name='NetworkACL'),
        serviceAccessType?: string(name='ServiceAccessType', example='URL'),
        serviceAccessUrl?: string(name='ServiceAccessUrl', example='https://47.96.xx.xx:12008'),
        serviceName?: string(name='ServiceName', description='This parameter is required.', example='Web Portal'),
      }
    ](name='ServicesSpec'),
    status?: string(name='Status', example='Running'),
    version?: string(name='Version', description='This parameter is required.', example='1.0'),
  }(name='Addon'),
  requestId?: string(name='RequestId', example='BBC2F93D-003A-49C4-850C-B826EECF****'),
}

model GetAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAddonResponseBody(name='body'),
}

/**
 * @summary 查看已安装的Add-on服务组件详情。
 *
 * @param request GetAddonRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAddonResponse
 */
async function getAddonWithOptions(request: GetAddonRequest, runtime: Util.RuntimeOptions): GetAddonResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonId)) {
    query['AddonId'] = request.addonId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAddon',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看已安装的Add-on服务组件详情。
 *
 * @param request GetAddonRequest
 * @return GetAddonResponse
 */
async function getAddon(request: GetAddonRequest): GetAddonResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAddonWithOptions(request, runtime);
}

model GetClusterRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
}

model GetClusterResponseBody = {
  clientVersion?: string(name='ClientVersion', example='2.0.31'),
  clusterCategory?: string(name='ClusterCategory', example='Standard'),
  clusterCreateTime?: string(name='ClusterCreateTime', example='2024-08-06T12:43:01.000Z'),
  clusterCustomConfiguration?: {
    args?: string(name='Args', example='E-HPC cn-hangzhou'),
    script?: string(name='Script', example='http://*****'),
  }(name='ClusterCustomConfiguration'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  clusterMode?: string(name='ClusterMode', example='Integrated'),
  clusterModifyTime?: string(name='ClusterModifyTime', example='2024-08-06T12:43:01.000Z'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-cluster-20240614'),
  clusterStatus?: string(name='ClusterStatus', example='running'),
  clusterVSwitchId?: string(name='ClusterVSwitchId', example='vsw-bp1p2uugqsjppno******'),
  clusterVpcId?: string(name='ClusterVpcId', example='vpc-uf6u3lk1pjy28eg*****'),
  deleteProtection?: string(name='DeleteProtection', example='true'),
  ehpcVersion?: string(name='EhpcVersion', example='2.0.0'),
  enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
  enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
  growInterval?: int32(name='GrowInterval', example='2'),
  idleInterval?: int32(name='IdleInterval', example='4'),
  manager?: {
    DNS?: {
      status?: string(name='Status', example='running'),
      type?: string(name='Type', example='nis'),
      version?: string(name='Version', example='2.31'),
    }(name='DNS'),
    directoryService?: {
      status?: string(name='Status', example='running'),
      type?: string(name='Type', example='nis'),
      version?: string(name='Version', example='2.31'),
    }(name='DirectoryService'),
    managerNode?: {
      expiredTime?: string(name='ExpiredTime', example='2099-12-31T15:59Z'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      instanceId?: string(name='InstanceId', example='i-bp1a170jgea1vl******'),
      instanceType?: string(name='InstanceType', example='ecs.g6.4xlarge'),
    }(name='ManagerNode'),
    scheduler?: {
      status?: string(name='Status', example='running'),
      type?: string(name='Type', example='SLURM'),
      version?: string(name='Version', example='22.05.8'),
    }(name='Scheduler'),
  }(name='Manager'),
  maxCoreCount?: string(name='MaxCoreCount', example='10000'),
  maxCount?: string(name='MaxCount', example='100'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-f8z9vb2zaezpkr69a21k'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

/**
 * @summary 查询单个E-HPC集群的详情信息。
 *
 * @param request GetClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetClusterResponse
 */
async function getClusterWithOptions(request: GetClusterRequest, runtime: Util.RuntimeOptions): GetClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCluster',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询单个E-HPC集群的详情信息。
 *
 * @param request GetClusterRequest
 * @return GetClusterResponse
 */
async function getCluster(request: GetClusterRequest): GetClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return getClusterWithOptions(request, runtime);
}

model GetCommonLogDetailRequest {
  from?: long(name='From', description='This parameter is required.', example='1703821542'),
  hiddenProcess?: boolean(name='HiddenProcess', example='true'),
  logRequestId?: string(name='LogRequestId', description='This parameter is required.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  to?: long(name='To', description='This parameter is required.', example='1703821666'),
}

model GetCommonLogDetailResponseBody = {
  action?: string(name='Action', example='CreateCluster'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-abc***'),
  logDetail?: [ 
    {
      stageName?: string(name='StageName', example='ConfigNetwork'),
      stages?: [ 
        {
          logLevel?: string(name='LogLevel', example='INFO'),
          message?: string(name='Message', example='Successfully created security group sg-bcd***'),
          method?: string(name='Method', example='CreateSecurityGroup'),
          requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
          status?: string(name='Status', example='Finished'),
          target?: string(name='Target', example='sg-bcd***'),
          time?: string(name='Time', example='2024-08-22 14:21:54'),
        }
      ](name='Stages'),
    }
  ](name='LogDetail'),
  logType?: string(name='LogType', example='operation'),
  operatorUid?: string(name='OperatorUid', example='239***'),
  requestId?: string(name='RequestId', example='464E9919-D04F-4D1D-B375-15989492****'),
  uid?: string(name='Uid', example='137***'),
}

model GetCommonLogDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCommonLogDetailResponseBody(name='body'),
}

/**
 * @summary 查询集群通用日志详细信息
 *
 * @param request GetCommonLogDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCommonLogDetailResponse
 */
async function getCommonLogDetailWithOptions(request: GetCommonLogDetailRequest, runtime: Util.RuntimeOptions): GetCommonLogDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.hiddenProcess)) {
    query['HiddenProcess'] = request.hiddenProcess;
  }
  if (!Util.isUnset(request.logRequestId)) {
    query['LogRequestId'] = request.logRequestId;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCommonLogDetail',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询集群通用日志详细信息
 *
 * @param request GetCommonLogDetailRequest
 * @return GetCommonLogDetailResponse
 */
async function getCommonLogDetail(request: GetCommonLogDetailRequest): GetCommonLogDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCommonLogDetailWithOptions(request, runtime);
}

model GetJobRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  jobId?: string(name='JobId', description='This parameter is required.', example='1.manager'),
}

model GetJobResponseBody = {
  jobInfo?: {
    arrayJobId?: string(name='ArrayJobId', example='1'),
    arrayJobSubId?: string(name='ArrayJobSubId', example='3'),
    arrayRequest?: string(name='ArrayRequest', example='1-5:2'),
    commandLine?: string(name='CommandLine', example='/home/huangsf/ehpc/job_meta.pbs'),
    createTime?: string(name='CreateTime', example='2024-08-16T10:52:48'),
    errorLog?: string(name='ErrorLog', example='/home/xxx/STDIN.e1'),
    extraInfo?: string(name='ExtraInfo', example='{}'),
    jobId?: string(name='JobId', example='1.manager'),
    jobName?: string(name='JobName', example='testJob'),
    jobQueue?: string(name='JobQueue', example='workq'),
    lastModifyTime?: string(name='LastModifyTime', example='2024-08-16T10:52:48'),
    nodeList?: string(name='NodeList', example='compute000'),
    outputLog?: string(name='OutputLog', example='/home/xxx/STDIN.o1'),
    priority?: string(name='Priority', example='0'),
    resources?: {
      cores?: string(name='Cores', example='2'),
      gpus?: string(name='Gpus', example='1'),
      memory?: string(name='Memory', example='1gb'),
      nodes?: string(name='Nodes', example='1'),
    }(name='Resources'),
    resourcesUsed?: {
      cores?: string(name='Cores', example='2'),
      memory?: string(name='Memory', example='512mb'),
      nodes?: string(name='Nodes', example='2'),
    }(name='ResourcesUsed'),
    runasUser?: string(name='RunasUser', example='testuser'),
    startTime?: string(name='StartTime', example='2024-08-16T10:52:48'),
    state?: string(name='State', example='Running'),
    variables?: [ 
      {
        name?: string(name='Name', example='ProxyIP'),
        value?: string(name='Value', example='10.x.x.x'),
      }
    ](name='Variables'),
  }(name='JobInfo'),
  requestId?: string(name='RequestId', example='04F0****-1335-****-A1D7-6C044FE7****'),
  success?: string(name='Success', example='true'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

/**
 * @summary 获取作业详情
 *
 * @param request GetJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobResponse
 */
async function getJobWithOptions(request: GetJobRequest, runtime: Util.RuntimeOptions): GetJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJob',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取作业详情
 *
 * @param request GetJobRequest
 * @return GetJobResponse
 */
async function getJob(request: GetJobRequest): GetJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobWithOptions(request, runtime);
}

model GetJobLogRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-jeJki6****'),
  jobId?: string(name='JobId', description='This parameter is required.', example='1.manager'),
  logType?: string(name='LogType', example='stdout'),
  offset?: string(name='Offset', example='0'),
  size?: string(name='Size', example='20480'),
}

model GetJobLogResponseBody = {
  jobId?: string(name='JobId', example='1.manager'),
  requestId?: string(name='RequestId', example='B745C159-3155-4B94-95D0-4B73D4D2****'),
  stderrLog?: string(name='StderrLog', example='aG9zdG5hbWU='),
  stderrLogSize?: string(name='StderrLogSize', example='0'),
  stdoutLog?: string(name='StdoutLog', example='aG9zdG5hbWU='),
  stdoutLogSize?: string(name='StdoutLogSize', example='4096'),
  success?: string(name='Success', example='true'),
}

model GetJobLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobLogResponseBody(name='body'),
}

/**
 * @summary 获取作业日志输出
 *
 * @param request GetJobLogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobLogResponse
 */
async function getJobLogWithOptions(request: GetJobLogRequest, runtime: Util.RuntimeOptions): GetJobLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.logType)) {
    query['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobLog',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取作业日志输出
 *
 * @param request GetJobLogRequest
 * @return GetJobLogResponse
 */
async function getJobLog(request: GetJobLogRequest): GetJobLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJobLogWithOptions(request, runtime);
}

model GetQueueRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  queueName?: string(name='QueueName', example='comp'),
}

model GetQueueResponseBody = {
  queue?: {
    allocationStrategy?: string(name='AllocationStrategy', example='PriorityInstanceType'),
    computeNodes?: [
      NodeTemplate
    ](name='ComputeNodes'),
    enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
    enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
    hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
    hostnameSuffix?: string(name='HostnameSuffix', example='demo'),
    initialCount?: int32(name='InitialCount', example='0'),
    interConnect?: string(name='InterConnect', example='erdma'),
    keepAliveNodes?: [ string ](name='KeepAliveNodes'),
    maxCount?: int32(name='MaxCount', example='1000'),
    maxCountPerCycle?: long(name='MaxCountPerCycle', example='99'),
    minCount?: int32(name='MinCount', example='0'),
    queueName?: string(name='QueueName', description='This parameter is required.', example='comp'),
    ramRole?: string(name='RamRole', example='AliyunECSInstanceForEHPCRole'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='Queue'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model GetQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQueueResponseBody(name='body'),
}

/**
 * @summary 查询集群的队列配置信息
 *
 * @param request GetQueueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueueResponse
 */
async function getQueueWithOptions(request: GetQueueRequest, runtime: Util.RuntimeOptions): GetQueueResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.queueName)) {
    query['QueueName'] = request.queueName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetQueue',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询集群的队列配置信息
 *
 * @param request GetQueueRequest
 * @return GetQueueResponse
 */
async function getQueue(request: GetQueueRequest): GetQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return getQueueWithOptions(request, runtime);
}

model InstallAddonRequest {
  addonName?: string(name='AddonName', description='The addon name.

This parameter is required.', example='Login'),
  addonVersion?: string(name='AddonVersion', description='The addon version.

This parameter is required.', example='1.0'),
  clusterId?: string(name='ClusterId', description='The cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  resourcesSpec?: string(name='ResourcesSpec', description='The resource configurations of the addon.

This parameter is required.', example='`{"EipResource": {"AutoCreate": true}, "EcsResources": [{"InstanceType": "ecs.c7.xlarge", "ImageId": "centos_7_6_xxx.vhd", "SystemDisk": {"Category": "cloud_essd", "Size": 40, "Level": "PL0"}]}`'),
  servicesSpec?: string(name='ServicesSpec', description='The service configurations of the addon.

This parameter is required.', example='`[{"ServiceName": "SSH", "ServiceAccessType": null, "ServiceAccessUrl": null, "NetworkACL": [{"IpProtocol": "TCP", "Port": 22, "SourceCidrIp": "0.0.0.0/0"}]}, {"ServiceName": "VNC", "ServiceAccessType": null, "ServiceAccessUrl": null, "NetworkACL": [{"IpProtocol": "TCP", "Port": 12016, "SourceCidrIp": "0.0.0.0/0"}]}]`'),
}

model InstallAddonResponseBody = {
  addonId?: string(name='AddonId', description='The addon ID.

This parameter is required.', example='Login-1.0-W4g****'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  requestId?: string(name='RequestId', description='The request ID.', example='B745C159-3155-4B94-95D0-4B73D4D2****'),
}

model InstallAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAddonResponseBody(name='body'),
}

/**
 * @summary Installs an addon.
 *
 * @param request InstallAddonRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InstallAddonResponse
 */
async function installAddonWithOptions(request: InstallAddonRequest, runtime: Util.RuntimeOptions): InstallAddonResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonName)) {
    query['AddonName'] = request.addonName;
  }
  if (!Util.isUnset(request.addonVersion)) {
    query['AddonVersion'] = request.addonVersion;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.resourcesSpec)) {
    query['ResourcesSpec'] = request.resourcesSpec;
  }
  if (!Util.isUnset(request.servicesSpec)) {
    query['ServicesSpec'] = request.servicesSpec;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallAddon',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Installs an addon.
 *
 * @param request InstallAddonRequest
 * @return InstallAddonResponse
 */
async function installAddon(request: InstallAddonRequest): InstallAddonResponse {
  var runtime = new Util.RuntimeOptions{};
  return installAddonWithOptions(request, runtime);
}

model InstallSoftwaresRequest {
  additionalPackages?: [ 
    {
      name?: string(name='Name', description='The software name.', example='gromacs'),
      version?: string(name='Version', description='The software version.', example='2024.1'),
    }
  ](name='AdditionalPackages', description='The information about the software systems that you want to install.'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
}

model InstallSoftwaresShrinkRequest {
  additionalPackagesShrink?: string(name='AdditionalPackages', description='The information about the software systems that you want to install.'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
}

model InstallSoftwaresResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model InstallSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallSoftwaresResponseBody(name='body'),
}

/**
 * @summary Installs software for a specified cluster.
 *
 * @param tmpReq InstallSoftwaresRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InstallSoftwaresResponse
 */
async function installSoftwaresWithOptions(tmpReq: InstallSoftwaresRequest, runtime: Util.RuntimeOptions): InstallSoftwaresResponse {
  Util.validateModel(tmpReq);
  var request = new InstallSoftwaresShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.additionalPackages)) {
    request.additionalPackagesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.additionalPackages, 'AdditionalPackages', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallSoftwares',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Installs software for a specified cluster.
 *
 * @param request InstallSoftwaresRequest
 * @return InstallSoftwaresResponse
 */
async function installSoftwares(request: InstallSoftwaresRequest): InstallSoftwaresResponse {
  var runtime = new Util.RuntimeOptions{};
  return installSoftwaresWithOptions(request, runtime);
}

model ListAddonTemplatesRequest {
  addonNames?: [ string ](name='AddonNames'),
  clusterCategory?: string(name='ClusterCategory', example='Standard'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
}

model ListAddonTemplatesResponseBody = {
  addons?: [ 
    {
      description?: string(name='Description'),
      label?: string(name='Label'),
      name?: string(name='Name', description='This parameter is required.', example='Login'),
      version?: string(name='Version', description='This parameter is required.', example='1.0'),
    }
  ](name='Addons'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAddonTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonTemplatesResponseBody(name='body'),
}

/**
 * @summary 支持的Add-on服务组件模板列表查询。
 *
 * @param request ListAddonTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAddonTemplatesResponse
 */
async function listAddonTemplatesWithOptions(request: ListAddonTemplatesRequest, runtime: Util.RuntimeOptions): ListAddonTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonNames)) {
    query['AddonNames'] = request.addonNames;
  }
  if (!Util.isUnset(request.clusterCategory)) {
    query['ClusterCategory'] = request.clusterCategory;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAddonTemplates',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 支持的Add-on服务组件模板列表查询。
 *
 * @param request ListAddonTemplatesRequest
 * @return ListAddonTemplatesResponse
 */
async function listAddonTemplates(request: ListAddonTemplatesRequest): ListAddonTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAddonTemplatesWithOptions(request, runtime);
}

model ListAddonsRequest {
  addonIds?: [ string ](name='AddonIds'),
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListAddonsShrinkRequest {
  addonIdsShrink?: string(name='AddonIds'),
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListAddonsResponseBody = {
  addons?: [ 
    {
      addonId?: string(name='AddonId', description='This parameter is required.', example='Login-1.0-W4g****'),
      description?: string(name='Description'),
      installTime?: string(name='InstallTime', example='2024-08-22 18:11:17'),
      label?: string(name='Label'),
      name?: string(name='Name', description='This parameter is required.', example='Login'),
      status?: string(name='Status', example='Running'),
      version?: string(name='Version', description='This parameter is required.', example='1.0'),
    }
  ](name='Addons'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAddonsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonsResponseBody(name='body'),
}

/**
 * @summary 查看已安装的Add-on服务组件列表。
 *
 * @param tmpReq ListAddonsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAddonsResponse
 */
async function listAddonsWithOptions(tmpReq: ListAddonsRequest, runtime: Util.RuntimeOptions): ListAddonsResponse {
  Util.validateModel(tmpReq);
  var request = new ListAddonsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addonIds)) {
    request.addonIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addonIds, 'AddonIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.addonIdsShrink)) {
    query['AddonIds'] = request.addonIdsShrink;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAddons',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看已安装的Add-on服务组件列表。
 *
 * @param request ListAddonsRequest
 * @return ListAddonsResponse
 */
async function listAddons(request: ListAddonsRequest): ListAddonsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAddonsWithOptions(request, runtime);
}

model ListAvailableFileSystemsRequest {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListAvailableFileSystemsResponseBody = {
  fileSystemList?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-7-29 15:43:53'),
      fileSystemId?: string(name='FileSystemId', example='2fa0248***'),
      fileSystemType?: string(name='FileSystemType', example='cpfs'),
      mountTargetList?: [ 
        {
          mountTargetDomain?: string(name='MountTargetDomain', example='c0967****.cn-hangzhou.cpfs.nas.aliyuncs.com'),
          networkType?: string(name='NetworkType', example='vpc'),
          status?: string(name='Status', example='Active'),
          vSwitchId?: string(name='VSwitchId', example='vsw-2ze0c41hwu7lc29ris***'),
          vpcId?: string(name='VpcId', example='vpc-8vbvb34rtyh6xb3zrehs1****'),
        }
      ](name='MountTargetList'),
      protocolType?: string(name='ProtocolType', example='cpfs'),
      status?: string(name='Status', example='Running'),
      storageType?: string(name='StorageType', example='Performance'),
      vpcId?: string(name='VpcId', example='vpc-bp132kgui8n0targb****'),
    }
  ](name='FileSystemList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BF4E8AB1-02A3-5ECF-87CC-3AB7BE98**'),
  totalCount?: int32(name='TotalCount', example='65'),
}

model ListAvailableFileSystemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvailableFileSystemsResponseBody(name='body'),
}

/**
 * @summary 查询可用的共享存储
 *
 * @param request ListAvailableFileSystemsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAvailableFileSystemsResponse
 */
async function listAvailableFileSystemsWithOptions(request: ListAvailableFileSystemsRequest, runtime: Util.RuntimeOptions): ListAvailableFileSystemsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAvailableFileSystems',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询可用的共享存储
 *
 * @param request ListAvailableFileSystemsRequest
 * @return ListAvailableFileSystemsResponse
 */
async function listAvailableFileSystems(request: ListAvailableFileSystemsRequest): ListAvailableFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAvailableFileSystemsWithOptions(request, runtime);
}

model ListAvailableImagesRequest {
  directoryService?: {
    type?: string(name='Type', example='NIS'),
    version?: string(name='Version', example='1.0'),
  }(name='DirectoryService'),
  enableHT?: boolean(name='EnableHT', example='true'),
  HPCInterConnect?: string(name='HPCInterConnect', example='vpc'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', example='self'),
  instanceType?: string(name='InstanceType', example='ecs.c7.large'),
  isPublic?: boolean(name='IsPublic', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  scheduler?: {
    type?: string(name='Type', example='SLURM'),
    version?: string(name='Version', example='22.05.8'),
  }(name='Scheduler'),
}

model ListAvailableImagesShrinkRequest {
  directoryServiceShrink?: string(name='DirectoryService'),
  enableHT?: boolean(name='EnableHT', example='true'),
  HPCInterConnect?: string(name='HPCInterConnect', example='vpc'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', example='self'),
  instanceType?: string(name='InstanceType', example='ecs.c7.large'),
  isPublic?: boolean(name='IsPublic', example='true'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  schedulerShrink?: string(name='Scheduler'),
}

model ListAvailableImagesResponseBody = {
  images?: [ 
    {
      architecture?: string(name='Architecture', example='x86_64'),
      bootMode?: string(name='BootMode', example='BIOS'),
      description?: string(name='Description', example='ExampleDescription'),
      imageId?: string(name='ImageId', example='centos_7_06_64_20G_alibase_2019071****'),
      imageName?: string(name='ImageName', example='CHESS5V5.0.27'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', example='self'),
      OSName?: string(name='OSName'),
      OSNameEn?: string(name='OSNameEn', example='CentOS  7.9 64 bit'),
      platform?: string(name='Platform', example='windows'),
      size?: string(name='Size', example='40'),
    }
  ](name='Images'),
  pageNumber?: string(name='PageNumber', description='Id of the request', example='1'),
  pageSize?: string(name='PageSize', description='Id of the request', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='true'),
  totalCount?: string(name='TotalCount', description='Id of the request', example='1'),
}

model ListAvailableImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvailableImagesResponseBody(name='body'),
}

/**
 * @summary 获取可用镜像列表
 *
 * @param tmpReq ListAvailableImagesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAvailableImagesResponse
 */
async function listAvailableImagesWithOptions(tmpReq: ListAvailableImagesRequest, runtime: Util.RuntimeOptions): ListAvailableImagesResponse {
  Util.validateModel(tmpReq);
  var request = new ListAvailableImagesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.directoryService)) {
    request.directoryServiceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.directoryService, 'DirectoryService', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduler)) {
    request.schedulerShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduler, 'Scheduler', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAvailableImages',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取可用镜像列表
 *
 * @param request ListAvailableImagesRequest
 * @return ListAvailableImagesResponse
 */
async function listAvailableImages(request: ListAvailableImagesRequest): ListAvailableImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAvailableImagesWithOptions(request, runtime);
}

model ListClustersRequest {
  clusterIds?: [ string ](name='ClusterIds'),
  clusterNames?: [ string ](name='ClusterNames'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListClustersShrinkRequest {
  clusterIdsShrink?: string(name='ClusterIds'),
  clusterNamesShrink?: string(name='ClusterNames'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListClustersResponseBody = {
  clusters?: [ 
    {
      additionalPackages?: [ 
        {
          name?: string(name='Name', example='gromacs'),
          version?: string(name='Version', example='2024.1'),
        }
      ](name='AdditionalPackages'),
      addons?: [ 
        {
          addonId?: string(name='AddonId', example='Login-1.0-W2g****'),
          description?: string(name='Description'),
          label?: string(name='Label'),
          name?: string(name='Name', description='This parameter is required.', example='Login'),
          resourcesSpec?: {
            ecsInstanceId?: string(name='EcsInstanceId', example='i-bp1bg85d2q6laic8****'),
            eipInstanceId?: string(name='EipInstanceId', example='eip-bp1vi9124tbx1g3kr****'),
          }(name='ResourcesSpec'),
          servicesSpec?: [ 
            {
              serviceAccessType?: string(name='ServiceAccessType', example='URL'),
              serviceAccessUrl?: string(name='ServiceAccessUrl', example='https://47.96.xx.xx:12008'),
              serviceName?: string(name='ServiceName', description='This parameter is required.', example='Web Portal'),
            }
          ](name='ServicesSpec'),
          status?: string(name='Status', example='Running'),
          version?: string(name='Version', description='This parameter is required.', example='1.0'),
        }
      ](name='Addons'),
      clusterCategory?: string(name='ClusterCategory', example='Standard'),
      clusterCreateTime?: string(name='ClusterCreateTime', example='2024-08-06T12:43:01.000Z'),
      clusterCredentials?: [ string ](name='ClusterCredentials'),
      clusterCustomConfiguration?: {
        args?: string(name='Args', example='demo'),
        script?: string(name='Script', example='https://xxxxx'),
      }(name='ClusterCustomConfiguration'),
      clusterDescription?: string(name='ClusterDescription', example='Demo'),
      clusterId?: string(name='ClusterId', example='ehpc-hz-VMKe******'),
      clusterMode?: string(name='ClusterMode', example='Integrated'),
      clusterModifyTime?: string(name='ClusterModifyTime', example='2024-08-06T12:43:01.000Z'),
      clusterName?: string(name='ClusterName', example='slurm22.05.8-cluster-20240227'),
      clusterStatus?: string(name='ClusterStatus', example='running'),
      clusterUsedCoreTime?: float(name='ClusterUsedCoreTime', example='1000'),
      clusterVSwitchId?: string(name='ClusterVSwitchId', example='vsw-f8za5p0mwzgdu3wgx****'),
      clusterVpcId?: string(name='ClusterVpcId', example='vpc-m5efjevmclc0xdmys****'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      ehpcVersion?: string(name='EhpcVersion', example='2.0.0'),
      manager?: {
        DNS?: {
          type?: string(name='Type', example='NIS'),
          version?: string(name='Version', example='2.31'),
        }(name='DNS'),
        directoryService?: {
          type?: string(name='Type', example='NIS'),
          version?: string(name='Version', example='2.31'),
        }(name='DirectoryService'),
        scheduler?: {
          type?: string(name='Type', example='SLURM'),
          version?: string(name='Version', example='22.05.8'),
        }(name='Scheduler'),
      }(name='Manager'),
      maxCoreCount?: long(name='MaxCoreCount', example='10000'),
      maxCount?: long(name='MaxCount', example='500'),
      nodes?: {
        abnormalCounts?: int32(name='AbnormalCounts', example='0'),
        creatingCounts?: int32(name='CreatingCounts', example='0'),
        runningCounts?: int32(name='RunningCounts', example='1'),
      }(name='Nodes'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp13n61xsydodfyg****'),
      users?: {
        normalCounts?: int32(name='NormalCounts', example='2'),
        sudoCounts?: int32(name='SudoCounts', example='2'),
      }(name='Users'),
    }
  ](name='Clusters'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

/**
 * @summary 查询用户账号中在每个地域拥有的所有集群的列表。
 *
 * @param tmpReq ListClustersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListClustersResponse
 */
async function listClustersWithOptions(tmpReq: ListClustersRequest, runtime: Util.RuntimeOptions): ListClustersResponse {
  Util.validateModel(tmpReq);
  var request = new ListClustersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clusterIds)) {
    request.clusterIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clusterIds, 'ClusterIds', 'json');
  }
  if (!Util.isUnset(tmpReq.clusterNames)) {
    request.clusterNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clusterNames, 'ClusterNames', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterIdsShrink)) {
    query['ClusterIds'] = request.clusterIdsShrink;
  }
  if (!Util.isUnset(request.clusterNamesShrink)) {
    query['ClusterNames'] = request.clusterNamesShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClusters',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询用户账号中在每个地域拥有的所有集群的列表。
 *
 * @param request ListClustersRequest
 * @return ListClustersResponse
 */
async function listClusters(request: ListClustersRequest): ListClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClustersWithOptions(request, runtime);
}

model ListCommonLogsRequest {
  actionName?: [ string ](name='ActionName'),
  actionStatus?: string(name='ActionStatus', example='Finished'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  from?: long(name='From', description='This parameter is required.', example='1703821542'),
  isReverse?: boolean(name='IsReverse', example='true'),
  logRequestId?: string(name='LogRequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  logType?: string(name='LogType', example='Operation'),
  operatorUid?: string(name='OperatorUid', example='137***'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resource?: string(name='Resource', example='i-abc***'),
  to?: long(name='To', description='This parameter is required.', example='1703821666'),
}

model ListCommonLogsShrinkRequest {
  actionNameShrink?: string(name='ActionName'),
  actionStatus?: string(name='ActionStatus', example='Finished'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  from?: long(name='From', description='This parameter is required.', example='1703821542'),
  isReverse?: boolean(name='IsReverse', example='true'),
  logRequestId?: string(name='LogRequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  logType?: string(name='LogType', example='Operation'),
  operatorUid?: string(name='OperatorUid', example='137***'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  resource?: string(name='Resource', example='i-abc***'),
  to?: long(name='To', description='This parameter is required.', example='1703821666'),
}

model ListCommonLogsResponseBody = {
  logs?: [ 
    {
      action?: string(name='Action', example='CreaterCluster'),
      clusterId?: string(name='ClusterId', example='ehpc-hz-9T3xPNezoS'),
      logType?: string(name='LogType', example='Operation'),
      message?: string(name='Message', example='ok'),
      operatorUid?: string(name='OperatorUid', example='137***'),
      requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
      status?: string(name='Status', example='Finished'),
      target?: string(name='Target', example='i-abc***'),
      time?: string(name='Time', example='2024-08-22 14:21:54'),
    }
  ](name='Logs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='464E9919-D04F-4D1D-B375-15989492****'),
  totalCount?: int32(name='TotalCount', example='15'),
  uid?: string(name='Uid', example='137***'),
}

model ListCommonLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCommonLogsResponseBody(name='body'),
}

/**
 * @summary 查询集群通用日志列表
 *
 * @param tmpReq ListCommonLogsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCommonLogsResponse
 */
async function listCommonLogsWithOptions(tmpReq: ListCommonLogsRequest, runtime: Util.RuntimeOptions): ListCommonLogsResponse {
  Util.validateModel(tmpReq);
  var request = new ListCommonLogsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionName)) {
    request.actionNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionName, 'ActionName', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.actionNameShrink)) {
    query['ActionName'] = request.actionNameShrink;
  }
  if (!Util.isUnset(request.actionStatus)) {
    query['ActionStatus'] = request.actionStatus;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.isReverse)) {
    query['IsReverse'] = request.isReverse;
  }
  if (!Util.isUnset(request.logRequestId)) {
    query['LogRequestId'] = request.logRequestId;
  }
  if (!Util.isUnset(request.logType)) {
    query['LogType'] = request.logType;
  }
  if (!Util.isUnset(request.operatorUid)) {
    query['OperatorUid'] = request.operatorUid;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resource)) {
    query['Resource'] = request.resource;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCommonLogs',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询集群通用日志列表
 *
 * @param request ListCommonLogsRequest
 * @return ListCommonLogsResponse
 */
async function listCommonLogs(request: ListCommonLogsRequest): ListCommonLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCommonLogsWithOptions(request, runtime);
}

model ListInstalledSoftwaresRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
}

model ListInstalledSoftwaresResponseBody = {
  additionalPackages?: {
    additionalPackageInfos?: [ 
    {
      category?: string(name='Category', description='The category into which the software falls.', example='NWP'),
      createTime?: string(name='CreateTime', description='The time when the software was installed.', example='2024-03-05 18:24:08'),
      description?: string(name='Description', description='The software description.'),
      icon?: string(name='Icon', description='The URL of the software icon.', example='https://gw.alicdn.com/imgextra/i2/O1CN01FIkxZ81LmE0fvrAyR_!!6000000001341-55-tps-6349-1603.svg'),
      name?: string(name='Name', description='The software name.', example='gromacs'),
      status?: string(name='Status', description='The installation status of the software.

Valid values:

*   Installed
*   Uninstalled
*   Installing
*   Exception', example='Installed'),
      version?: string(name='Version', description='The software version.', example='2024.1'),
    }
  ](name='AdditionalPackageInfos')
  }(name='AdditionalPackages', description='The list of installed software.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListInstalledSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstalledSoftwaresResponseBody(name='body'),
}

/**
 * @summary Queries the installed software of a cluster.
 *
 * @param request ListInstalledSoftwaresRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListInstalledSoftwaresResponse
 */
async function listInstalledSoftwaresWithOptions(request: ListInstalledSoftwaresRequest, runtime: Util.RuntimeOptions): ListInstalledSoftwaresResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstalledSoftwares',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the installed software of a cluster.
 *
 * @param request ListInstalledSoftwaresRequest
 * @return ListInstalledSoftwaresResponse
 */
async function listInstalledSoftwares(request: ListInstalledSoftwaresRequest): ListInstalledSoftwaresResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstalledSoftwaresWithOptions(request, runtime);
}

model ListJobsRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-csbua72***'),
  jobFilter?: {
    createTimeEnd?: string(name='CreateTimeEnd', example='1724123085'),
    createTimeStart?: string(name='CreateTimeStart', example='1724122486'),
    jobName?: string(name='JobName', example='testjob'),
    jobStatus?: string(name='JobStatus', example='all'),
    nodes?: [ string ](name='Nodes'),
    queues?: [ string ](name='Queues'),
    sortBy?: {
      executeOrder?: string(name='ExecuteOrder', example='asc'),
      pendOrder?: string(name='PendOrder', example='desc'),
      submitOrder?: string(name='SubmitOrder', example='asc'),
    }(name='SortBy'),
    users?: [ string ](name='Users'),
  }(name='JobFilter'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
}

model ListJobsShrinkRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-csbua72***'),
  jobFilterShrink?: string(name='JobFilter'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: string(name='PageSize', example='10'),
}

model ListJobsResponseBody = {
  jobs?: [ 
    {
      jobName?: string(name='JobName', example='testjob'),
      jobSpec?: {
        arrayJobId?: string(name='ArrayJobId'),
        arrayJobSubId?: string(name='ArrayJobSubId'),
        arrayRequest?: string(name='ArrayRequest', example='1-5:2'),
        comment?: string(name='Comment', example='jobDescription'),
        id?: string(name='Id', example='12'),
        jobQueue?: string(name='JobQueue', example='comp'),
        lastModifyTime?: string(name='LastModifyTime', example='1724123085'),
        nodeList?: string(name='NodeList', example='compute[002,005,003]'),
        priority?: string(name='Priority', example='0'),
        resources?: {
          cores?: string(name='Cores', example='6'),
          gpus?: string(name='Gpus', example='0'),
          memory?: string(name='Memory', example='1536MB'),
          nodes?: string(name='Nodes', example='3'),
        }(name='Resources'),
        runasUser?: string(name='RunasUser', example='testuser1'),
        state?: string(name='State', example='Running'),
        stderrPath?: string(name='StderrPath', example='./Temp'),
        stdoutPath?: string(name='StdoutPath', example='./Temp'),
        submitTime?: string(name='SubmitTime', example='1724122486'),
        variables?: string(name='Variables', example='{"PBS_O_SHELL":"/bin/bash", 	"PBS_O_HOST":"manager", 	"PBS_O_SYSTEM":"Linux", 	"PBS_O_LANG":"en_US.UTF-8", 	"PBS_O_QUEUE":"workq"}'),
      }(name='JobSpec'),
    }
  ](name='Jobs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='EABFBD93-58BE-53F3-BBFE-8654BB2E****'),
  success?: boolean(name='Success', example='true'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

/**
 * @summary 查询作业列表
 *
 * @param tmpReq ListJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListJobsResponse
 */
async function listJobsWithOptions(tmpReq: ListJobsRequest, runtime: Util.RuntimeOptions): ListJobsResponse {
  Util.validateModel(tmpReq);
  var request = new ListJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobFilter)) {
    request.jobFilterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobFilter, 'JobFilter', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.jobFilterShrink)) {
    query['JobFilter'] = request.jobFilterShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobs',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询作业列表
 *
 * @param request ListJobsRequest
 * @return ListJobsResponse
 */
async function listJobs(request: ListJobsRequest): ListJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobsWithOptions(request, runtime);
}

model ListNodesRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  hostnames?: [ string ](name='Hostnames'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  privateIpAddress?: [ string ](name='PrivateIpAddress'),
  queueNames?: [ string ](name='QueueNames'),
  sequence?: string(name='Sequence', example='Forward'),
  sortBy?: string(name='SortBy', example='AddedTime'),
  status?: [ string ](name='Status'),
}

model ListNodesShrinkRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  hostnamesShrink?: string(name='Hostnames'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  privateIpAddressShrink?: string(name='PrivateIpAddress'),
  queueNamesShrink?: string(name='QueueNames'),
  sequence?: string(name='Sequence', example='Forward'),
  sortBy?: string(name='SortBy', example='AddedTime'),
  statusShrink?: string(name='Status'),
}

model ListNodesResponseBody = {
  nodes?: [ 
    {
      addTime?: string(name='AddTime', example='2020-06-09T06:22:02.000Z'),
      expiredTime?: string(name='ExpiredTime', example='2020-06-09T06:22:02.000Z'),
      hostname?: string(name='Hostname', example='edas.cn-shanghai.aliyuncs.com'),
      htEnabled?: boolean(name='HtEnabled', example='true'),
      id?: string(name='Id', example='i-bp15707mys2rsy0j****'),
      imageId?: string(name='ImageId', example='centos_7_06_64_20G_alibase_20190711.vhd'),
      instanceType?: string(name='InstanceType', example='ecs.c5.large'),
      ipAddress?: string(name='IpAddress', example='172.16.\\*\\*.**'),
      keepAlive?: boolean(name='KeepAlive', example='true'),
      publicIpAddress?: string(name='PublicIpAddress', example='172.16.\\*\\*.**'),
      queueName?: string(name='QueueName', example='autoque3'),
      spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
      stateInSched?: string(name='StateInSched', example='active'),
      status?: string(name='Status', example='running'),
      totalResources?: {
        cpu?: int32(name='Cpu', example='1'),
        gpu?: int32(name='Gpu', example='0'),
        memory?: int32(name='Memory', example='1024'),
      }(name='TotalResources'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1e47optm9g58zcu****'),
      vpcId?: string(name='VpcId', example='vpc-bp1gnu8br4ay7beb2w****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='Nodes'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='89A1AC0F-4A6C-4F3D-98F9-BEF9A823****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

/**
 * @summary 查询节点列表
 *
 * @param tmpReq ListNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNodesResponse
 */
async function listNodesWithOptions(tmpReq: ListNodesRequest, runtime: Util.RuntimeOptions): ListNodesResponse {
  Util.validateModel(tmpReq);
  var request = new ListNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hostnames)) {
    request.hostnamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hostnames, 'Hostnames', 'json');
  }
  if (!Util.isUnset(tmpReq.privateIpAddress)) {
    request.privateIpAddressShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.privateIpAddress, 'PrivateIpAddress', 'json');
  }
  if (!Util.isUnset(tmpReq.queueNames)) {
    request.queueNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queueNames, 'QueueNames', 'json');
  }
  if (!Util.isUnset(tmpReq.status)) {
    request.statusShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.status, 'Status', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.hostnamesShrink)) {
    query['Hostnames'] = request.hostnamesShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateIpAddressShrink)) {
    query['PrivateIpAddress'] = request.privateIpAddressShrink;
  }
  if (!Util.isUnset(request.queueNamesShrink)) {
    query['QueueNames'] = request.queueNamesShrink;
  }
  if (!Util.isUnset(request.sequence)) {
    query['Sequence'] = request.sequence;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.statusShrink)) {
    query['Status'] = request.statusShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListNodes',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询节点列表
 *
 * @param request ListNodesRequest
 * @return ListNodesResponse
 */
async function listNodes(request: ListNodesRequest): ListNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesWithOptions(request, runtime);
}

model ListQueuesRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  queueNames?: [ string ](name='QueueNames'),
}

model ListQueuesShrinkRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  queueNamesShrink?: string(name='QueueNames'),
}

model ListQueuesResponseBody = {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  queues?: [ 
    {
      computeNodes?: [
        NodeTemplate
      ](name='ComputeNodes'),
      createTime?: string(name='CreateTime', example='2023-11-10T02:04:00Z'),
      enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
      enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
      maxCount?: int32(name='MaxCount', example='100'),
      maxCountPerCycle?: int32(name='MaxCountPerCycle', example='1'),
      minCount?: int32(name='MinCount', example='0'),
      nodes?: {
        creatingCounts?: int32(name='CreatingCounts', example='2'),
        exceptionCounts?: int32(name='ExceptionCounts', example='0'),
        runningCounts?: int32(name='RunningCounts', example='1'),
      }(name='Nodes'),
      queueName?: string(name='QueueName', example='comp'),
      totalCores?: int32(name='TotalCores', example='24'),
      updateTime?: string(name='UpdateTime', example='2024-04-25T02:02:32'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
    }
  ](name='Queues'),
  requestId?: string(name='RequestId', example='C6E5005C-00B0-4F27-98BB-95AB88016C22'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListQueuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueuesResponseBody(name='body'),
}

/**
 * @summary 查询集群的队列信息。
 *
 * @param tmpReq ListQueuesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListQueuesResponse
 */
async function listQueuesWithOptions(tmpReq: ListQueuesRequest, runtime: Util.RuntimeOptions): ListQueuesResponse {
  Util.validateModel(tmpReq);
  var request = new ListQueuesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queueNames)) {
    request.queueNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queueNames, 'QueueNames', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.queueNamesShrink)) {
    query['QueueNames'] = request.queueNamesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListQueues',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询集群的队列信息。
 *
 * @param request ListQueuesRequest
 * @return ListQueuesResponse
 */
async function listQueues(request: ListQueuesRequest): ListQueuesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listQueuesWithOptions(request, runtime);
}

model ListSharedStoragesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the attached file system.', example='0bd504b0**'),
  fileSystemType?: string(name='FileSystemType', description='The type of the attached file system. Valid values:

*   nas
*   cpfs', example='nas'),
}

model ListSharedStoragesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F6757FA4-8FED-4602-B7F5-3550C084****'),
  sharedStorages?: [ 
    {
      fileSystemId?: string(name='FileSystemId', description='The ID of the attached file system.', example='08c7f4b***'),
      fileSystemProtocol?: string(name='FileSystemProtocol', description='The protocol used by the attached file system. Valid values:

*   nfs3
*   nfs4
*   cpfs', example='nfs4'),
      fileSystemType?: string(name='FileSystemType', description='The type of the attached file system. Valid values:

*   nas
*   cpfs', example='nas'),
      mountInfo?: [ 
        {
          mountDirectory?: string(name='MountDirectory', description='The local mount directory of the attached file system.', example='/test'),
          mountOptions?: string(name='MountOptions', description='The mount options for the attached file system. Valid values:

*   \\\\-t nfs -o vers=3,nolock,proto=tcp,noresvport
*   \\\\-t nfs -o vers=4.0,noresvport', example='-t nfs -o vers=4.0,noresvport'),
          mountTarget?: string(name='MountTarget', description='The mount target of the attached file system.', example='0bd504b***-ngq26.cn-hangzhou.nas.aliyuncs.com'),
          protocolType?: string(name='ProtocolType', description='The protocol used by the mount target of the attached file system. Valid values:

*   nfs3
*   nfs4
*   cpfs', example='nfs3'),
          storageDirectory?: string(name='StorageDirectory', description='The storage directory of the attached file system.', example='/testehpc'),
        }
      ](name='MountInfo', description='The mount information.'),
    }
  ](name='SharedStorages', description='The information about the attached shared storage.'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListSharedStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSharedStoragesResponseBody(name='body'),
}

/**
 * @summary Queries the shared storage that is attached to a cluster.
 *
 * @param request ListSharedStoragesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSharedStoragesResponse
 */
async function listSharedStoragesWithOptions(request: ListSharedStoragesRequest, runtime: Util.RuntimeOptions): ListSharedStoragesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.fileSystemType)) {
    query['FileSystemType'] = request.fileSystemType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSharedStorages',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the shared storage that is attached to a cluster.
 *
 * @param request ListSharedStoragesRequest
 * @return ListSharedStoragesResponse
 */
async function listSharedStorages(request: ListSharedStoragesRequest): ListSharedStoragesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSharedStoragesWithOptions(request, runtime);
}

model ListSoftwaresRequest {
  category?: string(name='Category', description='The application category.', example='NWP'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  name?: string(name='Name', description='The software name.', example='gromacs'),
  osInfos?: [ 
    {
      architecture?: string(name='Architecture', description='The OS architecture. Valid values:

*   x86_64
*   arm64', example='x86_64'),
      osTag?: string(name='OsTag', description='The image tag.', example='CentOS_7.9_64'),
    }
  ](name='OsInfos', description='The operating system (OS) information.'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
}

model ListSoftwaresResponseBody = {
  additionalPackages?: {
    additionalPackageInfos?: [ 
    {
      category?: string(name='Category', description='The application category.', example='NWP'),
      description?: string(name='Description', description='The software description.'),
      icon?: string(name='Icon', description='The URL of the software icon.', example='https://gw.alicdn.com/imgextra/i2/O1CN01FIkxZ81LmE0fvrAyR_!!6000000001341-55-tps-6349-1603.svg'),
      name?: string(name='Name', description='The software name.', example='gromacs'),
      versions?: {
        versionInfos?: [ 
        {
          latest?: string(name='Latest', description='Indicates whether the version is the latest.', example='false'),
          supportOs?: {
            supportOsInfos?: [ 
            {
              architecture?: string(name='Architecture', description='The OS architecture. Valid values:

*   x86_64
*   arm64', example='x86_64'),
              osTag?: string(name='OsTag', description='The image tag.', example='Alibaba Cloud Linux  3.2104 LTS 64 bit ARM Edition'),
            }
          ](name='SupportOsInfos')
          }(name='SupportOs', description='The information about the supported OSs.'),
          version?: string(name='Version', description='The software version.', example='2024.1'),
        }
      ](name='VersionInfos')
      }(name='Versions', description='The information about the software versions that can be installed in the cluster.'),
    }
  ](name='AdditionalPackageInfos')
  }(name='AdditionalPackages', description='The information about the software that can be installed in the cluster.'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSoftwaresResponseBody(name='body'),
}

/**
 * @summary Queries the software that can be installed in an Elastic High Performance Computing (E-HPC) cluster.
 *
 * @param request ListSoftwaresRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListSoftwaresResponse
 */
async function listSoftwaresWithOptions(request: ListSoftwaresRequest, runtime: Util.RuntimeOptions): ListSoftwaresResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSoftwares',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the software that can be installed in an Elastic High Performance Computing (E-HPC) cluster.
 *
 * @param request ListSoftwaresRequest
 * @return ListSoftwaresResponse
 */
async function listSoftwares(request: ListSoftwaresRequest): ListSoftwaresResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSoftwaresWithOptions(request, runtime);
}

model ListUsersRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 50.

Default value: 10', example='10'),
}

model ListUsersResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='15'),
  users?: {
    userInfo?: [ 
    {
      addTime?: string(name='AddTime', description='The time when the user was first added.', example='2014-08-22T17:46:47'),
      group?: string(name='Group', description='The name of the permission group. Valid values:

users: ordinary permissions, which are suitable for regular users that need only to submit and debug jobs.

wheel: sudo permissions, which are suitable for administrators who need to manage clusters. In addition to submitting and debugging jobs, you can also run sudo commands to install software and restart nodes.', example='users'),
      groupId?: string(name='GroupId', description='The permission group ID.', example='100'),
      userId?: string(name='UserId', description='The user ID.', example='1001'),
      userName?: string(name='UserName', description='The username.', example='testuser'),
    }
  ](name='UserInfo')
  }(name='Users', description='The information about the users.'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
 * @summary Queries the users of a cluster.
 *
 * @param request ListUsersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUsersResponse
 */
async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the users of a cluster.
 *
 * @param request ListUsersRequest
 * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model StopJobsRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  jobIds?: [ string ](name='JobIds', description='The IDs of the jobs that you want to stop.'),
}

model StopJobsShrinkRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
  jobIdsShrink?: string(name='JobIds', description='The IDs of the jobs that you want to stop.'),
}

model StopJobsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F8868A00-6757-5542-BDD6-E1040D94****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model StopJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopJobsResponseBody(name='body'),
}

/**
 * @summary Stops jobs in a cluster.
 *
 * @param tmpReq StopJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopJobsResponse
 */
async function stopJobsWithOptions(tmpReq: StopJobsRequest, runtime: Util.RuntimeOptions): StopJobsResponse {
  Util.validateModel(tmpReq);
  var request = new StopJobsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobIds)) {
    request.jobIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobIds, 'JobIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.jobIdsShrink)) {
    query['JobIds'] = request.jobIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopJobs',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stops jobs in a cluster.
 *
 * @param request StopJobsRequest
 * @return StopJobsResponse
 */
async function stopJobs(request: StopJobsRequest): StopJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopJobsWithOptions(request, runtime);
}

model UnInstallAddonRequest {
  addonId?: string(name='AddonId', description='The addon ID.

This parameter is required.', example='Login-1.0-W2g****'),
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.

This parameter is required.', example='ehpc-hz-FYUr32****'),
}

model UnInstallAddonResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model UnInstallAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnInstallAddonResponseBody(name='body'),
}

/**
 * @summary Uninstalls an addon.
 *
 * @param request UnInstallAddonRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UnInstallAddonResponse
 */
async function unInstallAddonWithOptions(request: UnInstallAddonRequest, runtime: Util.RuntimeOptions): UnInstallAddonResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addonId)) {
    query['AddonId'] = request.addonId;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnInstallAddon',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Uninstalls an addon.
 *
 * @param request UnInstallAddonRequest
 * @return UnInstallAddonResponse
 */
async function unInstallAddon(request: UnInstallAddonRequest): UnInstallAddonResponse {
  var runtime = new Util.RuntimeOptions{};
  return unInstallAddonWithOptions(request, runtime);
}

model UninstallSoftwaresRequest {
  additionalPackages?: [ 
    {
      name?: string(name='Name', description='The software name.', example='gromacs'),
      version?: string(name='Version', description='The software version.', example='2024.1'),
    }
  ](name='AdditionalPackages', description='The information about the software systems that you want to uninstall.'),
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.', example='ehpc-hz-FYUr32****'),
}

model UninstallSoftwaresShrinkRequest {
  additionalPackagesShrink?: string(name='AdditionalPackages', description='The information about the software systems that you want to uninstall.'),
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](https://help.aliyun.com/document_detail/87116.html) operation to query the cluster ID.', example='ehpc-hz-FYUr32****'),
}

model UninstallSoftwaresResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UninstallSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallSoftwaresResponseBody(name='body'),
}

/**
 * @summary Uninstalls software systems from an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @param tmpReq UninstallSoftwaresRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UninstallSoftwaresResponse
 */
async function uninstallSoftwaresWithOptions(tmpReq: UninstallSoftwaresRequest, runtime: Util.RuntimeOptions): UninstallSoftwaresResponse {
  Util.validateModel(tmpReq);
  var request = new UninstallSoftwaresShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.additionalPackages)) {
    request.additionalPackagesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.additionalPackages, 'AdditionalPackages', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallSoftwares',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Uninstalls software systems from an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @param request UninstallSoftwaresRequest
 * @return UninstallSoftwaresResponse
 */
async function uninstallSoftwares(request: UninstallSoftwaresRequest): UninstallSoftwaresResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallSoftwaresWithOptions(request, runtime);
}

model UpdateClusterRequest {
  clientVersion?: string(name='ClientVersion', example='2.1.0'),
  clusterCustomConfiguration?: {
    args?: string(name='Args', example='E-HPC cn-hangzhou'),
    script?: string(name='Script', example='http://*****'),
  }(name='ClusterCustomConfiguration'),
  clusterDescription?: string(name='ClusterDescription', example='slurm22.05.8-serverless-cluster-20240805'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-serverless-cluster-20240805'),
  deletionProtection?: boolean(name='DeletionProtection', example='false'),
  enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
  enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
  growInterval?: int32(name='GrowInterval', example='2'),
  idleInterval?: int32(name='IdleInterval', example='4'),
  maxCoreCount?: int32(name='MaxCoreCount', example='10000'),
  maxCount?: int32(name='MaxCount', example='500'),
}

model UpdateClusterShrinkRequest {
  clientVersion?: string(name='ClientVersion', example='2.1.0'),
  clusterCustomConfigurationShrink?: string(name='ClusterCustomConfiguration'),
  clusterDescription?: string(name='ClusterDescription', example='slurm22.05.8-serverless-cluster-20240805'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-serverless-cluster-20240805'),
  deletionProtection?: boolean(name='DeletionProtection', example='false'),
  enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
  enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
  growInterval?: int32(name='GrowInterval', example='2'),
  idleInterval?: int32(name='IdleInterval', example='4'),
  maxCoreCount?: int32(name='MaxCoreCount', example='10000'),
  maxCount?: int32(name='MaxCount', example='500'),
}

model UpdateClusterResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClusterResponseBody(name='body'),
}

/**
 * @summary 修改指定集群的基本信息。
 *
 * @param tmpReq UpdateClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateClusterResponse
 */
async function updateClusterWithOptions(tmpReq: UpdateClusterRequest, runtime: Util.RuntimeOptions): UpdateClusterResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateClusterShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clusterCustomConfiguration)) {
    request.clusterCustomConfigurationShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clusterCustomConfiguration, 'ClusterCustomConfiguration', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientVersion)) {
    query['ClientVersion'] = request.clientVersion;
  }
  if (!Util.isUnset(request.clusterCustomConfigurationShrink)) {
    query['ClusterCustomConfiguration'] = request.clusterCustomConfigurationShrink;
  }
  if (!Util.isUnset(request.clusterDescription)) {
    query['ClusterDescription'] = request.clusterDescription;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.enableScaleIn)) {
    query['EnableScaleIn'] = request.enableScaleIn;
  }
  if (!Util.isUnset(request.enableScaleOut)) {
    query['EnableScaleOut'] = request.enableScaleOut;
  }
  if (!Util.isUnset(request.growInterval)) {
    query['GrowInterval'] = request.growInterval;
  }
  if (!Util.isUnset(request.idleInterval)) {
    query['IdleInterval'] = request.idleInterval;
  }
  if (!Util.isUnset(request.maxCoreCount)) {
    query['MaxCoreCount'] = request.maxCoreCount;
  }
  if (!Util.isUnset(request.maxCount)) {
    query['MaxCount'] = request.maxCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCluster',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改指定集群的基本信息。
 *
 * @param request UpdateClusterRequest
 * @return UpdateClusterResponse
 */
async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClusterWithOptions(request, runtime);
}

model UpdateNodesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID of the compute node.', example='i-bp1bzqq1ddeemuddn****'),
      keepAlive?: boolean(name='KeepAlive', description='Specifies whether to enable deletion protection for the compute node.', example='true'),
    }
  ](name='Instances', description='The information about the compute nodes that you want to update.'),
}

model UpdateNodesShrinkRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  instancesShrink?: string(name='Instances', description='The information about the compute nodes that you want to update.'),
}

model UpdateNodesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', description='The request result. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodesResponseBody(name='body'),
}

/**
 * @summary Updates the configurations of compute nodes in an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @description ## [](#)Usage notes
 * Before you delete a compute node, we recommend that you export all job data from the node to prevent data loss.
 *
 * @param tmpReq UpdateNodesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNodesResponse
 */
async function updateNodesWithOptions(tmpReq: UpdateNodesRequest, runtime: Util.RuntimeOptions): UpdateNodesResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateNodesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instances)) {
    request.instancesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instances, 'Instances', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instancesShrink)) {
    query['Instances'] = request.instancesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodes',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the configurations of compute nodes in an Enterprise High Performance Computing (E-HPC) cluster.
 *
 * @description ## [](#)Usage notes
 * Before you delete a compute node, we recommend that you export all job data from the node to prevent data loss.
 *
 * @param request UpdateNodesRequest
 * @return UpdateNodesResponse
 */
async function updateNodes(request: UpdateNodesRequest): UpdateNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodesWithOptions(request, runtime);
}

model UpdateQueueRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  queue?: {
    allocationStrategy?: string(name='AllocationStrategy', example='PriorityInstanceType'),
    computeNodes?: [
      NodeTemplate
    ](name='ComputeNodes'),
    enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
    enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
    hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
    hostnameSuffix?: string(name='HostnameSuffix', example='hpc'),
    initialCount?: int32(name='InitialCount', example='0'),
    interConnect?: string(name='InterConnect', example='erdma'),
    keepAliveNodes?: [ string ](name='KeepAliveNodes'),
    maxCount?: int32(name='MaxCount', example='1000'),
    maxCountPerCycle?: long(name='MaxCountPerCycle', example='99'),
    minCount?: int32(name='MinCount', example='0'),
    queueName?: string(name='QueueName', description='This parameter is required.', example='comp'),
    ramRole?: string(name='RamRole', example='AliyunECSInstanceForEHPCRole'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='Queue'),
}

model UpdateQueueShrinkRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  queueShrink?: string(name='Queue'),
}

model UpdateQueueResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='true'),
}

model UpdateQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQueueResponseBody(name='body'),
}

/**
 * @summary 更新集群的队列配置信息
 *
 * @param tmpReq UpdateQueueRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateQueueResponse
 */
async function updateQueueWithOptions(tmpReq: UpdateQueueRequest, runtime: Util.RuntimeOptions): UpdateQueueResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateQueueShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.queue)) {
    request.queueShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.queue, 'Queue', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.queueShrink)) {
    query['Queue'] = request.queueShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateQueue',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新集群的队列配置信息
 *
 * @param request UpdateQueueRequest
 * @return UpdateQueueResponse
 */
async function updateQueue(request: UpdateQueueRequest): UpdateQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateQueueWithOptions(request, runtime);
}

model UpdateUserRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='ehpc-hz-FYUr32****'),
  group?: string(name='Group', example='users'),
  password?: string(name='Password', example='123****'),
  userName?: string(name='UserName', description='This parameter is required.', example='testuser'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: string(name='Success', example='true'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

/**
 * @summary 更新集群单个用户属性
 *
 * @param request UpdateUserRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateUserResponse
 */
async function updateUserWithOptions(request: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.group)) {
    query['Group'] = request.group;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.userName)) {
    query['UserName'] = request.userName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUser',
    version = '2024-07-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新集群单个用户属性
 *
 * @param request UpdateUserRequest
 * @return UpdateUserResponse
 */
async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

