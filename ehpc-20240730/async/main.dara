/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EHPC';
  @version = '2024-07-30';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddonNodeTemplate {
  autoRenew?: boolean(name='AutoRenew', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='1'),
  dataDisks?: [ 
    {
      category?: string(name='Category', example='cloud_auto'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', example='false'),
      level?: string(name='Level', example='PL0'),
      size?: int32(name='Size', example='40'),
    }
  ](name='DataDisks'),
  duration?: int32(name='Duration', example='1'),
  enableHT?: boolean(name='EnableHT', example='true'),
  imageId: string(name='ImageId', example='aliyun_3_x64_20G_alibase_20221102.vhd'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  instanceId?: string(name='InstanceId'),
  instanceType: string(name='InstanceType', example='ecs.c7.4xlarge'),
  osName: string(name='OsName', example='CentOS  7.6 64 ‰Ωç'),
  osNameEN: string(name='OsNameEN', example='CentOS  7.6 64 bit'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  spotPriceLimit?: float(name='SpotPriceLimit', example='0.97'),
  spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
  systemDisk?: {
    category?: string(name='Category', example='cloud_auto'),
    level?: string(name='Level', example='PL0'),
    size?: int32(name='Size', example='40'),
  }(name='SystemDisk'),
}

model NodeTemplate {
  autoRenew?: boolean(name='AutoRenew', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', example='1'),
  dataDisks?: [ 
    {
      category?: string(name='Category', example='cloud_auto'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', example='false'),
      level?: string(name='Level', example='PL0'),
      size?: int32(name='Size', example='40'),
    }
  ](name='DataDisks'),
  duration?: int32(name='Duration', example='1'),
  enableHT?: boolean(name='EnableHT', example='true'),
  imageId?: string(name='ImageId', example='aliyun_3_x64_20G_alibase_20221102.vhd'),
  instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
  instanceType?: string(name='InstanceType', example='ecs.c7.4xlarge'),
  period?: int32(name='Period', example='1'),
  periodUnit?: string(name='PeriodUnit', example='Month'),
  spotPriceLimit?: float(name='SpotPriceLimit', example='0.97'),
  spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
  systemDisk?: {
    category?: string(name='Category', example='cloud_auto'),
    level?: string(name='Level', example='PL0'),
    size?: int32(name='Size', example='40'),
  }(name='SystemDisk'),
}

model QueueTemplate {
  allocationStrategy?: string(name='AllocationStrategy', example='PriorityInstanceType'),
  computeNodes?: [
    NodeTemplate
  ](name='ComputeNodes'),
  enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
  enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
  hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
  hostnameSuffix?: string(name='HostnameSuffix'),
  initialCount?: int32(name='InitialCount', example='0'),
  interConnect?: string(name='InterConnect', example='erdma'),
  keepAliveNodes?: [ string ](name='KeepAliveNodes'),
  maxCount?: int32(name='MaxCount', example='1000'),
  maxCountPerCycle?: long(name='MaxCountPerCycle', example='99'),
  minCount?: int32(name='MinCount', example='0'),
  queueName: string(name='QueueName', example='comp'),
  ramRole?: string(name='RamRole', example='AliyunECSInstanceForEHPCRole'),
  vSwitchIds?: [ string ](name='VSwitchIds'),
}

model SharedStorageTemplate {
  fileSystemId?: string(name='FileSystemId', example='008b63****'),
  mountDirectory?: string(name='MountDirectory', example='/home'),
  mountOptions?: string(name='MountOptions', example='-t nfs -o vers=3,nolock,noresvport'),
  mountTargetDomain?: string(name='MountTargetDomain', example='008b****-sihc.cn-hangzhou.extreme.nas.aliyuncs.com'),
  NASDirectory?: string(name='NASDirectory', example='/'),
  protocolType?: string(name='ProtocolType', example='NFS'),
}

model AttachSharedStoragesRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  sharedStorages: [ 
    {
      fileSystemId: string(name='FileSystemId', example='0bd504b0**'),
      location?: string(name='Location', example='PublicCloud'),
      mountDirectory: string(name='MountDirectory', example='/test'),
      mountOptions?: string(name='MountOptions', example='-t nfs -o vers=3,nolock,proto=tcp,noresvport'),
      mountTarget: string(name='MountTarget', example='0bd504b***-ngq26.cn-hangzhou.nas.aliyuncs.com'),
      protocolType: string(name='ProtocolType', example='NFS'),
      storageDirectory: string(name='StorageDirectory', example='/testehpc'),
      volumeType: string(name='VolumeType', example='nas'),
    }
  ](name='SharedStorages', shrink='json', position='Query'),
}

model AttachSharedStoragesResponseBody = {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  requestId?: string(name='RequestId', example='F9B7BEF8-E42E-5090-9880-55FB7872****'),
  success?: string(name='Success', example='true'),
}

model AttachSharedStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachSharedStoragesResponseBody(name='body'),
}

async function attachSharedStorages(request: AttachSharedStoragesRequest): AttachSharedStoragesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachSharedStorages', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  additionalPackages?: [ 
    {
      name?: string(name='Name', example='mpich'),
      version?: string(name='Version', example='4.0.3'),
    }
  ](name='AdditionalPackages', shrink='json', position='Query'),
  addons?: [ 
    {
      name: string(name='Name', example='Login'),
      resourcesSpec?: string(name='ResourcesSpec', example='"{\\\\"EipResource\\\\": {\\\\"AutoCreate\\\\": true}, \\\\"EcsResources\\\\": [{\\\\"InstanceType\\\\": \\\\"ecs.c7.xlarge\\\\", \\\\"ImageId\\\\": \\\\"centos_7_6_x64_20G_alibase_20211130.vhd\\\\", \\\\"SystemDisk\\\\": {\\\\"Category\\\\": \\\\"cloud_essd\\\\", \\\\"Size\\\\": 40, \\\\"Level\\\\": \\\\"PL0\\\\"}, \\\\"EnableHT\\\\": true, \\\\"InstanceChargeType\\\\": \\\\"PostPaid\\\\", \\\\"SpotStrategy\\\\": \\\\"NoSpot\\\\"}]}"'),
      servicesSpec?: string(name='ServicesSpec', example='"[{\\\\"ServiceName\\\\": \\\\"SSH\\\\", \\\\"ServiceAccessType\\\\": null, \\\\"ServiceAccessUrl\\\\": null, \\\\"NetworkACL\\\\": [{\\\\"IpProtocol\\\\": \\\\"TCP\\\\", \\\\"Port\\\\": 22, \\\\"SourceCidrIp\\\\": \\\\"0.0.0.0/0\\\\"}]}, {\\\\"ServiceName\\\\": \\\\"VNC\\\\", \\\\"ServiceAccessType\\\\": null, \\\\"ServiceAccessUrl\\\\": null, \\\\"NetworkACL\\\\": [{\\\\"IpProtocol\\\\": \\\\"TCP\\\\", \\\\"Port\\\\": 12016, \\\\"SourceCidrIp\\\\": \\\\"0.0.0.0/0\\\\"}]}, {\\\\"ServiceName\\\\": \\\\"CLIENT\\\\", \\\\"ServiceAccessType\\\\": \\\\"URL\\\\", \\\\"ServiceAccessUrl\\\\": \\\\"\\\\", \\\\"NetworkACL\\\\": [{\\\\"IpProtocol\\\\": \\\\"TCP\\\\", \\\\"Port\\\\": 12011, \\\\"SourceCidrIp\\\\": \\\\"0.0.0.0/0\\\\"}]}]"'),
      version: string(name='Version', example='1.0'),
    }
  ](name='Addons', shrink='json', position='Query'),
  clientVersion?: string(name='ClientVersion', example='2.1.0', position='Query'),
  clusterCategory?: string(name='ClusterCategory', example='Standard', position='Query'),
  clusterCredentials?: {
    keyPairName?: string(name='KeyPairName', example='ali0824'),
    password?: string(name='Password', example='**********'),
  }(name='ClusterCredentials', shrink='json', position='Query'),
  clusterCustomConfiguration?: {
    args?: string(name='Args', example='E-HPC cn-hangzhou'),
    script?: string(name='Script', example='http://*****'),
  }(name='ClusterCustomConfiguration', shrink='json', position='Query'),
  clusterDescription?: string(name='ClusterDescription', example='slurm22.05.8-cluster-20240718', position='Query'),
  clusterMode?: string(name='ClusterMode', example='Integrated', position='Query'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-cluster-20240718', position='Query'),
  clusterVSwitchId?: string(name='ClusterVSwitchId', example='vsw-f8za5p0mwzgdu3wgx****', position='Query'),
  clusterVpcId?: string(name='ClusterVpcId', example='vpc-m5efjevmclc0xdmys****', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', example='false', position='Query'),
  isEnterpriseSecurityGroup?: boolean(name='IsEnterpriseSecurityGroup', example='false', position='Query'),
  manager?: {
    DNS?: {
      type?: string(name='Type', example='NIS'),
      version?: string(name='Version', example='2.31'),
    }(name='DNS'),
    directoryService?: {
      type?: string(name='Type', example='NIS'),
      version?: string(name='Version', example='2.31'),
    }(name='DirectoryService'),
    managerNode?: NodeTemplate(name='ManagerNode'),
    scheduler?: {
      type?: string(name='Type', example='SLURM'),
      version?: string(name='Version', example='22.05.8'),
    }(name='Scheduler'),
  }(name='Manager', shrink='json', position='Query'),
  maxCoreCount?: int32(name='MaxCoreCount', example='10000', position='Query'),
  maxCount?: int32(name='MaxCount', example='500', position='Query'),
  queues?: [
    QueueTemplate
  ](name='Queues', shrink='json', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4******', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-bp13n61xsydodfyg****', position='Query'),
  sharedStorages?: [
    SharedStorageTemplate
  ](name='SharedStorages', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', example='ClusterId'),
      value?: string(name='Value', example='ehpc-hz-******'),
    }
  ](name='Tags', shrink='json', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr******'),
  requestId?: string(name='RequestId', example='F6757FA4-8FED-4602-B7F5-3550C0******'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='F6757FA4-8FED-4602-B7F5-3550C0******'),
}

model CreateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateNodesRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  computeNode?: NodeTemplate(name='ComputeNode', shrink='json', position='Query'),
  count?: int32(name='Count', example='10', position='Query'),
  HPCInterConnect?: string(name='HPCInterConnect', example='vpc', position='Query'),
  hostnamePrefix?: string(name='HostnamePrefix', example='compute', position='Query'),
  hostnameSuffix?: string(name='HostnameSuffix', example='demo', position='Query'),
  keepAlive?: string(name='KeepAlive', example='false', position='Query'),
  queueName?: string(name='QueueName', example='test1', position='Query'),
  ramRole?: string(name='RamRole', example='AliyunServiceRoleForOOSBandwidthScheduler', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1lfcjbfb099rrjn****', position='Query'),
}

model CreateNodesResponseBody = {
  instanceIds?: [ string ](name='InstanceIds'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='true'),
}

model CreateNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNodesResponseBody(name='body'),
}

async function createNodes(request: CreateNodesRequest): CreateNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNodes', 'POST', '/', 'json', false, 'json', request);
}

model CreateQueueRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  queue?: QueueTemplate(name='Queue', description='The configurations of the queue to be created.', shrink='json', position='Query'),
}

model CreateQueueResponseBody = {
  name?: string(name='Name', description='The name of the created queue.', example='test'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model CreateQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateQueueResponseBody(name='body'),
}

async function createQueue(request: CreateQueueRequest): CreateQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreateUsersRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  user?: [ 
    {
      authKey?: string(name='AuthKey', example='Abc****'),
      group?: string(name='Group', example='users'),
      password?: string(name='Password', example='1@a2****'),
      userName?: string(name='UserName', example='testuser'),
    }
  ](name='User', shrink='json', position='Query'),
}

model CreateUsersResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model CreateUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUsersResponseBody(name='body'),
}

async function createUsers(request: CreateUsersRequest): CreateUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUsers', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-QKKVqO****', position='Query'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F1AB6D8D-E185-4D94-859C-7CE7B8B7****'),
  success?: boolean(name='Success', description='The request result. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  taskId?: string(name='TaskId', description='The task ID.', example='F1AB6D8D-E185-4D94-859C-7CE7B8B7****'),
}

model DeleteClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteJobsRequest {
  jobSpec?: [ 
    {
      jobId?: string(name='JobId'),
      taskSpec?: [ 
        {
          arrayIndex?: [ int32 ](name='ArrayIndex'),
          taskName?: string(name='TaskName'),
        }
      ](name='TaskSpec'),
    }
  ](name='JobSpec', shrink='json', position='Query'),
}

model DeleteJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteJobsResponseBody(name='body'),
}

async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJobs', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNodesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID. You can call the [listclusters](~~87116~~) operation to query the cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', description='The instance IDs of the compute nodes that you want to delete.', shrink='json', position='Query'),
}

model DeleteNodesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  taskId?: string(name='TaskId', description='The task ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model DeleteNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNodesResponseBody(name='body'),
}

/**
  * ## [](#)Usage notes
  * Before you delete a compute node, we recommend that you export all job data from the node to prevent data loss.
  *
 */
async function deleteNodes(request: DeleteNodesRequest): DeleteNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNodes', 'POST', '/', 'json', false, 'json', request);
}

model DeleteQueuesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  queueNames?: [ string ](name='QueueNames', description='The queues that you want to delete.', shrink='json', position='Query'),
}

model DeleteQueuesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model DeleteQueuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteQueuesResponseBody(name='body'),
}

/**
  * ## [](#)Usage notes
  * Before you delete a queue, you must delete all compute nodes in the queue.
  *
 */
async function deleteQueues(request: DeleteQueuesRequest): DeleteQueuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueues', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUsersRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  user: [ 
    {
      userName: string(name='UserName', description='The name of user N that you want to delete.

Valid values of N: 1 to 100.', example='testuser'),
    }
  ](name='User', description='The users that you want to delete.', shrink='json', position='Query'),
}

model DeleteUsersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE****'),
}

model DeleteUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUsersResponseBody(name='body'),
}

async function deleteUsers(request: DeleteUsersRequest): DeleteUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUsers', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAddonTemplateRequest {
  addonName: string(name='AddonName', example='Login', position='Query'),
  addonVersion: string(name='AddonVersion', example='1.0', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='20', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b', position='Query'),
}

model DescribeAddonTemplateResponseBody = {
  addon?: {
    description?: string(name='Description'),
    icon?: string(name='Icon', example='/assets/icons/your_icon.svg'),
    label?: string(name='Label'),
    lastUpdate?: string(name='LastUpdate', example='2024-08-22 18:11:17'),
    name: string(name='Name', example='Login'),
    resourcesSpec?: {
      ecsResources?: [
        AddonNodeTemplate
      ](name='EcsResources'),
      eipResource?: {
        autoCreate?: boolean(name='AutoCreate', example='True'),
        bandwidth?: string(name='Bandwidth', example='100'),
        eipInstanceId?: string(name='EipInstanceId', example='eip-bp1jwtsuoiif2qf90****'),
        instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
        internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
      }(name='EipResource'),
    }(name='ResourcesSpec'),
    servicesSpec?: [ 
      {
        inputParams?: [ 
          {
            helpText?: string(name='HelpText'),
            label?: string(name='Label'),
            name: string(name='Name', example='MYSQL_HOME'),
            type: string(name='Type', example='String'),
            value: string(name='Value', example='usr/local/mysql'),
          }
        ](name='InputParams'),
        networkACL?: [ 
          {
            ipProtocol: string(name='IpProtocol', example='TCP'),
            port: float(name='Port', example='3306'),
            sourceCidrIp: string(name='SourceCidrIp', example='172.16.0.0/12'),
          }
        ](name='NetworkACL'),
        serviceAccessType?: string(name='ServiceAccessType', example='URL'),
        serviceAccessUrl?: string(name='ServiceAccessUrl', example='https://47.96.xx.xx:12008'),
        serviceName: string(name='ServiceName', example='Web Portal'),
      }
    ](name='ServicesSpec'),
    version: string(name='Version', example='1.0'),
  }(name='Addon'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeAddonTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAddonTemplateResponseBody(name='body'),
}

async function describeAddonTemplate(request: DescribeAddonTemplateRequest): DescribeAddonTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAddonTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DetachSharedStoragesRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](~~87116~~) operation to query the cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  sharedStorages: [ 
    {
      mountDirectory: string(name='MountDirectory', description='The local mount directory of the mounted file system.', example='/test'),
    }
  ](name='SharedStorages', description='The information about mounted shared storage resources.', shrink='json', position='Query'),
}

model DetachSharedStoragesResponseBody = {
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](~~87116~~) operation to query the cluster ID.', example='ehpc-hz-FYUr32****'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DetachSharedStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachSharedStoragesResponseBody(name='body'),
}

async function detachSharedStorages(request: DetachSharedStoragesRequest): DetachSharedStoragesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachSharedStorages', 'POST', '/', 'json', false, 'json', request);
}

model GetAddonRequest {
  addonId: string(name='AddonId', example='Login-1.0-W4g****', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
}

model GetAddonResponseBody = {
  addon?: {
    addonId: string(name='AddonId', example='Login-1.0-W2g****'),
    description?: string(name='Description'),
    icon?: string(name='Icon', example='/assets/icons/your_icon.svg'),
    installTime?: string(name='InstallTime', example='2024-08-22 18:11:17'),
    label?: string(name='Label'),
    name: string(name='Name', example='Login'),
    resourcesSpec?: {
      ecsResources?: [
        AddonNodeTemplate
      ](name='EcsResources'),
      eipResource?: {
        autoCreate?: boolean(name='AutoCreate', example='True'),
        bandwidth?: string(name='Bandwidth', example='100'),
        eipAddress?: string(name='EipAddress', example='39.108.xx.xx'),
        eipInstanceId?: string(name='EipInstanceId', example='eip-bp1vi9124tbx1g3kr****'),
        instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
        internetChargeType?: string(name='InternetChargeType', example='PayByTraffic'),
      }(name='EipResource'),
    }(name='ResourcesSpec'),
    servicesSpec?: [ 
      {
        inputParams?: [ 
          {
            helpText?: string(name='HelpText'),
            label?: string(name='Label'),
            name: string(name='Name', example='MYSQL_HOME'),
            type: string(name='Type', example='String'),
            value: string(name='Value', example='usr/local/mysql'),
          }
        ](name='InputParams'),
        networkACL?: [ 
          {
            ipProtocol: string(name='IpProtocol', example='TCP'),
            port: float(name='Port', example='3306'),
            sourceCidrIp: string(name='SourceCidrIp', example='172.16.0.0/12'),
          }
        ](name='NetworkACL'),
        serviceAccessType?: string(name='ServiceAccessType', example='URL'),
        serviceAccessUrl?: string(name='ServiceAccessUrl', example='https://47.96.xx.xx:12008'),
        serviceName: string(name='ServiceName', example='Web Portal'),
      }
    ](name='ServicesSpec'),
    status?: string(name='Status', example='Running'),
    version: string(name='Version', example='1.0'),
  }(name='Addon'),
  requestId?: string(name='RequestId', example='BBC2F93D-003A-49C4-850C-B826EECF****'),
}

model GetAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAddonResponseBody(name='body'),
}

async function getAddon(request: GetAddonRequest): GetAddonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAddon', 'POST', '/', 'json', false, 'json', request);
}

model GetClusterRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
}

model GetClusterResponseBody = {
  clientVersion?: string(name='ClientVersion', example='2.0.31'),
  clusterCategory?: string(name='ClusterCategory', example='Standard'),
  clusterCreateTime?: string(name='ClusterCreateTime', example='2024-08-06T12:43:01.000Z'),
  clusterCustomConfiguration?: {
    args?: string(name='Args', example='E-HPC cn-hangzhou'),
    script?: string(name='Script', example='http://*****'),
  }(name='ClusterCustomConfiguration'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  clusterMode?: string(name='ClusterMode', example='Integrated'),
  clusterModifyTime?: string(name='ClusterModifyTime', example='2024-08-06T12:43:01.000Z'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-cluster-20240614'),
  clusterStatus?: string(name='ClusterStatus', example='running'),
  clusterVSwitchId?: string(name='ClusterVSwitchId', example='vsw-bp1p2uugqsjppno******'),
  clusterVpcId?: string(name='ClusterVpcId', example='vpc-uf6u3lk1pjy28eg*****'),
  deleteProtection?: string(name='DeleteProtection', example='true'),
  ehpcVersion?: string(name='EhpcVersion', example='2.0.0'),
  enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
  enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
  growInterval?: int32(name='GrowInterval', example='2'),
  idleInterval?: int32(name='IdleInterval', example='4'),
  manager?: {
    DNS?: {
      status?: string(name='Status', example='running'),
      type?: string(name='Type', example='nis'),
      version?: string(name='Version', example='2.31'),
    }(name='DNS'),
    directoryService?: {
      status?: string(name='Status', example='running'),
      type?: string(name='Type', example='nis'),
      version?: string(name='Version', example='2.31'),
    }(name='DirectoryService'),
    managerNode?: {
      expiredTime?: string(name='ExpiredTime', example='2099-12-31T15:59Z'),
      instanceChargeType?: string(name='InstanceChargeType', example='PostPaid'),
      instanceId?: string(name='InstanceId', example='i-bp1a170jgea1vl******'),
      instanceType?: string(name='InstanceType', example='ecs.g6.4xlarge'),
    }(name='ManagerNode'),
    scheduler?: {
      status?: string(name='Status', example='running'),
      type?: string(name='Type', example='SLURM'),
      version?: string(name='Version', example='22.05.8'),
    }(name='Scheduler'),
  }(name='Manager'),
  maxCoreCount?: string(name='MaxCoreCount', example='10000'),
  maxCount?: string(name='MaxCount', example='100'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-f8z9vb2zaezpkr69a21k'),
}

model GetClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetClusterResponseBody(name='body'),
}

async function getCluster(request: GetClusterRequest): GetClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCluster', 'POST', '/', 'json', false, 'json', request);
}

model GetCommonLogDetailRequest {
  from: long(name='From', example='1703821542', position='Query'),
  hiddenProcess?: boolean(name='HiddenProcess', example='true', position='Query'),
  logRequestId: string(name='LogRequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****', position='Query'),
  to: long(name='To', example='1703821666', position='Query'),
}

model GetCommonLogDetailResponseBody = {
  action?: string(name='Action', example='CreateCluster'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-abc***'),
  logDetail?: [ 
    {
      stageName?: string(name='StageName', example='ConfigNetwork'),
      stages?: [ 
        {
          logLevel?: string(name='LogLevel', example='INFO'),
          message?: string(name='Message', example='Successfully created security group sg-bcd***'),
          method?: string(name='Method', example='CreateSecurityGroup'),
          requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
          status?: string(name='Status', example='Finished'),
          target?: string(name='Target', example='sg-bcd***'),
          time?: string(name='Time', example='2024-08-22 14:21:54'),
        }
      ](name='Stages'),
    }
  ](name='LogDetail'),
  logType?: string(name='LogType', example='operation'),
  operatorUid?: string(name='OperatorUid', example='239***'),
  requestId?: string(name='RequestId', example='464E9919-D04F-4D1D-B375-15989492****'),
  uid?: string(name='Uid', example='137***'),
}

model GetCommonLogDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCommonLogDetailResponseBody(name='body'),
}

async function getCommonLogDetail(request: GetCommonLogDetailRequest): GetCommonLogDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommonLogDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetQueueRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  queueName?: string(name='QueueName', example='comp', position='Query'),
}

model GetQueueResponseBody = {
  queue?: {
    allocationStrategy?: string(name='AllocationStrategy', example='PriorityInstanceType'),
    computeNodes?: [
      NodeTemplate
    ](name='ComputeNodes'),
    enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
    enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
    hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
    hostnameSuffix?: string(name='HostnameSuffix', example='demo'),
    initialCount?: int32(name='InitialCount', example='0'),
    interConnect?: string(name='InterConnect', example='erdma'),
    keepAliveNodes?: [ string ](name='KeepAliveNodes'),
    maxCount?: int32(name='MaxCount', example='1000'),
    maxCountPerCycle?: long(name='MaxCountPerCycle', example='99'),
    minCount?: int32(name='MinCount', example='0'),
    queueName: string(name='QueueName', example='comp'),
    ramRole?: string(name='RamRole', example='AliyunECSInstanceForEHPCRole'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='Queue'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model GetQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetQueueResponseBody(name='body'),
}

async function getQueue(request: GetQueueRequest): GetQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetQueue', 'POST', '/', 'json', false, 'json', request);
}

model InstallAddonRequest {
  addonName: string(name='AddonName', description='The addon name.', example='Login', position='Query'),
  addonVersion: string(name='AddonVersion', description='The addon version.', example='1.0', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  resourcesSpec: string(name='ResourcesSpec', description='The resource configurations of the addon.', example='`{"EipResource": {"AutoCreate": true}, "EcsResources": [{"InstanceType": "ecs.c7.xlarge", "ImageId": "centos_7_6_xxx.vhd", "SystemDisk": {"Category": "cloud_essd", "Size": 40, "Level": "PL0"}]}`', position='Query'),
  servicesSpec: string(name='ServicesSpec', description='The service configurations of the addon.', example='`[{"ServiceName": "SSH", "ServiceAccessType": null, "ServiceAccessUrl": null, "NetworkACL": [{"IpProtocol": "TCP", "Port": 22, "SourceCidrIp": "0.0.0.0/0"}]}, {"ServiceName": "VNC", "ServiceAccessType": null, "ServiceAccessUrl": null, "NetworkACL": [{"IpProtocol": "TCP", "Port": 12016, "SourceCidrIp": "0.0.0.0/0"}]}]`', position='Query'),
}

model InstallAddonResponseBody = {
  addonId: string(name='AddonId', description='The addon ID.', example='Login-1.0-W4g****'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****'),
  requestId?: string(name='RequestId', description='The request ID.', example='B745C159-3155-4B94-95D0-4B73D4D2****'),
}

model InstallAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallAddonResponseBody(name='body'),
}

async function installAddon(request: InstallAddonRequest): InstallAddonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallAddon', 'POST', '/', 'json', false, 'json', request);
}

model InstallSoftwaresRequest {
  additionalPackages?: [ 
    {
      name?: string(name='Name', description='The software name.', example='gromacs'),
      version?: string(name='Version', description='The software version.', example='2024.1'),
    }
  ](name='AdditionalPackages', description='The information about the software systems that you want to install.', shrink='json', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
}

model InstallSoftwaresResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model InstallSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallSoftwaresResponseBody(name='body'),
}

async function installSoftwares(request: InstallSoftwaresRequest): InstallSoftwaresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallSoftwares', 'GET', '/', 'json', false, 'json', request);
}

model ListAddonTemplatesRequest {
  addonNames?: [ string ](name='AddonNames', position='Query'),
  clusterCategory?: string(name='ClusterCategory', example='Standard', position='Query'),
  pageNumber?: long(name='PageNumber', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ListAddonTemplatesResponseBody = {
  addons?: [ 
    {
      description?: string(name='Description'),
      label?: string(name='Label'),
      name: string(name='Name', example='Login'),
      version: string(name='Version', example='1.0'),
    }
  ](name='Addons'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAddonTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonTemplatesResponseBody(name='body'),
}

async function listAddonTemplates(request: ListAddonTemplatesRequest): ListAddonTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddonTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListAddonsRequest {
  addonIds?: [ string ](name='AddonIds', shrink='json', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListAddonsResponseBody = {
  addons?: [ 
    {
      addonId: string(name='AddonId', example='Login-1.0-W4g****'),
      description?: string(name='Description'),
      installTime?: string(name='InstallTime', example='2024-08-22 18:11:17'),
      label?: string(name='Label'),
      name: string(name='Name', example='Login'),
      status?: string(name='Status', example='Running'),
      version: string(name='Version', example='1.0'),
    }
  ](name='Addons'),
  pageNumber?: int32(name='PageNumber', example='20'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListAddonsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddonsResponseBody(name='body'),
}

async function listAddons(request: ListAddonsRequest): ListAddonsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAddons', 'POST', '/', 'json', false, 'json', request);
}

model ListAvailableFileSystemsRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListAvailableFileSystemsResponseBody = {
  fileSystemList?: [ 
    {
      createTime?: string(name='CreateTime', example='2024-7-29 15:43:53'),
      fileSystemId?: string(name='FileSystemId', example='2fa0248***'),
      fileSystemType?: string(name='FileSystemType', example='cpfs'),
      mountTargetList?: [ 
        {
          mountTargetDomain?: string(name='MountTargetDomain', example='c0967****.cn-hangzhou.cpfs.nas.aliyuncs.com'),
          networkType?: string(name='NetworkType', example='vpc'),
          status?: string(name='Status', example='Active'),
          vSwitchId?: string(name='VSwitchId', example='vsw-2ze0c41hwu7lc29ris***'),
          vpcId?: string(name='VpcId', example='vpc-8vbvb34rtyh6xb3zrehs1****'),
        }
      ](name='MountTargetList'),
      protocolType?: string(name='ProtocolType', example='cpfs'),
      status?: string(name='Status', example='Running'),
      storageType?: string(name='StorageType', example='Performance'),
      vpcId?: string(name='VpcId', example='vpc-bp132kgui8n0targb****'),
    }
  ](name='FileSystemList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BF4E8AB1-02A3-5ECF-87CC-3AB7BE98**'),
  totalCount?: int32(name='TotalCount', example='65'),
}

model ListAvailableFileSystemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvailableFileSystemsResponseBody(name='body'),
}

async function listAvailableFileSystems(request: ListAvailableFileSystemsRequest): ListAvailableFileSystemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableFileSystems', 'POST', '/', 'json', false, 'json', request);
}

model ListAvailableImagesRequest {
  directoryService?: {
    type?: string(name='Type', example='NIS'),
    version?: string(name='Version', example='1.0'),
  }(name='DirectoryService', shrink='json', position='Query'),
  enableHT?: boolean(name='EnableHT', example='true', position='Query'),
  HPCInterConnect?: string(name='HPCInterConnect', example='vpc', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', example='self', position='Query'),
  instanceType?: string(name='InstanceType', example='ecs.c7.large', position='Query'),
  isPublic?: boolean(name='IsPublic', example='true', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
  scheduler?: {
    type?: string(name='Type', example='SLURM'),
    version?: string(name='Version', example='22.05.8'),
  }(name='Scheduler', shrink='json', position='Query'),
}

model ListAvailableImagesResponseBody = {
  images?: [ 
    {
      architecture?: string(name='Architecture', example='x86_64'),
      bootMode?: string(name='BootMode', example='BIOS'),
      description?: string(name='Description', example='ExampleDescription'),
      imageId?: string(name='ImageId', example='centos_7_06_64_20G_alibase_2019071****'),
      imageName?: string(name='ImageName', example='CHESS5V5.0.27'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', example='self'),
      OSName?: string(name='OSName'),
      OSNameEn?: string(name='OSNameEn', example='CentOS  7.9 64 bit'),
      platform?: string(name='Platform', example='windows'),
      size?: string(name='Size', example='40'),
    }
  ](name='Images'),
  pageNumber?: string(name='PageNumber', description='Id of the request', example='1'),
  pageSize?: string(name='PageSize', description='Id of the request', example='20'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='true'),
  totalCount?: string(name='TotalCount', description='Id of the request', example='1'),
}

model ListAvailableImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvailableImagesResponseBody(name='body'),
}

async function listAvailableImages(request: ListAvailableImagesRequest): ListAvailableImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableImages', 'GET', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  clusterIds?: [ string ](name='ClusterIds', shrink='json', position='Query'),
  clusterNames?: [ string ](name='ClusterNames', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model ListClustersResponseBody = {
  clusters?: [ 
    {
      additionalPackages?: [ 
        {
          name?: string(name='Name', example='gromacs'),
          version?: string(name='Version', example='2024.1'),
        }
      ](name='AdditionalPackages'),
      addons?: [ 
        {
          addonId?: string(name='AddonId', example='Login-1.0-W2g****'),
          description?: string(name='Description'),
          label?: string(name='Label'),
          name: string(name='Name', example='Login'),
          resourcesSpec?: {
            ecsInstanceId?: string(name='EcsInstanceId', example='i-bp1bg85d2q6laic8****'),
            eipInstanceId?: string(name='EipInstanceId', example='eip-bp1vi9124tbx1g3kr****'),
          }(name='ResourcesSpec'),
          servicesSpec?: [ 
            {
              serviceAccessType?: string(name='ServiceAccessType', example='URL'),
              serviceAccessUrl?: string(name='ServiceAccessUrl', example='https://47.96.xx.xx:12008'),
              serviceName: string(name='ServiceName', example='Web Portal'),
            }
          ](name='ServicesSpec'),
          status?: string(name='Status', example='Running'),
          version: string(name='Version', example='1.0'),
        }
      ](name='Addons'),
      clusterCategory?: string(name='ClusterCategory', example='Standard'),
      clusterCreateTime?: string(name='ClusterCreateTime', example='2024-08-06T12:43:01.000Z'),
      clusterCredentials?: [ string ](name='ClusterCredentials'),
      clusterCustomConfiguration?: {
        args?: string(name='Args', example='demo'),
        script?: string(name='Script', example='https://xxxxx'),
      }(name='ClusterCustomConfiguration'),
      clusterDescription?: string(name='ClusterDescription', example='Demo'),
      clusterId?: string(name='ClusterId', example='ehpc-hz-VMKe******'),
      clusterMode?: string(name='ClusterMode', example='Integrated'),
      clusterModifyTime?: string(name='ClusterModifyTime', example='2024-08-06T12:43:01.000Z'),
      clusterName?: string(name='ClusterName', example='slurm22.05.8-cluster-20240227'),
      clusterStatus?: string(name='ClusterStatus', example='running'),
      clusterUsedCoreTime?: float(name='ClusterUsedCoreTime', example='1000'),
      clusterVSwitchId?: string(name='ClusterVSwitchId', example='vsw-f8za5p0mwzgdu3wgx****'),
      clusterVpcId?: string(name='ClusterVpcId', example='vpc-m5efjevmclc0xdmys****'),
      deletionProtection?: boolean(name='DeletionProtection', example='true'),
      ehpcVersion?: string(name='EhpcVersion', example='2.0.0'),
      manager?: {
        DNS?: {
          type?: string(name='Type', example='NIS'),
          version?: string(name='Version', example='2.31'),
        }(name='DNS'),
        directoryService?: {
          type?: string(name='Type', example='NIS'),
          version?: string(name='Version', example='2.31'),
        }(name='DirectoryService'),
        scheduler?: {
          type?: string(name='Type', example='SLURM'),
          version?: string(name='Version', example='22.05.8'),
        }(name='Scheduler'),
      }(name='Manager'),
      maxCoreCount?: long(name='MaxCoreCount', example='10000'),
      maxCount?: long(name='MaxCount', example='500'),
      nodes?: {
        abnormalCounts?: int32(name='AbnormalCounts', example='0'),
        creatingCounts?: int32(name='CreatingCounts', example='0'),
        runningCounts?: int32(name='RunningCounts', example='1'),
      }(name='Nodes'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
      securityGroupId?: string(name='SecurityGroupId', example='sg-bp13n61xsydodfyg****'),
      users?: {
        normalCounts?: int32(name='NormalCounts', example='2'),
        sudoCounts?: int32(name='SudoCounts', example='2'),
      }(name='Users'),
    }
  ](name='Clusters'),
  pageNumber?: string(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'POST', '/', 'json', false, 'json', request);
}

model ListCommonLogsRequest {
  actionName?: [ string ](name='ActionName', shrink='json', position='Query'),
  actionStatus?: string(name='ActionStatus', example='Finished', position='Query'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  from: long(name='From', example='1703821542', position='Query'),
  isReverse?: boolean(name='IsReverse', example='true', position='Query'),
  logRequestId?: string(name='LogRequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****', position='Query'),
  logType?: string(name='LogType', example='Operation', position='Query'),
  operatorUid?: string(name='OperatorUid', example='137***', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  resource?: string(name='Resource', example='i-abc***', position='Query'),
  to: long(name='To', example='1703821666', position='Query'),
}

model ListCommonLogsResponseBody = {
  logs?: [ 
    {
      action?: string(name='Action', example='CreaterCluster'),
      clusterId?: string(name='ClusterId', example='ehpc-hz-9T3xPNezoS'),
      logType?: string(name='LogType', example='Operation'),
      message?: string(name='Message', example='ok'),
      operatorUid?: string(name='OperatorUid', example='137***'),
      requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
      status?: string(name='Status', example='Finished'),
      target?: string(name='Target', example='i-abc***'),
      time?: string(name='Time', example='2024-08-22 14:21:54'),
    }
  ](name='Logs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='464E9919-D04F-4D1D-B375-15989492****'),
  totalCount?: int32(name='TotalCount', example='15'),
  uid?: string(name='Uid', example='137***'),
}

model ListCommonLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCommonLogsResponseBody(name='body'),
}

async function listCommonLogs(request: ListCommonLogsRequest): ListCommonLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommonLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListInstalledSoftwaresRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
}

model ListInstalledSoftwaresResponseBody = {
  additionalPackages?: {
    additionalPackageInfos?: [ 
    {
      category?: string(name='Category', description='The category into which the software falls.', example='NWP'),
      createTime?: string(name='CreateTime', description='The time when the software was installed.', example='2024-03-05 18:24:08'),
      description?: string(name='Description', description='The software description.'),
      icon?: string(name='Icon', description='The URL of the software icon.', example='https://gw.alicdn.com/imgextra/i2/O1CN01FIkxZ81LmE0fvrAyR_!!6000000001341-55-tps-6349-1603.svg'),
      name?: string(name='Name', description='The software name.', example='gromacs'),
      status?: string(name='Status', description='The installation status of the software.

Valid values:

*   Installed
*   Uninstalled
*   Installing
*   Exception', example='Installed'),
      version?: string(name='Version', description='The software version.', example='2024.1'),
    }
  ](name='AdditionalPackageInfos')
  }(name='AdditionalPackages', description='The list of installed software.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListInstalledSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstalledSoftwaresResponseBody(name='body'),
}

async function listInstalledSoftwares(request: ListInstalledSoftwaresRequest): ListInstalledSoftwaresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstalledSoftwares', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  hostnames?: [ string ](name='Hostnames', shrink='json', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', shrink='json', position='Query'),
  queueNames?: [ string ](name='QueueNames', shrink='json', position='Query'),
  sequence?: string(name='Sequence', example='Forward', position='Query'),
  sortBy?: string(name='SortBy', example='AddedTime', position='Query'),
  status?: [ string ](name='Status', shrink='json', position='Query'),
}

model ListNodesResponseBody = {
  nodes?: [ 
    {
      addTime?: string(name='AddTime', example='2020-06-09T06:22:02.000Z'),
      expiredTime?: string(name='ExpiredTime', example='2020-06-09T06:22:02.000Z'),
      hostname?: string(name='Hostname', example='edas.cn-shanghai.aliyuncs.com'),
      htEnabled?: boolean(name='HtEnabled', example='true'),
      id?: string(name='Id', example='i-bp15707mys2rsy0j****'),
      imageId?: string(name='ImageId', example='centos_7_06_64_20G_alibase_20190711.vhd'),
      instanceType?: string(name='InstanceType', example='ecs.c5.large'),
      ipAddress?: string(name='IpAddress', example='172.16.**.**'),
      keepAlive?: boolean(name='KeepAlive', example='true'),
      publicIpAddress?: string(name='PublicIpAddress', example='172.16.**.**'),
      queueName?: string(name='QueueName', example='autoque3'),
      spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
      stateInSched?: string(name='StateInSched', example='active'),
      status?: string(name='Status', example='running'),
      totalResources?: {
        cpu?: int32(name='Cpu', example='1'),
        gpu?: int32(name='Gpu', example='0'),
        memory?: int32(name='Memory', example='1024'),
      }(name='TotalResources'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1e47optm9g58zcu****'),
      vpcId?: string(name='VpcId', example='vpc-bp1gnu8br4ay7beb2w****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='Nodes'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='89A1AC0F-4A6C-4F3D-98F9-BEF9A823****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNodesResponseBody(name='body'),
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'POST', '/', 'json', false, 'json', request);
}

model ListQueuesRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  queueNames?: [ string ](name='QueueNames', shrink='json', position='Query'),
}

model ListQueuesResponseBody = {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  queues?: [ 
    {
      computeNodes?: [
        NodeTemplate
      ](name='ComputeNodes'),
      createTime?: string(name='CreateTime', example='2023-11-10T02:04:00Z'),
      enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
      enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
      maxCount?: int32(name='MaxCount', example='100'),
      maxCountPerCycle?: int32(name='MaxCountPerCycle', example='1'),
      minCount?: int32(name='MinCount', example='0'),
      nodes?: {
        creatingCounts?: int32(name='CreatingCounts', example='2'),
        exceptionCounts?: int32(name='ExceptionCounts', example='0'),
        runningCounts?: int32(name='RunningCounts', example='1'),
      }(name='Nodes'),
      queueName?: string(name='QueueName', example='comp'),
      totalCores?: int32(name='TotalCores', example='24'),
      updateTime?: string(name='UpdateTime', example='2024-04-25T02:02:32'),
      vSwitchIds?: [ string ](name='VSwitchIds'),
    }
  ](name='Queues'),
  requestId?: string(name='RequestId', example='C6E5005C-00B0-4F27-98BB-95AB88016C22'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListQueuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListQueuesResponseBody(name='body'),
}

async function listQueues(request: ListQueuesRequest): ListQueuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueues', 'POST', '/', 'json', false, 'json', request);
}

model ListSharedStoragesRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](~~87116~~) operation to query the cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  fileSystemId?: string(name='FileSystemId', description='The ID of the attached file system.', example='0bd504b0**', position='Query'),
  fileSystemType?: string(name='FileSystemType', description='The type of the attached file system. Valid values:

*   nas
*   cpfs', example='nas', position='Query'),
}

model ListSharedStoragesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F6757FA4-8FED-4602-B7F5-3550C084****'),
  sharedStorages?: [ 
    {
      fileSystemId?: string(name='FileSystemId', description='The ID of the attached file system.', example='08c7f4b***'),
      fileSystemProtocol?: string(name='FileSystemProtocol', description='The protocol used by the attached file system. Valid values:

*   nfs3
*   nfs4
*   cpfs', example='nfs4'),
      fileSystemType?: string(name='FileSystemType', description='The type of the attached file system. Valid values:

*   nas
*   cpfs', example='nas'),
      mountInfo?: [ 
        {
          mountDirectory?: string(name='MountDirectory', description='The local mount directory of the attached file system.', example='/test'),
          mountOptions?: string(name='MountOptions', description='The mount options for the attached file system. Valid values:

*   \\-t nfs -o vers=3,nolock,proto=tcp,noresvport
*   \\-t nfs -o vers=4.0,noresvport', example='-t nfs -o vers=4.0,noresvport'),
          mountTarget?: string(name='MountTarget', description='The mount target of the attached file system.', example='0bd504b***-ngq26.cn-hangzhou.nas.aliyuncs.com'),
          protocolType?: string(name='ProtocolType', description='The protocol used by the mount target of the attached file system. Valid values:

*   nfs3
*   nfs4
*   cpfs', example='nfs3'),
          storageDirectory?: string(name='StorageDirectory', description='The storage directory of the attached file system.', example='/testehpc'),
        }
      ](name='MountInfo', description='The mount information.'),
    }
  ](name='SharedStorages', description='The information about the attached shared storage.'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListSharedStoragesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSharedStoragesResponseBody(name='body'),
}

async function listSharedStorages(request: ListSharedStoragesRequest): ListSharedStoragesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSharedStorages', 'POST', '/', 'json', false, 'json', request);
}

model ListSoftwaresRequest {
  category?: string(name='Category', description='The application category.', example='NWP', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  name?: string(name='Name', description='The software name.', example='gromacs', position='Query'),
  osInfos?: [ 
    {
      architecture?: string(name='Architecture', description='The OS architecture. Valid values:

*   x86\\_64
*   arm64', example='x86_64'),
      osTag?: string(name='OsTag', description='The image tag.', example='CentOS_7.9_64'),
    }
  ](name='OsInfos', description='The operating system (OS) information.', position='Query'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10', position='Query'),
}

model ListSoftwaresResponseBody = {
  additionalPackages?: {
    additionalPackageInfos?: [ 
    {
      category?: string(name='Category', description='The application category.', example='NWP'),
      description?: string(name='Description', description='The software description.'),
      icon?: string(name='Icon', description='The URL of the software icon.', example='https://gw.alicdn.com/imgextra/i2/O1CN01FIkxZ81LmE0fvrAyR_!!6000000001341-55-tps-6349-1603.svg'),
      name?: string(name='Name', description='The software name.', example='gromacs'),
      versions?: {
        versionInfos?: [ 
        {
          latest?: string(name='Latest', description='Indicates whether the version is the latest.', example='false'),
          supportOs?: {
            supportOsInfos?: [ 
            {
              architecture?: string(name='Architecture', description='The OS architecture. Valid values:

*   x86\\_64
*   arm64', example='x86_64'),
              osTag?: string(name='OsTag', description='The image tag.', example='Alibaba Cloud Linux  3.2104 LTS 64 bit ARM Edition'),
            }
          ](name='SupportOsInfos')
          }(name='SupportOs', description='The information about the supported OSs.'),
          version?: string(name='Version', description='The software version.', example='2024.1'),
        }
      ](name='VersionInfos')
      }(name='Versions', description='The information about the software versions that can be installed in the cluster.'),
    }
  ](name='AdditionalPackageInfos')
  }(name='AdditionalPackages', description='The information about the software that can be installed in the cluster.'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1. Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model ListSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSoftwaresResponseBody(name='body'),
}

async function listSoftwares(request: ListSoftwaresRequest): ListSoftwaresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSoftwares', 'GET', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  clusterId: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 50.

Default value: 10.', example='10', maximum=50, position='Query'),
}

model ListUsersResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='15'),
  users?: {
    userInfo?: [ 
    {
      addTime?: string(name='AddTime', description='The time when the user was first added.', example='2014-08-22T17:46:47'),
      group?: string(name='Group', description='The name of the permission group. Valid values:

users: ordinary permissions, which are suitable for regular users that need only to submit and debug jobs.

wheel: sudo permissions, which are suitable for administrators who need to manage clusters. In addition to submitting and debugging jobs, you can also run sudo commands to install software and restart nodes.', example='users'),
      groupId?: string(name='GroupId', description='The permission group ID.', example='100'),
      userId?: string(name='UserId', description='The user ID.', example='1001'),
      userName?: string(name='UserName', description='The username.', example='testuser'),
    }
  ](name='UserInfo')
  }(name='Users', description='The information about the users.'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'GET', '/', 'json', false, 'json', request);
}

model UnInstallAddonRequest {
  addonId: string(name='AddonId', description='The addon ID.', example='Login-1.0-W2g****', position='Query'),
  clusterId: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](~~87116~~) operation to query the cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
}

model UnInstallAddonResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model UnInstallAddonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnInstallAddonResponseBody(name='body'),
}

async function unInstallAddon(request: UnInstallAddonRequest): UnInstallAddonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnInstallAddon', 'POST', '/', 'json', false, 'json', request);
}

model UninstallSoftwaresRequest {
  additionalPackages?: [ 
    {
      name?: string(name='Name', description='The software name.', example='gromacs'),
      version?: string(name='Version', description='The software version.', example='2024.1'),
    }
  ](name='AdditionalPackages', description='The information about the software systems that you want to uninstall.', shrink='json', position='Query'),
  clusterId?: string(name='ClusterId', description='The cluster ID.

You can call the [ListClusters](~~87116~~) operation to query the cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
}

model UninstallSoftwaresResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model UninstallSoftwaresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UninstallSoftwaresResponseBody(name='body'),
}

async function uninstallSoftwares(request: UninstallSoftwaresRequest): UninstallSoftwaresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallSoftwares', 'GET', '/', 'json', false, 'json', request);
}

model UpdateClusterRequest {
  clientVersion?: string(name='ClientVersion', example='2.1.0', position='Query'),
  clusterCustomConfiguration?: {
    args?: string(name='Args', example='E-HPC cn-hangzhou'),
    script?: string(name='Script', example='http://*****'),
  }(name='ClusterCustomConfiguration', shrink='json', position='Query'),
  clusterDescription?: string(name='ClusterDescription', example='slurm22.05.8-serverless-cluster-20240805', position='Query'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  clusterName?: string(name='ClusterName', example='slurm22.05.8-serverless-cluster-20240805', position='Query'),
  deletionProtection?: boolean(name='DeletionProtection', example='false', position='Query'),
  enableScaleIn?: boolean(name='EnableScaleIn', example='true', position='Query'),
  enableScaleOut?: boolean(name='EnableScaleOut', example='true', position='Query'),
  growInterval?: int32(name='GrowInterval', example='2', position='Query'),
  idleInterval?: int32(name='IdleInterval', example='4', position='Query'),
  maxCoreCount?: int32(name='MaxCoreCount', example='10000', position='Query'),
  maxCount?: int32(name='MaxCount', example='500', position='Query'),
}

model UpdateClusterResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: boolean(name='Success', example='true'),
}

model UpdateClusterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateClusterResponseBody(name='body'),
}

async function updateCluster(request: UpdateClusterRequest): UpdateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCluster', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNodesRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID.', example='ehpc-hz-FYUr32****', position='Query'),
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID of the compute node.', example='i-bp1bzqq1ddeemuddn****'),
      keepAlive?: boolean(name='KeepAlive', description='Specifies whether to enable deletion protection for the compute node.', example='true'),
    }
  ](name='Instances', description='The information about the compute nodes that you want to update.', shrink='json', position='Query'),
}

model UpdateNodesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', description='The request result. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateNodesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNodesResponseBody(name='body'),
}

/**
  * ## [](#)Usage notes
  * Before you delete a compute node, we recommend that you export all job data from the node to prevent data loss.
  *
 */
async function updateNodes(request: UpdateNodesRequest): UpdateNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNodes', 'POST', '/', 'json', false, 'json', request);
}

model UpdateQueueRequest {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  queue?: {
    allocationStrategy?: string(name='AllocationStrategy', example='PriorityInstanceType'),
    computeNodes?: [
      NodeTemplate
    ](name='ComputeNodes'),
    enableScaleIn?: boolean(name='EnableScaleIn', example='true'),
    enableScaleOut?: boolean(name='EnableScaleOut', example='true'),
    hostnamePrefix?: string(name='HostnamePrefix', example='compute'),
    hostnameSuffix?: string(name='HostnameSuffix', example='hpc'),
    initialCount?: int32(name='InitialCount', example='0'),
    interConnect?: string(name='InterConnect', example='erdma'),
    keepAliveNodes?: [ string ](name='KeepAliveNodes'),
    maxCount?: int32(name='MaxCount', example='1000'),
    maxCountPerCycle?: long(name='MaxCountPerCycle', example='99'),
    minCount?: int32(name='MinCount', example='0'),
    queueName: string(name='QueueName', example='comp'),
    ramRole?: string(name='RamRole', example='AliyunECSInstanceForEHPCRole'),
    vSwitchIds?: [ string ](name='VSwitchIds'),
  }(name='Queue', shrink='json', position='Query'),
}

model UpdateQueueResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
  success?: boolean(name='Success', example='true'),
}

model UpdateQueueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateQueueResponseBody(name='body'),
}

async function updateQueue(request: UpdateQueueRequest): UpdateQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQueue', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  group?: string(name='Group', example='users', position='Query'),
  password?: string(name='Password', example='123****', position='Query'),
  userName: string(name='UserName', example='testuser', position='Query'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  success?: string(name='Success', example='true'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

