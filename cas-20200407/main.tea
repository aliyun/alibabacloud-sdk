/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'cas.aliyuncs.com',
    ap-northeast-2-pop = 'cas.aliyuncs.com',
    ap-southeast-3 = 'cas.aliyuncs.com',
    ap-southeast-5 = 'cas.aliyuncs.com',
    cn-beijing = 'cas.aliyuncs.com',
    cn-beijing-finance-1 = 'cas.aliyuncs.com',
    cn-beijing-finance-pop = 'cas.aliyuncs.com',
    cn-beijing-gov-1 = 'cas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cas.aliyuncs.com',
    cn-chengdu = 'cas.aliyuncs.com',
    cn-edge-1 = 'cas.aliyuncs.com',
    cn-fujian = 'cas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cas.aliyuncs.com',
    cn-hangzhou-finance = 'cas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cas.aliyuncs.com',
    cn-hangzhou-test-306 = 'cas.aliyuncs.com',
    cn-hongkong = 'cas.aliyuncs.com',
    cn-hongkong-finance-pop = 'cas.aliyuncs.com',
    cn-huhehaote = 'cas.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'cas.aliyuncs.com',
    cn-north-2-gov-1 = 'cas.aliyuncs.com',
    cn-qingdao = 'cas.aliyuncs.com',
    cn-qingdao-nebula = 'cas.aliyuncs.com',
    cn-shanghai = 'cas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cas.aliyuncs.com',
    cn-shanghai-finance-1 = 'cas.aliyuncs.com',
    cn-shanghai-inner = 'cas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cas.aliyuncs.com',
    cn-shenzhen = 'cas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cas.aliyuncs.com',
    cn-shenzhen-inner = 'cas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cas.aliyuncs.com',
    cn-wuhan = 'cas.aliyuncs.com',
    cn-wulanchabu = 'cas.aliyuncs.com',
    cn-yushanfang = 'cas.aliyuncs.com',
    cn-zhangbei = 'cas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cas.aliyuncs.com',
    cn-zhangjiakou = 'cas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cas.aliyuncs.com',
    eu-west-1 = 'cas.aliyuncs.com',
    eu-west-1-oxs = 'cas.aliyuncs.com',
    rus-west-1-pop = 'cas.aliyuncs.com',
    us-east-1 = 'cas.aliyuncs.com',
    us-west-1 = 'cas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CancelCertificateForPackageRequestRequest {
  orderId?: long(name='OrderId'),
}

model CancelCertificateForPackageRequestResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelCertificateForPackageRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCertificateForPackageRequestResponseBody(name='body'),
}

/**
  * Revokes an issued certificate and cancels the application order of the certificate.
  *
  * @param request CancelCertificateForPackageRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelCertificateForPackageRequestResponse
 */
async function cancelCertificateForPackageRequestWithOptions(request: CancelCertificateForPackageRequestRequest, runtime: Util.RuntimeOptions): CancelCertificateForPackageRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCertificateForPackageRequest',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Revokes an issued certificate and cancels the application order of the certificate.
  *
  * @param request CancelCertificateForPackageRequestRequest
  * @return CancelCertificateForPackageRequestResponse
 */
async function cancelCertificateForPackageRequest(request: CancelCertificateForPackageRequestRequest): CancelCertificateForPackageRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCertificateForPackageRequestWithOptions(request, runtime);
}

model CancelOrderRequestRequest {
  orderId?: long(name='OrderId', description='The ID of the certificate application order that you want to cancel.

>  After you call the [CreateCertificateForPackageRequest](~~204087~~), [CreateCertificateRequest](~~164105~~), or [CreateCertificateWithCsrRequest](~~178732~~) operation to submit a certificate application, you can obtain the ID of the certificate application order from the **OrderId** response parameter.', example='123451222'),
}

model CancelOrderRequestResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='082FAB35-6AB9-4FD5-8750-D36673548E76'),
}

model CancelOrderRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOrderRequestResponseBody(name='body'),
}

/**
  * You can call the CancelOrderRequest operation to cancel a certificate application order only in the following scenarios:
  * *   The order is in the **pending validation** state. You have submitted a certificate application but the verification of the domain name ownership is not complete.
  * *   The order is in the **being reviewed** state. You have submitted a certificate application and the verification of the domain name ownership is complete, but the certificate authority (CA) does not complete the review of the certificate application.
  * After a certificate application order is canceled, the status of the order changes to the **pending application** state. In this case, you can call the [DeleteCertificateRequest](~~164109~~) operation to delete the certificate application order. Then, the consumed certificate quota is returned to you.
  *
  * @param request CancelOrderRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelOrderRequestResponse
 */
async function cancelOrderRequestWithOptions(request: CancelOrderRequestRequest, runtime: Util.RuntimeOptions): CancelOrderRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOrderRequest',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the CancelOrderRequest operation to cancel a certificate application order only in the following scenarios:
  * *   The order is in the **pending validation** state. You have submitted a certificate application but the verification of the domain name ownership is not complete.
  * *   The order is in the **being reviewed** state. You have submitted a certificate application and the verification of the domain name ownership is complete, but the certificate authority (CA) does not complete the review of the certificate application.
  * After a certificate application order is canceled, the status of the order changes to the **pending application** state. In this case, you can call the [DeleteCertificateRequest](~~164109~~) operation to delete the certificate application order. Then, the consumed certificate quota is returned to you.
  *
  * @param request CancelOrderRequestRequest
  * @return CancelOrderRequestResponse
 */
async function cancelOrderRequest(request: CancelOrderRequestRequest): CancelOrderRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderRequestWithOptions(request, runtime);
}

model CreateCertificateForPackageRequestRequest {
  companyName?: string(name='CompanyName', description='The company name of the certificate application.

> This parameter is available only when you apply for OV certificates. If you want to apply for an OV certificate, you must add a company profile to the **Information Management** module of the [Certificate Management Service console](https://yundun.console.aliyun.com/?p=cas#/). For more information, see [Manage company profiles](~~198289~~). If you want to apply for a DV certificate, you do not need to add a company profile.

If you specify a company name, the information about the company that is configured in the **Information Management** module is used. If you do not specify this parameter, the information about the most recent company that is added to the **Information Management** module is used.', example='A company'),
  csr?: string(name='Csr', description='The content of the certificate signing request (CSR) file that is manually generated for the domain name by using OpenSSL or Keytool. The key algorithm in the CSR file must be Rivest-Shamir-Adleman (RSA) or elliptic-curve cryptography (ECC), and the key length of the RSA algorithm must be greater than or equal to 2,048 characters. For more information about how to create a CSR file, see [Create a CSR file](~~313297~~). If you do not specify this parameter, Certificate Management Service automatically creates a CSR file.

A CSR file contains the information about your server and company. When you apply for a certificate, you must submit the CSR file to the CA. The CA signs the CSR file by using the private key of the root certificate and generates a public key file to issue your certificate.

> 

The **CN** field in the CSR file specifies the domain name that you want to bind to the certificate. You must include the field in the parameter value.', example='-----BEGIN CERTIFICATE REQUEST----- ...... -----END CERTIFICATE REQUEST-----'),
  domain?: string(name='Domain', description='The domain name that you want to bind to the certificate. The domain name must meet the following requirements:

*   The domain name must be a single domain name or a wildcard domain name. Example: `*.aliyundoc.com`.
*   You can specify multiple domain names. Separate multiple domain names with commas (,). You can specify a maximum of five domain names.
*   If you specify multiple domain names, the domain names must be only single domain names or only wildcard domain names. You cannot specify both single domain names and wildcard domain names.

> 

If you want to bind multiple domain names to the certificate, you must specify this parameter. You must specify at least one of the Domain parameter and the **Csr** parameter. If you specify both the Domain parameter and the **Csr** parameter, the value of the **CN** field in the **Csr** parameter is used as the domain name that can be bound to the certificate.', example='aliyundoc.com'),
  email?: string(name='Email', description='The email address of the applicant. After the CA receives your certificate application, the CA sends a verification email to the email address that you specify. You must log on to the mailbox, open the mail, and complete the verification of the domain name ownership based on the steps that are described in the email.

If you do not specify this parameter, the information about the most recent contact that is added to the **Information Management** module is used. For more information about how to add a contact to the **Information Management** module, see [Manage contacts](~~198262~~).', example='username@example.com'),
  phone?: string(name='Phone', description='The phone number of the applicant. CA staff can call the phone number to confirm the information in your certificate application.

If you do not specify this parameter, the information about the most recent contact that is added to the **Information Management** module is used. For more information about how to add a contact to the **Information Management** module, see [Manage contacts](~~198262~~).', example='1390000****'),
  productCode?: string(name='ProductCode', description='The specifications of the certificate. Valid values:

*   **digicert-free-1-free**: DigiCert single-domain domain validated (DV) certificate in 3 months free trial. This is the default value.
*   **symantec-free-1-free**: DigiCert single-domain domain validated (DV) certificate in 1 year free trial.
*   **symantec-dv-1-starter**: DigiCert wildcard DV certificate.
*   **symantec-ov-1-personal**: DigiCert single-domain organization validated (OV) certificate.
*   **symantec-ov-w-personal**: DigiCert wildcard OV certificate.
*   **geotrust-dv-1-starter**: GeoTrust single-domain DV certificate.
*   **geotrust-dv-w-starter**: GeoTrust wildcard DV certificate.
*   **geotrust-ov-1-personal**: GeoTrust single-domain OV certificate.
*   **geotrust-ov-w-personal**: GeoTrust wildcard OV certificate.
*   **globalsign-dv-1-personal**: GlobalSign single-domain DV certificate.
*   **globalsign-dv-w-advanced**: GlobalSign wildcard DV certificate.
*   **globalsign-ov-1-personal**: GlobalSign single-domain OV certificate.
*   **globalsign-ov-w-advanced**: GlobalSign wildcard OV certificate.
*   **cfca-ov-1-personal**: China Financial Certification Authority (CFCA) single-domain OV certificate.
*   **cfca-ev-w-advanced**: CFCA wildcard OV certificate.', example='digicert-free-1-free'),
  username?: string(name='Username', description='The name of the applicant.

If you do not specify this parameter, the information about the most recent contact that is added to the **Information Management** module is used. For more information about how to add a contact to the **Information Management** module, see [Manage contacts](~~198262~~).', example='Tom'),
  validateType?: string(name='ValidateType', description='The verification method of the domain name ownership. Valid values:

*   **DNS**: DNS verification. If you use this method, you must add a TXT record to the DNS records of the domain name in the management platform of the domain name. You must have operation permissions on domain name resolution to verify the ownership of the domain name.
*   **FILE**: file verification. If you use this method, you must create a specified file on the DNS server. You must have administrative rights on the DNS server to verify the ownership of the domain name.

For more information about the verification methods, see [Verify the ownership of a domain name](~~48016~~).', example='DNS'),
}

model CreateCertificateForPackageRequestResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the certificate application order.

> You can use the ID to query the status of the certificate application order. For more information, see [DescribeCertificateState](~~455800~~).', example='2021010'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='5890029B-938A-589E-98B9-3DEC7BA7C400'),
}

model CreateCertificateForPackageRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCertificateForPackageRequestResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you have purchased a certificate resource plan of the required specifications. For more information about how to purchase a certificate resource plan, see [Purchase a certificate resource plan](~~28542~~). You can call the [DescribePackageState](~~455800~~) operation to query the usage of certificate resource plans of specified specifications, including the total number of certificate resource plans that you purchase, the number of certificate applications that are submitted, and the number of certificates that are issued.
  * *   After you call this operation to submit a certificate application and the certificate is issued, the certificate quota provided by the resource plan that you purchased is consumed. When you call this operation, you can use the **ProductCode** parameter to specify the specifications of the certificate that you want to apply for.
  * *   After you call this operation to submit a certificate application, you also need to call the [DescribeCertificateState](~~455800~~) operation to obtain the information that is required to complete the verification of the domain name ownership, and complete the verification. If you use the DNS verification method, you must complete the verification in the management platform of the domain name. If you use the file verification method, you must complete the verification in the DNS server. Then, the certificate application order will be reviewed by the certificate authority (CA).
  *
  * @param request CreateCertificateForPackageRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCertificateForPackageRequestResponse
 */
async function createCertificateForPackageRequestWithOptions(request: CreateCertificateForPackageRequestRequest, runtime: Util.RuntimeOptions): CreateCertificateForPackageRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.companyName)) {
    query['CompanyName'] = request.companyName;
  }
  if (!Util.isUnset(request.csr)) {
    query['Csr'] = request.csr;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.validateType)) {
    query['ValidateType'] = request.validateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificateForPackageRequest',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you call this operation, make sure that you have purchased a certificate resource plan of the required specifications. For more information about how to purchase a certificate resource plan, see [Purchase a certificate resource plan](~~28542~~). You can call the [DescribePackageState](~~455800~~) operation to query the usage of certificate resource plans of specified specifications, including the total number of certificate resource plans that you purchase, the number of certificate applications that are submitted, and the number of certificates that are issued.
  * *   After you call this operation to submit a certificate application and the certificate is issued, the certificate quota provided by the resource plan that you purchased is consumed. When you call this operation, you can use the **ProductCode** parameter to specify the specifications of the certificate that you want to apply for.
  * *   After you call this operation to submit a certificate application, you also need to call the [DescribeCertificateState](~~455800~~) operation to obtain the information that is required to complete the verification of the domain name ownership, and complete the verification. If you use the DNS verification method, you must complete the verification in the management platform of the domain name. If you use the file verification method, you must complete the verification in the DNS server. Then, the certificate application order will be reviewed by the certificate authority (CA).
  *
  * @param request CreateCertificateForPackageRequestRequest
  * @return CreateCertificateForPackageRequestResponse
 */
async function createCertificateForPackageRequest(request: CreateCertificateForPackageRequestRequest): CreateCertificateForPackageRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateForPackageRequestWithOptions(request, runtime);
}

model CreateCertificateRequestRequest {
  domain?: string(name='Domain', description='The domain name that you want to bind to the certificate. You can specify only one domain name.

> The domain name must match the certificate specifications that you specify for the **ProductCode** parameter. If you apply for a single-domain certificate, you must specify a single domain name for this parameter. If you apply for a wildcard certificate, you must specify a wildcard domain name such as `*.aliyundoc.com` for this parameter.', example='www.aliyundoc.com'),
  email?: string(name='Email', description='The email address of the applicant.', example='username@example.com'),
  phone?: string(name='Phone', description='The phone number of the applicant.', example='1390000****'),
  productCode?: string(name='ProductCode', description='The specifications of the certificate. Valid values:

*   **digicert-free-1-free**: DigiCert single-domain DV certificate in 3 months free trial. This is the default value.
*   **symantec-free-1-free**: DigiCert single-domain DV certificate in 1 year free trial.
*   **symantec-dv-1-starter**: DigiCert wildcard DV certificate.
*   **geotrust-dv-1-starter**: GeoTrust single-domain DV certificate.
*   **geotrust-dv-w-starter**: GeoTrust wildcard DV certificate.
*   **globalsign-dv-1-personal**: GlobalSign single-domain DV certificate.
*   **globalsign-dv-w-advanced**: GlobalSign wildcard DV certificate.', example='digicert-free-1-free'),
  username?: string(name='Username', description='The name of the applicant.', example='Tom'),
  validateType?: string(name='ValidateType', description='The verification method of the domain name ownership. Valid values:

*   **DNS**: DNS verification. If you use this method, you must add a TXT record to the DNS records of the domain name in the management platform of the domain name. You must have operation permissions on domain name resolution to verify the ownership of the domain name.
*   **FILE**: file verification. If you use this method, you must create a specified file on the DNS server. You must have administrative rights on the DNS server to verify the ownership of the domain name.

For more information about the verification methods, see [Verify the ownership of a domain name](~~48016~~).', example='DNS'),
}

model CreateCertificateRequestResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the certificate application order.

> You can use the ID to query the status of the certificate application. For more information, see [DescribeCertificateState](~~455800~~).', example='98987582437920968'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model CreateCertificateRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCertificateRequestResponseBody(name='body'),
}

/**
  * *   You can call this operation to apply for only DV certificates. If you want to apply for an organization validated (OV) or extended validation (EV) certificate, we recommend that you call the [CreateCertificateForPackageRequest](~~455296~~) operation. This operation allows you to apply for certificates of all specifications and specify the method to generate a certificate signing request (CSR) file.
  * *   Before you call this operation, make sure that you have purchased a certificate resource plan of the required specifications. For more information about how to purchase a certificate resource plan, see [Purchase a certificate resource plan](~~28542~~). You can call the [DescribePackageState](~~455803~~) operation to query the usage of certificate resource plans of specified specifications, including the total number of purchased certificate resource plans of the specified specifications, the number of times that certificate applications have been submitted, and the number of times that certificates have been issued.
  * *   When you call this operation, you can use the **ProductCode** parameter to specify the specifications of the certificate.
  * *   After you call this operation to submit a certificate application, Certificate Management Service automatically creates a CSR file for your application and consumes the certificate quota in the certificate resource plans of the specified specifications that you purchased. After you call this operation, you also need to call the [DescribeCertificateState](~~455800~~) operation to obtain the information that is required to complete domain name verification, and manually complete the verification. If you use the DNS verification method, you must complete the verification on the management platform of the domain name. If you use the file verification method, you must complete the verification on your DNS server. Then, the certificate authority (CA) will review your certificate application.
  *
  * @param request CreateCertificateRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCertificateRequestResponse
 */
async function createCertificateRequestWithOptions(request: CreateCertificateRequestRequest, runtime: Util.RuntimeOptions): CreateCertificateRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.validateType)) {
    query['ValidateType'] = request.validateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificateRequest',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation to apply for only DV certificates. If you want to apply for an organization validated (OV) or extended validation (EV) certificate, we recommend that you call the [CreateCertificateForPackageRequest](~~455296~~) operation. This operation allows you to apply for certificates of all specifications and specify the method to generate a certificate signing request (CSR) file.
  * *   Before you call this operation, make sure that you have purchased a certificate resource plan of the required specifications. For more information about how to purchase a certificate resource plan, see [Purchase a certificate resource plan](~~28542~~). You can call the [DescribePackageState](~~455803~~) operation to query the usage of certificate resource plans of specified specifications, including the total number of purchased certificate resource plans of the specified specifications, the number of times that certificate applications have been submitted, and the number of times that certificates have been issued.
  * *   When you call this operation, you can use the **ProductCode** parameter to specify the specifications of the certificate.
  * *   After you call this operation to submit a certificate application, Certificate Management Service automatically creates a CSR file for your application and consumes the certificate quota in the certificate resource plans of the specified specifications that you purchased. After you call this operation, you also need to call the [DescribeCertificateState](~~455800~~) operation to obtain the information that is required to complete domain name verification, and manually complete the verification. If you use the DNS verification method, you must complete the verification on the management platform of the domain name. If you use the file verification method, you must complete the verification on your DNS server. Then, the certificate authority (CA) will review your certificate application.
  *
  * @param request CreateCertificateRequestRequest
  * @return CreateCertificateRequestResponse
 */
async function createCertificateRequest(request: CreateCertificateRequestRequest): CreateCertificateRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateRequestWithOptions(request, runtime);
}

model CreateCertificateWithCsrRequestRequest {
  csr?: string(name='Csr', description='The content of the existing CSR file.\\
The key algorithm in the CSR file must be Rivest-Shamir-Adleman (RSA) or elliptic-curve cryptography (ECC), and the key length of the RSA algorithm must be greater than or equal to 2,048 characters. For more information about how to create a CSR file, see [How do I create a CSR file?](~~42218~~) You can also create a CSR in the [Certificate Management Service console](https://yundunnext.console.aliyun.com/?\\&p=cas). For more information, see [Create a CSR](~~313297~~).\\
A CSR file contains the information about your server and company. When you apply for a certificate, you must submit the CSR file to the CA. The CA signs the CSR file by using the private key of the root certificate and generates a public key file to issue your certificate.

>  The **CN** field in the CSR file specifies the domain name that is bound to the certificate.', example='-----BEGIN CERTIFICATE REQUEST----- ...... -----END CERTIFICATE REQUEST-----'),
  email?: string(name='Email', description='The contact email address of the applicant.', example='username@example.com'),
  phone?: string(name='Phone', description='The phone number of the applicant.', example='1390000****'),
  productCode?: string(name='ProductCode', description='The specifications of the certificate. Valid values:

*   **digicert-free-1-free**: DigiCert single-domain DV certificate in 3 months free trial. This is the default value.
*   **symantec-free-1-free**: DigiCert single-domain DV certificate in 1 year free trial.
*   **symantec-dv-1-starter**: DigiCert wildcard DV certificate.
*   **geotrust-dv-1-starter**: GeoTrust single-domain DV certificate.
*   **geotrust-dv-w-starter**: GeoTrust wildcard DV certificate.
*   **globalsign-dv-1-personal**: GlobalSign single-domain DV certificate.
*   **globalsign-dv-w-advanced**: GlobalSign wildcard DV certificate.', example='digicert-free-1-free'),
  username?: string(name='Username', description='The name of the applicant.', example='Tom'),
  validateType?: string(name='ValidateType', description='The method to verify the ownership of a domain name. Valid values:

*   **DNS**: DNS verification. If you use this method, you must add a TXT record to the DNS records of the domain name in the management platform of the domain name. You must have operation permissions on domain name resolution to verify the ownership of the domain name.
*   **FILE**: file verification. If you use this method, you must create a specified file on the DNS server. You must have administrative rights on the DNS server to verify the ownership of the domain name.

For more information about the verification methods, see [Verify the ownership of a domain name](~~48016~~).', example='DNS'),
}

model CreateCertificateWithCsrRequestResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the certificate application order.

>  You can use the ID to query the status of the certificate application. For more information, see [DescribeCertificateState](~~164111~~).', example='98987582437920968'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model CreateCertificateWithCsrRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCertificateWithCsrRequestResponseBody(name='body'),
}

/**
  * *   You can call the CreateCertificateWithCsrRequest operation to apply only for DV certificates. We recommend that you call the [CreateCertificateForPackageRequest](~~455296~~) operation to submit a certificate application. This operation allows you to apply for certificates of all specifications and specify the method to generate a CSR file.
  * *   Before you call this operation, make sure that you have purchased a certificate resource plan of the required specifications. For more information about how to purchase a certificate resource plan, see [Purchase a certificate resource plan](~~28542~~). You can call the [DescribePackageState](~~164110~~) operation to query the usage of certificate resource plans of specified specifications. The usage information includes the total number of purchased certificate resource plans of the specified specifications, the number of times that certificate applications are submitted, and the number of times that certificates are issued.
  * *   When you call this operation, you can use the **ProductCode** parameter to specify the specifications of the certificate.
  * *   After you call this operation to submit a certificate application, the certificate quota of the required specifications that you purchased is consumed. After you call this operation, you also need to call the [DescribeCertificateState](~~164111~~) operation to obtain the information that is required to complete domain name verification, and manually complete the verification. If you use the DNS verification method, you must complete the verification on the management platform of the domain name. If you use the file verification method, you must complete the verification on your DNS server. The certificate authority (CA) starts to review your certificate application only after the domain name verification is complete.
  *
  * @param request CreateCertificateWithCsrRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCertificateWithCsrRequestResponse
 */
async function createCertificateWithCsrRequestWithOptions(request: CreateCertificateWithCsrRequestRequest, runtime: Util.RuntimeOptions): CreateCertificateWithCsrRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.csr)) {
    query['Csr'] = request.csr;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.phone)) {
    query['Phone'] = request.phone;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.validateType)) {
    query['ValidateType'] = request.validateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificateWithCsrRequest',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call the CreateCertificateWithCsrRequest operation to apply only for DV certificates. We recommend that you call the [CreateCertificateForPackageRequest](~~455296~~) operation to submit a certificate application. This operation allows you to apply for certificates of all specifications and specify the method to generate a CSR file.
  * *   Before you call this operation, make sure that you have purchased a certificate resource plan of the required specifications. For more information about how to purchase a certificate resource plan, see [Purchase a certificate resource plan](~~28542~~). You can call the [DescribePackageState](~~164110~~) operation to query the usage of certificate resource plans of specified specifications. The usage information includes the total number of purchased certificate resource plans of the specified specifications, the number of times that certificate applications are submitted, and the number of times that certificates are issued.
  * *   When you call this operation, you can use the **ProductCode** parameter to specify the specifications of the certificate.
  * *   After you call this operation to submit a certificate application, the certificate quota of the required specifications that you purchased is consumed. After you call this operation, you also need to call the [DescribeCertificateState](~~164111~~) operation to obtain the information that is required to complete domain name verification, and manually complete the verification. If you use the DNS verification method, you must complete the verification on the management platform of the domain name. If you use the file verification method, you must complete the verification on your DNS server. The certificate authority (CA) starts to review your certificate application only after the domain name verification is complete.
  *
  * @param request CreateCertificateWithCsrRequestRequest
  * @return CreateCertificateWithCsrRequestResponse
 */
async function createCertificateWithCsrRequest(request: CreateCertificateWithCsrRequestRequest): CreateCertificateWithCsrRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateWithCsrRequestWithOptions(request, runtime);
}

model CreateWHClientCertificateRequest {
  afterTime?: long(name='AfterTime', example='1665819958'),
  algorithm?: string(name='Algorithm', example='RSA_2048'),
  beforeTime?: long(name='BeforeTime', example='1634283958'),
  commonName?: string(name='CommonName', example='aliyun'),
  country?: string(name='Country', example='CN'),
  csr?: string(name='Csr', example='-----BEGIN CERTIFICATE REQUEST----- ...... -----END CERTIFICATE REQUEST-----'),
  days?: long(name='Days', example='365'),
  immediately?: long(name='Immediately', example='1'),
  locality?: string(name='Locality', example='Hangzhou'),
  months?: long(name='Months', example='12'),
  organization?: string(name='Organization'),
  organizationUnit?: string(name='OrganizationUnit', example='IT'),
  parentIdentifier?: string(name='ParentIdentifier', example='273ae6bb538d538c70c01f81jh2****'),
  sanType?: long(name='SanType', example='2'),
  sanValue?: string(name='SanValue', example='example.com'),
  state?: string(name='State', example='Zhejiang'),
  years?: long(name='Years', example='1'),
}

model CreateWHClientCertificateResponseBody = {
  certificateChain?: string(name='CertificateChain', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', example='190ae6bb538d538c70c01f81dcf2****'),
  parentX509Certificate?: string(name='ParentX509Certificate', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
  requestId?: string(name='RequestId', example='8C467B38-3910-447D-87BC-AC049166F216'),
  rootX509Certificate?: string(name='RootX509Certificate', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
  x509Certificate?: string(name='X509Certificate', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateWHClientCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateWHClientCertificateResponseBody(name='body'),
}

async function createWHClientCertificateWithOptions(request: CreateWHClientCertificateRequest, runtime: Util.RuntimeOptions): CreateWHClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.afterTime)) {
    query['AfterTime'] = request.afterTime;
  }
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.beforeTime)) {
    query['BeforeTime'] = request.beforeTime;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.csr)) {
    query['Csr'] = request.csr;
  }
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  if (!Util.isUnset(request.immediately)) {
    query['Immediately'] = request.immediately;
  }
  if (!Util.isUnset(request.locality)) {
    query['Locality'] = request.locality;
  }
  if (!Util.isUnset(request.months)) {
    query['Months'] = request.months;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.parentIdentifier)) {
    query['ParentIdentifier'] = request.parentIdentifier;
  }
  if (!Util.isUnset(request.sanType)) {
    query['SanType'] = request.sanType;
  }
  if (!Util.isUnset(request.sanValue)) {
    query['SanValue'] = request.sanValue;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.years)) {
    query['Years'] = request.years;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateWHClientCertificate',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWHClientCertificate(request: CreateWHClientCertificateRequest): CreateWHClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWHClientCertificateWithOptions(request, runtime);
}

model DecryptRequest {
  algorithm?: string(name='Algorithm', example='RSAESOAEPSHA_1'),
  certIdentifier?: string(name='CertIdentifier', example='12345678-1234-1234-1234-12345678****'),
  ciphertextBlob?: string(name='CiphertextBlob', example='ZOyIygCyaOW6Gj****MlNKiuyjfzw='),
  messageType?: string(name='MessageType', example='Base64'),
}

model DecryptResponseBody = {
  certIdentifier?: string(name='CertIdentifier', example='12345678-1234-1234-1234-12345678****'),
  plaintext?: string(name='Plaintext', example='VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZy4'),
  requestId?: string(name='RequestId', example='5979d897-d69f-4fc9-87dd-f3bb73c40b80'),
}

model DecryptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DecryptResponseBody(name='body'),
}

async function decryptWithOptions(request: DecryptRequest, runtime: Util.RuntimeOptions): DecryptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.ciphertextBlob)) {
    query['CiphertextBlob'] = request.ciphertextBlob;
  }
  if (!Util.isUnset(request.messageType)) {
    query['MessageType'] = request.messageType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Decrypt',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function decrypt(request: DecryptRequest): DecryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return decryptWithOptions(request, runtime);
}

model DeleteCertificateRequestRequest {
  orderId?: long(name='OrderId', description='The ID of the certificate application order that you want to delete.

>  After you call the [CreateCertificateForPackageRequest](~~455296~~), [CreateCertificateRequest](~~455292~~), or [CreateCertificateWithCsrRequest](~~455801~~) operation to submit a certificate application, you can obtain the ID of the certificate application order from the **OrderId** response parameter.', example='123451222'),
}

model DeleteCertificateRequestResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='082FAB35-6AB9-4FD5-8750-D36673548E76'),
}

model DeleteCertificateRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCertificateRequestResponseBody(name='body'),
}

/**
  * You can call this operation to delete a certificate application order only in the following scenarios:
  * *   The status of the order is review failed. You have called the [DescribeCertificateState](~~455800~~)  operation to query the status of the certificate application order and the value of the **Type** parameter is **verify_fail**.
  * *   The status of the order is **pending application**. You have called the [CancelOrderRequest](~~455299~~) operation to cancel a certificate application order whose status is pending review or being reviewed. The status of the certificate application order that is canceled in this case changes to **pending application**.
  *
  * @param request DeleteCertificateRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteCertificateRequestResponse
 */
async function deleteCertificateRequestWithOptions(request: DeleteCertificateRequestRequest, runtime: Util.RuntimeOptions): DeleteCertificateRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCertificateRequest',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to delete a certificate application order only in the following scenarios:
  * *   The status of the order is review failed. You have called the [DescribeCertificateState](~~455800~~)  operation to query the status of the certificate application order and the value of the **Type** parameter is **verify_fail**.
  * *   The status of the order is **pending application**. You have called the [CancelOrderRequest](~~455299~~) operation to cancel a certificate application order whose status is pending review or being reviewed. The status of the certificate application order that is canceled in this case changes to **pending application**.
  *
  * @param request DeleteCertificateRequestRequest
  * @return DeleteCertificateRequestResponse
 */
async function deleteCertificateRequest(request: DeleteCertificateRequestRequest): DeleteCertificateRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCertificateRequestWithOptions(request, runtime);
}

model DeletePCACertRequest {
  identifier?: string(name='Identifier', example='ccaf0c629c2be1e2ab'),
}

model DeletePCACertResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeletePCACertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePCACertResponseBody(name='body'),
}

async function deletePCACertWithOptions(request: DeletePCACertRequest, runtime: Util.RuntimeOptions): DeletePCACertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePCACert',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePCACert(request: DeletePCACertRequest): DeletePCACertResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePCACertWithOptions(request, runtime);
}

model DeleteUserCertificateRequest {
  certId?: long(name='CertId', description='The ID of the certificate.', example='7562353'),
}

model DeleteUserCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3E50D480-9765-5CFD-9650-9BACCECA5135'),
}

model DeleteUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserCertificateResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteUserCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteUserCertificateResponse
 */
async function deleteUserCertificateWithOptions(request: DeleteUserCertificateRequest, runtime: Util.RuntimeOptions): DeleteUserCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certId)) {
    query['CertId'] = request.certId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserCertificate',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteUserCertificateRequest
  * @return DeleteUserCertificateResponse
 */
async function deleteUserCertificate(request: DeleteUserCertificateRequest): DeleteUserCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserCertificateWithOptions(request, runtime);
}

model DescribeCertificateStateRequest {
  orderId?: long(name='OrderId', description='The ID of the certificate application order that you want to query.

> After you call the [CreateCertificateForPackageRequest](~~455296~~), [CreateCertificateRequest](~~455292~~), or [CreateCertificateWithCsrRequest](~~455801~~) operation to submit a certificate application, you can obtain the ID of the certificate application order from the **OrderId** response parameter.', example='123451222'),
}

model DescribeCertificateStateResponseBody = {
  certificate?: string(name='Certificate', description='The content of the certificate in the PEM format. For more information about the PEM format and how to convert certificate formats, see [What formats are used for mainstream digital certificates?](~~42214~~)

> This parameter is returned only when the value of the **Type** parameter is **certificate**. The value certificate indicates that the certificate is issued.', example='-----BEGIN CERTIFICATE----- …… -----END CERTIFICATE-----'),
  content?: string(name='Content', description='The content that you need to write to the newly created file when you use the file verification method.

> This parameter is returned only when the value of the **Type** parameter is **domain\\_verify** and the value of the **ValidateType** parameter is **FILE**. The value domain\\_verify indicates that the verification of the domain name ownership is not complete, and the value FILE indicates that the file verification method is used.', example='http://example.com/.well-known/pki-validation/fileauth.txt'),
  domain?: string(name='Domain', description='The domain name to be verified when you use the file verification method. You must connect to the DNS server of the domain name and create a file on the server. The file is specified by the **Uri** parameter.

> This parameter is returned only when the value of the **Type** parameter is **domain\\_verify** and the value of the **ValidateType** parameter is **FILE**. The value domain\\_verify indicates that the verification of the domain name ownership is not complete, and the value FILE indicates that the file verification method is used.', example='www.example.com'),
  privateKey?: string(name='PrivateKey', description='The private key of the certificate in the PEM format. For more information about the PEM format and how to convert certificate formats, see [What formats are used for mainstream digital certificates?](~~42214~~)

> This parameter is returned only when the value of the **Type** parameter is **certificate**. The value certificate indicates that the certificate is issued.', example='-----BEGIN RSA PRIVATE KEY-----…… -----END RSA PRIVATE KEY-----'),
  recordDomain?: string(name='RecordDomain', description='The DNS record that you need to manage when you use the DNS verification method.

> This parameter is returned only when the value of the **Type** parameter is **domain\\_verify** and the value of the **ValidateType** parameter is **DNS**. The value domain\\_verify indicates that the verification of the domain name ownership is not complete, and the value DNS indicates that the DNS verification method is used.', example='_dnsauth'),
  recordType?: string(name='RecordType', description='The type of the DNS record that you need to add when you use the DNS verification method. Valid values:

*   **TXT**
*   **CNAME**

> This parameter is returned only when the value of the **Type** parameter is **domain\\_verify** and the value of the **ValidateType** parameter is **DNS**. The value domain\\_verify indicates that the verification of the domain name ownership is not complete.', example='TXT'),
  recordValue?: string(name='RecordValue', description='You need to add a TXT record to the DNS records only when you use the DNS verification method.

> This parameter is returned only when the value of the **Type** parameter is **domain\\_verify** and the value of the **ValidateType** parameter is **DNS**. The value domain\\_verify indicates that the verification of the domain name ownership is not complete, and the value DNS indicates that the DNS verification method is used.', example='20200420000000223erigacv46uhaubchcm0o7spxi7i2isvjq59mlx9lucnkqcy'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='082FAB35-6AB9-4FD5-8750-D36673548E76'),
  type?: string(name='Type', description='The status of the certificate application order. Valid values:

*   **domain_verify**: **pending review**, which indicates that you have not completed the verification of the domain name ownership after you submit the certificate application.

    > After you submit a certificate application, you must manually complete the verification of the domain name ownership. The CA reviews the certificate application only after the verification is complete. If you have not completed the verification of the domain name ownership, you can complete the verification based on the data returned by this operation.

*   **process**: **being reviewed**, which indicates that the certificate application is being reviewed by the CA.

*   **verify_fail**: **review failed**, which indicates that the certificate application failed to be reviewed.

    > If a certificate application fails to be reviewed, the information that you specified in the certificate application may be incorrect. We recommend that you call the [DeleteCertificateRequest](~~455294~~) operation to delete the certificate application order and resubmit a certificate application. After the order is deleted, the quota that is consumed for the order is released.

*   **certificate**: **issued**, which indicates that the certificate is issued.
*   **payed**: **pending application**, which indicates that you have not submitted a certificate application.
*   **unknow**: The status is **unknown**.', example='domain_verify'),
  uri?: string(name='Uri', description='The file that you need to create on the DNS server when you use the file verification method. **The value of this parameter contains the file path and file name.**

> This parameter is returned only when the value of the **Type** parameter is **domain\\_verify** and the value of the **ValidateType** parameter is **FILE**. The value domain\\_verify indicates that the verification of the domain name ownership is not complete, and the value FILE indicates that the file verification method is used.', example='/.well-known/pki-validation/fileauth.txt'),
  validateType?: string(name='ValidateType', description='The verification method of the domain name ownership. Valid values:

*   **DNS**: DNS verification. If you use this method, you must add a TXT record to the DNS records of the domain name in the management platform of the domain name.
*   **FILE**: file verification. If you use this method, you must create a specified file on the DNS server.

> This parameter is returned only when the value of the **Type** parameter is **domain\\_verify**. The value domain\\_verify indicates that the verification of the domain name ownership is not complete.', example='FILE'),
}

model DescribeCertificateStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCertificateStateResponseBody(name='body'),
}

/**
  * If you do not complete the verification of the domain name ownership after you submit a certificate application, you can call this operation to obtain the information that is required to complete the verification. You can complete the verification of the domain name ownership based on the data returned. If you use the DNS verification method, you must complete the verification on the management platform of the domain name. If you use the file verification method, you must complete the verification on the DNS server.
  * The certificate authority (CA) reviews your certificate application only after you complete the verification of the domain name ownership. After the CA approves your certificate application, the CA issues the certificate. If a certificate is issued, you can call this operation to obtain the CA certificate and private key of the certificate.
  *
  * @param request DescribeCertificateStateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCertificateStateResponse
 */
async function describeCertificateStateWithOptions(request: DescribeCertificateStateRequest, runtime: Util.RuntimeOptions): DescribeCertificateStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertificateState',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you do not complete the verification of the domain name ownership after you submit a certificate application, you can call this operation to obtain the information that is required to complete the verification. You can complete the verification of the domain name ownership based on the data returned. If you use the DNS verification method, you must complete the verification on the management platform of the domain name. If you use the file verification method, you must complete the verification on the DNS server.
  * The certificate authority (CA) reviews your certificate application only after you complete the verification of the domain name ownership. After the CA approves your certificate application, the CA issues the certificate. If a certificate is issued, you can call this operation to obtain the CA certificate and private key of the certificate.
  *
  * @param request DescribeCertificateStateRequest
  * @return DescribeCertificateStateResponse
 */
async function describeCertificateState(request: DescribeCertificateStateRequest): DescribeCertificateStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificateStateWithOptions(request, runtime);
}

model DescribePackageStateRequest {
  productCode?: string(name='ProductCode', description='The specifications of the certificate resource plan. Valid values:

*   **digicert-free-1-free**: DigiCert single-domain DV certificate in 3 months free trial. This is the default value.
*   **symantec-free-1-free**: DigiCert single-domain DV certificate in 1 year free trial.
*   **symantec-dv-1-starter**: DigiCert wildcard DV certificate.
*   **symantec-ov-1-personal**: DigiCert single-domain organization validated (OV) certificate.
*   **symantec-ov-w-personal**: DigiCert wildcard OV certificate.
*   **geotrust-dv-1-starter**: GeoTrust single-domain DV certificate.
*   **geotrust-dv-w-starter**: GeoTrust wildcard DV certificate.
*   **geotrust-ov-1-personal**: GeoTrust single-domain OV certificate.
*   **geotrust-ov-w-personal**: GeoTrust wildcard OV certificate.
*   **globalsign-dv-1-personal**: GlobalSign single-domain DV certificate.
*   **globalsign-dv-w-advanced**: GlobalSign wildcard DV certificate.
*   **globalsign-ov-1-personal**: GlobalSign single-domain OV certificate.
*   **globalsign-ov-w-advanced**: GlobalSign wildcard OV certificate.
*   **cfca-ov-1-personal**: China Financial Certification Authority (CFCA) single-domain OV certificate.
*   **cfca-ev-w-advanced**: CFCA wildcard OV certificate.', example='digicert-free-1-free'),
}

model DescribePackageStateResponseBody = {
  issuedCount?: long(name='IssuedCount', description='The number of issued certificates of the specified specifications.', example='1'),
  productCode?: string(name='ProductCode', description='The specifications of the certificate. Valid values:

*   **symantec-free-1-free**: DigiCert single-domain DV certificate in 3 months free trial.
*   **symantec-free-1-free**: DigiCert single-domain DV certificate in 1 year free trial.
*   **symantec-dv-1-starter**: DigiCert wildcard DV certificate.
*   **symantec-ov-1-personal**: DigiCert single-domain OV certificate.
*   **symantec-ov-w-personal**: DigiCert wildcard OV certificate.
*   **geotrust-dv-1-starter**: GeoTrust single-domain DV certificate.
*   **geotrust-dv-w-starter**: GeoTrust wildcard DV certificate.
*   **geotrust-ov-1-personal**: GeoTrust single-domain OV certificate.
*   **geotrust-ov-w-personal**: GeoTrust wildcard OV certificate.
*   **globalsign-dv-1-personal**: GlobalSign single-domain DV certificate.
*   **globalsign-dv-w-advanced**: GlobalSign wildcard DV certificate.
*   **globalsign-ov-1-personal**: GlobalSign single-domain OV certificate.
*   **globalsign-ov-w-advanced**: GlobalSign wildcard OV certificate.
*   **cfca-ov-1-personal**: CFCA single-domain OV certificate.
*   **cfca-ev-w-advanced**: CFCA wildcard OV certificate.', example='digicert-free-1-free'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='10CFA380-1C58-45C7-8075-06215F3DB681'),
  totalCount?: long(name='TotalCount', description='The total number of purchased certificate resource plans of the specified specifications.', example='20'),
  usedCount?: long(name='UsedCount', description='The number of certificate applications that you submitted for certificates of the specified specifications.

> A successful call of the [CreateCertificateForPackageRequest](~~455296~~), [CreateCertificateRequest](~~455292~~), or [CreateCertificateWithCsrRequest](~~455801~~) operation is counted as one a certificate application, regardless of whether the certificate is issued.', example='2'),
}

model DescribePackageStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePackageStateResponseBody(name='body'),
}

async function describePackageStateWithOptions(request: DescribePackageStateRequest, runtime: Util.RuntimeOptions): DescribePackageStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePackageState',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePackageState(request: DescribePackageStateRequest): DescribePackageStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePackageStateWithOptions(request, runtime);
}

model EncryptRequest {
  algorithm?: string(name='Algorithm', example='RSAESOAEPSHA_1'),
  certIdentifier?: string(name='CertIdentifier', example='12345678-1234-1234-1234-12345678****'),
  messageType?: string(name='MessageType', example='RAW'),
  plaintext?: string(name='Plaintext', example='1234***'),
}

model EncryptResponseBody = {
  certIdentifier?: string(name='CertIdentifier', example='12345678-1234-1234-1234-12345678****'),
  ciphertextBlob?: string(name='CiphertextBlob', example='ZOyIygCyaOW6Gj****MlNKiuyjfzw='),
  requestId?: string(name='RequestId', example='5979d897-d69f-4fc9-87dd-f3bb73c40b80'),
}

model EncryptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EncryptResponseBody(name='body'),
}

async function encryptWithOptions(request: EncryptRequest, runtime: Util.RuntimeOptions): EncryptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.messageType)) {
    query['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.plaintext)) {
    query['Plaintext'] = request.plaintext;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Encrypt',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function encrypt(request: EncryptRequest): EncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return encryptWithOptions(request, runtime);
}

model GetCertWarehouseQuotaResponseBody = {
  requestId?: string(name='RequestId', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  totalQuota?: long(name='TotalQuota', example='5000'),
  useCount?: long(name='UseCount', example='1000'),
}

model GetCertWarehouseQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCertWarehouseQuotaResponseBody(name='body'),
}

async function getCertWarehouseQuotaWithOptions(runtime: Util.RuntimeOptions): GetCertWarehouseQuotaResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCertWarehouseQuota',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCertWarehouseQuota(): GetCertWarehouseQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCertWarehouseQuotaWithOptions(runtime);
}

model GetUserCertificateDetailRequest {
  certFilter?: boolean(name='CertFilter', description='值为true时Cert、Key、EncryptCert、EncryptPrivateKey、SignCert、SignPrivateKey信息不返回，false时则返回，默认是false。', example='false'),
  certId?: long(name='CertId', description='The ID of the certificate.', example='6055048'),
}

model GetUserCertificateDetailResponseBody = {
  algorithm?: string(name='Algorithm', description='The algorithm.', example='RSA'),
  buyInAliyun?: boolean(name='BuyInAliyun', description='Indicates whether the certificate was purchased from Alibaba Cloud. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  cert?: string(name='Cert', description='The content of the certificate.', example='----BEGIN CERTIFICATE----- MIIF*** -----END CERTIFICATE-----'),
  city?: string(name='City', description='The city of the company or organization to which the certificate purchaser belongs.', example='hangzhou'),
  common?: string(name='Common', description='The parent domain name that is bound to the certificate.', example='*.com'),
  country?: string(name='Country', description='The country or region of the company or organization to which the certificate purchaser belongs.', example='CN'),
  encryptCert?: string(name='EncryptCert', description='The content of the encryption certificate in PEM format.', example='-----BEGIN CERTIFICATE-----
MIICDzCCA***
-----END CERTIFICATE-----'),
  encryptPrivateKey?: string(name='EncryptPrivateKey', description='The private key of the encryption certificate in the PEM format.', example='-----BEGIN EC PRIVATE KEY-----
MHcCAQEEI****
-----END EC PRIVATE KEY-----'),
  endDate?: string(name='EndDate', description='The expiration date of the certificate.', example='2023-10-25'),
  expired?: boolean(name='Expired', description='Indicates whether the certificate has expired. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  fingerprint?: string(name='Fingerprint', description='The fingerprint of the certificate.', example='1D7801BBE772D5DE55CBF1F88AEB41A42402DA07'),
  id?: long(name='Id', description='The ID of the certificate.', example='121345'),
  issuer?: string(name='Issuer', description='The certificate authority (CA) that issued the certificate.', example='Digicert'),
  key?: string(name='Key', description='The private key.', example='-----BEGIN RSA PRIVATE KEY----- MII***-----END RSA PRIVATE KEY-----'),
  name?: string(name='Name', description='The name of the certificate.', example='cert_name'),
  orderId?: long(name='OrderId', description='The ID of the certificate application order.', example='123456'),
  orgName?: string(name='OrgName', description='The name of the company or organization to which the certificate purchaser belongs.', example='Alibaba'),
  province?: string(name='Province', description='The province of the company or organization to which the certificate purchaser belongs.', example='zhejiang'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the certificate belongs.', example='rg-aek****wia'),
  sans?: string(name='Sans', description='All domain names that are bound to the certificate.', example='*.com'),
  signCert?: string(name='SignCert', description='The content of the signing certificate in the PEM format.', example='-----BEGIN CERTIFICATE-----
MIICDzCCAbagAw****
-----END CERTIFICATE-----'),
  signPrivateKey?: string(name='SignPrivateKey', description='The private key of the signing certificate in the PEM format.', example='-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILR****
-----END EC PRIVATE KEY-----'),
  startDate?: string(name='StartDate', description='The issuance date of the certificate.', example='2018-07-13'),
}

model GetUserCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserCertificateDetailResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetUserCertificateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetUserCertificateDetailResponse
 */
async function getUserCertificateDetailWithOptions(request: GetUserCertificateDetailRequest, runtime: Util.RuntimeOptions): GetUserCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certFilter)) {
    query['CertFilter'] = request.certFilter;
  }
  if (!Util.isUnset(request.certId)) {
    query['CertId'] = request.certId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserCertificateDetail',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetUserCertificateDetailRequest
  * @return GetUserCertificateDetailResponse
 */
async function getUserCertificateDetail(request: GetUserCertificateDetailRequest): GetUserCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserCertificateDetailWithOptions(request, runtime);
}

model ListCertRequest {
  certType?: string(name='CertType', description='The type of the certificate.

*   **CA**: the CA certificate.
*   **CERT**: a issued certificate.', example='CERT'),
  currentPage?: long(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  keyWord?: string(name='KeyWord', description='The keyword for the query. You can enter a name, domain name, or Subject Alternative Name (SAN) extension. Fuzzy match is supported.', example='test_name'),
  showSize?: long(name='ShowSize', description='The number of entries to return on each page. Default value: 50.', example='50'),
  sourceType?: string(name='SourceType', description='The source of the certificate. Valid values:

*   **upload**: uploaded certificate
*   **aliyun**: Alibaba Cloud certificate', example='aliyun'),
  status?: string(name='Status', description='The status of the certificate. Valid values:

*   **ISSUE**: issued
*   **REVOKE**: revoked', example='ISSUE'),
  warehouseId?: long(name='WarehouseId', description='The ID of the certificate repository. You can call the [ListCertWarehouse](~~453246~~) operation to query the IDs of certificate repositories.', example='12'),
}

model ListCertResponseBody = {
  certList?: [ 
    {
      afterDate?: long(name='AfterDate', description='The expiration time of the certificate. The value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
      beforeDate?: long(name='BeforeDate', description='The issuance time of the certificate. The value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
      certType?: string(name='CertType', description='The type of the certificate.

*   **CA**: the CA certificate.
*   **CERT**: a issued certificate.', example='CERT'),
      commonName?: string(name='CommonName', description='The domain name.', example='aliyun.alibaba.com'),
      existPrivateKey?: boolean(name='ExistPrivateKey', description='Indicates whether the certificate contains a private key. Valid values:

*   **true**
*   **false**', example='false'),
      identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='14dcc8afc7578e'),
      issuer?: string(name='Issuer', description='The issuer of the certificate.', example='mySSL'),
      sans?: string(name='Sans', description='The domain names that are bound to the certificate. Multiple domain names are separated by commas.', example='*.alibaba.com,aliyun.alibaba.com'),
      sourceType?: string(name='SourceType', description='The source of the certificate. Valid values:

*   **upload**: uploaded certificate
*   **aliyun**: Alibaba Cloud certificate', example='aliyun'),
      status?: string(name='Status', description='The status of the certificate. Valid values:

*   **ISSUE**: issued
*   **REVOKE**: revoked', example='ISSUE'),
      whId?: long(name='WhId', description='The ID of the certificate repository.', example='2'),
      whInstanceId?: string(name='WhInstanceId', description='The instance ID of the certificate repository.', example='test_whInstanceId'),
    }
  ](name='CertList', description='An array that consists of the certificates.'),
  currentPage?: long(name='CurrentPage', description='The page number of the returned page. Default value: 1.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: long(name='ShowSize', description='The number of entries returned per page. Default value: 50.', example='50'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='10'),
}

model ListCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCertResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListCertRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListCertResponse
 */
async function listCertWithOptions(request: ListCertRequest, runtime: Util.RuntimeOptions): ListCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certType)) {
    query['CertType'] = request.certType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.keyWord)) {
    query['KeyWord'] = request.keyWord;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.warehouseId)) {
    query['WarehouseId'] = request.warehouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCert',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListCertRequest
  * @return ListCertResponse
 */
async function listCert(request: ListCertRequest): ListCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCertWithOptions(request, runtime);
}

model ListCertWarehouseRequest {
  currentPage?: long(name='CurrentPage', example='1'),
  instanceId?: string(name='InstanceId', example='14dcc8afc7578e1f'),
  name?: string(name='Name', example='name'),
  showSize?: long(name='ShowSize', example='50'),
  type?: string(name='Type', example='aliyunPCA'),
}

model ListCertWarehouseResponseBody = {
  certWarehouseList?: [ 
    {
      endTime?: long(name='EndTime', example='1665819958000'),
      instanceId?: string(name='InstanceId', example='14dcc8afc7578e1f'),
      isExpired?: boolean(name='IsExpired', example='false'),
      name?: string(name='Name', example='name'),
      pcaInstanceId?: string(name='PcaInstanceId', example='14dcc8afc7578e1f'),
      qps?: long(name='Qps', example='10'),
      type?: string(name='Type', example='aliyunPCA'),
      whId?: long(name='WhId', example='1'),
    }
  ](name='CertWarehouseList'),
  currentPage?: long(name='CurrentPage', example='1'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: long(name='ShowSize', example='50'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListCertWarehouseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCertWarehouseResponseBody(name='body'),
}

async function listCertWarehouseWithOptions(request: ListCertWarehouseRequest, runtime: Util.RuntimeOptions): ListCertWarehouseResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCertWarehouse',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCertWarehouse(request: ListCertWarehouseRequest): ListCertWarehouseResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCertWarehouseWithOptions(request, runtime);
}

model ListUserCertificateOrderRequest {
  currentPage?: long(name='CurrentPage', description='The number of the page to return.', example='1'),
  keyword?: string(name='Keyword', description='The domain names that are bound or the ID of the order. Fuzzy match is supported.', example='cert-instanceId'),
  orderType?: string(name='OrderType', description='The type of the order. Valid values:

*   **CPACK**: virtual resource order. If you set OrderType to CPACK, only the information about orders that are generated to consume the certificate quota is returned.
*   **BUY**: purchase order. If you set OrderType to BUY, only the information about purchase orders is returned. In most cases, this type of order can be ignored.
*   **UPLOAD**: uploaded certificate. If you set OrderType to UPLOAD, only uploaded certificates are returned.
*   **CERT**: certificate. If you set OrderType to CERT, both issued certificates and uploaded certificates are returned.', example='CPACK'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-ae******4wia'),
  showSize?: long(name='ShowSize', description='The number of entries to return on each page. Default value: 50.', example='10'),
  status?: string(name='Status', description='The certificate status of the order. Valid values:

*   **PAYED**: pending application. You can set Status to PAYED only if you set OrderType to CPACK or BUY.
*   **CHECKING**: reviewing. You can set Status to CHECKING only if you set OrderType to CPACK or BUY.
*   **CHECKED_FAIL**: review failed. You can set Status to CHECKED_FAIL only if you set OrderType to CPACK or BUY.
*   **ISSUED**: issued.
*   **WILLEXPIRED**: about to expire.
*   **EXPIRED**: expired.
*   **NOTACTIVATED**: not activated. You can set Status to NOTACTIVATED only if you set OrderType to CPACK or BUY.
*   **REVOKED**: revoked. You can set Status to REVOKED only if you set OrderType to CPACK or BUY.', example='ISSUED'),
}

model ListUserCertificateOrderResponseBody = {
  certificateOrderList?: [ 
    {
      algorithm?: string(name='Algorithm', description='The algorithm. This parameter is returned only if OrderType is set to CPACK or BUY.', example='RSA'),
      aliyunOrderId?: long(name='AliyunOrderId', description='The ID of the Alibaba Cloud order. This parameter is returned only if OrderType is set to CPACK or BUY.', example='234567'),
      buyDate?: long(name='BuyDate', description='The time at which the order was placed. Unit: milliseconds. This parameter is returned only if OrderType is set to CPACK or BUY.', example='1634283958000'),
      certEndTime?: long(name='CertEndTime', description='The time at which the certificate expires. Unit: milliseconds. This parameter is returned only if OrderType is set to CPACK or BUY.', example='1665819958000'),
      certStartTime?: long(name='CertStartTime', description='The time at which the certificate starts to take effect. Unit: milliseconds. This parameter is returned only if OrderType is set to CPACK or BUY.', example='1665819958000'),
      certType?: string(name='CertType', description='The type of the certificate. This parameter is returned only if OrderType is set to CPACK or BUY. Valid values:

*   **DV**: domain validated (DV) certificate
*   **EV**: extended validation (EV) certificate
*   **OV**: organization validated (OV) certificate
*   **FREE**: free certificate', example='FREE'),
      certificateId?: long(name='CertificateId', description='The ID of the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='896521'),
      city?: string(name='City', description='The city in which the organization is located. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='Hangzhou'),
      commonName?: string(name='CommonName', description='The parent domain name of the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='aliyun.com'),
      country?: string(name='Country', description='The code of the country in which the organization is located. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='CN'),
      domain?: string(name='Domain', description='The domain name. This parameter is returned only if OrderType is set to CPACK or BUY.', example='aliyundoc.com'),
      domainCount?: long(name='DomainCount', description='The total number of domain names that can be bound to the certificate. This parameter is returned only if OrderType is set to CPACK or BUY.', example='1'),
      domainType?: string(name='DomainType', description='The type of the domain name. This parameter is returned only if OrderType is set to CPACK or BUY. Valid values:

*   **ONE**: single domain name
*   **MULTIPLE**: multiple domain names
*   **WILDCARD**: single wildcard domain name
*   **M_WILDCARD**: multiple wildcard domain names
*   **MIX**: hybrid domain name', example='ONE'),
      endDate?: string(name='EndDate', description='The time at which the certificate expires. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='2022-11-17'),
      expired?: boolean(name='Expired', description='Indicates whether the certificate expires. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='true'),
      fingerprint?: string(name='Fingerprint', description='The fingerprint of the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='CC6B3696E7C7CA715BD26E28E45FF3E3DF435C03'),
      instanceId?: string(name='InstanceId', description='The ID of the resource.', example='cas-instanceId'),
      issuer?: string(name='Issuer', description='The issuer of the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='MyIssuer'),
      name?: string(name='Name', description='The name of the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='cert-name'),
      orderId?: long(name='OrderId', description='The order ID. This parameter is returned only if OrderType is set to CPACK or BUY.', example='2345687'),
      orgName?: string(name='OrgName', description='The name of the organization that is associated with the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='Alibaba Cloud'),
      partnerOrderId?: string(name='PartnerOrderId', description='The ID of the certificate authority (CA) order. This parameter is returned only if OrderType is set to CPACK or BUY.', example='ca-123456'),
      productCode?: string(name='ProductCode', description='The specification ID of the order. This parameter is returned only if OrderType is set to CPACK or BUY.', example='bykj123456'),
      productName?: string(name='ProductName', description='The specification name of the order. This parameter is returned only if OrderType is set to CPACK or BUY.', example='CFCA'),
      province?: string(name='Province', description='The name of the province or autonomous region in which the organization is located. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='Zhejiang'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='rg-ae******4wia'),
      rootBrand?: string(name='RootBrand', description='The brand of the certificate. Valid values: WoSign, CFCA, DigiCert, and vTrus. This parameter is returned only if OrderType is set to CPACK or BUY.', example='CFCA'),
      sans?: string(name='Sans', description='All domain names that are bound to the certificate. Multiple domain names are separated by commas (,). This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='aliyun.com'),
      serialNo?: string(name='SerialNo', description='The serial number of the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='040a6e493cffdda6d744acf99b6576cf'),
      sha2?: string(name='Sha2', description='The SHA-2 value of the certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='56B4DED2243A81DD909D7C39824FFE4DDBD87F91BFA46CD333FF212FE0E7CB11'),
      sourceType?: string(name='SourceType', description='The type of the order. This parameter is returned only if OrderType is set to CPACK or BUY.

*   **cpack**: virtual resource order
*   **buy**: purchase order', example='buy'),
      startDate?: string(name='StartDate', description='The time at which the certificate starts to take effect. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='2021-11-16'),
      status?: string(name='Status', description='The certificate status of the order. This parameter is returned only if OrderType is set to CPACK or BUY.

*   **PAYED**: pending application
*   **CHECKING**: reviewing
*   **CHECKED_FAIL**: review failed
*   **ISSUED**: issued
*   **WILLEXPIRED**: about to expire
*   **EXPIRED**: expired
*   **NOTACTIVATED**: not activated
*   **REVOKED**: revoked', example='PAYED'),
      trusteeStatus?: string(name='TrusteeStatus', description='The hosting status of the certificate. This parameter is returned only if OrderType is set to CPACK or BUY.

*   **unTrustee**: not hosted
*   **trustee**: hosted', example='unTrustee'),
      upload?: boolean(name='Upload', description='Indicates whether the certificate is an uploaded certificate. This parameter is returned only if OrderType is set to CERT or UPLOAD.', example='false'),
      wildDomainCount?: long(name='WildDomainCount', description='The number of wildcard domain names that can be bound to the certificate. This parameter is returned only if OrderType is set to CPACK or BUY.', example='0'),
    }
  ](name='CertificateOrderList', description='An array that consists of the information about the certificates and orders.'),
  currentPage?: long(name='CurrentPage', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: long(name='ShowSize', description='The number of entries returned per page.', example='10'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListUserCertificateOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserCertificateOrderResponseBody(name='body'),
}

/**
  * You can call the ListUserCertificateOrder operation to query the certificates or certificate orders of users. If you set OrderType to CERT or UPLOAD, certificates are returned. If you set OrderType to CPACK or BUY, certificate orders are returned.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListUserCertificateOrderRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListUserCertificateOrderResponse
 */
async function listUserCertificateOrderWithOptions(request: ListUserCertificateOrderRequest, runtime: Util.RuntimeOptions): ListUserCertificateOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserCertificateOrder',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the ListUserCertificateOrder operation to query the certificates or certificate orders of users. If you set OrderType to CERT or UPLOAD, certificates are returned. If you set OrderType to CPACK or BUY, certificate orders are returned.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListUserCertificateOrderRequest
  * @return ListUserCertificateOrderResponse
 */
async function listUserCertificateOrder(request: ListUserCertificateOrderRequest): ListUserCertificateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserCertificateOrderWithOptions(request, runtime);
}

model RenewCertificateOrderForPackageRequestRequest {
  csr?: string(name='Csr', description='The content of the certificate signing request (CSR) file that is manually generated for the domain name by using OpenSSL or Keytool. The key algorithm in the CSR file must be Rivest-Shamir-Adleman (RSA) or elliptic-curve cryptography (ECC), and the key length of the RSA algorithm must be greater than or equal to 2,048 characters. For more information about how to create a CSR file, see [How do I create a CSR file?](~~42218~~)

If you do not specify this parameter, Certificate Management Service automatically generates a CSR file for the domain name in the certificate application order that you want to renew.

A CSR file contains the information about your server and company. When you apply for a certificate, you must submit the CSR file to the CA. The CA signs the CSR file by using the private key of the root certificate and generates a public key file to issue your certificate.

> The **CN** field in the CSR file specifies the domain name that is bound to the certificate.', example='-----BEGIN CERTIFICATE REQUEST----- MIIC1TCCAb0CAQAwgY8xCzAJBgNVBAYTAkNOMRIwEAYDVQQIDAlHdWFuZ3pob3Ux ETAPBgNVBAcMCFNoZW56aGVuMQ8wDQYDVQQKDAZDaGFjdW8xEDAOBgNVBAsMB0lU IERlcHQxFzAVBgNVBAMMDnd3dy5jaGFjdW8ubmV0MR0wGwYJKoZIhvcNAQkBFg44 MjkyNjY5QHFxLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALo7 atRvQf9tKo1NJ/MQqzHvIjHNhU+0MMerDq+tRlJ+a7Ro1r6IWNF5MB0Z****** -----END CERTIFICATE REQUEST-----'),
  orderId?: long(name='OrderId', description='The ID of the certificate application order that you want to renew.

> After you call the [CreateCertificateForPackageRequest](~~455296~~), [CreateCertificateRequest](~~455292~~), or [CreateCertificateWithCsrRequest](~~455801~~) operation to submit a certificate application, you can obtain the ID of the certificate application order from the **OrderId** response parameter.', example='123451222'),
}

model RenewCertificateOrderForPackageRequestResponseBody = {
  orderId?: long(name='OrderId', description='The ID of the certificate application order that is renewed.

> You can use the ID to query the status of the certificate application. For more information, see [DescribeCertificateState](~~455800~~).', example='323451222'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='082FAB35-6AB9-4FD5-8750-D36673548E76'),
}

model RenewCertificateOrderForPackageRequestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewCertificateOrderForPackageRequestResponseBody(name='body'),
}

/**
  * You can call this operation to submit a renewal application for a certificate only when the order of the certificate is in the expiring state. After the renewal is complete, a new certificate order whose status is pending application is generated. You must submit a certificate application for the new certificate order and install the new certificate after the new certificate is issued.
  * > You can call the [DescribeCertificateState](~~455800~~) operation to query the status of a certificate application order. If the value of the **Type** response parameter is **certificate**, the certificate is issued.
  *
  * @param request RenewCertificateOrderForPackageRequestRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewCertificateOrderForPackageRequestResponse
 */
async function renewCertificateOrderForPackageRequestWithOptions(request: RenewCertificateOrderForPackageRequestRequest, runtime: Util.RuntimeOptions): RenewCertificateOrderForPackageRequestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.csr)) {
    query['Csr'] = request.csr;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewCertificateOrderForPackageRequest',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to submit a renewal application for a certificate only when the order of the certificate is in the expiring state. After the renewal is complete, a new certificate order whose status is pending application is generated. You must submit a certificate application for the new certificate order and install the new certificate after the new certificate is issued.
  * > You can call the [DescribeCertificateState](~~455800~~) operation to query the status of a certificate application order. If the value of the **Type** response parameter is **certificate**, the certificate is issued.
  *
  * @param request RenewCertificateOrderForPackageRequestRequest
  * @return RenewCertificateOrderForPackageRequestResponse
 */
async function renewCertificateOrderForPackageRequest(request: RenewCertificateOrderForPackageRequestRequest): RenewCertificateOrderForPackageRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewCertificateOrderForPackageRequestWithOptions(request, runtime);
}

model RevokeWHClientCertificateRequest {
  identifier?: string(name='Identifier', example='160ae6bb538d538c70c01f81dcf2****'),
}

model RevokeWHClientCertificateResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model RevokeWHClientCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeWHClientCertificateResponseBody(name='body'),
}

async function revokeWHClientCertificateWithOptions(request: RevokeWHClientCertificateRequest, runtime: Util.RuntimeOptions): RevokeWHClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeWHClientCertificate',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeWHClientCertificate(request: RevokeWHClientCertificateRequest): RevokeWHClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeWHClientCertificateWithOptions(request, runtime);
}

model SignRequest {
  certIdentifier?: string(name='CertIdentifier', example='ccaf0c629c2be1e2abb63bb76b'),
  message?: string(name='Message', example='message'),
  messageType?: string(name='MessageType', example='RAW'),
  signingAlgorithm?: string(name='SigningAlgorithm', example='SHA256withRSA'),
}

model SignResponseBody = {
  requestId?: string(name='RequestId', example='1ed33293-2e48-6b14-861e-538e28e408eb'),
  signature?: string(name='Signature', example='eyaC0w3ROK5b3QcHmUtAhMY/sQjKu2t3uBfnf6J/gn7JfZtyxwcCUjzXbw5jmqJQRbj1te670Bshg9kUdanKhtHFhJjU5jX+ZMMBr6pH0gqQDJxR0K0yHXRc0Q5OQoUZ6BfpbI4Wt4jJvJSdCstz1vSg12CfEHS8Kd5qfhItK7Y='),
}

model SignResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SignResponseBody(name='body'),
}

async function signWithOptions(request: SignRequest, runtime: Util.RuntimeOptions): SignResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.message)) {
    query['Message'] = request.message;
  }
  if (!Util.isUnset(request.messageType)) {
    query['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.signingAlgorithm)) {
    query['SigningAlgorithm'] = request.signingAlgorithm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Sign',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sign(request: SignRequest): SignResponse {
  var runtime = new Util.RuntimeOptions{};
  return signWithOptions(request, runtime);
}

model UploadPCACertRequest {
  cert?: string(name='Cert', description='<UploadPCACertResponse>
    <RequestId>15C66C7B-671A-4297-9187-2C4477247A74</RequestId>
</UploadPCACertResponse>', example='-----BEGIN CERTIFICATE----- MIIEJDCCAwygAwIBAgIQITRHItTLTQizTyd3K7AMRTANBgkqhkiG9w0BAQsFADBe **************** 5/akmr2GK/Y= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIDuzCCAqOgAwIBAgIQSEIWDPfWTDKZcWNyL2O+fjANBgkqhkiG9w0BAQsFADBf **************** URUHyMW5Qd5Q9g6Y4sDOIm6It9TF7EjpwMs42R30agcRYzuUsN72ZFBYFJwnBX8= -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- MIIDizCCAnOgAwIBAgIRAMfjPkDKfELTo07l3A3cUSYwDQYJKoZIhvcNAQELBQAw ********* CjWTnYPhCcO2uIcnqMt7zCVs5LXBK/XSwlAXKMvKT0uuzw9VxeMfEabflKu0By8= -----END CERTIFICATE-----'),
  name?: string(name='Name', description='UploadPCACert', example='cert_name'),
  privateKey?: string(name='PrivateKey', description='Uploads a private certificate to a certificate repository.', example='-----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEA5SIfpNCBoiDrZhX1H39CHwQMVD0kBNeBTWfP9xkeesvfzbOz ******* POVNFfDf9h7pJtQ5fRZNTYTDs/d+cH62Z3+nS74mNnEfff0nkvne -----END RSA PRIVATE KEY-----'),
  warehouseId?: long(name='WarehouseId', description='{
    "RequestId": "15C66C7B-671A-4297-9187-2C4477247A74"
}', example='1'),
}

model UploadPCACertResponseBody = {
  identifier?: string(name='Identifier', example='1ed65580-7e33-6a50-8630-dd13fdc009ee'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UploadPCACertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadPCACertResponseBody(name='body'),
}

/**
  * The unique identifier of the certificate.
  *
  * @param request UploadPCACertRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UploadPCACertResponse
 */
async function uploadPCACertWithOptions(request: UploadPCACertRequest, runtime: Util.RuntimeOptions): UploadPCACertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cert)) {
    query['Cert'] = request.cert;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  if (!Util.isUnset(request.warehouseId)) {
    query['WarehouseId'] = request.warehouseId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadPCACert',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The unique identifier of the certificate.
  *
  * @param request UploadPCACertRequest
  * @return UploadPCACertResponse
 */
async function uploadPCACert(request: UploadPCACertRequest): UploadPCACertResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadPCACertWithOptions(request, runtime);
}

model UploadUserCertificateRequest {
  cert?: string(name='Cert', description='The content of the certificate in the PEM format.', example='-----BEGIN CERTIFICATE----- MIIF...... -----END CERTIFICATE-----'),
  encryptCert?: string(name='EncryptCert', description='The content of the encryption certificate in PEM format.', example='-----BEGIN CERTIFICATE-----
MIICDzCCA***
-----END CERTIFICATE-----'),
  encryptPrivateKey?: string(name='EncryptPrivateKey', description='The private key of the encryption certificate in the PEM format.', example='-----BEGIN EC PRIVATE KEY-----
MHcCAQEEI****
-----END EC PRIVATE KEY-----'),
  key?: string(name='Key', description='The private key of the certificate in the PEM format.', example='-----BEGIN CERTIFICATE-----
MIICDzCCAbagAw****
-----END CERTIFICATE-----'),
  name?: string(name='Name', description='The name of the certificate. The name can contain up to 128 characters in length. The name can contain all types of characters, such as letters, digits, and underscores (\\_).

>  The name must be unique within an Alibaba Cloud account.', example='cert-1'),
  resourceGroupId?: string(name='ResourceGroupId', description='the resource group id.', example='rg-ae****vty'),
  signCert?: string(name='SignCert', description='The content of the signing certificate in the PEM format.', example='-----BEGIN CERTIFICATE-----
MIICDzCCAbagAw****
-----END CERTIFICATE-----'),
  signPrivateKey?: string(name='SignPrivateKey', description='The private key of the signing certificate in the PEM format.', example='-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILR****
-----END EC PRIVATE KEY-----'),
}

model UploadUserCertificateResponseBody = {
  certId?: long(name='CertId', description='The ID of the certificate.', example='12345'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BDB81BA2-E1F5-4D08-A2DD-4BE2BF44C90E'),
}

model UploadUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UploadUserCertificateResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UploadUserCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UploadUserCertificateResponse
 */
async function uploadUserCertificateWithOptions(request: UploadUserCertificateRequest, runtime: Util.RuntimeOptions): UploadUserCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cert)) {
    query['Cert'] = request.cert;
  }
  if (!Util.isUnset(request.encryptCert)) {
    query['EncryptCert'] = request.encryptCert;
  }
  if (!Util.isUnset(request.encryptPrivateKey)) {
    query['EncryptPrivateKey'] = request.encryptPrivateKey;
  }
  if (!Util.isUnset(request.key)) {
    query['Key'] = request.key;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.signCert)) {
    query['SignCert'] = request.signCert;
  }
  if (!Util.isUnset(request.signPrivateKey)) {
    query['SignPrivateKey'] = request.signPrivateKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UploadUserCertificate',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UploadUserCertificateRequest
  * @return UploadUserCertificateResponse
 */
async function uploadUserCertificate(request: UploadUserCertificateRequest): UploadUserCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadUserCertificateWithOptions(request, runtime);
}

model VerifyRequest {
  certIdentifier?: string(name='CertIdentifier', example='5870821-cn-hangzhou'),
  message?: string(name='Message', example='message'),
  messageType?: string(name='MessageType', example='RAW'),
  signatureValue?: string(name='SignatureValue', example='eyaC0w3ROK5b3QcHmUtAhMY/sQjKu2t3uBfnf6J/gn7JfZtyxwcCUjzXbw5jmqJQRbj1te670Bshg9kUdanKhtHFhJjU5jX+ZMMBr6pH0gqQDJxR0K0yHXRc0Q5OQoUZ6BfpbI4Wt4jJvJSdCstz1vSg12CfEHS8Kd5qfhItK7Y='),
  signingAlgorithm?: string(name='SigningAlgorithm', example='SHA256withRSA'),
}

model VerifyResponseBody = {
  requestId?: string(name='RequestId', example='1ed33293-2e48-6b14-861e-538e28e408eb'),
  signatureValid?: boolean(name='SignatureValid', example='true'),
}

model VerifyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VerifyResponseBody(name='body'),
}

async function verifyWithOptions(request: VerifyRequest, runtime: Util.RuntimeOptions): VerifyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certIdentifier)) {
    query['CertIdentifier'] = request.certIdentifier;
  }
  if (!Util.isUnset(request.message)) {
    query['Message'] = request.message;
  }
  if (!Util.isUnset(request.messageType)) {
    query['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.signatureValue)) {
    query['SignatureValue'] = request.signatureValue;
  }
  if (!Util.isUnset(request.signingAlgorithm)) {
    query['SigningAlgorithm'] = request.signingAlgorithm;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Verify',
    version = '2020-04-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function verify(request: VerifyRequest): VerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyWithOptions(request, runtime);
}

