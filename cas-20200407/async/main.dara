/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cas';
  @version = '2020-04-07';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'cas.aliyuncs.com',
    ap-northeast-2-pop = 'cas.aliyuncs.com',
    ap-southeast-1 = 'cas.aliyuncs.com',
    ap-southeast-3 = 'cas.aliyuncs.com',
    ap-southeast-5 = 'cas.aliyuncs.com',
    cn-beijing = 'cas.aliyuncs.com',
    cn-beijing-finance-1 = 'cas.aliyuncs.com',
    cn-beijing-finance-pop = 'cas.aliyuncs.com',
    cn-beijing-gov-1 = 'cas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cas.aliyuncs.com',
    cn-chengdu = 'cas.aliyuncs.com',
    cn-edge-1 = 'cas.aliyuncs.com',
    cn-fujian = 'cas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cas.aliyuncs.com',
    cn-hangzhou-finance = 'cas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cas.aliyuncs.com',
    cn-hangzhou-test-306 = 'cas.aliyuncs.com',
    cn-hongkong = 'cas.aliyuncs.com',
    cn-hongkong-finance-pop = 'cas.aliyuncs.com',
    cn-huhehaote = 'cas.aliyuncs.com',
    cn-north-2-gov-1 = 'cas.aliyuncs.com',
    cn-qingdao = 'cas.aliyuncs.com',
    cn-qingdao-nebula = 'cas.aliyuncs.com',
    cn-shanghai = 'cas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cas.aliyuncs.com',
    cn-shanghai-finance-1 = 'cas.aliyuncs.com',
    cn-shanghai-inner = 'cas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cas.aliyuncs.com',
    cn-shenzhen = 'cas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cas.aliyuncs.com',
    cn-shenzhen-inner = 'cas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cas.aliyuncs.com',
    cn-wuhan = 'cas.aliyuncs.com',
    cn-yushanfang = 'cas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cas.aliyuncs.com',
    cn-zhangjiakou = 'cas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cas.aliyuncs.com',
    eu-west-1 = 'cas.aliyuncs.com',
    eu-west-1-oxs = 'cas.aliyuncs.com',
    rus-west-1-pop = 'cas.aliyuncs.com',
    us-east-1 = 'cas.aliyuncs.com',
    us-west-1 = 'cas.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CancelCertificateForPackageRequestRequest {
  orderId: long(name='OrderId', position='Query'),
}

model CancelCertificateForPackageRequestResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelCertificateForPackageRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCertificateForPackageRequestResponseBody(name='body'),
}

async function cancelCertificateForPackageRequest(request: CancelCertificateForPackageRequestRequest): CancelCertificateForPackageRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCertificateForPackageRequest', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderRequestRequest {
  orderId: long(name='OrderId', position='Query'),
}

model CancelOrderRequestResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelOrderRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderRequestResponseBody(name='body'),
}

async function cancelOrderRequest(request: CancelOrderRequestRequest): CancelOrderRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrderRequest', 'POST', '/', 'json', false, 'json', request);
}

model CreateCertificateForPackageRequestRequest {
  companyName?: string(name='CompanyName', position='Query'),
  csr?: string(name='Csr', position='Query'),
  domain?: string(name='Domain', position='Query'),
  email?: string(name='Email', position='Query'),
  phone?: string(name='Phone', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  username?: string(name='Username', position='Query'),
  validateType?: string(name='ValidateType', position='Query'),
}

model CreateCertificateForPackageRequestResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateForPackageRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateForPackageRequestResponseBody(name='body'),
}

async function createCertificateForPackageRequest(request: CreateCertificateForPackageRequestRequest): CreateCertificateForPackageRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCertificateForPackageRequest', 'POST', '/', 'json', false, 'json', request);
}

model CreateCertificateRequestRequest {
  domain: string(name='Domain', position='Query'),
  email: string(name='Email', position='Query'),
  phone: string(name='Phone', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  username: string(name='Username', position='Query'),
  validateType: string(name='ValidateType', position='Query'),
}

model CreateCertificateRequestResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateRequestResponseBody(name='body'),
}

async function createCertificateRequest(request: CreateCertificateRequestRequest): CreateCertificateRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCertificateRequest', 'POST', '/', 'json', false, 'json', request);
}

model CreateCertificateWithCsrRequestRequest {
  csr: string(name='Csr', position='Query'),
  email: string(name='Email', position='Query'),
  phone: string(name='Phone', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  username: string(name='Username', position='Query'),
  validateType: string(name='ValidateType', position='Query'),
}

model CreateCertificateWithCsrRequestResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateWithCsrRequestResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateWithCsrRequestResponseBody(name='body'),
}

async function createCertificateWithCsrRequest(request: CreateCertificateWithCsrRequestRequest): CreateCertificateWithCsrRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCertificateWithCsrRequest', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCertificateRequestRequest {
  orderId: long(name='OrderId', position='Query'),
}

model DeleteCertificateRequestResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCertificateRequestResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCertificateRequestResponseBody(name='body'),
}

async function deleteCertificateRequest(request: DeleteCertificateRequestRequest): DeleteCertificateRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCertificateRequest', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCertificateStateRequest {
  orderId: long(name='OrderId', position='Query'),
}

model DescribeCertificateStateResponseBody = {
  certificate?: string(name='Certificate'),
  content?: string(name='Content'),
  domain?: string(name='Domain'),
  privateKey?: string(name='PrivateKey'),
  recordDomain?: string(name='RecordDomain'),
  recordType?: string(name='RecordType'),
  recordValue?: string(name='RecordValue'),
  requestId?: string(name='RequestId'),
  type?: string(name='Type'),
  uri?: string(name='Uri'),
  validateType?: string(name='ValidateType'),
}

model DescribeCertificateStateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertificateStateResponseBody(name='body'),
}

async function describeCertificateState(request: DescribeCertificateStateRequest): DescribeCertificateStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCertificateState', 'POST', '/', 'json', false, 'json', request);
}

model DescribePackageStateRequest {
  productCode?: string(name='ProductCode', position='Query'),
}

model DescribePackageStateResponseBody = {
  issuedCount?: long(name='IssuedCount'),
  productCode?: string(name='ProductCode'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  usedCount?: long(name='UsedCount'),
}

model DescribePackageStateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePackageStateResponseBody(name='body'),
}

async function describePackageState(request: DescribePackageStateRequest): DescribePackageStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePackageState', 'POST', '/', 'json', false, 'json', request);
}

model RenewCertificateOrderForPackageRequestRequest {
  csr?: string(name='Csr', position='Query'),
  orderId: long(name='OrderId', position='Query'),
}

model RenewCertificateOrderForPackageRequestResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewCertificateOrderForPackageRequestResponse = {
  headers: map[string]string(name='headers'),
  body: RenewCertificateOrderForPackageRequestResponseBody(name='body'),
}

async function renewCertificateOrderForPackageRequest(request: RenewCertificateOrderForPackageRequestRequest): RenewCertificateOrderForPackageRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewCertificateOrderForPackageRequest', 'POST', '/', 'json', false, 'json', request);
}

