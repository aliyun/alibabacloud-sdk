/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'umeng-finplus';
  @version = '2022-09-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BuildStsAKRequest {
  body?: long(name='body', position='Body'),
}

model BuildStsAKResponseBody = {
  code?: string(name='Code'),
  data?: {
    bucket?: string(name='bucket'),
    endpoint?: string(name='endpoint'),
    id?: string(name='id'),
    path?: string(name='path'),
    secret?: string(name='secret'),
    token?: string(name='token'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BuildStsAKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuildStsAKResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BuildStsAK  BuildStsAKRequest
  * @return BuildStsAKResponse
 */
async function buildStsAK(request: BuildStsAKRequest): BuildStsAKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BuildStsAK', 'POST', '/bc/buildStsAK', 'json', false, 'json', request);
}

model BuildStsAK2Request {
  clientId?: long(name='clientId', position='Body'),
  dataSetId?: long(name='dataSetId', position='Body'),
}

model BuildStsAK2ResponseBody = {
  code?: string(name='Code'),
  data?: {
    bucket?: string(name='bucket'),
    endpoint?: string(name='endpoint'),
    id?: string(name='id'),
    path?: string(name='path'),
    secret?: string(name='secret'),
    token?: string(name='token'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BuildStsAK2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BuildStsAK2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BuildStsAK2  BuildStsAK2Request
  * @return BuildStsAK2Response
 */
async function buildStsAK2(request: BuildStsAK2Request): BuildStsAK2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BuildStsAK2', 'POST', '/bc/buildStsAK2', 'json', false, 'json', request);
}

model CancelTaskRequest {
  body?: long(name='body', position='Body'),
}

model CancelTaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelTask  CancelTaskRequest
  * @return CancelTaskResponse
 */
async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'POST', '/bc/cancelTask', 'json', false, 'json', request);
}

model CancelTask2Request {
  bcId?: long(name='bcId', position='Body'),
  clientId?: long(name='clientId', position='Body'),
}

model CancelTask2ResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelTask2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelTask2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelTask2  CancelTask2Request
  * @return CancelTask2Response
 */
async function cancelTask2(request: CancelTask2Request): CancelTask2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask2', 'POST', '/bc/cancelTask2', 'json', false, 'json', request);
}

model CreateComputeTaskRequest {
  appId?: long(name='appId', position='Body'),
  dataSetIds?: string(name='dataSetIds', position='Body'),
  morseInfoList?: [ 
    {
      cuId?: string(name='cuId'),
      cuVersion?: string(name='cuVersion'),
    }
  ](name='morseInfoList', position='Body'),
  name?: string(name='name', position='Body'),
  remarks?: string(name='remarks', position='Body'),
  type?: string(name='type', position='Body'),
}

model CreateComputeTaskResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateComputeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateComputeTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateComputeTask  CreateComputeTaskRequest
  * @return CreateComputeTaskResponse
 */
async function createComputeTask(request: CreateComputeTaskRequest): CreateComputeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateComputeTask', 'POST', '/bc/createComputeTask', 'json', false, 'json', request);
}

model CreateComputeTask2Request {
  appId?: long(name='appId', position='Body'),
  clientId?: long(name='clientId', position='Body'),
  dataSetIds?: string(name='dataSetIds', position='Body'),
  morseInfoList?: [ 
    {
      cuId?: string(name='cuId'),
      cuVersion?: string(name='cuVersion'),
    }
  ](name='morseInfoList', position='Body'),
  name?: string(name='name', position='Body'),
  remarks?: string(name='remarks', position='Body'),
  taskSource?: string(name='taskSource', position='Body'),
  type?: string(name='type', position='Body'),
}

model CreateComputeTask2ResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateComputeTask2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateComputeTask2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateComputeTask2  CreateComputeTask2Request
  * @return CreateComputeTask2Response
 */
async function createComputeTask2(request: CreateComputeTask2Request): CreateComputeTask2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateComputeTask2', 'POST', '/bc/createComputeTask2', 'json', false, 'json', request);
}

model CreateDataSetRequest {
  name?: string(name='name', position='Body'),
  type?: string(name='type', position='Body'),
}

model CreateDataSetResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSet  CreateDataSetRequest
  * @return CreateDataSetResponse
 */
async function createDataSet(request: CreateDataSetRequest): CreateDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataSet', 'POST', '/bc/createDataSet', 'json', false, 'json', request);
}

model CreateDataSet2Request {
  clientId?: long(name='clientId', position='Body'),
  name?: string(name='name', position='Body'),
  type?: string(name='type', position='Body'),
}

model CreateDataSet2ResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataSet2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSet2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSet2  CreateDataSet2Request
  * @return CreateDataSet2Response
 */
async function createDataSet2(request: CreateDataSet2Request): CreateDataSet2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDataSet2', 'POST', '/bc/createDataSet2', 'json', false, 'json', request);
}

model CreateKnowLedgeRequest {
  body?: {
    appId?: string(name='appId'),
    internalKnowledgeId?: string(name='internalKnowledgeId'),
    knowledgeName?: string(name='knowledgeName', maxLength=30),
  }(name='body', shrink='json', position='Body'),
}

model CreateKnowLedgeResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateKnowLedgeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateKnowLedgeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateKnowLedge  CreateKnowLedgeRequest
  * @return CreateKnowLedgeResponse
 */
async function createKnowLedge(request: CreateKnowLedgeRequest): CreateKnowLedgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateKnowLedge', 'POST', '/yzd/createKnowLedge', 'json', true, 'form', request);
}

model EncryptInvokeRequest {
  clientId?: long(name='clientId', position='Body'),
  data?: string(name='data', position='Body'),
  encryptKey?: string(name='encryptKey', position='Body'),
  methodName?: string(name='methodName', position='Body'),
  sign?: string(name='sign', position='Body'),
}

model EncryptInvokeResponseBody = {
  code?: string(name='Code'),
  data?: {
    encryptData?: string(name='encryptData'),
    encryptKey?: string(name='encryptKey'),
    sign?: string(name='sign'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EncryptInvokeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EncryptInvokeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EncryptInvoke  EncryptInvokeRequest
  * @return EncryptInvokeResponse
 */
async function encryptInvoke(request: EncryptInvokeRequest): EncryptInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EncryptInvoke', 'POST', '/bc/encryptInvoke', 'json', false, 'json', request);
}

model GetCrowdDatasetRequest {
  body?: {
    appId?: string(name='appId'),
  }(name='body', shrink='json', position='Query'),
}

model GetCrowdDatasetResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='appId'),
    crowdDatasetId?: string(name='crowdDatasetId'),
    datasetIds?: string(name='datasetIds'),
    description?: string(name='description'),
    name?: string(name='name'),
    uploadStatus?: string(name='uploadStatus'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCrowdDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCrowdDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCrowdDataset  GetCrowdDatasetRequest
  * @return GetCrowdDatasetResponse
 */
async function getCrowdDataset(request: GetCrowdDatasetRequest): GetCrowdDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCrowdDataset', 'POST', '/yzd/getCrowdDataset', 'json', false, 'json', request);
}

model GetKnowledgeDataRequest {
  body?: {
    appId?: string(name='appId'),
    knowledgeIdList?: [ string ](name='knowledgeIdList'),
  }(name='body', shrink='json', position='Query'),
}

model GetKnowledgeDataResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appId?: string(name='appId'),
      internalKnowledgeId?: string(name='internalKnowledgeId'),
      knowledgeName?: string(name='knowledgeName'),
      message?: string(name='message'),
      status?: string(name='status'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetKnowledgeDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKnowledgeDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetKnowledgeData  GetKnowledgeDataRequest
  * @return GetKnowledgeDataResponse
 */
async function getKnowledgeData(request: GetKnowledgeDataRequest): GetKnowledgeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetKnowledgeData', 'POST', '/yzd/getKnowledgeData', 'json', false, 'json', request);
}

model GetYzdInstanceTaskResultRequest {
  body?: {
    appId?: string(name='appId'),
    rangeTimeEndTime?: string(name='rangeTimeEndTime'),
    rangeTimeStartTime?: string(name='rangeTimeStartTime'),
  }(name='body', shrink='json', position='Query'),
}

model GetYzdInstanceTaskResultResponseBody = {
  code?: boolean(name='Code'),
  data?: [ 
    {
      appid?: string(name='appid'),
      bcid?: string(name='bcid'),
      datasetIds?: string(name='datasetIds'),
      downloadUrls?: [ 
        {
          pwd?: string(name='pwd'),
          url?: string(name='url'),
        }
      ](name='downloadUrls'),
      resultCnt?: string(name='resultCnt'),
      status?: string(name='status'),
      timeDuration?: string(name='timeDuration'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetYzdInstanceTaskResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetYzdInstanceTaskResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetYzdInstanceTaskResult  GetYzdInstanceTaskResultRequest
  * @return GetYzdInstanceTaskResultResponse
 */
async function getYzdInstanceTaskResult(request: GetYzdInstanceTaskResultRequest): GetYzdInstanceTaskResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetYzdInstanceTaskResult', 'POST', '/yzd/getYzdInstanceTaskResult', 'json', false, 'json', request);
}

model GetYzdStsAKRequest {
}

model GetYzdStsAKResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='appId'),
    bucket?: string(name='bucket'),
    endpoint?: string(name='endpoint'),
    id?: string(name='id'),
    internalKnowledgeId?: string(name='internalKnowledgeId'),
    path?: string(name='path'),
    secret?: string(name='secret'),
    token?: string(name='token'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetYzdStsAKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetYzdStsAKResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetYzdStsAK  GetYzdStsAKRequest
  * @return GetYzdStsAKResponse
 */
async function getYzdStsAK(request: GetYzdStsAKRequest): GetYzdStsAKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetYzdStsAK', 'POST', '/yzd/getYzdStsAK', 'json', false, 'json', request);
}

model ListComputeTaskRequest {
}

model ListComputeTaskResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appId?: long(name='appId'),
      bcId?: long(name='bcId'),
      computeOssFileTitle?: string(name='computeOssFileTitle'),
      datasetIds?: string(name='datasetIds'),
      extInfo?: string(name='extInfo'),
      fileNum?: long(name='fileNum'),
      name?: string(name='name'),
      remarks?: string(name='remarks'),
      status?: string(name='status'),
      taskResultList?: [ 
        {
          bcId?: long(name='bcId'),
          code?: int32(name='code'),
          lineNum?: long(name='lineNum'),
        }
      ](name='taskResultList'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListComputeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListComputeTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListComputeTask  ListComputeTaskRequest
  * @return ListComputeTaskResponse
 */
async function listComputeTask(request: ListComputeTaskRequest): ListComputeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListComputeTask', 'POST', '/bc/listComputeTask', 'json', false, 'json', request);
}

model ListComputeTask2Request {
  clientId?: long(name='clientId', position='Body'),
  pageNum?: int32(name='pageNum', position='Body'),
  pageSize?: int32(name='pageSize', position='Body'),
}

model ListComputeTask2ResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
      {
        appId?: long(name='appId'),
        bcId?: long(name='bcId'),
        computeOssFileTitle?: string(name='computeOssFileTitle'),
        datasetIds?: string(name='datasetIds'),
        extInfo?: string(name='extInfo'),
        fileNum?: long(name='fileNum'),
        name?: string(name='name'),
        remarks?: string(name='remarks'),
        status?: string(name='status'),
        taskResultList?: [ 
          {
            bcId?: long(name='bcId'),
            code?: int32(name='code'),
            lineNum?: long(name='lineNum'),
          }
        ](name='taskResultList'),
      }
    ](name='data'),
    totalNum?: int32(name='totalNum'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListComputeTask2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListComputeTask2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListComputeTask2  ListComputeTask2Request
  * @return ListComputeTask2Response
 */
async function listComputeTask2(request: ListComputeTask2Request): ListComputeTask2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListComputeTask2', 'POST', '/bc/listComputeTask2', 'json', false, 'json', request);
}

model ListDataSetRequest {
}

model ListDataSetResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: string(name='createTime'),
      datasetId?: long(name='datasetId'),
      lineNum?: long(name='lineNum'),
      name?: string(name='name'),
      status?: string(name='status'),
      type?: string(name='type'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSet  ListDataSetRequest
  * @return ListDataSetResponse
 */
async function listDataSet(request: ListDataSetRequest): ListDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSet', 'POST', '/bc/listDataSet', 'json', false, 'json', request);
}

model ListDataSet2Request {
  clientId?: long(name='clientId', position='Body'),
  pageNo?: int32(name='pageNo', position='Body'),
  pageSize?: int32(name='pageSize', position='Body'),
}

model ListDataSet2ResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
      {
        createTime?: string(name='createTime'),
        datasetId?: long(name='datasetId'),
        lineNum?: long(name='lineNum'),
        name?: string(name='name'),
        status?: string(name='status'),
        type?: string(name='type'),
      }
    ](name='data'),
    totalNum?: int32(name='totalNum'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataSet2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSet2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSet2  ListDataSet2Request
  * @return ListDataSet2Response
 */
async function listDataSet2(request: ListDataSet2Request): ListDataSet2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSet2', 'POST', '/bc/listDataSet2', 'json', false, 'json', request);
}

model RemoveDataSetRequest {
  body?: long(name='body', position='Body'),
}

model RemoveDataSetResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveDataSet  RemoveDataSetRequest
  * @return RemoveDataSetResponse
 */
async function removeDataSet(request: RemoveDataSetRequest): RemoveDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveDataSet', 'POST', '/bc/removeDataSet', 'json', false, 'json', request);
}

model RemoveDataSet2Request {
  clientId?: long(name='clientId', position='Body'),
  dataSetId?: long(name='dataSetId', position='Body'),
}

model RemoveDataSet2ResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDataSet2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveDataSet2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveDataSet2  RemoveDataSet2Request
  * @return RemoveDataSet2Response
 */
async function removeDataSet2(request: RemoveDataSet2Request): RemoveDataSet2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveDataSet2', 'POST', '/bc/removeDataSet2', 'json', false, 'json', request);
}

model SaveCrowdDatasetAndBindingDatasetRequest {
  body?: {
    appId: string(name='appId', description='This parameter is required.'),
    datasetIds: [ string ](name='datasetIds', description='This parameter is required.'),
    description?: string(name='description'),
    name: string(name='name', description='This parameter is required.', maxLength=64),
  }(name='body', shrink='json', position='Body'),
}

model SaveCrowdDatasetAndBindingDatasetResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='appId'),
    crowdDatasetId?: string(name='crowdDatasetId'),
    datasetIds?: [ string ](name='datasetIds'),
    description?: string(name='description'),
    name?: string(name='name'),
    uploadStatus?: string(name='uploadStatus'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveCrowdDatasetAndBindingDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveCrowdDatasetAndBindingDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveCrowdDatasetAndBindingDataset  SaveCrowdDatasetAndBindingDatasetRequest
  * @return SaveCrowdDatasetAndBindingDatasetResponse
 */
async function saveCrowdDatasetAndBindingDataset(request: SaveCrowdDatasetAndBindingDatasetRequest): SaveCrowdDatasetAndBindingDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SaveCrowdDatasetAndBindingDataset', 'POST', '/yzd/saveCrowdDatasetAndBindingDataset', 'json', true, 'form', request);
}

model SelectComputeTaskRequest {
  body?: long(name='body', position='Body'),
}

model SelectComputeTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: long(name='appId'),
    bcId?: long(name='bcId'),
    computeOssFileTitle?: string(name='computeOssFileTitle'),
    datasetIds?: string(name='datasetIds'),
    exportOssFileList?: [ 
      {
        downLoadUrl?: string(name='downLoadUrl'),
        password?: string(name='password'),
      }
    ](name='exportOssFileList'),
    extInfo?: string(name='extInfo'),
    fileNum?: long(name='fileNum'),
    name?: string(name='name'),
    remarks?: string(name='remarks'),
    status?: string(name='status'),
    taskResultList?: [ 
      {
        bcId?: long(name='bcId'),
        code?: int32(name='code'),
        lineNum?: long(name='lineNum'),
      }
    ](name='taskResultList'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SelectComputeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectComputeTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectComputeTask  SelectComputeTaskRequest
  * @return SelectComputeTaskResponse
 */
async function selectComputeTask(request: SelectComputeTaskRequest): SelectComputeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SelectComputeTask', 'POST', '/bc/selectComputeTask', 'json', false, 'json', request);
}

model SelectComputeTask2Request {
  bcConfirm?: boolean(name='bcConfirm', position='Body'),
  bcId?: long(name='bcId', position='Body'),
  clientId?: long(name='clientId', position='Body'),
}

model SelectComputeTask2ResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: long(name='appId'),
    bcId?: long(name='bcId'),
    computeOssFileTitle?: string(name='computeOssFileTitle'),
    datasetIds?: string(name='datasetIds'),
    exportOssFileList?: [ 
      {
        downLoadUrl?: string(name='downLoadUrl'),
        password?: string(name='password'),
      }
    ](name='exportOssFileList'),
    extInfo?: string(name='extInfo'),
    fileNum?: long(name='fileNum'),
    hint?: string(name='hint'),
    name?: string(name='name'),
    remarks?: string(name='remarks'),
    status?: string(name='status'),
    taskResultList?: [ 
      {
        bcId?: long(name='bcId'),
        code?: int32(name='code'),
        lineNum?: long(name='lineNum'),
      }
    ](name='taskResultList'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SelectComputeTask2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectComputeTask2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectComputeTask2  SelectComputeTask2Request
  * @return SelectComputeTask2Response
 */
async function selectComputeTask2(request: SelectComputeTask2Request): SelectComputeTask2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SelectComputeTask2', 'POST', '/bc/selectComputeTask2', 'json', false, 'json', request);
}

model SelectDataSetRequest {
  body?: long(name='body', position='Body'),
}

model SelectDataSetResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: string(name='createTime'),
    datasetId?: long(name='datasetId'),
    lineNum?: long(name='lineNum'),
    name?: string(name='name'),
    status?: string(name='status'),
    type?: string(name='type'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SelectDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectDataSet  SelectDataSetRequest
  * @return SelectDataSetResponse
 */
async function selectDataSet(request: SelectDataSetRequest): SelectDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SelectDataSet', 'POST', '/bc/selectDataSet', 'json', false, 'json', request);
}

model SelectDataSet2Request {
  clientId?: long(name='clientId', position='Body'),
  dataSetId?: long(name='dataSetId', position='Body'),
}

model SelectDataSet2ResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: string(name='createTime'),
    datasetId?: long(name='datasetId'),
    lineNum?: long(name='lineNum'),
    name?: string(name='name'),
    ossFileCount?: long(name='ossFileCount'),
    status?: string(name='status'),
    statusMsg?: string(name='statusMsg'),
    type?: string(name='type'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SelectDataSet2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectDataSet2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectDataSet2  SelectDataSet2Request
  * @return SelectDataSet2Response
 */
async function selectDataSet2(request: SelectDataSet2Request): SelectDataSet2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SelectDataSet2', 'POST', '/bc/selectDataSet2', 'json', false, 'json', request);
}

model SubmitDataSetTaskRequest {
  body?: long(name='body', position='Body'),
}

model SubmitDataSetTaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitDataSetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDataSetTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitDataSetTask  SubmitDataSetTaskRequest
  * @return SubmitDataSetTaskResponse
 */
async function submitDataSetTask(request: SubmitDataSetTaskRequest): SubmitDataSetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitDataSetTask', 'POST', '/bc/submitDataSetTask', 'json', false, 'json', request);
}

model SubmitDataSetTask2Request {
  clientId?: long(name='clientId', position='Body'),
  dataSetId?: long(name='dataSetId', position='Body'),
}

model SubmitDataSetTask2ResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitDataSetTask2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitDataSetTask2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitDataSetTask2  SubmitDataSetTask2Request
  * @return SubmitDataSetTask2Response
 */
async function submitDataSetTask2(request: SubmitDataSetTask2Request): SubmitDataSetTask2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitDataSetTask2', 'POST', '/bc/submitDataSetTask2', 'json', false, 'json', request);
}

model ValidateKnowLedgeRequest {
  body?: [ string ](name='body', shrink='simple', position='Body'),
}

model ValidateKnowLedgeResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ValidateKnowLedgeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateKnowLedgeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateKnowLedge  ValidateKnowLedgeRequest
  * @return ValidateKnowLedgeResponse
 */
async function validateKnowLedge(request: ValidateKnowLedgeRequest): ValidateKnowLedgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateKnowLedge', 'POST', '/yzd/validateKnowLedge', 'json', true, 'form', request);
}

