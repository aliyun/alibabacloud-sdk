/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('umeng-finplus', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BuildStsAKRequest {
  body?: long(name='body'),
}

model BuildStsAKResponseBody = {
  code?: string(name='Code'),
  data?: {
    bucket?: string(name='bucket'),
    endpoint?: string(name='endpoint'),
    id?: string(name='id'),
    path?: string(name='path'),
    secret?: string(name='secret'),
    token?: string(name='token'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BuildStsAKResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BuildStsAKResponseBody(name='body'),
}

async function buildStsAK(request: BuildStsAKRequest): BuildStsAKResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return buildStsAKWithOptions(request, headers, runtime);
}

async function buildStsAKWithOptions(request: BuildStsAKRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BuildStsAKResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'BuildStsAK',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/buildStsAK`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CancelTaskRequest {
  body?: long(name='body'),
}

model CancelTaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelTaskWithOptions(request, headers, runtime);
}

async function cancelTaskWithOptions(request: CancelTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CancelTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'CancelTask',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/cancelTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateComputeTaskRequest {
  appId?: long(name='appId'),
  dataSetIds?: string(name='dataSetIds'),
  name?: string(name='name'),
  remarks?: string(name='remarks'),
  type?: string(name='type'),
}

model CreateComputeTaskResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateComputeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateComputeTaskResponseBody(name='body'),
}

async function createComputeTask(request: CreateComputeTaskRequest): CreateComputeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createComputeTaskWithOptions(request, headers, runtime);
}

async function createComputeTaskWithOptions(request: CreateComputeTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateComputeTaskResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['appId'] = request.appId;
  }
  if (!Util.isUnset(request.dataSetIds)) {
    body['dataSetIds'] = request.dataSetIds;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.remarks)) {
    body['remarks'] = request.remarks;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateComputeTask',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/createComputeTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateDataSetRequest {
  name?: string(name='name'),
  type?: string(name='type'),
}

model CreateDataSetResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataSetResponseBody(name='body'),
}

async function createDataSet(request: CreateDataSetRequest): CreateDataSetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createDataSetWithOptions(request, headers, runtime);
}

async function createDataSetWithOptions(request: CreateDataSetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateDataSetResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    body['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSet',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/createDataSet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListComputeTaskResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      appId?: long(name='appId'),
      bcId?: long(name='bcId'),
      computeOssFileTitle?: string(name='computeOssFileTitle'),
      datasetIds?: string(name='datasetIds'),
      extInfo?: string(name='extInfo'),
      fileNum?: long(name='fileNum'),
      name?: string(name='name'),
      remarks?: string(name='remarks'),
      status?: string(name='status'),
      taskResultList?: [ 
        {
          bcId?: long(name='bcId'),
          code?: int32(name='code'),
          lineNum?: long(name='lineNum'),
        }
      ](name='taskResultList'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListComputeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListComputeTaskResponseBody(name='body'),
}

async function listComputeTask(): ListComputeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listComputeTaskWithOptions(headers, runtime);
}

async function listComputeTaskWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListComputeTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListComputeTask',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/listComputeTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDataSetResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      createTime?: string(name='createTime'),
      datasetId?: long(name='datasetId'),
      lineNum?: long(name='lineNum'),
      name?: string(name='name'),
      status?: string(name='status'),
      type?: string(name='type'),
    }
  ](name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSetResponseBody(name='body'),
}

async function listDataSet(): ListDataSetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listDataSetWithOptions(headers, runtime);
}

async function listDataSetWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListDataSetResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListDataSet',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/listDataSet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveDataSetRequest {
  body?: long(name='body'),
}

model RemoveDataSetResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveDataSetResponseBody(name='body'),
}

async function removeDataSet(request: RemoveDataSetRequest): RemoveDataSetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeDataSetWithOptions(request, headers, runtime);
}

async function removeDataSetWithOptions(request: RemoveDataSetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveDataSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'RemoveDataSet',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/removeDataSet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SelectComputeTaskRequest {
  body?: long(name='body'),
}

model SelectComputeTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: long(name='appId'),
    bcId?: long(name='bcId'),
    computeOssFileTitle?: string(name='computeOssFileTitle'),
    datasetIds?: string(name='datasetIds'),
    exportOssFileList?: [ 
      {
        downLoadUrl?: string(name='downLoadUrl'),
        password?: string(name='password'),
      }
    ](name='exportOssFileList'),
    extInfo?: string(name='extInfo'),
    fileNum?: long(name='fileNum'),
    name?: string(name='name'),
    remarks?: string(name='remarks'),
    status?: string(name='status'),
    taskResultList?: [ 
      {
        bcId?: long(name='bcId'),
        code?: int32(name='code'),
        lineNum?: long(name='lineNum'),
      }
    ](name='taskResultList'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SelectComputeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SelectComputeTaskResponseBody(name='body'),
}

async function selectComputeTask(request: SelectComputeTaskRequest): SelectComputeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return selectComputeTaskWithOptions(request, headers, runtime);
}

async function selectComputeTaskWithOptions(request: SelectComputeTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SelectComputeTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'SelectComputeTask',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/selectComputeTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SelectDataSetRequest {
  body?: long(name='body'),
}

model SelectDataSetResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: string(name='createTime'),
    datasetId?: long(name='datasetId'),
    lineNum?: long(name='lineNum'),
    name?: string(name='name'),
    status?: string(name='status'),
    type?: string(name='type'),
  }(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SelectDataSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SelectDataSetResponseBody(name='body'),
}

async function selectDataSet(request: SelectDataSetRequest): SelectDataSetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return selectDataSetWithOptions(request, headers, runtime);
}

async function selectDataSetWithOptions(request: SelectDataSetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SelectDataSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'SelectDataSet',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/selectDataSet`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitDataSetTaskRequest {
  body?: long(name='body'),
}

model SubmitDataSetTaskResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitDataSetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitDataSetTaskResponseBody(name='body'),
}

async function submitDataSetTask(request: SubmitDataSetTaskRequest): SubmitDataSetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return submitDataSetTaskWithOptions(request, headers, runtime);
}

async function submitDataSetTaskWithOptions(request: SubmitDataSetTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): SubmitDataSetTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = request.body,
  };
  var params = new OpenApi.Params{
    action = 'SubmitDataSetTask',
    version = '2022-09-13',
    protocol = 'HTTPS',
    pathname = `/bc/submitDataSetTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

