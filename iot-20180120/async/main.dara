/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Iot';
  @version = '2018-01-20';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'iot.aliyuncs.com',
    ap-south-1 = 'iot.aliyuncs.com',
    ap-southeast-2 = 'iot.aliyuncs.com',
    ap-southeast-3 = 'iot.aliyuncs.com',
    ap-southeast-5 = 'iot.aliyuncs.com',
    cn-beijing-finance-1 = 'iot.aliyuncs.com',
    cn-beijing-finance-pop = 'iot.aliyuncs.com',
    cn-beijing-gov-1 = 'iot.aliyuncs.com',
    cn-beijing-nu16-b01 = 'iot.aliyuncs.com',
    cn-chengdu = 'iot.aliyuncs.com',
    cn-edge-1 = 'iot.aliyuncs.com',
    cn-fujian = 'iot.aliyuncs.com',
    cn-haidian-cm12-c01 = 'iot.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'iot.aliyuncs.com',
    cn-hangzhou-finance = 'iot.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'iot.aliyuncs.com',
    cn-hangzhou-test-306 = 'iot.aliyuncs.com',
    cn-hongkong = 'iot.aliyuncs.com',
    cn-hongkong-finance-pop = 'iot.aliyuncs.com',
    cn-huhehaote = 'iot.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'iot.aliyuncs.com',
    cn-qingdao = 'iot.aliyuncs.com',
    cn-qingdao-nebula = 'iot.aliyuncs.com',
    cn-shanghai-et15-b01 = 'iot.aliyuncs.com',
    cn-shanghai-et2-b01 = 'iot.aliyuncs.com',
    cn-shanghai-finance-1 = 'iot.aliyuncs.com',
    cn-shanghai-inner = 'iot.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'iot.aliyuncs.com',
    cn-shenzhen-finance-1 = 'iot.aliyuncs.com',
    cn-shenzhen-inner = 'iot.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'iot.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'iot.aliyuncs.com',
    cn-wuhan = 'iot.aliyuncs.com',
    cn-wulanchabu = 'iot.aliyuncs.com',
    cn-yushanfang = 'iot.aliyuncs.com',
    cn-zhangbei = 'iot.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'iot.aliyuncs.com',
    cn-zhangjiakou = 'iot.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'iot.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'iot.aliyuncs.com',
    eu-west-1 = 'iot.aliyuncs.com',
    eu-west-1-oxs = 'iot.aliyuncs.com',
    me-east-1 = 'iot.aliyuncs.com',
    rus-west-1-pop = 'iot.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddDataForApiSourceRequest {
  apiId: string(name='ApiId', example='cxatswiniekxw***', position='Query'),
  content: string(name='Content', example='{"key":"value","ts":16376582*****}', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-0pp1n*****', position='Query'),
}

model AddDataForApiSourceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: long(name='Data', example='1234567890'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09934561E'),
  success?: boolean(name='Success', example='true'),
}

model AddDataForApiSourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDataForApiSourceResponseBody(name='body'),
}

async function addDataForApiSource(request: AddDataForApiSourceRequest): AddDataForApiSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataForApiSource', 'POST', '/', 'json', false, 'json', request);
}

model AddShareTaskDeviceRequest {
  iotIdList?: [ string ](name='IotIdList', example='y4u2weAIrpp****WHMle1234', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64********', position='Body'),
  productKey?: string(name='ProductKey', example='a2YwD23***', position='Body'),
  shareTaskId: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model AddShareTaskDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    progress?: int32(name='Progress', example='100'),
    progressId?: string(name='ProgressId', example='Md3ZiTL888K9llXDy7890***********'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model AddShareTaskDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: AddShareTaskDeviceResponseBody(name='body'),
}

async function addShareTaskDevice(request: AddShareTaskDeviceRequest): AddShareTaskDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddShareTaskDevice', 'POST', '/', 'json', true, 'form', request);
}

model AttachDestinationRequest {
  destinationId: long(name='DestinationId', example='1002', minimum=0, maximum=999999999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  isFailover: boolean(name='IsFailover', example='false', position='Query'),
  parserId: long(name='ParserId', example='1000', minimum=1, maximum=999999999, position='Query'),
}

model AttachDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model AttachDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDestinationResponseBody(name='body'),
}

async function attachDestination(request: AttachDestinationRequest): AttachDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachDestination', 'POST', '/', 'json', false, 'json', request);
}

model AttachParserDataSourceRequest {
  dataSourceId: long(name='DataSourceId', example='1001', minimum=0, maximum=9999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  parserId: long(name='ParserId', example='1000', minimum=1, maximum=99999999999, position='Query'),
}

model AttachParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model AttachParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachParserDataSourceResponseBody(name='body'),
}

async function attachParserDataSource(request: AttachParserDataSourceRequest): AttachParserDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachParserDataSource', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddDataForApiSourceRequest {
  apiId: string(name='ApiId', example='cxatswiniekxw***', position='Query'),
  contentList: map[string]any(name='ContentList', example='[{"key":"value1","ts":1637658286000},{"key":"value2","ts":1637658287000}]', shrink='json', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-0pp1n*****', position='Query'),
}

model BatchAddDataForApiSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: map[string]any(name='Data', example='{"count":2,"hasNext":false,"items":[{"key":"value1","ts":1637658286000,"id":1234567890},{"key":"value2","ts":1637658287000,"id":1234567891}],"pageNum":1,"pageSize":2}'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model BatchAddDataForApiSourceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDataForApiSourceResponseBody(name='body'),
}

async function batchAddDataForApiSource(request: BatchAddDataForApiSourceRequest): BatchAddDataForApiSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddDataForApiSource', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName: string(name='DeviceName', example='ZHuPo6sZzv7pOzYh****'),
      productKey: string(name='ProductKey', example='a1kORrK****'),
    }
  ](name='Device', position='Query'),
  groupId: string(name='GroupId', example='6VfhebLg5iUe****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchAddDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount', example='0'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  exceedTenGroupDeviceCount?: int32(name='ExceedTenGroupDeviceCount', example='0'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
  successAddedDeviceCount?: int32(name='SuccessAddedDeviceCount', example='2'),
  validDeviceCount?: int32(name='ValidDeviceCount', example='2'),
}

model BatchAddDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDeviceGroupRelationsResponseBody(name='body'),
}

async function batchAddDeviceGroupRelations(request: BatchAddDeviceGroupRelationsRequest): BatchAddDeviceGroupRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddDeviceGroupRelations', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddThingTopoRequest {
  gwDeviceName: string(name='GwDeviceName', example='gateway', position='Query'),
  gwProductKey: string(name='GwProductKey', example='a1vL7cp****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  topoAddItem: [ 
    {
      clientId?: string(name='ClientId', example='a1BwAGV****device1'),
      deviceName: string(name='DeviceName', example='light'),
      productKey: string(name='ProductKey', example='a1BwAGV****'),
      sign: string(name='Sign', example='C1C1606D61884C5F16C9EA6622E5****'),
      signMethod: string(name='SignMethod', example='hmacMd5'),
      timestamp?: string(name='Timestamp', example='1579335899000'),
    }
  ](name='TopoAddItem', position='Query'),
}

model BatchAddThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddThingTopoResponseBody(name='body'),
}

async function batchAddThingTopo(request: BatchAddThingTopoRequest): BatchAddThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindDeviceToEdgeInstanceWithDriverRequest {
  driverId: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotIds: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='BFFA9519-6AF1-4D15-AFAF-FD412714C1BE'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody(name='body'),
}

async function batchBindDeviceToEdgeInstanceWithDriver(request: BatchBindDeviceToEdgeInstanceWithDriverRequest): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindDeviceToEdgeInstanceWithDriver', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindDevicesIntoProjectRequest {
  devices: [ 
    {
      deviceName: string(name='DeviceName', example='Ee2******'),
      productKey: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='Devices', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a12******', position='Body'),
}

model BatchBindDevicesIntoProjectResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindDevicesIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindDevicesIntoProjectResponseBody(name='body'),
}

async function batchBindDevicesIntoProject(request: BatchBindDevicesIntoProjectRequest): BatchBindDevicesIntoProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindDevicesIntoProject', 'POST', '/', 'json', true, 'form', request);
}

model BatchBindProductsIntoProjectRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  productKeys: [ string ](name='ProductKeys', example='a1BwAGV****', position='Body'),
  projectId: string(name='ProjectId', example='a123********', position='Body'),
}

model BatchBindProductsIntoProjectResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindProductsIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindProductsIntoProjectResponseBody(name='body'),
}

async function batchBindProductsIntoProject(request: BatchBindProductsIntoProjectRequest): BatchBindProductsIntoProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindProductsIntoProject', 'POST', '/', 'json', true, 'form', request);
}

model BatchCheckDeviceNamesRequest {
  deviceName?: [ string ](name='DeviceName', example='light', position='Query'),
  deviceNameList?: [ 
    {
      deviceName?: string(name='DeviceName', example='light1'),
      deviceNickname?: string(name='DeviceNickname'),
    }
  ](name='DeviceNameList', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model BatchCheckDeviceNamesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='InvalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceNicknameList?: {
      invalidDeviceNickname?: [ string ](name='InvalidDeviceNickname')
    }(name='InvalidDeviceNicknameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckDeviceNamesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCheckDeviceNamesResponseBody(name='body'),
}

async function batchCheckDeviceNames(request: BatchCheckDeviceNamesRequest): BatchCheckDeviceNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCheckDeviceNames', 'POST', '/', 'json', false, 'json', request);
}

model BatchCheckImportDeviceRequest {
  deviceList: [ 
    {
      deviceName: string(name='DeviceName', example='light'),
      deviceSecret: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
      sn?: string(name='Sn', example='QC4******001'),
    }
  ](name='DeviceList', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model BatchCheckImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidDeviceNameList?: [ string ](name='InvalidDeviceNameList'),
    invalidDeviceSecretList?: [ string ](name='InvalidDeviceSecretList'),
    invalidSnList?: [ string ](name='InvalidSnList'),
    repeatedDeviceNameList?: [ string ](name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCheckImportDeviceResponseBody(name='body'),
}

async function batchCheckImportDevice(request: BatchCheckImportDeviceRequest): BatchCheckImportDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCheckImportDevice', 'POST', '/', 'json', false, 'json', request);
}

model BatchCheckVehicleDeviceRequest {
  deviceList: [ 
    {
      deviceId?: string(name='DeviceId', example='di0001'),
      deviceModel: string(name='DeviceModel', example='dm0001'),
      manufacturer: string(name='Manufacturer', example='mf0001'),
    }
  ](name='DeviceList', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1Bw****', position='Query'),
}

model BatchCheckVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidDeviceIdList?: [ string ](name='InvalidDeviceIdList'),
    invalidDeviceModelList?: [ string ](name='InvalidDeviceModelList'),
    invalidManufacturerList?: [ string ](name='InvalidManufacturerList'),
    repeatedDeviceIdList?: [ string ](name='RepeatedDeviceIdList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCheckVehicleDeviceResponseBody(name='body'),
}

async function batchCheckVehicleDevice(request: BatchCheckVehicleDeviceRequest): BatchCheckVehicleDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCheckVehicleDevice', 'POST', '/', 'json', false, 'json', request);
}

model BatchClearEdgeInstanceDeviceConfigRequest {
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotIds: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchClearEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='0BC2AA1C-E4D0-4E78-A70F-08C9A90686B0'),
  success?: boolean(name='Success', example='true'),
}

model BatchClearEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchClearEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchClearEdgeInstanceDeviceConfig(request: BatchClearEdgeInstanceDeviceConfigRequest): BatchClearEdgeInstanceDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchClearEdgeInstanceDeviceConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchCreateSoundCodeLabelRequest {
  description?: string(name='Description', example='test', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  total: int32(name='Total', example='20', minimum=1, maximum=200, position='Body'),
}

model BatchCreateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreateSoundCodeLabelResponseBody(name='body'),
}

async function batchCreateSoundCodeLabel(request: BatchCreateSoundCodeLabelRequest): BatchCreateSoundCodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateSoundCodeLabel', 'POST', '/', 'json', true, 'form', request);
}

model BatchCreateSoundCodeLabelWithLabelsRequest {
  description?: string(name='Description', example='test', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  labels: [ string ](name='Labels', example='test', position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model BatchCreateSoundCodeLabelWithLabelsResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateSoundCodeLabelWithLabelsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreateSoundCodeLabelWithLabelsResponseBody(name='body'),
}

async function batchCreateSoundCodeLabelWithLabels(request: BatchCreateSoundCodeLabelWithLabelsRequest): BatchCreateSoundCodeLabelWithLabelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateSoundCodeLabelWithLabels', 'POST', '/', 'json', true, 'form', request);
}

model BatchDeleteDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName: string(name='DeviceName', example='ZHuPo6sZzv7pOzYh****'),
      productKey: string(name='ProductKey', example='a1kORrK****'),
    }
  ](name='Device', position='Query'),
  groupId: string(name='GroupId', example='W16X8Tvdosec****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchDeleteDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount', example='2'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='8739385E-143F-4389-B900-B7DF9174CE0D'),
  success?: boolean(name='Success', example='true'),
  successDeviceCount?: int32(name='SuccessDeviceCount', example='2'),
  validDeviceCount?: int32(name='ValidDeviceCount', example='2'),
}

model BatchDeleteDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDeviceGroupRelationsResponseBody(name='body'),
}

async function batchDeleteDeviceGroupRelations(request: BatchDeleteDeviceGroupRelationsRequest): BatchDeleteDeviceGroupRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteDeviceGroupRelations', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteEdgeInstanceChannelRequest {
  channelIds: [ string ](name='ChannelIds', example='BE0BD49EF5EF4D119D09CC1B25******', position='Query'),
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchDeleteEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C95D46F1-0B13-46C7-9FA7-FDBFCF2F9F6F'),
  success?: boolean(name='Success', example='true'),
}

model BatchDeleteEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteEdgeInstanceChannelResponseBody(name='body'),
}

async function batchDeleteEdgeInstanceChannel(request: BatchDeleteEdgeInstanceChannelRequest): BatchDeleteEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetDeviceBindStatusRequest {
  iotIds: [ string ](name='IotIds', example='sjI0Sd124XFYyjBYMiYO******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchGetDeviceBindStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      bindStatus?: int32(name='BindStatus', example='1'),
      instanceId?: string(name='InstanceId'),
      iotId?: string(name='IotId', example='sjI0Sd124XFYyjBYMiYO******'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B1DF865D-2474-4CD5-9B7E-59B06D204CBF'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetDeviceBindStatusResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetDeviceBindStatusResponseBody(name='body'),
}

async function batchGetDeviceBindStatus(request: BatchGetDeviceBindStatusRequest): BatchGetDeviceBindStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetDeviceBindStatus', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetDeviceStateRequest {
  deviceName?: [ string ](name='DeviceName', example='light', position='Query'),
  iotId?: [ string ](name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model BatchGetDeviceStateResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceStatusList?: {
    deviceStatus?: [ 
    {
      asAddress?: string(name='AsAddress', example='192.0.2.1'),
      deviceId?: string(name='DeviceId', example='dwnS41bhNxjslDAI****'),
      deviceName?: string(name='DeviceName', example='light'),
      iotId?: string(name='IotId', example='dwnS41bhNxjslDAI****000100'),
      lastOnlineTime?: string(name='LastOnlineTime', example='2020-01-17 16:19:11'),
      status?: string(name='Status', example='OFFLINE'),
    }
  ](name='DeviceStatus')
  }(name='DeviceStatusList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetDeviceStateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetDeviceStateResponseBody(name='body'),
}

async function batchGetDeviceState(request: BatchGetDeviceStateRequest): BatchGetDeviceStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetDeviceState', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeDriverRequest {
  driverIds: [ string ](name='DriverIds', example='fec565038d7544978d9aed5c1a******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='ot_instc_pu****_c*-v64********', position='Query'),
}

model BatchGetEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  driverList?: [ 
    {
      cpuArch?: string(name='CpuArch', example='x86-64'),
      driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
      driverName?: string(name='DriverName', example='MyLedDriver'),
      driverProtocol?: string(name='DriverProtocol', example='customize'),
      gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
      gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
      isBuiltIn?: boolean(name='IsBuiltIn', example='false'),
      runtime?: string(name='Runtime', example='c'),
      type?: int32(name='Type', example='1'),
    }
  ](name='DriverList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='A42CAB88-6E26-4DC7-9A35-584D17E82DE0'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeDriverResponseBody(name='body'),
}

async function batchGetEdgeDriver(request: BatchGetEdgeDriverRequest): BatchGetEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceChannelRequest {
  channelIds: [ string ](name='ChannelIds', example='BE0BD49EF5EF4D119D09CC1B25******', position='Query'),
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchGetEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    channel?: [ 
    {
      channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
      channelName?: string(name='ChannelName', example='le_name0'),
      configList?: {
        config?: [ 
        {
          configId?: string(name='ConfigId', example='5d6016035c1a451daf174b1051******'),
          content?: string(name='Content', example='{\\"protocol\\":\\"TCP\\", \\"ip\\":\\"1.2.3.4\\", \\"port\\":1}'),
          format?: string(name='Format', example='JSON'),
          key?: string(name='Key', example='key1'),
        }
      ](name='Config')
      }(name='ConfigList'),
    }
  ](name='Channel')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='5B86570E-C1A7-4569-BF7B-F7F09EB35BEB'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceChannel(request: BatchGetEdgeInstanceChannelRequest): BatchGetEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDeviceChannelRequest {
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotIds: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchGetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceChannelList?: [ 
    {
      channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
      channelName?: string(name='ChannelName', example='le_name_update'),
      iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN0******'),
    }
  ](name='DeviceChannelList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='029BC40B-8353-48B3-94C3-7ABF296F0AE5'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceChannel(request: BatchGetEdgeInstanceDeviceChannelRequest): BatchGetEdgeInstanceDeviceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDeviceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDeviceConfigRequest {
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotIds: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fDl****000101', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchGetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceConfigList?: [ 
    {
      config?: {
        content?: string(name='Content', example='{\\"test\\": \\"device_config_demo\\"}'),
        format?: string(name='Format', example='JSON'),
      }(name='Config'),
      iotId?: string(name='IotId', example='sjI0Sd124XFYyjBY****000101'),
    }
  ](name='DeviceConfigList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4A102C2-36A5-4964-9694-0F8EFF95CCA8'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceConfig(request: BatchGetEdgeInstanceDeviceConfigRequest): BatchGetEdgeInstanceDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDeviceConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDeviceDriverRequest {
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotIds: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchGetEdgeInstanceDeviceDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceDriverList?: [ 
    {
      driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
      iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN******'),
    }
  ](name='DeviceDriverList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E8D82F7A-0F84-4BD3-AE8A-5444A5B42800'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceDriverResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceDriver(request: BatchGetEdgeInstanceDeviceDriverRequest): BatchGetEdgeInstanceDeviceDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDeviceDriver', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDriverConfigsRequest {
  driverIds: [ string ](name='DriverIds', example='021d154d2a2f4dd7a489773d9e04****', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchGetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', example='Success'),
  driverConfigList?: [ 
    {
      configList?: [ 
        {
          configId?: string(name='ConfigId', example='dac71722ceac4a299dbf3e8dc3c8****'),
          content?: string(name='Content', example='{\\"test\\":123}'),
          format?: string(name='Format', example='JSON'),
          key?: string(name='Key', example='key1'),
        }
      ](name='ConfigList'),
      driverId?: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****'),
    }
  ](name='DriverConfigList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D6113390-F507-458B-8544-7B01F945630B'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function batchGetEdgeInstanceDriverConfigs(request: BatchGetEdgeInstanceDriverConfigsRequest): BatchGetEdgeInstanceDriverConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDriverConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchImportDeviceRequest {
  deviceList: [ 
    {
      deviceName: string(name='DeviceName', example='device1'),
      deviceSecret: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
      sn?: string(name='Sn', example='QC4******001'),
    }
  ](name='DeviceList', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model BatchImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='invalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceSecretList?: {
      invalidDeviceSecret?: [ string ](name='invalidDeviceSecret')
    }(name='InvalidDeviceSecretList'),
    invalidSnList?: {
      invalidSn?: [ string ](name='invalidSn')
    }(name='InvalidSnList'),
    repeatedDeviceNameList?: {
      repeatedDeviceName?: [ string ](name='repeatedDeviceName')
    }(name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchImportDeviceResponseBody(name='body'),
}

async function batchImportDevice(request: BatchImportDeviceRequest): BatchImportDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchImportDevice', 'POST', '/', 'json', false, 'json', request);
}

model BatchImportVehicleDeviceRequest {
  deviceList: [ 
    {
      deviceId?: string(name='DeviceId', example='di0001'),
      deviceModel: string(name='DeviceModel', example='dm0001'),
      manufacturer: string(name='Manufacturer', example='mf0001'),
    }
  ](name='DeviceList', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1Bw****', position='Query'),
}

model BatchImportVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchImportVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchImportVehicleDeviceResponseBody(name='body'),
}

async function batchImportVehicleDevice(request: BatchImportVehicleDeviceRequest): BatchImportVehicleDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchImportVehicleDevice', 'POST', '/', 'json', false, 'json', request);
}

model BatchPubRequest {
  deviceName: [ string ](name='DeviceName', example='newdevice1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  messageContent: string(name='MessageContent', example='eyJ0ZXN0IjoidGFzayBiYXRjaHB1YiBicm9hZGNhc3QifQ==', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  qos?: int32(name='Qos', example='0', position='Query'),
  topicShortName: string(name='TopicShortName', example='get', position='Query'),
}

model BatchPubResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchPubResponse = {
  headers: map[string]string(name='headers'),
  body: BatchPubResponseBody(name='body'),
}

async function batchPub(request: BatchPubRequest): BatchPubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchPub', 'POST', '/', 'json', false, 'json', request);
}

model BatchQueryDeviceDetailRequest {
  deviceName: [ string ](name='DeviceName', example='light', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model BatchQueryDeviceDetailResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
      firmwareVersion?: string(name='FirmwareVersion', example='V1.0.0.0'),
      gmtActive?: string(name='GmtActive', example='2019-06-21 20:33:00'),
      gmtCreate?: string(name='GmtCreate', example='2019-06-21 20:31:42'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname'),
      nodeType?: int32(name='NodeType', example='0'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      productName?: string(name='ProductName'),
      region?: string(name='Region', example='cn-shanghai'),
      status?: string(name='Status', example='ONLINE'),
      utcActive?: string(name='UtcActive', example='2019-06-21T12:31:42.000Z'),
      utcCreate?: string(name='UtcCreate', example='2019-06-21T12:31:42.000Z'),
    }
  ](name='Data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchQueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: BatchQueryDeviceDetailResponseBody(name='body'),
}

async function batchQueryDeviceDetail(request: BatchQueryDeviceDetailRequest): BatchQueryDeviceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchQueryDeviceDetail', 'POST', '/', 'json', false, 'json', request);
}

model BatchRegisterDeviceRequest {
  count: int32(name='Count', example='100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model BatchRegisterDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchRegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRegisterDeviceResponseBody(name='body'),
}

async function batchRegisterDevice(request: BatchRegisterDeviceRequest): BatchRegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRegisterDevice', 'POST', '/', 'json', false, 'json', request);
}

model BatchRegisterDeviceWithApplyIdRequest {
  applyId: long(name='ApplyId', example='1295006', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model BatchRegisterDeviceWithApplyIdResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchRegisterDeviceWithApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRegisterDeviceWithApplyIdResponseBody(name='body'),
}

async function batchRegisterDeviceWithApplyId(request: BatchRegisterDeviceWithApplyIdRequest): BatchRegisterDeviceWithApplyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRegisterDeviceWithApplyId', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetEdgeInstanceDeviceChannelRequest {
  channelId: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******', position='Query'),
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotIds: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchSetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B0325EA9-671C-460B-B0F3-83F41CFF855B'),
  success?: boolean(name='Success', example='true'),
}

model BatchSetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceChannel(request: BatchSetEdgeInstanceDeviceChannelRequest): BatchSetEdgeInstanceDeviceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetEdgeInstanceDeviceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetEdgeInstanceDeviceConfigRequest {
  deviceConfigs: [ 
    {
      content: string(name='Content', example='{"test": "device_config_demo"}'),
      iotId: string(name='IotId', example='sjI0Sd124XFYyjBY****000101'),
    }
  ](name='DeviceConfigs', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchSetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='748659E2-EDC9-4E3E-BF9D-06F16995CF66'),
  success?: boolean(name='Success', example='true'),
}

model BatchSetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceConfig(request: BatchSetEdgeInstanceDeviceConfigRequest): BatchSetEdgeInstanceDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetEdgeInstanceDeviceConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindDeviceFromEdgeInstanceRequest {
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotIds: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchUnbindDeviceFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='34755DC3-2809-4AE2-BAD8-7B81ED69D570'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindDeviceFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindDeviceFromEdgeInstanceResponseBody(name='body'),
}

async function batchUnbindDeviceFromEdgeInstance(request: BatchUnbindDeviceFromEdgeInstanceRequest): BatchUnbindDeviceFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindDeviceFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindProjectDevicesRequest {
  devices: [ 
    {
      deviceName: string(name='DeviceName', example='Ee2******'),
      productKey: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='Devices', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a12******', position='Body'),
}

model BatchUnbindProjectDevicesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindProjectDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindProjectDevicesResponseBody(name='body'),
}

async function batchUnbindProjectDevices(request: BatchUnbindProjectDevicesRequest): BatchUnbindProjectDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindProjectDevices', 'POST', '/', 'json', true, 'form', request);
}

model BatchUnbindProjectProductsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  productKeys: [ string ](name='ProductKeys', example='a1BwAGV****', position='Body'),
  projectId: string(name='ProjectId', example='a123********', position='Body'),
}

model BatchUnbindProjectProductsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindProjectProductsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindProjectProductsResponseBody(name='body'),
}

async function batchUnbindProjectProducts(request: BatchUnbindProjectProductsRequest): BatchUnbindProjectProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindProjectProducts', 'POST', '/', 'json', true, 'form', request);
}

model BatchUpdateDeviceNicknameRequest {
  deviceNicknameInfo: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname', example='AliyunDataCenter'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='DeviceNicknameInfo', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BatchUpdateDeviceNicknameResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUpdateDeviceNicknameResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateDeviceNicknameResponseBody(name='body'),
}

async function batchUpdateDeviceNickname(request: BatchUpdateDeviceNicknameRequest): BatchUpdateDeviceNicknameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUpdateDeviceNickname', 'POST', '/', 'json', false, 'json', request);
}

model BindApplicationToEdgeInstanceRequest {
  applicationId: string(name='ApplicationId', example='361368ba5a094da9bf5625d092******', position='Query'),
  applicationVersion: string(name='ApplicationVersion', example='3.7', position='Query'),
  instanceId: string(name='InstanceId', example='Tb4r9k3GWHJFWv******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model BindApplicationToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='86B23D5F-BF86-4F29-82E2-686D7B4D9AAA'),
  success?: boolean(name='Success', example='true'),
}

model BindApplicationToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindApplicationToEdgeInstanceResponseBody(name='body'),
}

async function bindApplicationToEdgeInstance(request: BindApplicationToEdgeInstanceRequest): BindApplicationToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindApplicationToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindDriverToEdgeInstanceRequest {
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc959228****', position='Query'),
  driverVersion?: string(name='DriverVersion', example='2.0.0', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  orderId?: string(name='OrderId', example='11123458765****', position='Query'),
}

model BindDriverToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model BindDriverToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindDriverToEdgeInstanceResponseBody(name='body'),
}

async function bindDriverToEdgeInstance(request: BindDriverToEdgeInstanceRequest): BindDriverToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDriverToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindGatewayToEdgeInstanceRequest {
  deviceName?: string(name='DeviceName', example='device1', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotId?: string(name='IotId', example='4z819VQHk6VSLmmBJfrf0010******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1mAdeG****', position='Query'),
}

model BindGatewayToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model BindGatewayToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindGatewayToEdgeInstanceResponseBody(name='body'),
}

async function bindGatewayToEdgeInstance(request: BindGatewayToEdgeInstanceRequest): BindGatewayToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindGatewayToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindLicenseDeviceRequest {
  deviceNameList?: [ string ](name='DeviceNameList', position='Body'),
  iotIdList?: [ string ](name='IotIdList', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***', position='Query'),
  licenseCode: string(name='LicenseCode', example='720P', position='Query'),
  productKey: string(name='ProductKey', example='a2YwD23***', position='Query'),
}

model BindLicenseDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    checkProgressId?: string(name='CheckProgressId', example='123***'),
    failSum?: long(name='FailSum', example='2'),
    progress?: int32(name='Progress', example='100'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***'),
    successSum?: long(name='SuccessSum', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model BindLicenseDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BindLicenseDeviceResponseBody(name='body'),
}

async function bindLicenseDevice(request: BindLicenseDeviceRequest): BindLicenseDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindLicenseDevice', 'POST', '/', 'json', true, 'form', request);
}

model BindLicenseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-23***', position='Query'),
  licenseCode: string(name='LicenseCode', example='480P', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV***', position='Query'),
}

model BindLicenseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model BindLicenseProductResponse = {
  headers: map[string]string(name='headers'),
  body: BindLicenseProductResponseBody(name='body'),
}

async function bindLicenseProduct(request: BindLicenseProductRequest): BindLicenseProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindLicenseProduct', 'POST', '/', 'json', false, 'json', request);
}

model BindRoleToEdgeInstanceRequest {
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  roleArn: string(name='RoleArn', example='acs:ram::176********:role/iotedgerole', position='Query'),
  roleName: string(name='RoleName', example='IoTEdgeRole', position='Query'),
}

model BindRoleToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3DE428F8-22AF-4B37-8FEC-E64CFBE4A125'),
  success?: boolean(name='Success', example='true'),
}

model BindRoleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindRoleToEdgeInstanceResponseBody(name='body'),
}

async function bindRoleToEdgeInstance(request: BindRoleToEdgeInstanceRequest): BindRoleToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindRoleToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindSceneRuleToEdgeInstanceRequest {
  instanceId: string(name='InstanceId', example='llL44UVXUqb9m5******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: string(name='RuleId', example='f041397879ad4d89822811d741******', position='Query'),
}

model BindSceneRuleToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA909EK'),
  success?: boolean(name='Success', example='true'),
}

model BindSceneRuleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindSceneRuleToEdgeInstanceResponseBody(name='body'),
}

async function bindSceneRuleToEdgeInstance(request: BindSceneRuleToEdgeInstanceRequest): BindSceneRuleToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindSceneRuleToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model CancelJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobId: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001', position='Query'),
}

model CancelJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='C25255EA-9F6E-4E04-85FE-AC1E9C136EBB'),
  success?: boolean(name='Success', example='true'),
}

model CancelJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelJobResponseBody(name='body'),
}

async function cancelJob(request: CancelJobRequest): CancelJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelOTAStrategyByJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  jobId: string(name='JobId', example='HvKuBpuk3rdk6E92CP****0200', position='Query'),
}

model CancelOTAStrategyByJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CancelOTAStrategyByJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTAStrategyByJobResponseBody(name='body'),
}

async function cancelOTAStrategyByJob(request: CancelOTAStrategyByJobRequest): CancelOTAStrategyByJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOTAStrategyByJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelOTATaskByDeviceRequest {
  deviceName: [ string ](name='DeviceName', example='device1', position='Query'),
  firmwareId: string(name='FirmwareId', example='T0F5b5tpFnHQrgfk****030100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  jobId?: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****', position='Query'),
  productKey: string(name='ProductKey', example='a1V4kde****', position='Query'),
}

model CancelOTATaskByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
}

model CancelOTATaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTATaskByDeviceResponseBody(name='body'),
}

async function cancelOTATaskByDevice(request: CancelOTATaskByDeviceRequest): CancelOTATaskByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOTATaskByDevice', 'POST', '/', 'json', false, 'json', request);
}

model CancelOTATaskByJobRequest {
  cancelInProgressTask?: boolean(name='CancelInProgressTask', example='false', position='Query'),
  cancelNotifiedTask?: boolean(name='CancelNotifiedTask', example='false', position='Query'),
  cancelQueuedTask?: boolean(name='CancelQueuedTask', example='false', position='Query'),
  cancelScheduledTask?: boolean(name='CancelScheduledTask', example='false', position='Query'),
  cancelUnconfirmedTask?: boolean(name='CancelUnconfirmedTask', example='false', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  jobId: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****', position='Query'),
}

model CancelOTATaskByJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CancelOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTATaskByJobResponseBody(name='body'),
}

async function cancelOTATaskByJob(request: CancelOTATaskByJobRequest): CancelOTATaskByJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOTATaskByJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model CancelReleaseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CancelReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  body: CancelReleaseProductResponseBody(name='body'),
}

async function cancelReleaseProduct(request: CancelReleaseProductRequest): CancelReleaseProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelReleaseProduct', 'POST', '/', 'json', false, 'json', request);
}

model CheckBindLicenseDeviceProgressRequest {
  checkProgressId: string(name='CheckProgressId', example='23****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2ws****', position='Query'),
  licenseCode: string(name='LicenseCode', example='720P', position='Query'),
  productKey: string(name='ProductKey', example='uhf5****', position='Query'),
}

model CheckBindLicenseDeviceProgressResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    failSum?: long(name='FailSum', example='1'),
    progress?: int32(name='Progress', example='80'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***.oss-***.aliyuncs.com/license_device_***/***/d***h/c***.csv?Expires=16***&OSSAccessKeyId=L***&Signature=***'),
    successSum?: long(name='SuccessSum', example='9'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CheckBindLicenseDeviceProgressResponse = {
  headers: map[string]string(name='headers'),
  body: CheckBindLicenseDeviceProgressResponseBody(name='body'),
}

async function checkBindLicenseDeviceProgress(request: CheckBindLicenseDeviceProgressRequest): CheckBindLicenseDeviceProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckBindLicenseDeviceProgress', 'POST', '/', 'json', false, 'json', request);
}

model ClearDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  identifies?: [ string ](name='Identifies', example='temperature', position='Body'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model ClearDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    versions?: string(name='Versions', example='{\\"temperature\\":0}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ClearDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: ClearDeviceDesiredPropertyResponseBody(name='body'),
}

async function clearDeviceDesiredProperty(request: ClearDeviceDesiredPropertyRequest): ClearDeviceDesiredPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearDeviceDesiredProperty', 'POST', '/', 'json', true, 'form', request);
}

model ClearEdgeInstanceDriverConfigsRequest {
  driverId: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model ClearEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='DF6B728B-ADD7-4C41-88C3-D21B4CA82CF1'),
  success?: boolean(name='Success', example='true'),
}

model ClearEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ClearEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function clearEdgeInstanceDriverConfigs(request: ClearEdgeInstanceDriverConfigsRequest): ClearEdgeInstanceDriverConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearEdgeInstanceDriverConfigs', 'POST', '/', 'json', false, 'json', request);
}

model CloseDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***', position='Query'),
  tunnelId: string(name='TunnelId', example='d4098041-a560-***', position='Query'),
}

model CloseDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CloseDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: CloseDeviceTunnelResponseBody(name='body'),
}

async function closeDeviceTunnel(request: CloseDeviceTunnelRequest): CloseDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model CloseEdgeInstanceDeploymentRequest {
  instanceId: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model CloseEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3C969586-3DD1-41A7-9B8E-E8B134CA6600'),
  success?: boolean(name='Success', example='true'),
}

model CloseEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CloseEdgeInstanceDeploymentResponseBody(name='body'),
}

async function closeEdgeInstanceDeployment(request: CloseEdgeInstanceDeploymentRequest): CloseEdgeInstanceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseEdgeInstanceDeployment', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmOTATaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64********', position='Query'),
  taskId: [ string ](name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****', position='Query'),
}

model ConfirmOTATaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmOTATaskResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmOTATaskResponseBody(name='body'),
}

async function confirmOTATask(request: ConfirmOTATaskRequest): ConfirmOTATaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmOTATask', 'POST', '/', 'json', false, 'json', request);
}

model CopyThingModelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****', position='Query'),
  sourceModelVersion?: string(name='SourceModelVersion', example='V1.0.0', position='Query'),
  sourceProductKey: string(name='SourceProductKey', example='a1BwAGV****', position='Query'),
  targetProductKey: string(name='TargetProductKey', example='a1BwwG0****', position='Query'),
}

model CopyThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CopyThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: CopyThingModelResponseBody(name='body'),
}

async function copyThingModel(request: CopyThingModelRequest): CopyThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyThingModel', 'POST', '/', 'json', false, 'json', request);
}

model CountSpeechBroadcastHourRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Body'),
  queryDateTimeHour: string(name='QueryDateTimeHour', example='2020090919', position='Query'),
  shareTaskCode: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****', position='Body'),
}

model CountSpeechBroadcastHourResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  data?: int32(name='Data', example='1000'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CountSpeechBroadcastHourResponse = {
  headers: map[string]string(name='headers'),
  body: CountSpeechBroadcastHourResponseBody(name='body'),
}

async function countSpeechBroadcastHour(request: CountSpeechBroadcastHourRequest): CountSpeechBroadcastHourResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CountSpeechBroadcastHour', 'POST', '/', 'json', true, 'form', request);
}

model CreateConsumerGroupRequest {
  groupName: string(name='GroupName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupSubscribeRelationRequest {
  consumerGroupId: string(name='ConsumerGroupId', example='nJRaJPn5U1JITGfjBO9l00****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1fyXVF****', position='Query'),
}

model CreateConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function createConsumerGroupSubscribeRelation(request: CreateConsumerGroupSubscribeRelationRequest): CreateConsumerGroupSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroupSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataAPIServiceRequest {
  apiPath: string(name='ApiPath', example='device/getDeviceCountByStatus', position='Body'),
  desc?: string(name='Desc', position='Body'),
  displayName: string(name='DisplayName', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  originSql: string(name='OriginSql', example='SELECT COUNT(iot_id) AS deviceCount FROM ${system.device} WHERE status=1', position='Body'),
  requestParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example', example='dksiaiek23s'),
      name?: string(name='Name', example='status'),
      required?: boolean(name='Required', example='true'),
      type?: string(name='Type', example='VARCHAR'),
    }
  ](name='RequestParam', position='Body'),
  responseParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example', example='100'),
      name?: string(name='Name', example='deviceCount'),
      required?: boolean(name='Required', example='true'),
      type?: string(name='Type', example='INTEGER'),
    }
  ](name='ResponseParam', position='Body'),
  templateSql: string(name='TemplateSql', example='SELECT COUNT(iot_id) AS deviceCount FROM ${system.device} WHERE status=${status}', position='Body'),
}

model CreateDataAPIServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    createTime?: long(name='CreateTime', example='1557839468865'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1557839468865'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataAPIServiceResponseBody(name='body'),
}

async function createDataAPIService(request: CreateDataAPIServiceRequest): CreateDataAPIServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataAPIService', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataSourceItemRequest {
  dataSourceId: long(name='DataSourceId', example='1002', minimum=0, maximum=999999999999, position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t***', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  scopeType?: string(name='ScopeType', position='Query'),
  topic: string(name='Topic', example='/as/mqtt/status/gy***z/+', position='Query'),
}

model CreateDataSourceItemResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataSourceItemResponseBody(name='body'),
}

async function createDataSourceItem(request: CreateDataSourceItemRequest): CreateDataSourceItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSourceItem', 'POST', '/', 'json', false, 'json', request);
}

model CreateDestinationRequest {
  configuration: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}', position='Query'),
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  name: string(name='Name', example='DataPurpose', position='Query'),
  type: string(name='Type', example='REPUBLISH', position='Query'),
}

model CreateDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destination?: {
    configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
    destinationId?: long(name='DestinationId', example='1003'),
    isFailover?: boolean(name='IsFailover', example='false'),
    name?: string(name='Name', example='DataPurpose'),
    type?: string(name='Type', example='REPUBLISH'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='Destination'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CreateDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDestinationResponseBody(name='body'),
}

async function createDestination(request: CreateDestinationRequest): CreateDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDestination', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceDistributeJobRequest {
  deviceName: [ string ](name='DeviceName', example='RepeatList', position='Body'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Body'),
  sourceInstanceId: string(name='SourceInstanceId', example='iot-060***', position='Body'),
  strategy: int32(name='Strategy', example='0', position='Body'),
  targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com', position='Body'),
  targetInstanceConfig: [ 
    {
      targetInstanceId: string(name='TargetInstanceId', example='iot-cn-6ja***'),
    }
  ](name='TargetInstanceConfig', position='Body'),
  targetUid?: string(name='TargetUid', example='198***', position='Body'),
}

model CreateDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceDistributeJobResponseBody(name='body'),
}

async function createDeviceDistributeJob(request: CreateDeviceDistributeJobRequest): CreateDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceDistributeJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateDeviceDynamicGroupRequest {
  dynamicGroupExpression: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"', position='Query'),
  groupDesc?: string(name='GroupDesc', example='test', position='Query'),
  groupName: string(name='GroupName', example='grouptest', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-***', position='Query'),
}

model CreateDeviceDynamicGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dynamicGroupExpression?: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"'),
    groupDesc?: string(name='GroupDesc', example='test'),
    groupId?: string(name='GroupId', example='HtMLECKbdJQL***'),
    groupName?: string(name='GroupName', example='grouptest'),
    utcCreate?: string(name='UtcCreate', example='2021-10-17T11:19:31.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0634D'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceDynamicGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceDynamicGroupResponseBody(name='body'),
}

async function createDeviceDynamicGroup(request: CreateDeviceDynamicGroupRequest): CreateDeviceDynamicGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceDynamicGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', example='Group test', position='Query'),
  groupName: string(name='GroupName', example='grouptest', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  superGroupId?: string(name='SuperGroupId', example='SuperGroupId1', position='Query'),
}

model CreateDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    groupDesc?: string(name='GroupDesc', example='Group test'),
    groupId?: string(name='GroupId', example='HtMLECKbdJQL****'),
    groupName?: string(name='GroupName', example='grouptest'),
    utcCreate?: string(name='UtcCreate', example='2018-10-17T11:19:31.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0634D'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceGroupResponseBody(name='body'),
}

async function createDeviceGroup(request: CreateDeviceGroupRequest): CreateDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceTunnelRequest {
  description?: string(name='Description', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv***00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v64***', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV***', position='Query'),
  udi?: string(name='Udi', example='reboot', position='Query'),
}

model CreateDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    sourceAccessToken?: string(name='SourceAccessToken', example='521c43e4-a6da-***'),
    sourceURI?: string(name='SourceURI', example='wss://secure-tunnel-ws.iot.aliyun.test/tunnel/1834248a-37b7-4fd2-***/source'),
    tunnelId?: string(name='TunnelId', example='d4098041-***'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceTunnelResponseBody(name='body'),
}

async function createDeviceTunnel(request: CreateDeviceTunnelRequest): CreateDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model CreateDownloadDataJobRequest {
  context?: map[string]any(name='Context', shrink='json', position='Body'),
  downloadDataType: string(name='DownloadDataType', example='TABLE', position='Query'),
  endTime?: long(name='EndTime', example='1658406464534', position='Query'),
  fileConfig?: map[string]any(name='FileConfig', example='{"fileName":"fileName01"}', shrink='json', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******', position='Body'),
  startTime?: long(name='StartTime', example='1658332800000', position='Query'),
  tableName: string(name='TableName', example='product_info', position='Query'),
}

model CreateDownloadDataJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    asyncExecute?: boolean(name='AsyncExecute', example='true'),
    beginTime?: long(name='BeginTime', example='1658406464534'),
    csvFileName?: string(name='CsvFileName', example='test_download_file'),
    csvUrl?: string(name='CsvUrl', example='https://oss-xxxx-xxxx.xxxx......'),
    datasetId?: string(name='DatasetId', example='a23fd23dfaf2'),
    endTime?: long(name='EndTime', example='1658406465000'),
    header?: [ 
      {
        alias?: string(name='Alias', example='user_name_alias'),
        dataPrecision?: string(name='DataPrecision'),
        dimDateClass?: string(name='DimDateClass', example='DAY'),
        fieldName?: string(name='FieldName', example='user_name'),
        fieldType?: string(name='FieldType', example='INTEGER'),
        geoClass?: string(name='GeoClass', example='{xxx:xxxx}'),
        timeClass?: string(name='TimeClass', example='HOUR/DAY/MONTH'),
        typeClass?: string(name='TypeClass', example='date'),
      }
    ](name='Header'),
    longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    previewSize?: int32(name='PreviewSize', example='100'),
    querySetting?: {
      astExpr?: [ 
        {
          expr?: string(name='Expr', example='{"header":{"fieldName":"xxx"},"operator":"GreaterThanOrEqual","value":12345}'),
          exprType?: string(name='ExprType', example='binaryOp'),
        }
      ](name='AstExpr'),
      selectedHeaders?: [ 
        {
          alias?: string(name='Alias', example='user_name_alias'),
          dimDateClass?: string(name='DimDateClass', example='DAY'),
          fieldName?: string(name='FieldName', example='user_name'),
          fieldType?: string(name='FieldType', example='INTEGER'),
          geoClass?: string(name='GeoClass', example='{xxxx:xxxx}'),
          timeClass?: string(name='TimeClass', example='DAY'),
        }
      ](name='SelectedHeaders'),
    }(name='QuerySetting'),
    resultDataInString?: string(name='ResultDataInString', example='{["a":1]}'),
    status?: int32(name='Status', example='-1'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='no authorization.'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0643F'),
  success?: boolean(name='Success', example='true'),
}

model CreateDownloadDataJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDownloadDataJobResponseBody(name='body'),
}

async function createDownloadDataJob(request: CreateDownloadDataJobRequest): CreateDownloadDataJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDownloadDataJob', 'POST', '/', 'json', true, 'form', request);
}

model CreateEdgeDriverRequest {
  cpuArch?: string(name='CpuArch', example='x86-64', position='Query'),
  driverName: string(name='DriverName', example='MyLedDriver', position='Query'),
  driverProtocol: string(name='DriverProtocol', example='customize', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  isBuiltIn?: boolean(name='IsBuiltIn', example='false', position='Query'),
  runtime: string(name='Runtime', example='c', position='Query'),
}

model CreateEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='BB179FE4-94AB-41B0-AE8A-66DDB7B8B13A'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeDriverResponseBody(name='body'),
}

async function createEdgeDriver(request: CreateEdgeDriverRequest): CreateEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeDriverVersionRequest {
  argument?: string(name='Argument', example='-XX:+PrintGCDetails', position='Query'),
  configCheckRule?: string(name='ConfigCheckRule', example='{"deviceConfig":{"required":false},"driverConfig":{"required":false}}', position='Query'),
  containerConfig?: string(name='ContainerConfig', example='{"privileged":1,"devMappings":[],"volumeMappings":[],"hostNetworkMode":0,"portMappings":[]}', position='Query'),
  description?: string(name='Description', position='Query'),
  driverConfig?: string(name='DriverConfig', example='[{"format":"JSON","content":"{\\"defaultConfig\\":\\"this is default driver config demo\\"}"}]', position='Query'),
  driverId: string(name='DriverId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  driverVersion: string(name='DriverVersion', example='1.2.0', position='Query'),
  edgeVersion: string(name='EdgeVersion', example='2.0.0', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  sourceConfig?: string(name='SourceConfig', example='{"ossAddress":"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30c******/ck3n3koe200003h6zf******.zip"}', position='Query'),
}

model CreateEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='001ADA35-8846-4B6F-93E7-E5C076F8BB56'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeDriverVersionResponseBody(name='body'),
}

async function createEdgeDriverVersion(request: CreateEdgeDriverVersionRequest): CreateEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  name: string(name='Name', example='LinkIoTEdge_Node', position='Query'),
  spec?: int32(name='Spec', example='20', position='Query'),
  tags?: string(name='Tags', example='k1:v1,k2:v2', position='Query'),
}

model CreateEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceResponseBody(name='body'),
}

async function createEdgeInstance(request: CreateEdgeInstanceRequest): CreateEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceChannelRequest {
  channelName: string(name='ChannelName', example='le_name0', position='Query'),
  configs: [ 
    {
      content: string(name='Content', example='{"protocol":"TCP", "ip":"1.2.3.4", "port":1}'),
      format: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs', position='Query'),
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model CreateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='BE0BD49EF5EF4D119D09CC1B25******'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B34673EA-ECE7-44F5-BF01-40B5FAE633B6'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceChannelResponseBody(name='body'),
}

async function createEdgeInstanceChannel(request: CreateEdgeInstanceChannelRequest): CreateEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceDeploymentRequest {
  instanceId: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  type: string(name='Type', example='deploy', position='Query'),
}

model CreateEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  deploymentId?: string(name='DeploymentId', example='38d544b1222d45b4b425240167bf****'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C8293A57-6BBC-42FB-B093-BF304D5BF09C'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceDeploymentResponseBody(name='body'),
}

async function createEdgeInstanceDeployment(request: CreateEdgeInstanceDeploymentRequest): CreateEdgeInstanceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstanceDeployment', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', example='nF9oXo7kLRWQ********', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  name?: string(name='Name', example='le_lite2', position='Query'),
  sourceData?: string(name='SourceData', example='#', position='Query'),
  sourceType: string(name='SourceType', example='device', position='Query'),
  targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********', position='Query'),
  targetIotHubQos?: int32(name='TargetIotHubQos', example='0', position='Query'),
  targetType: string(name='TargetType', example='function', position='Query'),
  topicFilter?: string(name='TopicFilter', example='all', position='Query'),
}

model CreateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AC786033-00C5-4FD6-8435-F2807740D9FA'),
  routeId?: long(name='RouteId', example='123456'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function createEdgeInstanceMessageRouting(request: CreateEdgeInstanceMessageRoutingRequest): CreateEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeOssPreSignedAddressRequest {
  fileName: string(name='FileName', example='testfile.zip', position='Query'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  resourceId: string(name='ResourceId', example='df9b9f441*********4c90d0c21d14', position='Query'),
  resourceVersion: string(name='ResourceVersion', example='2.0.0', position='Query'),
  type: string(name='Type', example='DRIVER_VERSION_CONTENT', position='Query'),
}

model CreateEdgeOssPreSignedAddressResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    ossAddress?: string(name='OssAddress', example='http://xxxx.oss-cn-shanghai.aliyuncs.com/driver/a534d3b81*******8fe7da0/DRIVER_VERSION_CONTENT/df9b9f441*********4c90d0c21d14/2.0.0/1581586102750/driver_code.zip'),
    ossPreSignedAddress?: string(name='OssPreSignedAddress', example='http://xxxx.oss-cn-shanghai.aliyuncs.com/driver/a534d3b81*******8fe7da0/DRIVER_VERSION_CONTENT/df9b9f441*********4c90d0c21d14/2.0.0/1581586102750/driver_code.zip?Expires\\u003d1581586402\\u0026OSSAccessKeyId\\u003daS4MT0IYrP******\\u0026Signature\\u003dIUUjZ881H3rUoCOwjMXPmGbw******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='91E2BFA2-ECD7-4E11-B36B-66BCC4773922'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeOssPreSignedAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeOssPreSignedAddressResponseBody(name='body'),
}

async function createEdgeOssPreSignedAddress(request: CreateEdgeOssPreSignedAddressRequest): CreateEdgeOssPreSignedAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeOssPreSignedAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateJobRequest {
  description?: string(name='Description', example='jobDescription', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobDocument: string(name='JobDocument', example='{ "serviceIdentifier": "test_service", "params": { "key1": "value1", "key2": "value2" } }', position='Query'),
  jobFile?: map[string]any(name='JobFile', example='{   "fileKey":"5cc34***f9/tazJ***s",   "signMethod":"Sha256",   "sign":"***" }', shrink='json', position='Query'),
  jobName: string(name='JobName', example='oneJob', position='Query'),
  rolloutConfig?: map[string]any(name='RolloutConfig', example='{"maximumPerMinute": 1000}', shrink='json', position='Query'),
  scheduledTime?: long(name='ScheduledTime', example='1557062301656', position='Query'),
  targetConfig: map[string]any(name='TargetConfig', example='{"targetType":"PRODUCT_KEY","targetProduct":"a1j***3d"}', shrink='json', position='Query'),
  timeoutConfig?: map[string]any(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}', shrink='json', position='Query'),
  type: string(name='Type', example='INVOKE_SERVICE', position='Query'),
}

model CreateJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoRaNodesTaskRequest {
  deviceInfo: [ 
    {
      devEui?: string(name='DevEui', example='d896e0efff00****'),
      pinCode?: string(name='PinCode', example='123***'),
    }
  ](name='DeviceInfo', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model CreateLoRaNodesTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='62146'),
}

model CreateLoRaNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoRaNodesTaskResponseBody(name='body'),
}

async function createLoRaNodesTask(request: CreateLoRaNodesTaskRequest): CreateLoRaNodesTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoRaNodesTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTADynamicUpgradeJobRequest {
  downloadProtocol?: string(name='DownloadProtocol', example='HTTPS', position='Query'),
  dynamicMode?: int32(name='DynamicMode', example='1', position='Query'),
  firmwareId: string(name='FirmwareId', example='nx3xxVvFdwvn6dim50PY03****', position='Query'),
  groupId?: string(name='GroupId', example='IwOwQj7DJ***', position='Query'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  maximumPerMinute?: int32(name='MaximumPerMinute', example='1000', position='Query'),
  multiModuleMode?: boolean(name='MultiModuleMode', example='false', position='Query'),
  needConfirm?: boolean(name='NeedConfirm', example='false', position='Query'),
  needPush?: boolean(name='NeedPush', example='true', position='Query'),
  overwriteMode?: int32(name='OverwriteMode', example='2', position='Query'),
  productKey: string(name='ProductKey', example='a1Le6d0****', position='Query'),
  retryCount?: int32(name='RetryCount', example='1', position='Query'),
  retryInterval?: int32(name='RetryInterval', example='60', position='Query'),
  srcVersion?: [ string ](name='SrcVersion', example='V1.0.1', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='key1'),
      value: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='1440', position='Query'),
}

model CreateOTADynamicUpgradeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
    utcCreate?: string(name='UtcCreate', example='2019-05-10T02:18:53.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9F41D14E-CB5F-4CCE-939C-057F39E688F5'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTADynamicUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTADynamicUpgradeJobResponseBody(name='body'),
}

async function createOTADynamicUpgradeJob(request: CreateOTADynamicUpgradeJobRequest): CreateOTADynamicUpgradeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTADynamicUpgradeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAFirmwareRequest {
  destVersion: string(name='DestVersion', example='2.0.0', position='Query'),
  firmwareDesc?: string(name='FirmwareDesc', example='OTA function updated', position='Query'),
  firmwareName: string(name='FirmwareName', example='Firmware2', position='Query'),
  firmwareSign?: string(name='FirmwareSign', example='93230c3bde425a9d7984a594ac55****', position='Query'),
  firmwareSize?: int32(name='FirmwareSize', example='900', position='Query'),
  firmwareUrl?: string(name='FirmwareUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/bcd6142594d0183a16d825ad8225****/A6B3400B70CA4D6D872160D1A91A****.bin', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  moduleName?: string(name='ModuleName', example='WifiConfigModify', position='Query'),
  multiFiles?: [ 
    {
      fileMd5?: string(name='FileMd5', example='93230c3bde425a9d7984a594ac56***'),
      name?: string(name='Name', example='Firmware1'),
      signValue?: string(name='SignValue', example='93230c3bde425a9d7984a594ac45****'),
      size?: int32(name='Size', example='200'),
      url?: string(name='Url', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/bcd6142594d0183a16d825ad8225****/A6B3400B70CA4D6D872160D1A91A****.bin'),
    }
  ](name='MultiFiles', position='Query'),
  needToVerify?: boolean(name='NeedToVerify', example='true', position='Query'),
  productKey?: string(name='ProductKey', example='a1uctKe****', position='Query'),
  signMethod?: string(name='SignMethod', example='MD5', position='Query'),
  srcVersion?: string(name='SrcVersion', example='1.0.0', position='Query'),
  type?: int32(name='Type', example='0', position='Query'),
  udi?: string(name='Udi', position='Query'),
}

model CreateOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    firmwareId?: string(name='FirmwareId', example='s8SSHiKjpBfrM3BSN0z803****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:21:54.607Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAFirmwareResponseBody(name='body'),
}

async function createOTAFirmware(request: CreateOTAFirmwareRequest): CreateOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAModuleRequest {
  aliasName?: string(name='AliasName', position='Query'),
  desc?: string(name='Desc', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  moduleName: string(name='ModuleName', example='barcodeScanner', position='Query'),
  productKey: string(name='ProductKey', example='a1Le6d0****', position='Query'),
}

model CreateOTAModuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAModuleResponseBody(name='body'),
}

async function createOTAModule(request: CreateOTAModuleRequest): CreateOTAModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAModule', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAStaticUpgradeJobRequest {
  dnListFileUrl?: string(name='DnListFileUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin', position='Query'),
  downloadProtocol?: string(name='DownloadProtocol', example='HTTPS', position='Query'),
  firmwareId: string(name='FirmwareId', example='nx3xxVvFdwvn6dim50PY03****', position='Query'),
  grayPercent?: string(name='GrayPercent', example='33.33', position='Query'),
  groupId?: string(name='GroupId', example='CtjzCkNuOx***', position='Query'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  maximumPerMinute?: int32(name='MaximumPerMinute', example='1000', position='Query'),
  multiModuleMode?: boolean(name='MultiModuleMode', example='false', position='Query'),
  needConfirm?: boolean(name='NeedConfirm', example='false', position='Query'),
  needPush?: boolean(name='NeedPush', example='true', position='Query'),
  overwriteMode?: int32(name='OverwriteMode', example='1', position='Query'),
  productKey: string(name='ProductKey', example='a1Le6d0****', position='Query'),
  retryCount?: int32(name='RetryCount', example='1', position='Query'),
  retryInterval?: int32(name='RetryInterval', example='60', position='Query'),
  scheduleFinishTime?: long(name='ScheduleFinishTime', example='1577909000000', position='Query'),
  scheduleTime?: long(name='ScheduleTime', example='1577808000000', position='Query'),
  srcVersion?: [ string ](name='SrcVersion', example='V1.0.1', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='key1'),
      value: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
  targetDeviceName?: [ string ](name='TargetDeviceName', example='deviceName1', position='Query'),
  targetSelection: string(name='TargetSelection', example='ALL', position='Query'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='1440', position='Query'),
}

model CreateOTAStaticUpgradeJobResponseBody = {
  code?: string(name='Code', example='MissingFirmwareId'),
  data?: {
    jobId?: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:22:19.566Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='FirmwareId is mandatory for this action.'),
  requestId?: string(name='RequestId', example='29EC7245-0FA4-4BB6-B4F5-5F04818FDFB1'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAStaticUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAStaticUpgradeJobResponseBody(name='body'),
}

async function createOTAStaticUpgradeJob(request: CreateOTAStaticUpgradeJobRequest): CreateOTAStaticUpgradeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAStaticUpgradeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAVerifyJobRequest {
  downloadProtocol?: string(name='DownloadProtocol', example='HTTPS', position='Query'),
  firmwareId: string(name='FirmwareId', example='nx3xxVvFdwvn6dim50PY03****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  needConfirm?: boolean(name='NeedConfirm', example='false', position='Query'),
  needPush?: boolean(name='NeedPush', example='true', position='Query'),
  productKey: string(name='ProductKey', example='a1VJwBw****', position='Query'),
  tag?: [ 
    {
      key: string(name='Key', example='key1'),
      value: string(name='Value', example='value1'),
    }
  ](name='Tag', position='Query'),
  targetDeviceName: [ string ](name='TargetDeviceName', example='testdevice', position='Query'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='1440', position='Query'),
}

model CreateOTAVerifyJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    jobId?: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:22:19.566Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='29EC7245-0FA4-4BB6-B4F5-5F04818FDFB1'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAVerifyJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAVerifyJobResponseBody(name='body'),
}

async function createOTAVerifyJob(request: CreateOTAVerifyJobRequest): CreateOTAVerifyJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAVerifyJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateParserRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***', position='Query'),
  name: string(name='Name', example='DataParser', position='Query'),
}

model CreateParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  parserId?: long(name='ParserId', example='100*'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateParserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateParserResponseBody(name='body'),
}

async function createParser(request: CreateParserRequest): CreateParserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateParser', 'POST', '/', 'json', false, 'json', request);
}

model CreateParserDataSourceRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-w2****', position='Query'),
  name: string(name='Name', example='DataSource', position='Query'),
}

model CreateParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSource?: {
    dataSourceId?: long(name='DataSourceId', example='1001'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataSource'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='DataSource'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateParserDataSourceResponseBody(name='body'),
}

async function createParserDataSource(request: CreateParserDataSourceRequest): CreateParserDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateParserDataSource', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior', position='Query'),
  authType?: string(name='AuthType', example='secret', position='Query'),
  categoryKey?: string(name='CategoryKey', example='Lighting', position='Query'),
  dataFormat?: int32(name='DataFormat', example='1', position='Query'),
  description?: string(name='Description', example='Product test', position='Query'),
  id2?: boolean(name='Id2', example='false', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v64***', position='Query'),
  joinPermissionId?: string(name='JoinPermissionId', example='8***', position='Query'),
  netType?: string(name='NetType', example='WIFI', position='Query'),
  nodeType: int32(name='NodeType', example='0', position='Query'),
  productName: string(name='ProductName', example='Light', position='Query'),
  protocolType?: string(name='ProtocolType', example='modbus', position='Query'),
  publishAuto?: boolean(name='PublishAuto', example='false', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph***', position='Query'),
  validateType?: int32(name='ValidateType', example='1', position='Query'),
}

model CreateProductResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior'),
    authType?: string(name='AuthType', example='secret'),
    dataFormat?: int32(name='DataFormat', example='1'),
    description?: string(name='Description', example='Product test'),
    id2?: boolean(name='Id2', example='false'),
    nodeType?: int32(name='NodeType', example='0'),
    productKey?: string(name='ProductKey', example='a1FlqIQ****'),
    productName?: string(name='ProductName', example='Test'),
    productSecret?: string(name='ProductSecret', example='U5tW7i44uilc****'),
    protocolType?: string(name='ProtocolType', example='modbus'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey', example='a1FlqIQ****'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductResponseBody(name='body'),
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduct', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductDistributeJobRequest {
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  sourceInstanceId: string(name='SourceInstanceId', example='iot-cn-st2***', position='Query'),
  targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', example='iot-cn-6ja***', position='Query'),
  targetUid?: string(name='TargetUid', example='198***', position='Query'),
}

model CreateProductDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateProductDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductDistributeJobResponseBody(name='body'),
}

async function createProductDistributeJob(request: CreateProductDistributeJobRequest): CreateProductDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  productTag: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='TagValue'),
    }
  ](name='ProductTag', position='Query'),
}

model CreateProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='123$'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductTagsResponseBody(name='body'),
}

async function createProductTags(request: CreateProductTagsRequest): CreateProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductTags', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductTopicRequest {
  desc?: string(name='Desc', example='submit a test topic', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  operation: string(name='Operation', example='PUB', position='Query'),
  productKey: string(name='ProductKey', example='aldDEin****', position='Query'),
  topicShortName: string(name='TopicShortName', example='submit', position='Query'),
}

model CreateProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
  topicId?: long(name='TopicId', example='10000'),
}

model CreateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductTopicResponseBody(name='body'),
}

async function createProductTopic(request: CreateProductTopicRequest): CreateProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  dataType?: string(name='DataType', example='JSON', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  name: string(name='Name', example='iot_test1', position='Query'),
  productKey?: string(name='ProductKey', example='a1T27vz****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****', position='Query'),
  ruleDesc?: string(name='RuleDesc', example='rule test', position='Query'),
  select?: string(name='Select', example='deviceName() as deviceName, items.Humidity.value as Humidity, items.Temperature.value as Temperature', position='Query'),
  shortTopic?: string(name='ShortTopic', example='+/thing/event/property/post', position='Query'),
  topic?: string(name='Topic', example='/sys/g18l***/device1/thing/event/property/post', position='Query'),
  topicType?: int32(name='TopicType', example='1', position='Query'),
  where?: string(name='Where', example='Temperature>35', position='Query'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  ruleId?: long(name='RuleId', example='100000'),
  success?: boolean(name='Success', example='true'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleActionRequest {
  configuration: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}', position='Query'),
  errorActionFlag?: boolean(name='ErrorActionFlag', example='false', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  ruleId: long(name='RuleId', example='100000', position='Query'),
  type: string(name='Type', example='REPUBLISH', position='Query'),
}

model CreateRuleActionResponseBody = {
  actionId?: long(name='ActionId', example='10003'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model CreateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleActionResponseBody(name='body'),
}

async function createRuleAction(request: CreateRuleActionRequest): CreateRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model CreateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleContent?: string(name='RuleContent', position='Query'),
  ruleDescription?: string(name='RuleDescription', position='Query'),
  ruleName: string(name='RuleName', example='test', position='Query'),
}

model CreateSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
  success?: boolean(name='Success', example='true'),
}

model CreateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSceneRuleResponseBody(name='body'),
}

async function createSceneRule(request: CreateSceneRuleRequest): CreateSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateSchedulePeriodRequest {
  description: string(name='Description', example='test', position='Body'),
  endTime: string(name='EndTime', example='01:00', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  soundCodeContent: string(name='SoundCodeContent', example='www.taobao.com', position='Body'),
  startTime: string(name='StartTime', example='00:00', position='Body'),
}

model CreateSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSchedulePeriodResponseBody(name='body'),
}

async function createSchedulePeriod(request: CreateSchedulePeriodRequest): CreateSchedulePeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSchedulePeriod', 'POST', '/', 'json', true, 'form', request);
}

model CreateSoundCodeRequest {
  duration: int32(name='Duration', example='2', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  name?: string(name='Name', position='Body'),
  openType?: string(name='OpenType', position='Body'),
  soundCodeContent: string(name='SoundCodeContent', example='www.taobao.com', position='Body'),
}

model CreateSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSoundCodeResponseBody(name='body'),
}

async function createSoundCode(request: CreateSoundCodeRequest): CreateSoundCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSoundCode', 'POST', '/', 'json', true, 'form', request);
}

model CreateSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  label: string(name='Label', example='test', position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model CreateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSoundCodeLabelResponseBody(name='body'),
}

async function createSoundCodeLabel(request: CreateSoundCodeLabelRequest): CreateSoundCodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSoundCodeLabel', 'POST', '/', 'json', true, 'form', request);
}

model CreateSoundCodeScheduleRequest {
  description?: string(name='Description', example='test', position='Body'),
  endDate: string(name='EndDate', example='2022-03-31', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  name: string(name='Name', example='test', position='Body'),
  openType?: string(name='OpenType', example='INNER', position='Body'),
  startDate: string(name='StartDate', example='2022-03-31', position='Body'),
}

model CreateSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSoundCodeScheduleResponseBody(name='body'),
}

async function createSoundCodeSchedule(request: CreateSoundCodeScheduleRequest): CreateSoundCodeScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSoundCodeSchedule', 'POST', '/', 'json', true, 'form', request);
}

model CreateSpeechRequest {
  audioFormat?: string(name='AudioFormat', example='wav', position='Body'),
  bizCode?: string(name='BizCode', example='identifying', position='Body'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectCode: string(name='ProjectCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}', shrink='json', position='Body'),
  speechRate?: int32(name='SpeechRate', example='0', minimum=-500, maximum=500, position='Body'),
  speechType?: string(name='SpeechType', example='custom', position='Body'),
  text?: string(name='Text', example='test', position='Body'),
  voice: string(name='Voice', example='Xiaoyun', position='Body'),
  volume?: int32(name='Volume', example='50', minimum=0, maximum=100, position='Body'),
}

model CreateSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSpeechResponseBody(name='body'),
}

async function createSpeech(request: CreateSpeechRequest): CreateSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSpeech', 'POST', '/', 'json', true, 'form', request);
}

model CreateStudioAppDomainOpenRequest {
  appId: string(name='AppId', example='a12*******', position='Body'),
  host: string(name='Host', example='www.aliyun.test.com', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a123******', position='Body'),
  protocol: string(name='Protocol', example='https', position='Body'),
}

model CreateStudioAppDomainOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    appId?: string(name='AppId', example='a12******'),
    host?: string(name='Host', example='www.aliyun.test.com'),
    id?: int32(name='Id', example='1573'),
    isBeian?: string(name='IsBeian', example='YES'),
    projectId?: string(name='ProjectId', example='a12*******'),
    protocol?: string(name='Protocol', example='https'),
    tenantId?: string(name='TenantId', example='C70B541046F64EAABE3*******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStudioAppDomainOpenResponseBody(name='body'),
}

async function createStudioAppDomainOpen(request: CreateStudioAppDomainOpenRequest): CreateStudioAppDomainOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStudioAppDomainOpen', 'POST', '/', 'json', true, 'form', request);
}

model CreateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', example='nJRaJPn5U1JITGfjBO9l00****', position='Query'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', example='true', position='Query'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', example='true', position='Query'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', example='true', position='Query'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', example='true', position='Query'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', example='true', position='Query'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', example='true', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  mnsConfiguration?: string(name='MnsConfiguration', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }', position='Query'),
  otaEventFlag?: boolean(name='OtaEventFlag', example='true', position='Query'),
  otaJobFlag?: boolean(name='OtaJobFlag', example='true', position='Query'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', example='true', position='Query'),
  productKey: string(name='ProductKey', example='a1fyXVF****', position='Query'),
  subscribeFlags?: string(name='SubscribeFlags', position='Query'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', example='true', position='Query'),
  type?: string(name='Type', example='AMQP', position='Query'),
}

model CreateSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model CreateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscribeRelationResponseBody(name='body'),
}

async function createSubscribeRelation(request: CreateSubscribeRelationRequest): CreateSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model CreateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  functionBlockName?: string(name='FunctionBlockName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  thingModelJson?: string(name='ThingModelJson', position='Query'),
}

model CreateThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThingModelResponseBody(name='body'),
}

async function createThingModel(request: CreateThingModelRequest): CreateThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateThingModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1Q5XoY****', position='Query'),
  scriptContent: string(name='ScriptContent', example='"function protocolToRawData(jsonObj) {return rawdata; }function rawDataToProtocol(rawData) {return jsonObj; }"', position='Query'),
  scriptType: string(name='ScriptType', example='JavaScript', position='Query'),
}

model CreateThingScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model CreateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThingScriptResponseBody(name='body'),
}

async function createThingScript(request: CreateThingScriptRequest): CreateThingScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateThingScript', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRouteTableRequest {
  dstTopic: [ string ](name='DstTopic', example='/x7aWKW9****/deviceNameTest1/user/add', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  srcTopic: string(name='SrcTopic', example='/x7aWKW9****/testDataToDataHub/user/update', position='Query'),
}

model CreateTopicRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='iot.system.SystemException'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics'),
  isAllSucceed?: boolean(name='IsAllSucceed', example='true'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model CreateTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicRouteTableResponseBody(name='body'),
}

async function createTopicRouteTable(request: CreateTopicRouteTableRequest): CreateTopicRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopicRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClientIdsRequest {
  iotId: string(name='IotId', example='BXPV9Ks3bxwM9fD****0000101', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-12****78', position='Query'),
}

model DeleteClientIdsResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', example='true'),
}

model DeleteClientIdsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClientIdsResponseBody(name='body'),
}

async function deleteClientIds(request: DeleteClientIdsRequest): DeleteClientIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteClientIds', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  groupId: string(name='GroupId', example='nJRaJPn5U1JITGf******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupSubscribeRelationRequest {
  consumerGroupId: string(name='ConsumerGroupId', example='nJRaJPn5U1JITGfjBO9l00****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1fyXVF****', position='Query'),
}

model DeleteConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function deleteConsumerGroupSubscribeRelation(request: DeleteConsumerGroupSubscribeRelationRequest): DeleteConsumerGroupSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroupSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataSourceItemRequest {
  dataSourceId: long(name='DataSourceId', example='1001', minimum=0, maximum=99999999, position='Query'),
  dataSourceItemId: long(name='DataSourceItemId', example='129322', minimum=0, maximum=99999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****', position='Query'),
}

model DeleteDataSourceItemResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSourceItemResponseBody(name='body'),
}

async function deleteDataSourceItem(request: DeleteDataSourceItemRequest): DeleteDataSourceItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSourceItem', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDestinationRequest {
  destinationId: long(name='DestinationId', example='1003', minimum=0, maximum=9999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
}

model DeleteDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDestinationResponseBody(name='body'),
}

async function deleteDestination(request: DeleteDestinationRequest): DeleteDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDestination', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='MpEKNuEUJzIORNANAWJX0010929900*****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey?: string(name='ProductKey', example='a1FlqIQ****', position='Query'),
}

model DeleteDeviceResponseBody = {
  code?: string(name='Code', example='iot.prod.NullProductKey'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='false'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceDistributeJobRequest {
  jobId: string(name='JobId', example='UbmsMHmkqv0PiAG****010001', position='Query'),
}

model DeleteDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceDistributeJobResponseBody(name='body'),
}

async function deleteDeviceDistributeJob(request: DeleteDeviceDistributeJobRequest): DeleteDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceDynamicGroupRequest {
  groupId: string(name='GroupId', example='tDQvBJqbUyHs***', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-***-v6***', position='Query'),
}

model DeleteDeviceDynamicGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceDynamicGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceDynamicGroupResponseBody(name='body'),
}

async function deleteDeviceDynamicGroup(request: DeleteDeviceDynamicGroupRequest): DeleteDeviceDynamicGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceDynamicGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceFileRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  fileId: string(name='FileId', example='6UCo1SqbqnQEoh9aK4561****', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model DeleteDeviceFileResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceFileResponseBody(name='body'),
}

async function deleteDeviceFile(request: DeleteDeviceFileRequest): DeleteDeviceFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceGroupRequest {
  groupId: string(name='GroupId', example='tDQvBJqbUyHs****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model DeleteDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceGroupResponseBody(name='body'),
}

async function deleteDeviceGroup(request: DeleteDeviceGroupRequest): DeleteDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDevicePropRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  propKey: string(name='PropKey', example='room', position='Query'),
}

model DeleteDevicePropResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevicePropResponseBody(name='body'),
}

async function deleteDeviceProp(request: DeleteDevicePropRequest): DeleteDevicePropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceProp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceSpeechRequest {
  deviceSpeechList: [ 
    {
      audioFormat: string(name='AudioFormat', example='wav'),
      bizCode: string(name='BizCode', example='identifying'),
    }
  ](name='DeviceSpeechList', position='Body'),
  iotId: string(name='IotId', example='4de2c367****8c585e5992**', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
}

model DeleteDeviceSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceSpeechResponseBody(name='body'),
}

async function deleteDeviceSpeech(request: DeleteDeviceSpeechRequest): DeleteDeviceSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceSpeech', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***', position='Query'),
  tunnelId: string(name='TunnelId', example='d4098041-a560-***', position='Query'),
}

model DeleteDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceTunnelResponseBody(name='body'),
}

async function deleteDeviceTunnel(request: DeleteDeviceTunnelRequest): DeleteDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeDriverRequest {
  driverId: string(name='DriverId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model DeleteEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='F82E857F-B6B9-4CCC-96B8-E4BE97095F1A'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeDriverResponseBody(name='body'),
}

async function deleteEdgeDriver(request: DeleteEdgeDriverRequest): DeleteEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeDriverVersionRequest {
  driverId: string(name='DriverId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  driverVersion: string(name='DriverVersion', example='1.2.0', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model DeleteEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='J82E857F-T6B9-4FDE-96B8-E4BE97095D1A'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeDriverVersionResponseBody(name='body'),
}

async function deleteEdgeDriverVersion(request: DeleteEdgeDriverVersionRequest): DeleteEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeInstanceRequest {
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model DeleteEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='F29C33E5-BF22-48FE-9FEF-8A24146E3388'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeInstanceResponseBody(name='body'),
}

async function deleteEdgeInstance(request: DeleteEdgeInstanceRequest): DeleteEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', example='5zvK1COK1gtr********', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  routeId: long(name='RouteId', example='123456', minimum=0, maximum=9223372036854775807, position='Query'),
}

model DeleteEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E252BC84-EF9A-4F0F-8E73-ADCF9CA3B722'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function deleteEdgeInstanceMessageRouting(request: DeleteEdgeInstanceMessageRoutingRequest): DeleteEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model DeleteJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobId: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001', position='Query'),
}

model DeleteJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='C25255EA-9F6E-4E04-85FE-AC1E9C136EBB'),
  success?: boolean(name='Success', example='true'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOTAFirmwareRequest {
  firmwareId: string(name='FirmwareId', example='s8SSHiKjpBfrM3BSN0z803****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model DeleteOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9B7BF858-7686-496E-B8B0-BF9E5D7F86CE'),
  success?: boolean(name='Success', example='true'),
}

model DeleteOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOTAFirmwareResponseBody(name='body'),
}

async function deleteOTAFirmware(request: DeleteOTAFirmwareRequest): DeleteOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOTAModuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  moduleName: string(name='ModuleName', example='barcodeScanner', position='Query'),
  productKey: string(name='ProductKey', example='a1uctKe****', position='Query'),
}

model DeleteOTAModuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model DeleteOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOTAModuleResponseBody(name='body'),
}

async function deleteOTAModule(request: DeleteOTAModuleRequest): DeleteOTAModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOTAModule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****', position='Query'),
  parserId: long(name='ParserId', example='1001', minimum=0, maximum=9999999999, position='Query'),
}

model DeleteParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteParserResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteParserResponseBody(name='body'),
}

async function deleteParser(request: DeleteParserRequest): DeleteParserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteParser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteParserDataSourceRequest {
  dataSourceId: long(name='DataSourceId', example='1001', minimum=0, maximum=999999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
}

model DeleteParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteParserDataSourceResponseBody(name='body'),
}

async function deleteParserDataSource(request: DeleteParserDataSourceRequest): DeleteParserDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteParserDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-64***', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model DeleteProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProduct', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  productTagKey: [ string ](name='ProductTagKey', example='room', position='Query'),
}

model DeleteProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductTagsResponseBody(name='body'),
}

async function deleteProductTags(request: DeleteProductTagsRequest): DeleteProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProductTags', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  topicId: string(name='TopicId', example='798****', position='Query'),
}

model DeleteProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductTopicResponseBody(name='body'),
}

async function deleteProductTopic(request: DeleteProductTopicRequest): DeleteProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: long(name='RuleId', example='100000', position='Query'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A8F48485-44B9-40D8-A56D-F716F384F387'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleActionRequest {
  actionId: long(name='ActionId', example='100001', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model DeleteRuleActionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='8FC9E36B-E0DC-4802-84EE-184E255B4E95'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleActionResponseBody(name='body'),
}

async function deleteRuleAction(request: DeleteRuleActionRequest): DeleteRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: string(name='RuleId', example='f041397879ad4d89822811d741******', position='Query'),
}

model DeleteSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSceneRuleResponseBody(name='body'),
}

async function deleteSceneRule(request: DeleteSceneRuleRequest): DeleteSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSchedulePeriodRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  periodCode: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model DeleteSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSchedulePeriodResponseBody(name='body'),
}

async function deleteSchedulePeriod(request: DeleteSchedulePeriodRequest): DeleteSchedulePeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchedulePeriod', 'POST', '/', 'json', true, 'form', request);
}

model DeleteShareTaskDeviceRequest {
  iotIdList?: [ string ](name='IotIdList', example='Q7uOhVRdZRRlDnTLv****00100', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  shareTaskId: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model DeleteShareTaskDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    progress?: int32(name='Progress', example='100'),
    progressId?: string(name='ProgressId', example='Md3ZiTL888K9llXDy7890***********'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model DeleteShareTaskDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteShareTaskDeviceResponseBody(name='body'),
}

async function deleteShareTaskDevice(request: DeleteShareTaskDeviceRequest): DeleteShareTaskDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteShareTaskDevice', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSoundCodeRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  soundCode: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model DeleteSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSoundCodeResponseBody(name='body'),
}

async function deleteSoundCode(request: DeleteSoundCodeRequest): DeleteSoundCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSoundCode', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  soundCode: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model DeleteSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSoundCodeLabelResponseBody(name='body'),
}

async function deleteSoundCodeLabel(request: DeleteSoundCodeLabelRequest): DeleteSoundCodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSoundCodeLabel', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSoundCodeScheduleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model DeleteSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSoundCodeScheduleResponseBody(name='body'),
}

async function deleteSoundCodeSchedule(request: DeleteSoundCodeScheduleRequest): DeleteSoundCodeScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSoundCodeSchedule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  speechCodeList: [ string ](name='SpeechCodeList', example='4de2c367****8c585e5992**', position='Body'),
}

model DeleteSpeechResponseBody = {
  code?: string(name='Code', example='iot.speech.InvalidSpeechCodeList'),
  errorMessage?: string(name='ErrorMessage', example='invalid SpeechCodeList'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpeechResponseBody(name='body'),
}

async function deleteSpeech(request: DeleteSpeechRequest): DeleteSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSpeech', 'POST', '/', 'json', true, 'form', request);
}

model DeleteStudioAppDomainOpenRequest {
  appId: string(name='AppId', example='a12******', position='Body'),
  domainId: int32(name='DomainId', example='1', minimum=1, position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a123*******', position='Body'),
}

model DeleteStudioAppDomainOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStudioAppDomainOpenResponseBody(name='body'),
}

async function deleteStudioAppDomainOpen(request: DeleteStudioAppDomainOpenRequest): DeleteStudioAppDomainOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStudioAppDomainOpen', 'POST', '/', 'json', true, 'form', request);
}

model DeleteSubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1fyXVF****', position='Query'),
  type: string(name='Type', example='AMQP', position='Query'),
}

model DeleteSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscribeRelationResponseBody(name='body'),
}

async function deleteSubscribeRelation(request: DeleteSubscribeRelationRequest): DeleteSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteThingModelRequest {
  eventIdentifier?: [ string ](name='EventIdentifier', example='OfflineAlert', position='Query'),
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  propertyIdentifier?: [ string ](name='PropertyIdentifier', example='Temperature', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****', position='Query'),
  serviceIdentifier?: [ string ](name='ServiceIdentifier', example='Set', position='Query'),
}

model DeleteThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteThingModelResponseBody(name='body'),
}

async function deleteThingModel(request: DeleteThingModelRequest): DeleteThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteThingModel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRouteTableRequest {
  dstTopic: [ string ](name='DstTopic', example='/x7aWKW9***/deviceNameTest1/user/add', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  srcTopic: string(name='SrcTopic', example='/x7aWKW9***/testDataToDataHub/user/update', position='Query'),
}

model DeleteTopicRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics'),
  isAllSucceed?: boolean(name='IsAllSucceed', example='true'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicRouteTableResponseBody(name='body'),
}

async function deleteTopicRouteTable(request: DeleteTopicRouteTableRequest): DeleteTopicRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopicRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DetachDestinationRequest {
  destinationId: long(name='DestinationId', example='1002', minimum=0, maximum=999999999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  parserId: long(name='ParserId', example='1000', minimum=1, maximum=9999999999, position='Query'),
}

model DetachDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DetachDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDestinationResponseBody(name='body'),
}

async function detachDestination(request: DetachDestinationRequest): DetachDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachDestination', 'POST', '/', 'json', false, 'json', request);
}

model DetachParserDataSourceRequest {
  dataSourceId: long(name='DataSourceId', example='1001', minimum=0, maximum=99999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  parserId: long(name='ParserId', example='1000', minimum=1, maximum=999999999999, position='Query'),
}

model DetachParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DetachParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachParserDataSourceResponseBody(name='body'),
}

async function detachParserDataSource(request: DetachParserDataSourceRequest): DetachParserDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachParserDataSource', 'POST', '/', 'json', false, 'json', request);
}

model DisableDeviceTunnelRequest {
  deviceName: string(name='DeviceName', example='LEGatewayAuto_B3XM******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1Wmy******', position='Query'),
}

model DisableDeviceTunnelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='73671995-9588-406B-9C1E-FC38450A2AA1'),
  success?: boolean(name='Success', example='true'),
}

model DisableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDeviceTunnelResponseBody(name='body'),
}

async function disableDeviceTunnel(request: DisableDeviceTunnelRequest): DisableDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model DisableDeviceTunnelShareRequest {
  deviceName: string(name='DeviceName', example='LEGatewayAuto_B3XM******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1Wmy******', position='Query'),
}

model DisableDeviceTunnelShareResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='35023CAB-CBED-4A2E-92DF-201C72850B50'),
  success?: boolean(name='Success', example='true'),
}

model DisableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDeviceTunnelShareResponseBody(name='body'),
}

async function disableDeviceTunnelShare(request: DisableDeviceTunnelShareRequest): DisableDeviceTunnelShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDeviceTunnelShare', 'POST', '/', 'json', false, 'json', request);
}

model DisableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: string(name='RuleId', example='fec565038d7544978d9aed5c1a******', position='Query'),
}

model DisableSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7BAA989EK'),
  success?: boolean(name='Success', example='true'),
}

model DisableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSceneRuleResponseBody(name='body'),
}

async function disableSceneRule(request: DisableSceneRuleRequest): DisableSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model DisableThingRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model DisableThingResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DisableThingResponse = {
  headers: map[string]string(name='headers'),
  body: DisableThingResponseBody(name='body'),
}

async function disableThing(request: DisableThingRequest): DisableThingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableThing', 'POST', '/', 'json', false, 'json', request);
}

model EnableDeviceTunnelRequest {
  deviceName: string(name='DeviceName', example='LEGatewayAuto_B3XM******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1Wmy******', position='Query'),
}

model EnableDeviceTunnelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='577F07AF-7EFE-4B98-AEA2-634ED864BA01'),
  success?: boolean(name='Success', example='true'),
}

model EnableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDeviceTunnelResponseBody(name='body'),
}

async function enableDeviceTunnel(request: EnableDeviceTunnelRequest): EnableDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model EnableDeviceTunnelShareRequest {
  deviceName: string(name='DeviceName', example='LEGatewayAuto_B3XM******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1Wmy******', position='Query'),
}

model EnableDeviceTunnelShareResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3DB31A1A-BD83-4155-AD2B-56AD041E372C'),
  success?: boolean(name='Success', example='true'),
}

model EnableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDeviceTunnelShareResponseBody(name='body'),
}

async function enableDeviceTunnelShare(request: EnableDeviceTunnelShareRequest): EnableDeviceTunnelShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDeviceTunnelShare', 'POST', '/', 'json', false, 'json', request);
}

model EnableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: string(name='RuleId', example='f041397879ad4d89822811d741******', position='Query'),
}

model EnableSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EK'),
  success?: boolean(name='Success', example='true'),
}

model EnableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSceneRuleResponseBody(name='body'),
}

async function enableSceneRule(request: EnableSceneRuleRequest): EnableSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model EnableThingRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model EnableThingResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model EnableThingResponse = {
  headers: map[string]string(name='headers'),
  body: EnableThingResponseBody(name='body'),
}

async function enableThing(request: EnableThingRequest): EnableThingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableThing', 'POST', '/', 'json', false, 'json', request);
}

model GenerateDeviceNameListURLRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model GenerateDeviceNameListURLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='cS8uRRy54Rsz****'),
    fileUrl?: string(name='FileUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.csv'),
    host?: string(name='Host', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com'),
    key?: string(name='Key', example='ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.csv'),
    objectStorage?: string(name='ObjectStorage', example='OSS'),
    policy?: string(name='Policy', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', example='v6lViO4FBvfquajQjg20K5hK****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:21:54.607Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model GenerateDeviceNameListURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateDeviceNameListURLResponseBody(name='body'),
}

async function generateDeviceNameListURL(request: GenerateDeviceNameListURLRequest): GenerateDeviceNameListURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateDeviceNameListURL', 'POST', '/', 'json', false, 'json', request);
}

model GenerateFileUploadURLRequest {
  bizCode: string(name='BizCode', example='DEVICE_JOB_FILE', position='Query'),
  fileName?: string(name='FileName', example='file1', position='Query'),
  fileSuffix: string(name='FileSuffix', example='bin', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model GenerateFileUploadURLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    host?: string(name='Host', example='https://iotx-bucket-name.oss-***.aliyuncs.com'),
    key?: string(name='Key', example='subpath/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.suffix'),
    objectStorage?: string(name='ObjectStorage', example='OSS'),
    ossAccessKeyId?: string(name='OssAccessKeyId', example='cS8uRRy54Rsz****'),
    policy?: string(name='Policy', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', example='v6lViO4FBvfquajQjg20K5hK****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GenerateFileUploadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateFileUploadURLResponseBody(name='body'),
}

async function generateFileUploadURL(request: GenerateFileUploadURLRequest): GenerateFileUploadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateFileUploadURL', 'POST', '/', 'json', false, 'json', request);
}

model GenerateOTAUploadURLRequest {
  fileSuffix?: string(name='FileSuffix', example='apk', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model GenerateOTAUploadURLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    firmwareUrl?: string(name='FirmwareUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
    host?: string(name='Host', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com'),
    key?: string(name='Key', example='ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
    OSSAccessKeyId?: string(name='OSSAccessKeyId', example='cS8uRRy54Rsz****'),
    objectStorage?: string(name='ObjectStorage', example='OSS'),
    policy?: string(name='Policy', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', example='v6lViO4FBvfquajQjg20K5hK****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:21:54.607Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model GenerateOTAUploadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateOTAUploadURLResponseBody(name='body'),
}

async function generateOTAUploadURL(request: GenerateOTAUploadURLRequest): GenerateOTAUploadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateOTAUploadURL', 'POST', '/', 'json', false, 'json', request);
}

model GetDataAPIServiceDetailRequest {
  apiSrn: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
}

model GetDataAPIServiceDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiPath?: string(name='ApiPath', example='/device/getDeviceCountByStatus'),
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    createTime?: long(name='CreateTime', example='1557839468865'),
    dateFormat?: string(name='DateFormat', example='JSON'),
    description?: string(name='Description'),
    displayName?: string(name='DisplayName'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1557839468865'),
    requestMethod?: string(name='RequestMethod', example='GET/POST'),
    requestProtocol?: string(name='RequestProtocol', example='HTTPS'),
    sqlTemplateDTO?: {
      originSql?: string(name='OriginSql', example='SELECT COUNT(*) FROM ${system.device} WHERE status = 1'),
      requestParams?: {
        requestParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example', example='0'),
          name?: string(name='Name', example='status'),
          required?: boolean(name='Required', example='true'),
          type?: string(name='Type', example='INTEGER'),
        }
      ](name='RequestParams')
      }(name='RequestParams'),
      responseParams?: {
        responseParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example', example='100'),
          name?: string(name='Name', example='deviceCount'),
          required?: boolean(name='Required', example='true'),
          type?: string(name='Type', example='INTEGER'),
        }
      ](name='ResponseParams')
      }(name='ResponseParams'),
      templateSql?: string(name='TemplateSql', example='SELECT COUNT(*) as deviceCount FROM ${system.device} WHERE status = ${status}'),
    }(name='SqlTemplateDTO'),
    status?: int32(name='Status', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model GetDataAPIServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataAPIServiceDetailResponseBody(name='body'),
}

async function getDataAPIServiceDetail(request: GetDataAPIServiceDetailRequest): GetDataAPIServiceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataAPIServiceDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetDestinationRequest {
  destinationId: long(name='DestinationId', example='1004', minimum=0, maximum=9999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
}

model GetDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destination?: {
    configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
    destinationId?: string(name='DestinationId', example='1003'),
    isFailover?: boolean(name='IsFailover', example='false'),
    name?: string(name='Name', example='DataPurpose'),
    status?: string(name='Status'),
    type?: string(name='Type', example='REPUBLISH'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='Destination'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: GetDestinationResponseBody(name='body'),
}

async function getDestination(request: GetDestinationRequest): GetDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDestination', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceShadowRequest {
  deviceName: string(name='DeviceName', example='device1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1T27vz****', position='Query'),
}

model GetDeviceShadowResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A56E345A-0978-4993-ACBA-3EF444ED187F'),
  shadowMessage?: string(name='ShadowMessage', example='{"method":"update","state":{"desired":{"color":"green"}},"version":1}'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceShadowResponseBody(name='body'),
}

async function getDeviceShadow(request: GetDeviceShadowRequest): GetDeviceShadowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceShadow', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceStatusRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model GetDeviceStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    status?: string(name='Status', example='ONLINE'),
    timestamp?: long(name='Timestamp', example='1557062301656'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceStatusResponseBody(name='body'),
}

async function getDeviceStatus(request: GetDeviceStatusRequest): GetDeviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceTunnelShareStatusRequest {
  deviceName: string(name='DeviceName', example='LEGatewayAuto_B3XM******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1Wmy******', position='Query'),
}

model GetDeviceTunnelShareStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtOpened?: long(name='GmtOpened', example='1617941371000'),
    isOpen?: boolean(name='IsOpen', example='true'),
    password?: string(name='Password', example='848bbfa0e9a31e579502869920b4d4c********'),
    shareId?: string(name='ShareId', example='18f72f95cad34ca3aeabeeefcb******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ACC1D51C-1A58-440E-92A7-71AB61C6595A'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceTunnelShareStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceTunnelShareStatusResponseBody(name='body'),
}

async function getDeviceTunnelShareStatus(request: GetDeviceTunnelShareStatusRequest): GetDeviceTunnelShareStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceTunnelShareStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceTunnelStatusRequest {
  deviceName: string(name='DeviceName', example='LEGatewayAuto_B3XM******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1kqtIX****', position='Query'),
}

model GetDeviceTunnelStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='online'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='7CCFF08F-34D1-4FBD-ACA9-22D9364EA5A4'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceTunnelStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceTunnelStatusResponseBody(name='body'),
}

async function getDeviceTunnelStatus(request: GetDeviceTunnelStatusRequest): GetDeviceTunnelStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceTunnelStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetDownloadFileRequest {
  context?: map[string]any(name='Context', example='{"xxx";xxx}', shrink='json', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******', position='Body'),
  longJobId: string(name='LongJobId', example='62d949808bc742187xxxxxx', position='Query'),
}

model GetDownloadFileResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    asyncExecute?: boolean(name='AsyncExecute', example='true'),
    beginTime?: long(name='BeginTime', example='1658406464534'),
    csvFileName?: string(name='CsvFileName', example='test_download_flie'),
    csvUrl?: string(name='CsvUrl', example='https://xxxxx-data-download-sh.oss-cn-shanghai.aliyuncs.com/data/download/6B761BxxxxxxxxAAA0BF03D32C80E/62da39b9xxxxxx5a7b953376/download_file_name.csv?Expires=1658469132&amp;OSSAccessKeyId=xxxxxxxxx&amp;Signature=rRL%xxxxxxx%3D'),
    datasetId?: string(name='DatasetId', example='xxxxxx'),
    endTime?: long(name='EndTime', example='1658406465000'),
    header?: [ 
      {
        alias?: string(name='Alias', example='user_name_alias'),
        dimDateClass?: string(name='DimDateClass', example='DAY'),
        fieldName?: string(name='FieldName', example='user_name'),
        fieldType?: string(name='FieldType', example='INTEGER'),
        geoClass?: string(name='GeoClass', example='{xxx:xxxx}'),
        timeClass?: string(name='TimeClass', example='HOUR/DAY/MONTH'),
        typeClass?: string(name='TypeClass', example='date'),
      }
    ](name='Header'),
    longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    previewSize?: int32(name='PreviewSize', example='100'),
    querySetting?: {
      astExpr?: [ 
        {
          expr?: string(name='Expr', example='{"header":{"fieldName":"xxx"},"operator":"GreaterThanOrEqual","value":12345}'),
          exprType?: string(name='ExprType', example='binaryOp'),
        }
      ](name='AstExpr'),
      selectedHeaders?: [ 
        {
          alias?: string(name='Alias', example='user_name_alias'),
          dimDateClass?: string(name='DimDateClass', example='DAY'),
          fieldName?: string(name='FieldName', example='user_name'),
          fieldType?: string(name='FieldType', example='INTEGER'),
          geoClass?: string(name='GeoClass', example='{xxx:xxx}'),
          timeClass?: string(name='TimeClass', example='HOUR/DAY/MONTH'),
        }
      ](name='SelectedHeaders'),
    }(name='QuerySetting'),
    result?: [  map[string]any ](name='Result'),
    resultDataInString?: string(name='ResultDataInString', example='{"a":123}'),
    status?: int32(name='Status', example='1'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='no authorization.'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09934****'),
  success?: boolean(name='Success', example='true'),
}

model GetDownloadFileResponse = {
  headers: map[string]string(name='headers'),
  body: GetDownloadFileResponseBody(name='body'),
}

async function getDownloadFile(request: GetDownloadFileRequest): GetDownloadFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDownloadFile', 'POST', '/', 'json', true, 'form', request);
}

model GetEdgeDriverVersionRequest {
  driverId: string(name='DriverId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  driverVersion: string(name='DriverVersion', example='1.2.0', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model GetEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    argument?: string(name='Argument', example='-XX:+PrintGCDetails'),
    configCheckRule?: string(name='ConfigCheckRule', example='{\\"deviceConfig\\":{\\"required\\":false},\\"driverConfig\\":{\\"required\\":false}}'),
    containerConfig?: string(name='ContainerConfig', example='{\\"devMappings\\":[],\\"hostNetworkMode\\":0,\\"portMappings\\":[],\\"privileged\\":1,\\"volumeMappings\\":[]}'),
    description?: string(name='Description'),
    driverConfig?: string(name='DriverConfig', example='[{\\"content\\":\\"{\\\\\\"defaultConfig\\\\\\":\\\\\\"this is default driver config demo\\\\\\"}\\",\\"format\\":\\"JSON\\"}]'),
    driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
    driverVersion?: string(name='DriverVersion', example='1.2.0'),
    edgeVersion?: string(name='EdgeVersion', example='2.0.0'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
    sourceConfig?: string(name='SourceConfig', example='{\\"ossAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30******/ck3n3koe200003h6zfg******.zip\\",\\"temporaryOssAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30******/ck3n3koe200003h6zf******.zip?Expires\\u003d1575******\\u0026OSSAccessKeyId\\u003daS4MT0IYrP******\\u0026Signature\\u003dm6cpmcaB8rm3YfbkhTYgb0******\\"}'),
    versionState?: string(name='VersionState', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='6ECE664B-E670-47BA-A6AD-62B9F35E3A7B'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeDriverVersionResponseBody(name='body'),
}

async function getEdgeDriverVersion(request: GetEdgeDriverVersionRequest): GetEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetEdgeInstanceRequest {
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model GetEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    bizEnable?: boolean(name='BizEnable', example='true'),
    gmtCreate?: string(name='GmtCreate', example='2019-06-26 12:33:25'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
    gmtModified?: string(name='GmtModified', example='2019-06-26 12:33:25'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
    instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
    latestDeploymentStatus?: int32(name='LatestDeploymentStatus', example='2'),
    latestDeploymentType?: string(name='LatestDeploymentType', example='deploy'),
    name?: string(name='Name'),
    roleArn?: string(name='RoleArn', example='acs:ram::1473922805******:role/aliyuniotaccessingfcrole'),
    roleAttachTime?: string(name='RoleAttachTime', example='2020-02-19 11:25:48'),
    roleAttachTimestamp?: long(name='RoleAttachTimestamp', example='1581912859713'),
    roleName?: string(name='RoleName', example='AliyunIOTAccessingFCRole'),
    spec?: int32(name='Spec', example='30'),
    tags?: string(name='Tags', example='k1:v1,k2:v2'),
    type?: string(name='Type', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='16645053-546B-4D7C-832E-E519B0E23CF1'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceResponseBody(name='body'),
}

async function getEdgeInstance(request: GetEdgeInstanceRequest): GetEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetEdgeInstanceDeploymentRequest {
  deploymentId: string(name='DeploymentId', example='9261e308a9504fde9b4cf8462b0b****', position='Query'),
  instanceId: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model GetEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    deploymentId?: string(name='DeploymentId', example='9261e308a9504fde9b4cf8462b0b****'),
    description?: string(name='Description', example='deploy_1561543948874'),
    gmtCompleted?: string(name='GmtCompleted', example='2019-06-26 18:12:35'),
    gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
    gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
    gmtModified?: string(name='GmtModified', example='2019-06-26 18:12:35'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
    status?: int32(name='Status', example='2'),
    taskList?: [ 
      {
        gatewayId?: string(name='GatewayId', example='jQWf3MVgQjMzcwsY****000101'),
        gmtCompleted?: string(name='GmtCompleted', example='2019-06-26 18:12:35'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
        gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModified?: string(name='GmtModified', example='2019-06-26 18:12:35'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        resourceSnapshotList?: [ 
          {
            gmtCompleted?: string(name='GmtCompleted', example='2019-06-26 18:12:34'),
            gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
            gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
            gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
            gmtModified?: string(name='GmtModified', example='2019-06-26 18:12:34'),
            gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
            log?: string(name='Log', example='[{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":0,\\"level\\":\\"INFO\\",\\"message\\":\\"init success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543949858},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":8,\\"level\\":\\"INFO\\",\\"message\\":\\"assembly success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543951419},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":16,\\"level\\":\\"INFO\\",\\"message\\":\\"package success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543952591},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":32,\\"level\\":\\"INFO\\",\\"message\\":\\"download success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543954149}]'),
            operateType?: int32(name='OperateType', example='0'),
            resourceId?: string(name='ResourceId', example='device_config'),
            resourceName?: string(name='ResourceName', example='device_config'),
            resourceType?: string(name='ResourceType', example='device_config'),
            snapshotId?: string(name='SnapshotId', example='ab576e84a43043d7840cbcebf4a5****'),
            stage?: int32(name='Stage', example='32'),
            status?: int32(name='Status', example='2'),
          }
        ](name='ResourceSnapshotList'),
        stage?: int32(name='Stage', example='32'),
        status?: int32(name='Status', example='2'),
        taskId?: string(name='TaskId', example='49ea651529014bf8b5645d5f9062****'),
      }
    ](name='TaskList'),
    type?: string(name='Type', example='deploy'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='6B72291A-9492-445E-81D9-335D2D3E44C0'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceDeploymentResponseBody(name='body'),
}

async function getEdgeInstanceDeployment(request: GetEdgeInstanceDeploymentRequest): GetEdgeInstanceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeInstanceDeployment', 'POST', '/', 'json', false, 'json', request);
}

model GetEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', example='8jKxIuMVT9rX********', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  routeId: long(name='RouteId', example='123456', minimum=0, maximum=9223372036854775807, position='Query'),
}

model GetEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtCreate?: string(name='GmtCreate', example='2020-05-25 19:54:59'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1590407699000'),
    gmtModified?: string(name='GmtModified', example='2020-05-25 19:54:59'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1590407699000'),
    name?: string(name='Name', example='sample'),
    routeContext?: {
      qos?: string(name='Qos', example='1'),
      sourceApplicationName?: string(name='SourceApplicationName', example='le_object_detector'),
      sourceFcFunctionName?: string(name='SourceFcFunctionName', example='object_detector_app'),
      sourceFcServiceName?: string(name='SourceFcServiceName', example='EdgeFC'),
      targetApplicationName?: string(name='TargetApplicationName', example='le_object_detector'),
      targetFcFunctionName?: string(name='TargetFcFunctionName', example='lightSensorDataFilter'),
      targetFcServiceName?: string(name='TargetFcServiceName', example='EdgeFC'),
    }(name='RouteContext'),
    sourceData?: string(name='SourceData', example='#'),
    sourceType?: string(name='SourceType', example='device'),
    targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********'),
    targetType?: string(name='TargetType', example='IotHub'),
    topicFilter?: string(name='TopicFilter', example='all'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='8A248DEC-887C-4A37-8DE5-E128FFA3698D'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function getEdgeInstanceMessageRouting(request: GetEdgeInstanceMessageRoutingRequest): GetEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayBySubDeviceRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model GetGatewayBySubDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='gateway'),
    deviceSecret?: string(name='DeviceSecret', example='dCYdTU3gw5Z77bsHjPk6lPHPVnBT****'),
    firmwareVersion?: string(name='FirmwareVersion', example='V1.0.1'),
    gmtActive?: string(name='GmtActive', example='2019-12-18 23:25:30'),
    gmtCreate?: string(name='GmtCreate', example='2019-12-18 16:58:33'),
    gmtOnline?: string(name='GmtOnline', example='2020-01-20 17:41:04'),
    ipAddress?: string(name='IpAddress', example='106.**.1**.**'),
    nodeType?: string(name='NodeType', example='1'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    productName?: string(name='ProductName', example='LinkIoT'),
    status?: string(name='Status', example='online'),
    utcActive?: string(name='UtcActive', example='2019-12-18T15:25:30.176Z'),
    utcCreate?: string(name='UtcCreate', example='2019-12-18T08:58:33.000Z'),
    utcOnline?: string(name='UtcOnline', example='2020-01-20T09:41:04.879Z'),
    iotId?: string(name='iotId', example='WuyjPSDQE1L22z1d****000100'),
    region?: string(name='region', example='cn-shanghai'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayBySubDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayBySubDeviceResponseBody(name='body'),
}

async function getGatewayBySubDevice(request: GetGatewayBySubDeviceRequest): GetGatewayBySubDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayBySubDevice', 'POST', '/', 'json', false, 'json', request);
}

model GetLoraNodesTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  taskId: string(name='TaskId', example='623***', position='Query'),
}

model GetLoraNodesTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  successCount?: long(name='SuccessCount', example='100'),
  successDevEuis?: {
    successDevEui?: [ string ](name='SuccessDevEui')
  }(name='SuccessDevEuis'),
  taskId?: string(name='TaskId', example='625***'),
  taskState?: string(name='TaskState', example='RUNNING'),
  totalCount?: long(name='TotalCount', example='200'),
}

model GetLoraNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoraNodesTaskResponseBody(name='body'),
}

async function getLoraNodesTask(request: GetLoraNodesTaskRequest): GetLoraNodesTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoraNodesTask', 'POST', '/', 'json', false, 'json', request);
}

model GetParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***', position='Query'),
  parserId: long(name='ParserId', example='1001', minimum=0, maximum=999999999, position='Query'),
}

model GetParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dataSourceId?: long(name='DataSourceId', example='1003'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataParser'),
    parserId?: long(name='ParserId', example='1001'),
    script?: string(name='Script', example='var data = payload("json"); var h = data.items.Humidity.value; var t = data.items.Temperature.value; writeTsdb(1000,timestamp(),"temperature", t , {"deviceName":deviceName()}); writeTsdb(1000,timestamp(),"humidity", h , {"deviceName":deviceName()});'),
    scriptDraft?: string(name='ScriptDraft', example='var data = payload("json"); var h = data.items.Humidity.value; var t = data.items.Temperature.value; writeTsdb(1000,timestamp(),"temperature", t , {"deviceName":deviceName()}); writeTsdb(1000,timestamp(),"humidity", h , {"deviceName":deviceName()});'),
    status?: string(name='Status', example='STOP'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    utcModified?: string(name='UtcModified', example='2022-04-27T12:45:43.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetParserResponse = {
  headers: map[string]string(name='headers'),
  body: GetParserResponseBody(name='body'),
}

async function getParser(request: GetParserRequest): GetParserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetParser', 'POST', '/', 'json', false, 'json', request);
}

model GetParserDataSourceRequest {
  dataSourceId: long(name='DataSourceId', example='1001', minimum=0, maximum=9999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
}

model GetParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSource?: {
    createUserId?: long(name='CreateUserId', example='11111111000000111'),
    dataSourceId?: long(name='DataSourceId', example='1001'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataSource'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='DataSource'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: GetParserDataSourceResponseBody(name='body'),
}

async function getParserDataSource(request: GetParserDataSourceRequest): GetParserDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetParserDataSource', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  ruleId: long(name='RuleId', example='100000', position='Query'),
}

model GetRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='58D4CEC0-3E95-4DBE-AFC1-809D1400E52F'),
  ruleInfo?: {
    createUserId?: long(name='CreateUserId', example='100000000000000'),
    created?: string(name='Created', example='Thu Feb 28 14:14:33 CST 2019'),
    dataType?: string(name='DataType', example='JSON'),
    id?: long(name='Id', example='100000'),
    modified?: string(name='Modified', example='Thu Feb 28 14:20:58 CST 2019'),
    name?: string(name='Name', example='iotrules'),
    productKey?: string(name='ProductKey', example='a1KiV******'),
    ruleDesc?: string(name='RuleDesc', example='rule1Desc'),
    select?: string(name='Select', example='deviceName() as deviceName'),
    shortTopic?: string(name='ShortTopic', example='+/user/pm25data'),
    status?: string(name='Status', example='STOP'),
    topic?: string(name='Topic', example='/a1QsMlL44pp/+/user/pm25data'),
    topicType?: int32(name='TopicType', example='1'),
    utcCreated?: string(name='UtcCreated', example='2019-02-28T06:14:33.000Z'),
    utcModified?: string(name='UtcModified', example='2019-02-28T06:20:58.000Z'),
    where?: string(name='Where', example='Temperature>35'),
  }(name='RuleInfo'),
  success?: boolean(name='Success', example='true'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleResponseBody(name='body'),
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRule', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleActionRequest {
  actionId: long(name='ActionId', example='100001', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model GetRuleActionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='F2D0755D-F350-40FE-9A6D-491859DB5E5F'),
  ruleActionInfo?: {
    configuration?: string(name='Configuration', example='{\\"topic\\":\\"/sys/a1zSA28****/device/thing/service/property/set\\",\\"topicType\\":0,\\"uid\\":\\"1231579*******\\"}'),
    errorActionFlag?: boolean(name='ErrorActionFlag', example='false'),
    id?: long(name='Id', example='100001'),
    ruleId?: long(name='RuleId', example='152323'),
    type?: string(name='Type', example='REPUBLISH'),
  }(name='RuleActionInfo'),
  success?: boolean(name='Success', example='true'),
}

model GetRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleActionResponseBody(name='body'),
}

async function getRuleAction(request: GetRuleActionRequest): GetRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model GetSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: string(name='RuleId', example='f041397879ad4d89822811d741******', position='Query'),
}

model GetSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtCreate?: long(name='GmtCreate', example='1584085921000'),
    gmtModified?: long(name='GmtModified', example='1579493552000'),
    ruleContent?: string(name='RuleContent', example='{\\"action\\":[{\\"params\\":{\\"productKey\\":\\"a19luLB****\\",\\"propertyItems\\":{\\"LightAdjustLevel\\":10},\\"deviceName\\":\\"test01\\"},\\"uri\\":\\"action/device/setProperty\\"}],\\"trigger\\":{\\"params\\":{\\"cron\\":\\"22 13 20 1 *\\",\\"cronType\\":\\"linux\\"},\\"uri\\":\\"trigger/timer\\"},\\"type\\":\\"IFTTT\\",\\"sid\\":\\"9df954b33c854d469a507ef8d6******\\"}'),
    ruleDescription?: string(name='RuleDescription'),
    ruleName?: string(name='RuleName', example='test'),
    ruleStatus?: int32(name='RuleStatus', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='1B6D50A7-F160-4D47-863C-EDEE25E26495'),
  success?: boolean(name='Success', example='true'),
}

model GetSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetSceneRuleResponseBody(name='body'),
}

async function getSceneRule(request: GetSceneRuleRequest): GetSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model GetShareTaskByDeviceOpenRequest {
  deviceName?: string(name='DeviceName', position='Body'),
  iotId?: string(name='IotId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  productKey?: string(name='ProductKey', position='Body'),
}

model GetShareTaskByDeviceOpenResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetShareTaskByDeviceOpenResponse = {
  headers: map[string]string(name='headers'),
  body: GetShareTaskByDeviceOpenResponseBody(name='body'),
}

async function getShareTaskByDeviceOpen(request: GetShareTaskByDeviceOpenRequest): GetShareTaskByDeviceOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetShareTaskByDeviceOpen', 'POST', '/', 'json', true, 'form', request);
}

model GetSoundCodeAudioRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  soundCodeList: [ string ](name='SoundCodeList', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model GetSoundCodeAudioResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    items?: [ string ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSoundCodeAudioResponse = {
  headers: map[string]string(name='headers'),
  body: GetSoundCodeAudioResponseBody(name='body'),
}

async function getSoundCodeAudio(request: GetSoundCodeAudioRequest): GetSoundCodeAudioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSoundCodeAudio', 'POST', '/', 'json', true, 'form', request);
}

model GetSoundCodeScheduleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model GetSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    description?: string(name='Description', example='test'),
    endDate?: string(name='EndDate', example='2022-03-28'),
    endTime?: string(name='EndTime', example='23:59'),
    gmtCreate?: long(name='GmtCreate', example='1620634297000'),
    name?: string(name='Name', example='test'),
    openType?: string(name='OpenType', example='INNER'),
    scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
    startDate?: string(name='StartDate', example='2022-03-28'),
    startTime?: string(name='StartTime', example='00:00'),
    status?: string(name='Status', example='WORKING'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='iot.soundcodeservice.NotSigned'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: GetSoundCodeScheduleResponseBody(name='body'),
}

async function getSoundCodeSchedule(request: GetSoundCodeScheduleRequest): GetSoundCodeScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSoundCodeSchedule', 'POST', '/', 'json', true, 'form', request);
}

model GetSpeechDeviceDetailRequest {
  iotId: string(name='IotId', example='4de2c367****8c585e5992**', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
}

model GetSpeechDeviceDetailResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    availableSpace?: float(name='AvailableSpace', example='200'),
    deviceName?: string(name='DeviceName', example='test'),
    iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    speechListUpdateTime?: long(name='SpeechListUpdateTime', example='1620624606000'),
    status?: string(name='Status', example='ONLINE'),
    totalSpace?: float(name='TotalSpace', example='2000'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpeechDeviceDetailResponseBody(name='body'),
}

async function getSpeechDeviceDetail(request: GetSpeechDeviceDetailRequest): GetSpeechDeviceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpeechDeviceDetail', 'POST', '/', 'json', true, 'form', request);
}

model GetSpeechLicenseDeviceStatisticsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***', position='Body'),
}

model GetSpeechLicenseDeviceStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    availableQuota?: int32(name='AvailableQuota', example='100'),
    expiredQuota?: int32(name='ExpiredQuota', example='100'),
    expiringQuota?: int32(name='ExpiringQuota', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechLicenseDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpeechLicenseDeviceStatisticsResponseBody(name='body'),
}

async function getSpeechLicenseDeviceStatistics(request: GetSpeechLicenseDeviceStatisticsRequest): GetSpeechLicenseDeviceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpeechLicenseDeviceStatistics', 'POST', '/', 'json', true, 'form', request);
}

model GetSpeechVoiceRequest {
}

model GetSpeechVoiceResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    items?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value', example='tongyong'),
      voiceList?: {
        items?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value', example='Xiaoyun'),
        }
      ](name='Items')
      }(name='VoiceList'),
    }
  ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='F94F72A5-82F0-496F-9AC2-3DBCFF77608A'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechVoiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpeechVoiceResponseBody(name='body'),
}

async function getSpeechVoice(request: GetSpeechVoiceRequest): GetSpeechVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpeechVoice', 'POST', '/', 'json', false, 'json', request);
}

model GetStudioAppTokenOpenRequest {
  appId: string(name='AppId', example='a12******', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a123*******', position='Body'),
}

model GetStudioAppTokenOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    bizId?: string(name='BizId', example='a12*******'),
    bizType?: string(name='BizType', example='webApp'),
    isEnable?: string(name='IsEnable', example='YES'),
    token?: string(name='Token', example='25bf576a6c*******'),
    type?: string(name='Type', example='custom'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  body: GetStudioAppTokenOpenResponseBody(name='body'),
}

async function getStudioAppTokenOpen(request: GetStudioAppTokenOpenRequest): GetStudioAppTokenOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStudioAppTokenOpen', 'POST', '/', 'json', true, 'form', request);
}

model GetThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  simple?: boolean(name='Simple', example='true', position='Query'),
}

model GetThingModelTslResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    tslStr?: string(name='TslStr', example='{\\"schema\\":\\"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json\\",\\"profile\\":{\\"productKey\\":\\"a14TeWI****\\"},\\"properties\\":[{\\"identifier\\":\\"Humidity\\"}]}'),
    tslUri?: string(name='TslUri', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119&OSSAccessKeyId=LTAIuFOwFSR9****&Signature=5i389hacjdj3t%2FnrHmQpEUfnxw****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingModelTslResponseBody(name='body'),
}

async function getThingModelTsl(request: GetThingModelTslRequest): GetThingModelTslResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingModelTsl', 'POST', '/', 'json', false, 'json', request);
}

model GetThingModelTslPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****', position='Query'),
  simple?: boolean(name='Simple', example='true', position='Query'),
}

model GetThingModelTslPublishedResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    tslStr?: string(name='TslStr', example='{\\"schema\\":\\"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json\\",\\"profile\\":{\\"productKey\\":\\"a14TeWI****\\"},\\"properties\\":[{\\"identifier\\":\\"Humidity\\"}]}'),
    tslUri?: string(name='TslUri', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119&OSSAccessKeyId=LTAIuFOwFSR9****&Signature=5i389hacjdj3t%2FnrHmQpEUfnxw****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingModelTslPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingModelTslPublishedResponseBody(name='body'),
}

async function getThingModelTslPublished(request: GetThingModelTslPublishedRequest): GetThingModelTslPublishedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingModelTslPublished', 'POST', '/', 'json', false, 'json', request);
}

model GetThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1Q5XoY****', position='Query'),
}

model GetThingScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    scriptType?: string(name='ScriptType', example='JavaScript'),
    scriptUrl?: string(name='ScriptUrl', example='http://***'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model GetThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingScriptResponseBody(name='body'),
}

async function getThingScript(request: GetThingScriptRequest): GetThingScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingScript', 'POST', '/', 'json', false, 'json', request);
}

model GetThingTemplateRequest {
  categoryKey?: string(name='CategoryKey', example='Lighting', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****', position='Query'),
}

model GetThingTemplateResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  thingModelJSON?: string(name='ThingModelJSON', example='{ "properties":[],"services":[], "events":[]}'),
}

model GetThingTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingTemplateResponseBody(name='body'),
}

async function getThingTemplate(request: GetThingTemplateRequest): GetThingTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetThingTopoRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageNo: int32(name='PageNo', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model GetThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    list?: {
      deviceInfo?: [ 
      {
        deviceName?: string(name='DeviceName', example='light'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='deviceInfo')
    }(name='List'),
    pageCount?: long(name='PageCount', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: long(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingTopoResponseBody(name='body'),
}

async function getThingTopo(request: GetThingTopoRequest): GetThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model GisQueryDeviceLocationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l', position='Query'),
  thingList: [ 
    {
      deviceName?: string(name='DeviceName', example='mock_device_name'),
      productKey?: string(name='ProductKey', example='g3r****Vjta'),
    }
  ](name='ThingList', position='Query'),
}

model GisQueryDeviceLocationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      adcode?: long(name='Adcode', example='90000'),
      city?: string(name='City'),
      coordinateSystem?: int32(name='CoordinateSystem', example='1'),
      country?: string(name='Country'),
      deviceName?: string(name='DeviceName', example='mock_device_name'),
      ip?: string(name='Ip', example='127.0.0.1'),
      latitude?: float(name='Latitude', example='30.0'),
      longitude?: float(name='Longitude', example='120.0'),
      productKey?: string(name='ProductKey', example='g3r****Vjta'),
      province?: string(name='Province'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model GisQueryDeviceLocationResponse = {
  headers: map[string]string(name='headers'),
  body: GisQueryDeviceLocationResponseBody(name='body'),
}

async function gisQueryDeviceLocation(request: GisQueryDeviceLocationRequest): GisQueryDeviceLocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GisQueryDeviceLocation', 'POST', '/', 'json', false, 'json', request);
}

model GisSearchDeviceTraceRequest {
  deviceName: string(name='DeviceName', example='mock_device_name', position='Query'),
  endTime: long(name='EndTime', example='1645071254000', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l', position='Query'),
  mapMatch: int32(name='MapMatch', example='0', position='Query'),
  productKey: string(name='ProductKey', example='g3r****Vjta', position='Query'),
  startTime: long(name='StartTime', example='1645071254000', position='Query'),
}

model GisSearchDeviceTraceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    deviceName?: string(name='DeviceName', example='mock_device_name'),
    points?: [ 
      {
        locateTime?: long(name='LocateTime', example='1645071254000'),
        location?: string(name='Location', example='120.0,30.0'),
      }
    ](name='Points'),
    productKey?: string(name='ProductKey', example='g3r****Vjta'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model GisSearchDeviceTraceResponse = {
  headers: map[string]string(name='headers'),
  body: GisSearchDeviceTraceResponseBody(name='body'),
}

async function gisSearchDeviceTrace(request: GisSearchDeviceTraceRequest): GisSearchDeviceTraceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GisSearchDeviceTrace', 'POST', '/', 'json', false, 'json', request);
}

model ImportDTDataRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-****001', position='Body'),
  items: [ 
    {
      deviceName: string(name='DeviceName', example='Device1'),
      params: string(name='Params', example='{"key1":12,"key2":56}'),
    }
  ](name='Items', position='Body'),
  productKey: string(name='ProductKey', example='dgb9****', position='Body'),
}

model ImportDTDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ImportDTDataResponse = {
  headers: map[string]string(name='headers'),
  body: ImportDTDataResponseBody(name='body'),
}

async function importDTData(request: ImportDTDataRequest): ImportDTDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportDTData', 'POST', '/', 'json', true, 'form', request);
}

model ImportDeviceRequest {
  deviceName: string(name='DeviceName', example='light', position='Query'),
  deviceSecret: string(name='DeviceSecret', example='b4d43f7******10ba5e5', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****', position='Query'),
  nickname?: string(name='Nickname', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  sn?: string(name='Sn', example='QC4******001', position='Query'),
}

model ImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
    iotId?: string(name='IotId', example='1O4YPNtRqB2anumz2Canp4GB7*****'),
    nickname?: string(name='Nickname'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    sn?: string(name='Sn', example='QC4******001'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model ImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ImportDeviceResponseBody(name='body'),
}

async function importDevice(request: ImportDeviceRequest): ImportDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportDevice', 'POST', '/', 'json', false, 'json', request);
}

model ImportThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  functionBlockName?: string(name='FunctionBlockName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****', position='Query'),
  tslStr?: string(name='TslStr', example='{"schema":"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json","profile":{"productKey":"a14TeW****"},"properties":[]}', position='Query'),
  tslUrl?: string(name='TslUrl', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119...', position='Query'),
}

model ImportThingModelTslResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ImportThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  body: ImportThingModelTslResponseBody(name='body'),
}

async function importThingModelTsl(request: ImportThingModelTslRequest): ImportThingModelTslResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportThingModelTsl', 'POST', '/', 'json', false, 'json', request);
}

model InvokeDataAPIServiceRequest {
  apiSrn: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  param?: [ 
    {
      listParamType?: string(name='ListParamType', example='VARCHAR'),
      listParamValue?: [ string ](name='ListParamValue', example='["1","2","3"]'),
      paramName?: string(name='ParamName', example='status'),
      paramType?: string(name='ParamType', example='VARCHAR'),
      paramValue?: string(name='ParamValue', example='1'),
    }
  ](name='Param', position='Body'),
}

model InvokeDataAPIServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    fieldNameList?: {
      fieldNameList?: [ string ](name='FieldNameList')
    }(name='FieldNameList'),
    pageNo?: int32(name='PageNo', example='0'),
    pageSize?: int32(name='PageSize', example='1'),
    resultList?: {
      resultList?: [  map[string]any ](name='ResultList')
    }(name='ResultList'),
    totalSize?: int32(name='TotalSize', example='2'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E68FE5DC-4D7B-4987-B785-DF8C6F191F5D'),
  success?: boolean(name='Success', example='true'),
}

model InvokeDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeDataAPIServiceResponseBody(name='body'),
}

async function invokeDataAPIService(request: InvokeDataAPIServiceRequest): InvokeDataAPIServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeDataAPIService', 'POST', '/', 'json', true, 'form', request);
}

model InvokeThingServiceRequest {
  args: string(name='Args', example='{"param1":1}', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  identifier: string(name='Identifier', example='Set', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model InvokeThingServiceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='abcabcabc1234****'),
    result?: string(name='Result', example='{"param1":1}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model InvokeThingServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeThingServiceResponseBody(name='body'),
}

async function invokeThingService(request: InvokeThingServiceRequest): InvokeThingServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeThingService', 'POST', '/', 'json', false, 'json', request);
}

model InvokeThingsServiceRequest {
  args: string(name='Args', example='{"param1":1}', position='Query'),
  deviceName: [ string ](name='DeviceName', example='device1', position='Query'),
  identifier: string(name='Identifier', example='Set', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model InvokeThingsServiceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model InvokeThingsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeThingsServiceResponseBody(name='body'),
}

async function invokeThingsService(request: InvokeThingsServiceRequest): InvokeThingsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeThingsService', 'POST', '/', 'json', false, 'json', request);
}

model ListAnalyticsDataRequest {
  apiPath: string(name='ApiPath', example='/iot-cn-npk1v******/system/query/hist_dev_cnt_stat', position='Query'),
  condition?: [ 
    {
      betweenEnd?: string(name='BetweenEnd', example='5'),
      betweenStart?: string(name='BetweenStart', example='1'),
      fieldName: string(name='FieldName', example='testCode'),
      operate: string(name='Operate', example='='),
      value?: string(name='Value', example='4'),
    }
  ](name='Condition', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-cn-npk1u******', position='Query'),
  isoId?: string(name='IsoId', example='oxs_iso_id', position='Query'),
  pageNum?: int32(name='PageNum', example='1', minimum=1, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', example='100', minimum=1, maximum=20000, position='Query'),
}

model ListAnalyticsDataResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    count?: long(name='Count', example='3'),
    hasNext?: boolean(name='HasNext', example='false'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    resultJson?: string(name='ResultJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='7EC5B624-AF1B-4C4D-BA82-A02BA1******'),
  success?: boolean(name='Success', example='false'),
}

model ListAnalyticsDataResponse = {
  headers: map[string]string(name='headers'),
  body: ListAnalyticsDataResponseBody(name='body'),
}

async function listAnalyticsData(request: ListAnalyticsDataRequest): ListAnalyticsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnalyticsData', 'POST', '/', 'json', false, 'json', request);
}

model ListDataSourceItemRequest {
  dataSourceId: long(name='DataSourceId', example='1001', minimum=0, maximum=9223372036854775807, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t***', position='Query'),
  page: int32(name='Page', example='1', minimum=1, maximum=100000, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  searchName?: string(name='SearchName', example='thing', position='Query'),
}

model ListDataSourceItemResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSourceItems?: {
    dataSourceItem?: [ 
    {
      dataSourceItemId?: long(name='DataSourceItemId', example='129322'),
      deviceName?: string(name='DeviceName'),
      productKey?: string(name='ProductKey'),
      scopeType?: string(name='ScopeType'),
      topic?: string(name='Topic', example='/gyh***z/+/thing/event/property/post'),
    }
  ](name='dataSourceItem')
  }(name='DataSourceItems'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourceItemResponseBody(name='body'),
}

async function listDataSourceItem(request: ListDataSourceItemRequest): ListDataSourceItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceItem', 'POST', '/', 'json', false, 'json', request);
}

model ListDestinationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  page: int32(name='Page', example='1', minimum=1, maximum=9999999, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  searchName?: string(name='SearchName', example='DataPurpose', position='Query'),
  types?: [ string ](name='Types', example='["REPUBLISH", "OTS"]', position='Query'),
}

model ListDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destinations?: {
    destinations?: [ 
    {
      configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
      description?: string(name='Description'),
      destinationId?: long(name='DestinationId', example='1003'),
      isFailover?: boolean(name='IsFailover', example='false'),
      name?: string(name='Name', example='DataPurpose'),
      status?: string(name='Status'),
      type?: string(name='Type', example='REPUBLISH'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    }
  ](name='destinations')
  }(name='Destinations'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: ListDestinationResponseBody(name='body'),
}

async function listDestination(request: ListDestinationRequest): ListDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDestination', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceDistributeJobRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001', position='Body'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1T27vz****', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
  targetUid?: string(name='TargetUid', example='198***', position='Query'),
}

model ListDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    jobInfo?: {
      items?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1581595942000'),
        jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName'),
        sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', example='198***'),
        status?: int32(name='Status', example='1'),
        strategy?: int32(name='Strategy', example='0'),
        targetInstanceConfigs?: {
          targetInstanceConfigs?: [ 
          {
            targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***'),
            targetInstanceName?: string(name='TargetInstanceName'),
            targetRegion?: string(name='TargetRegion', example='cn-shanghai'),
          }
        ](name='targetInstanceConfigs')
        }(name='TargetInstanceConfigs'),
        targetUid?: string(name='TargetUid', example='198***'),
        total?: int32(name='Total', example='5'),
      }
    ](name='items')
    }(name='JobInfo'),
    nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceDistributeJobResponseBody(name='body'),
}

async function listDeviceDistributeJob(request: ListDeviceDistributeJobRequest): ListDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceDistributeJob', 'POST', '/', 'json', true, 'form', request);
}

model ListDistributedDeviceRequest {
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Query'),
  deviceName?: string(name='DeviceName', example='mydevice', position='Query'),
  pageSize: int32(name='PageSize', example='5', minimum=1, maximum=200, position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', example='iot-060***', position='Query'),
  targetUid?: string(name='TargetUid', example='198***', position='Query'),
}

model ListDistributedDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    info?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='mydevice'),
        gmtCreate?: long(name='GmtCreate', example='1581595942000'),
        gmtModified?: long(name='GmtModified', example='1581595942222'),
        productKey?: string(name='ProductKey', example='a1BwAGV***'),
        sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName', example='myproInstance'),
        sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', example='198***'),
        targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com'),
        targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-09k***'),
        targetInstanceName?: string(name='TargetInstanceName', example='newinstance'),
        targetRegion?: string(name='TargetRegion', example='cn-shenzhen'),
        targetUid?: string(name='TargetUid', example='198***'),
      }
    ](name='items')
    }(name='Info'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListDistributedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListDistributedDeviceResponseBody(name='body'),
}

async function listDistributedDevice(request: ListDistributedDeviceRequest): ListDistributedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDistributedDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListDistributedProductRequest {
  currentPage: int32(name='CurrentPage', example='1', minimum=1, position='Query'),
  pageSize: int32(name='PageSize', example='5', minimum=1, maximum=200, position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', example='iot-060***', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***', position='Query'),
  targetUid?: string(name='TargetUid', example='198***', position='Query'),
}

model ListDistributedProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    info?: {
      items?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1581595942'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName', example='myproInstance'),
        sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', example='198***'),
        targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com'),
        targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-09k***'),
        targetInstanceName?: string(name='TargetInstanceName', example='newinstance'),
        targetRegion?: string(name='TargetRegion', example='cn-shenzhen'),
        targetUid?: string(name='TargetUid', example='198***'),
      }
    ](name='items')
    }(name='Info'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListDistributedProductResponse = {
  headers: map[string]string(name='headers'),
  body: ListDistributedProductResponseBody(name='body'),
}

async function listDistributedProduct(request: ListDistributedProductRequest): ListDistributedProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDistributedProduct', 'POST', '/', 'json', false, 'json', request);
}

model ListJobRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  status?: string(name='Status', example='IN_PROGRESS', position='Query'),
}

model ListJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      description?: string(name='Description', example='TestDescription'),
      jobId?: string(name='JobId', example='Z20nyanW5****010001'),
      jobName?: string(name='JobName', example='MyTestJobOEfwJN'),
      scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
      status?: string(name='Status', example='COMPLETED'),
      type?: string(name='Type', example='CUSTOM_JOB'),
      utcCreate?: string(name='UtcCreate', example='2019-05-21T11:45:37.000Z'),
      utcModified?: string(name='UtcModified', example='2019-05-21T17:15:46.000Z'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='BF449394-1C7D-4144-B7C4-9C3FA29F8B64'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='20'),
}

model ListJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobResponseBody(name='body'),
}

async function listJob(request: ListJobRequest): ListJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJob', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAFirmwareRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  destVersion?: string(name='DestVersion', example='4.0.0', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a19mzPZ****', position='Query'),
}

model ListOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  errorMessage?: string(name='ErrorMessage'),
  firmwareInfo?: {
    simpleFirmwareInfo?: [ 
    {
      destVersion?: string(name='DestVersion', example='4.0.0'),
      firmwareDesc?: string(name='FirmwareDesc', example='firmwareDesc'),
      firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
      firmwareName?: string(name='FirmwareName', example='t3q5rkNm'),
      firmwareSign?: string(name='FirmwareSign', example='3d04ab6462633508606e5f3daac8****'),
      firmwareSize?: int32(name='FirmwareSize', example='924'),
      moduleName?: string(name='ModuleName', example='module1234'),
      productKey?: string(name='ProductKey', example='a19mzPZ****'),
      productName?: string(name='ProductName', example='MyProduct'),
      signMethod?: string(name='SignMethod', example='MD5'),
      srcVersion?: string(name='SrcVersion', example='V1.0.0'),
      status?: int32(name='Status', example='0'),
      type?: int32(name='Type', example='0'),
      utcCreate?: string(name='UtcCreate', example='2019-12-28T02:42:22.000Z'),
      utcModified?: string(name='UtcModified', example='2019-12-28T02:42:22.000Z'),
    }
  ](name='SimpleFirmwareInfo')
  }(name='FirmwareInfo'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model ListOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAFirmwareResponseBody(name='body'),
}

async function listOTAFirmware(request: ListOTAFirmwareRequest): ListOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAJobByDeviceRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  deviceName: string(name='DeviceName', example='light1', position='Query'),
  firmwareId: string(name='FirmwareId', example='FJFx8JzpnhpIsKftRjjm03****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey: string(name='ProductKey', example='a19mzPZ****', position='Query'),
}

model ListOTAJobByDeviceResponseBody = {
  code?: string(name='Code', example='MissingFirmwareId'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId', example='FJFx8JzpnhpIsKftRjjm03****'),
      jobId?: string(name='JobId', example='HvKuBpuk3rdk6E92CP****'),
      jobStatus?: string(name='JobStatus', example='COMPLETED'),
      jobType?: string(name='JobType', example='UPGRADE_FIRMWARE'),
      productKey?: string(name='ProductKey', example='a19mzPZ****'),
      selectionType?: string(name='SelectionType', example='STATIC'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
      targetSelection?: string(name='TargetSelection', example='ALL'),
      utcCreate?: string(name='UtcCreate', example='2019-12-28T02:43:10.000Z'),
      utcEndTime?: string(name='UtcEndTime', example='2019-12-29T02:43:10.000Z'),
      utcModified?: string(name='UtcModified', example='2019-12-29T02:43:10.000Z'),
      utcStartTime?: string(name='UtcStartTime', example='2019-12-29T02:43:10.000Z'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='FirmwareId is mandatory for this action'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model ListOTAJobByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAJobByDeviceResponseBody(name='body'),
}

async function listOTAJobByDevice(request: ListOTAJobByDeviceRequest): ListOTAJobByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAJobByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAJobByFirmwareRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  firmwareId: string(name='FirmwareId', example='FJFx8JzpnhpIsKftRjjm03****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model ListOTAJobByFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
      jobId?: string(name='JobId', example='HvKuBpuk3rdk6E92CP****0200'),
      jobStatus?: string(name='JobStatus', example='IN_PROGRESS'),
      jobType?: string(name='JobType', example='UPGRADE_FIRMWARE'),
      productKey?: string(name='ProductKey', example='a19mzPZ****'),
      selectionType?: string(name='SelectionType', example='STATIC'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
      targetSelection?: string(name='TargetSelection', example='SPECIFIC'),
      utcCreate?: string(name='UtcCreate', example='2019-12-28T02:43:10.000Z'),
      utcEndTime?: string(name='UtcEndTime', example='2019-12-29T02:43:10.000Z'),
      utcModified?: string(name='UtcModified', example='2019-12-28T02:43:10.000Z'),
      utcStartTime?: string(name='UtcStartTime', example='2019-12-28T02:43:10.000Z'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5D58AC86-D5BF-4B39-834E-913E7F2C985D'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model ListOTAJobByFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAJobByFirmwareResponseBody(name='body'),
}

async function listOTAJobByFirmware(request: ListOTAJobByFirmwareRequest): ListOTAJobByFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAJobByFirmware', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAModuleByProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1uctKe****', position='Query'),
}

model ListOTAModuleByProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: [ 
    {
      aliasName?: string(name='AliasName'),
      desc?: string(name='Desc'),
      gmtCreate?: string(name='GmtCreate', example='2020-10-13T09:46Z'),
      gmtModified?: string(name='GmtModified', example='2020-10-19T09:46Z'),
      moduleName?: string(name='ModuleName', example='barcodeScanner'),
      productKey?: string(name='ProductKey', example='aluctKe****'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model ListOTAModuleByProductResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAModuleByProductResponseBody(name='body'),
}

async function listOTAModuleByProduct(request: ListOTAModuleByProductRequest): ListOTAModuleByProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAModuleByProduct', 'GET', '/', 'json', false, 'json', request);
}

model ListOTAModuleVersionsByDeviceRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  deviceName?: string(name='DeviceName', example='newdevice', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='aluctKe****', position='Query'),
}

model ListOTAModuleVersionsByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTAModuleInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='newDevice'),
      iotId?: string(name='IotId', example='QjIFT***000101'),
      moduleName?: string(name='ModuleName', example='barcodeScanner'),
      moduleVersion?: string(name='ModuleVersion', example='1.0'),
      productKey?: string(name='ProductKey', example='aluctKe****'),
    }
  ](name='SimpleOTAModuleInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='10'),
}

model ListOTAModuleVersionsByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAModuleVersionsByDeviceResponseBody(name='body'),
}

async function listOTAModuleVersionsByDevice(request: ListOTAModuleVersionsByDeviceRequest): ListOTAModuleVersionsByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAModuleVersionsByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListOTATaskByJobRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  deviceNames?: [ string ](name='DeviceNames', example='device1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  jobId: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  taskStatus?: string(name='TaskStatus', example='FAILED', position='Query'),
}

model ListOTATaskByJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion', example='1.0.1'),
      deviceName?: string(name='DeviceName', example='testDevice2'),
      firmwareId?: string(name='FirmwareId', example='q3j9OYBjUAZMv1hlMgdo03****'),
      iotId?: string(name='IotId', example='nadRdeffljdEndlfadgadfse****'),
      jobId?: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****'),
      productKey?: string(name='ProductKey', example='a1GUfrM****'),
      productName?: string(name='ProductName', example='MyProduct'),
      progress?: string(name='Progress', example='0.00'),
      srcVersion?: string(name='SrcVersion', example='1.0.0'),
      taskDesc?: string(name='TaskDesc', example='report version is not conform'),
      taskId?: string(name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
      taskStatus?: string(name='TaskStatus', example='FAILED'),
      timeout?: string(name='Timeout', example='1440'),
      utcCreate?: string(name='UtcCreate', example='2019-11-04T03:38:22.000Z'),
      utcModified?: string(name='UtcModified', example='2019-11-04T03:38:22.000Z'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model ListOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTATaskByJobResponseBody(name='body'),
}

async function listOTATaskByJob(request: ListOTATaskByJobRequest): ListOTATaskByJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTATaskByJob', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAUnfinishedTaskByDeviceRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='TfmUAeJjQQhCPH84UVNn0010c6****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-c3j***', position='Query'),
  moduleName?: string(name='ModuleName', example='WifiConfigModify', position='Query'),
  productKey?: string(name='ProductKey', example='a19mzPZ****', position='Query'),
  taskStatus: string(name='TaskStatus', example='CONFIRM', position='Query'),
}

model ListOTAUnfinishedTaskByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion', example='1.0.1'),
      deviceName?: string(name='DeviceName', example='light'),
      firmwareId?: string(name='FirmwareId', example='q3j9OYBjUAZMv1hlMgdo03****'),
      iotId?: string(name='IotId', example='nadRdeffljdEndlfadgadfse****'),
      jobId?: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****'),
      moduleName?: string(name='ModuleName', example='WifiConfigModify'),
      productKey?: string(name='ProductKey', example='a1GUfrM****'),
      productName?: string(name='ProductName', example='MyProduct'),
      srcVersion?: string(name='SrcVersion', example='1.0.0'),
      taskId?: string(name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
      taskStatus?: string(name='TaskStatus', example='CONFIRM'),
      utcCreate?: string(name='UtcCreate', example='2019-11-04T03:38:22.000Z'),
      utcModified?: string(name='UtcModified', example='2021-11-04T03:38:22.000Z'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', example='true'),
}

model ListOTAUnfinishedTaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAUnfinishedTaskByDeviceResponseBody(name='body'),
}

async function listOTAUnfinishedTaskByDevice(request: ListOTAUnfinishedTaskByDeviceRequest): ListOTAUnfinishedTaskByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAUnfinishedTaskByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListParserRequest {
  currentPage: int32(name='CurrentPage', example='1', minimum=1, maximum=100, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t****', position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=100, position='Query'),
  searchName?: string(name='SearchName', example='DataParser', position='Query'),
}

model ListParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    parserList?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name', example='DataParser'),
      parserId?: long(name='ParserId', example='1001'),
      status?: string(name='Status', example='STOP'),
      utcCreated?: string(name='UtcCreated', example='2022-03-21T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2022-03-25T12:45:43.000Z'),
    }
  ](name='ParserList')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListParserResponse = {
  headers: map[string]string(name='headers'),
  body: ListParserResponseBody(name='body'),
}

async function listParser(request: ListParserRequest): ListParserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListParser', 'POST', '/', 'json', false, 'json', request);
}

model ListParserDataSourceRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  page: int32(name='Page', example='1', minimum=1, maximum=999999, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Query'),
  searchName?: string(name='SearchName', example='DataSource', position='Query'),
}

model ListParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dataSource?: [ 
    {
      dataSourceId?: long(name='DataSourceId', example='1001'),
      description?: string(name='Description'),
      name?: string(name='Name', example='DataSource'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    }
  ](name='DataSource')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListParserDataSourceResponseBody(name='body'),
}

async function listParserDataSource(request: ListParserDataSourceRequest): ListParserDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListParserDataSource', 'POST', '/', 'json', false, 'json', request);
}

model ListParserDestinationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  isFailover?: boolean(name='IsFailover', example='false', position='Query'),
  parserId: long(name='ParserId', example='1002', minimum=0, maximum=9999999999, position='Query'),
}

model ListParserDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    destinations?: [ 
    {
      configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
      destinationId?: long(name='DestinationId', example='1003'),
      isFailover?: boolean(name='IsFailover', example='false'),
      name?: string(name='Name', example='DataPurpose'),
      type?: string(name='Type', example='REPUBLISH'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2022-05-27T12:45:43.000Z'),
    }
  ](name='destinations')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model ListParserDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: ListParserDestinationResponseBody(name='body'),
}

async function listParserDestination(request: ListParserDestinationRequest): ListParserDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListParserDestination', 'POST', '/', 'json', false, 'json', request);
}

model ListProductByTagsRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productTag: [ 
    {
      tagKey: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='102'),
    }
  ](name='ProductTag', position='Query'),
}

model ListProductByTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  productInfos?: {
    productInfo?: [ 
    {
      createTime?: long(name='CreateTime', example='1545355537000'),
      description?: string(name='Description', example='This is a test product.'),
      nodeType?: int32(name='NodeType', example='0'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      productName?: string(name='ProductName'),
    }
  ](name='ProductInfo')
  }(name='ProductInfos'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListProductByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductByTagsResponseBody(name='body'),
}

async function listProductByTags(request: ListProductByTagsRequest): ListProductByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductByTags', 'POST', '/', 'json', false, 'json', request);
}

model ListProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model ListProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='102'),
    }
  ](name='ProductTag')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductTagsResponseBody(name='body'),
}

async function listProductTags(request: ListProductTagsRequest): ListProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductTags', 'POST', '/', 'json', false, 'json', request);
}

model ListRuleRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='2', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****', position='Query'),
}

model ListRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    ruleInfo?: [ 
    {
      createUserId?: long(name='CreateUserId', example='1231579085000000'),
      created?: string(name='Created', example='Wed Feb 27 20:45:43 CST 2019'),
      dataType?: string(name='DataType', example='JSON'),
      id?: long(name='Id', example='151454'),
      modified?: string(name='Modified', example='Wed Feb 27 20:45:43 CST 2019'),
      name?: string(name='Name', example='test123'),
      productKey?: string(name='ProductKey', example='a1KiV******'),
      ruleDesc?: string(name='RuleDesc', example='rule1Desc'),
      select?: string(name='Select', example='deviceName() as deviceName'),
      shortTopic?: string(name='ShortTopic', example='+/thing/event/property/post'),
      status?: string(name='Status', example='STOP'),
      topic?: string(name='Topic', example='/a1T27vz****/+/thing/event/property/post'),
      utcCreated?: string(name='UtcCreated', example='2019-02-27T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2019-02-27T12:45:43.000Z'),
      where?: string(name='Where', example='Temperature>35'),
    }
  ](name='RuleInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', example='1564B626-DE97-452D-9E9B-305888AC6105'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='25'),
}

model ListRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleResponseBody(name='body'),
}

async function listRule(request: ListRuleRequest): ListRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRule', 'POST', '/', 'json', false, 'json', request);
}

model ListRuleActionsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: long(name='RuleId', example='10000', position='Query'),
}

model ListRuleActionsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='22254BDB-3DC1-4643-8D1B-EE0437EF09A9'),
  ruleActionList?: {
    ruleActionInfo?: [ 
    {
      configuration?: string(name='Configuration', example='{\\"endPoint\\":\\"http://ShanghaiRegion.cn-shanghai.ots.aliyuncs.com\\",\\"instanceName\\":\\"ShanghaiRegion\\",\\"primaryKeys\\":[{\\"columnName\\":\\"temperature\\",\\"columnType\\":\\"INTEGER\\",\\"columnValue\\":\\"${deviceName}\\"}],\\"regionName\\":\\"cn-shanghai\\",\\"role\\":{\\"roleArn\\":\\"acs:ram::1231579085******:role/aliyuniotaccessingotsrole\\",\\"roleName\\":\\"AliyunIOTAccessingOTSRole\\"},\\"tableName\\":\\"iottest\\",\\"uid\\":\\"1231579085******\\"}'),
      errorActionFlag?: boolean(name='ErrorActionFlag', example='false'),
      id?: long(name='Id', example='139099'),
      ruleId?: long(name='RuleId', example='10000'),
      status?: string(name='Status', example='NORMAL'),
      type?: string(name='Type', example='OTS'),
    }
  ](name='RuleActionInfo')
  }(name='RuleActionList'),
  success?: boolean(name='Success', example='true'),
}

model ListRuleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleActionsResponseBody(name='body'),
}

async function listRuleActions(request: ListRuleActionsRequest): ListRuleActionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRuleActions', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskRequest {
  device?: map[string]any(name='Device', example='{}', shrink='json', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobId?: string(name='JobId', example='sGWotgRk***010001', position='Query'),
  limit: int32(name='Limit', example='10', minimum=1, maximum=50, position='Query'),
  nextToken?: string(name='NextToken', example='22dhgg***', position='Query'),
  status?: string(name='Status', example='QUEUED', position='Query'),
}

model ListTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName', example='mydevice'),
      iotId?: string(name='IotId', example='BDjhIC***i000101'),
      jobId?: string(name='JobId', example='sGWotg***010001'),
      jobName?: string(name='JobName', example='MyTestJobIax6Eq'),
      productKey?: string(name='ProductKey', example='a1S0OM***'),
      progress?: string(name='Progress', example='80'),
      status?: string(name='Status', example='SUCCEEDED'),
      taskId?: string(name='TaskId', example='MSnT9wl***q010101'),
      utcModified?: string(name='UtcModified', example='2019-05-21T13:03:56.000Z'),
      utcQueueTime?: string(name='UtcQueueTime', example='2019-05-21T13:03:53.000Z'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='223sdf***'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskResponseBody(name='body'),
}

async function listTask(request: ListTaskRequest): ListTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTask', 'POST', '/', 'json', false, 'json', request);
}

model ListThingModelVersionRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model ListThingModelVersionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    modelVersions?: [ 
      {
        description?: string(name='Description'),
        gmtCreate?: long(name='GmtCreate', example='1579235657535'),
        modelVersion?: string(name='ModelVersion', example='V1.0.0'),
      }
    ](name='ModelVersions'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListThingModelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ListThingModelVersionResponseBody(name='body'),
}

async function listThingModelVersion(request: ListThingModelVersionRequest): ListThingModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListThingModelVersion', 'POST', '/', 'json', false, 'json', request);
}

model ListThingTemplatesRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model ListThingTemplatesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: [ 
    {
      categoryKey?: string(name='CategoryKey', example='lighting'),
      categoryName?: string(name='CategoryName'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListThingTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListThingTemplatesResponseBody(name='body'),
}

async function listThingTemplates(request: ListThingTemplatesRequest): ListThingTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListThingTemplates', 'POST', '/', 'json', false, 'json', request);
}

model NotifyAddThingTopoRequest {
  deviceListStr?: string(name='DeviceListStr', example='[{"productKey":"a1BwAGV****","deviceName":"device1"},{"IotId":"Q7uOhVRdZRRlDnTLv****00100"}]', position='Query'),
  gwDeviceName?: string(name='GwDeviceName', example='gateway', position='Query'),
  gwIotId?: string(name='GwIotId', example='vWxNur6BUApsqjv****4000100', position='Query'),
  gwProductKey?: string(name='GwProductKey', example='a1T27vz****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model NotifyAddThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='5443123'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model NotifyAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: NotifyAddThingTopoResponseBody(name='body'),
}

async function notifyAddThingTopo(request: NotifyAddThingTopoRequest): NotifyAddThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'NotifyAddThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model OpenIotServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model OpenIotServiceResponseBody = {
  orderId?: string(name='OrderId', example='20671870***'),
  requestId?: string(name='RequestId', example='427DB0B3-9436-4A3C-B2BC-B961F95E9488'),
}

model OpenIotServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenIotServiceResponseBody(name='body'),
}

async function openIotService(request: OpenIotServiceRequest): OpenIotServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenIotService', 'POST', '/', 'json', false, 'json', request);
}

model PackageSoundCodeLabelBatchAudioRequest {
  batchCode: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
}

model PackageSoundCodeLabelBatchAudioResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='http://****.oss-cn-shanghai.aliyuncs.com/speech_test_audio/CPjUL8qUtOMoQmC******.wav?Expires=1620380723'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PackageSoundCodeLabelBatchAudioResponse = {
  headers: map[string]string(name='headers'),
  body: PackageSoundCodeLabelBatchAudioResponseBody(name='body'),
}

async function packageSoundCodeLabelBatchAudio(request: PackageSoundCodeLabelBatchAudioRequest): PackageSoundCodeLabelBatchAudioResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PackageSoundCodeLabelBatchAudio', 'POST', '/', 'json', true, 'form', request);
}

model PageQuerySharedSpeechOpenRequest {
  deviceName?: string(name='DeviceName', example='device1', position='Body'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Body'),
  pageId?: int32(name='PageId', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  productKey?: string(name='ProductKey', example='sd34****', position='Body'),
  shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****', position='Body'),
  status?: int32(name='Status', example='1', position='Body'),
}

model PageQuerySharedSpeechOpenResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  data?: {
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    resultData?: {
      data?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='identifying'),
        code?: string(name='Code', example='ws****'),
        speechRate?: int32(name='SpeechRate', example='50'),
        status?: int32(name='Status', example='1'),
        text?: string(name='Text', example='test'),
        voice?: string(name='Voice', example='Siyue'),
        volume?: int32(name='Volume', example='50'),
      }
    ](name='Data')
    }(name='ResultData'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model PageQuerySharedSpeechOpenResponse = {
  headers: map[string]string(name='headers'),
  body: PageQuerySharedSpeechOpenResponseBody(name='body'),
}

async function pageQuerySharedSpeechOpen(request: PageQuerySharedSpeechOpenRequest): PageQuerySharedSpeechOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageQuerySharedSpeechOpen', 'POST', '/', 'json', true, 'form', request);
}

model PageQuerySpeechBroadcastHourRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=2000, position='Body'),
  pageToken?: string(name='PageToken', example='TGlzdFJlc291cm****', position='Body'),
  queryDateTimeHour: string(name='QueryDateTimeHour', example='2020090919', position='Query'),
  shareTaskCode: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****', position='Body'),
}

model PageQuerySpeechBroadcastHourResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    pageToken?: string(name='PageToken', example='TGlzdFJlc291cm****'),
    resultData?: {
      data?: [ 
      {
        code?: int32(name='Code', example='0'),
        deviceName?: string(name='DeviceName', example='device1'),
        msg?: string(name='Msg'),
        productKey?: string(name='ProductKey', example='sd34****'),
        shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
        speechId?: string(name='SpeechId', example='42000011392021112380****'),
        speechs?: string(name='Speechs', example='["ANC","CDF"]'),
        startTime?: long(name='StartTime', example='1663210172207'),
      }
    ](name='Data')
    }(name='ResultData'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model PageQuerySpeechBroadcastHourResponse = {
  headers: map[string]string(name='headers'),
  body: PageQuerySpeechBroadcastHourResponseBody(name='body'),
}

async function pageQuerySpeechBroadcastHour(request: PageQuerySpeechBroadcastHourRequest): PageQuerySpeechBroadcastHourResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PageQuerySpeechBroadcastHour', 'POST', '/', 'json', true, 'form', request);
}

model PrintByTemplateRequest {
  deviceName?: string(name='DeviceName', example='light', position='Body'),
  historyPrintTopic?: boolean(name='HistoryPrintTopic', example='true', position='Body'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  paramsJsonString?: string(name='ParamsJsonString', position='Body'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Body'),
  templateBizCode: string(name='TemplateBizCode', example='test', position='Body'),
}

model PrintByTemplateResponseBody = {
  code?: string(name='Code', example='iot.printservice.NotSigned'),
  data?: {
    deviceErrorCode?: string(name='DeviceErrorCode', example='2'),
    deviceErrorMessage?: string(name='DeviceErrorMessage', example='no paper'),
    id?: string(name='Id', example='NyWh5lw3*****RfL9LJUivhOhQV*****'),
    maxRetryCount?: int32(name='MaxRetryCount', example='2'),
    retryCount?: int32(name='RetryCount', example='0'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='print service not open'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PrintByTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: PrintByTemplateResponseBody(name='body'),
}

async function printByTemplate(request: PrintByTemplateRequest): PrintByTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PrintByTemplate', 'POST', '/', 'json', true, 'form', request);
}

model PubRequest {
  contentType?: string(name='ContentType', position='Query'),
  correlationData?: string(name='CorrelationData', example='aGVsbG8****', position='Query'),
  deviceName?: string(name='DeviceName', example='device1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  messageContent: string(name='MessageContent', example='eyJ0ZXN0IjoidGFzayBwdWIgYnJvYWRjYXN0In0=', position='Body'),
  payloadFormatIndicator?: int32(name='PayloadFormatIndicator', position='Query'),
  productKey: string(name='ProductKey', example='a1Q5XoY****', position='Query'),
  qos?: int32(name='Qos', example='0', position='Query'),
  responseTopic?: string(name='ResponseTopic', example='/a1Q5XoY****/device1/user/update', position='Query'),
  topicFullName: string(name='TopicFullName', example='/a1Q5XoY****/device1/user/get', position='Query'),
  userProp?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='UserProp', position='Query'),
}

model PubResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: string(name='MessageId', example='889455942124347329'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model PubResponse = {
  headers: map[string]string(name='headers'),
  body: PubResponseBody(name='body'),
}

async function pub(request: PubRequest): PubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Pub', 'POST', '/', 'json', true, 'form', request);
}

model PubBroadcastRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  messageContent: string(name='MessageContent', example='aGVsbG93b3JsZA', position='Query'),
  productKey: string(name='ProductKey', example='aldeji3*****', position='Query'),
  topicFullName?: string(name='TopicFullName', example='/broadcast/UPqSxj2vXXX/xxx', position='Query'),
}

model PubBroadcastResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId', example='1234291569964771840'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model PubBroadcastResponse = {
  headers: map[string]string(name='headers'),
  body: PubBroadcastResponseBody(name='body'),
}

async function pubBroadcast(request: PubBroadcastRequest): PubBroadcastResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PubBroadcast', 'POST', '/', 'json', false, 'json', request);
}

model PublishScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***', position='Query'),
  parserId: long(name='ParserId', example='1001', minimum=0, maximum=99999999, position='Query'),
}

model PublishScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  syntaxErrorMsg?: string(name='SyntaxErrorMsg', example='script doesn\\"t contains transmit function'),
}

model PublishScriptResponse = {
  headers: map[string]string(name='headers'),
  body: PublishScriptResponseBody(name='body'),
}

async function publishScript(request: PublishScriptRequest): PublishScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishScript', 'POST', '/', 'json', false, 'json', request);
}

model PublishStudioAppRequest {
  appId: string(name='AppId', example='a12*******', position='Body'),
  description?: string(name='Description', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a123******', position='Body'),
}

model PublishStudioAppResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model PublishStudioAppResponse = {
  headers: map[string]string(name='headers'),
  body: PublishStudioAppResponseBody(name='body'),
}

async function publishStudioApp(request: PublishStudioAppRequest): PublishStudioAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishStudioApp', 'POST', '/', 'json', true, 'form', request);
}

model PublishThingModelRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****', position='Query'),
}

model PublishThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model PublishThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: PublishThingModelResponseBody(name='body'),
}

async function publishThingModel(request: PublishThingModelRequest): PublishThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishThingModel', 'POST', '/', 'json', false, 'json', request);
}

model PushSpeechRequest {
  deviceName?: string(name='DeviceName', example='a1BwAGV****', position='Body'),
  groupId?: string(name='GroupId', example='4de2c367****8c585e5992**', position='Query'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  productKey?: string(name='ProductKey', example='light', position='Body'),
  projectCode: string(name='ProjectCode', example='4de2c367****8c585e5992**', position='Body'),
  pushMode: string(name='PushMode', example='SINGLE_DEVICE', position='Body'),
  speechCodeList: [ string ](name='SpeechCodeList', example='4de2c367****8c585e5992**', position='Body'),
}

model PushSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: string(name='Data', example='4de2c367****8c585e5992**'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PushSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: PushSpeechResponseBody(name='body'),
}

async function pushSpeech(request: PushSpeechRequest): PushSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushSpeech', 'POST', '/', 'json', true, 'form', request);
}

model QueryBatchRegisterDeviceStatusRequest {
  applyId: long(name='ApplyId', example='1295006', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryBatchRegisterDeviceStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidList?: {
      name?: [ string ](name='Name')
    }(name='InvalidList'),
    status?: string(name='Status', example='CREATE_SUCCESS'),
    validList?: {
      name?: [ string ](name='Name')
    }(name='ValidList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryBatchRegisterDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBatchRegisterDeviceStatusResponseBody(name='body'),
}

async function queryBatchRegisterDeviceStatus(request: QueryBatchRegisterDeviceStatusRequest): QueryBatchRegisterDeviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBatchRegisterDeviceStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryCertUrlByApplyIdRequest {
  applyId: long(name='ApplyId', example='1234567', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model QueryCertUrlByApplyIdResponseBody = {
  certUrl?: string(name='CertUrl', example='https://****'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryCertUrlByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCertUrlByApplyIdResponseBody(name='body'),
}

async function queryCertUrlByApplyId(request: QueryCertUrlByApplyIdRequest): QueryCertUrlByApplyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCertUrlByApplyId', 'POST', '/', 'json', false, 'json', request);
}

model QueryClientIdsRequest {
  iotId: string(name='IotId', example='y4u2weAIrpp****WHMle1234', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l', position='Query'),
}

model QueryClientIdsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    dynamicRegClientIds?: [ 
      {
        clientId?: string(name='ClientId', example='9rSzYt4js92********f000112'),
        createTime?: long(name='CreateTime', example='1636514022424'),
      }
    ](name='DynamicRegClientIds'),
    iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', example='true'),
}

model QueryClientIdsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryClientIdsResponseBody(name='body'),
}

async function queryClientIds(request: QueryClientIdsRequest): QueryClientIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryClientIds', 'POST', '/', 'json', false, 'json', request);
}

model QueryConsumerGroupByGroupIdRequest {
  groupId: string(name='GroupId', example='nJRaJPn5U1JITGf******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model QueryConsumerGroupByGroupIdResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    createTime?: string(name='CreateTime', example='2020-05-20T00:05:20.000Z'),
    groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
    groupName?: string(name='GroupName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model QueryConsumerGroupByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupByGroupIdResponseBody(name='body'),
}

async function queryConsumerGroupByGroupId(request: QueryConsumerGroupByGroupIdRequest): QueryConsumerGroupByGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConsumerGroupByGroupId', 'POST', '/', 'json', false, 'json', request);
}

model QueryConsumerGroupListRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  fuzzy?: boolean(name='Fuzzy', example='false', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  pageSize: int32(name='PageSize', example='2', position='Query'),
}

model QueryConsumerGroupListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    consumerGroupDTO?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-05-20T00:05:20.000Z'),
      groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
      groupName?: string(name='GroupName'),
    }
  ](name='ConsumerGroupDTO')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='4'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='8'),
}

model QueryConsumerGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupListResponseBody(name='body'),
}

async function queryConsumerGroupList(request: QueryConsumerGroupListRequest): QueryConsumerGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConsumerGroupList', 'POST', '/', 'json', false, 'json', request);
}

model QueryConsumerGroupStatusRequest {
  groupId: string(name='GroupId', example='nJRaJPn5U1JITGf******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model QueryConsumerGroupStatusResponseBody = {
  accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute', example='10'),
  accumulationCount?: int32(name='AccumulationCount', example='13'),
  clientConnectionStatusList?: {
    consumerGroupClientConnectionInfo?: [ 
    {
      accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute', example='10'),
      clientId?: string(name='ClientId', example='868575026******'),
      clientIpPort?: string(name='ClientIpPort', example='192.168.1.2:36918'),
      onlineTime?: long(name='OnlineTime', example='1591240546649'),
      realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute', example='5'),
    }
  ](name='ConsumerGroupClientConnectionInfo')
  }(name='ClientConnectionStatusList'),
  code?: string(name='Code', example='iot.system.SystemException'),
  consumerSpeed?: int32(name='ConsumerSpeed', example='14'),
  errorMessage?: string(name='ErrorMessage'),
  lastConsumerTime?: string(name='LastConsumerTime', example='2020-05-29T03:37:56.000Z'),
  realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute', example='14'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryConsumerGroupStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupStatusResponseBody(name='body'),
}

async function queryConsumerGroupStatus(request: QueryConsumerGroupStatusRequest): QueryConsumerGroupStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConsumerGroupStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDetailSceneRuleLogRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  endTime: int32(name='EndTime', example='1581918482', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
  ruleId: string(name='RuleId', example='e5dd1c7aa3994ecdbc88235979******', position='Query'),
  startTime: int32(name='StartTime', example='1581917582', position='Query'),
  traceId: string(name='TraceId', example='b662a9671581918480168107******', position='Query'),
}

model QueryDetailSceneRuleLogResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    logList?: [ 
      {
        code?: string(name='Code', example='9201'),
        message?: string(name='Message', example='device offline, productKey: a1c3t****, deviceName: my_device1'),
        pkDn?: string(name='PkDn', example='a1c3t****/my_device1'),
      }
    ](name='LogList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ED2DF141-B09A-4C8A-BAA5-30CCEE63036C'),
  success?: boolean(name='Success', example='true'),
}

model QueryDetailSceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDetailSceneRuleLogResponseBody(name='body'),
}

async function queryDetailSceneRuleLog(request: QueryDetailSceneRuleLogRequest): QueryDetailSceneRuleLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDetailSceneRuleLog', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291cm***', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId', example='dwnS41bhNxjslDAI****'),
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='sLefbFmN9SYfnWLJTePG893XNuRV****'),
      deviceStatus?: string(name='DeviceStatus', example='ONLINE'),
      deviceType?: string(name='DeviceType', example='Lighting'),
      gmtCreate?: string(name='GmtCreate', example='Wed, 20-Feb-2019 02:16:09 GMT'),
      gmtModified?: string(name='GmtModified', example='Wed, 20-Feb-2019 02:16:09 GMT'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      utcCreate?: string(name='UtcCreate', example='2019-02-20T02:16:09.000Z'),
      utcModified?: string(name='UtcModified', example='2019-02-20T02:16:09.000Z'),
    }
  ](name='DeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291cm***'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceResponseBody(name='body'),
}

async function queryDevice(request: QueryDeviceRequest): QueryDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceBySQLRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  SQL: string(name='SQL', example='SELECT * FROM device where product_key = "a1*********" limit 100, 20', position='Query'),
}

model QueryDeviceBySQLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: [ 
    {
      activeTime?: string(name='ActiveTime', example='2020-04-04 16:38:18.607'),
      deviceName?: string(name='DeviceName', example='light'),
      gmtCreate?: string(name='GmtCreate', example='2020-04-04 16:38:17.000'),
      gmtModified?: string(name='GmtModified', example='2020-04-04 16:38:19.000'),
      groups?: [ 
        {
          groupId?: string(name='GroupId', example='a1d21d2fas'),
        }
      ](name='Groups'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname'),
      OTAModules?: [ 
        {
          firmwareVersion?: string(name='FirmwareVersion', example='a1-dads2-dad2'),
          moduleName?: string(name='ModuleName', example='SomeSampleModule'),
        }
      ](name='OTAModules'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      status?: string(name='Status', example='ONLINE'),
      tags?: [ 
        {
          tagName?: string(name='TagName', example='Color'),
          tagValue?: string(name='TagValue', example='Red'),
        }
      ](name='Tags'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model QueryDeviceBySQLResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceBySQLResponseBody(name='body'),
}

async function queryDeviceBySQL(request: QueryDeviceBySQLRequest): QueryDeviceBySQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceBySQL', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceByStatusRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd***', position='Query'),
  status: int32(name='Status', example='1', position='Query'),
}

model QueryDeviceByStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='sLefbFmN9SYfnWLJTePG893XNuRV****'),
      gmtCreate?: string(name='GmtCreate', example='2021-02-18 10:46:32'),
      gmtModified?: string(name='GmtModified', example='2021-02-18 10:46:32'),
      iotId?: string(name='IotId', example='Av8NGHGtwPrH9BYGLMBi00****'),
      nickname?: string(name='Nickname', example='SensorInShanghai'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      status?: string(name='Status', example='ONLINE'),
      utcCreate?: string(name='UtcCreate', example='2021-02-18T02:46:32.000Z'),
      utcModified?: string(name='UtcModified', example='2021-02-18T02:46:32.000Z'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryDeviceByStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceByStatusResponseBody(name='body'),
}

async function queryDeviceByStatus(request: QueryDeviceByStatusRequest): QueryDeviceByStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceByStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceByTagsRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  tag?: [ 
    {
      tagKey: string(name='TagKey', example='room'),
      tagValue: string(name='TagValue', example='101'),
    }
  ](name='Tag', position='Query'),
}

model QueryDeviceByTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='light1'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      productName?: string(name='ProductName', example='lamp'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model QueryDeviceByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceByTagsResponseBody(name='body'),
}

async function queryDeviceByTags(request: QueryDeviceByTagsRequest): QueryDeviceByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceByTags', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceCertRequest {
  deviceName: string(name='DeviceName', example='light', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceCertResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceCertInfo?: {
    certSN?: string(name='CertSN', example='636217374433****'),
    certificate?: string(name='Certificate', example='tXHf4ezGEHcwdyMwoCDHGBmk9avi****'),
    privateKey?: string(name='PrivateKey', example='CqXL5h5ysRTA4NxjABjj0010fa****'),
    status?: int32(name='Status', example='2'),
  }(name='DeviceCertInfo'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceCertResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceCertResponseBody(name='body'),
}

async function queryDeviceCert(request: QueryDeviceCertRequest): QueryDeviceCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceCert', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  identifier?: [ string ](name='Identifier', example='Temperature', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      desiredPropertyInfo?: [ 
      {
        dataType?: string(name='DataType', example='int'),
        identifier?: string(name='Identifier', example='Temperature'),
        name?: string(name='Name', example='airconditioning'),
        time?: string(name='Time', example='1579335899000'),
        unit?: string(name='Unit', example='℃'),
        value?: string(name='Value', example='34'),
        version?: long(name='Version', example='1'),
      }
    ](name='DesiredPropertyInfo')
    }(name='List'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDesiredPropertyResponseBody(name='body'),
}

async function queryDeviceDesiredProperty(request: QueryDeviceDesiredPropertyRequest): QueryDeviceDesiredPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDesiredProperty', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDetailRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceDetailResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    firmwareVersion?: string(name='FirmwareVersion', example='V1.0.0.0'),
    gmtActive?: string(name='GmtActive', example='2018-08-06 10:48:41'),
    gmtCreate?: string(name='GmtCreate', example='2018-08-06 10:47:50'),
    gmtOnline?: string(name='GmtOnline', example='2018-08-06 13:43:12'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
    ipAddress?: string(name='IpAddress', example='10.0.0.1'),
    nickname?: string(name='Nickname', example='detectors_in_beijing'),
    nodeType?: int32(name='NodeType', example='0'),
    owner?: boolean(name='Owner', example='true'),
    productKey?: string(name='ProductKey', example='a1rYuVF****'),
    productName?: string(name='ProductName', example='test'),
    region?: string(name='Region', example='cn-shanghai'),
    status?: string(name='Status', example='ONLINE'),
    utcActive?: string(name='UtcActive', example='2018-08-06T02:48:41.000Z'),
    utcCreate?: string(name='UtcCreate', example='2018-08-06T02:47:50.000Z'),
    utcOnline?: string(name='UtcOnline', example='2018-08-06T05:43:12.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDetailResponseBody(name='body'),
}

async function queryDeviceDetail(request: QueryDeviceDetailRequest): QueryDeviceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDistributeDetailRequest {
  jobId: string(name='JobId', example='UbmsMHmkqv0PiAG****010001', position='Query'),
}

model QueryDeviceDistributeDetailResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  file?: string(name='File', example='https://iotx-***.oss-cn-shanghai.aliyuncs.com/job***/7u***'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDistributeDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDistributeDetailResponseBody(name='body'),
}

async function queryDeviceDistributeDetail(request: QueryDeviceDistributeDetailRequest): QueryDeviceDistributeDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDistributeDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDistributeJobRequest {
  jobId: string(name='JobId', example='UbmsMHmkqv0PiAG****010001', position='Query'),
}

model QueryDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    gmtCreate?: long(name='GmtCreate', example='1581595942000'),
    jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
    sourceUid?: string(name='SourceUid', example='198***'),
    status?: int32(name='Status', example='1'),
    strategy?: int32(name='Strategy', example='0'),
    targetInstanceConfigs?: {
      targetInstanceConfigs?: [ 
      {
        targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***'),
      }
    ](name='targetInstanceConfigs')
    }(name='TargetInstanceConfigs'),
    targetUid?: string(name='TargetUid', example='198***'),
    total?: int32(name='Total', example='5'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDistributeJobResponseBody(name='body'),
}

async function queryDeviceDistributeJob(request: QueryDeviceDistributeJobRequest): QueryDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceEventDataRequest {
  asc?: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  endTime: long(name='EndTime', example='1516541900303', position='Query'),
  eventType?: string(name='EventType', example='info', position='Query'),
  identifier?: string(name='Identifier', example='PowerOff', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1516541900303', position='Query'),
}

model QueryDeviceEventDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType', example='info'),
        identifier?: string(name='Identifier', example='PowerOff'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{"structArgs":{"structchildFLOATf71c20e":1.23}}'),
        time?: string(name='Time', example='1579163099000'),
      }
    ](name='EventInfo')
    }(name='List'),
    nextTime?: long(name='NextTime', example='1579163099000'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceEventDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventDataResponseBody(name='body'),
}

async function queryDeviceEventData(request: QueryDeviceEventDataRequest): QueryDeviceEventDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceEventData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceFileRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  fileId: string(name='FileId', example='xL0G67MBLBDtkR7GCfT******', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceFileResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    downloadUrl?: string(name='DownloadUrl', example='http://iotx-file-store.oss-cn-shanghai.aliyuncs.com/device_file/A849E4E5CFF64804A18D9384AC9D****/aGEKIpp5NAGxdP2oo90000****/testFile3.txt?Expires=1553162075&OSSAccessKeyId=LTAIYLScbHiV****&Signature=%2F88xdEFPukJ****%2F8****%2Bdv3io%3D'),
    fileId?: string(name='FileId', example='6UCo1SqbqnQEoh9aKqDQ01****'),
    name?: string(name='Name', example='testFile3.txt'),
    size?: string(name='Size', example='102400'),
    utcCreatedOn?: string(name='UtcCreatedOn', example='2019-03-21T08:45:42.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileResponseBody(name='body'),
}

async function queryDeviceFile(request: QueryDeviceFileRequest): QueryDeviceFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceFile', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceFileListRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceFileListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    fileSummary?: [ 
    {
      fileId?: string(name='FileId', example='xL0G67MBLBDtkR7GCfT******'),
      name?: string(name='Name', example='testFile2.txt'),
      size?: string(name='Size', example='1024000'),
      utcCreatedOn?: string(name='UtcCreatedOn', example='2019-03-21T08:45:42.000Z'),
    }
  ](name='FileSummary')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryDeviceFileListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileListResponseBody(name='body'),
}

async function queryDeviceFileList(request: QueryDeviceFileListRequest): QueryDeviceFileListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceFileList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupByDeviceRequest {
  deviceName: string(name='DeviceName', example='test456', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1SKk9K****', position='Query'),
}

model QueryDeviceGroupByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  groupInfos?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', example='father desc'),
      groupId?: string(name='GroupId', example='6a3FF2XE2BKa****'),
      groupName?: string(name='GroupName', example='father1543152336554'),
      groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
      utcCreate?: string(name='UtcCreate', example='2018-11-25T13:25:37.000Z'),
    }
  ](name='GroupInfo')
  }(name='GroupInfos'),
  requestId?: string(name='RequestId', example='7941C8CD-7764-4A94-8CD9-E2762D4A73AC'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceGroupByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupByDeviceResponseBody(name='body'),
}

async function queryDeviceGroupByDevice(request: QueryDeviceGroupByDeviceRequest): QueryDeviceGroupByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupByDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupByTagsRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  tag?: [ 
    {
      tagKey: string(name='TagKey', example='group'),
      tagValue: string(name='TagValue', example='tag'),
    }
  ](name='Tag', position='Query'),
}

model QueryDeviceGroupByTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceGroup?: [ 
    {
      groupId?: string(name='GroupId', example='Z0ElGF5aqc0t****'),
      groupName?: string(name='GroupName', example='test11'),
    }
  ](name='DeviceGroup')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9599EE98-1642-4FCD-BFC4-039E458A4693'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model QueryDeviceGroupByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupByTagsResponseBody(name='body'),
}

async function queryDeviceGroupByTags(request: QueryDeviceGroupByTagsRequest): QueryDeviceGroupByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupByTags', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupInfoRequest {
  groupId: string(name='GroupId', example='tDQvBJqbUyHs****', position='Query'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model QueryDeviceGroupInfoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceActive?: int32(name='DeviceActive', example='1'),
    deviceCount?: int32(name='DeviceCount', example='10'),
    deviceOnline?: int32(name='DeviceOnline', example='0'),
    dynamicGroupExpression?: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"'),
    groupDesc?: string(name='GroupDesc', example='usefulGroup'),
    groupId?: string(name='GroupId', example='tDQvBJqbUyHs****'),
    groupName?: string(name='GroupName', example='aliyun'),
    utcCreate?: string(name='UtcCreate', example='2018-09-14T14:35:51.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='7411716B-A488-4EEB-9AA0-6DB05AD2491F'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupInfoResponseBody(name='body'),
}

async function queryDeviceGroupInfo(request: QueryDeviceGroupInfoRequest): QueryDeviceGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupListRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  groupName?: string(name='GroupName', example='GroupName1', position='Query'),
  groupTypes?: [ string ](name='GroupTypes', example='LINK_PLATFORM_DYNAMIC', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  superGroupId?: string(name='SuperGroupId', example='8vDubXr4nUvZkNgk9mle010200', position='Query'),
}

model QueryDeviceGroupListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', example='usefulGroup'),
      groupId?: string(name='GroupId', example='Kzt9FD8wje8o****'),
      groupName?: string(name='GroupName', example='test1'),
      groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
      utcCreate?: string(name='UtcCreate', example='2018-10-09T02:58:34.000Z'),
    }
  ](name='GroupInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='3'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BEFCA316-D6C7-470C-81ED-1FF4FFD4AA0D'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='24'),
}

model QueryDeviceGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupListResponseBody(name='body'),
}

async function queryDeviceGroupList(request: QueryDeviceGroupListRequest): QueryDeviceGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupTagListRequest {
  groupId: string(name='GroupId', example='W16X8Tvdosec****', position='Query'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model QueryDeviceGroupTagListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    groupTagInfo?: [ 
    {
      tagKey?: string(name='TagKey', example='room1'),
      tagValue?: string(name='TagValue', example='bulb'),
    }
  ](name='GroupTagInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='214154FF-9D47-4E3F-AAAD-F4CE67F41060'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceGroupTagListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupTagListResponseBody(name='body'),
}

async function queryDeviceGroupTagList(request: QueryDeviceGroupTagListRequest): QueryDeviceGroupTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupTagList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceInfoRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceInfoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
    nickname?: string(name='Nickname', example='detectors_in_beijing'),
    productKey?: string(name='ProductKey', example='a1rYuVF****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceInfoResponseBody(name='body'),
}

async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceListByDeviceGroupRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  groupId: string(name='GroupId', example='7DIgqIl1Ijnh****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model QueryDeviceListByDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='ios_1207_08'),
      iotId?: string(name='IotId', example='TfmUAeJjQQhCPH84UVNn0010c6****'),
      productKey?: string(name='ProductKey', example='a1hWjHD****'),
      productName?: string(name='ProductName', example='WIFIdevice'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='B1A921D9-1061-4D45-9F12-EA6B0FDEDE30'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='3'),
}

model QueryDeviceListByDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceListByDeviceGroupResponseBody(name='body'),
}

async function queryDeviceListByDeviceGroup(request: QueryDeviceListByDeviceGroupRequest): QueryDeviceListByDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceListByDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalEventDataRequest {
  asc: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  endTime: long(name='EndTime', example='1516541900303', position='Query'),
  identifier: string(name='Identifier', example='PowerOff', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1516538300303', position='Query'),
}

model QueryDeviceOriginalEventDataResponseBody = {
  code?: string(name='Code', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType', example='info'),
        identifier?: string(name='Identifier', example='PowerOff'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{"structArgs":{"structchildFLOATf71c20e":1.23}}'),
        time?: string(name='Time', example='1579163099000'),
      }
    ](name='EventInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalEventDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalEventDataResponseBody(name='body'),
}

async function queryDeviceOriginalEventData(request: QueryDeviceOriginalEventDataRequest): QueryDeviceOriginalEventDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalEventData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalPropertyDataRequest {
  asc: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  endTime: long(name='EndTime', example='1579249499000', position='Query'),
  identifier: string(name='Identifier', example='temperature', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1579249499000', position='Query'),
}

model QueryDeviceOriginalPropertyDataResponseBody = {
  code?: string(name='Code', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', example='1516541885630'),
        value?: string(name='Value', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextValid?: boolean(name='NextValid', example='true'),
    nextPageToken?: string(name='nextPageToken', example='Bo***x44Qx'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalPropertyDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalPropertyDataResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyData(request: QueryDeviceOriginalPropertyDataRequest): QueryDeviceOriginalPropertyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalPropertyData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalPropertyStatusRequest {
  asc: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceOriginalPropertyStatusResponseBody = {
  code?: string(name='Code', example='iot.common.InvalidPageParams'),
  data?: {
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Temperture'),
        time?: long(name='Time', example='1517553572362'),
        value?: string(name='Value', example='26'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalPropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalPropertyStatusResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyStatus(request: QueryDeviceOriginalPropertyStatusRequest): QueryDeviceOriginalPropertyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalPropertyStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalServiceDataRequest {
  asc: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  endTime: long(name='EndTime', example='1579249499000', position='Query'),
  identifier: string(name='Identifier', example='Set', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1579249498000', position='Query'),
}

model QueryDeviceOriginalServiceDataResponseBody = {
  code?: string(name='Code', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Set'),
        inputData?: string(name='InputData', example='{\\"code\\":200,\\"data\\":{},\\"id\\":\\"100686\\",\\"message\\":\\"success\\",\\"version\\":\\"1.0\\"}'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{\\"LightAdjustLevel\\":123}'),
        time?: string(name='Time', example='1579249499000'),
      }
    ](name='ServiceInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalServiceDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalServiceDataResponseBody(name='body'),
}

async function queryDeviceOriginalServiceData(request: QueryDeviceOriginalServiceDataRequest): QueryDeviceOriginalServiceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalServiceData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDevicePropResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  props?: string(name='Props', example='{"coordinate":"104.07086:30.549169"}'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropResponseBody(name='body'),
}

async function queryDeviceProp(request: QueryDevicePropRequest): QueryDevicePropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceProp', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropertiesDataRequest {
  asc: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='airconditioning', position='Query'),
  endTime: long(name='EndTime', example='1579249499000', position='Query'),
  identifier: [ string ](name='Identifier', example='temperature', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1579249499000', position='Query'),
}

model QueryDevicePropertiesDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  nextTime?: long(name='NextTime', example='1579249499000'),
  nextValid?: boolean(name='NextValid', example='true'),
  propertyDataInfos?: {
    propertyDataInfo?: [ 
    {
      identifier?: string(name='Identifier', example='temperature'),
      list?: {
        propertyInfo?: [ 
        {
          time?: long(name='Time', example='1579249499000'),
          value?: string(name='Value', example='21.3'),
        }
      ](name='PropertyInfo')
      }(name='List'),
    }
  ](name='PropertyDataInfo')
  }(name='PropertyDataInfos'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropertiesDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertiesDataResponseBody(name='body'),
}

async function queryDevicePropertiesData(request: QueryDevicePropertiesDataRequest): QueryDevicePropertiesDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePropertiesData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropertyDataRequest {
  asc: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='airconditioning', position='Query'),
  endTime: long(name='EndTime', example='1579249499000', position='Query'),
  identifier: string(name='Identifier', example='temperature', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1579249499000', position='Query'),
}

model QueryDevicePropertyDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', example='1516541885630'),
        value?: string(name='Value', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextTime?: long(name='NextTime', example='1579249499000'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropertyDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertyDataResponseBody(name='body'),
}

async function queryDevicePropertyData(request: QueryDevicePropertyDataRequest): QueryDevicePropertyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePropertyData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropertyStatusRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDevicePropertyStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyStatusInfo?: [ 
      {
        dataType?: string(name='DataType', example='int'),
        identifier?: string(name='Identifier', example='Temperture'),
        name?: string(name='Name', example='temperature'),
        time?: string(name='Time', example='1517553572362'),
        unit?: string(name='Unit', example='°C'),
        value?: string(name='Value', example='25'),
      }
    ](name='PropertyStatusInfo')
    }(name='List'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertyStatusResponseBody(name='body'),
}

async function queryDevicePropertyStatus(request: QueryDevicePropertyStatusRequest): QueryDevicePropertyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePropertyStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceServiceDataRequest {
  asc?: int32(name='Asc', example='0', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  endTime: long(name='EndTime', example='1579249499000', position='Query'),
  identifier?: string(name='Identifier', example='Set', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1579249499000', position='Query'),
}

model QueryDeviceServiceDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Set'),
        inputData?: string(name='InputData', example='{\\"code\\":200,\\"data\\":{},\\"id\\":\\"100686\\",\\"message\\":\\"success\\",\\"version\\":\\"1.0\\"}'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{\\"LightAdjustLevel\\":123}'),
        time?: string(name='Time', example='1579249499000'),
      }
    ](name='ServiceInfo')
    }(name='List'),
    nextTime?: long(name='NextTime', example='1579335899000'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceServiceDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceServiceDataResponseBody(name='body'),
}

async function queryDeviceServiceData(request: QueryDeviceServiceDataRequest): QueryDeviceServiceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceServiceData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceSpeechRequest {
  iotId: string(name='IotId', example='4de2c367****8c585e5992**', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
}

model QueryDeviceSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='ZFDZ'),
        size?: float(name='Size', example='16'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceSpeechResponseBody(name='body'),
}

async function queryDeviceSpeech(request: QueryDeviceSpeechRequest): QueryDeviceSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceSpeech', 'POST', '/', 'json', true, 'form', request);
}

model QueryDeviceStatisticsRequest {
  groupId?: string(name='GroupId', example='W16X8Tvdosec****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryDeviceStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    activeCount?: long(name='activeCount', example='10'),
    deviceCount?: long(name='deviceCount', example='100'),
    onlineCount?: long(name='onlineCount', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceStatisticsResponseBody(name='body'),
}

async function queryDeviceStatistics(request: QueryDeviceStatisticsRequest): QueryDeviceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceSubTopicRequest {
  deviceName: string(name='DeviceName', example='device1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='hf768****', position='Query'),
}

model QueryDeviceSubTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  topicList?: [ 
    {
      timestamp?: long(name='Timestamp', example='1662039965873'),
      topicName?: string(name='TopicName', example='/hf768****/device1/user/test'),
    }
  ](name='TopicList'),
}

model QueryDeviceSubTopicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceSubTopicResponseBody(name='body'),
}

async function queryDeviceSubTopic(request: QueryDeviceSubTopicRequest): QueryDeviceSubTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceSubTopic', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***', position='Query'),
  tunnelId: string(name='TunnelId', example='d4098041-a560-***', position='Query'),
}

model QueryDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    description?: string(name='Description'),
    deviceConnState?: string(name='DeviceConnState', example='CONNECTED'),
    deviceName?: string(name='DeviceName', example='light'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv***00100'),
    productKey?: string(name='ProductKey', example='a1rYuVF***'),
    productName?: string(name='ProductName', example='test'),
    sourceConnState?: string(name='SourceConnState', example='DISCONNECTED'),
    tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
    tunnelState?: string(name='TunnelState', example='OPEN'),
    udi?: string(name='Udi', example='reboot'),
    utcClosed?: string(name='UtcClosed', example='2021-09-22T12:44:12.000Z'),
    utcCreated?: string(name='UtcCreated', example='2021-09-22T12:44:12.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceTunnelResponseBody(name='body'),
}

async function queryDeviceTunnel(request: QueryDeviceTunnelRequest): QueryDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicesHotStorageDataRequest {
  asc: int32(name='Asc', example='0', minimum=0, maximum=5, position='Query'),
  deviceName?: string(name='DeviceName', example='device1', position='Query'),
  endTime: long(name='EndTime', example='1579249499000', minimum=0, maximum=999999999999999, position='Query'),
  identifier: string(name='Identifier', example='temperature', position='Query'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx', position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=201, position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  startTime: long(name='StartTime', example='1579249499000', minimum=0, maximum=999999999999999, position='Query'),
  userTopic: string(name='UserTopic', example='user/a***/b***', position='Query'),
}

model QueryDevicesHotStorageDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', example='1516541885630'),
        value?: string(name='Value', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextValid?: boolean(name='NextValid', example='true'),
    nextPageToken?: string(name='nextPageToken', example='Bo***x44Qx'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicesHotStorageDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicesHotStorageDataResponseBody(name='body'),
}

async function queryDevicesHotStorageData(request: QueryDevicesHotStorageDataRequest): QueryDevicesHotStorageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicesHotStorageData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicesHotStorageDataStatusRequest {
  asc: int32(name='Asc', example='0', minimum=0, maximum=5, position='Query'),
  deviceName?: string(name='DeviceName', example='device1', position='Query'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx', position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=0, maximum=201, position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  userTopic: string(name='UserTopic', example='user/a***/b***', position='Query'),
}

model QueryDevicesHotStorageDataStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Temperture'),
        time?: long(name='Time', example='1517553572362'),
        value?: string(name='Value', example='22'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicesHotStorageDataStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicesHotStorageDataStatusResponseBody(name='body'),
}

async function queryDevicesHotStorageDataStatus(request: QueryDevicesHotStorageDataStatusRequest): QueryDevicesHotStorageDataStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicesHotStorageDataStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDynamicGroupDevicesRequest {
  currentPage?: int32(name='CurrentPage', example='2', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  fuzzyName?: boolean(name='FuzzyName', example='true', position='Query'),
  groupId: string(name='GroupId', example='tDQvBJqbUyHs***', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-***-v6***', position='Query'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV***', position='Query'),
  status?: string(name='Status', example='OFFLINE', position='Query'),
}

model QueryDynamicGroupDevicesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      activeTime?: string(name='ActiveTime', example='2018-08-06 10:48:41'),
      categoryKey?: string(name='CategoryKey', example='Lighting'),
      deviceName?: string(name='DeviceName', example='light'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      lastOnlineTime?: string(name='LastOnlineTime', example='2018-08-06 13:43:12'),
      nickname?: string(name='Nickname', example='detectors_in_beijing'),
      nodeType?: int32(name='NodeType', example='0'),
      productKey?: string(name='ProductKey', example='a1rYuVF***'),
      productName?: string(name='ProductName', example='test'),
      status?: string(name='Status', example='ONLINE'),
      utcActiveTime?: string(name='UtcActiveTime', example='2018-08-06T02:48:41.000Z'),
      utcLastOnlineTime?: string(name='UtcLastOnlineTime', example='2018-08-06T05:43:12.000Z'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='24'),
}

model QueryDynamicGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDynamicGroupDevicesResponseBody(name='body'),
}

async function queryDynamicGroupDevices(request: QueryDynamicGroupDevicesRequest): QueryDynamicGroupDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDynamicGroupDevices', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeDriverRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  driverName?: string(name='DriverName', example='MyledDriver', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
  type: int32(name='Type', example='1', position='Query'),
}

model QueryEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    driverList?: [ 
      {
        cpuArch?: string(name='CpuArch', example='x86-64'),
        driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
        driverName?: string(name='DriverName', example='MyLedDriver'),
        driverProtocol?: string(name='DriverProtocol', example='customize'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        isApply?: boolean(name='IsApply', example='false'),
        isBuiltIn?: boolean(name='IsBuiltIn', example='false'),
        runtime?: string(name='Runtime', example='c'),
        type?: int32(name='Type', example='1'),
      }
    ](name='DriverList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E0BD540E-DCFE-4602-B6D1-D208E8594BF7'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeDriverResponseBody(name='body'),
}

async function queryEdgeDriver(request: QueryEdgeDriverRequest): QueryEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeDriverVersionRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  driverId: string(name='DriverId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  driverVersion?: string(name='DriverVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
  versionState?: int32(name='VersionState', example='0', position='Query'),
}

model QueryEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    driverVersionList?: [ 
      {
        argument?: string(name='Argument', example='-XX:+PrintGCDetails'),
        configCheckRule?: string(name='ConfigCheckRule', example='{\\"deviceConfig\\":{\\"required\\":false},\\"driverConfig\\":{\\"required\\":false}}'),
        containerConfig?: string(name='ContainerConfig', example='{\\"devMappings\\":[],\\"hostNetworkMode\\":0,\\"portMappings\\":[],\\"privileged\\":1,\\"volumeMappings\\":[]}'),
        description?: string(name='Description'),
        driverConfig?: string(name='DriverConfig', example='[{\\"content\\":\\"{\\\\\\"defaultConfig\\\\\\":\\\\\\"this is default driver config demo\\\\\\"}\\",\\"format\\":\\"JSON\\"}]'),
        driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
        driverVersion?: string(name='DriverVersion', example='1.2.0'),
        edgeVersion?: string(name='EdgeVersion', example='2.0.0'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        sourceConfig?: string(name='SourceConfig', example='{\\"ossAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb3******/ck3n3koe200003h6zf******.zip\\",\\"temporaryOssAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb3******/ck3n3koe200003h6zf******.zip?Expires\\u003d1575******\\u0026OSSAccessKeyId\\u003daS4MT0IYr******\\u0026Signature\\u003dm6cpmcaB8rm3YfbkhTYgb0W******\\"}'),
        versionState?: string(name='VersionState', example='0'),
      }
    ](name='DriverVersionList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ABA0CD1F-4270-42FE-84AD-D612240196F7'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeDriverVersionResponseBody(name='body'),
}

async function queryEdgeDriverVersion(request: QueryEdgeDriverVersionRequest): QueryEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
}

model QueryEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    instanceList?: [ 
      {
        bizEnable?: boolean(name='BizEnable', example='true'),
        gmtCreate?: string(name='GmtCreate', example='2019-07-17 14:34:28'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModified?: string(name='GmtModified', example='2019-07-17 14:51:38'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        instanceId?: string(name='InstanceId', example='9iqyQAKDb2aYGVKa****'),
        latestDeploymentStatus?: int32(name='LatestDeploymentStatus', example='1'),
        latestDeploymentType?: string(name='LatestDeploymentType', example='deploy'),
        name?: string(name='Name', example='test_le1'),
        roleArn?: string(name='RoleArn', example='acs:ram::1473922805******:role/aliyuniotaccessingfcrole'),
        roleAttachTime?: string(name='RoleAttachTime', example='2020-02-19 11:25:48'),
        roleAttachTimestamp?: long(name='RoleAttachTimestamp', example='1581912859713'),
        roleName?: string(name='RoleName', example='AliyunIOTAccessingFCRole'),
        spec?: int32(name='Spec', example='30'),
        tags?: string(name='Tags', example='k1:v1,k2:v2'),
        type?: int32(name='Type', example='0'),
      }
    ](name='InstanceList'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='201'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='199BBC5D-FC99-46CB-88E2-FB98E92446FA'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceResponseBody(name='body'),
}

async function queryEdgeInstance(request: QueryEdgeInstanceRequest): QueryEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceChannelRequest {
  channelName?: string(name='ChannelName', example='le_name0', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
}

model QueryEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    channelList?: {
      channel?: [ 
      {
        channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
        channelName?: string(name='ChannelName', example='le_name0'),
        configList?: {
          config?: [ 
          {
            configId?: string(name='ConfigId', example='5d6016035c1a451daf174b1051******'),
            content?: string(name='Content', example='{\\"protocol\\":\\"TCP\\", \\"ip\\":\\"1.2.3.4\\", \\"port\\":1}'),
            format?: string(name='Format', example='JSON'),
            key?: string(name='Key', example='key1'),
          }
        ](name='Config')
        }(name='ConfigList'),
        gmtCreate?: string(name='GmtCreate', example='2020-03-16 23:06:52'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1584371212000'),
        gmtModified?: string(name='GmtModified', example='2020-03-16 23:06:52'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1584371212000'),
      }
    ](name='Channel')
    }(name='ChannelList'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AA1EF007-0455-43C7-8E03-39D0BA20F4F5'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceChannelResponseBody(name='body'),
}

async function queryEdgeInstanceChannel(request: QueryEdgeInstanceChannelRequest): QueryEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceDeviceRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  instanceId: string(name='InstanceId', example='tG7sKuOQ7ylb7qS4****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
}

model QueryEdgeInstanceDeviceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    deviceList?: [ 
      {
        deviceName?: string(name='DeviceName', example='test_tmp_zdy'),
        driverId?: string(name='DriverId', example='44c090ba7b104641a4b9bcf10241****'),
        iotId?: string(name='IotId', example='XSpPdtxzE6ebtCkx****000101'),
        productKey?: string(name='ProductKey', example='a1p5QfE****'),
      }
    ](name='DeviceList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='4'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AC76932E-E0C9-41EE-843D-B1CA3279B053'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDeviceResponseBody(name='body'),
}

async function queryEdgeInstanceDevice(request: QueryEdgeInstanceDeviceRequest): QueryEdgeInstanceDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceDeviceByDriverRequest {
  channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
}

model QueryEdgeInstanceDeviceByDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    deviceList?: [ 
      {
        iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN******'),
      }
    ](name='DeviceList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C2AEE142-A9ED-46C5-9EA4-BF0817F0D556'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceDeviceByDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDeviceByDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDeviceByDriver(request: QueryEdgeInstanceDeviceByDriverRequest): QueryEdgeInstanceDeviceByDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceDeviceByDriver', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceDriverRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model QueryEdgeInstanceDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    driverList?: [ 
      {
        driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc959228****'),
        driverVersion?: string(name='DriverVersion', example='1.0.0'),
        gmtCreate?: string(name='GmtCreate', example='2019-06-26 17:22:25'),
        gmtModified?: string(name='GmtModified', example='2019-06-26 17:22:25'),
        orderId?: string(name='OrderId', example='11123458765423'),
      }
    ](name='DriverList'),
    pageSize?: int32(name='PageSize', example='30'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='77F540BC-A0EF-46A4-ABDE-18644C69AAF5'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDriver(request: QueryEdgeInstanceDriverRequest): QueryEdgeInstanceDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceDriver', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceGatewayRequest {
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model QueryEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  gatewayList?: [ 
    {
      deviceName?: string(name='DeviceName', example='gateway_01'),
      edgeVersion?: string(name='EdgeVersion', example='v1.0.0'),
      iotId?: string(name='IotId', example='LuD9x5hiRUdVemWU****000101'),
      productKey?: string(name='ProductKey', example='a1mAdeG****'),
    }
  ](name='GatewayList'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceGatewayResponseBody(name='body'),
}

async function queryEdgeInstanceGateway(request: QueryEdgeInstanceGatewayRequest): QueryEdgeInstanceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceGateway', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceHistoricDeploymentRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  endTime?: long(name='EndTime', example='1561543998639', position='Query'),
  instanceId: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='15', position='Query'),
  startTime?: long(name='StartTime', example='1558951998639', position='Query'),
}

model QueryEdgeInstanceHistoricDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    deploymentList?: [ 
      {
        deploymentId?: string(name='DeploymentId', example='e4803e566b424fa68e7f4b1c747c****'),
        description?: string(name='Description', example='deploy_1561694817061'),
        gmtCompleted?: string(name='GmtCompleted', example='2019-06-28 12:07:16'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
        gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModified?: string(name='GmtModified', example='2019-06-28 12:07:16'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        status?: int32(name='Status', example='2'),
        type?: string(name='Type', example='deploy'),
      }
    ](name='DeploymentList'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='6'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989E4'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceHistoricDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceHistoricDeploymentResponseBody(name='body'),
}

async function queryEdgeInstanceHistoricDeployment(request: QueryEdgeInstanceHistoricDeploymentRequest): QueryEdgeInstanceHistoricDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceHistoricDeployment', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceMessageRoutingRequest {
  currentPage: int32(name='CurrentPage', minimum=1, maximum=100000, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
}

model QueryEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    messageRouteList?: {
      messageRoute?: [ 
      {
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        name?: string(name='Name'),
        routeContext?: {
          qos?: string(name='Qos'),
          sourceApplicationName?: string(name='SourceApplicationName'),
          sourceFcFunctionName?: string(name='SourceFcFunctionName'),
          sourceFcServiceName?: string(name='SourceFcServiceName'),
          targetApplicationName?: string(name='TargetApplicationName'),
          targetFcFunctionName?: string(name='TargetFcFunctionName'),
          targetFcServiceName?: string(name='TargetFcServiceName'),
        }(name='RouteContext'),
        routeId?: int32(name='RouteId'),
        sourceData?: string(name='SourceData'),
        sourceType?: string(name='SourceType'),
        targetData?: string(name='TargetData'),
        targetType?: string(name='TargetType'),
        topicFilter?: string(name='TopicFilter'),
      }
    ](name='MessageRoute')
    }(name='MessageRouteList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function queryEdgeInstanceMessageRouting(request: QueryEdgeInstanceMessageRoutingRequest): QueryEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceSceneRuleRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  instanceId: string(name='InstanceId', example='llL44UVXUqb9m5******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
}

model QueryEdgeInstanceSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1582004185000'),
        isExisted?: int32(name='IsExisted', example='1'),
        ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
        ruleName?: string(name='RuleName', example='test'),
        status?: int32(name='Status', example='1'),
      }
    ](name='RuleList'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4C3331B-0FA8-4A05-AFE2-54F698EDEAF7'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceSceneRuleResponseBody(name='body'),
}

async function queryEdgeInstanceSceneRule(request: QueryEdgeInstanceSceneRuleRequest): QueryEdgeInstanceSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model QueryImportedDeviceByApplyIdRequest {
  applyId: long(name='ApplyId', example='1295006', minimum=1, maximum=100000000000000000, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****', position='Query'),
  pageNo: int32(name='PageNo', example='1', minimum=1, maximum=100000, position='Query'),
  pageSize: int32(name='PageSize', example='10', minimum=1, maximum=1000, position='Query'),
}

model QueryImportedDeviceByApplyIdResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceList?: {
    device?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      sn?: string(name='Sn', example='QC4******001'),
    }
  ](name='device')
  }(name='DeviceList'),
  errorMessage?: string(name='ErrorMessage'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  totalPage?: int32(name='TotalPage', example='100'),
}

model QueryImportedDeviceByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryImportedDeviceByApplyIdResponseBody(name='body'),
}

async function queryImportedDeviceByApplyId(request: QueryImportedDeviceByApplyIdRequest): QueryImportedDeviceByApplyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryImportedDeviceByApplyId', 'POST', '/', 'json', false, 'json', request);
}

model QueryJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobId: string(name='JobId', example='450407b***', position='Query'),
}

model QueryJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    description?: string(name='Description', example='jobDescription'),
    jobDocument?: string(name='JobDocument', example='{ "serviceIdentifier": "test_service", "params": { "key1": "value1", "key2": "value2" } } }'),
    jobFile?: {
      fileUrl?: string(name='FileUrl', example='https://iotx-***.oss-cn-shanghai.aliyuncs.com/job***/7u***.sh?Expires=16***&OSSAccessKeyId=LTA***&Signature=TTTejn***'),
      sign?: string(name='Sign', example='TTTejn***'),
      signMethod?: string(name='SignMethod', example='SHA256'),
    }(name='JobFile'),
    jobId?: string(name='JobId', example='450407b***'),
    jobName?: string(name='JobName', example='tes'),
    rolloutConfig?: {
      maximumPerMinute?: int32(name='MaximumPerMinute', example='10'),
      messageQoS?: string(name='MessageQoS', example='Qos1'),
    }(name='RolloutConfig'),
    scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
    status?: string(name='Status', example='CANCELLED'),
    targetConfig?: {
      targetDevices?: {
        targetDevices?: [ 
        {
          deviceName?: string(name='DeviceName', example='a1Ix***'),
          productKey?: string(name='ProductKey', example='nCwfSBzc***'),
        }
      ](name='targetDevices')
      }(name='TargetDevices'),
      targetGroup?: string(name='TargetGroup', example='1234'),
      targetProduct?: string(name='TargetProduct', example='nCwfSBzc***'),
      targetType?: string(name='TargetType', example='DEVICE_LIST'),
    }(name='TargetConfig'),
    timeoutConfig?: {
      inProgressTimeoutInMinutes?: int32(name='InProgressTimeoutInMinutes', example='5'),
    }(name='TimeoutConfig'),
    type?: string(name='Type', example='SET_PROPERTY'),
    utcCreate?: string(name='UtcCreate', example='2020-12-13T04:09:51.000Z'),
    utcModified?: string(name='UtcModified', example='2020-12-13T04:10:00.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A6BEAB33-03E6-4CE0-A94F-9E24C5512BAD'),
  success?: boolean(name='Success', example='true'),
}

model QueryJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobResponseBody(name='body'),
}

async function queryJob(request: QueryJobRequest): QueryJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryJobStatisticsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobId: string(name='JobId', example='sGWotgRkut***10001', position='Query'),
}

model QueryJobStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    cancelled?: int32(name='Cancelled', example='3'),
    failed?: int32(name='Failed', example='1'),
    inProgress?: int32(name='InProgress', example='13'),
    queued?: int32(name='Queued', example='2'),
    rejected?: int32(name='Rejected', example='1'),
    sent?: int32(name='Sent', example='3'),
    succeeded?: int32(name='Succeeded', example='22'),
    timeOut?: int32(name='TimeOut', example='5'),
    total?: int32(name='Total', example='50'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model QueryJobStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobStatisticsResponseBody(name='body'),
}

async function queryJobStatistics(request: QueryJobStatisticsRequest): QueryJobStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryJobStatistics', 'GET', '/', 'json', false, 'json', request);
}

model QueryLicenseDeviceListRequest {
  endTime?: long(name='EndTime', example='1620934297000', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-ws4***', position='Query'),
  licenseCode?: string(name='LicenseCode', example='720P', position='Query'),
  pageId?: int32(name='PageId', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='50', position='Query'),
  productKey?: string(name='ProductKey', example='es****', position='Query'),
  startTime?: long(name='StartTime', example='1620634297000', position='Query'),
}

model QueryLicenseDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      item?: [ 
      {
        deviceName?: string(name='DeviceName', example='device1'),
        expiryTime?: long(name='ExpiryTime', example='1690934297000'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        licenseCode?: string(name='LicenseCode', example='720P'),
        productKey?: string(name='ProductKey', example='es****'),
        productName?: string(name='ProductName'),
      }
    ](name='item')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model QueryLicenseDeviceListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLicenseDeviceListResponseBody(name='body'),
}

async function queryLicenseDeviceList(request: QueryLicenseDeviceListRequest): QueryLicenseDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLicenseDeviceList', 'POST', '/', 'json', false, 'json', request);
}

model QueryLoRaJoinPermissionsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model QueryLoRaJoinPermissionsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  joinPermissions?: {
    joinPermission?: [ 
    {
      classMode?: string(name='ClassMode', example='A'),
      enabled?: boolean(name='Enabled', example='true'),
      joinPermissionId?: string(name='JoinPermissionId', example='80***'),
      joinPermissionName?: string(name='JoinPermissionName', example='ForTest'),
      joinPermissionType?: string(name='JoinPermissionType', example='LOCAL'),
      ownerAliyunPk?: string(name='OwnerAliyunPk', example='1375364789****'),
    }
  ](name='JoinPermission')
  }(name='JoinPermissions'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryLoRaJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLoRaJoinPermissionsResponseBody(name='body'),
}

async function queryLoRaJoinPermissions(request: QueryLoRaJoinPermissionsRequest): QueryLoRaJoinPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLoRaJoinPermissions', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t***', position='Query'),
  uniMsgId: string(name='UniMsgId', example='323455***', position='Query'),
}

model QueryMessageInfoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  message?: {
    generateTime?: long(name='GenerateTime', example='1624419431000'),
    messageContent?: string(name='MessageContent', example='eyJsYXN0VGltZSI6IjIwMjEtMDYtMjQgMTY6Mj**'),
    topicFullName?: string(name='TopicFullName', example='/a1Q5XoY****/device1/user/get'),
    uniMsgId?: string(name='UniMsgId', example='323455***'),
    userProperties?: [ 
      {
        key?: string(name='Key', example='key1'),
        value?: string(name='Value', example='value1'),
      }
    ](name='UserProperties'),
  }(name='Message'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model QueryMessageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMessageInfoResponseBody(name='body'),
}

async function queryMessageInfo(request: QueryMessageInfoRequest): QueryMessageInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessageInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryOTAFirmwareRequest {
  firmwareId: string(name='FirmwareId', example='s8SSHiKjpBfrM3BSN0z803****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model QueryOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  firmwareInfo?: {
    destVersion?: string(name='DestVersion', example='4.0.0'),
    firmwareDesc?: string(name='FirmwareDesc', example='modified-WiFi-module'),
    firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
    firmwareName?: string(name='FirmwareName', example='t3q5rkNm'),
    firmwareSign?: string(name='FirmwareSign', example='3d04ab6462633508606e5f3daac8****'),
    firmwareSize?: int32(name='FirmwareSize', example='924'),
    firmwareUrl?: string(name='FirmwareUrl', example='https://ota-***.aliyuncs.com/ota/572ef2fd12ca4791a5b21a9eb948****/5E962CF83DB1495E8337E9C8A4D1****.bin?Expires=1577587360&OSSAccessKeyId=cS8uRRy54Rsz****&Signature=farzC8%2FVMN4HYdEtXvdiC2OevH****'),
    moduleName?: string(name='ModuleName', example='WifiConfigModify'),
    multiFiles?: [ 
      {
        fileMd5?: string(name='FileMd5', example='3d04ab6462633508606e5f3d****'),
        name?: string(name='Name', example='firmware1'),
        signValue?: string(name='SignValue', example='3d04ab6462633508606e5f3d****'),
        size?: int32(name='Size', example='200'),
        url?: string(name='Url', example='https://ota-***.aliyuncs.com/ota/572ef2fd12ca4791a5b21a9eb948****/5E962CF83DB1495E8337E9C8A4D1****.bin?Expires=1577587360&OSSAccessKeyId=cS8uRRy54Rsz****&Signature=farzC8%2FVMN4HYdEtXvdiC2OevH****'),
      }
    ](name='MultiFiles'),
    productKey?: string(name='ProductKey', example='a19mzPZ****'),
    productName?: string(name='ProductName', example='MyProduct'),
    signMethod?: string(name='SignMethod', example='MD5'),
    srcVersion?: string(name='SrcVersion', example='1.0.0'),
    status?: int32(name='Status', example='2'),
    type?: int32(name='Type', example='0'),
    udi?: string(name='Udi'),
    utcCreate?: string(name='UtcCreate', example='2019-12-28T02:42:22.000Z'),
    utcModified?: string(name='UtcModified', example='2019-12-28T02:42:41.000Z'),
    verifyProgress?: int32(name='VerifyProgress', example='0'),
  }(name='FirmwareInfo'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
}

model QueryOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOTAFirmwareResponseBody(name='body'),
}

async function queryOTAFirmware(request: QueryOTAFirmwareRequest): QueryOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model QueryOTAJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobId: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****', position='Query'),
}

model QueryOTAJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    destVersion?: string(name='DestVersion', example='1.0.1'),
    downloadProtocol?: string(name='DownloadProtocol', example='HTTPS'),
    dynamicMode?: int32(name='DynamicMode', example='1'),
    firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
    grayPercent?: string(name='GrayPercent', example='50.00'),
    groupId?: string(name='GroupId', example='CtjzCkNuOxUR***'),
    groupName?: string(name='GroupName', example='test'),
    jobDesc?: string(name='JobDesc', example='batch upgrade'),
    jobId?: string(name='JobId', example='HvKuBpuk3rdk6E92CP****0200'),
    jobStatus?: string(name='JobStatus', example='IN_PROGRESS'),
    jobType?: string(name='JobType', example='UPGRADE_FIRMWARE'),
    maximumPerMinute?: int32(name='MaximumPerMinute', example='1000'),
    multiModuleMode?: boolean(name='MultiModuleMode', example='false'),
    name?: string(name='Name', example='Firmware2'),
    needConfirm?: boolean(name='NeedConfirm', example='false'),
    needPush?: boolean(name='NeedPush', example='true'),
    overwriteMode?: int32(name='OverwriteMode', example='1'),
    productKey?: string(name='ProductKey', example='a19mzPZ****'),
    retryCount?: int32(name='RetryCount', example='1'),
    retryInterval?: int32(name='RetryInterval', example='60'),
    selectionType?: string(name='SelectionType', example='STATIC'),
    srcVersions?: {
      srcVersion?: [ string ](name='SrcVersion')
    }(name='SrcVersions'),
    tags?: {
      otaTagDTO?: [ 
      {
        key?: string(name='Key', example='key1'),
        value?: string(name='Value', example='value1'),
      }
    ](name='OtaTagDTO')
    }(name='Tags'),
    targetSelection?: string(name='TargetSelection', example='SPECIFIC'),
    timeoutInMinutes?: int32(name='TimeoutInMinutes', example='5'),
    utcCreate?: string(name='UtcCreate', example='2019-12-28T02:43:10.000Z'),
    utcEndTime?: string(name='UtcEndTime', example='2019-12-29T02:43:10.000Z'),
    utcModified?: string(name='UtcModified', example='2019-12-28T02:43:10.000Z'),
    utcScheduleFinishTime?: string(name='UtcScheduleFinishTime', example='2019-12-30T02:43:10.000Z'),
    utcScheduleTime?: string(name='UtcScheduleTime', example='2019-12-29T02:43:10.000Z'),
    utcStartTime?: string(name='UtcStartTime', example='2019-12-28T02:43:10.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='30F1BB8D-EDBF-44FD-BBC0-BE97DEA73991'),
  success?: boolean(name='Success', example='true'),
}

model QueryOTAJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOTAJobResponseBody(name='body'),
}

async function queryOTAJob(request: QueryOTAJobRequest): QueryOTAJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOTAJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryPageByApplyIdRequest {
  applyId: long(name='ApplyId', example='1295006', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model QueryPageByApplyIdResponseBody = {
  applyDeviceList?: {
    applyDeviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId', example='gQG2GJ2y10m6hIk8****'),
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='SkfeXXKrTgp1DbDxYr74mfJ5cnui****'),
      iotId?: string(name='IotId', example='vWxNur6BUApsqjv9****000100'),
    }
  ](name='ApplyDeviceInfo')
  }(name='ApplyDeviceList'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryPageByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPageByApplyIdResponseBody(name='body'),
}

async function queryPageByApplyId(request: QueryPageByApplyIdRequest): QueryPageByApplyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPageByApplyId', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior'),
    authType?: string(name='AuthType', example='secret'),
    categoryKey?: string(name='CategoryKey', example='Lighting'),
    categoryName?: string(name='CategoryName'),
    dataFormat?: int32(name='DataFormat', example='1'),
    description?: string(name='Description'),
    deviceCount?: int32(name='DeviceCount', example='0'),
    gmtCreate?: long(name='GmtCreate', example='1581595942000'),
    id2?: boolean(name='Id2', example='false'),
    netType?: int32(name='NetType', example='3'),
    nodeType?: int32(name='NodeType', example='0'),
    owner?: boolean(name='Owner', example='true'),
    productKey?: string(name='ProductKey', example='a1T27vz****'),
    productName?: string(name='ProductName'),
    productSecret?: string(name='ProductSecret', example='U5tW7i44uilc****'),
    productStatus?: string(name='ProductStatus', example='DEVELOPMENT_STATUS'),
    protocolType?: string(name='ProtocolType', example='modbus'),
    validateType?: int32(name='ValidateType', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductResponseBody(name='body'),
}

async function queryProduct(request: QueryProductRequest): QueryProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProduct', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a2YwD23****', position='Query'),
}

model QueryProductCertInfoResponseBody = {
  code?: string(name='Code', example='MissingProductKey'),
  errorMessage?: string(name='ErrorMessage', example='ProductKey is mandatory for this action.'),
  productCertInfo?: {
    issueModel?: int32(name='IssueModel', example='1'),
  }(name='ProductCertInfo'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductCertInfoResponseBody(name='body'),
}

async function queryProductCertInfo(request: QueryProductCertInfoRequest): QueryProductCertInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductCertInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductListRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior', position='Query'),
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='2', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****', position='Query'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    list?: {
      productInfo?: [ 
      {
        authType?: string(name='AuthType', example='secret'),
        dataFormat?: int32(name='DataFormat', example='1'),
        description?: string(name='Description', example='This is a test product.'),
        deviceCount?: int32(name='DeviceCount', example='128'),
        gmtCreate?: long(name='GmtCreate', example='1581595942000'),
        nodeType?: int32(name='NodeType', example='0'),
        productKey?: string(name='ProductKey', example='a1T27vz****'),
        productName?: string(name='ProductName'),
      }
    ](name='ProductInfo')
    }(name='List'),
    pageCount?: int32(name='PageCount', example='92'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='184'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='4B4ECF2C-6222-42EC-A4B5-C12202E71CEA'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductList', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='HMyB*******', position='Query'),
}

model QueryProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    productTopicInfo?: [ 
    {
      desc?: string(name='Desc', example='topicDesc'),
      id?: string(name='Id', example='821****'),
      operation?: string(name='Operation', example='1'),
      productKey?: string(name='ProductKey', example='HMyB***'),
      topicShortName?: string(name='TopicShortName', example='/HMyB***/${deviceName}/user/get'),
    }
  ](name='ProductTopicInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B953EAFF-CFF6-4FF8-BC94-8B89F018E4DD'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductTopicResponseBody(name='body'),
}

async function queryProductTopic(request: QueryProductTopicRequest): QueryProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model QueryProjectShareDeviceListRequest {
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Body'),
}

model QueryProjectShareDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        sharable?: long(name='Sharable', example='1'),
      }
    ](name='items')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model QueryProjectShareDeviceListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProjectShareDeviceListResponseBody(name='body'),
}

async function queryProjectShareDeviceList(request: QueryProjectShareDeviceListRequest): QueryProjectShareDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProjectShareDeviceList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySceneRuleRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  ruleName?: string(name='RuleName', example='test', position='Query'),
}

model QuerySceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1582004185000'),
        gmtModified?: long(name='GmtModified', example='1582098176000'),
        ruleDescription?: string(name='RuleDescription'),
        ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
        ruleName?: string(name='RuleName', example='test'),
        ruleStatus?: int32(name='RuleStatus', example='1'),
      }
    ](name='RuleList'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4C3331B-0FA8-4A05-AFE2-54F698EDEAF7'),
  success?: boolean(name='Success', example='true'),
}

model QuerySceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySceneRuleResponseBody(name='body'),
}

async function querySceneRule(request: QuerySceneRuleRequest): QuerySceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySceneRule', 'POST', '/', 'json', false, 'json', request);
}

model QuerySchedulePeriodListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model QuerySchedulePeriodListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        description?: string(name='Description', example='test'),
        endTime?: string(name='EndTime', example='00:10'),
        periodCode?: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********'),
        soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
        startTime?: string(name='StartTime', example='00:00'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySchedulePeriodListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySchedulePeriodListResponseBody(name='body'),
}

async function querySchedulePeriodList(request: QuerySchedulePeriodListRequest): QuerySchedulePeriodListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySchedulePeriodList', 'POST', '/', 'json', true, 'form', request);
}

model QueryShareTaskDeviceListRequest {
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***', position='Body'),
  pageId?: int32(name='PageId', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  shareTaskId: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model QueryShareTaskDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        gmtAdded?: long(name='GmtAdded', example='1620624606000'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='items')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryShareTaskDeviceListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryShareTaskDeviceListResponseBody(name='body'),
}

async function queryShareTaskDeviceList(request: QueryShareTaskDeviceListRequest): QueryShareTaskDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryShareTaskDeviceList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySolutionDeviceGroupPageRequest {
  fuzzyGroupName?: string(name='FuzzyGroupName', example='test', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageId: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize: int32(name='PageSize', example='20', minimum=1, maximum=100, position='Query'),
  projectCode: string(name='ProjectCode', example='4de2c367****8c585e5992**', position='Query'),
}

model QuerySolutionDeviceGroupPageResponseBody = {
  code?: string(name='Code', example='iot.tcloud.ProjectNotFound'),
  data?: {
    list?: {
      itemName?: [ 
      {
        deviceCount?: long(name='DeviceCount', example='100'),
        gmtCreate?: long(name='GmtCreate', example='1356565656'),
        gmtModified?: long(name='GmtModified', example='1357865658'),
        groupDesc?: string(name='GroupDesc', example='description'),
        groupId?: string(name='GroupId', example='4de2c367****8c585e5992**'),
        groupName?: string(name='GroupName', example='test***'),
      }
    ](name='itemName')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='project not found'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySolutionDeviceGroupPageResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySolutionDeviceGroupPageResponseBody(name='body'),
}

async function querySolutionDeviceGroupPage(request: QuerySolutionDeviceGroupPageRequest): QuerySolutionDeviceGroupPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySolutionDeviceGroupPage', 'POST', '/', 'json', false, 'json', request);
}

model QuerySoundCodeLabelBatchFailedResultRequest {
  batchCode: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
}

model QuerySoundCodeLabelBatchFailedResultResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    items?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='sound code label exist'),
      label?: string(name='Label', example='test'),
      resultCode?: string(name='ResultCode', example='7541'),
    }
  ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelBatchFailedResultResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySoundCodeLabelBatchFailedResultResponseBody(name='body'),
}

async function querySoundCodeLabelBatchFailedResult(request: QuerySoundCodeLabelBatchFailedResultRequest): QuerySoundCodeLabelBatchFailedResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySoundCodeLabelBatchFailedResult', 'POST', '/', 'json', true, 'form', request);
}

model QuerySoundCodeLabelBatchListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model QuerySoundCodeLabelBatchListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
        description?: string(name='Description', example='test'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        status?: string(name='Status', example='RUNNING'),
        successNum?: int32(name='SuccessNum', example='1'),
        total?: int32(name='Total', example='20'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelBatchListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySoundCodeLabelBatchListResponseBody(name='body'),
}

async function querySoundCodeLabelBatchList(request: QuerySoundCodeLabelBatchListRequest): QuerySoundCodeLabelBatchListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySoundCodeLabelBatchList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySoundCodeLabelListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model QuerySoundCodeLabelListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        label?: string(name='Label', example='test'),
        soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySoundCodeLabelListResponseBody(name='body'),
}

async function querySoundCodeLabelList(request: QuerySoundCodeLabelListRequest): QuerySoundCodeLabelListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySoundCodeLabelList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySoundCodeListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
}

model QuerySoundCodeListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        duration?: int32(name='Duration', example='2'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        name?: string(name='Name', example='test1'),
        openType?: string(name='OpenType', example='OPEN'),
        soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
        soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySoundCodeListResponseBody(name='body'),
}

async function querySoundCodeList(request: QuerySoundCodeListRequest): QuerySoundCodeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySoundCodeList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySoundCodeScheduleListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='20', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='1', minimum=1, maximum=50, position='Body'),
}

model QuerySoundCodeScheduleListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        description?: string(name='Description', example='test'),
        endDate?: string(name='EndDate', example='2022-03-28'),
        endTime?: string(name='EndTime', example='23:59'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        name?: string(name='Name', example='test'),
        openType?: string(name='OpenType', example='INNER'),
        scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
        startDate?: string(name='StartDate', example='2022-03-28'),
        startTime?: string(name='StartTime', example='00:00'),
        status?: string(name='Status', example='WORKING'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeScheduleListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySoundCodeScheduleListResponseBody(name='body'),
}

async function querySoundCodeScheduleList(request: QuerySoundCodeScheduleListRequest): QuerySoundCodeScheduleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySoundCodeScheduleList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  speechCode: string(name='SpeechCode', example='4de2c367****8c585e5992**', position='Body'),
}

model QuerySpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    audioFormat?: string(name='AudioFormat', example='wav'),
    bizCode?: string(name='BizCode', example='identifying'),
    enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
    soundCodeConfig?: {
      additionalDuration?: int32(name='AdditionalDuration', example='3'),
      soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
    }(name='SoundCodeConfig'),
    speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
    speechRate?: int32(name='SpeechRate', example='0'),
    speechType?: string(name='SpeechType', example='custom'),
    text?: string(name='Text', example='test'),
    voice?: string(name='Voice', example='Siyue'),
    volume?: int32(name='Volume', example='50'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechResponseBody(name='body'),
}

async function querySpeech(request: QuerySpeechRequest): QuerySpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeech', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpeechDeviceRequest {
  availableSpace?: string(name='AvailableSpace', example='500', position='Body'),
  availableSpaceScope?: string(name='AvailableSpaceScope', example='smaller', position='Body'),
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
  projectCode: string(name='ProjectCode', example='4de2c367****8c585e5992**', position='Body'),
}

model QuerySpeechDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      items?: [ 
      {
        availableSpace?: float(name='AvailableSpace', example='200'),
        deviceName?: string(name='DeviceName', example='test'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechDeviceResponseBody(name='body'),
}

async function querySpeechDevice(request: QuerySpeechDeviceRequest): QuerySpeechDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechDevice', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpeechLicenseDeviceListRequest {
  checkGroupId?: string(name='CheckGroupId', example='4de2c367****8c585e5992**', position='Body'),
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***', position='Query'),
  licenseStatusList?: [ string ](name='LicenseStatusList', example='NORMAL', position='Body'),
  pageId?: int32(name='PageId', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Body'),
}

model QuerySpeechLicenseDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      item?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        deviceStatus?: string(name='DeviceStatus', example='ONLINE'),
        expiryTime?: long(name='ExpiryTime', example='1620624606000'),
        inSpecifiedGroup?: boolean(name='InSpecifiedGroup', example='true'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        licenseStatus?: string(name='LicenseStatus', example='NORMAL'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        productName?: string(name='ProductName', example='test'),
      }
    ](name='item')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechLicenseDeviceListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechLicenseDeviceListResponseBody(name='body'),
}

async function querySpeechLicenseDeviceList(request: QuerySpeechLicenseDeviceListRequest): QuerySpeechLicenseDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechLicenseDeviceList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpeechListRequest {
  audioFormat?: string(name='AudioFormat', example='wav', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
  projectCode: string(name='ProjectCode', example='4de2c367****8c585e5992**', position='Body'),
}

model QuerySpeechListResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='identifying'),
        speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode', example='identifying'),
            speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
            text?: string(name='Text', example='test'),
            voice?: string(name='Voice', example='Siyue'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType', example='custom'),
        text?: string(name='Text', example='test'),
        voice?: string(name='Voice', example='Siyue'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechListResponseBody(name='body'),
}

async function querySpeechList(request: QuerySpeechListRequest): QuerySpeechListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpeechPushJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****', position='Body'),
  jobCode?: string(name='JobCode', example='tBUm***********************QPGT', position='Query'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
  projectCode: string(name='ProjectCode', example='0Ykj************************Av0I', position='Body'),
  pushMode?: string(name='PushMode', example='ALL', position='Body'),
  statusList?: [ string ](name='StatusList', example='RUNNING', position='Body'),
}

model QuerySpeechPushJobResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        code?: string(name='Code', example='tBUm***********************QPGT'),
        createdTime?: long(name='CreatedTime', example='1620634297000'),
        deviceName?: string(name='DeviceName', example='test'),
        expiredTime?: long(name='ExpiredTime', example='1620634297000'),
        failDeviceNum?: int32(name='FailDeviceNum', example='1'),
        groupId?: string(name='GroupId', example='test_group'),
        groupName?: string(name='GroupName'),
        iotId?: string(name='IotId', example='0iOf*****************n001'),
        productKey?: string(name='ProductKey', example='den0ZLt****'),
        pushMode?: string(name='PushMode', example='ALL'),
        runningDeviceNum?: int32(name='RunningDeviceNum', example='2'),
        speechNum?: int32(name='SpeechNum', example='1'),
        speechStatus?: boolean(name='SpeechStatus', example='true'),
        status?: string(name='Status', example='RUNNING'),
        successDeviceNum?: int32(name='SuccessDeviceNum', example='1'),
        totalDeviceNum?: int32(name='TotalDeviceNum', example='3'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechPushJobResponseBody(name='body'),
}

async function querySpeechPushJob(request: QuerySpeechPushJobRequest): QuerySpeechPushJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechPushJob', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpeechPushJobDeviceRequest {
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****', position='Body'),
  jobCode: string(name='JobCode', example='tBUm***********************QPGT', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
  status?: string(name='Status', example='SUCCESS', position='Body'),
}

model QuerySpeechPushJobDeviceResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        errorCode?: string(name='ErrorCode', example='2'),
        errorMessage?: string(name='ErrorMessage', example='device storage limited'),
        gmtModified?: long(name='GmtModified', example='1620624606000'),
        status?: string(name='Status', example='SUCCESS'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechPushJobDeviceResponseBody(name='body'),
}

async function querySpeechPushJobDevice(request: QuerySpeechPushJobDeviceRequest): QuerySpeechPushJobDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechPushJobDevice', 'POST', '/', 'json', true, 'form', request);
}

model QuerySpeechPushJobSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****', position='Body'),
  jobCode: string(name='JobCode', example='0Ykj************************Av0I', position='Body'),
  pageId?: int32(name='PageId', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
}

model QuerySpeechPushJobSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        bizCode?: string(name='BizCode', example='ZFDZ'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode', example='SYS_TONE_0'),
            text?: string(name='Text', example='1'),
            voice?: string(name='Voice', example='Xiaoyun'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType', example='CUSTOM'),
        text?: string(name='Text'),
        voice?: string(name='Voice', example='Xiaoyun'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechPushJobSpeechResponseBody(name='body'),
}

async function querySpeechPushJobSpeech(request: QuerySpeechPushJobSpeechRequest): QuerySpeechPushJobSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechPushJobSpeech', 'POST', '/', 'json', true, 'form', request);
}

model QueryStudioAppDomainListOpenRequest {
  appId: string(name='AppId', example='a12******', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a12******', position='Body'),
}

model QueryStudioAppDomainListOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      domainInfo?: [ 
      {
        appId?: string(name='AppId', example='a12*******'),
        gmtCreate?: string(name='GmtCreate', example='1619598445000'),
        gmtModified?: string(name='GmtModified', example='1619598445000'),
        host?: string(name='Host', example='example.com'),
        id?: int32(name='Id', example='1548'),
        isBeian?: string(name='IsBeian', example='YES'),
        projectId?: string(name='ProjectId', example='a123********'),
        protocol?: string(name='Protocol', example='https'),
        tenantId?: string(name='TenantId', example='C70B541046F64EAAB*********'),
      }
    ](name='DomainInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppDomainListOpenResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioAppDomainListOpenResponseBody(name='body'),
}

async function queryStudioAppDomainListOpen(request: QueryStudioAppDomainListOpenRequest): QueryStudioAppDomainListOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioAppDomainListOpen', 'POST', '/', 'json', true, 'form', request);
}

model QueryStudioAppListRequest {
  fuzzyName?: string(name='FuzzyName', example='test1', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  pageNo?: int32(name='PageNo', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='2', position='Body'),
  projectId: string(name='ProjectId', example='a123********', position='Body'),
  types: [ string ](name='Types', example='["webApp", "mobileApp"]', position='Body'),
}

model QueryStudioAppListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      appInfo?: [ 
      {
        appId?: string(name='AppId', example='a123********'),
        appKey?: string(name='AppKey', example='322******'),
        appSecret?: string(name='AppSecret', example='a605*******'),
        description?: string(name='Description', example='This is a test.'),
        gmtCreate?: string(name='GmtCreate', example='2020-12-25 16:20:53'),
        gmtModified?: string(name='GmtModified', example='2021-04-10 15:06:23'),
        gmtRelease?: string(name='GmtRelease', example='2021-04-15 19:11:32'),
        name?: string(name='Name', example='test1'),
        projectId?: string(name='ProjectId', example='a123********'),
        type?: string(name='Type', example='webApp'),
      }
    ](name='AppInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
    totalPage?: int32(name='TotalPage', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioAppListResponseBody(name='body'),
}

async function queryStudioAppList(request: QueryStudioAppListRequest): QueryStudioAppListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioAppList', 'POST', '/', 'json', true, 'form', request);
}

model QueryStudioAppPageListOpenRequest {
  appId: string(name='AppId', example='a12*******', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  isRelease?: boolean(name='IsRelease', example='false', position='Body'),
  pageNo?: int32(name='PageNo', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  projectId: string(name='ProjectId', example='a12******', position='Body'),
}

model QueryStudioAppPageListOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      pageInfo?: [ 
      {
        gmtCreate?: string(name='GmtCreate', example='2020-12-25T16:21Z'),
        gmtModified?: string(name='GmtModified', example='2021-05-08T17:18Z'),
        id?: int32(name='Id', example='49739'),
        isHidden?: int32(name='IsHidden', example='1'),
        isHome?: int32(name='IsHome', example='1'),
        isLoginPage?: int32(name='IsLoginPage', example='1'),
        name?: string(name='Name', example='test1'),
        pageId?: string(name='PageId', example='44920'),
        path?: string(name='Path', example='/page/44920'),
      }
    ](name='PageInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppPageListOpenResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioAppPageListOpenResponseBody(name='body'),
}

async function queryStudioAppPageListOpen(request: QueryStudioAppPageListOpenRequest): QueryStudioAppPageListOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioAppPageListOpen', 'POST', '/', 'json', true, 'form', request);
}

model QueryStudioProjectListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  name?: string(name='Name', example='test1', position='Body'),
  pageNo?: int32(name='PageNo', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='20', minimum=1, maximum=50, position='Body'),
}

model QueryStudioProjectListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      projectInfo?: [ 
      {
        description?: string(name='Description', example='This is a test project.'),
        gmtCreate?: long(name='GmtCreate', example='1611819839000'),
        gmtModified?: long(name='GmtModified', example='1611819860000'),
        name?: string(name='Name', example='test1'),
        projectId?: string(name='ProjectId', example='a123********'),
      }
    ](name='ProjectInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
    totalPage?: int32(name='TotalPage', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioProjectListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioProjectListResponseBody(name='body'),
}

async function queryStudioProjectList(request: QueryStudioProjectListRequest): QueryStudioProjectListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioProjectList', 'POST', '/', 'json', true, 'form', request);
}

model QuerySubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1fyXVF****', position='Query'),
  type: string(name='Type', example='AMQP', position='Query'),
}

model QuerySubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  consumerGroupIds?: [ string ](name='ConsumerGroupIds'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', example='true'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', example='true'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', example='true'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', example='true'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', example='true'),
  mnsConfiguration?: string(name='MnsConfiguration', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }'),
  otaEventFlag?: boolean(name='OtaEventFlag', example='true'),
  otaJobFlag?: boolean(name='OtaJobFlag', example='true'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', example='true'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  subscribeFlags?: string(name='SubscribeFlags'),
  success?: boolean(name='Success', example='true'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', example='true'),
  type?: string(name='Type', example='AMQP'),
}

model QuerySubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubscribeRelationResponseBody(name='body'),
}

async function querySubscribeRelation(request: QuerySubscribeRelationRequest): QuerySubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model QuerySummarySceneRuleLogRequest {
  currentPage: int32(name='CurrentPage', example='1', position='Query'),
  endTime: int32(name='EndTime', example='1582373873', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  ruleId: string(name='RuleId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  startTime: int32(name='StartTime', example='1582372973', position='Query'),
  status: string(name='Status', example='2', position='Query'),
}

model QuerySummarySceneRuleLogResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    logList?: {
      logInfo?: [ 
      {
        logTime?: int32(name='LogTime', example='1582373706'),
        result?: string(name='Result', example='true'),
        traceId?: string(name='TraceId', example='a6a5b5df1582373508176121******'),
      }
    ](name='LogInfo')
    }(name='LogList'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='3'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='2279A994-3E7D-4EC6-BD17-FA0D0EC2EC77'),
  success?: boolean(name='Success', example='true'),
}

model QuerySummarySceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySummarySceneRuleLogResponseBody(name='body'),
}

async function querySummarySceneRuleLog(request: QuerySummarySceneRuleLogRequest): QuerySummarySceneRuleLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySummarySceneRuleLog', 'POST', '/', 'json', false, 'json', request);
}

model QuerySuperDeviceGroupRequest {
  groupId: string(name='GroupId', example='DMoI2Kby5m62****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model QuerySuperDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', example='A test'),
      groupId?: string(name='GroupId', example='tDQvBJqbUyHskDse'),
      groupName?: string(name='GroupName', example='IOTTEST'),
    }
  ](name='GroupInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='7411716B-A488-4EEB-9AA0-6DB05AD2491F'),
  success?: boolean(name='Success', example='true'),
}

model QuerySuperDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySuperDeviceGroupResponseBody(name='body'),
}

async function querySuperDeviceGroup(request: QuerySuperDeviceGroupRequest): QuerySuperDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySuperDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  taskId: string(name='TaskId', example='MSnT9***q010101', position='Query'),
}

model QueryTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='mydevice'),
    iotId?: string(name='IotId', example='BDjhI****01'),
    jobId?: string(name='JobId', example='sGWotgRkutxX*****'),
    jobName?: string(name='JobName', example='MyTestJobIax6Eq'),
    message?: string(name='Message', example='this is message about task execution'),
    productKey?: string(name='ProductKey', example='a1S****'),
    progress?: string(name='Progress', example='80'),
    status?: string(name='Status', example='SUCCEEDED'),
    statusDetail?: string(name='StatusDetail', example='{ "msg":"this is message reported by device" }'),
    taskId?: string(name='TaskId', example='MSnT9***q010101'),
    utcModified?: string(name='UtcModified', example='2019-05-21T13:03:56.000Z'),
    utcQueueTime?: string(name='UtcQueueTime', example='2019-05-21T13:03:53.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model QueryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskResponseBody(name='body'),
}

async function queryTask(request: QueryTaskRequest): QueryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTask', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****', position='Query'),
}

model QueryThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelResponseBody(name='body'),
}

async function queryThingModel(request: QueryThingModelRequest): QueryThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModel', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelExtendConfigRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0', position='Query'),
  productKey: string(name='ProductKey', example='a1T27vz****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='123***', position='Query'),
}

model QueryThingModelExtendConfigResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    configuration?: string(name='Configuration', example='{\\"profile\\":{\\"productKey\\":\\"a114x******\\"},\\"properties\\":[{\\"originalDataType\\":{\\"specs\\":{\\"registerCount\\":1,\\"reverseRegister\\":0,\\"swap16\\":0},\\"type\\":\\"bool\\"},\\"identifier\\":\\"WakeUpData\\",\\"registerAddress\\":\\"0x04\\",\\"scaling\\":1,\\"writeFunctionCode\\":0,\\"operateType\\":\\"inputStatus\\",\\"pollingTime\\":1000,\\"trigger\\":1}]}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelExtendConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelExtendConfigResponseBody(name='body'),
}

async function queryThingModelExtendConfig(request: QueryThingModelExtendConfigRequest): QueryThingModelExtendConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModelExtendConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelExtendConfigPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model QueryThingModelExtendConfigPublishedResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    configuration?: string(name='Configuration', example='{\\"profile\\":{\\"productKey\\":\\"a114x******\\"},\\"properties\\":[{\\"originalDataType\\":{\\"specs\\":{\\"registerCount\\":1,\\"reverseRegister\\":0,\\"swap16\\":0},\\"type\\":\\"bool\\"},\\"identifier\\":\\"WakeUpData\\",\\"registerAddress\\":\\"0x04\\",\\"scaling\\":1,\\"writeFunctionCode\\":0,\\"operateType\\":\\"inputStatus\\",\\"pollingTime\\":1000,\\"trigger\\":1}]}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelExtendConfigPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelExtendConfigPublishedResponseBody(name='body'),
}

async function queryThingModelExtendConfigPublished(request: QueryThingModelExtendConfigPublishedRequest): QueryThingModelExtendConfigPublishedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModelExtendConfigPublished', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd***', position='Query'),
}

model QueryThingModelPublishedResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelPublishedResponseBody(name='body'),
}

async function queryThingModelPublished(request: QueryThingModelPublishedRequest): QueryThingModelPublishedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModelPublished', 'POST', '/', 'json', false, 'json', request);
}

model QueryTopicReverseRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  topic: string(name='Topic', example='/x7aWKW9***/testDataToDataHub/user/update', position='Query'),
}

model QueryTopicReverseRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC"'),
  srcTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='SrcTopics'),
  success?: boolean(name='Success', example='true'),
}

model QueryTopicReverseRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTopicReverseRouteTableResponseBody(name='body'),
}

async function queryTopicReverseRouteTable(request: QueryTopicReverseRouteTableRequest): QueryTopicReverseRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTopicReverseRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model QueryTopicRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  topic: string(name='Topic', example='/x7aWKW94bb8/testDataToDataHub/user/update', position='Query'),
}

model QueryTopicRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dstTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='DstTopics'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model QueryTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTopicRouteTableResponseBody(name='body'),
}

async function queryTopicRouteTable(request: QueryTopicRouteTableRequest): QueryTopicRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTopicRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model QueryVehicleDeviceRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  productKey?: string(name='ProductKey', example='a1Bw****', position='Query'),
}

model QueryVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    authCode?: string(name='AuthCode', example='******'),
    city?: string(name='City'),
    createTime?: long(name='CreateTime', example='1557062301656'),
    deviceId?: string(name='DeviceId', example='di0001'),
    deviceModel?: string(name='DeviceModel', example='dm0001'),
    deviceName?: string(name='DeviceName', example='light'),
    iotId?: string(name='IotId', example='dm0001'),
    manufacturer?: string(name='Manufacturer', example='mf0001'),
    modifiedTime?: long(name='ModifiedTime', example='1657062301656'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    province?: string(name='Province'),
    registerTime?: long(name='RegisterTime', example='1517062301656'),
    status?: string(name='Status', example='create'),
    vehicleColour?: string(name='VehicleColour', example='1'),
    vehicleNumber?: string(name='VehicleNumber'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model QueryVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryVehicleDeviceResponseBody(name='body'),
}

async function queryVehicleDevice(request: QueryVehicleDeviceRequest): QueryVehicleDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryVehicleDevice', 'POST', '/', 'json', false, 'json', request);
}

model RRpcRequest {
  contentType?: string(name='ContentType', position='Query'),
  deviceName: string(name='DeviceName', example='device1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='aldfeSe****', position='Query'),
  requestBase64Byte: string(name='RequestBase64Byte', example='dGhpcyBpcyBhbiBleGFtcGxl', position='Query'),
  timeout: int32(name='Timeout', example='1000', position='Query'),
  topic?: string(name='Topic', example='/a1uZfYb****/A_Vol****/user/update', position='Query'),
}

model RRpcResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId', example='889455942124347392'),
  payloadBase64Byte?: string(name='PayloadBase64Byte', example='d29ybGQgaGVsbG8='),
  requestId?: string(name='RequestId', example='41C4265E-F05D-4E2E-AB09-E031F501AF7F'),
  rrpcCode?: string(name='RrpcCode', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
}

model RRpcResponse = {
  headers: map[string]string(name='headers'),
  body: RRpcResponseBody(name='body'),
}

async function rRpc(request: RRpcRequest): RRpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RRpc', 'POST', '/', 'json', false, 'json', request);
}

model ReBindLicenseDeviceRequest {
  deviceNameList: [ string ](name='DeviceNameList', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  licenseCode: string(name='LicenseCode', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model ReBindLicenseDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    checkProgressId?: string(name='CheckProgressId'),
    failSum?: long(name='FailSum'),
    progress?: int32(name='Progress'),
    resultCsvFile?: string(name='ResultCsvFile'),
    successSum?: long(name='SuccessSum'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReBindLicenseDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ReBindLicenseDeviceResponseBody(name='body'),
}

async function reBindLicenseDevice(request: ReBindLicenseDeviceRequest): ReBindLicenseDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReBindLicenseDevice', 'POST', '/', 'json', true, 'form', request);
}

model RecognizeCarNumRequest {
  url?: string(name='Url', example='https://img.alicdn.com/***/i4/O1***f_***-582.png', position='Query'),
}

model RecognizeCarNumResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model RecognizeCarNumResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizeCarNumResponseBody(name='body'),
}

async function recognizeCarNum(request: RecognizeCarNumRequest): RecognizeCarNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizeCarNum', 'POST', '/', 'json', false, 'json', request);
}

model RecognizePictureGeneralRequest {
  url: string(name='Url', example='https://img.alicdn.com/***/i4/O1***f_***-582.png', position='Query'),
}

model RecognizePictureGeneralResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model RecognizePictureGeneralResponse = {
  headers: map[string]string(name='headers'),
  body: RecognizePictureGeneralResponseBody(name='body'),
}

async function recognizePictureGeneral(request: RecognizePictureGeneralRequest): RecognizePictureGeneralResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecognizePictureGeneral', 'POST', '/', 'json', false, 'json', request);
}

model RefreshDeviceTunnelSharePasswordRequest {
  deviceName: string(name='DeviceName', example='LEGatewayAuto_B3XM******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1Wmy******', position='Query'),
}

model RefreshDeviceTunnelSharePasswordResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  password?: string(name='Password', example='5f5c96d7e792af75da33a81dc87982ea********'),
  requestId?: string(name='RequestId', example='46AF6619-EFF3-4B77-A90B-B9EAA0C6D1AF'),
  success?: boolean(name='Success', example='true'),
}

model RefreshDeviceTunnelSharePasswordResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDeviceTunnelSharePasswordResponseBody(name='body'),
}

async function refreshDeviceTunnelSharePassword(request: RefreshDeviceTunnelSharePasswordRequest): RefreshDeviceTunnelSharePasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDeviceTunnelSharePassword', 'POST', '/', 'json', false, 'json', request);
}

model RefreshStudioAppTokenOpenRequest {
  appId: string(name='AppId', example='a12******', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a123*******', position='Body'),
}

model RefreshStudioAppTokenOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    bizId?: string(name='BizId', example='a12*******'),
    bizType?: string(name='BizType', example='webApp'),
    isEnable?: string(name='IsEnable', example='YES'),
    token?: string(name='Token', example='cf245ddebd******'),
    type?: string(name='Type', example='custom'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model RefreshStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshStudioAppTokenOpenResponseBody(name='body'),
}

async function refreshStudioAppTokenOpen(request: RefreshStudioAppTokenOpenRequest): RefreshStudioAppTokenOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshStudioAppTokenOpen', 'POST', '/', 'json', true, 'form', request);
}

model RegisterDeviceRequest {
  appKey?: string(name='AppKey', example='674f***', position='Query'),
  devEui?: string(name='DevEui', example='e8SDdgeIlk3nED****', position='Query'),
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  joinEui?: string(name='JoinEui', example='Ede4tde8erth****', position='Query'),
  loraNodeType?: string(name='LoraNodeType', example='ALIYUNDEFINED', position='Query'),
  nickname?: string(name='Nickname', position='Query'),
  pinCode?: string(name='PinCode', example='DIe80dfeg*****', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    devEui?: string(name='DevEui', example='e8SDdgeIlk3nED****'),
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    iotId?: string(name='IotId', example='1O4YPNtRqB2anumz2Canp4GB7q****'),
    joinEui?: string(name='JoinEui', example='Ede4tde8erth****'),
    nickname?: string(name='Nickname'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDevice', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseEdgeDriverVersionRequest {
  driverId: string(name='DriverId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  driverVersion: string(name='DriverVersion', example='1.2.0', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model ReleaseEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3E56BFDF-3F00-495F-89A1-F891930DDB51'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEdgeDriverVersionResponseBody(name='body'),
}

async function releaseEdgeDriverVersion(request: ReleaseEdgeDriverVersionRequest): ReleaseEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model ReleaseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseProductResponseBody(name='body'),
}

async function releaseProduct(request: ReleaseProductRequest): ReleaseProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseProduct', 'POST', '/', 'json', false, 'json', request);
}

model RemoveThingTopoRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model RemoveThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model RemoveThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveThingTopoResponseBody(name='body'),
}

async function removeThingTopo(request: RemoveThingTopoRequest): RemoveThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceEdgeInstanceGatewayRequest {
  currentGatewayId: string(name='CurrentGatewayId', example='oTCJomvT95WPyPPQ5sje******', position='Query'),
  instanceId: string(name='InstanceId', example='G4TGWGYwpo8zwr******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  newGatewayId: string(name='NewGatewayId', example='65SkFyhZcU5d3PO2Ri13******', position='Query'),
}

model ReplaceEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='10E5C856-E0A1-4468-BE01-E540A8BA8819'),
  success?: boolean(name='Success', example='true'),
}

model ReplaceEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceEdgeInstanceGatewayResponseBody(name='body'),
}

async function replaceEdgeInstanceGateway(request: ReplaceEdgeInstanceGatewayRequest): ReplaceEdgeInstanceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceEdgeInstanceGateway', 'POST', '/', 'json', false, 'json', request);
}

model RerunJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****', position='Query'),
  jobId: string(name='JobId', example='450407b***', position='Query'),
}

model RerunJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A6BEAB33-03E6-4CE0-A94F-9E24C5512BAD'),
  success?: boolean(name='Success', example='true'),
}

model RerunJobResponse = {
  headers: map[string]string(name='headers'),
  body: RerunJobResponseBody(name='body'),
}

async function rerunJob(request: RerunJobRequest): RerunJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RerunJob', 'POST', '/', 'json', false, 'json', request);
}

model ResetConsumerGroupPositionRequest {
  groupId: string(name='GroupId', example='nJRaJPn5U1JITGf******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
}

model ResetConsumerGroupPositionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ResetConsumerGroupPositionResponse = {
  headers: map[string]string(name='headers'),
  body: ResetConsumerGroupPositionResponseBody(name='body'),
}

async function resetConsumerGroupPosition(request: ResetConsumerGroupPositionRequest): ResetConsumerGroupPositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetConsumerGroupPosition', 'POST', '/', 'json', false, 'json', request);
}

model ResetThingRequest {
  deviceName?: string(name='DeviceName', example='device1', position='Query'),
  iotId?: string(name='IotId', example='SR8FiTu1R9tlUR2V1bmi0010a5****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey?: string(name='ProductKey', example='a1KiV******', position='Query'),
}

model ResetThingResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='450407b***'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model ResetThingResponse = {
  headers: map[string]string(name='headers'),
  body: ResetThingResponseBody(name='body'),
}

async function resetThing(request: ResetThingRequest): ResetThingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetThing', 'POST', '/', 'json', false, 'json', request);
}

model RetrySoundCodeLabelBatchRequest {
  batchCode: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
}

model RetrySoundCodeLabelBatchResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model RetrySoundCodeLabelBatchResponse = {
  headers: map[string]string(name='headers'),
  body: RetrySoundCodeLabelBatchResponseBody(name='body'),
}

async function retrySoundCodeLabelBatch(request: RetrySoundCodeLabelBatchRequest): RetrySoundCodeLabelBatchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RetrySoundCodeLabelBatch', 'POST', '/', 'json', true, 'form', request);
}

model ReupgradeOTATaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***', position='Query'),
  jobId: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****', position='Query'),
  taskId: [ string ](name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****', position='Query'),
}

model ReupgradeOTATaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='false'),
}

model ReupgradeOTATaskResponse = {
  headers: map[string]string(name='headers'),
  body: ReupgradeOTATaskResponseBody(name='body'),
}

async function reupgradeOTATask(request: ReupgradeOTATaskRequest): ReupgradeOTATaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReupgradeOTATask', 'POST', '/', 'json', false, 'json', request);
}

model SaveDevicePropRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  props: string(name='Props', example='{"color":"red"}', position='Query'),
}

model SaveDevicePropResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SaveDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: SaveDevicePropResponseBody(name='body'),
}

async function saveDeviceProp(request: SaveDevicePropRequest): SaveDevicePropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveDeviceProp', 'POST', '/', 'json', false, 'json', request);
}

model SaveScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***', position='Query'),
  parserId: long(name='ParserId', example='1001', minimum=0, maximum=99999999, position='Query'),
  scriptDraft: string(name='ScriptDraft', example='var data = payload("json")', position='Query'),
}

model SaveScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model SaveScriptResponse = {
  headers: map[string]string(name='headers'),
  body: SaveScriptResponseBody(name='body'),
}

async function saveScript(request: SaveScriptRequest): SaveScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveScript', 'POST', '/', 'json', false, 'json', request);
}

model SetDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  items: string(name='Items', example='{"Temperature":35}', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  versions: string(name='Versions', example='{"Temperature":2}', position='Query'),
}

model SetDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='300511751'),
    versions?: string(name='Versions', example='{\\"Temperature\\":2}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceDesiredPropertyResponseBody(name='body'),
}

async function setDeviceDesiredProperty(request: SetDeviceDesiredPropertyRequest): SetDeviceDesiredPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceDesiredProperty', 'POST', '/', 'json', false, 'json', request);
}

model SetDeviceGroupTagsRequest {
  groupId: string(name='GroupId', example='W16X8Tvdosec****', position='Query'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  tagString?: string(name='TagString', example='[{"tagKey":"h1","tagValue":"rr"},{"tagKey":"7h","tagValue":"rr"}]', position='Query'),
}

model SetDeviceGroupTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='12CFDAF1-99D9-42E0-8C2F-F281DA5E8953'),
  success?: boolean(name='Success', example='true'),
}

model SetDeviceGroupTagsResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceGroupTagsResponseBody(name='body'),
}

async function setDeviceGroupTags(request: SetDeviceGroupTagsRequest): SetDeviceGroupTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceGroupTags', 'POST', '/', 'json', false, 'json', request);
}

model SetDevicePropertyRequest {
  deviceName?: string(name='DeviceName', example='light', position='Query'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64*****', position='Query'),
  items: string(name='Items', example='{"Switch":1,"Color":"blue"}', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model SetDevicePropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='abcabc123'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicePropertyResponseBody(name='body'),
}

async function setDeviceProperty(request: SetDevicePropertyRequest): SetDevicePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceProperty', 'POST', '/', 'json', false, 'json', request);
}

model SetDevicesPropertyRequest {
  deviceName: [ string ](name='DeviceName', example='light', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  items: string(name='Items', example='{"Switch":1,"Color":"blue"}', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
}

model SetDevicesPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetDevicesPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicesPropertyResponseBody(name='body'),
}

async function setDevicesProperty(request: SetDevicesPropertyRequest): SetDevicesPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDevicesProperty', 'POST', '/', 'json', false, 'json', request);
}

model SetEdgeInstanceDriverConfigsRequest {
  configs: [ 
    {
      content: string(name='Content', example='{"test":123}'),
      format: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs', position='Query'),
  driverId: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model SetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='252C7754-F6A2-454B-9DE2-382A97FC0C3F'),
  success?: boolean(name='Success', example='true'),
}

model SetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: SetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function setEdgeInstanceDriverConfigs(request: SetEdgeInstanceDriverConfigsRequest): SetEdgeInstanceDriverConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetEdgeInstanceDriverConfigs', 'POST', '/', 'json', false, 'json', request);
}

model SetProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  issueModel: int32(name='IssueModel', example='1', position='Query'),
  productKey: string(name='ProductKey', example='aS2dewS****', position='Query'),
}

model SetProductCertInfoResponseBody = {
  code?: string(name='Code', example='MissingProductKey'),
  errorMessage?: string(name='ErrorMessage', example='ProductKey is mandatory for this action.'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model SetProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetProductCertInfoResponseBody(name='body'),
}

async function setProductCertInfo(request: SetProductCertInfoRequest): SetProductCertInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetProductCertInfo', 'POST', '/', 'json', false, 'json', request);
}

model SetStudioProjectCooperationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  status: string(name='Status', example='1', position='Body'),
}

model SetStudioProjectCooperationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetStudioProjectCooperationResponse = {
  headers: map[string]string(name='headers'),
  body: SetStudioProjectCooperationResponseBody(name='body'),
}

async function setStudioProjectCooperation(request: SetStudioProjectCooperationRequest): SetStudioProjectCooperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetStudioProjectCooperation', 'POST', '/', 'json', true, 'form', request);
}

model SetupStudioAppAuthModeOpenRequest {
  appId: string(name='AppId', example='a12*****', position='Body'),
  authMode: int32(name='AuthMode', example='1', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectId: string(name='ProjectId', example='a123********', position='Body'),
}

model SetupStudioAppAuthModeOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    authMode?: int32(name='AuthMode', example='1'),
    tokenInfo?: {
      bizId?: string(name='BizId', example='a12********'),
      bizType?: string(name='BizType', example='webApp'),
      isEnable?: string(name='IsEnable', example='YES'),
      token?: string(name='Token', example='25bf576a6c6f**********'),
      type?: string(name='Type', example='custom'),
    }(name='TokenInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetupStudioAppAuthModeOpenResponse = {
  headers: map[string]string(name='headers'),
  body: SetupStudioAppAuthModeOpenResponseBody(name='body'),
}

async function setupStudioAppAuthModeOpen(request: SetupStudioAppAuthModeOpenRequest): SetupStudioAppAuthModeOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetupStudioAppAuthModeOpen', 'POST', '/', 'json', true, 'form', request);
}

model ShareSpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav', position='Body'),
  combinationList: [ string ](name='CombinationList', example='ZFBDZ', position='Body'),
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Body'),
  speechId?: string(name='SpeechId', example='42000011392021112380********', position='Body'),
}

model ShareSpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model ShareSpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  body: ShareSpeechByCombinationResponseBody(name='body'),
}

async function shareSpeechByCombination(request: ShareSpeechByCombinationRequest): ShareSpeechByCombinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ShareSpeechByCombination', 'POST', '/', 'json', true, 'form', request);
}

model SpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav', position='Body'),
  combinationList: [ string ](name='CombinationList', example='ZFBDZ', position='Body'),
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  enforceFlag?: boolean(name='EnforceFlag', position='Body'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Body'),
  speechId?: string(name='SpeechId', example='42000011392021112380********', position='Body'),
}

model SpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  body: SpeechByCombinationResponseBody(name='body'),
}

async function speechByCombination(request: SpeechByCombinationRequest): SpeechByCombinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SpeechByCombination', 'POST', '/', 'json', true, 'form', request);
}

model SpeechBySynthesisRequest {
  audioFormat: string(name='AudioFormat', example='wav', position='Body'),
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Body'),
  speechId?: string(name='SpeechId', example='42000011392021112380********', position='Body'),
  speechRate?: int32(name='SpeechRate', example='0', minimum=-500, maximum=500, position='Body'),
  text: string(name='Text', example='test', position='Body'),
  voice: string(name='Voice', example='Siyue', position='Body'),
  volume?: int32(name='Volume', example='50', minimum=0, maximum=100, position='Body'),
}

model SpeechBySynthesisResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SpeechBySynthesisResponse = {
  headers: map[string]string(name='headers'),
  body: SpeechBySynthesisResponseBody(name='body'),
}

async function speechBySynthesis(request: SpeechBySynthesisRequest): SpeechBySynthesisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SpeechBySynthesis', 'POST', '/', 'json', true, 'form', request);
}

model StartParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***', position='Query'),
  parserId: long(name='ParserId', example='1001', minimum=0, maximum=99999999999, position='Query'),
}

model StartParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model StartParserResponse = {
  headers: map[string]string(name='headers'),
  body: StartParserResponseBody(name='body'),
}

async function startParser(request: StartParserRequest): StartParserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartParser', 'POST', '/', 'json', false, 'json', request);
}

model StartRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: long(name='RuleId', example='100000', position='Query'),
}

model StartRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', example='true'),
}

model StartRuleResponse = {
  headers: map[string]string(name='headers'),
  body: StartRuleResponseBody(name='body'),
}

async function startRule(request: StartRuleRequest): StartRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRule', 'POST', '/', 'json', false, 'json', request);
}

model StopParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***', position='Query'),
  parserId: long(name='ParserId', example='1001', minimum=0, maximum=99999999999, position='Query'),
}

model StopParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model StopParserResponse = {
  headers: map[string]string(name='headers'),
  body: StopParserResponseBody(name='body'),
}

async function stopParser(request: StopParserRequest): StopParserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopParser', 'POST', '/', 'json', false, 'json', request);
}

model StopRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: long(name='RuleId', example='100000', position='Query'),
}

model StopRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', example='true'),
}

model StopRuleResponse = {
  headers: map[string]string(name='headers'),
  body: StopRuleResponseBody(name='body'),
}

async function stopRule(request: StopRuleRequest): StopRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRule', 'POST', '/', 'json', false, 'json', request);
}

model SubscribeTopicRequest {
  deviceName: string(name='DeviceName', example='device1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-06***', position='Query'),
  productKey: string(name='ProductKey', example='a1Q5XoY***', position='Query'),
  topic: [ string ](name='Topic', example='/a1Q5XoY***/device1/user/get', position='Query'),
}

model SubscribeTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model SubscribeTopicResponse = {
  headers: map[string]string(name='headers'),
  body: SubscribeTopicResponseBody(name='body'),
}

async function subscribeTopic(request: SubscribeTopicRequest): SubscribeTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubscribeTopic', 'POST', '/', 'json', false, 'json', request);
}

model SyncSpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav', position='Body'),
  combinationList: [ string ](name='CombinationList', example='ZFBDZ', position='Body'),
  deviceName?: string(name='DeviceName', example='test', position='Body'),
  enforceFlag?: boolean(name='EnforceFlag', position='Body'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Body'),
  speechId?: string(name='SpeechId', example='42000011392021112380********', position='Body'),
}

model SyncSpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    detail?: string(name='Detail', example='Bat_Pt:99 RSSI: -92'),
    deviceErrorCode?: string(name='DeviceErrorCode', example='1'),
    deviceErrorMessage?: string(name='DeviceErrorMessage', example='speech model not found'),
    id?: string(name='Id', example='42000011392021112380********'),
    maxRetryCount?: int32(name='MaxRetryCount', example='2'),
    retryCount?: int32(name='RetryCount', example='1'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SyncSpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  body: SyncSpeechByCombinationResponseBody(name='body'),
}

async function syncSpeechByCombination(request: SyncSpeechByCombinationRequest): SyncSpeechByCombinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncSpeechByCombination', 'POST', '/', 'json', true, 'form', request);
}

model TestSpeechRequest {
  audioFormat?: string(name='AudioFormat', example='wav', position='Body'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectCode: string(name='ProjectCode', example='4de2c367****8c585e5992**', position='Body'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}', shrink='json', position='Body'),
  speechRate?: int32(name='SpeechRate', example='0', minimum=-500, maximum=500, position='Body'),
  speechType?: string(name='SpeechType', example='custom', position='Body'),
  text?: string(name='Text', example='test', position='Body'),
  voice: string(name='Voice', example='Siyue', position='Body'),
  volume?: int32(name='Volume', example='50', minimum=0, maximum=100, position='Body'),
}

model TestSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    items?: [ string ](name='items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model TestSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: TestSpeechResponseBody(name='body'),
}

async function testSpeech(request: TestSpeechRequest): TestSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestSpeech', 'POST', '/', 'json', true, 'form', request);
}

model TransformClientIdRequest {
  clientId: string(name='ClientId', example='9rSz********UNMWj33f000112', position='Query'),
  iotId: string(name='IotId', example='BXPV9Ks3bxwM9fD****0000101', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-02****43', position='Query'),
}

model TransformClientIdResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', example='true'),
}

model TransformClientIdResponse = {
  headers: map[string]string(name='headers'),
  body: TransformClientIdResponseBody(name='body'),
}

async function transformClientId(request: TransformClientIdRequest): TransformClientIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TransformClientId', 'POST', '/', 'json', false, 'json', request);
}

model TriggerSceneRuleRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: string(name='RuleId', example='f041397879ad4d89822811d741******', position='Query'),
}

model TriggerSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA989EK'),
  success?: boolean(name='Success', example='true'),
}

model TriggerSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerSceneRuleResponseBody(name='body'),
}

async function triggerSceneRule(request: TriggerSceneRuleRequest): TriggerSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model UnbindApplicationFromEdgeInstanceRequest {
  applicationId: string(name='ApplicationId', example='361368ba5a094da9bf5625d092******', position='Query'),
  instanceId: string(name='InstanceId', example='Tb4r9k3GWHJFWv******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model UnbindApplicationFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='5CA3B4EE-D865-47B0-91FD-BA7C2BC6BCC4'),
  success?: boolean(name='Success', example='true'),
}

model UnbindApplicationFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindApplicationFromEdgeInstanceResponseBody(name='body'),
}

async function unbindApplicationFromEdgeInstance(request: UnbindApplicationFromEdgeInstanceRequest): UnbindApplicationFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindApplicationFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDriverFromEdgeInstanceRequest {
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc959228****', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model UnbindDriverFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model UnbindDriverFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDriverFromEdgeInstanceResponseBody(name='body'),
}

async function unbindDriverFromEdgeInstance(request: UnbindDriverFromEdgeInstanceRequest): UnbindDriverFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDriverFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnbindLicenseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-s3***', position='Query'),
  licenseCode: string(name='LicenseCode', example='480P', position='Query'),
  productKey: string(name='ProductKey', example='gq62z***', position='Query'),
}

model UnbindLicenseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model UnbindLicenseProductResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindLicenseProductResponseBody(name='body'),
}

async function unbindLicenseProduct(request: UnbindLicenseProductRequest): UnbindLicenseProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindLicenseProduct', 'POST', '/', 'json', false, 'json', request);
}

model UnbindRoleFromEdgeInstanceRequest {
  instanceId: string(name='InstanceId', example='BlYJyXZpLBtkmR******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model UnbindRoleFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='270097AC-FFC3-4D2F-B48D-384BA1EA9962'),
  success?: boolean(name='Success', example='true'),
}

model UnbindRoleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindRoleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindRoleFromEdgeInstance(request: UnbindRoleFromEdgeInstanceRequest): UnbindRoleFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindRoleFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnbindSceneRuleFromEdgeInstanceRequest {
  instanceId: string(name='InstanceId', example='llL44UVXUqb9m5******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleId: string(name='RuleId', example='f041397879ad4d89822811d741******', position='Query'),
}

model UnbindSceneRuleFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA909EK'),
  success?: boolean(name='Success', example='true'),
}

model UnbindSceneRuleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindSceneRuleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindSceneRuleFromEdgeInstance(request: UnbindSceneRuleFromEdgeInstanceRequest): UnbindSceneRuleFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindSceneRuleFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  groupId: string(name='GroupId', example='nJRaJPn5U1JITGf******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  newGroupName: string(name='NewGroupName', position='Query'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDestinationRequest {
  configuration: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationId: long(name='DestinationId', example='1002', minimum=0, maximum=999999999999, position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  name: string(name='Name', example='DataPurpose', position='Query'),
  type: string(name='Type', example='REPUBLISH', position='Query'),
}

model UpdateDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDestinationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDestinationResponseBody(name='body'),
}

async function updateDestination(request: UpdateDestinationRequest): UpdateDestinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDestination', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', example='test2', position='Query'),
  groupId: string(name='GroupId', example='W16X8Tvdosec****', position='Query'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model UpdateDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceGroupResponseBody(name='body'),
}

async function updateDeviceGroup(request: UpdateDeviceGroupRequest): UpdateDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDeviceShadowRequest {
  deltaUpdate?: boolean(name='DeltaUpdate', example='false', position='Query'),
  deviceName: string(name='DeviceName', example='device1', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1T27vz****', position='Query'),
  shadowMessage: string(name='ShadowMessage', example='{"method":"update","state":{"desired":{"color":"green"}},"version":2}', position='Query'),
}

model UpdateDeviceShadowResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='6754C0E7-A35D-4CC8-A684-45EB1F0008D9'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceShadowResponseBody(name='body'),
}

async function updateDeviceShadow(request: UpdateDeviceShadowRequest): UpdateDeviceShadowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceShadow', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeDriverVersionRequest {
  argument?: string(name='Argument', example='-XX:+PrintGCDetails', position='Query'),
  configCheckRule?: string(name='ConfigCheckRule', example='{"deviceConfig":{"required":false},"driverConfig":{"required":false}}', position='Query'),
  containerConfig?: string(name='ContainerConfig', example='{"privileged":1,"devMappings":[],"volumeMappings":[],"hostNetworkMode":0,"portMappings":[]}', position='Query'),
  description?: string(name='Description', position='Query'),
  driverConfig?: string(name='DriverConfig', example='[{"format":"JSON","content":"{\\"defaultConfig\\":\\"this is default driver config demo\\"}"}]', position='Query'),
  driverId: string(name='DriverId', example='fec565038d7544978d9aed5c1a******', position='Query'),
  driverVersion: string(name='DriverVersion', example='1.2.0', position='Query'),
  edgeVersion: string(name='EdgeVersion', example='2.0.0', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  sourceConfig?: string(name='SourceConfig', example='{"ossAddress":"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30c******/ck3n3koe200003h6zf******.zip"}', position='Query'),
}

model UpdateEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='7757A782-6C24-4325-A663-C62857F32E87'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeDriverVersionResponseBody(name='body'),
}

async function updateEdgeDriverVersion(request: UpdateEdgeDriverVersionRequest): UpdateEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeInstanceRequest {
  bizEnable?: boolean(name='BizEnable', example='true', position='Query'),
  instanceId: string(name='InstanceId', example='F3APY0tPLhmgGtx0****', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  name: string(name='Name', example='LinkIoTEdge_Node', position='Query'),
  spec?: int32(name='Spec', example='10', position='Query'),
  tags?: string(name='Tags', example='k1:v1,k2:v2', position='Query'),
}

model UpdateEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='10CA6DAD-EBAF-4D3E-9309-9DB5B0FF48F2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceResponseBody(name='body'),
}

async function updateEdgeInstance(request: UpdateEdgeInstanceRequest): UpdateEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeInstanceChannelRequest {
  channelId: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******', position='Query'),
  channelName: string(name='ChannelName', example='le_name_update', position='Query'),
  configs: [ 
    {
      content: string(name='Content', example='{"protocol":"TCP", "ip":"1.2.3.4", "port":122}'),
      format: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs', position='Query'),
  driverId: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******', position='Query'),
  instanceId: string(name='InstanceId', example='6GaTtvTj7vJhiS******', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
}

model UpdateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='60D75DC6-00BC-47B5-AB1B-0619B7830D7D'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceChannelResponseBody(name='body'),
}

async function updateEdgeInstanceChannel(request: UpdateEdgeInstanceChannelRequest): UpdateEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', example='nF9oXo7kLRWQ********', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  name?: string(name='Name', example='le_lite1', position='Query'),
  routeId: long(name='RouteId', example='123456', minimum=0, maximum=9223372036854775807, position='Query'),
  sourceData?: string(name='SourceData', example='#', position='Query'),
  sourceType: string(name='SourceType', example='device', position='Query'),
  targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********', position='Query'),
  targetIotHubQos?: int32(name='TargetIotHubQos', example='1', position='Query'),
  targetType: string(name='TargetType', example='function', position='Query'),
  topicFilter?: string(name='TopicFilter', example='all', position='Query'),
}

model UpdateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='BBE0E0C7-913A-47B8-A255-F2C6038B5FD8'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function updateEdgeInstanceMessageRouting(request: UpdateEdgeInstanceMessageRoutingRequest): UpdateEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateJobRequest {
  description?: string(name='Description', example='jobDescription', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  jobId: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001', position='Query'),
  rolloutConfig?: map[string]any(name='RolloutConfig', example='{"maximumPerMinute": 1000}', shrink='json', position='Query'),
  timeoutConfig?: map[string]any(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}', shrink='json', position='Query'),
}

model UpdateJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOTAModuleRequest {
  aliasName?: string(name='AliasName', position='Query'),
  desc?: string(name='Desc', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  moduleName: string(name='ModuleName', example='barcodeScanner', position='Query'),
  productKey: string(name='ProductKey', example='a1Le6d0****', position='Query'),
}

model UpdateOTAModuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model UpdateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOTAModuleResponseBody(name='body'),
}

async function updateOTAModule(request: UpdateOTAModuleRequest): UpdateOTAModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOTAModule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateParserRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-8t***', position='Query'),
  name?: string(name='Name', example='DataParserTwo', position='Query'),
  parserId: long(name='ParserId', example='1001', minimum=0, maximum=9999999999, position='Query'),
}

model UpdateParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateParserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateParserResponseBody(name='body'),
}

async function updateParser(request: UpdateParserRequest): UpdateParserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateParser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateParserDataSourceRequest {
  dataSourceId: long(name='DataSourceId', example='1001', minimum=0, maximum=9999999999, position='Query'),
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  name: string(name='Name', example='DataSource', position='Query'),
}

model UpdateParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateParserDataSourceResponseBody(name='body'),
}

async function updateParserDataSource(request: UpdateParserDataSourceRequest): UpdateParserDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateParserDataSource', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  productName: string(name='ProductName', position='Query'),
}

model UpdateProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProduct', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductFilterConfigRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  propertyTimestampFilter: boolean(name='PropertyTimestampFilter', example='false', position='Query'),
  propertyValueFilter: boolean(name='PropertyValueFilter', example='true', position='Query'),
}

model UpdateProductFilterConfigResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductFilterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductFilterConfigResponseBody(name='body'),
}

async function updateProductFilterConfig(request: UpdateProductFilterConfigRequest): UpdateProductFilterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProductFilterConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  productTag: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='202'),
    }
  ](name='ProductTag', position='Query'),
}

model UpdateProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='123'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductTagsResponseBody(name='body'),
}

async function updateProductTags(request: UpdateProductTagsRequest): UpdateProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProductTags', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductTopicRequest {
  desc?: string(name='Desc', example='resubmit a test topic', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  operation: string(name='Operation', example='PUB', position='Query'),
  topicId: string(name='TopicId', example='821****', position='Query'),
  topicShortName: string(name='TopicShortName', example='resubmit', position='Query'),
}

model UpdateProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductTopicResponseBody(name='body'),
}

async function updateProductTopic(request: UpdateProductTopicRequest): UpdateProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  name?: string(name='Name', example='test_2', position='Query'),
  productKey?: string(name='ProductKey', example='aladaeW****', position='Query'),
  ruleDesc?: string(name='RuleDesc', example='test', position='Query'),
  ruleId: long(name='RuleId', example='100000', position='Query'),
  select?: string(name='Select', example='deviceName() as deviceName, items.Humidity.value as Humidity, items.Temperature.value as Temperature', position='Query'),
  shortTopic?: string(name='ShortTopic', example='+/thing/event/property/post', position='Query'),
  topic?: string(name='Topic', example='/sys/g18l***/device1/thing/event/property/post', position='Query'),
  topicType?: int32(name='TopicType', example='1', position='Query'),
  where?: string(name='Where', example='Temperature>35', position='Query'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleResponseBody(name='body'),
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleActionRequest {
  actionId: long(name='ActionId', example='1000003', position='Query'),
  configuration: string(name='Configuration', example='{"topic":"/a1iYSOl****/device5/user/get","topicType":1}', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  type: string(name='Type', example='REPUBLISH', position='Query'),
}

model UpdateRuleActionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleActionResponseBody(name='body'),
}

async function updateRuleAction(request: UpdateRuleActionRequest): UpdateRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Query'),
  ruleContent?: string(name='RuleContent', position='Query'),
  ruleDescription?: string(name='RuleDescription', position='Query'),
  ruleId: string(name='RuleId', example='f041397879ad4d89822811d741******', position='Query'),
  ruleName?: string(name='RuleName', example='test', position='Query'),
}

model UpdateSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSceneRuleResponseBody(name='body'),
}

async function updateSceneRule(request: UpdateSceneRuleRequest): UpdateSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSchedulePeriodRequest {
  description?: string(name='Description', example='test', position='Body'),
  endTime?: string(name='EndTime', example='01:00', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  periodCode: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com', position='Body'),
  startTime?: string(name='StartTime', example='00:00', position='Body'),
}

model UpdateSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSchedulePeriodResponseBody(name='body'),
}

async function updateSchedulePeriod(request: UpdateSchedulePeriodRequest): UpdateSchedulePeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSchedulePeriod', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSoundCodeRequest {
  duration?: int32(name='Duration', example='2', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  name?: string(name='Name', example='test', position='Body'),
  soundCode: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com', position='Body'),
}

model UpdateSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSoundCodeResponseBody(name='body'),
}

async function updateSoundCode(request: UpdateSoundCodeRequest): UpdateSoundCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSoundCode', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  label: string(name='Label', example='test', position='Body'),
  soundCode: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
}

model UpdateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSoundCodeLabelResponseBody(name='body'),
}

async function updateSoundCodeLabel(request: UpdateSoundCodeLabelRequest): UpdateSoundCodeLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSoundCodeLabel', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSoundCodeScheduleRequest {
  description?: string(name='Description', example='test', position='Body'),
  endDate?: string(name='EndDate', example='2022-03-31', position='Body'),
  endTime?: string(name='EndTime', example='23:59', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  name?: string(name='Name', example='test', position='Body'),
  scheduleCode: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********', position='Body'),
  startDate?: string(name='StartDate', example='2022-03-31', position='Body'),
  startTime?: string(name='StartTime', example='00:00', position='Body'),
  status?: string(name='Status', example='WORKING', position='Body'),
}

model UpdateSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSoundCodeScheduleResponseBody(name='body'),
}

async function updateSoundCodeSchedule(request: UpdateSoundCodeScheduleRequest): UpdateSoundCodeScheduleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSoundCodeSchedule', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSpeechRequest {
  enableSoundCode?: boolean(name='EnableSoundCode', example='true', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********', position='Body'),
  projectCode: string(name='ProjectCode', example='4de2c367****8c585e5992**', position='Body'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}', shrink='json', position='Body'),
  speechCode: string(name='SpeechCode', example='VlKzbj3XIZ****CeIHH6vR82JNCSzk**', position='Body'),
  speechRate?: int32(name='SpeechRate', example='0', minimum=-500, maximum=500, position='Body'),
  voice: string(name='Voice', example='Siyue', position='Body'),
  volume?: int32(name='Volume', example='50', minimum=0, maximum=100, position='Body'),
}

model UpdateSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSpeechResponseBody(name='body'),
}

async function updateSpeech(request: UpdateSpeechRequest): UpdateSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSpeech', 'POST', '/', 'json', true, 'form', request);
}

model UpdateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', example='nJRaJPn5U1JITGfjBO9l00****', position='Query'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', example='true', position='Query'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', example='true', position='Query'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', example='true', position='Query'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', example='true', position='Query'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', example='true', position='Query'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', example='true', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  mnsConfiguration?: string(name='MnsConfiguration', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }', position='Query'),
  otaEventFlag?: boolean(name='OtaEventFlag', example='true', position='Query'),
  otaJobFlag?: boolean(name='OtaJobFlag', example='true', position='Query'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', example='true', position='Query'),
  productKey: string(name='ProductKey', example='a1fyXVF****', position='Query'),
  subscribeFlags?: string(name='SubscribeFlags', position='Query'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', example='true', position='Query'),
  type: string(name='Type', example='AMQP', position='Query'),
}

model UpdateSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscribeRelationResponseBody(name='body'),
}

async function updateSubscribeRelation(request: UpdateSubscribeRelationRequest): UpdateSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model UpdateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule', position='Query'),
  functionBlockName?: string(name='FunctionBlockName', position='Query'),
  identifier?: string(name='Identifier', example='Temperature', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  thingModelJson?: string(name='ThingModelJson', position='Query'),
}

model UpdateThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingModelResponseBody(name='body'),
}

async function updateThingModel(request: UpdateThingModelRequest): UpdateThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateThingModel', 'POST', '/', 'json', false, 'json', request);
}

model UpdateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****', position='Query'),
  productKey: string(name='ProductKey', example='a1Q5XoY****', position='Query'),
  scriptContent: string(name='ScriptContent', example='"function protocolToRawData(jsonObj) {return rawdata; }function rawDataToProtocol(rawData) {return jsonObj; }"', position='Query'),
  scriptType: string(name='ScriptType', example='JavaScript', position='Query'),
}

model UpdateThingScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingScriptResponseBody(name='body'),
}

async function updateThingScript(request: UpdateThingScriptRequest): UpdateThingScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateThingScript', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTopicConfigRequest {
  enableBroadcast: boolean(name='EnableBroadcast', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  topicFullName: string(name='TopicFullName', position='Query'),
}

model UpdateTopicConfigResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateTopicConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTopicConfigResponseBody(name='body'),
}

async function updateTopicConfig(request: UpdateTopicConfigRequest): UpdateTopicConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTopicConfig', 'POST', '/', 'json', false, 'json', request);
}

model WriteDevicesHotStorageDataRequest {
  deviceName?: string(name='DeviceName', example='device1', position='Query'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234', position='Query'),
  iotInstanceId: string(name='IotInstanceId', example='iot-2w****', position='Query'),
  items: string(name='Items', example='{ "Power": { "value": "on", "time": 1524448722000 }, "WF": { "value": 23.6, "time": 1524448722000 } }', position='Query'),
  productKey?: string(name='ProductKey', example='a1BwAGV****', position='Query'),
  userTopic: string(name='UserTopic', example='user/a***/b***', position='Query'),
}

model WriteDevicesHotStorageDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model WriteDevicesHotStorageDataResponse = {
  headers: map[string]string(name='headers'),
  body: WriteDevicesHotStorageDataResponseBody(name='body'),
}

async function writeDevicesHotStorageData(request: WriteDevicesHotStorageDataRequest): WriteDevicesHotStorageDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WriteDevicesHotStorageData', 'POST', '/', 'json', false, 'json', request);
}

