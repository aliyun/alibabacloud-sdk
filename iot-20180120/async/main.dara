/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Iot';
  @version = '2018-01-20';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'iot.aliyuncs.com',
    ap-south-1 = 'iot.aliyuncs.com',
    ap-southeast-2 = 'iot.aliyuncs.com',
    ap-southeast-3 = 'iot.aliyuncs.com',
    ap-southeast-5 = 'iot.aliyuncs.com',
    cn-beijing-finance-1 = 'iot.aliyuncs.com',
    cn-beijing-finance-pop = 'iot.aliyuncs.com',
    cn-beijing-gov-1 = 'iot.aliyuncs.com',
    cn-beijing-nu16-b01 = 'iot.aliyuncs.com',
    cn-chengdu = 'iot.aliyuncs.com',
    cn-edge-1 = 'iot.aliyuncs.com',
    cn-fujian = 'iot.aliyuncs.com',
    cn-haidian-cm12-c01 = 'iot.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'iot.aliyuncs.com',
    cn-hangzhou-finance = 'iot.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'iot.aliyuncs.com',
    cn-hangzhou-test-306 = 'iot.aliyuncs.com',
    cn-hongkong = 'iot.aliyuncs.com',
    cn-hongkong-finance-pop = 'iot.aliyuncs.com',
    cn-huhehaote = 'iot.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'iot.aliyuncs.com',
    cn-qingdao = 'iot.aliyuncs.com',
    cn-qingdao-nebula = 'iot.aliyuncs.com',
    cn-shanghai-et15-b01 = 'iot.aliyuncs.com',
    cn-shanghai-et2-b01 = 'iot.aliyuncs.com',
    cn-shanghai-finance-1 = 'iot.aliyuncs.com',
    cn-shanghai-inner = 'iot.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'iot.aliyuncs.com',
    cn-shenzhen-finance-1 = 'iot.aliyuncs.com',
    cn-shenzhen-inner = 'iot.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'iot.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'iot.aliyuncs.com',
    cn-wuhan = 'iot.aliyuncs.com',
    cn-wulanchabu = 'iot.aliyuncs.com',
    cn-yushanfang = 'iot.aliyuncs.com',
    cn-zhangbei = 'iot.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'iot.aliyuncs.com',
    cn-zhangjiakou = 'iot.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'iot.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'iot.aliyuncs.com',
    eu-west-1 = 'iot.aliyuncs.com',
    eu-west-1-oxs = 'iot.aliyuncs.com',
    me-east-1 = 'iot.aliyuncs.com',
    rus-west-1-pop = 'iot.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddDataForApiSourceRequest {
  apiId: string(name='ApiId', position='Query'),
  content: string(name='Content', position='Query'),
  iotInstanceId: string(name='IotInstanceId', position='Query'),
}

model AddDataForApiSourceResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddDataForApiSourceResponse = {
  headers: map[string]string(name='headers'),
  body: AddDataForApiSourceResponseBody(name='body'),
}

async function addDataForApiSource(request: AddDataForApiSourceRequest): AddDataForApiSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataForApiSource', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName: string(name='DeviceName'),
      productKey: string(name='ProductKey'),
    }
  ](name='Device', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchAddDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  exceedTenGroupDeviceCount?: int32(name='ExceedTenGroupDeviceCount'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successAddedDeviceCount?: int32(name='SuccessAddedDeviceCount'),
  validDeviceCount?: int32(name='ValidDeviceCount'),
}

model BatchAddDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDeviceGroupRelationsResponseBody(name='body'),
}

async function batchAddDeviceGroupRelations(request: BatchAddDeviceGroupRelationsRequest): BatchAddDeviceGroupRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddDeviceGroupRelations', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddThingTopoRequest {
  gwDeviceName: string(name='GwDeviceName', position='Query'),
  gwProductKey: string(name='GwProductKey', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  topoAddItem: [ 
    {
      clientId?: string(name='ClientId'),
      deviceName: string(name='DeviceName'),
      productKey: string(name='ProductKey'),
      sign: string(name='Sign'),
      signMethod: string(name='SignMethod'),
      timestamp?: string(name='Timestamp'),
    }
  ](name='TopoAddItem', position='Query'),
}

model BatchAddThingTopoResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddThingTopoResponseBody(name='body'),
}

async function batchAddThingTopo(request: BatchAddThingTopoRequest): BatchAddThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindDeviceToEdgeInstanceWithDriverRequest {
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody(name='body'),
}

async function batchBindDeviceToEdgeInstanceWithDriver(request: BatchBindDeviceToEdgeInstanceWithDriverRequest): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindDeviceToEdgeInstanceWithDriver', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindDevicesIntoProjectRequest {
  devices: [ 
    {
      deviceName: string(name='DeviceName'),
      productKey: string(name='ProductKey'),
    }
  ](name='Devices', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model BatchBindDevicesIntoProjectResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchBindDevicesIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindDevicesIntoProjectResponseBody(name='body'),
}

async function batchBindDevicesIntoProject(request: BatchBindDevicesIntoProjectRequest): BatchBindDevicesIntoProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindDevicesIntoProject', 'POST', '/', 'json', false, 'json', request);
}

model BatchBindProductsIntoProjectRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  productKeys: [ string ](name='ProductKeys', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model BatchBindProductsIntoProjectResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchBindProductsIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindProductsIntoProjectResponseBody(name='body'),
}

async function batchBindProductsIntoProject(request: BatchBindProductsIntoProjectRequest): BatchBindProductsIntoProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchBindProductsIntoProject', 'POST', '/', 'json', false, 'json', request);
}

model BatchCheckDeviceNamesRequest {
  deviceName?: [ string ](name='DeviceName', position='Query'),
  deviceNameList?: [ 
    {
      deviceName?: string(name='DeviceName'),
      deviceNickname?: string(name='DeviceNickname'),
    }
  ](name='DeviceNameList', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model BatchCheckDeviceNamesResponseBody = {
  code?: string(name='Code'),
  data?: {
    applyId?: long(name='ApplyId'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='InvalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceNicknameList?: {
      invalidDeviceNickname?: [ string ](name='InvalidDeviceNickname')
    }(name='InvalidDeviceNicknameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchCheckDeviceNamesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCheckDeviceNamesResponseBody(name='body'),
}

async function batchCheckDeviceNames(request: BatchCheckDeviceNamesRequest): BatchCheckDeviceNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCheckDeviceNames', 'POST', '/', 'json', false, 'json', request);
}

model BatchClearEdgeInstanceDeviceConfigRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchClearEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchClearEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchClearEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchClearEdgeInstanceDeviceConfig(request: BatchClearEdgeInstanceDeviceConfigRequest): BatchClearEdgeInstanceDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchClearEdgeInstanceDeviceConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName: string(name='DeviceName'),
      productKey: string(name='ProductKey'),
    }
  ](name='Device', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchDeleteDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successDeviceCount?: int32(name='SuccessDeviceCount'),
  validDeviceCount?: int32(name='ValidDeviceCount'),
}

model BatchDeleteDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDeviceGroupRelationsResponseBody(name='body'),
}

async function batchDeleteDeviceGroupRelations(request: BatchDeleteDeviceGroupRelationsRequest): BatchDeleteDeviceGroupRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteDeviceGroupRelations', 'POST', '/', 'json', false, 'json', request);
}

model BatchDeleteEdgeInstanceChannelRequest {
  channelIds: [ string ](name='ChannelIds', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchDeleteEdgeInstanceChannelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchDeleteEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteEdgeInstanceChannelResponseBody(name='body'),
}

async function batchDeleteEdgeInstanceChannel(request: BatchDeleteEdgeInstanceChannelRequest): BatchDeleteEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchDeleteEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetDeviceBindStatusRequest {
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchGetDeviceBindStatusResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      bindStatus?: int32(name='BindStatus'),
      iotId?: string(name='IotId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetDeviceBindStatusResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetDeviceBindStatusResponseBody(name='body'),
}

async function batchGetDeviceBindStatus(request: BatchGetDeviceBindStatusRequest): BatchGetDeviceBindStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetDeviceBindStatus', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetDeviceStateRequest {
  deviceName?: [ string ](name='DeviceName', position='Query'),
  iotId?: [ string ](name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model BatchGetDeviceStateResponseBody = {
  code?: string(name='Code'),
  deviceStatusList?: {
    deviceStatus?: [ 
    {
      asAddress?: string(name='AsAddress'),
      deviceId?: string(name='DeviceId'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      lastOnlineTime?: string(name='LastOnlineTime'),
      status?: string(name='Status'),
    }
  ](name='DeviceStatus')
  }(name='DeviceStatusList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetDeviceStateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetDeviceStateResponseBody(name='body'),
}

async function batchGetDeviceState(request: BatchGetDeviceStateRequest): BatchGetDeviceStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetDeviceState', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeDriverRequest {
  driverIds: [ string ](name='DriverIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchGetEdgeDriverResponseBody = {
  code?: string(name='Code'),
  driverList?: [ 
    {
      cpuArch?: string(name='CpuArch'),
      driverId?: string(name='DriverId'),
      driverName?: string(name='DriverName'),
      driverProtocol?: string(name='DriverProtocol'),
      gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
      gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
      isBuiltIn?: boolean(name='IsBuiltIn'),
      runtime?: string(name='Runtime'),
      type?: int32(name='Type'),
    }
  ](name='DriverList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeDriverResponseBody(name='body'),
}

async function batchGetEdgeDriver(request: BatchGetEdgeDriverRequest): BatchGetEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceChannelRequest {
  channelIds: [ string ](name='ChannelIds', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchGetEdgeInstanceChannelResponseBody = {
  code?: string(name='Code'),
  data?: {
    channel?: [ 
    {
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      configList?: {
        config?: [ 
        {
          configId?: string(name='ConfigId'),
          content?: string(name='Content'),
          format?: string(name='Format'),
          key?: string(name='Key'),
        }
      ](name='Config')
      }(name='ConfigList'),
    }
  ](name='Channel')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceChannel(request: BatchGetEdgeInstanceChannelRequest): BatchGetEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDeviceChannelRequest {
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchGetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code'),
  deviceChannelList?: [ 
    {
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceChannelList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceChannel(request: BatchGetEdgeInstanceDeviceChannelRequest): BatchGetEdgeInstanceDeviceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDeviceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDeviceConfigRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchGetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code'),
  deviceConfigList?: [ 
    {
      config?: {
        content?: string(name='Content'),
        format?: string(name='Format'),
      }(name='Config'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceConfigList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceConfig(request: BatchGetEdgeInstanceDeviceConfigRequest): BatchGetEdgeInstanceDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDeviceConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDeviceDriverRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchGetEdgeInstanceDeviceDriverResponseBody = {
  code?: string(name='Code'),
  deviceDriverList?: [ 
    {
      driverId?: string(name='DriverId'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceDriverList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceDeviceDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceDriverResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceDriver(request: BatchGetEdgeInstanceDeviceDriverRequest): BatchGetEdgeInstanceDeviceDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDeviceDriver', 'POST', '/', 'json', false, 'json', request);
}

model BatchGetEdgeInstanceDriverConfigsRequest {
  driverIds: [ string ](name='DriverIds', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchGetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code'),
  driverConfigList?: [ 
    {
      configList?: [ 
        {
          configId?: string(name='ConfigId'),
          content?: string(name='Content'),
          format?: string(name='Format'),
          key?: string(name='Key'),
        }
      ](name='ConfigList'),
      driverId?: string(name='DriverId'),
    }
  ](name='DriverConfigList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function batchGetEdgeInstanceDriverConfigs(request: BatchGetEdgeInstanceDriverConfigsRequest): BatchGetEdgeInstanceDriverConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchGetEdgeInstanceDriverConfigs', 'POST', '/', 'json', false, 'json', request);
}

model BatchPubRequest {
  deviceName: [ string ](name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  messageContent: string(name='MessageContent', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  qos?: int32(name='Qos', position='Query'),
  topicShortName: string(name='TopicShortName', position='Query'),
}

model BatchPubResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchPubResponse = {
  headers: map[string]string(name='headers'),
  body: BatchPubResponseBody(name='body'),
}

async function batchPub(request: BatchPubRequest): BatchPubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchPub', 'POST', '/', 'json', false, 'json', request);
}

model BatchQueryDeviceDetailRequest {
  deviceName: [ string ](name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model BatchQueryDeviceDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName'),
      deviceSecret?: string(name='DeviceSecret'),
      firmwareVersion?: string(name='FirmwareVersion'),
      gmtActive?: string(name='GmtActive'),
      gmtCreate?: string(name='GmtCreate'),
      iotId?: string(name='IotId'),
      nickname?: string(name='Nickname'),
      nodeType?: int32(name='NodeType'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
      region?: string(name='Region'),
      status?: string(name='Status'),
      utcActive?: string(name='UtcActive'),
      utcCreate?: string(name='UtcCreate'),
    }
  ](name='Data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchQueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: BatchQueryDeviceDetailResponseBody(name='body'),
}

async function batchQueryDeviceDetail(request: BatchQueryDeviceDetailRequest): BatchQueryDeviceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchQueryDeviceDetail', 'POST', '/', 'json', false, 'json', request);
}

model BatchRegisterDeviceRequest {
  count: int32(name='Count', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model BatchRegisterDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    applyId?: long(name='ApplyId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchRegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRegisterDeviceResponseBody(name='body'),
}

async function batchRegisterDevice(request: BatchRegisterDeviceRequest): BatchRegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRegisterDevice', 'POST', '/', 'json', false, 'json', request);
}

model BatchRegisterDeviceWithApplyIdRequest {
  applyId: long(name='ApplyId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model BatchRegisterDeviceWithApplyIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    applyId?: long(name='ApplyId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchRegisterDeviceWithApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRegisterDeviceWithApplyIdResponseBody(name='body'),
}

async function batchRegisterDeviceWithApplyId(request: BatchRegisterDeviceWithApplyIdRequest): BatchRegisterDeviceWithApplyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRegisterDeviceWithApplyId', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetEdgeInstanceDeviceChannelRequest {
  channelId: string(name='ChannelId', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchSetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchSetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceChannel(request: BatchSetEdgeInstanceDeviceChannelRequest): BatchSetEdgeInstanceDeviceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetEdgeInstanceDeviceChannel', 'POST', '/', 'json', false, 'json', request);
}

model BatchSetEdgeInstanceDeviceConfigRequest {
  deviceConfigs: [ 
    {
      content: string(name='Content'),
      iotId: string(name='IotId'),
    }
  ](name='DeviceConfigs', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchSetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchSetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceConfig(request: BatchSetEdgeInstanceDeviceConfigRequest): BatchSetEdgeInstanceDeviceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchSetEdgeInstanceDeviceConfig', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindDeviceFromEdgeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotIds: [ string ](name='IotIds', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchUnbindDeviceFromEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchUnbindDeviceFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindDeviceFromEdgeInstanceResponseBody(name='body'),
}

async function batchUnbindDeviceFromEdgeInstance(request: BatchUnbindDeviceFromEdgeInstanceRequest): BatchUnbindDeviceFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindDeviceFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindProjectDevicesRequest {
  devices: [ 
    {
      deviceName: string(name='DeviceName'),
      productKey: string(name='ProductKey'),
    }
  ](name='Devices', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model BatchUnbindProjectDevicesResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchUnbindProjectDevicesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindProjectDevicesResponseBody(name='body'),
}

async function batchUnbindProjectDevices(request: BatchUnbindProjectDevicesRequest): BatchUnbindProjectDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindProjectDevices', 'POST', '/', 'json', false, 'json', request);
}

model BatchUnbindProjectProductsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  productKeys: [ string ](name='ProductKeys', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model BatchUnbindProjectProductsResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchUnbindProjectProductsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindProjectProductsResponseBody(name='body'),
}

async function batchUnbindProjectProducts(request: BatchUnbindProjectProductsRequest): BatchUnbindProjectProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUnbindProjectProducts', 'POST', '/', 'json', false, 'json', request);
}

model BatchUpdateDeviceNicknameRequest {
  deviceNicknameInfo: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      nickname?: string(name='Nickname'),
      productKey?: string(name='ProductKey'),
    }
  ](name='DeviceNicknameInfo', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BatchUpdateDeviceNicknameResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchUpdateDeviceNicknameResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateDeviceNicknameResponseBody(name='body'),
}

async function batchUpdateDeviceNickname(request: BatchUpdateDeviceNicknameRequest): BatchUpdateDeviceNicknameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchUpdateDeviceNickname', 'POST', '/', 'json', false, 'json', request);
}

model BindApplicationToEdgeInstanceRequest {
  applicationId: string(name='ApplicationId', position='Query'),
  applicationVersion: string(name='ApplicationVersion', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model BindApplicationToEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindApplicationToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindApplicationToEdgeInstanceResponseBody(name='body'),
}

async function bindApplicationToEdgeInstance(request: BindApplicationToEdgeInstanceRequest): BindApplicationToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindApplicationToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindDriverToEdgeInstanceRequest {
  driverId: string(name='DriverId', position='Query'),
  driverVersion?: string(name='DriverVersion', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  orderId?: string(name='OrderId', position='Query'),
}

model BindDriverToEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindDriverToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindDriverToEdgeInstanceResponseBody(name='body'),
}

async function bindDriverToEdgeInstance(request: BindDriverToEdgeInstanceRequest): BindDriverToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindDriverToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindGatewayToEdgeInstanceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model BindGatewayToEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindGatewayToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindGatewayToEdgeInstanceResponseBody(name='body'),
}

async function bindGatewayToEdgeInstance(request: BindGatewayToEdgeInstanceRequest): BindGatewayToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindGatewayToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindRoleToEdgeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  roleArn: string(name='RoleArn', position='Query'),
  roleName: string(name='RoleName', position='Query'),
}

model BindRoleToEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindRoleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindRoleToEdgeInstanceResponseBody(name='body'),
}

async function bindRoleToEdgeInstance(request: BindRoleToEdgeInstanceRequest): BindRoleToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindRoleToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model BindSceneRuleToEdgeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model BindSceneRuleToEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindSceneRuleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindSceneRuleToEdgeInstanceResponseBody(name='body'),
}

async function bindSceneRuleToEdgeInstance(request: BindSceneRuleToEdgeInstanceRequest): BindSceneRuleToEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindSceneRuleToEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model CancelJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model CancelJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelJobResponseBody(name='body'),
}

async function cancelJob(request: CancelJobRequest): CancelJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelOTAStrategyByJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model CancelOTAStrategyByJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelOTAStrategyByJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTAStrategyByJobResponseBody(name='body'),
}

async function cancelOTAStrategyByJob(request: CancelOTAStrategyByJobRequest): CancelOTAStrategyByJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOTAStrategyByJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelOTATaskByDeviceRequest {
  deviceName: [ string ](name='DeviceName', position='Query'),
  firmwareId: string(name='FirmwareId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model CancelOTATaskByDeviceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelOTATaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTATaskByDeviceResponseBody(name='body'),
}

async function cancelOTATaskByDevice(request: CancelOTATaskByDeviceRequest): CancelOTATaskByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOTATaskByDevice', 'POST', '/', 'json', false, 'json', request);
}

model CancelOTATaskByJobRequest {
  cancelInProgressTask?: boolean(name='CancelInProgressTask', position='Query'),
  cancelNotifiedTask?: boolean(name='CancelNotifiedTask', position='Query'),
  cancelQueuedTask?: boolean(name='CancelQueuedTask', position='Query'),
  cancelScheduledTask?: boolean(name='CancelScheduledTask', position='Query'),
  cancelUnconfirmedTask?: boolean(name='CancelUnconfirmedTask', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model CancelOTATaskByJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTATaskByJobResponseBody(name='body'),
}

async function cancelOTATaskByJob(request: CancelOTATaskByJobRequest): CancelOTATaskByJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOTATaskByJob', 'POST', '/', 'json', false, 'json', request);
}

model CancelReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model CancelReleaseProductResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  body: CancelReleaseProductResponseBody(name='body'),
}

async function cancelReleaseProduct(request: CancelReleaseProductRequest): CancelReleaseProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelReleaseProduct', 'POST', '/', 'json', false, 'json', request);
}

model ClearEdgeInstanceDriverConfigsRequest {
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model ClearEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ClearEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ClearEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function clearEdgeInstanceDriverConfigs(request: ClearEdgeInstanceDriverConfigsRequest): ClearEdgeInstanceDriverConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ClearEdgeInstanceDriverConfigs', 'POST', '/', 'json', false, 'json', request);
}

model CloseEdgeInstanceDeploymentRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model CloseEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CloseEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CloseEdgeInstanceDeploymentResponseBody(name='body'),
}

async function closeEdgeInstanceDeployment(request: CloseEdgeInstanceDeploymentRequest): CloseEdgeInstanceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseEdgeInstanceDeployment', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmOTATaskRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  taskId: [ string ](name='TaskId', position='Query'),
}

model ConfirmOTATaskResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmOTATaskResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmOTATaskResponseBody(name='body'),
}

async function confirmOTATask(request: ConfirmOTATaskRequest): ConfirmOTATaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmOTATask', 'POST', '/', 'json', false, 'json', request);
}

model CopyThingModelRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sourceModelVersion?: string(name='SourceModelVersion', position='Query'),
  sourceProductKey: string(name='SourceProductKey', position='Query'),
  targetProductKey: string(name='TargetProductKey', position='Query'),
}

model CopyThingModelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CopyThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: CopyThingModelResponseBody(name='body'),
}

async function copyThingModel(request: CopyThingModelRequest): CopyThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyThingModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupRequest {
  groupName: string(name='GroupName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateConsumerGroupSubscribeRelationRequest {
  consumerGroupId: string(name='ConsumerGroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model CreateConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function createConsumerGroupSubscribeRelation(request: CreateConsumerGroupSubscribeRelationRequest): CreateConsumerGroupSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConsumerGroupSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataAPIServiceRequest {
  apiPath: string(name='ApiPath', position='Body'),
  desc?: string(name='Desc', position='Body'),
  displayName: string(name='DisplayName', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  originSql: string(name='OriginSql', position='Body'),
  requestParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example'),
      name?: string(name='Name'),
      required?: boolean(name='Required'),
      type?: string(name='Type'),
    }
  ](name='RequestParam', position='Body'),
  responseParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example'),
      name?: string(name='Name'),
      required?: boolean(name='Required'),
      type?: string(name='Type'),
    }
  ](name='ResponseParam', position='Body'),
  templateSql: string(name='TemplateSql', position='Body'),
}

model CreateDataAPIServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiSrn?: string(name='ApiSrn'),
    createTime?: long(name='CreateTime'),
    lastUpdateTime?: long(name='LastUpdateTime'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataAPIServiceResponseBody(name='body'),
}

async function createDataAPIService(request: CreateDataAPIServiceRequest): CreateDataAPIServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataAPIService', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceDistributeJobRequest {
  deviceName: [ string ](name='DeviceName', position='Body'),
  productKey: string(name='ProductKey', position='Body'),
  sourceInstanceId: string(name='SourceInstanceId', position='Body'),
  strategy: int32(name='Strategy', position='Body'),
  targetAliyunId?: string(name='TargetAliyunId', position='Body'),
  targetInstanceConfig: [ 
    {
      targetInstanceId: string(name='TargetInstanceId'),
    }
  ](name='TargetInstanceConfig', position='Body'),
  targetUid?: string(name='TargetUid', position='Body'),
}

model CreateDeviceDistributeJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceDistributeJobResponseBody(name='body'),
}

async function createDeviceDistributeJob(request: CreateDeviceDistributeJobRequest): CreateDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  superGroupId?: string(name='SuperGroupId', position='Query'),
}

model CreateDeviceGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    groupDesc?: string(name='GroupDesc'),
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceGroupResponseBody(name='body'),
}

async function createDeviceGroup(request: CreateDeviceGroupRequest): CreateDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeDriverRequest {
  cpuArch?: string(name='CpuArch', position='Query'),
  driverName: string(name='DriverName', position='Query'),
  driverProtocol: string(name='DriverProtocol', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  isBuiltIn?: boolean(name='IsBuiltIn', position='Query'),
  runtime: string(name='Runtime', position='Query'),
}

model CreateEdgeDriverResponseBody = {
  code?: string(name='Code'),
  driverId?: string(name='DriverId'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeDriverResponseBody(name='body'),
}

async function createEdgeDriver(request: CreateEdgeDriverRequest): CreateEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeDriverVersionRequest {
  argument?: string(name='Argument', position='Query'),
  configCheckRule?: string(name='ConfigCheckRule', position='Query'),
  containerConfig?: string(name='ContainerConfig', position='Query'),
  description?: string(name='Description', position='Query'),
  driverConfig?: string(name='DriverConfig', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  driverVersion: string(name='DriverVersion', position='Query'),
  edgeVersion: string(name='EdgeVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  sourceConfig?: string(name='SourceConfig', position='Query'),
}

model CreateEdgeDriverVersionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeDriverVersionResponseBody(name='body'),
}

async function createEdgeDriverVersion(request: CreateEdgeDriverVersionRequest): CreateEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  spec?: int32(name='Spec', position='Query'),
  tags?: string(name='Tags', position='Query'),
}

model CreateEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceResponseBody(name='body'),
}

async function createEdgeInstance(request: CreateEdgeInstanceRequest): CreateEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceChannelRequest {
  channelName: string(name='ChannelName', position='Query'),
  configs: [ 
    {
      content: string(name='Content'),
      format: string(name='Format'),
      key?: string(name='Key'),
    }
  ](name='Configs', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model CreateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceChannelResponseBody(name='body'),
}

async function createEdgeInstanceChannel(request: CreateEdgeInstanceChannelRequest): CreateEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceDeploymentRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  type: string(name='Type', position='Query'),
}

model CreateEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code'),
  deploymentId?: string(name='DeploymentId'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceDeploymentResponseBody(name='body'),
}

async function createEdgeInstanceDeployment(request: CreateEdgeInstanceDeploymentRequest): CreateEdgeInstanceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstanceDeployment', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
  sourceData?: string(name='SourceData', position='Query'),
  sourceType: string(name='SourceType', position='Query'),
  targetData?: string(name='TargetData', position='Query'),
  targetIotHubQos?: int32(name='TargetIotHubQos', position='Query'),
  targetType: string(name='TargetType', position='Query'),
  topicFilter?: string(name='TopicFilter', position='Query'),
}

model CreateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  routeId?: long(name='RouteId'),
  success?: boolean(name='Success'),
}

model CreateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function createEdgeInstanceMessageRouting(request: CreateEdgeInstanceMessageRoutingRequest): CreateEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model CreateEdgeOssPreSignedAddressRequest {
  fileName: string(name='FileName', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceVersion: string(name='ResourceVersion', position='Query'),
  type: string(name='Type', position='Query'),
}

model CreateEdgeOssPreSignedAddressResponseBody = {
  code?: string(name='Code'),
  data?: {
    ossAddress?: string(name='OssAddress'),
    ossPreSignedAddress?: string(name='OssPreSignedAddress'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateEdgeOssPreSignedAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeOssPreSignedAddressResponseBody(name='body'),
}

async function createEdgeOssPreSignedAddress(request: CreateEdgeOssPreSignedAddressRequest): CreateEdgeOssPreSignedAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEdgeOssPreSignedAddress', 'POST', '/', 'json', false, 'json', request);
}

model CreateJobRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobDocument: string(name='JobDocument', position='Query'),
  jobFile?: string(name='JobFile', position='Query'),
  jobName: string(name='JobName', position='Query'),
  rolloutConfig?: string(name='RolloutConfig', position='Query'),
  scheduledTime?: long(name='ScheduledTime', position='Query'),
  targetConfig: string(name='TargetConfig', position='Query'),
  timeoutConfig?: string(name='TimeoutConfig', position='Query'),
  type: string(name='Type', position='Query'),
}

model CreateJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateLoRaNodesTaskRequest {
  deviceInfo: [ 
    {
      devEui?: string(name='DevEui'),
      pinCode?: string(name='PinCode'),
    }
  ](name='DeviceInfo', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model CreateLoRaNodesTaskResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model CreateLoRaNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoRaNodesTaskResponseBody(name='body'),
}

async function createLoRaNodesTask(request: CreateLoRaNodesTaskRequest): CreateLoRaNodesTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLoRaNodesTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTADynamicUpgradeJobRequest {
  dynamicMode?: int32(name='DynamicMode', position='Query'),
  firmwareId: string(name='FirmwareId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  maximumPerMinute?: int32(name='MaximumPerMinute', position='Query'),
  needConfirm?: boolean(name='NeedConfirm', position='Query'),
  needPush?: boolean(name='NeedPush', position='Query'),
  overwriteMode?: int32(name='OverwriteMode', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  retryCount?: int32(name='RetryCount', position='Query'),
  retryInterval?: int32(name='RetryInterval', position='Query'),
  srcVersion: [ string ](name='SrcVersion', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', position='Query'),
}

model CreateOTADynamicUpgradeJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    jobId?: string(name='JobId'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOTADynamicUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTADynamicUpgradeJobResponseBody(name='body'),
}

async function createOTADynamicUpgradeJob(request: CreateOTADynamicUpgradeJobRequest): CreateOTADynamicUpgradeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTADynamicUpgradeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAFirmwareRequest {
  destVersion: string(name='DestVersion', position='Query'),
  firmwareDesc?: string(name='FirmwareDesc', position='Query'),
  firmwareName: string(name='FirmwareName', position='Query'),
  firmwareSign?: string(name='FirmwareSign', position='Query'),
  firmwareSize?: int32(name='FirmwareSize', position='Query'),
  firmwareUrl: string(name='FirmwareUrl', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  needToVerify?: boolean(name='NeedToVerify', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  signMethod?: string(name='SignMethod', position='Query'),
  srcVersion?: string(name='SrcVersion', position='Query'),
  type?: int32(name='Type', position='Query'),
  udi?: string(name='Udi', position='Query'),
}

model CreateOTAFirmwareResponseBody = {
  code?: string(name='Code'),
  data?: {
    firmwareId?: string(name='FirmwareId'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAFirmwareResponseBody(name='body'),
}

async function createOTAFirmware(request: CreateOTAFirmwareRequest): CreateOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAModuleRequest {
  aliasName?: string(name='AliasName', position='Query'),
  desc?: string(name='Desc', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  moduleName: string(name='ModuleName', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model CreateOTAModuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAModuleResponseBody(name='body'),
}

async function createOTAModule(request: CreateOTAModuleRequest): CreateOTAModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAModule', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAStaticUpgradeJobRequest {
  dnListFileUrl?: string(name='DnListFileUrl', position='Query'),
  firmwareId: string(name='FirmwareId', position='Query'),
  grayPercent?: string(name='GrayPercent', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  maximumPerMinute?: int32(name='MaximumPerMinute', position='Query'),
  needConfirm?: boolean(name='NeedConfirm', position='Query'),
  needPush?: boolean(name='NeedPush', position='Query'),
  overwriteMode?: int32(name='OverwriteMode', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  retryCount?: int32(name='RetryCount', position='Query'),
  retryInterval?: int32(name='RetryInterval', position='Query'),
  scheduleFinishTime?: long(name='ScheduleFinishTime', position='Query'),
  scheduleTime?: long(name='ScheduleTime', position='Query'),
  srcVersion?: [ string ](name='SrcVersion', position='Query'),
  tag?: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  targetDeviceName?: [ string ](name='TargetDeviceName', position='Query'),
  targetSelection: string(name='TargetSelection', position='Query'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', position='Query'),
}

model CreateOTAStaticUpgradeJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    jobId?: string(name='JobId'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOTAStaticUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAStaticUpgradeJobResponseBody(name='body'),
}

async function createOTAStaticUpgradeJob(request: CreateOTAStaticUpgradeJobRequest): CreateOTAStaticUpgradeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAStaticUpgradeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateOTAVerifyJobRequest {
  firmwareId: string(name='FirmwareId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  needConfirm?: boolean(name='NeedConfirm', position='Query'),
  needPush?: boolean(name='NeedPush', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  targetDeviceName: [ string ](name='TargetDeviceName', position='Query'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', position='Query'),
}

model CreateOTAVerifyJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    jobId?: string(name='JobId'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOTAVerifyJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAVerifyJobResponseBody(name='body'),
}

async function createOTAVerifyJob(request: CreateOTAVerifyJobRequest): CreateOTAVerifyJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOTAVerifyJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', position='Query'),
  authType?: string(name='AuthType', position='Query'),
  categoryKey?: string(name='CategoryKey', position='Query'),
  dataFormat?: int32(name='DataFormat', position='Query'),
  description?: string(name='Description', position='Query'),
  id2?: boolean(name='Id2', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  joinPermissionId?: string(name='JoinPermissionId', position='Query'),
  netType?: string(name='NetType', position='Query'),
  nodeType: int32(name='NodeType', position='Query'),
  productName: string(name='ProductName', position='Query'),
  protocolType?: string(name='ProtocolType', position='Query'),
  publishAuto?: boolean(name='PublishAuto', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  validateType?: int32(name='ValidateType', position='Query'),
}

model CreateProductResponseBody = {
  code?: string(name='Code'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode'),
    authType?: string(name='AuthType'),
    dataFormat?: int32(name='DataFormat'),
    description?: string(name='Description'),
    id2?: boolean(name='Id2'),
    nodeType?: int32(name='NodeType'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    productSecret?: string(name='ProductSecret'),
    protocolType?: string(name='ProtocolType'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductResponseBody(name='body'),
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduct', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductDistributeJobRequest {
  productKey: string(name='ProductKey', position='Query'),
  sourceInstanceId: string(name='SourceInstanceId', position='Query'),
  targetAliyunId?: string(name='TargetAliyunId', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', position='Query'),
  targetUid?: string(name='TargetUid', position='Query'),
}

model CreateProductDistributeJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateProductDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductDistributeJobResponseBody(name='body'),
}

async function createProductDistributeJob(request: CreateProductDistributeJobRequest): CreateProductDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  productTag: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag', position='Query'),
}

model CreateProductTagsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductTagsResponseBody(name='body'),
}

async function createProductTags(request: CreateProductTagsRequest): CreateProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductTags', 'POST', '/', 'json', false, 'json', request);
}

model CreateProductTopicRequest {
  desc?: string(name='Desc', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  operation: string(name='Operation', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  topicShortName: string(name='TopicShortName', position='Query'),
}

model CreateProductTopicResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  topicId?: long(name='TopicId'),
}

model CreateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductTopicResponseBody(name='body'),
}

async function createProductTopic(request: CreateProductTopicRequest): CreateProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleRequest {
  dataType?: string(name='DataType', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleDesc?: string(name='RuleDesc', position='Query'),
  select?: string(name='Select', position='Query'),
  shortTopic?: string(name='ShortTopic', position='Query'),
  topic?: string(name='Topic', position='Query'),
  topicType?: int32(name='TopicType', position='Query'),
  where?: string(name='Where', position='Query'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  ruleId?: long(name='RuleId'),
  success?: boolean(name='Success'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateRuleActionRequest {
  configuration: string(name='Configuration', position='Query'),
  errorActionFlag?: boolean(name='ErrorActionFlag', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  type: string(name='Type', position='Query'),
}

model CreateRuleActionResponseBody = {
  actionId?: long(name='ActionId'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleActionResponseBody(name='body'),
}

async function createRuleAction(request: CreateRuleActionRequest): CreateRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model CreateRulengDistributeJobRequest {
  productKey: string(name='ProductKey', position='Query'),
  sourceInstanceId: string(name='SourceInstanceId', position='Query'),
  targetInstanceId: string(name='TargetInstanceId', position='Query'),
}

model CreateRulengDistributeJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateRulengDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRulengDistributeJobResponseBody(name='body'),
}

async function createRulengDistributeJob(request: CreateRulengDistributeJobRequest): CreateRulengDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRulengDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model CreateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleContent?: string(name='RuleContent', position='Query'),
  ruleDescription?: string(name='RuleDescription', position='Query'),
  ruleName: string(name='RuleName', position='Query'),
}

model CreateSceneRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  ruleId?: string(name='RuleId'),
  success?: boolean(name='Success'),
}

model CreateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSceneRuleResponseBody(name='body'),
}

async function createSceneRule(request: CreateSceneRuleRequest): CreateSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateSpeechRequest {
  bizCode?: string(name='BizCode', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectCode: string(name='ProjectCode', position='Body'),
  speechRate?: int32(name='SpeechRate', position='Body'),
  speechType?: string(name='SpeechType', position='Body'),
  text?: string(name='Text', position='Body'),
  voice: string(name='Voice', position='Body'),
  volume?: int32(name='Volume', position='Body'),
}

model CreateSpeechResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSpeechResponseBody(name='body'),
}

async function createSpeech(request: CreateSpeechRequest): CreateSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSpeech', 'POST', '/', 'json', false, 'json', request);
}

model CreateStudioAppDomainOpenRequest {
  appId: string(name='AppId', position='Body'),
  host: string(name='Host', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  protocol: string(name='Protocol', position='Body'),
}

model CreateStudioAppDomainOpenResponseBody = {
  code?: string(name='Code'),
  data?: {
    appId?: string(name='AppId'),
    host?: string(name='Host'),
    id?: int32(name='Id'),
    isBeian?: string(name='IsBeian'),
    projectId?: string(name='ProjectId'),
    protocol?: string(name='Protocol'),
    tenantId?: string(name='TenantId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStudioAppDomainOpenResponseBody(name='body'),
}

async function createStudioAppDomainOpen(request: CreateStudioAppDomainOpenRequest): CreateStudioAppDomainOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStudioAppDomainOpen', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', position='Query'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', position='Query'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', position='Query'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', position='Query'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', position='Query'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', position='Query'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  mnsConfiguration?: string(name='MnsConfiguration', position='Query'),
  otaEventFlag?: boolean(name='OtaEventFlag', position='Query'),
  otaJobFlag?: boolean(name='OtaJobFlag', position='Query'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', position='Query'),
  type?: string(name='Type', position='Query'),
}

model CreateSubscribeRelationResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscribeRelationResponseBody(name='body'),
}

async function createSubscribeRelation(request: CreateSubscribeRelationRequest): CreateSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model CreateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  functionBlockName?: string(name='FunctionBlockName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  thingModelJson?: string(name='ThingModelJson', position='Query'),
}

model CreateThingModelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThingModelResponseBody(name='body'),
}

async function createThingModel(request: CreateThingModelRequest): CreateThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateThingModel', 'POST', '/', 'json', false, 'json', request);
}

model CreateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  scriptContent: string(name='ScriptContent', position='Query'),
  scriptType: string(name='ScriptType', position='Query'),
}

model CreateThingScriptResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThingScriptResponseBody(name='body'),
}

async function createThingScript(request: CreateThingScriptRequest): CreateThingScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateThingScript', 'POST', '/', 'json', false, 'json', request);
}

model CreateTopicRouteTableRequest {
  dstTopic: [ string ](name='DstTopic', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  srcTopic: string(name='SrcTopic', position='Query'),
}

model CreateTopicRouteTableResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  failureTopics?: {
    topic?: [ map[string]string ](name='Topic')
  }(name='FailureTopics'),
  isAllSucceed?: boolean(name='IsAllSucceed'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicRouteTableResponseBody(name='body'),
}

async function createTopicRouteTable(request: CreateTopicRouteTableRequest): CreateTopicRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTopicRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConsumerGroupSubscribeRelationRequest {
  consumerGroupId: string(name='ConsumerGroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model DeleteConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function deleteConsumerGroupSubscribeRelation(request: DeleteConsumerGroupSubscribeRelationRequest): DeleteConsumerGroupSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConsumerGroupSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model DeleteDeviceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDevice', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceDistributeJobRequest {
  jobId: string(name='JobId', position='Query'),
}

model DeleteDeviceDistributeJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceDistributeJobResponseBody(name='body'),
}

async function deleteDeviceDistributeJob(request: DeleteDeviceDistributeJobRequest): DeleteDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceFileRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  fileId: string(name='FileId', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model DeleteDeviceFileResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceFileResponseBody(name='body'),
}

async function deleteDeviceFile(request: DeleteDeviceFileRequest): DeleteDeviceFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceFile', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDeviceGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model DeleteDeviceGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceGroupResponseBody(name='body'),
}

async function deleteDeviceGroup(request: DeleteDeviceGroupRequest): DeleteDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDevicePropRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  propKey: string(name='PropKey', position='Query'),
}

model DeleteDevicePropResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevicePropResponseBody(name='body'),
}

async function deleteDeviceProp(request: DeleteDevicePropRequest): DeleteDevicePropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceProp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeDriverRequest {
  driverId: string(name='DriverId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model DeleteEdgeDriverResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeDriverResponseBody(name='body'),
}

async function deleteEdgeDriver(request: DeleteEdgeDriverRequest): DeleteEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeDriverVersionRequest {
  driverId: string(name='DriverId', position='Query'),
  driverVersion: string(name='DriverVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model DeleteEdgeDriverVersionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeDriverVersionResponseBody(name='body'),
}

async function deleteEdgeDriverVersion(request: DeleteEdgeDriverVersionRequest): DeleteEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model DeleteEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeInstanceResponseBody(name='body'),
}

async function deleteEdgeInstance(request: DeleteEdgeInstanceRequest): DeleteEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  routeId: long(name='RouteId', position='Query'),
}

model DeleteEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function deleteEdgeInstanceMessageRouting(request: DeleteEdgeInstanceMessageRoutingRequest): DeleteEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model DeleteJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model DeleteJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJob', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOTAFirmwareRequest {
  firmwareId: string(name='FirmwareId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model DeleteOTAFirmwareResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOTAFirmwareResponseBody(name='body'),
}

async function deleteOTAFirmware(request: DeleteOTAFirmwareRequest): DeleteOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOTAModuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  moduleName: string(name='ModuleName', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model DeleteOTAModuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOTAModuleResponseBody(name='body'),
}

async function deleteOTAModule(request: DeleteOTAModuleRequest): DeleteOTAModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOTAModule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model DeleteProductResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProduct', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  productTagKey: [ string ](name='ProductTagKey', position='Query'),
}

model DeleteProductTagsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductTagsResponseBody(name='body'),
}

async function deleteProductTags(request: DeleteProductTagsRequest): DeleteProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProductTags', 'POST', '/', 'json', false, 'json', request);
}

model DeleteProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  topicId: string(name='TopicId', position='Query'),
}

model DeleteProductTopicResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductTopicResponseBody(name='body'),
}

async function deleteProductTopic(request: DeleteProductTopicRequest): DeleteProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRuleActionRequest {
  actionId: long(name='ActionId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model DeleteRuleActionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleActionResponseBody(name='body'),
}

async function deleteRuleAction(request: DeleteRuleActionRequest): DeleteRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model DeleteSceneRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSceneRuleResponseBody(name='body'),
}

async function deleteSceneRule(request: DeleteSceneRuleRequest): DeleteSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  speechCodeList: [ string ](name='SpeechCodeList', position='Body'),
}

model DeleteSpeechResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSpeechResponseBody(name='body'),
}

async function deleteSpeech(request: DeleteSpeechRequest): DeleteSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSpeech', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStudioAppDomainOpenRequest {
  appId: string(name='AppId', position='Body'),
  domainId: int32(name='DomainId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model DeleteStudioAppDomainOpenResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStudioAppDomainOpenResponseBody(name='body'),
}

async function deleteStudioAppDomainOpen(request: DeleteStudioAppDomainOpenRequest): DeleteStudioAppDomainOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStudioAppDomainOpen', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  type: string(name='Type', position='Query'),
}

model DeleteSubscribeRelationResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscribeRelationResponseBody(name='body'),
}

async function deleteSubscribeRelation(request: DeleteSubscribeRelationRequest): DeleteSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteThingModelRequest {
  eventIdentifier?: [ string ](name='EventIdentifier', position='Query'),
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  propertyIdentifier?: [ string ](name='PropertyIdentifier', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  serviceIdentifier?: [ string ](name='ServiceIdentifier', position='Query'),
}

model DeleteThingModelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteThingModelResponseBody(name='body'),
}

async function deleteThingModel(request: DeleteThingModelRequest): DeleteThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteThingModel', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTopicRouteTableRequest {
  dstTopic: [ string ](name='DstTopic', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  srcTopic: string(name='SrcTopic', position='Query'),
}

model DeleteTopicRouteTableResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  failureTopics?: {
    topic?: [ map[string]string ](name='Topic')
  }(name='FailureTopics'),
  isAllSucceed?: boolean(name='IsAllSucceed'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicRouteTableResponseBody(name='body'),
}

async function deleteTopicRouteTable(request: DeleteTopicRouteTableRequest): DeleteTopicRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTopicRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DisableDeviceTunnelRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model DisableDeviceTunnelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDeviceTunnelResponseBody(name='body'),
}

async function disableDeviceTunnel(request: DisableDeviceTunnelRequest): DisableDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model DisableDeviceTunnelShareRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model DisableDeviceTunnelShareResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDeviceTunnelShareResponseBody(name='body'),
}

async function disableDeviceTunnelShare(request: DisableDeviceTunnelShareRequest): DisableDeviceTunnelShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDeviceTunnelShare', 'POST', '/', 'json', false, 'json', request);
}

model DisableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model DisableSceneRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSceneRuleResponseBody(name='body'),
}

async function disableSceneRule(request: DisableSceneRuleRequest): DisableSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model DisableThingRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model DisableThingResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableThingResponse = {
  headers: map[string]string(name='headers'),
  body: DisableThingResponseBody(name='body'),
}

async function disableThing(request: DisableThingRequest): DisableThingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableThing', 'POST', '/', 'json', false, 'json', request);
}

model EnableDeviceTunnelRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model EnableDeviceTunnelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDeviceTunnelResponseBody(name='body'),
}

async function enableDeviceTunnel(request: EnableDeviceTunnelRequest): EnableDeviceTunnelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDeviceTunnel', 'POST', '/', 'json', false, 'json', request);
}

model EnableDeviceTunnelShareRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model EnableDeviceTunnelShareResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDeviceTunnelShareResponseBody(name='body'),
}

async function enableDeviceTunnelShare(request: EnableDeviceTunnelShareRequest): EnableDeviceTunnelShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDeviceTunnelShare', 'POST', '/', 'json', false, 'json', request);
}

model EnableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model EnableSceneRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSceneRuleResponseBody(name='body'),
}

async function enableSceneRule(request: EnableSceneRuleRequest): EnableSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model EnableThingRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model EnableThingResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableThingResponse = {
  headers: map[string]string(name='headers'),
  body: EnableThingResponseBody(name='body'),
}

async function enableThing(request: EnableThingRequest): EnableThingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableThing', 'POST', '/', 'json', false, 'json', request);
}

model GenerateDeviceNameListURLRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model GenerateDeviceNameListURLResponseBody = {
  code?: string(name='Code'),
  data?: {
    accessKeyId?: string(name='AccessKeyId'),
    fileUrl?: string(name='FileUrl'),
    host?: string(name='Host'),
    key?: string(name='Key'),
    objectStorage?: string(name='ObjectStorage'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateDeviceNameListURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateDeviceNameListURLResponseBody(name='body'),
}

async function generateDeviceNameListURL(request: GenerateDeviceNameListURLRequest): GenerateDeviceNameListURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateDeviceNameListURL', 'POST', '/', 'json', false, 'json', request);
}

model GenerateFileUploadURLRequest {
  bizCode: string(name='BizCode', position='Query'),
  fileName?: string(name='FileName', position='Query'),
  fileSuffix: string(name='FileSuffix', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model GenerateFileUploadURLResponseBody = {
  code?: string(name='Code'),
  data?: {
    host?: string(name='Host'),
    key?: string(name='Key'),
    objectStorage?: string(name='ObjectStorage'),
    ossAccessKeyId?: string(name='OssAccessKeyId'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateFileUploadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateFileUploadURLResponseBody(name='body'),
}

async function generateFileUploadURL(request: GenerateFileUploadURLRequest): GenerateFileUploadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateFileUploadURL', 'POST', '/', 'json', false, 'json', request);
}

model GenerateOTAUploadURLRequest {
  fileSuffix?: string(name='FileSuffix', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model GenerateOTAUploadURLResponseBody = {
  code?: string(name='Code'),
  data?: {
    firmwareUrl?: string(name='FirmwareUrl'),
    host?: string(name='Host'),
    key?: string(name='Key'),
    OSSAccessKeyId?: string(name='OSSAccessKeyId'),
    objectStorage?: string(name='ObjectStorage'),
    policy?: string(name='Policy'),
    signature?: string(name='Signature'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateOTAUploadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateOTAUploadURLResponseBody(name='body'),
}

async function generateOTAUploadURL(request: GenerateOTAUploadURLRequest): GenerateOTAUploadURLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateOTAUploadURL', 'POST', '/', 'json', false, 'json', request);
}

model GetDataAPIServiceDetailRequest {
  apiSrn: string(name='ApiSrn', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
}

model GetDataAPIServiceDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiPath?: string(name='ApiPath'),
    apiSrn?: string(name='ApiSrn'),
    createTime?: long(name='CreateTime'),
    dateFormat?: string(name='DateFormat'),
    description?: string(name='Description'),
    displayName?: string(name='DisplayName'),
    lastUpdateTime?: long(name='LastUpdateTime'),
    requestMethod?: string(name='RequestMethod'),
    requestProtocol?: string(name='RequestProtocol'),
    sqlTemplateDTO?: {
      originSql?: string(name='OriginSql'),
      requestParams?: {
        requestParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example'),
          name?: string(name='Name'),
          required?: boolean(name='Required'),
          type?: string(name='Type'),
        }
      ](name='RequestParams')
      }(name='RequestParams'),
      responseParams?: {
        responseParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example'),
          name?: string(name='Name'),
          required?: boolean(name='Required'),
          type?: string(name='Type'),
        }
      ](name='ResponseParams')
      }(name='ResponseParams'),
      templateSql?: string(name='TemplateSql'),
    }(name='SqlTemplateDTO'),
    status?: int32(name='Status'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDataAPIServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataAPIServiceDetailResponseBody(name='body'),
}

async function getDataAPIServiceDetail(request: GetDataAPIServiceDetailRequest): GetDataAPIServiceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataAPIServiceDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceShadowRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model GetDeviceShadowResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  shadowMessage?: string(name='ShadowMessage'),
  success?: boolean(name='Success'),
}

model GetDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceShadowResponseBody(name='body'),
}

async function getDeviceShadow(request: GetDeviceShadowRequest): GetDeviceShadowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceShadow', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceStatusRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model GetDeviceStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    status?: string(name='Status'),
    timestamp?: long(name='Timestamp'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceStatusResponseBody(name='body'),
}

async function getDeviceStatus(request: GetDeviceStatusRequest): GetDeviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceTunnelShareStatusRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model GetDeviceTunnelShareStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    gmtOpened?: long(name='GmtOpened'),
    isOpen?: boolean(name='IsOpen'),
    password?: string(name='Password'),
    shareId?: string(name='ShareId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDeviceTunnelShareStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceTunnelShareStatusResponseBody(name='body'),
}

async function getDeviceTunnelShareStatus(request: GetDeviceTunnelShareStatusRequest): GetDeviceTunnelShareStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceTunnelShareStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceTunnelStatusRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model GetDeviceTunnelStatusResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDeviceTunnelStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceTunnelStatusResponseBody(name='body'),
}

async function getDeviceTunnelStatus(request: GetDeviceTunnelStatusRequest): GetDeviceTunnelStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceTunnelStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetEdgeDriverVersionRequest {
  driverId: string(name='DriverId', position='Query'),
  driverVersion: string(name='DriverVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model GetEdgeDriverVersionResponseBody = {
  code?: string(name='Code'),
  data?: {
    argument?: string(name='Argument'),
    configCheckRule?: string(name='ConfigCheckRule'),
    containerConfig?: string(name='ContainerConfig'),
    description?: string(name='Description'),
    driverConfig?: string(name='DriverConfig'),
    driverId?: string(name='DriverId'),
    driverVersion?: string(name='DriverVersion'),
    edgeVersion?: string(name='EdgeVersion'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
    sourceConfig?: string(name='SourceConfig'),
    versionState?: string(name='VersionState'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeDriverVersionResponseBody(name='body'),
}

async function getEdgeDriverVersion(request: GetEdgeDriverVersionRequest): GetEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model GetEdgeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model GetEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizEnable?: boolean(name='BizEnable'),
    gmtCreate?: string(name='GmtCreate'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    gmtModified?: string(name='GmtModified'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
    instanceId?: string(name='InstanceId'),
    latestDeploymentStatus?: int32(name='LatestDeploymentStatus'),
    latestDeploymentType?: string(name='LatestDeploymentType'),
    name?: string(name='Name'),
    roleArn?: string(name='RoleArn'),
    roleAttachTime?: string(name='RoleAttachTime'),
    roleAttachTimestamp?: long(name='RoleAttachTimestamp'),
    roleName?: string(name='RoleName'),
    spec?: int32(name='Spec'),
    tags?: string(name='Tags'),
    type?: string(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceResponseBody(name='body'),
}

async function getEdgeInstance(request: GetEdgeInstanceRequest): GetEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetEdgeInstanceDeploymentRequest {
  deploymentId: string(name='DeploymentId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model GetEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code'),
  data?: {
    deploymentId?: string(name='DeploymentId'),
    description?: string(name='Description'),
    gmtCompleted?: string(name='GmtCompleted'),
    gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
    gmtCreate?: string(name='GmtCreate'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    gmtModified?: string(name='GmtModified'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
    status?: int32(name='Status'),
    taskList?: [ 
      {
        gatewayId?: string(name='GatewayId'),
        gmtCompleted?: string(name='GmtCompleted'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        resourceSnapshotList?: [ 
          {
            gmtCompleted?: string(name='GmtCompleted'),
            gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
            gmtCreate?: string(name='GmtCreate'),
            gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
            gmtModified?: string(name='GmtModified'),
            gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
            log?: string(name='Log'),
            operateType?: int32(name='OperateType'),
            resourceId?: string(name='ResourceId'),
            resourceName?: string(name='ResourceName'),
            resourceType?: string(name='ResourceType'),
            snapshotId?: string(name='SnapshotId'),
            stage?: int32(name='Stage'),
            status?: int32(name='Status'),
          }
        ](name='ResourceSnapshotList'),
        stage?: int32(name='Stage'),
        status?: int32(name='Status'),
        taskId?: string(name='TaskId'),
      }
    ](name='TaskList'),
    type?: string(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceDeploymentResponseBody(name='body'),
}

async function getEdgeInstanceDeployment(request: GetEdgeInstanceDeploymentRequest): GetEdgeInstanceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeInstanceDeployment', 'POST', '/', 'json', false, 'json', request);
}

model GetEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  routeId: long(name='RouteId', position='Query'),
}

model GetEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  data?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    gmtModified?: string(name='GmtModified'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
    name?: string(name='Name'),
    routeContext?: {
      qos?: string(name='Qos'),
      sourceApplicationName?: string(name='SourceApplicationName'),
      sourceFcFunctionName?: string(name='SourceFcFunctionName'),
      sourceFcServiceName?: string(name='SourceFcServiceName'),
      targetApplicationName?: string(name='TargetApplicationName'),
      targetFcFunctionName?: string(name='TargetFcFunctionName'),
      targetFcServiceName?: string(name='TargetFcServiceName'),
    }(name='RouteContext'),
    sourceData?: string(name='SourceData'),
    sourceType?: string(name='SourceType'),
    targetData?: string(name='TargetData'),
    targetType?: string(name='TargetType'),
    topicFilter?: string(name='TopicFilter'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function getEdgeInstanceMessageRouting(request: GetEdgeInstanceMessageRoutingRequest): GetEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model GetGatewayBySubDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model GetGatewayBySubDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
    firmwareVersion?: string(name='FirmwareVersion'),
    gmtActive?: string(name='GmtActive'),
    gmtCreate?: string(name='GmtCreate'),
    gmtOnline?: string(name='GmtOnline'),
    ipAddress?: string(name='IpAddress'),
    nodeType?: string(name='NodeType'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    status?: string(name='Status'),
    utcActive?: string(name='UtcActive'),
    utcCreate?: string(name='UtcCreate'),
    utcOnline?: string(name='UtcOnline'),
    iotId?: string(name='iotId'),
    region?: string(name='region'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetGatewayBySubDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayBySubDeviceResponseBody(name='body'),
}

async function getGatewayBySubDevice(request: GetGatewayBySubDeviceRequest): GetGatewayBySubDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGatewayBySubDevice', 'POST', '/', 'json', false, 'json', request);
}

model GetLoraNodesTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model GetLoraNodesTaskResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successCount?: long(name='SuccessCount'),
  successDevEuis?: {
    successDevEui?: [ string ](name='SuccessDevEui')
  }(name='SuccessDevEuis'),
  taskId?: string(name='TaskId'),
  taskState?: string(name='TaskState'),
  totalCount?: long(name='TotalCount'),
}

model GetLoraNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoraNodesTaskResponseBody(name='body'),
}

async function getLoraNodesTask(request: GetLoraNodesTaskRequest): GetLoraNodesTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLoraNodesTask', 'POST', '/', 'json', false, 'json', request);
}

model GetNodesAddingTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model GetNodesAddingTaskResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successCount?: long(name='SuccessCount'),
  successDevEuis?: {
    successDevEui?: [ string ](name='SuccessDevEui')
  }(name='SuccessDevEuis'),
  taskId?: string(name='TaskId'),
  taskState?: string(name='TaskState'),
  totalCount?: long(name='TotalCount'),
}

model GetNodesAddingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodesAddingTaskResponseBody(name='body'),
}

async function getNodesAddingTask(request: GetNodesAddingTaskRequest): GetNodesAddingTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNodesAddingTask', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model GetRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  ruleInfo?: {
    createUserId?: long(name='CreateUserId'),
    created?: string(name='Created'),
    dataType?: string(name='DataType'),
    id?: long(name='Id'),
    modified?: string(name='Modified'),
    name?: string(name='Name'),
    productKey?: string(name='ProductKey'),
    ruleDesc?: string(name='RuleDesc'),
    select?: string(name='Select'),
    shortTopic?: string(name='ShortTopic'),
    status?: string(name='Status'),
    topic?: string(name='Topic'),
    topicType?: int32(name='TopicType'),
    utcCreated?: string(name='UtcCreated'),
    utcModified?: string(name='UtcModified'),
    where?: string(name='Where'),
  }(name='RuleInfo'),
  success?: boolean(name='Success'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleResponseBody(name='body'),
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRule', 'POST', '/', 'json', false, 'json', request);
}

model GetRuleActionRequest {
  actionId: long(name='ActionId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model GetRuleActionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  ruleActionInfo?: {
    configuration?: string(name='Configuration'),
    errorActionFlag?: boolean(name='ErrorActionFlag'),
    id?: long(name='Id'),
    ruleId?: long(name='RuleId'),
    type?: string(name='Type'),
  }(name='RuleActionInfo'),
  success?: boolean(name='Success'),
}

model GetRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleActionResponseBody(name='body'),
}

async function getRuleAction(request: GetRuleActionRequest): GetRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model GetSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model GetSceneRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    ruleContent?: string(name='RuleContent'),
    ruleDescription?: string(name='RuleDescription'),
    ruleName?: string(name='RuleName'),
    ruleStatus?: int32(name='RuleStatus'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetSceneRuleResponseBody(name='body'),
}

async function getSceneRule(request: GetSceneRuleRequest): GetSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model GetSpeechVoiceRequest {
}

model GetSpeechVoiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value'),
      voiceList?: {
        items?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value'),
        }
      ](name='Items')
      }(name='VoiceList'),
    }
  ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSpeechVoiceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSpeechVoiceResponseBody(name='body'),
}

async function getSpeechVoice(request: GetSpeechVoiceRequest): GetSpeechVoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSpeechVoice', 'POST', '/', 'json', false, 'json', request);
}

model GetStudioAppTokenOpenRequest {
  appId: string(name='AppId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model GetStudioAppTokenOpenResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizId?: string(name='BizId'),
    bizType?: string(name='BizType'),
    isEnable?: string(name='IsEnable'),
    token?: string(name='Token'),
    type?: string(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  body: GetStudioAppTokenOpenResponseBody(name='body'),
}

async function getStudioAppTokenOpen(request: GetStudioAppTokenOpenRequest): GetStudioAppTokenOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStudioAppTokenOpen', 'POST', '/', 'json', false, 'json', request);
}

model GetThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  modelVersion?: string(name='ModelVersion', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  simple?: boolean(name='Simple', position='Query'),
}

model GetThingModelTslResponseBody = {
  code?: string(name='Code'),
  data?: {
    tslStr?: string(name='TslStr'),
    tslUri?: string(name='TslUri'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingModelTslResponseBody(name='body'),
}

async function getThingModelTsl(request: GetThingModelTslRequest): GetThingModelTslResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingModelTsl', 'POST', '/', 'json', false, 'json', request);
}

model GetThingModelTslPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  modelVersion?: string(name='ModelVersion', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  simple?: boolean(name='Simple', position='Query'),
}

model GetThingModelTslPublishedResponseBody = {
  code?: string(name='Code'),
  data?: {
    tslStr?: string(name='TslStr'),
    tslUri?: string(name='TslUri'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetThingModelTslPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingModelTslPublishedResponseBody(name='body'),
}

async function getThingModelTslPublished(request: GetThingModelTslPublishedRequest): GetThingModelTslPublishedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingModelTslPublished', 'POST', '/', 'json', false, 'json', request);
}

model GetThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model GetThingScriptResponseBody = {
  code?: string(name='Code'),
  data?: {
    scriptType?: string(name='ScriptType'),
    scriptUrl?: string(name='ScriptUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingScriptResponseBody(name='body'),
}

async function getThingScript(request: GetThingScriptRequest): GetThingScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingScript', 'POST', '/', 'json', false, 'json', request);
}

model GetThingTemplateRequest {
  categoryKey?: string(name='CategoryKey', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model GetThingTemplateResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  thingModelJSON?: string(name='ThingModelJSON'),
}

model GetThingTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingTemplateResponseBody(name='body'),
}

async function getThingTemplate(request: GetThingTemplateRequest): GetThingTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetThingTopoRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageNo: int32(name='PageNo', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model GetThingTopoResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: {
      deviceInfo?: [ 
      {
        deviceName?: string(name='DeviceName'),
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
      }
    ](name='deviceInfo')
    }(name='List'),
    pageCount?: long(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingTopoResponseBody(name='body'),
}

async function getThingTopo(request: GetThingTopoRequest): GetThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model ImportThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  functionBlockName?: string(name='FunctionBlockName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tslStr?: string(name='TslStr', position='Query'),
  tslUrl?: string(name='TslUrl', position='Query'),
}

model ImportThingModelTslResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ImportThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  body: ImportThingModelTslResponseBody(name='body'),
}

async function importThingModelTsl(request: ImportThingModelTslRequest): ImportThingModelTslResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportThingModelTsl', 'POST', '/', 'json', false, 'json', request);
}

model InvokeDataAPIServiceRequest {
  apiSrn: string(name='ApiSrn', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  param?: [ 
    {
      listParamType?: string(name='ListParamType'),
      listParamValue?: [ string ](name='ListParamValue'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
    }
  ](name='Param', position='Body'),
}

model InvokeDataAPIServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    apiSrn?: string(name='ApiSrn'),
    fieldNameList?: {
      fieldNameList?: [ string ](name='FieldNameList')
    }(name='FieldNameList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    resultList?: {
      resultList?: [ map[string]string ](name='ResultList')
    }(name='ResultList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InvokeDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeDataAPIServiceResponseBody(name='body'),
}

async function invokeDataAPIService(request: InvokeDataAPIServiceRequest): InvokeDataAPIServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeDataAPIService', 'POST', '/', 'json', false, 'json', request);
}

model InvokeThingServiceRequest {
  args: string(name='Args', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  identifier: string(name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model InvokeThingServiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    messageId?: string(name='MessageId'),
    result?: string(name='Result'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InvokeThingServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeThingServiceResponseBody(name='body'),
}

async function invokeThingService(request: InvokeThingServiceRequest): InvokeThingServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeThingService', 'POST', '/', 'json', false, 'json', request);
}

model InvokeThingsServiceRequest {
  args: string(name='Args', position='Query'),
  deviceName: [ string ](name='DeviceName', position='Query'),
  identifier: string(name='Identifier', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model InvokeThingsServiceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InvokeThingsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeThingsServiceResponseBody(name='body'),
}

async function invokeThingsService(request: InvokeThingsServiceRequest): InvokeThingsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeThingsService', 'POST', '/', 'json', false, 'json', request);
}

model ListAnalyticsDataRequest {
  apiPath: string(name='ApiPath', position='Query'),
  condition?: [ 
    {
      betweenEnd?: string(name='BetweenEnd'),
      betweenStart?: string(name='BetweenStart'),
      fieldName: string(name='FieldName'),
      operate: string(name='Operate'),
      value?: string(name='Value'),
    }
  ](name='Condition', position='Query'),
  iotInstanceId: string(name='IotInstanceId', position='Query'),
  isoId?: string(name='IsoId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model ListAnalyticsDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: long(name='Count'),
    hasNext?: boolean(name='HasNext'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    resultJson?: string(name='ResultJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListAnalyticsDataResponse = {
  headers: map[string]string(name='headers'),
  body: ListAnalyticsDataResponseBody(name='body'),
}

async function listAnalyticsData(request: ListAnalyticsDataRequest): ListAnalyticsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnalyticsData', 'POST', '/', 'json', false, 'json', request);
}

model ListDeviceDistributeJobRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  jobId?: string(name='JobId', position='Body'),
  nextToken?: string(name='NextToken', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  status?: int32(name='Status', position='Query'),
  targetUid?: string(name='TargetUid', position='Query'),
}

model ListDeviceDistributeJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    jobInfo?: {
      items?: [ 
      {
        gmtCreate?: long(name='GmtCreate'),
        jobId?: string(name='JobId'),
        productKey?: string(name='ProductKey'),
        sourceInstanceId?: string(name='SourceInstanceId'),
        sourceInstanceName?: string(name='SourceInstanceName'),
        sourceRegion?: string(name='SourceRegion'),
        sourceUid?: string(name='SourceUid'),
        status?: int32(name='Status'),
        strategy?: int32(name='Strategy'),
        targetInstanceConfigs?: {
          targetInstanceConfigs?: [ 
          {
            targetInstanceId?: string(name='TargetInstanceId'),
            targetInstanceName?: string(name='TargetInstanceName'),
            targetRegion?: string(name='TargetRegion'),
          }
        ](name='targetInstanceConfigs')
        }(name='TargetInstanceConfigs'),
        targetUid?: string(name='TargetUid'),
        total?: int32(name='Total'),
      }
    ](name='items')
    }(name='JobInfo'),
    nextToken?: string(name='NextToken'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListDeviceDistributeJobResponseBody(name='body'),
}

async function listDeviceDistributeJob(request: ListDeviceDistributeJobRequest): ListDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model ListDistributedDeviceRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', position='Query'),
  targetUid?: string(name='TargetUid', position='Query'),
}

model ListDistributedDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    info?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        productKey?: string(name='ProductKey'),
        sourceInstanceId?: string(name='SourceInstanceId'),
        sourceInstanceName?: string(name='SourceInstanceName'),
        sourceRegion?: string(name='SourceRegion'),
        sourceUid?: string(name='SourceUid'),
        targetAliyunId?: string(name='TargetAliyunId'),
        targetInstanceId?: string(name='TargetInstanceId'),
        targetInstanceName?: string(name='TargetInstanceName'),
        targetRegion?: string(name='TargetRegion'),
        targetUid?: string(name='TargetUid'),
      }
    ](name='items')
    }(name='Info'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDistributedDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListDistributedDeviceResponseBody(name='body'),
}

async function listDistributedDevice(request: ListDistributedDeviceRequest): ListDistributedDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDistributedDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListDistributedProductRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  sourceInstanceId?: string(name='SourceInstanceId', position='Query'),
  targetInstanceId?: string(name='TargetInstanceId', position='Query'),
  targetUid?: string(name='TargetUid', position='Query'),
}

model ListDistributedProductResponseBody = {
  code?: string(name='Code'),
  data?: {
    info?: {
      items?: [ 
      {
        gmtCreate?: int32(name='GmtCreate'),
        productKey?: string(name='ProductKey'),
        sourceInstanceId?: string(name='SourceInstanceId'),
        sourceInstanceName?: string(name='SourceInstanceName'),
        sourceRegion?: string(name='SourceRegion'),
        sourceUid?: string(name='SourceUid'),
        targetAliyunId?: string(name='TargetAliyunId'),
        targetInstanceId?: string(name='TargetInstanceId'),
        targetInstanceName?: string(name='TargetInstanceName'),
        targetRegion?: string(name='TargetRegion'),
        targetUid?: string(name='TargetUid'),
      }
    ](name='items')
    }(name='Info'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListDistributedProductResponse = {
  headers: map[string]string(name='headers'),
  body: ListDistributedProductResponseBody(name='body'),
}

async function listDistributedProduct(request: ListDistributedProductRequest): ListDistributedProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDistributedProduct', 'POST', '/', 'json', false, 'json', request);
}

model ListJobRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
    {
      description?: string(name='Description'),
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      scheduledTime?: long(name='ScheduledTime'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobResponseBody(name='body'),
}

async function listJob(request: ListJobRequest): ListJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJob', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAFirmwareRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  destVersion?: string(name='DestVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model ListOTAFirmwareResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  errorMessage?: string(name='ErrorMessage'),
  firmwareInfo?: {
    simpleFirmwareInfo?: [ 
    {
      destVersion?: string(name='DestVersion'),
      firmwareDesc?: string(name='FirmwareDesc'),
      firmwareId?: string(name='FirmwareId'),
      firmwareName?: string(name='FirmwareName'),
      firmwareSign?: string(name='FirmwareSign'),
      firmwareSize?: int32(name='FirmwareSize'),
      moduleName?: string(name='ModuleName'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
      signMethod?: string(name='SignMethod'),
      srcVersion?: string(name='SrcVersion'),
      status?: int32(name='Status'),
      type?: int32(name='Type'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
    }
  ](name='SimpleFirmwareInfo')
  }(name='FirmwareInfo'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAFirmwareResponseBody(name='body'),
}

async function listOTAFirmware(request: ListOTAFirmwareRequest): ListOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAJobByDeviceRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  deviceName: string(name='DeviceName', position='Query'),
  firmwareId: string(name='FirmwareId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model ListOTAJobByDeviceResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId'),
      jobId?: string(name='JobId'),
      jobStatus?: string(name='JobStatus'),
      jobType?: string(name='JobType'),
      productKey?: string(name='ProductKey'),
      selectionType?: string(name='SelectionType'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
      targetSelection?: string(name='TargetSelection'),
      utcCreate?: string(name='UtcCreate'),
      utcEndTime?: string(name='UtcEndTime'),
      utcModified?: string(name='UtcModified'),
      utcStartTime?: string(name='UtcStartTime'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListOTAJobByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAJobByDeviceResponseBody(name='body'),
}

async function listOTAJobByDevice(request: ListOTAJobByDeviceRequest): ListOTAJobByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAJobByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAJobByFirmwareRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  firmwareId: string(name='FirmwareId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model ListOTAJobByFirmwareResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId'),
      jobId?: string(name='JobId'),
      jobStatus?: string(name='JobStatus'),
      jobType?: string(name='JobType'),
      productKey?: string(name='ProductKey'),
      selectionType?: string(name='SelectionType'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
      targetSelection?: string(name='TargetSelection'),
      utcCreate?: string(name='UtcCreate'),
      utcEndTime?: string(name='UtcEndTime'),
      utcModified?: string(name='UtcModified'),
      utcStartTime?: string(name='UtcStartTime'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListOTAJobByFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAJobByFirmwareResponseBody(name='body'),
}

async function listOTAJobByFirmware(request: ListOTAJobByFirmwareRequest): ListOTAJobByFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAJobByFirmware', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAModuleByProductRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model ListOTAModuleByProductResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      aliasName?: string(name='AliasName'),
      desc?: string(name='Desc'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      moduleName?: string(name='ModuleName'),
      productKey?: string(name='ProductKey'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListOTAModuleByProductResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAModuleByProductResponseBody(name='body'),
}

async function listOTAModuleByProduct(request: ListOTAModuleByProductRequest): ListOTAModuleByProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAModuleByProduct', 'GET', '/', 'json', false, 'json', request);
}

model ListOTAModuleVersionsByDeviceRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model ListOTAModuleVersionsByDeviceResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTAModuleInfo?: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      moduleName?: string(name='ModuleName'),
      moduleVersion?: string(name='ModuleVersion'),
      productKey?: string(name='ProductKey'),
    }
  ](name='SimpleOTAModuleInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListOTAModuleVersionsByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAModuleVersionsByDeviceResponseBody(name='body'),
}

async function listOTAModuleVersionsByDevice(request: ListOTAModuleVersionsByDeviceRequest): ListOTAModuleVersionsByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAModuleVersionsByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListOTATaskByJobRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  deviceNames?: [ string ](name='DeviceNames', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  taskStatus?: string(name='TaskStatus', position='Query'),
}

model ListOTATaskByJobResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion'),
      deviceName?: string(name='DeviceName'),
      firmwareId?: string(name='FirmwareId'),
      iotId?: string(name='IotId'),
      jobId?: string(name='JobId'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
      progress?: string(name='Progress'),
      srcVersion?: string(name='SrcVersion'),
      taskDesc?: string(name='TaskDesc'),
      taskId?: string(name='TaskId'),
      taskStatus?: string(name='TaskStatus'),
      timeout?: string(name='Timeout'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTATaskByJobResponseBody(name='body'),
}

async function listOTATaskByJob(request: ListOTATaskByJobRequest): ListOTATaskByJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTATaskByJob', 'POST', '/', 'json', false, 'json', request);
}

model ListOTAUnfinishedTaskByDeviceRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  moduleName?: string(name='ModuleName', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  taskStatus: string(name='TaskStatus', position='Query'),
}

model ListOTAUnfinishedTaskByDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion'),
      deviceName?: string(name='DeviceName'),
      firmwareId?: string(name='FirmwareId'),
      iotId?: string(name='IotId'),
      jobId?: string(name='JobId'),
      moduleName?: string(name='ModuleName'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
      srcVersion?: string(name='SrcVersion'),
      taskId?: string(name='TaskId'),
      taskStatus?: string(name='TaskStatus'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListOTAUnfinishedTaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAUnfinishedTaskByDeviceResponseBody(name='body'),
}

async function listOTAUnfinishedTaskByDevice(request: ListOTAUnfinishedTaskByDeviceRequest): ListOTAUnfinishedTaskByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOTAUnfinishedTaskByDevice', 'POST', '/', 'json', false, 'json', request);
}

model ListProductByTagsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productTag: [ 
    {
      tagKey: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag', position='Query'),
}

model ListProductByTagsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  productInfos?: {
    productInfo?: [ 
    {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      nodeType?: int32(name='NodeType'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
    }
  ](name='ProductInfo')
  }(name='ProductInfos'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListProductByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductByTagsResponseBody(name='body'),
}

async function listProductByTags(request: ListProductByTagsRequest): ListProductByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductByTags', 'POST', '/', 'json', false, 'json', request);
}

model ListProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model ListProductTagsResponseBody = {
  code?: string(name='Code'),
  data?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductTagsResponseBody(name='body'),
}

async function listProductTags(request: ListProductTagsRequest): ListProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductTags', 'POST', '/', 'json', false, 'json', request);
}

model ListRuleRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ListRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    ruleInfo?: [ 
    {
      createUserId?: long(name='CreateUserId'),
      created?: string(name='Created'),
      dataType?: string(name='DataType'),
      id?: long(name='Id'),
      modified?: string(name='Modified'),
      name?: string(name='Name'),
      productKey?: string(name='ProductKey'),
      ruleDesc?: string(name='RuleDesc'),
      select?: string(name='Select'),
      shortTopic?: string(name='ShortTopic'),
      status?: string(name='Status'),
      topic?: string(name='Topic'),
      utcCreated?: string(name='UtcCreated'),
      utcModified?: string(name='UtcModified'),
      where?: string(name='Where'),
    }
  ](name='RuleInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleResponseBody(name='body'),
}

async function listRule(request: ListRuleRequest): ListRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRule', 'POST', '/', 'json', false, 'json', request);
}

model ListRuleActionsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model ListRuleActionsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  ruleActionList?: {
    ruleActionInfo?: [ 
    {
      configuration?: string(name='Configuration'),
      errorActionFlag?: boolean(name='ErrorActionFlag'),
      id?: long(name='Id'),
      ruleId?: long(name='RuleId'),
      type?: string(name='Type'),
    }
  ](name='RuleActionInfo')
  }(name='RuleActionList'),
  success?: boolean(name='Success'),
}

model ListRuleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleActionsResponseBody(name='body'),
}

async function listRuleActions(request: ListRuleActionsRequest): ListRuleActionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRuleActions', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskRequest {
  device?: string(name='Device', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  limit: int32(name='Limit', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      productKey?: string(name='ProductKey'),
      progress?: string(name='Progress'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
      utcModified?: string(name='UtcModified'),
      utcQueueTime?: string(name='UtcQueueTime'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskResponseBody(name='body'),
}

async function listTask(request: ListTaskRequest): ListTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTask', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskByPageRequest {
  device?: string(name='Device', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  jobName?: string(name='JobName', position='Query'),
  pageNo: string(name='PageNo', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  status?: string(name='Status', position='Query'),
}

model ListTaskByPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
      progress?: int32(name='Progress'),
      status?: string(name='Status'),
      statusDetail?: string(name='StatusDetail'),
      taskId?: string(name='TaskId'),
      utcModified?: string(name='UtcModified'),
      utcQueueTime?: string(name='UtcQueueTime'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model ListTaskByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskByPageResponseBody(name='body'),
}

async function listTaskByPage(request: ListTaskByPageRequest): ListTaskByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskByPage', 'POST', '/', 'json', false, 'json', request);
}

model ListThingModelVersionRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model ListThingModelVersionResponseBody = {
  code?: string(name='Code'),
  data?: {
    modelVersions?: [ 
      {
        description?: string(name='Description'),
        gmtCreate?: long(name='GmtCreate'),
        modelVersion?: string(name='ModelVersion'),
      }
    ](name='ModelVersions'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListThingModelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ListThingModelVersionResponseBody(name='body'),
}

async function listThingModelVersion(request: ListThingModelVersionRequest): ListThingModelVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListThingModelVersion', 'POST', '/', 'json', false, 'json', request);
}

model ListThingTemplatesRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model ListThingTemplatesResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      categoryKey?: string(name='CategoryKey'),
      categoryName?: string(name='CategoryName'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListThingTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListThingTemplatesResponseBody(name='body'),
}

async function listThingTemplates(request: ListThingTemplatesRequest): ListThingTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListThingTemplates', 'POST', '/', 'json', false, 'json', request);
}

model NotifyAddThingTopoRequest {
  deviceListStr?: string(name='DeviceListStr', position='Query'),
  gwDeviceName?: string(name='GwDeviceName', position='Query'),
  gwIotId?: string(name='GwIotId', position='Query'),
  gwProductKey?: string(name='GwProductKey', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model NotifyAddThingTopoResponseBody = {
  code?: string(name='Code'),
  data?: {
    messageId?: string(name='MessageId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model NotifyAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: NotifyAddThingTopoResponseBody(name='body'),
}

async function notifyAddThingTopo(request: NotifyAddThingTopoRequest): NotifyAddThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'NotifyAddThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model OpenIotServiceRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model OpenIotServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenIotServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenIotServiceResponseBody(name='body'),
}

async function openIotService(request: OpenIotServiceRequest): OpenIotServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenIotService', 'POST', '/', 'json', false, 'json', request);
}

model PrintByTemplateRequest {
  deviceName?: string(name='DeviceName', position='Body'),
  iotId?: string(name='IotId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  paramsJsonString?: string(name='ParamsJsonString', position='Body'),
  productKey?: string(name='ProductKey', position='Body'),
  projectCode: string(name='ProjectCode', position='Body'),
  templateBizCode: string(name='TemplateBizCode', position='Body'),
}

model PrintByTemplateResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceErrorCode?: string(name='DeviceErrorCode'),
    deviceErrorMessage?: string(name='DeviceErrorMessage'),
    id?: string(name='Id'),
    maxRetryCount?: int32(name='MaxRetryCount'),
    retryCount?: int32(name='RetryCount'),
    success?: boolean(name='Success'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PrintByTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: PrintByTemplateResponseBody(name='body'),
}

async function printByTemplate(request: PrintByTemplateRequest): PrintByTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PrintByTemplate', 'POST', '/', 'json', false, 'json', request);
}

model PubRequest {
  correlationData?: string(name='CorrelationData', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  messageContent: string(name='MessageContent', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  qos?: int32(name='Qos', position='Query'),
  responseTopic?: string(name='ResponseTopic', position='Query'),
  topicFullName: string(name='TopicFullName', position='Query'),
  userProp?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='UserProp', position='Query'),
}

model PubResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PubResponse = {
  headers: map[string]string(name='headers'),
  body: PubResponseBody(name='body'),
}

async function pub(request: PubRequest): PubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Pub', 'POST', '/', 'json', false, 'json', request);
}

model PubBroadcastRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  messageContent: string(name='MessageContent', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  topicFullName?: string(name='TopicFullName', position='Query'),
}

model PubBroadcastResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PubBroadcastResponse = {
  headers: map[string]string(name='headers'),
  body: PubBroadcastResponseBody(name='body'),
}

async function pubBroadcast(request: PubBroadcastRequest): PubBroadcastResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PubBroadcast', 'POST', '/', 'json', false, 'json', request);
}

model PublishStudioAppRequest {
  appId: string(name='AppId', position='Body'),
  description?: string(name='Description', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model PublishStudioAppResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublishStudioAppResponse = {
  headers: map[string]string(name='headers'),
  body: PublishStudioAppResponseBody(name='body'),
}

async function publishStudioApp(request: PublishStudioAppRequest): PublishStudioAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishStudioApp', 'POST', '/', 'json', false, 'json', request);
}

model PublishThingModelRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  modelVersion?: string(name='ModelVersion', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model PublishThingModelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PublishThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: PublishThingModelResponseBody(name='body'),
}

async function publishThingModel(request: PublishThingModelRequest): PublishThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishThingModel', 'POST', '/', 'json', false, 'json', request);
}

model PushSpeechRequest {
  deviceName?: string(name='DeviceName', position='Body'),
  groupId?: string(name='GroupId', position='Query'),
  iotId?: string(name='IotId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  productKey?: string(name='ProductKey', position='Body'),
  projectCode: string(name='ProjectCode', position='Body'),
  pushMode: string(name='PushMode', position='Body'),
  speechCodeList: [ string ](name='SpeechCodeList', position='Body'),
}

model PushSpeechResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PushSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: PushSpeechResponseBody(name='body'),
}

async function pushSpeech(request: PushSpeechRequest): PushSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushSpeech', 'POST', '/', 'json', false, 'json', request);
}

model QueryAppDeviceListRequest {
  appKey?: string(name='AppKey', position='Query'),
  categoryKeyList?: [ string ](name='CategoryKeyList', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKeyList?: [ string ](name='ProductKeyList', position='Query'),
  tagList?: [ 
    {
      tagName?: string(name='TagName'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagList', position='Query'),
}

model QueryAppDeviceListResponseBody = {
  code?: string(name='Code'),
  data?: {
    data?: [ 
    {
      activeTime?: string(name='ActiveTime'),
      childDeviceCount?: long(name='ChildDeviceCount'),
      createTime?: string(name='CreateTime'),
      deviceName?: string(name='DeviceName'),
      lastOnlineTime?: string(name='LastOnlineTime'),
      nodeType?: int32(name='NodeType'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
      status?: string(name='Status'),
      utcActiveTime?: string(name='UtcActiveTime'),
      utcCreateTime?: string(name='UtcCreateTime'),
      utcLastOnlineTime?: string(name='UtcLastOnlineTime'),
    }
  ](name='Data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryAppDeviceListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAppDeviceListResponseBody(name='body'),
}

async function queryAppDeviceList(request: QueryAppDeviceListRequest): QueryAppDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAppDeviceList', 'POST', '/', 'json', false, 'json', request);
}

model QueryBatchRegisterDeviceStatusRequest {
  applyId: long(name='ApplyId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryBatchRegisterDeviceStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    invalidList?: {
      name?: [ string ](name='Name')
    }(name='InvalidList'),
    status?: string(name='Status'),
    validList?: {
      name?: [ string ](name='Name')
    }(name='ValidList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryBatchRegisterDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBatchRegisterDeviceStatusResponseBody(name='body'),
}

async function queryBatchRegisterDeviceStatus(request: QueryBatchRegisterDeviceStatusRequest): QueryBatchRegisterDeviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBatchRegisterDeviceStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryCertUrlByApplyIdRequest {
  applyId: long(name='ApplyId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryCertUrlByApplyIdResponseBody = {
  certUrl?: string(name='CertUrl'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCertUrlByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCertUrlByApplyIdResponseBody(name='body'),
}

async function queryCertUrlByApplyId(request: QueryCertUrlByApplyIdRequest): QueryCertUrlByApplyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCertUrlByApplyId', 'POST', '/', 'json', false, 'json', request);
}

model QueryConsumerGroupByGroupIdRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryConsumerGroupByGroupIdResponseBody = {
  code?: string(name='Code'),
  data?: {
    createTime?: string(name='CreateTime'),
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryConsumerGroupByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupByGroupIdResponseBody(name='body'),
}

async function queryConsumerGroupByGroupId(request: QueryConsumerGroupByGroupIdRequest): QueryConsumerGroupByGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConsumerGroupByGroupId', 'POST', '/', 'json', false, 'json', request);
}

model QueryConsumerGroupListRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  fuzzy?: boolean(name='Fuzzy', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryConsumerGroupListResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    consumerGroupDTO?: [ 
    {
      createTime?: string(name='CreateTime'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
    }
  ](name='ConsumerGroupDTO')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryConsumerGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupListResponseBody(name='body'),
}

async function queryConsumerGroupList(request: QueryConsumerGroupListRequest): QueryConsumerGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConsumerGroupList', 'POST', '/', 'json', false, 'json', request);
}

model QueryConsumerGroupStatusRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryConsumerGroupStatusResponseBody = {
  accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute'),
  accumulationCount?: int32(name='AccumulationCount'),
  clientConnectionStatusList?: {
    consumerGroupClientConnectionInfo?: [ 
    {
      accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute'),
      clientId?: string(name='ClientId'),
      clientIpPort?: string(name='ClientIpPort'),
      onlineTime?: long(name='OnlineTime'),
      realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute'),
    }
  ](name='ConsumerGroupClientConnectionInfo')
  }(name='ClientConnectionStatusList'),
  code?: string(name='Code'),
  consumerSpeed?: int32(name='ConsumerSpeed'),
  errorMessage?: string(name='ErrorMessage'),
  lastConsumerTime?: string(name='LastConsumerTime'),
  realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryConsumerGroupStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupStatusResponseBody(name='body'),
}

async function queryConsumerGroupStatus(request: QueryConsumerGroupStatusRequest): QueryConsumerGroupStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryConsumerGroupStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDetailSceneRuleLogRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  endTime: int32(name='EndTime', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  startTime: int32(name='StartTime', position='Query'),
  traceId: string(name='TraceId', position='Query'),
}

model QueryDetailSceneRuleLogResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    logList?: [ 
      {
        code?: string(name='Code'),
        message?: string(name='Message'),
        pkDn?: string(name='PkDn'),
      }
    ](name='LogList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDetailSceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDetailSceneRuleLogResponseBody(name='body'),
}

async function queryDetailSceneRuleLog(request: QueryDetailSceneRuleLogRequest): QueryDetailSceneRuleLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDetailSceneRuleLog', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId'),
      deviceName?: string(name='DeviceName'),
      deviceSecret?: string(name='DeviceSecret'),
      deviceStatus?: string(name='DeviceStatus'),
      deviceType?: string(name='DeviceType'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      iotId?: string(name='IotId'),
      nickname?: string(name='Nickname'),
      productKey?: string(name='ProductKey'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
    }
  ](name='DeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceResponseBody(name='body'),
}

async function queryDevice(request: QueryDeviceRequest): QueryDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceBySQLRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  SQL: string(name='SQL', position='Query'),
}

model QueryDeviceBySQLResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      activeTime?: string(name='ActiveTime'),
      deviceName?: string(name='DeviceName'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      groups?: [ 
        {
          groupId?: string(name='GroupId'),
        }
      ](name='Groups'),
      iotId?: string(name='IotId'),
      nickname?: string(name='Nickname'),
      OTAModules?: [ 
        {
          firmwareVersion?: string(name='FirmwareVersion'),
          moduleName?: string(name='ModuleName'),
        }
      ](name='OTAModules'),
      productKey?: string(name='ProductKey'),
      status?: string(name='Status'),
      tags?: [ 
        {
          tagName?: string(name='TagName'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryDeviceBySQLResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceBySQLResponseBody(name='body'),
}

async function queryDeviceBySQL(request: QueryDeviceBySQLRequest): QueryDeviceBySQLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceBySQL', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceByStatusRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  status?: int32(name='Status', position='Query'),
}

model QueryDeviceByStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName'),
      deviceSecret?: string(name='DeviceSecret'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      iotId?: string(name='IotId'),
      nickname?: string(name='Nickname'),
      productKey?: string(name='ProductKey'),
      status?: string(name='Status'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryDeviceByStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceByStatusResponseBody(name='body'),
}

async function queryDeviceByStatus(request: QueryDeviceByStatusRequest): QueryDeviceByStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceByStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceByTagsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  tag?: [ 
    {
      tagKey: string(name='TagKey'),
      tagValue: string(name='TagValue'),
    }
  ](name='Tag', position='Query'),
}

model QueryDeviceByTagsResponseBody = {
  code?: string(name='Code'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryDeviceByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceByTagsResponseBody(name='body'),
}

async function queryDeviceByTags(request: QueryDeviceByTagsRequest): QueryDeviceByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceByTags', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceCertRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryDeviceCertResponseBody = {
  code?: string(name='Code'),
  deviceCertInfo?: {
    certSN?: string(name='CertSN'),
    certificate?: string(name='Certificate'),
    privateKey?: string(name='PrivateKey'),
    status?: int32(name='Status'),
  }(name='DeviceCertInfo'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceCertResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceCertResponseBody(name='body'),
}

async function queryDeviceCert(request: QueryDeviceCertRequest): QueryDeviceCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceCert', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  identifier?: [ string ](name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      desiredPropertyInfo?: [ 
      {
        dataType?: string(name='DataType'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        time?: string(name='Time'),
        unit?: string(name='Unit'),
        value?: string(name='Value'),
        version?: long(name='Version'),
      }
    ](name='DesiredPropertyInfo')
    }(name='List'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDesiredPropertyResponseBody(name='body'),
}

async function queryDeviceDesiredProperty(request: QueryDeviceDesiredPropertyRequest): QueryDeviceDesiredPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDesiredProperty', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDetailRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
    firmwareVersion?: string(name='FirmwareVersion'),
    gmtActive?: string(name='GmtActive'),
    gmtCreate?: string(name='GmtCreate'),
    gmtOnline?: string(name='GmtOnline'),
    iotId?: string(name='IotId'),
    ipAddress?: string(name='IpAddress'),
    nickname?: string(name='Nickname'),
    nodeType?: int32(name='NodeType'),
    owner?: boolean(name='Owner'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    region?: string(name='Region'),
    status?: string(name='Status'),
    utcActive?: string(name='UtcActive'),
    utcCreate?: string(name='UtcCreate'),
    utcOnline?: string(name='UtcOnline'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDetailResponseBody(name='body'),
}

async function queryDeviceDetail(request: QueryDeviceDetailRequest): QueryDeviceDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDistributeDetailRequest {
  jobId: string(name='JobId', position='Query'),
}

model QueryDeviceDistributeDetailResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  file?: string(name='File'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceDistributeDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDistributeDetailResponseBody(name='body'),
}

async function queryDeviceDistributeDetail(request: QueryDeviceDistributeDetailRequest): QueryDeviceDistributeDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDistributeDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceDistributeJobRequest {
  jobId: string(name='JobId', position='Query'),
}

model QueryDeviceDistributeJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    gmtCreate?: long(name='GmtCreate'),
    jobId?: string(name='JobId'),
    productKey?: string(name='ProductKey'),
    sourceInstanceId?: string(name='SourceInstanceId'),
    sourceUid?: string(name='SourceUid'),
    status?: int32(name='Status'),
    strategy?: int32(name='Strategy'),
    targetInstanceConfigs?: {
      targetInstanceConfigs?: [ 
      {
        targetInstanceId?: string(name='TargetInstanceId'),
      }
    ](name='targetInstanceConfigs')
    }(name='TargetInstanceConfigs'),
    targetUid?: string(name='TargetUid'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDistributeJobResponseBody(name='body'),
}

async function queryDeviceDistributeJob(request: QueryDeviceDistributeJobRequest): QueryDeviceDistributeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceDistributeJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceEventDataRequest {
  asc?: int32(name='Asc', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  eventType?: string(name='EventType', position='Query'),
  identifier?: string(name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QueryDeviceEventDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData'),
        time?: string(name='Time'),
      }
    ](name='EventInfo')
    }(name='List'),
    nextTime?: long(name='NextTime'),
    nextValid?: boolean(name='NextValid'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceEventDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventDataResponseBody(name='body'),
}

async function queryDeviceEventData(request: QueryDeviceEventDataRequest): QueryDeviceEventDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceEventData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceFileRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  fileId: string(name='FileId', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceFileResponseBody = {
  code?: string(name='Code'),
  data?: {
    downloadUrl?: string(name='DownloadUrl'),
    fileId?: string(name='FileId'),
    name?: string(name='Name'),
    size?: string(name='Size'),
    utcCreatedOn?: string(name='UtcCreatedOn'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileResponseBody(name='body'),
}

async function queryDeviceFile(request: QueryDeviceFileRequest): QueryDeviceFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceFile', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceFileListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceFileListResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    fileSummary?: [ 
    {
      fileId?: string(name='FileId'),
      name?: string(name='Name'),
      size?: string(name='Size'),
      utcCreatedOn?: string(name='UtcCreatedOn'),
    }
  ](name='FileSummary')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryDeviceFileListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileListResponseBody(name='body'),
}

async function queryDeviceFileList(request: QueryDeviceFileListRequest): QueryDeviceFileListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceFileList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupByDeviceRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryDeviceGroupByDeviceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  groupInfos?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      utcCreate?: string(name='UtcCreate'),
    }
  ](name='GroupInfo')
  }(name='GroupInfos'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceGroupByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupByDeviceResponseBody(name='body'),
}

async function queryDeviceGroupByDevice(request: QueryDeviceGroupByDeviceRequest): QueryDeviceGroupByDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupByDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupByTagsRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  tag?: [ 
    {
      tagKey: string(name='TagKey'),
      tagValue: string(name='TagValue'),
    }
  ](name='Tag', position='Query'),
}

model QueryDeviceGroupByTagsResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceGroup?: [ 
    {
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
    }
  ](name='DeviceGroup')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryDeviceGroupByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupByTagsResponseBody(name='body'),
}

async function queryDeviceGroupByTags(request: QueryDeviceGroupByTagsRequest): QueryDeviceGroupByTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupByTags', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupInfoRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryDeviceGroupInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceActive?: int32(name='DeviceActive'),
    deviceCount?: int32(name='DeviceCount'),
    deviceOnline?: int32(name='DeviceOnline'),
    groupDesc?: string(name='GroupDesc'),
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupInfoResponseBody(name='body'),
}

async function queryDeviceGroupInfo(request: QueryDeviceGroupInfoRequest): QueryDeviceGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  superGroupId?: string(name='SuperGroupId', position='Query'),
}

model QueryDeviceGroupListResponseBody = {
  code?: string(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      utcCreate?: string(name='UtcCreate'),
    }
  ](name='GroupInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryDeviceGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupListResponseBody(name='body'),
}

async function queryDeviceGroupList(request: QueryDeviceGroupListRequest): QueryDeviceGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceGroupTagListRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryDeviceGroupTagListResponseBody = {
  code?: string(name='Code'),
  data?: {
    groupTagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='GroupTagInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceGroupTagListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupTagListResponseBody(name='body'),
}

async function queryDeviceGroupTagList(request: QueryDeviceGroupTagListRequest): QueryDeviceGroupTagListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceGroupTagList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceInfoRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
    iotId?: string(name='IotId'),
    nickname?: string(name='Nickname'),
    productKey?: string(name='ProductKey'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceInfoResponseBody(name='body'),
}

async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceListByDeviceGroupRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryDeviceListByDeviceGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      productKey?: string(name='ProductKey'),
      productName?: string(name='ProductName'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryDeviceListByDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceListByDeviceGroupResponseBody(name='body'),
}

async function queryDeviceListByDeviceGroup(request: QueryDeviceListByDeviceGroupRequest): QueryDeviceListByDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceListByDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalEventDataRequest {
  asc: int32(name='Asc', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  identifier: string(name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  nextPageToken?: string(name='NextPageToken', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QueryDeviceOriginalEventDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData'),
        time?: string(name='Time'),
      }
    ](name='EventInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken'),
    nextValid?: boolean(name='NextValid'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceOriginalEventDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalEventDataResponseBody(name='body'),
}

async function queryDeviceOriginalEventData(request: QueryDeviceOriginalEventDataRequest): QueryDeviceOriginalEventDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalEventData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalPropertyDataRequest {
  asc: int32(name='Asc', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  identifier: string(name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  nextPageToken?: string(name='NextPageToken', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QueryDeviceOriginalPropertyDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time'),
        value?: string(name='Value'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextValid?: boolean(name='NextValid'),
    nextPageToken?: string(name='nextPageToken'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceOriginalPropertyDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalPropertyDataResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyData(request: QueryDeviceOriginalPropertyDataRequest): QueryDeviceOriginalPropertyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalPropertyData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalPropertyStatusRequest {
  asc: int32(name='Asc', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  nextPageToken?: string(name='NextPageToken', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceOriginalPropertyStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier'),
        time?: long(name='Time'),
        value?: string(name='Value'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken'),
    nextValid?: boolean(name='NextValid'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceOriginalPropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalPropertyStatusResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyStatus(request: QueryDeviceOriginalPropertyStatusRequest): QueryDeviceOriginalPropertyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalPropertyStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceOriginalServiceDataRequest {
  asc: int32(name='Asc', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  identifier: string(name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  nextPageToken?: string(name='NextPageToken', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QueryDeviceOriginalServiceDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier'),
        inputData?: string(name='InputData'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData'),
        time?: string(name='Time'),
      }
    ](name='ServiceInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken'),
    nextValid?: boolean(name='NextValid'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceOriginalServiceDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalServiceDataResponseBody(name='body'),
}

async function queryDeviceOriginalServiceData(request: QueryDeviceOriginalServiceDataRequest): QueryDeviceOriginalServiceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceOriginalServiceData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDevicePropResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  props?: string(name='Props'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropResponseBody(name='body'),
}

async function queryDeviceProp(request: QueryDevicePropRequest): QueryDevicePropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceProp', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropertiesDataRequest {
  asc: int32(name='Asc', position='Query'),
  deviceName: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  identifier: [ string ](name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QueryDevicePropertiesDataResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  nextTime?: long(name='NextTime'),
  nextValid?: boolean(name='NextValid'),
  propertyDataInfos?: {
    propertyDataInfo?: [ 
    {
      identifier?: string(name='Identifier'),
      list?: {
        propertyInfo?: [ 
        {
          time?: long(name='Time'),
          value?: string(name='Value'),
        }
      ](name='PropertyInfo')
      }(name='List'),
    }
  ](name='PropertyDataInfo')
  }(name='PropertyDataInfos'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePropertiesDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertiesDataResponseBody(name='body'),
}

async function queryDevicePropertiesData(request: QueryDevicePropertiesDataRequest): QueryDevicePropertiesDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePropertiesData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropertyDataRequest {
  asc: int32(name='Asc', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  identifier: string(name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QueryDevicePropertyDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time'),
        value?: string(name='Value'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextTime?: long(name='NextTime'),
    nextValid?: boolean(name='NextValid'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePropertyDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertyDataResponseBody(name='body'),
}

async function queryDevicePropertyData(request: QueryDevicePropertyDataRequest): QueryDevicePropertyDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePropertyData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDevicePropertyStatusRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDevicePropertyStatusResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      propertyStatusInfo?: [ 
      {
        dataType?: string(name='DataType'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        time?: string(name='Time'),
        unit?: string(name='Unit'),
        value?: string(name='Value'),
      }
    ](name='PropertyStatusInfo')
    }(name='List'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDevicePropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertyStatusResponseBody(name='body'),
}

async function queryDevicePropertyStatus(request: QueryDevicePropertyStatusRequest): QueryDevicePropertyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDevicePropertyStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceServiceDataRequest {
  asc?: int32(name='Asc', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  identifier?: string(name='Identifier', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QueryDeviceServiceDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier'),
        inputData?: string(name='InputData'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData'),
        time?: string(name='Time'),
      }
    ](name='ServiceInfo')
    }(name='List'),
    nextTime?: long(name='NextTime'),
    nextValid?: boolean(name='NextValid'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceServiceDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceServiceDataResponseBody(name='body'),
}

async function queryDeviceServiceData(request: QueryDeviceServiceDataRequest): QueryDeviceServiceDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceServiceData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDeviceStatisticsRequest {
  groupId?: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model QueryDeviceStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    activeCount?: long(name='activeCount'),
    deviceCount?: long(name='deviceCount'),
    onlineCount?: long(name='onlineCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceStatisticsResponseBody(name='body'),
}

async function queryDeviceStatistics(request: QueryDeviceStatisticsRequest): QueryDeviceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDeviceStatistics', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeDriverRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  driverName?: string(name='DriverName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  type: int32(name='Type', position='Query'),
}

model QueryEdgeDriverResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    driverList?: [ 
      {
        cpuArch?: string(name='CpuArch'),
        driverId?: string(name='DriverId'),
        driverName?: string(name='DriverName'),
        driverProtocol?: string(name='DriverProtocol'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        isBuiltIn?: boolean(name='IsBuiltIn'),
        runtime?: string(name='Runtime'),
        type?: int32(name='Type'),
      }
    ](name='DriverList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeDriverResponseBody(name='body'),
}

async function queryEdgeDriver(request: QueryEdgeDriverRequest): QueryEdgeDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeDriver', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeDriverVersionRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  driverVersion?: string(name='DriverVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  versionState?: int32(name='VersionState', position='Query'),
}

model QueryEdgeDriverVersionResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    driverVersionList?: [ 
      {
        argument?: string(name='Argument'),
        configCheckRule?: string(name='ConfigCheckRule'),
        containerConfig?: string(name='ContainerConfig'),
        description?: string(name='Description'),
        driverConfig?: string(name='DriverConfig'),
        driverId?: string(name='DriverId'),
        driverVersion?: string(name='DriverVersion'),
        edgeVersion?: string(name='EdgeVersion'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        sourceConfig?: string(name='SourceConfig'),
        versionState?: string(name='VersionState'),
      }
    ](name='DriverVersionList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeDriverVersionResponseBody(name='body'),
}

async function queryEdgeDriverVersion(request: QueryEdgeDriverVersionRequest): QueryEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    instanceList?: [ 
      {
        bizEnable?: boolean(name='BizEnable'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        instanceId?: string(name='InstanceId'),
        latestDeploymentStatus?: int32(name='LatestDeploymentStatus'),
        latestDeploymentType?: string(name='LatestDeploymentType'),
        name?: string(name='Name'),
        roleArn?: string(name='RoleArn'),
        roleAttachTime?: string(name='RoleAttachTime'),
        roleAttachTimestamp?: long(name='RoleAttachTimestamp'),
        roleName?: string(name='RoleName'),
        spec?: int32(name='Spec'),
        tags?: string(name='Tags'),
        type?: int32(name='Type'),
      }
    ](name='InstanceList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceResponseBody(name='body'),
}

async function queryEdgeInstance(request: QueryEdgeInstanceRequest): QueryEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceChannelRequest {
  channelName?: string(name='ChannelName', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryEdgeInstanceChannelResponseBody = {
  code?: string(name='Code'),
  data?: {
    channelList?: {
      channel?: [ 
      {
        channelId?: string(name='ChannelId'),
        channelName?: string(name='ChannelName'),
        configList?: {
          config?: [ 
          {
            configId?: string(name='ConfigId'),
            content?: string(name='Content'),
            format?: string(name='Format'),
            key?: string(name='Key'),
          }
        ](name='Config')
        }(name='ConfigList'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
      }
    ](name='Channel')
    }(name='ChannelList'),
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceChannelResponseBody(name='body'),
}

async function queryEdgeInstanceChannel(request: QueryEdgeInstanceChannelRequest): QueryEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceDeviceRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryEdgeInstanceDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    deviceList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        driverId?: string(name='DriverId'),
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
      }
    ](name='DeviceList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDeviceResponseBody(name='body'),
}

async function queryEdgeInstanceDevice(request: QueryEdgeInstanceDeviceRequest): QueryEdgeInstanceDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceDeviceByDriverRequest {
  channelId?: string(name='ChannelId', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryEdgeInstanceDeviceByDriverResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    deviceList?: [ 
      {
        iotId?: string(name='IotId'),
      }
    ](name='DeviceList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceDeviceByDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDeviceByDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDeviceByDriver(request: QueryEdgeInstanceDeviceByDriverRequest): QueryEdgeInstanceDeviceByDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceDeviceByDriver', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceDriverRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryEdgeInstanceDriverResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    driverList?: [ 
      {
        driverId?: string(name='DriverId'),
        driverVersion?: string(name='DriverVersion'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        orderId?: string(name='OrderId'),
      }
    ](name='DriverList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDriver(request: QueryEdgeInstanceDriverRequest): QueryEdgeInstanceDriverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceDriver', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceGatewayRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  gatewayList?: [ 
    {
      deviceName?: string(name='DeviceName'),
      edgeVersion?: string(name='EdgeVersion'),
      iotId?: string(name='IotId'),
      productKey?: string(name='ProductKey'),
    }
  ](name='GatewayList'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceGatewayResponseBody(name='body'),
}

async function queryEdgeInstanceGateway(request: QueryEdgeInstanceGatewayRequest): QueryEdgeInstanceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceGateway', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceHistoricDeploymentRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model QueryEdgeInstanceHistoricDeploymentResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    deploymentList?: [ 
      {
        deploymentId?: string(name='DeploymentId'),
        description?: string(name='Description'),
        gmtCompleted?: string(name='GmtCompleted'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        status?: int32(name='Status'),
        type?: string(name='Type'),
      }
    ](name='DeploymentList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceHistoricDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceHistoricDeploymentResponseBody(name='body'),
}

async function queryEdgeInstanceHistoricDeployment(request: QueryEdgeInstanceHistoricDeploymentRequest): QueryEdgeInstanceHistoricDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceHistoricDeployment', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceMessageRoutingRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    messageRouteList?: {
      messageRoute?: [ 
      {
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        name?: string(name='Name'),
        routeContext?: {
          qos?: string(name='Qos'),
          sourceApplicationName?: string(name='SourceApplicationName'),
          sourceFcFunctionName?: string(name='SourceFcFunctionName'),
          sourceFcServiceName?: string(name='SourceFcServiceName'),
          targetApplicationName?: string(name='TargetApplicationName'),
          targetFcFunctionName?: string(name='TargetFcFunctionName'),
          targetFcServiceName?: string(name='TargetFcServiceName'),
        }(name='RouteContext'),
        routeId?: int32(name='RouteId'),
        sourceData?: string(name='SourceData'),
        sourceType?: string(name='SourceType'),
        targetData?: string(name='TargetData'),
        targetType?: string(name='TargetType'),
        topicFilter?: string(name='TopicFilter'),
      }
    ](name='MessageRoute')
    }(name='MessageRouteList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function queryEdgeInstanceMessageRouting(request: QueryEdgeInstanceMessageRoutingRequest): QueryEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model QueryEdgeInstanceSceneRuleRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
}

model QueryEdgeInstanceSceneRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate'),
        isExisted?: int32(name='IsExisted'),
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        status?: int32(name='Status'),
      }
    ](name='RuleList'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceSceneRuleResponseBody(name='body'),
}

async function queryEdgeInstanceSceneRule(request: QueryEdgeInstanceSceneRuleRequest): QueryEdgeInstanceSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEdgeInstanceSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model QueryJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model QueryJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    description?: string(name='Description'),
    jobDocument?: string(name='JobDocument'),
    jobFile?: {
      fileUrl?: string(name='FileUrl'),
      sign?: string(name='Sign'),
      signMethod?: string(name='SignMethod'),
    }(name='JobFile'),
    jobId?: string(name='JobId'),
    jobName?: string(name='JobName'),
    rolloutConfig?: {
      maximumPerMinute?: int32(name='MaximumPerMinute'),
    }(name='RolloutConfig'),
    scheduledTime?: long(name='ScheduledTime'),
    status?: string(name='Status'),
    targetConfig?: {
      targetDevices?: {
        targetDevices?: [ 
        {
          deviceName?: string(name='DeviceName'),
          productKey?: string(name='ProductKey'),
        }
      ](name='targetDevices')
      }(name='TargetDevices'),
      targetGroup?: string(name='TargetGroup'),
      targetProduct?: string(name='TargetProduct'),
      targetType?: string(name='TargetType'),
    }(name='TargetConfig'),
    timeoutConfig?: {
      inProgressTimeoutInMinutes?: int32(name='InProgressTimeoutInMinutes'),
    }(name='TimeoutConfig'),
    type?: string(name='Type'),
    utcCreate?: string(name='UtcCreate'),
    utcModified?: string(name='UtcModified'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobResponseBody(name='body'),
}

async function queryJob(request: QueryJobRequest): QueryJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryJobStatisticsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model QueryJobStatisticsResponseBody = {
  code?: string(name='Code'),
  data?: {
    cancelled?: int32(name='Cancelled'),
    failed?: int32(name='Failed'),
    inProgress?: int32(name='InProgress'),
    queued?: int32(name='Queued'),
    rejected?: int32(name='Rejected'),
    sent?: int32(name='Sent'),
    succeeded?: int32(name='Succeeded'),
    timeOut?: int32(name='TimeOut'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryJobStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobStatisticsResponseBody(name='body'),
}

async function queryJobStatistics(request: QueryJobStatisticsRequest): QueryJobStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryJobStatistics', 'GET', '/', 'json', false, 'json', request);
}

model QueryLoRaJoinPermissionsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryLoRaJoinPermissionsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  joinPermissions?: {
    joinPermission?: [ 
    {
      classMode?: string(name='ClassMode'),
      enabled?: boolean(name='Enabled'),
      joinPermissionId?: string(name='JoinPermissionId'),
      joinPermissionName?: string(name='JoinPermissionName'),
      joinPermissionType?: string(name='JoinPermissionType'),
      ownerAliyunPk?: string(name='OwnerAliyunPk'),
    }
  ](name='JoinPermission')
  }(name='JoinPermissions'),
  productKey?: string(name='ProductKey'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryLoRaJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLoRaJoinPermissionsResponseBody(name='body'),
}

async function queryLoRaJoinPermissions(request: QueryLoRaJoinPermissionsRequest): QueryLoRaJoinPermissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLoRaJoinPermissions', 'POST', '/', 'json', false, 'json', request);
}

model QueryMessageInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  uniMsgId: string(name='UniMsgId', position='Query'),
}

model QueryMessageInfoResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  message?: {
    generateTime?: long(name='GenerateTime'),
    messageContent?: string(name='MessageContent'),
    topicFullName?: string(name='TopicFullName'),
    uniMsgId?: string(name='UniMsgId'),
    userProperties?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='UserProperties'),
  }(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMessageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMessageInfoResponseBody(name='body'),
}

async function queryMessageInfo(request: QueryMessageInfoRequest): QueryMessageInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMessageInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryOTAFirmwareRequest {
  firmwareId: string(name='FirmwareId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QueryOTAFirmwareResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  firmwareInfo?: {
    destVersion?: string(name='DestVersion'),
    firmwareDesc?: string(name='FirmwareDesc'),
    firmwareId?: string(name='FirmwareId'),
    firmwareName?: string(name='FirmwareName'),
    firmwareSign?: string(name='FirmwareSign'),
    firmwareSize?: int32(name='FirmwareSize'),
    firmwareUrl?: string(name='FirmwareUrl'),
    moduleName?: string(name='ModuleName'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    signMethod?: string(name='SignMethod'),
    srcVersion?: string(name='SrcVersion'),
    status?: int32(name='Status'),
    type?: int32(name='Type'),
    udi?: string(name='Udi'),
    utcCreate?: string(name='UtcCreate'),
    utcModified?: string(name='UtcModified'),
    verifyProgress?: int32(name='VerifyProgress'),
  }(name='FirmwareInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOTAFirmwareResponseBody(name='body'),
}

async function queryOTAFirmware(request: QueryOTAFirmwareRequest): QueryOTAFirmwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOTAFirmware', 'POST', '/', 'json', false, 'json', request);
}

model QueryOTAJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model QueryOTAJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    destVersion?: string(name='DestVersion'),
    dynamicMode?: int32(name='DynamicMode'),
    firmwareId?: string(name='FirmwareId'),
    grayPercent?: string(name='GrayPercent'),
    jobDesc?: string(name='JobDesc'),
    jobId?: string(name='JobId'),
    jobStatus?: string(name='JobStatus'),
    jobType?: string(name='JobType'),
    maximumPerMinute?: int32(name='MaximumPerMinute'),
    name?: string(name='Name'),
    needConfirm?: boolean(name='NeedConfirm'),
    needPush?: boolean(name='NeedPush'),
    overwriteMode?: int32(name='OverwriteMode'),
    productKey?: string(name='ProductKey'),
    retryCount?: int32(name='RetryCount'),
    retryInterval?: int32(name='RetryInterval'),
    selectionType?: string(name='SelectionType'),
    srcVersions?: {
      srcVersion?: [ string ](name='SrcVersion')
    }(name='SrcVersions'),
    tags?: {
      otaTagDTO?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='OtaTagDTO')
    }(name='Tags'),
    targetSelection?: string(name='TargetSelection'),
    timeoutInMinutes?: int32(name='TimeoutInMinutes'),
    utcCreate?: string(name='UtcCreate'),
    utcEndTime?: string(name='UtcEndTime'),
    utcModified?: string(name='UtcModified'),
    utcScheduleFinishTime?: string(name='UtcScheduleFinishTime'),
    utcScheduleTime?: string(name='UtcScheduleTime'),
    utcStartTime?: string(name='UtcStartTime'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryOTAJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOTAJobResponseBody(name='body'),
}

async function queryOTAJob(request: QueryOTAJobRequest): QueryOTAJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOTAJob', 'POST', '/', 'json', false, 'json', request);
}

model QueryPageByApplyIdRequest {
  applyId: long(name='ApplyId', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryPageByApplyIdResponseBody = {
  applyDeviceList?: {
    applyDeviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId'),
      deviceName?: string(name='DeviceName'),
      deviceSecret?: string(name='DeviceSecret'),
      iotId?: string(name='IotId'),
    }
  ](name='ApplyDeviceInfo')
  }(name='ApplyDeviceList'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryPageByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPageByApplyIdResponseBody(name='body'),
}

async function queryPageByApplyId(request: QueryPageByApplyIdRequest): QueryPageByApplyIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPageByApplyId', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryProductResponseBody = {
  code?: string(name='Code'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode'),
    authType?: string(name='AuthType'),
    categoryKey?: string(name='CategoryKey'),
    categoryName?: string(name='CategoryName'),
    dataFormat?: int32(name='DataFormat'),
    description?: string(name='Description'),
    deviceCount?: int32(name='DeviceCount'),
    gmtCreate?: long(name='GmtCreate'),
    id2?: boolean(name='Id2'),
    netType?: int32(name='NetType'),
    nodeType?: int32(name='NodeType'),
    owner?: boolean(name='Owner'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    productSecret?: string(name='ProductSecret'),
    productStatus?: string(name='ProductStatus'),
    protocolType?: string(name='ProtocolType'),
    validateType?: int32(name='ValidateType'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryProductResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductResponseBody(name='body'),
}

async function queryProduct(request: QueryProductRequest): QueryProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProduct', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryProductCertInfoResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  productCertInfo?: {
    issueModel?: int32(name='IssueModel'),
  }(name='ProductCertInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductCertInfoResponseBody(name='body'),
}

async function queryProductCertInfo(request: QueryProductCertInfoRequest): QueryProductCertInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductCertInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductListRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', position='Query'),
  currentPage: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: {
      productInfo?: [ 
      {
        authType?: string(name='AuthType'),
        dataFormat?: int32(name='DataFormat'),
        description?: string(name='Description'),
        deviceCount?: int32(name='DeviceCount'),
        gmtCreate?: long(name='GmtCreate'),
        nodeType?: int32(name='NodeType'),
        productKey?: string(name='ProductKey'),
        productName?: string(name='ProductName'),
      }
    ](name='ProductInfo')
    }(name='List'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductList', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryProductTopicResponseBody = {
  code?: string(name='Code'),
  data?: {
    productTopicInfo?: [ 
    {
      desc?: string(name='Desc'),
      id?: string(name='Id'),
      operation?: string(name='Operation'),
      productKey?: string(name='ProductKey'),
      topicShortName?: string(name='TopicShortName'),
    }
  ](name='ProductTopicInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductTopicResponseBody(name='body'),
}

async function queryProductTopic(request: QueryProductTopicRequest): QueryProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model QuerySceneRuleRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
}

model QuerySceneRuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        ruleDescription?: string(name='RuleDescription'),
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        ruleStatus?: int32(name='RuleStatus'),
      }
    ](name='RuleList'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySceneRuleResponseBody(name='body'),
}

async function querySceneRule(request: QuerySceneRuleRequest): QuerySceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySceneRule', 'POST', '/', 'json', false, 'json', request);
}

model QuerySolutionDeviceGroupPageRequest {
  fuzzyGroupName?: string(name='FuzzyGroupName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageId: int32(name='PageId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  projectCode: string(name='ProjectCode', position='Query'),
}

model QuerySolutionDeviceGroupPageResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      itemName?: [ 
      {
        deviceCount?: long(name='DeviceCount'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        groupDesc?: string(name='GroupDesc'),
        groupId?: string(name='GroupId'),
        groupName?: string(name='GroupName'),
      }
    ](name='itemName')
    }(name='List'),
    pageId?: int32(name='PageId'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySolutionDeviceGroupPageResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySolutionDeviceGroupPageResponseBody(name='body'),
}

async function querySolutionDeviceGroupPage(request: QuerySolutionDeviceGroupPageRequest): QuerySolutionDeviceGroupPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySolutionDeviceGroupPage', 'POST', '/', 'json', false, 'json', request);
}

model QuerySpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  speechCode: string(name='SpeechCode', position='Body'),
}

model QuerySpeechResponseBody = {
  code?: string(name='Code'),
  data?: {
    audioFormat?: string(name='AudioFormat'),
    bizCode?: string(name='BizCode'),
    speechCode?: string(name='SpeechCode'),
    speechRate?: int32(name='SpeechRate'),
    speechType?: string(name='SpeechType'),
    text?: string(name='Text'),
    voice?: string(name='Voice'),
    volume?: int32(name='Volume'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySpeechResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechResponseBody(name='body'),
}

async function querySpeech(request: QuerySpeechRequest): QuerySpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeech', 'POST', '/', 'json', false, 'json', request);
}

model QuerySpeechListRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  pageId?: int32(name='PageId', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  projectCode: string(name='ProjectCode', position='Body'),
}

model QuerySpeechListResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      items?: [ 
      {
        bizCode?: string(name='BizCode'),
        speechCode?: string(name='SpeechCode'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode'),
            speechCode?: string(name='SpeechCode'),
            text?: string(name='Text'),
            voice?: string(name='Voice'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType'),
        text?: string(name='Text'),
        voice?: string(name='Voice'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySpeechListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechListResponseBody(name='body'),
}

async function querySpeechList(request: QuerySpeechListRequest): QuerySpeechListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySpeechPushJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  jobCode?: string(name='JobCode', position='Query'),
  pageId?: int32(name='PageId', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  projectCode: string(name='ProjectCode', position='Body'),
  pushMode?: string(name='PushMode', position='Body'),
  statusList?: [ string ](name='StatusList', position='Body'),
}

model QuerySpeechPushJobResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      items?: [ 
      {
        code?: string(name='Code'),
        createdTime?: long(name='CreatedTime'),
        deviceName?: string(name='DeviceName'),
        expiredTime?: long(name='ExpiredTime'),
        failDeviceNum?: int32(name='FailDeviceNum'),
        groupId?: string(name='GroupId'),
        groupName?: string(name='GroupName'),
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
        pushMode?: string(name='PushMode'),
        runningDeviceNum?: int32(name='RunningDeviceNum'),
        speechNum?: int32(name='SpeechNum'),
        speechStatus?: boolean(name='SpeechStatus'),
        status?: string(name='Status'),
        successDeviceNum?: int32(name='SuccessDeviceNum'),
        totalDeviceNum?: int32(name='TotalDeviceNum'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySpeechPushJobResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechPushJobResponseBody(name='body'),
}

async function querySpeechPushJob(request: QuerySpeechPushJobRequest): QuerySpeechPushJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechPushJob', 'POST', '/', 'json', false, 'json', request);
}

model QuerySpeechPushJobDeviceRequest {
  deviceName?: string(name='DeviceName', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  jobCode: string(name='JobCode', position='Body'),
  pageId?: int32(name='PageId', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  status?: string(name='Status', position='Body'),
}

model QuerySpeechPushJobDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
        gmtModified?: long(name='GmtModified'),
        status?: string(name='Status'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySpeechPushJobDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechPushJobDeviceResponseBody(name='body'),
}

async function querySpeechPushJobDevice(request: QuerySpeechPushJobDeviceRequest): QuerySpeechPushJobDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechPushJobDevice', 'POST', '/', 'json', false, 'json', request);
}

model QuerySpeechPushJobSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  jobCode: string(name='JobCode', position='Body'),
  pageId?: int32(name='PageId', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model QuerySpeechPushJobSpeechResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      items?: [ 
      {
        bizCode?: string(name='BizCode'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode'),
            text?: string(name='Text'),
            voice?: string(name='Voice'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType'),
        text?: string(name='Text'),
        voice?: string(name='Voice'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySpeechPushJobSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySpeechPushJobSpeechResponseBody(name='body'),
}

async function querySpeechPushJobSpeech(request: QuerySpeechPushJobSpeechRequest): QuerySpeechPushJobSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySpeechPushJobSpeech', 'POST', '/', 'json', false, 'json', request);
}

model QueryStudioAppDomainListOpenRequest {
  appId: string(name='AppId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model QueryStudioAppDomainListOpenResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      domainInfo?: [ 
      {
        appId?: string(name='AppId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        host?: string(name='Host'),
        id?: int32(name='Id'),
        isBeian?: string(name='IsBeian'),
        projectId?: string(name='ProjectId'),
        protocol?: string(name='Protocol'),
        tenantId?: string(name='TenantId'),
      }
    ](name='DomainInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStudioAppDomainListOpenResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioAppDomainListOpenResponseBody(name='body'),
}

async function queryStudioAppDomainListOpen(request: QueryStudioAppDomainListOpenRequest): QueryStudioAppDomainListOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioAppDomainListOpen', 'POST', '/', 'json', false, 'json', request);
}

model QueryStudioAppListRequest {
  fuzzyName?: string(name='FuzzyName', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  pageNo?: int32(name='PageNo', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
  types: [ string ](name='Types', position='Body'),
}

model QueryStudioAppListResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      appInfo?: [ 
      {
        appId?: string(name='AppId'),
        appKey?: string(name='AppKey'),
        appSecret?: string(name='AppSecret'),
        description?: string(name='Description'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        gmtRelease?: string(name='GmtRelease'),
        name?: string(name='Name'),
        projectId?: string(name='ProjectId'),
        type?: string(name='Type'),
      }
    ](name='AppInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStudioAppListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioAppListResponseBody(name='body'),
}

async function queryStudioAppList(request: QueryStudioAppListRequest): QueryStudioAppListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioAppList', 'POST', '/', 'json', false, 'json', request);
}

model QueryStudioAppPageListOpenRequest {
  appId: string(name='AppId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  isRelease?: boolean(name='IsRelease', position='Body'),
  pageNo?: int32(name='PageNo', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model QueryStudioAppPageListOpenResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      pageInfo?: [ 
      {
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        id?: int32(name='Id'),
        isHidden?: int32(name='IsHidden'),
        isHome?: int32(name='IsHome'),
        isLoginPage?: int32(name='IsLoginPage'),
        name?: string(name='Name'),
        pageId?: string(name='PageId'),
        path?: string(name='Path'),
      }
    ](name='PageInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStudioAppPageListOpenResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioAppPageListOpenResponseBody(name='body'),
}

async function queryStudioAppPageListOpen(request: QueryStudioAppPageListOpenRequest): QueryStudioAppPageListOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioAppPageListOpen', 'POST', '/', 'json', false, 'json', request);
}

model QueryStudioProjectListRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  name?: string(name='Name', position='Body'),
  pageNo?: int32(name='PageNo', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
}

model QueryStudioProjectListResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: {
      projectInfo?: [ 
      {
        description?: string(name='Description'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        name?: string(name='Name'),
        projectId?: string(name='ProjectId'),
      }
    ](name='ProjectInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryStudioProjectListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryStudioProjectListResponseBody(name='body'),
}

async function queryStudioProjectList(request: QueryStudioProjectListRequest): QueryStudioProjectListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryStudioProjectList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  type: string(name='Type', position='Query'),
}

model QuerySubscribeRelationResponseBody = {
  code?: string(name='Code'),
  consumerGroupIds?: [ string ](name='ConsumerGroupIds'),
  deviceDataFlag?: boolean(name='DeviceDataFlag'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag'),
  deviceTagFlag?: boolean(name='DeviceTagFlag'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag'),
  errorMessage?: string(name='ErrorMessage'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag'),
  mnsConfiguration?: string(name='MnsConfiguration'),
  otaEventFlag?: boolean(name='OtaEventFlag'),
  otaJobFlag?: boolean(name='OtaJobFlag'),
  otaVersionFlag?: boolean(name='OtaVersionFlag'),
  productKey?: string(name='ProductKey'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag'),
  type?: string(name='Type'),
}

model QuerySubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubscribeRelationResponseBody(name='body'),
}

async function querySubscribeRelation(request: QuerySubscribeRelationRequest): QuerySubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model QuerySummarySceneRuleLogRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  endTime: int32(name='EndTime', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  startTime: int32(name='StartTime', position='Query'),
  status: string(name='Status', position='Query'),
}

model QuerySummarySceneRuleLogResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    logList?: {
      logInfo?: [ 
      {
        logTime?: int32(name='LogTime'),
        result?: string(name='Result'),
        traceId?: string(name='TraceId'),
      }
    ](name='LogInfo')
    }(name='LogList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySummarySceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySummarySceneRuleLogResponseBody(name='body'),
}

async function querySummarySceneRuleLog(request: QuerySummarySceneRuleLogRequest): QuerySummarySceneRuleLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySummarySceneRuleLog', 'POST', '/', 'json', false, 'json', request);
}

model QuerySuperDeviceGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model QuerySuperDeviceGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
    }
  ](name='GroupInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySuperDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySuperDeviceGroupResponseBody(name='body'),
}

async function querySuperDeviceGroup(request: QuerySuperDeviceGroupRequest): QuerySuperDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySuperDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model QueryTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  taskId: string(name='TaskId', position='Query'),
}

model QueryTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceName?: string(name='DeviceName'),
    iotId?: string(name='IotId'),
    jobId?: string(name='JobId'),
    jobName?: string(name='JobName'),
    message?: string(name='Message'),
    productKey?: string(name='ProductKey'),
    progress?: string(name='Progress'),
    status?: string(name='Status'),
    statusDetail?: string(name='StatusDetail'),
    taskId?: string(name='TaskId'),
    utcModified?: string(name='UtcModified'),
    utcQueueTime?: string(name='UtcQueueTime'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskResponseBody(name='body'),
}

async function queryTask(request: QueryTaskRequest): QueryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTask', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  modelVersion?: string(name='ModelVersion', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model QueryThingModelResponseBody = {
  code?: string(name='Code'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelResponseBody(name='body'),
}

async function queryThingModel(request: QueryThingModelRequest): QueryThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModel', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelExtendConfigRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  modelVersion?: string(name='ModelVersion', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model QueryThingModelExtendConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    configuration?: string(name='Configuration'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryThingModelExtendConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelExtendConfigResponseBody(name='body'),
}

async function queryThingModelExtendConfig(request: QueryThingModelExtendConfigRequest): QueryThingModelExtendConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModelExtendConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelExtendConfigPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  modelVersion?: string(name='ModelVersion', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model QueryThingModelExtendConfigPublishedResponseBody = {
  code?: string(name='Code'),
  data?: {
    configuration?: string(name='Configuration'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryThingModelExtendConfigPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelExtendConfigPublishedResponseBody(name='body'),
}

async function queryThingModelExtendConfigPublished(request: QueryThingModelExtendConfigPublishedRequest): QueryThingModelExtendConfigPublishedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModelExtendConfigPublished', 'POST', '/', 'json', false, 'json', request);
}

model QueryThingModelPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  modelVersion?: string(name='ModelVersion', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model QueryThingModelPublishedResponseBody = {
  code?: string(name='Code'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryThingModelPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelPublishedResponseBody(name='body'),
}

async function queryThingModelPublished(request: QueryThingModelPublishedRequest): QueryThingModelPublishedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryThingModelPublished', 'POST', '/', 'json', false, 'json', request);
}

model QueryTopicReverseRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  topic: string(name='Topic', position='Query'),
}

model QueryTopicReverseRouteTableResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  srcTopics?: {
    topic?: [ map[string]string ](name='Topic')
  }(name='SrcTopics'),
  success?: boolean(name='Success'),
}

model QueryTopicReverseRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTopicReverseRouteTableResponseBody(name='body'),
}

async function queryTopicReverseRouteTable(request: QueryTopicReverseRouteTableRequest): QueryTopicReverseRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTopicReverseRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model QueryTopicRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  topic: string(name='Topic', position='Query'),
}

model QueryTopicRouteTableResponseBody = {
  code?: string(name='Code'),
  dstTopics?: {
    topic?: [ map[string]string ](name='Topic')
  }(name='DstTopics'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTopicRouteTableResponseBody(name='body'),
}

async function queryTopicRouteTable(request: QueryTopicRouteTableRequest): QueryTopicRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTopicRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model RRpcRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  requestBase64Byte: string(name='RequestBase64Byte', position='Query'),
  timeout: int32(name='Timeout', position='Query'),
  topic?: string(name='Topic', position='Query'),
}

model RRpcResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId'),
  payloadBase64Byte?: string(name='PayloadBase64Byte'),
  requestId?: string(name='RequestId'),
  rrpcCode?: string(name='RrpcCode'),
  success?: boolean(name='Success'),
}

model RRpcResponse = {
  headers: map[string]string(name='headers'),
  body: RRpcResponseBody(name='body'),
}

async function rRpc(request: RRpcRequest): RRpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RRpc', 'POST', '/', 'json', false, 'json', request);
}

model RefreshDeviceTunnelSharePasswordRequest {
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model RefreshDeviceTunnelSharePasswordResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  password?: string(name='Password'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RefreshDeviceTunnelSharePasswordResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDeviceTunnelSharePasswordResponseBody(name='body'),
}

async function refreshDeviceTunnelSharePassword(request: RefreshDeviceTunnelSharePasswordRequest): RefreshDeviceTunnelSharePasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDeviceTunnelSharePassword', 'POST', '/', 'json', false, 'json', request);
}

model RefreshStudioAppTokenOpenRequest {
  appId: string(name='AppId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model RefreshStudioAppTokenOpenResponseBody = {
  code?: string(name='Code'),
  data?: {
    bizId?: string(name='BizId'),
    bizType?: string(name='BizType'),
    isEnable?: string(name='IsEnable'),
    token?: string(name='Token'),
    type?: string(name='Type'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RefreshStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshStudioAppTokenOpenResponseBody(name='body'),
}

async function refreshStudioAppTokenOpen(request: RefreshStudioAppTokenOpenRequest): RefreshStudioAppTokenOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshStudioAppTokenOpen', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDeviceRequest {
  appKey?: string(name='AppKey', position='Query'),
  devEui?: string(name='DevEui', position='Query'),
  deviceName?: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  joinEui?: string(name='JoinEui', position='Query'),
  loraNodeType?: string(name='LoraNodeType', position='Query'),
  nickname?: string(name='Nickname', position='Query'),
  pinCode?: string(name='PinCode', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code'),
  data?: {
    devEui?: string(name='DevEui'),
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
    iotId?: string(name='IotId'),
    joinEui?: string(name='JoinEui'),
    nickname?: string(name='Nickname'),
    productKey?: string(name='ProductKey'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDevice', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseEdgeDriverVersionRequest {
  driverId: string(name='DriverId', position='Query'),
  driverVersion: string(name='DriverVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model ReleaseEdgeDriverVersionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEdgeDriverVersionResponseBody(name='body'),
}

async function releaseEdgeDriverVersion(request: ReleaseEdgeDriverVersionRequest): ReleaseEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model ReleaseProductResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseProductResponseBody(name='body'),
}

async function releaseProduct(request: ReleaseProductRequest): ReleaseProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseProduct', 'POST', '/', 'json', false, 'json', request);
}

model RemoveThingTopoRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model RemoveThingTopoResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveThingTopoResponseBody(name='body'),
}

async function removeThingTopo(request: RemoveThingTopoRequest): RemoveThingTopoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveThingTopo', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceEdgeInstanceGatewayRequest {
  currentGatewayId: string(name='CurrentGatewayId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  newGatewayId: string(name='NewGatewayId', position='Query'),
}

model ReplaceEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReplaceEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceEdgeInstanceGatewayResponseBody(name='body'),
}

async function replaceEdgeInstanceGateway(request: ReplaceEdgeInstanceGatewayRequest): ReplaceEdgeInstanceGatewayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceEdgeInstanceGateway', 'POST', '/', 'json', false, 'json', request);
}

model RerunJobRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model RerunJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RerunJobResponse = {
  headers: map[string]string(name='headers'),
  body: RerunJobResponseBody(name='body'),
}

async function rerunJob(request: RerunJobRequest): RerunJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RerunJob', 'POST', '/', 'json', false, 'json', request);
}

model ResetConsumerGroupPositionRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model ResetConsumerGroupPositionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResetConsumerGroupPositionResponse = {
  headers: map[string]string(name='headers'),
  body: ResetConsumerGroupPositionResponseBody(name='body'),
}

async function resetConsumerGroupPosition(request: ResetConsumerGroupPositionRequest): ResetConsumerGroupPositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetConsumerGroupPosition', 'POST', '/', 'json', false, 'json', request);
}

model ResetThingRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model ResetThingResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResetThingResponse = {
  headers: map[string]string(name='headers'),
  body: ResetThingResponseBody(name='body'),
}

async function resetThing(request: ResetThingRequest): ResetThingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetThing', 'POST', '/', 'json', false, 'json', request);
}

model SaveDevicePropRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  props: string(name='Props', position='Query'),
}

model SaveDevicePropResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: SaveDevicePropResponseBody(name='body'),
}

async function saveDeviceProp(request: SaveDevicePropRequest): SaveDevicePropResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveDeviceProp', 'POST', '/', 'json', false, 'json', request);
}

model SetDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  items: string(name='Items', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  versions: string(name='Versions', position='Query'),
}

model SetDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code'),
  data?: {
    messageId?: string(name='MessageId'),
    versions?: string(name='Versions'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceDesiredPropertyResponseBody(name='body'),
}

async function setDeviceDesiredProperty(request: SetDeviceDesiredPropertyRequest): SetDeviceDesiredPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceDesiredProperty', 'POST', '/', 'json', false, 'json', request);
}

model SetDeviceGroupTagsRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  tagString?: string(name='TagString', position='Query'),
}

model SetDeviceGroupTagsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDeviceGroupTagsResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceGroupTagsResponseBody(name='body'),
}

async function setDeviceGroupTags(request: SetDeviceGroupTagsRequest): SetDeviceGroupTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceGroupTags', 'POST', '/', 'json', false, 'json', request);
}

model SetDevicePropertyRequest {
  deviceName?: string(name='DeviceName', position='Query'),
  iotId?: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  items: string(name='Items', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
}

model SetDevicePropertyResponseBody = {
  code?: string(name='Code'),
  data?: {
    messageId?: string(name='MessageId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicePropertyResponseBody(name='body'),
}

async function setDeviceProperty(request: SetDevicePropertyRequest): SetDevicePropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDeviceProperty', 'POST', '/', 'json', false, 'json', request);
}

model SetDevicesPropertyRequest {
  deviceName: [ string ](name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  items: string(name='Items', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model SetDevicesPropertyResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetDevicesPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicesPropertyResponseBody(name='body'),
}

async function setDevicesProperty(request: SetDevicesPropertyRequest): SetDevicesPropertyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDevicesProperty', 'POST', '/', 'json', false, 'json', request);
}

model SetEdgeInstanceDriverConfigsRequest {
  configs: [ 
    {
      content: string(name='Content'),
      format: string(name='Format'),
      key?: string(name='Key'),
    }
  ](name='Configs', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model SetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: SetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function setEdgeInstanceDriverConfigs(request: SetEdgeInstanceDriverConfigsRequest): SetEdgeInstanceDriverConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetEdgeInstanceDriverConfigs', 'POST', '/', 'json', false, 'json', request);
}

model SetProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  issueModel: int32(name='IssueModel', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model SetProductCertInfoResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetProductCertInfoResponseBody(name='body'),
}

async function setProductCertInfo(request: SetProductCertInfoRequest): SetProductCertInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetProductCertInfo', 'POST', '/', 'json', false, 'json', request);
}

model SetStudioProjectCooperationRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  status: string(name='Status', position='Body'),
}

model SetStudioProjectCooperationResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetStudioProjectCooperationResponse = {
  headers: map[string]string(name='headers'),
  body: SetStudioProjectCooperationResponseBody(name='body'),
}

async function setStudioProjectCooperation(request: SetStudioProjectCooperationRequest): SetStudioProjectCooperationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetStudioProjectCooperation', 'POST', '/', 'json', false, 'json', request);
}

model SetupStudioAppAuthModeOpenRequest {
  appId: string(name='AppId', position='Body'),
  authMode: int32(name='AuthMode', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectId: string(name='ProjectId', position='Body'),
}

model SetupStudioAppAuthModeOpenResponseBody = {
  code?: string(name='Code'),
  data?: {
    authMode?: int32(name='AuthMode'),
    tokenInfo?: {
      bizId?: string(name='BizId'),
      bizType?: string(name='BizType'),
      isEnable?: string(name='IsEnable'),
      token?: string(name='Token'),
      type?: string(name='Type'),
    }(name='TokenInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetupStudioAppAuthModeOpenResponse = {
  headers: map[string]string(name='headers'),
  body: SetupStudioAppAuthModeOpenResponseBody(name='body'),
}

async function setupStudioAppAuthModeOpen(request: SetupStudioAppAuthModeOpenRequest): SetupStudioAppAuthModeOpenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetupStudioAppAuthModeOpen', 'POST', '/', 'json', false, 'json', request);
}

model SpeechByCombinationRequest {
  combinationList: [ string ](name='CombinationList', position='Body'),
  deviceName?: string(name='DeviceName', position='Body'),
  iotId?: string(name='IotId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  productKey?: string(name='ProductKey', position='Body'),
}

model SpeechByCombinationResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  body: SpeechByCombinationResponseBody(name='body'),
}

async function speechByCombination(request: SpeechByCombinationRequest): SpeechByCombinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SpeechByCombination', 'POST', '/', 'json', false, 'json', request);
}

model StartCpuRequest {
  iotId: string(name='IotId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  targetValue: string(name='TargetValue', position='Query'),
}

model StartCpuResponseBody = {
  code?: string(name='Code'),
  data?: {
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    iotInstanceId?: string(name='IotInstanceId'),
    timeZone?: string(name='TimeZone'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartCpuResponse = {
  headers: map[string]string(name='headers'),
  body: StartCpuResponseBody(name='body'),
}

async function startCpu(request: StartCpuRequest): StartCpuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCpu', 'POST', '/', 'json', false, 'json', request);
}

model StartRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model StartRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartRuleResponse = {
  headers: map[string]string(name='headers'),
  body: StartRuleResponseBody(name='body'),
}

async function startRule(request: StartRuleRequest): StartRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRule', 'POST', '/', 'json', false, 'json', request);
}

model StopRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
}

model StopRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopRuleResponse = {
  headers: map[string]string(name='headers'),
  body: StopRuleResponseBody(name='body'),
}

async function stopRule(request: StopRuleRequest): StopRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopRule', 'POST', '/', 'json', false, 'json', request);
}

model SyncSpeechByCombinationRequest {
  combinationList: [ string ](name='CombinationList', position='Body'),
  deviceName?: string(name='DeviceName', position='Body'),
  iotId?: string(name='IotId', position='Body'),
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  productKey?: string(name='ProductKey', position='Body'),
}

model SyncSpeechByCombinationResponseBody = {
  code?: string(name='Code'),
  data?: {
    deviceErrorCode?: string(name='DeviceErrorCode'),
    deviceErrorMessage?: string(name='DeviceErrorMessage'),
    id?: string(name='Id'),
    maxRetryCount?: int32(name='MaxRetryCount'),
    retryCount?: int32(name='RetryCount'),
    success?: boolean(name='Success'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncSpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  body: SyncSpeechByCombinationResponseBody(name='body'),
}

async function syncSpeechByCombination(request: SyncSpeechByCombinationRequest): SyncSpeechByCombinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncSpeechByCombination', 'POST', '/', 'json', false, 'json', request);
}

model TestSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectCode: string(name='ProjectCode', position='Body'),
  speechRate?: int32(name='SpeechRate', position='Body'),
  speechType?: string(name='SpeechType', position='Body'),
  text?: string(name='Text', position='Body'),
  voice: string(name='Voice', position='Body'),
  volume?: int32(name='Volume', position='Body'),
}

model TestSpeechResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ string ](name='items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TestSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: TestSpeechResponseBody(name='body'),
}

async function testSpeech(request: TestSpeechRequest): TestSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestSpeech', 'POST', '/', 'json', false, 'json', request);
}

model TriggerSceneRuleRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model TriggerSceneRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TriggerSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerSceneRuleResponseBody(name='body'),
}

async function triggerSceneRule(request: TriggerSceneRuleRequest): TriggerSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model UnbindApplicationFromEdgeInstanceRequest {
  applicationId: string(name='ApplicationId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model UnbindApplicationFromEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindApplicationFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindApplicationFromEdgeInstanceResponseBody(name='body'),
}

async function unbindApplicationFromEdgeInstance(request: UnbindApplicationFromEdgeInstanceRequest): UnbindApplicationFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindApplicationFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnbindDriverFromEdgeInstanceRequest {
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model UnbindDriverFromEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindDriverFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDriverFromEdgeInstanceResponseBody(name='body'),
}

async function unbindDriverFromEdgeInstance(request: UnbindDriverFromEdgeInstanceRequest): UnbindDriverFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindDriverFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnbindRoleFromEdgeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model UnbindRoleFromEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindRoleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindRoleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindRoleFromEdgeInstance(request: UnbindRoleFromEdgeInstanceRequest): UnbindRoleFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindRoleFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UnbindSceneRuleFromEdgeInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
}

model UnbindSceneRuleFromEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindSceneRuleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindSceneRuleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindSceneRuleFromEdgeInstance(request: UnbindSceneRuleFromEdgeInstanceRequest): UnbindSceneRuleFromEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnbindSceneRuleFromEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConsumerGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  newGroupName: string(name='NewGroupName', position='Query'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConsumerGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model UpdateDeviceGroupResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceGroupResponseBody(name='body'),
}

async function updateDeviceGroup(request: UpdateDeviceGroupRequest): UpdateDeviceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDeviceShadowRequest {
  deltaUpdate?: boolean(name='DeltaUpdate', position='Query'),
  deviceName: string(name='DeviceName', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  shadowMessage: string(name='ShadowMessage', position='Query'),
}

model UpdateDeviceShadowResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceShadowResponseBody(name='body'),
}

async function updateDeviceShadow(request: UpdateDeviceShadowRequest): UpdateDeviceShadowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDeviceShadow', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeDriverVersionRequest {
  argument?: string(name='Argument', position='Query'),
  configCheckRule?: string(name='ConfigCheckRule', position='Query'),
  containerConfig?: string(name='ContainerConfig', position='Query'),
  description?: string(name='Description', position='Query'),
  driverConfig?: string(name='DriverConfig', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  driverVersion: string(name='DriverVersion', position='Query'),
  edgeVersion: string(name='EdgeVersion', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  sourceConfig?: string(name='SourceConfig', position='Query'),
}

model UpdateEdgeDriverVersionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeDriverVersionResponseBody(name='body'),
}

async function updateEdgeDriverVersion(request: UpdateEdgeDriverVersionRequest): UpdateEdgeDriverVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeDriverVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeInstanceRequest {
  bizEnable?: boolean(name='BizEnable', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name: string(name='Name', position='Query'),
  spec?: int32(name='Spec', position='Query'),
  tags?: string(name='Tags', position='Query'),
}

model UpdateEdgeInstanceResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceResponseBody(name='body'),
}

async function updateEdgeInstance(request: UpdateEdgeInstanceRequest): UpdateEdgeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeInstanceChannelRequest {
  channelId: string(name='ChannelId', position='Query'),
  channelName: string(name='ChannelName', position='Query'),
  configs: [ 
    {
      content: string(name='Content'),
      format: string(name='Format'),
      key?: string(name='Key'),
    }
  ](name='Configs', position='Query'),
  driverId: string(name='DriverId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
}

model UpdateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceChannelResponseBody(name='body'),
}

async function updateEdgeInstanceChannel(request: UpdateEdgeInstanceChannelRequest): UpdateEdgeInstanceChannelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeInstanceChannel', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEdgeInstanceMessageRoutingRequest {
  instanceId: string(name='InstanceId', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
  routeId: long(name='RouteId', position='Query'),
  sourceData?: string(name='SourceData', position='Query'),
  sourceType: string(name='SourceType', position='Query'),
  targetData?: string(name='TargetData', position='Query'),
  targetIotHubQos?: int32(name='TargetIotHubQos', position='Query'),
  targetType: string(name='TargetType', position='Query'),
  topicFilter?: string(name='TopicFilter', position='Query'),
}

model UpdateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function updateEdgeInstanceMessageRouting(request: UpdateEdgeInstanceMessageRoutingRequest): UpdateEdgeInstanceMessageRoutingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEdgeInstanceMessageRouting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateJobRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
  rolloutConfig?: string(name='RolloutConfig', position='Query'),
  timeoutConfig?: string(name='TimeoutConfig', position='Query'),
}

model UpdateJobResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateJob', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOTAModuleRequest {
  aliasName?: string(name='AliasName', position='Query'),
  desc?: string(name='Desc', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  moduleName: string(name='ModuleName', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
}

model UpdateOTAModuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOTAModuleResponseBody(name='body'),
}

async function updateOTAModule(request: UpdateOTAModuleRequest): UpdateOTAModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOTAModule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductRequest {
  description?: string(name='Description', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  productName: string(name='ProductName', position='Query'),
}

model UpdateProductResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProduct', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductFilterConfigRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  propertyTimestampFilter: boolean(name='PropertyTimestampFilter', position='Query'),
  propertyValueFilter: boolean(name='PropertyValueFilter', position='Query'),
}

model UpdateProductFilterConfigResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateProductFilterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductFilterConfigResponseBody(name='body'),
}

async function updateProductFilterConfig(request: UpdateProductFilterConfigRequest): UpdateProductFilterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProductFilterConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  productTag: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag', position='Query'),
}

model UpdateProductTagsResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductTagsResponseBody(name='body'),
}

async function updateProductTags(request: UpdateProductTagsRequest): UpdateProductTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProductTags', 'POST', '/', 'json', false, 'json', request);
}

model UpdateProductTopicRequest {
  desc?: string(name='Desc', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  operation: string(name='Operation', position='Query'),
  topicId: string(name='TopicId', position='Query'),
  topicShortName: string(name='TopicShortName', position='Query'),
}

model UpdateProductTopicResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductTopicResponseBody(name='body'),
}

async function updateProductTopic(request: UpdateProductTopicRequest): UpdateProductTopicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProductTopic', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
  productKey?: string(name='ProductKey', position='Query'),
  ruleDesc?: string(name='RuleDesc', position='Query'),
  ruleId: long(name='RuleId', position='Query'),
  select?: string(name='Select', position='Query'),
  shortTopic?: string(name='ShortTopic', position='Query'),
  topic?: string(name='Topic', position='Query'),
  topicType?: int32(name='TopicType', position='Query'),
  where?: string(name='Where', position='Query'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleResponseBody(name='body'),
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateRuleActionRequest {
  actionId: long(name='ActionId', position='Query'),
  configuration: string(name='Configuration', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  type: string(name='Type', position='Query'),
}

model UpdateRuleActionResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleActionResponseBody(name='body'),
}

async function updateRuleAction(request: UpdateRuleActionRequest): UpdateRuleActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateRuleAction', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  ruleContent?: string(name='RuleContent', position='Query'),
  ruleDescription?: string(name='RuleDescription', position='Query'),
  ruleId: string(name='RuleId', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
}

model UpdateSceneRuleResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSceneRuleResponseBody(name='body'),
}

async function updateSceneRule(request: UpdateSceneRuleRequest): UpdateSceneRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSceneRule', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Body'),
  projectCode: string(name='ProjectCode', position='Body'),
  speechCode: string(name='SpeechCode', position='Body'),
  speechRate?: int32(name='SpeechRate', position='Body'),
  voice: string(name='Voice', position='Body'),
  volume?: int32(name='Volume', position='Body'),
}

model UpdateSpeechResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSpeechResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSpeechResponseBody(name='body'),
}

async function updateSpeech(request: UpdateSpeechRequest): UpdateSpeechResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSpeech', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', position='Query'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', position='Query'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', position='Query'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', position='Query'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', position='Query'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', position='Query'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  mnsConfiguration?: string(name='MnsConfiguration', position='Query'),
  otaEventFlag?: boolean(name='OtaEventFlag', position='Query'),
  otaJobFlag?: boolean(name='OtaJobFlag', position='Query'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', position='Query'),
  type: string(name='Type', position='Query'),
}

model UpdateSubscribeRelationResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscribeRelationResponseBody(name='body'),
}

async function updateSubscribeRelation(request: UpdateSubscribeRelationRequest): UpdateSubscribeRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSubscribeRelation', 'POST', '/', 'json', false, 'json', request);
}

model UpdateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', position='Query'),
  functionBlockName?: string(name='FunctionBlockName', position='Query'),
  identifier?: string(name='Identifier', position='Query'),
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  thingModelJson?: string(name='ThingModelJson', position='Query'),
}

model UpdateThingModelResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingModelResponseBody(name='body'),
}

async function updateThingModel(request: UpdateThingModelRequest): UpdateThingModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateThingModel', 'POST', '/', 'json', false, 'json', request);
}

model UpdateThingModelValidationConfigRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  validateType: int32(name='ValidateType', position='Query'),
}

model UpdateThingModelValidationConfigResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateThingModelValidationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingModelValidationConfigResponseBody(name='body'),
}

async function updateThingModelValidationConfig(request: UpdateThingModelValidationConfigRequest): UpdateThingModelValidationConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateThingModelValidationConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', position='Query'),
  productKey: string(name='ProductKey', position='Query'),
  scriptContent: string(name='ScriptContent', position='Query'),
  scriptType: string(name='ScriptType', position='Query'),
}

model UpdateThingScriptResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingScriptResponseBody(name='body'),
}

async function updateThingScript(request: UpdateThingScriptRequest): UpdateThingScriptResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateThingScript', 'POST', '/', 'json', false, 'json', request);
}

