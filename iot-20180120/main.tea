/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'iot.ap-northeast-1.aliyuncs.com',
    ap-south-1 = 'iot.ap-northeast-1.aliyuncs.com',
    ap-southeast-2 = 'iot.ap-northeast-1.aliyuncs.com',
    ap-southeast-3 = 'iot.ap-northeast-1.aliyuncs.com',
    ap-southeast-5 = 'iot.ap-northeast-1.aliyuncs.com',
    cn-beijing = 'iot.aliyuncs.com',
    cn-beijing-finance-1 = 'iot.aliyuncs.com',
    cn-beijing-finance-pop = 'iot.aliyuncs.com',
    cn-beijing-gov-1 = 'iot.aliyuncs.com',
    cn-beijing-nu16-b01 = 'iot.aliyuncs.com',
    cn-chengdu = 'iot.aliyuncs.com',
    cn-edge-1 = 'iot.aliyuncs.com',
    cn-fujian = 'iot.aliyuncs.com',
    cn-haidian-cm12-c01 = 'iot.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'iot.aliyuncs.com',
    cn-hangzhou-finance = 'iot.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'iot.aliyuncs.com',
    cn-hangzhou-test-306 = 'iot.aliyuncs.com',
    cn-hongkong = 'iot.aliyuncs.com',
    cn-hongkong-finance-pop = 'iot.aliyuncs.com',
    cn-huhehaote = 'iot.aliyuncs.com',
    cn-north-2-gov-1 = 'iot.aliyuncs.com',
    cn-qingdao = 'iot.aliyuncs.com',
    cn-qingdao-nebula = 'iot.aliyuncs.com',
    cn-shanghai-et15-b01 = 'iot.aliyuncs.com',
    cn-shanghai-et2-b01 = 'iot.aliyuncs.com',
    cn-shanghai-finance-1 = 'iot.aliyuncs.com',
    cn-shanghai-inner = 'iot.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'iot.aliyuncs.com',
    cn-shenzhen = 'iot.aliyuncs.com',
    cn-shenzhen-finance-1 = 'iot.aliyuncs.com',
    cn-shenzhen-inner = 'iot.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'iot.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'iot.aliyuncs.com',
    cn-wuhan = 'iot.aliyuncs.com',
    cn-yushanfang = 'iot.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'iot.aliyuncs.com',
    cn-zhangjiakou = 'iot.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'iot.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'iot.aliyuncs.com',
    eu-west-1 = 'iot.ap-northeast-1.aliyuncs.com',
    eu-west-1-oxs = 'iot.ap-northeast-1.aliyuncs.com',
    me-east-1 = 'iot.ap-northeast-1.aliyuncs.com',
    rus-west-1-pop = 'iot.ap-northeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('iot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model BatchAddDeviceGroupRelationsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
  device?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
    }
  ](name='Device'),
}

model BatchAddDeviceGroupRelationsResponseBody = {
  validDeviceCount?: int32(name='ValidDeviceCount'),
  successAddedDeviceCount?: int32(name='SuccessAddedDeviceCount'),
  requestId?: string(name='RequestId'),
  exceedTenGroupDeviceCount?: int32(name='ExceedTenGroupDeviceCount'),
  errorMessage?: string(name='ErrorMessage'),
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchAddDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddDeviceGroupRelationsResponseBody(name='body'),
}

async function batchAddDeviceGroupRelationsWithOptions(request: BatchAddDeviceGroupRelationsRequest, runtime: Util.RuntimeOptions): BatchAddDeviceGroupRelationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchAddDeviceGroupRelations', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchAddDeviceGroupRelations(request: BatchAddDeviceGroupRelationsRequest): BatchAddDeviceGroupRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddDeviceGroupRelationsWithOptions(request, runtime);
}

model BatchAddThingTopoRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  gwProductKey?: string(name='GwProductKey'),
  ext?: map[string]any(name='Ext'),
  gwDeviceName?: string(name='GwDeviceName'),
  topoAddItem?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      sign?: string(name='Sign'),
      timestamp?: string(name='Timestamp'),
      signMethod?: string(name='SignMethod'),
      clientId?: string(name='ClientId'),
    }
  ](name='TopoAddItem'),
}

model BatchAddThingTopoShrinkRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  gwProductKey?: string(name='GwProductKey'),
  extShrink?: string(name='Ext'),
  gwDeviceName?: string(name='GwDeviceName'),
  topoAddItem?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      sign?: string(name='Sign'),
      timestamp?: string(name='Timestamp'),
      signMethod?: string(name='SignMethod'),
      clientId?: string(name='ClientId'),
    }
  ](name='TopoAddItem'),
}

model BatchAddThingTopoResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: BatchAddThingTopoResponseBody(name='body'),
}

async function batchAddThingTopoWithOptions(tmpReq: BatchAddThingTopoRequest, runtime: Util.RuntimeOptions): BatchAddThingTopoResponse {
  Util.validateModel(tmpReq);
  var request = new BatchAddThingTopoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ext)) {
    request.extShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ext, 'Ext', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchAddThingTopo', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchAddThingTopo(request: BatchAddThingTopoRequest): BatchAddThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddThingTopoWithOptions(request, runtime);
}

model BatchBindDeviceToEdgeInstanceWithDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody(name='body'),
}

async function batchBindDeviceToEdgeInstanceWithDriverWithOptions(request: BatchBindDeviceToEdgeInstanceWithDriverRequest, runtime: Util.RuntimeOptions): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchBindDeviceToEdgeInstanceWithDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchBindDeviceToEdgeInstanceWithDriver(request: BatchBindDeviceToEdgeInstanceWithDriverRequest): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindDeviceToEdgeInstanceWithDriverWithOptions(request, runtime);
}

model BatchCheckDeviceNamesRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: [ string ](name='DeviceName'),
  deviceNameList?: [ 
    {
      deviceNickname?: string(name='DeviceNickname'),
      deviceName?: string(name='DeviceName'),
    }
  ](name='DeviceNameList'),
}

model BatchCheckDeviceNamesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    applyId?: long(name='ApplyId'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='InvalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceNicknameList?: {
      invalidDeviceNickname?: [ string ](name='InvalidDeviceNickname')
    }(name='InvalidDeviceNicknameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchCheckDeviceNamesResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCheckDeviceNamesResponseBody(name='body'),
}

async function batchCheckDeviceNamesWithOptions(request: BatchCheckDeviceNamesRequest, runtime: Util.RuntimeOptions): BatchCheckDeviceNamesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchCheckDeviceNames', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchCheckDeviceNames(request: BatchCheckDeviceNamesRequest): BatchCheckDeviceNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCheckDeviceNamesWithOptions(request, runtime);
}

model BatchClearEdgeInstanceDeviceConfigRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchClearEdgeInstanceDeviceConfigResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchClearEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchClearEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchClearEdgeInstanceDeviceConfigWithOptions(request: BatchClearEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchClearEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchClearEdgeInstanceDeviceConfig', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchClearEdgeInstanceDeviceConfig(request: BatchClearEdgeInstanceDeviceConfigRequest): BatchClearEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchClearEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchDeleteDeviceGroupRelationsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
  device?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
    }
  ](name='Device'),
}

model BatchDeleteDeviceGroupRelationsResponseBody = {
  validDeviceCount?: int32(name='ValidDeviceCount'),
  requestId?: string(name='RequestId'),
  successDeviceCount?: int32(name='SuccessDeviceCount'),
  errorMessage?: string(name='ErrorMessage'),
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchDeleteDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteDeviceGroupRelationsResponseBody(name='body'),
}

async function batchDeleteDeviceGroupRelationsWithOptions(request: BatchDeleteDeviceGroupRelationsRequest, runtime: Util.RuntimeOptions): BatchDeleteDeviceGroupRelationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchDeleteDeviceGroupRelations', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchDeleteDeviceGroupRelations(request: BatchDeleteDeviceGroupRelationsRequest): BatchDeleteDeviceGroupRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteDeviceGroupRelationsWithOptions(request, runtime);
}

model BatchDeleteEdgeInstanceChannelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  channelIds?: [ string ](name='ChannelIds'),
}

model BatchDeleteEdgeInstanceChannelResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchDeleteEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchDeleteEdgeInstanceChannelResponseBody(name='body'),
}

async function batchDeleteEdgeInstanceChannelWithOptions(request: BatchDeleteEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): BatchDeleteEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchDeleteEdgeInstanceChannel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchDeleteEdgeInstanceChannel(request: BatchDeleteEdgeInstanceChannelRequest): BatchDeleteEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteEdgeInstanceChannelWithOptions(request, runtime);
}

model BatchGetDeviceBindStatusRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchGetDeviceBindStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      bindStatus?: int32(name='BindStatus'),
      iotId?: string(name='IotId'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchGetDeviceBindStatusResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetDeviceBindStatusResponseBody(name='body'),
}

async function batchGetDeviceBindStatusWithOptions(request: BatchGetDeviceBindStatusRequest, runtime: Util.RuntimeOptions): BatchGetDeviceBindStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetDeviceBindStatus', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetDeviceBindStatus(request: BatchGetDeviceBindStatusRequest): BatchGetDeviceBindStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetDeviceBindStatusWithOptions(request, runtime);
}

model BatchGetDeviceStateRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: [ string ](name='DeviceName'),
  iotId?: [ string ](name='IotId'),
}

model BatchGetDeviceStateResponseBody = {
  requestId?: string(name='RequestId'),
  deviceStatusList?: {
    deviceStatus?: [ 
    {
      status?: string(name='Status'),
      lastOnlineTime?: string(name='LastOnlineTime'),
      deviceName?: string(name='DeviceName'),
      deviceId?: string(name='DeviceId'),
      asAddress?: string(name='AsAddress'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceStatus')
  }(name='DeviceStatusList'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchGetDeviceStateResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetDeviceStateResponseBody(name='body'),
}

async function batchGetDeviceStateWithOptions(request: BatchGetDeviceStateRequest, runtime: Util.RuntimeOptions): BatchGetDeviceStateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetDeviceState', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetDeviceState(request: BatchGetDeviceStateRequest): BatchGetDeviceStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetDeviceStateWithOptions(request, runtime);
}

model BatchGetEdgeDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverIds?: [ string ](name='DriverIds'),
}

model BatchGetEdgeDriverResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  driverList?: [ 
    {
      gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
      type?: int32(name='Type'),
      cpuArch?: string(name='CpuArch'),
      driverId?: string(name='DriverId'),
      isBuiltIn?: boolean(name='IsBuiltIn'),
      gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
      runtime?: string(name='Runtime'),
      driverName?: string(name='DriverName'),
      driverProtocol?: string(name='DriverProtocol'),
    }
  ](name='DriverList'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeDriverResponseBody(name='body'),
}

async function batchGetEdgeDriverWithOptions(request: BatchGetEdgeDriverRequest, runtime: Util.RuntimeOptions): BatchGetEdgeDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetEdgeDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetEdgeDriver(request: BatchGetEdgeDriverRequest): BatchGetEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeDriverWithOptions(request, runtime);
}

model BatchGetEdgeInstanceChannelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  channelIds?: [ string ](name='ChannelIds'),
}

model BatchGetEdgeInstanceChannelResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    channel?: [ 
    {
      channelName?: string(name='ChannelName'),
      channelId?: string(name='ChannelId'),
      configList?: {
        config?: [ 
        {
          key?: string(name='Key'),
          configId?: string(name='ConfigId'),
          format?: string(name='Format'),
          content?: string(name='Content'),
        }
      ](name='Config')
      }(name='ConfigList'),
    }
  ](name='Channel')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceChannelWithOptions(request: BatchGetEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetEdgeInstanceChannel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetEdgeInstanceChannel(request: BatchGetEdgeInstanceChannelRequest): BatchGetEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceChannelWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceChannelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchGetEdgeInstanceDeviceChannelResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  deviceChannelList?: [ 
    {
      channelName?: string(name='ChannelName'),
      channelId?: string(name='ChannelId'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceChannelList'),
}

model BatchGetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceChannelWithOptions(request: BatchGetEdgeInstanceDeviceChannelRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetEdgeInstanceDeviceChannel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetEdgeInstanceDeviceChannel(request: BatchGetEdgeInstanceDeviceChannelRequest): BatchGetEdgeInstanceDeviceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceChannelWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceConfigRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchGetEdgeInstanceDeviceConfigResponseBody = {
  deviceConfigList?: [ 
    {
      config?: {
        content?: string(name='Content'),
        format?: string(name='Format'),
      }(name='Config'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceConfigList'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceConfigWithOptions(request: BatchGetEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetEdgeInstanceDeviceConfig', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetEdgeInstanceDeviceConfig(request: BatchGetEdgeInstanceDeviceConfigRequest): BatchGetEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchGetEdgeInstanceDeviceDriverResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  deviceDriverList?: [ 
    {
      driverId?: string(name='DriverId'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceDriverList'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceDeviceDriverResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDeviceDriverResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceDriverWithOptions(request: BatchGetEdgeInstanceDeviceDriverRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetEdgeInstanceDeviceDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetEdgeInstanceDeviceDriver(request: BatchGetEdgeInstanceDeviceDriverRequest): BatchGetEdgeInstanceDeviceDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceDriverWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDriverConfigsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverIds?: [ string ](name='DriverIds'),
}

model BatchGetEdgeInstanceDriverConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  driverConfigList?: [ 
    {
      driverId?: string(name='DriverId'),
      configList?: [ 
        {
          key?: string(name='Key'),
          configId?: string(name='ConfigId'),
          format?: string(name='Format'),
          content?: string(name='Content'),
        }
      ](name='ConfigList'),
    }
  ](name='DriverConfigList'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchGetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchGetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function batchGetEdgeInstanceDriverConfigsWithOptions(request: BatchGetEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchGetEdgeInstanceDriverConfigs', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchGetEdgeInstanceDriverConfigs(request: BatchGetEdgeInstanceDriverConfigsRequest): BatchGetEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model BatchPubRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  qos?: int32(name='Qos'),
  topicShortName?: string(name='TopicShortName'),
  messageContent?: string(name='MessageContent'),
  deviceName?: [ string ](name='DeviceName'),
}

model BatchPubResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchPubResponse = {
  headers: map[string]string(name='headers'),
  body: BatchPubResponseBody(name='body'),
}

async function batchPubWithOptions(request: BatchPubRequest, runtime: Util.RuntimeOptions): BatchPubResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchPub', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchPub(request: BatchPubRequest): BatchPubResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchPubWithOptions(request, runtime);
}

model BatchQueryDeviceDetailRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  productKey?: string(name='ProductKey'),
  iotInstanceId?: string(name='IotInstanceId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
  deviceName?: [ string ](name='DeviceName'),
}

model BatchQueryDeviceDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    data?: [ 
    {
      status?: string(name='Status'),
      utcActive?: string(name='UtcActive'),
      productName?: string(name='ProductName'),
      deviceName?: string(name='DeviceName'),
      firmwareVersion?: string(name='FirmwareVersion'),
      utcCreate?: string(name='UtcCreate'),
      productKey?: string(name='ProductKey'),
      nodeType?: int32(name='NodeType'),
      region?: string(name='Region'),
      deviceSecret?: string(name='DeviceSecret'),
      gmtActive?: string(name='GmtActive'),
      gmtCreate?: string(name='GmtCreate'),
      nickname?: string(name='Nickname'),
      iotId?: string(name='IotId'),
    }
  ](name='Data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchQueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: BatchQueryDeviceDetailResponseBody(name='body'),
}

async function batchQueryDeviceDetailWithOptions(request: BatchQueryDeviceDetailRequest, runtime: Util.RuntimeOptions): BatchQueryDeviceDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchQueryDeviceDetail', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchQueryDeviceDetail(request: BatchQueryDeviceDetailRequest): BatchQueryDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchQueryDeviceDetailWithOptions(request, runtime);
}

model BatchRegisterDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  count?: int32(name='Count'),
}

model BatchRegisterDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    applyId?: long(name='ApplyId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchRegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRegisterDeviceResponseBody(name='body'),
}

async function batchRegisterDeviceWithOptions(request: BatchRegisterDeviceRequest, runtime: Util.RuntimeOptions): BatchRegisterDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchRegisterDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchRegisterDevice(request: BatchRegisterDeviceRequest): BatchRegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRegisterDeviceWithOptions(request, runtime);
}

model BatchRegisterDeviceWithApplyIdRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  applyId?: long(name='ApplyId'),
}

model BatchRegisterDeviceWithApplyIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    applyId?: long(name='ApplyId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchRegisterDeviceWithApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: BatchRegisterDeviceWithApplyIdResponseBody(name='body'),
}

async function batchRegisterDeviceWithApplyIdWithOptions(request: BatchRegisterDeviceWithApplyIdRequest, runtime: Util.RuntimeOptions): BatchRegisterDeviceWithApplyIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchRegisterDeviceWithApplyId', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchRegisterDeviceWithApplyId(request: BatchRegisterDeviceWithApplyIdRequest): BatchRegisterDeviceWithApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRegisterDeviceWithApplyIdWithOptions(request, runtime);
}

model BatchSetEdgeInstanceDeviceChannelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  channelId?: string(name='ChannelId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchSetEdgeInstanceDeviceChannelResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchSetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceChannelWithOptions(request: BatchSetEdgeInstanceDeviceChannelRequest, runtime: Util.RuntimeOptions): BatchSetEdgeInstanceDeviceChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetEdgeInstanceDeviceChannel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetEdgeInstanceDeviceChannel(request: BatchSetEdgeInstanceDeviceChannelRequest): BatchSetEdgeInstanceDeviceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetEdgeInstanceDeviceChannelWithOptions(request, runtime);
}

model BatchSetEdgeInstanceDeviceConfigRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  deviceConfigs?: [ 
    {
      content?: string(name='Content'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceConfigs'),
}

model BatchSetEdgeInstanceDeviceConfigResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchSetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceConfigWithOptions(request: BatchSetEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchSetEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetEdgeInstanceDeviceConfig', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetEdgeInstanceDeviceConfig(request: BatchSetEdgeInstanceDeviceConfigRequest): BatchSetEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchUnbindDeviceFromEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  iotIds?: [ string ](name='IotIds'),
}

model BatchUnbindDeviceFromEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchUnbindDeviceFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUnbindDeviceFromEdgeInstanceResponseBody(name='body'),
}

async function batchUnbindDeviceFromEdgeInstanceWithOptions(request: BatchUnbindDeviceFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): BatchUnbindDeviceFromEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchUnbindDeviceFromEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchUnbindDeviceFromEdgeInstance(request: BatchUnbindDeviceFromEdgeInstanceRequest): BatchUnbindDeviceFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindDeviceFromEdgeInstanceWithOptions(request, runtime);
}

model BatchUpdateDeviceNicknameRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
  deviceNicknameInfo?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      nickname?: string(name='Nickname'),
      iotId?: string(name='IotId'),
    }
  ](name='DeviceNicknameInfo'),
}

model BatchUpdateDeviceNicknameResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BatchUpdateDeviceNicknameResponse = {
  headers: map[string]string(name='headers'),
  body: BatchUpdateDeviceNicknameResponseBody(name='body'),
}

async function batchUpdateDeviceNicknameWithOptions(request: BatchUpdateDeviceNicknameRequest, runtime: Util.RuntimeOptions): BatchUpdateDeviceNicknameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchUpdateDeviceNickname', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchUpdateDeviceNickname(request: BatchUpdateDeviceNicknameRequest): BatchUpdateDeviceNicknameResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateDeviceNicknameWithOptions(request, runtime);
}

model BindApplicationToEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  applicationId?: string(name='ApplicationId'),
  applicationVersion?: string(name='ApplicationVersion'),
}

model BindApplicationToEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindApplicationToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindApplicationToEdgeInstanceResponseBody(name='body'),
}

async function bindApplicationToEdgeInstanceWithOptions(request: BindApplicationToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindApplicationToEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindApplicationToEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindApplicationToEdgeInstance(request: BindApplicationToEdgeInstanceRequest): BindApplicationToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindApplicationToEdgeInstanceWithOptions(request, runtime);
}

model BindDriverToEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  driverVersion?: string(name='DriverVersion'),
  orderId?: string(name='OrderId'),
}

model BindDriverToEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindDriverToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindDriverToEdgeInstanceResponseBody(name='body'),
}

async function bindDriverToEdgeInstanceWithOptions(request: BindDriverToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindDriverToEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindDriverToEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindDriverToEdgeInstance(request: BindDriverToEdgeInstanceRequest): BindDriverToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindDriverToEdgeInstanceWithOptions(request, runtime);
}

model BindGatewayToEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
}

model BindGatewayToEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindGatewayToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindGatewayToEdgeInstanceResponseBody(name='body'),
}

async function bindGatewayToEdgeInstanceWithOptions(request: BindGatewayToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindGatewayToEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindGatewayToEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindGatewayToEdgeInstance(request: BindGatewayToEdgeInstanceRequest): BindGatewayToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindGatewayToEdgeInstanceWithOptions(request, runtime);
}

model BindRoleToEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  roleArn?: string(name='RoleArn'),
  roleName?: string(name='RoleName'),
}

model BindRoleToEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindRoleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindRoleToEdgeInstanceResponseBody(name='body'),
}

async function bindRoleToEdgeInstanceWithOptions(request: BindRoleToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindRoleToEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindRoleToEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindRoleToEdgeInstance(request: BindRoleToEdgeInstanceRequest): BindRoleToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindRoleToEdgeInstanceWithOptions(request, runtime);
}

model BindSceneRuleToEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  ruleId?: string(name='RuleId'),
}

model BindSceneRuleToEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model BindSceneRuleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: BindSceneRuleToEdgeInstanceResponseBody(name='body'),
}

async function bindSceneRuleToEdgeInstanceWithOptions(request: BindSceneRuleToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindSceneRuleToEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BindSceneRuleToEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function bindSceneRuleToEdgeInstance(request: BindSceneRuleToEdgeInstanceRequest): BindSceneRuleToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSceneRuleToEdgeInstanceWithOptions(request, runtime);
}

model CancelJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  jobId?: string(name='JobId'),
}

model CancelJobResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CancelJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelJobResponseBody(name='body'),
}

async function cancelJobWithOptions(request: CancelJobRequest, runtime: Util.RuntimeOptions): CancelJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelJob(request: CancelJobRequest): CancelJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelJobWithOptions(request, runtime);
}

model CancelOTAStrategyByJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  jobId?: string(name='JobId'),
}

model CancelOTAStrategyByJobResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CancelOTAStrategyByJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTAStrategyByJobResponseBody(name='body'),
}

async function cancelOTAStrategyByJobWithOptions(request: CancelOTAStrategyByJobRequest, runtime: Util.RuntimeOptions): CancelOTAStrategyByJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelOTAStrategyByJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelOTAStrategyByJob(request: CancelOTAStrategyByJobRequest): CancelOTAStrategyByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTAStrategyByJobWithOptions(request, runtime);
}

model CancelOTATaskByDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
  productKey?: string(name='ProductKey'),
  jobId?: string(name='JobId'),
  deviceName?: [ string ](name='DeviceName'),
}

model CancelOTATaskByDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CancelOTATaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTATaskByDeviceResponseBody(name='body'),
}

async function cancelOTATaskByDeviceWithOptions(request: CancelOTATaskByDeviceRequest, runtime: Util.RuntimeOptions): CancelOTATaskByDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelOTATaskByDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelOTATaskByDevice(request: CancelOTATaskByDeviceRequest): CancelOTATaskByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTATaskByDeviceWithOptions(request, runtime);
}

model CancelOTATaskByJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  jobId?: string(name='JobId'),
  cancelScheduledTask?: boolean(name='CancelScheduledTask'),
  cancelQueuedTask?: boolean(name='CancelQueuedTask'),
  cancelInProgressTask?: boolean(name='CancelInProgressTask'),
  cancelNotifiedTask?: boolean(name='CancelNotifiedTask'),
}

model CancelOTATaskByJobResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CancelOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOTATaskByJobResponseBody(name='body'),
}

async function cancelOTATaskByJobWithOptions(request: CancelOTATaskByJobRequest, runtime: Util.RuntimeOptions): CancelOTATaskByJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelOTATaskByJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelOTATaskByJob(request: CancelOTATaskByJobRequest): CancelOTATaskByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTATaskByJobWithOptions(request, runtime);
}

model ClearEdgeInstanceDriverConfigsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
}

model ClearEdgeInstanceDriverConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ClearEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ClearEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function clearEdgeInstanceDriverConfigsWithOptions(request: ClearEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): ClearEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClearEdgeInstanceDriverConfigs', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function clearEdgeInstanceDriverConfigs(request: ClearEdgeInstanceDriverConfigsRequest): ClearEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model CloseEdgeInstanceDeploymentRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
}

model CloseEdgeInstanceDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CloseEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CloseEdgeInstanceDeploymentResponseBody(name='body'),
}

async function closeEdgeInstanceDeploymentWithOptions(request: CloseEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): CloseEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CloseEdgeInstanceDeployment', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function closeEdgeInstanceDeployment(request: CloseEdgeInstanceDeploymentRequest): CloseEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeEdgeInstanceDeploymentWithOptions(request, runtime);
}

model CopyThingModelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sourceProductKey?: string(name='SourceProductKey'),
  targetProductKey?: string(name='TargetProductKey'),
  sourceModelVersion?: string(name='SourceModelVersion'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model CopyThingModelResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CopyThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: CopyThingModelResponseBody(name='body'),
}

async function copyThingModelWithOptions(request: CopyThingModelRequest, runtime: Util.RuntimeOptions): CopyThingModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopyThingModel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copyThingModel(request: CopyThingModelRequest): CopyThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyThingModelWithOptions(request, runtime);
}

model CreateConsumerGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupName?: string(name='GroupName'),
}

model CreateConsumerGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  groupId?: string(name='GroupId'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConsumerGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupWithOptions(request, runtime);
}

model CreateConsumerGroupSubscribeRelationRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  consumerGroupId?: string(name='ConsumerGroupId'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model CreateConsumerGroupSubscribeRelationResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function createConsumerGroupSubscribeRelationWithOptions(request: CreateConsumerGroupSubscribeRelationRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupSubscribeRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateConsumerGroupSubscribeRelation', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createConsumerGroupSubscribeRelation(request: CreateConsumerGroupSubscribeRelationRequest): CreateConsumerGroupSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupSubscribeRelationWithOptions(request, runtime);
}

model CreateDataAPIServiceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  displayName?: string(name='DisplayName'),
  originSql?: string(name='OriginSql'),
  desc?: string(name='Desc'),
  templateSql?: string(name='TemplateSql'),
  apiPath?: string(name='ApiPath'),
  iotInstanceId?: string(name='IotInstanceId'),
  requestParam?: [ 
    {
      type?: string(name='Type'),
      required?: boolean(name='Required'),
      example?: string(name='Example'),
      name?: string(name='Name'),
      desc?: string(name='Desc'),
    }
  ](name='RequestParam'),
  responseParam?: [ 
    {
      type?: string(name='Type'),
      required?: boolean(name='Required'),
      example?: string(name='Example'),
      name?: string(name='Name'),
      desc?: string(name='Desc'),
    }
  ](name='ResponseParam'),
}

model CreateDataAPIServiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    apiSrn?: string(name='ApiSrn'),
    createTime?: long(name='CreateTime'),
    lastUpdateTime?: long(name='LastUpdateTime'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataAPIServiceResponseBody(name='body'),
}

async function createDataAPIServiceWithOptions(request: CreateDataAPIServiceRequest, runtime: Util.RuntimeOptions): CreateDataAPIServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDataAPIService', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDataAPIService(request: CreateDataAPIServiceRequest): CreateDataAPIServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataAPIServiceWithOptions(request, runtime);
}

model CreateDeviceGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  superGroupId?: string(name='SuperGroupId'),
  groupDesc?: string(name='GroupDesc'),
  groupName?: string(name='GroupName'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model CreateDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
    utcCreate?: string(name='UtcCreate'),
    groupDesc?: string(name='GroupDesc'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeviceGroupResponseBody(name='body'),
}

async function createDeviceGroupWithOptions(request: CreateDeviceGroupRequest, runtime: Util.RuntimeOptions): CreateDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeviceGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeviceGroup(request: CreateDeviceGroupRequest): CreateDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceGroupWithOptions(request, runtime);
}

model CreateEdgeDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverName?: string(name='DriverName'),
  driverProtocol?: string(name='DriverProtocol'),
  runtime?: string(name='Runtime'),
  cpuArch?: string(name='CpuArch'),
  isBuiltIn?: boolean(name='IsBuiltIn'),
}

model CreateEdgeDriverResponseBody = {
  driverId?: string(name='DriverId'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeDriverResponseBody(name='body'),
}

async function createEdgeDriverWithOptions(request: CreateEdgeDriverRequest, runtime: Util.RuntimeOptions): CreateEdgeDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEdgeDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEdgeDriver(request: CreateEdgeDriverRequest): CreateEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeDriverWithOptions(request, runtime);
}

model CreateEdgeDriverVersionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverId?: string(name='DriverId'),
  driverVersion?: string(name='DriverVersion'),
  edgeVersion?: string(name='EdgeVersion'),
  description?: string(name='Description'),
  sourceConfig?: string(name='SourceConfig'),
  driverConfig?: string(name='DriverConfig'),
  containerConfig?: string(name='ContainerConfig'),
  configCheckRule?: string(name='ConfigCheckRule'),
  argument?: string(name='Argument'),
}

model CreateEdgeDriverVersionResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeDriverVersionResponseBody(name='body'),
}

async function createEdgeDriverVersionWithOptions(request: CreateEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): CreateEdgeDriverVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEdgeDriverVersion', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEdgeDriverVersion(request: CreateEdgeDriverVersionRequest): CreateEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeDriverVersionWithOptions(request, runtime);
}

model CreateEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  name?: string(name='Name'),
  tags?: string(name='Tags'),
  spec?: int32(name='Spec'),
}

model CreateEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceResponseBody(name='body'),
}

async function createEdgeInstanceWithOptions(request: CreateEdgeInstanceRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEdgeInstance(request: CreateEdgeInstanceRequest): CreateEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceWithOptions(request, runtime);
}

model CreateEdgeInstanceChannelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  channelName?: string(name='ChannelName'),
  configs?: [ 
    {
      key?: string(name='Key'),
      content?: string(name='Content'),
      format?: string(name='Format'),
    }
  ](name='Configs'),
}

model CreateEdgeInstanceChannelResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceChannelResponseBody(name='body'),
}

async function createEdgeInstanceChannelWithOptions(request: CreateEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEdgeInstanceChannel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEdgeInstanceChannel(request: CreateEdgeInstanceChannelRequest): CreateEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceChannelWithOptions(request, runtime);
}

model CreateEdgeInstanceDeploymentRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  type?: string(name='Type'),
}

model CreateEdgeInstanceDeploymentResponseBody = {
  deploymentId?: string(name='DeploymentId'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeInstanceDeploymentResponseBody(name='body'),
}

async function createEdgeInstanceDeploymentWithOptions(request: CreateEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEdgeInstanceDeployment', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEdgeInstanceDeployment(request: CreateEdgeInstanceDeploymentRequest): CreateEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceDeploymentWithOptions(request, runtime);
}

model CreateEdgeOssPreSignedAddressRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  resourceId?: string(name='ResourceId'),
  fileName?: string(name='FileName'),
  iotInstanceId?: string(name='IotInstanceId'),
  type?: string(name='Type'),
  instanceId?: string(name='InstanceId'),
  resourceVersion?: string(name='ResourceVersion'),
}

model CreateEdgeOssPreSignedAddressResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    ossAddress?: string(name='OssAddress'),
    ossPreSignedAddress?: string(name='OssPreSignedAddress'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateEdgeOssPreSignedAddressResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEdgeOssPreSignedAddressResponseBody(name='body'),
}

async function createEdgeOssPreSignedAddressWithOptions(request: CreateEdgeOssPreSignedAddressRequest, runtime: Util.RuntimeOptions): CreateEdgeOssPreSignedAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEdgeOssPreSignedAddress', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEdgeOssPreSignedAddress(request: CreateEdgeOssPreSignedAddressRequest): CreateEdgeOssPreSignedAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeOssPreSignedAddressWithOptions(request, runtime);
}

model CreateJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  description?: string(name='Description'),
  jobDocument?: string(name='JobDocument'),
  type?: string(name='Type'),
  jobFile?: map[string]any(name='JobFile'),
  jobName?: string(name='JobName'),
  timeoutConfig?: map[string]any(name='TimeoutConfig'),
  rolloutConfig?: map[string]any(name='RolloutConfig'),
  targetConfig?: map[string]any(name='TargetConfig'),
}

model CreateJobShrinkRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  description?: string(name='Description'),
  jobDocument?: string(name='JobDocument'),
  type?: string(name='Type'),
  jobFileShrink?: string(name='JobFile'),
  jobName?: string(name='JobName'),
  timeoutConfigShrink?: string(name='TimeoutConfig'),
  rolloutConfigShrink?: string(name='RolloutConfig'),
  targetConfigShrink?: string(name='TargetConfig'),
}

model CreateJobResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  jobId?: string(name='JobId'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobResponseBody(name='body'),
}

async function createJobWithOptions(tmpReq: CreateJobRequest, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobFile)) {
    request.jobFileShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobFile, 'JobFile', 'json');
  }
  if (!Util.isUnset(tmpReq.timeoutConfig)) {
    request.timeoutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timeoutConfig, 'TimeoutConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.rolloutConfig)) {
    request.rolloutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rolloutConfig, 'RolloutConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.targetConfig)) {
    request.targetConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targetConfig, 'TargetConfig', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobWithOptions(request, runtime);
}

model CreateLoRaNodesTaskRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceInfo?: [ 
    {
      devEui?: string(name='DevEui'),
      pinCode?: string(name='PinCode'),
    }
  ](name='DeviceInfo'),
}

model CreateLoRaNodesTaskResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateLoRaNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLoRaNodesTaskResponseBody(name='body'),
}

async function createLoRaNodesTaskWithOptions(request: CreateLoRaNodesTaskRequest, runtime: Util.RuntimeOptions): CreateLoRaNodesTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLoRaNodesTask', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLoRaNodesTask(request: CreateLoRaNodesTaskRequest): CreateLoRaNodesTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoRaNodesTaskWithOptions(request, runtime);
}

model CreateOTADynamicUpgradeJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
  productKey?: string(name='ProductKey'),
  retryInterval?: int32(name='RetryInterval'),
  retryCount?: int32(name='RetryCount'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes'),
  maximumPerMinute?: int32(name='MaximumPerMinute'),
  overwriteMode?: int32(name='OverwriteMode'),
  dynamicMode?: int32(name='DynamicMode'),
  srcVersion?: [ string ](name='SrcVersion'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateOTADynamicUpgradeJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    jobId?: string(name='JobId'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOTADynamicUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTADynamicUpgradeJobResponseBody(name='body'),
}

async function createOTADynamicUpgradeJobWithOptions(request: CreateOTADynamicUpgradeJobRequest, runtime: Util.RuntimeOptions): CreateOTADynamicUpgradeJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOTADynamicUpgradeJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOTADynamicUpgradeJob(request: CreateOTADynamicUpgradeJobRequest): CreateOTADynamicUpgradeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTADynamicUpgradeJobWithOptions(request, runtime);
}

model CreateOTAFirmwareRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareName?: string(name='FirmwareName'),
  destVersion?: string(name='DestVersion'),
  firmwareUrl?: string(name='FirmwareUrl'),
  firmwareSign?: string(name='FirmwareSign'),
  signMethod?: string(name='SignMethod'),
  firmwareSize?: int32(name='FirmwareSize'),
  productKey?: string(name='ProductKey'),
  firmwareDesc?: string(name='FirmwareDesc'),
  type?: int32(name='Type'),
  srcVersion?: string(name='SrcVersion'),
  moduleName?: string(name='ModuleName'),
  needToVerify?: boolean(name='NeedToVerify'),
}

model CreateOTAFirmwareResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    utcCreate?: string(name='UtcCreate'),
    firmwareId?: string(name='FirmwareId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAFirmwareResponseBody(name='body'),
}

async function createOTAFirmwareWithOptions(request: CreateOTAFirmwareRequest, runtime: Util.RuntimeOptions): CreateOTAFirmwareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOTAFirmware', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOTAFirmware(request: CreateOTAFirmwareRequest): CreateOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAFirmwareWithOptions(request, runtime);
}

model CreateOTAModuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  aliasName?: string(name='AliasName'),
  iotInstanceId?: string(name='IotInstanceId'),
  moduleName?: string(name='ModuleName'),
  desc?: string(name='Desc'),
  productKey?: string(name='ProductKey'),
}

model CreateOTAModuleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAModuleResponseBody(name='body'),
}

async function createOTAModuleWithOptions(request: CreateOTAModuleRequest, runtime: Util.RuntimeOptions): CreateOTAModuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOTAModule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOTAModule(request: CreateOTAModuleRequest): CreateOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAModuleWithOptions(request, runtime);
}

model CreateOTAStaticUpgradeJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
  productKey?: string(name='ProductKey'),
  targetSelection?: string(name='TargetSelection'),
  scheduleTime?: long(name='ScheduleTime'),
  retryInterval?: int32(name='RetryInterval'),
  retryCount?: int32(name='RetryCount'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes'),
  maximumPerMinute?: int32(name='MaximumPerMinute'),
  grayPercent?: string(name='GrayPercent'),
  scheduleFinishTime?: long(name='ScheduleFinishTime'),
  overwriteMode?: int32(name='OverwriteMode'),
  dnListFileUrl?: string(name='DnListFileUrl'),
  srcVersion?: [ string ](name='SrcVersion'),
  targetDeviceName?: [ string ](name='TargetDeviceName'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateOTAStaticUpgradeJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    jobId?: string(name='JobId'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOTAStaticUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAStaticUpgradeJobResponseBody(name='body'),
}

async function createOTAStaticUpgradeJobWithOptions(request: CreateOTAStaticUpgradeJobRequest, runtime: Util.RuntimeOptions): CreateOTAStaticUpgradeJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOTAStaticUpgradeJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOTAStaticUpgradeJob(request: CreateOTAStaticUpgradeJobRequest): CreateOTAStaticUpgradeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAStaticUpgradeJobWithOptions(request, runtime);
}

model CreateOTAVerifyJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes'),
  productKey?: string(name='ProductKey'),
  targetDeviceName?: [ string ](name='TargetDeviceName'),
}

model CreateOTAVerifyJobResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    jobId?: string(name='JobId'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateOTAVerifyJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOTAVerifyJobResponseBody(name='body'),
}

async function createOTAVerifyJobWithOptions(request: CreateOTAVerifyJobRequest, runtime: Util.RuntimeOptions): CreateOTAVerifyJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateOTAVerifyJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createOTAVerifyJob(request: CreateOTAVerifyJobRequest): CreateOTAVerifyJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAVerifyJobWithOptions(request, runtime);
}

model CreateProductRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productName?: string(name='ProductName'),
  nodeType?: int32(name='NodeType'),
  dataFormat?: int32(name='DataFormat'),
  description?: string(name='Description'),
  aliyunCommodityCode?: string(name='AliyunCommodityCode'),
  id2?: boolean(name='Id2'),
  categoryId?: long(name='CategoryId'),
  protocolType?: string(name='ProtocolType'),
  netType?: string(name='NetType'),
  joinPermissionId?: string(name='JoinPermissionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  authType?: string(name='AuthType'),
  categoryKey?: string(name='CategoryKey'),
  publishAuto?: boolean(name='PublishAuto'),
  validateType?: int32(name='ValidateType'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model CreateProductResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    authType?: string(name='AuthType'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    nodeType?: int32(name='NodeType'),
    description?: string(name='Description'),
    id2?: boolean(name='Id2'),
    productSecret?: string(name='ProductSecret'),
    protocolType?: string(name='ProtocolType'),
    dataFormat?: int32(name='DataFormat'),
    aliyunCommodityCode?: string(name='AliyunCommodityCode'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  productKey?: string(name='ProductKey'),
  success?: boolean(name='Success'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductResponseBody(name='body'),
}

async function createProductWithOptions(request: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProduct', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateProductTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
  productTag?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='ProductTag'),
}

model CreateProductTagsResponseBody = {
  requestId?: string(name='RequestId'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductTagsResponseBody(name='body'),
}

async function createProductTagsWithOptions(request: CreateProductTagsRequest, runtime: Util.RuntimeOptions): CreateProductTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProductTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProductTags(request: CreateProductTagsRequest): CreateProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductTagsWithOptions(request, runtime);
}

model CreateProductTopicRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  topicShortName?: string(name='TopicShortName'),
  operation?: string(name='Operation'),
  desc?: string(name='Desc'),
}

model CreateProductTopicResponseBody = {
  requestId?: string(name='RequestId'),
  topicId?: long(name='TopicId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProductTopicResponseBody(name='body'),
}

async function createProductTopicWithOptions(request: CreateProductTopicRequest, runtime: Util.RuntimeOptions): CreateProductTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProductTopic', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProductTopic(request: CreateProductTopicRequest): CreateProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductTopicWithOptions(request, runtime);
}

model CreateRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  select?: string(name='Select'),
  shortTopic?: string(name='ShortTopic'),
  where?: string(name='Where'),
  productKey?: string(name='ProductKey'),
  name?: string(name='Name'),
  ruleDesc?: string(name='RuleDesc'),
  dataType?: string(name='DataType'),
  topicType?: int32(name='TopicType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  topic?: string(name='Topic'),
}

model CreateRuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: long(name='RuleId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateRuleActionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: long(name='RuleId'),
  type?: string(name='Type'),
  configuration?: string(name='Configuration'),
  errorActionFlag?: boolean(name='ErrorActionFlag'),
}

model CreateRuleActionResponseBody = {
  actionId?: long(name='ActionId'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleActionResponseBody(name='body'),
}

async function createRuleActionWithOptions(request: CreateRuleActionRequest, runtime: Util.RuntimeOptions): CreateRuleActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRuleAction', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRuleAction(request: CreateRuleActionRequest): CreateRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleActionWithOptions(request, runtime);
}

model CreateSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleName?: string(name='RuleName'),
  ruleContent?: string(name='RuleContent'),
  ruleDescription?: string(name='RuleDescription'),
}

model CreateSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  ruleId?: string(name='RuleId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSceneRuleResponseBody(name='body'),
}

async function createSceneRuleWithOptions(request: CreateSceneRuleRequest, runtime: Util.RuntimeOptions): CreateSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSceneRule(request: CreateSceneRuleRequest): CreateSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSceneRuleWithOptions(request, runtime);
}

model CreateSubscribeRelationRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceDataFlag?: boolean(name='DeviceDataFlag'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag'),
  mnsConfiguration?: string(name='MnsConfiguration'),
  type?: string(name='Type'),
  otaEventFlag?: boolean(name='OtaEventFlag'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag'),
  deviceTagFlag?: boolean(name='DeviceTagFlag'),
  otaVersionFlag?: boolean(name='OtaVersionFlag'),
  otaJobFlag?: boolean(name='OtaJobFlag'),
  consumerGroupIds?: [ string ](name='ConsumerGroupIds'),
}

model CreateSubscribeRelationResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubscribeRelationResponseBody(name='body'),
}

async function createSubscribeRelationWithOptions(request: CreateSubscribeRelationRequest, runtime: Util.RuntimeOptions): CreateSubscribeRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSubscribeRelation', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSubscribeRelation(request: CreateSubscribeRelationRequest): CreateSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscribeRelationWithOptions(request, runtime);
}

model CreateThingModelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  thingModelJson?: string(name='ThingModelJson'),
  functionBlockId?: string(name='FunctionBlockId'),
  functionBlockName?: string(name='FunctionBlockName'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model CreateThingModelResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThingModelResponseBody(name='body'),
}

async function createThingModelWithOptions(request: CreateThingModelRequest, runtime: Util.RuntimeOptions): CreateThingModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateThingModel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createThingModel(request: CreateThingModelRequest): CreateThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThingModelWithOptions(request, runtime);
}

model CreateThingScriptRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  scriptContent?: string(name='ScriptContent'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  scriptType?: string(name='ScriptType'),
}

model CreateThingScriptResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model CreateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: CreateThingScriptResponseBody(name='body'),
}

async function createThingScriptWithOptions(request: CreateThingScriptRequest, runtime: Util.RuntimeOptions): CreateThingScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateThingScript', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createThingScript(request: CreateThingScriptRequest): CreateThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThingScriptWithOptions(request, runtime);
}

model CreateTopicRouteTableRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  srcTopic?: string(name='SrcTopic'),
  dstTopic?: [ string ](name='DstTopic'),
}

model CreateTopicRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  isAllSucceed?: boolean(name='IsAllSucceed'),
  success?: boolean(name='Success'),
}

model CreateTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTopicRouteTableResponseBody(name='body'),
}

async function createTopicRouteTableWithOptions(request: CreateTopicRouteTableRequest, runtime: Util.RuntimeOptions): CreateTopicRouteTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTopicRouteTable', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTopicRouteTable(request: CreateTopicRouteTableRequest): CreateTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTopicRouteTableWithOptions(request, runtime);
}

model DeleteClientIdsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotId?: string(name='IotId'),
  iotInstanceId?: string(name='IotInstanceId'),
  authConfig?: string(name='AuthConfig'),
}

model DeleteClientIdsResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteClientIdsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClientIdsResponseBody(name='body'),
}

async function deleteClientIdsWithOptions(request: DeleteClientIdsRequest, runtime: Util.RuntimeOptions): DeleteClientIdsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteClientIds', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteClientIds(request: DeleteClientIdsRequest): DeleteClientIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientIdsWithOptions(request, runtime);
}

model DeleteConsumerGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
}

model DeleteConsumerGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConsumerGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupWithOptions(request, runtime);
}

model DeleteConsumerGroupSubscribeRelationRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  consumerGroupId?: string(name='ConsumerGroupId'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model DeleteConsumerGroupSubscribeRelationResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function deleteConsumerGroupSubscribeRelationWithOptions(request: DeleteConsumerGroupSubscribeRelationRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupSubscribeRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteConsumerGroupSubscribeRelation', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteConsumerGroupSubscribeRelation(request: DeleteConsumerGroupSubscribeRelationRequest): DeleteConsumerGroupSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupSubscribeRelationWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model DeleteDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model DeleteDeviceFileRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  fileId?: string(name='FileId'),
}

model DeleteDeviceFileResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceFileResponseBody(name='body'),
}

async function deleteDeviceFileWithOptions(request: DeleteDeviceFileRequest, runtime: Util.RuntimeOptions): DeleteDeviceFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceFile', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceFile(request: DeleteDeviceFileRequest): DeleteDeviceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceFileWithOptions(request, runtime);
}

model DeleteDeviceGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model DeleteDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeviceGroupResponseBody(name='body'),
}

async function deleteDeviceGroupWithOptions(request: DeleteDeviceGroupRequest, runtime: Util.RuntimeOptions): DeleteDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceGroup(request: DeleteDeviceGroupRequest): DeleteDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceGroupWithOptions(request, runtime);
}

model DeleteDevicePropRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  propKey?: string(name='PropKey'),
  iotId?: string(name='IotId'),
}

model DeleteDevicePropResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDevicePropResponseBody(name='body'),
}

async function deleteDevicePropWithOptions(request: DeleteDevicePropRequest, runtime: Util.RuntimeOptions): DeleteDevicePropResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeviceProp', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeviceProp(request: DeleteDevicePropRequest): DeleteDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDevicePropWithOptions(request, runtime);
}

model DeleteEdgeDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverId?: string(name='DriverId'),
}

model DeleteEdgeDriverResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeDriverResponseBody(name='body'),
}

async function deleteEdgeDriverWithOptions(request: DeleteEdgeDriverRequest, runtime: Util.RuntimeOptions): DeleteEdgeDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEdgeDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEdgeDriver(request: DeleteEdgeDriverRequest): DeleteEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeDriverWithOptions(request, runtime);
}

model DeleteEdgeDriverVersionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverId?: string(name='DriverId'),
  driverVersion?: string(name='DriverVersion'),
}

model DeleteEdgeDriverVersionResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeDriverVersionResponseBody(name='body'),
}

async function deleteEdgeDriverVersionWithOptions(request: DeleteEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): DeleteEdgeDriverVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEdgeDriverVersion', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEdgeDriverVersion(request: DeleteEdgeDriverVersionRequest): DeleteEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeDriverVersionWithOptions(request, runtime);
}

model DeleteEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
}

model DeleteEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEdgeInstanceResponseBody(name='body'),
}

async function deleteEdgeInstanceWithOptions(request: DeleteEdgeInstanceRequest, runtime: Util.RuntimeOptions): DeleteEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEdgeInstance(request: DeleteEdgeInstanceRequest): DeleteEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeInstanceWithOptions(request, runtime);
}

model DeleteJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  jobId?: string(name='JobId'),
}

model DeleteJobResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJobWithOptions(request: DeleteJobRequest, runtime: Util.RuntimeOptions): DeleteJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteJobWithOptions(request, runtime);
}

model DeleteOTAFirmwareRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
}

model DeleteOTAFirmwareResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOTAFirmwareResponseBody(name='body'),
}

async function deleteOTAFirmwareWithOptions(request: DeleteOTAFirmwareRequest, runtime: Util.RuntimeOptions): DeleteOTAFirmwareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteOTAFirmware', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteOTAFirmware(request: DeleteOTAFirmwareRequest): DeleteOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOTAFirmwareWithOptions(request, runtime);
}

model DeleteOTAModuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  moduleName?: string(name='ModuleName'),
  authConfig?: string(name='AuthConfig'),
}

model DeleteOTAModuleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteOTAModuleResponseBody(name='body'),
}

async function deleteOTAModuleWithOptions(request: DeleteOTAModuleRequest, runtime: Util.RuntimeOptions): DeleteOTAModuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteOTAModule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteOTAModule(request: DeleteOTAModuleRequest): DeleteOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOTAModuleWithOptions(request, runtime);
}

model DeleteProductRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model DeleteProductResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProduct', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteProductTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
  productTagKey?: [ string ](name='ProductTagKey'),
}

model DeleteProductTagsResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductTagsResponseBody(name='body'),
}

async function deleteProductTagsWithOptions(request: DeleteProductTagsRequest, runtime: Util.RuntimeOptions): DeleteProductTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProductTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProductTags(request: DeleteProductTagsRequest): DeleteProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductTagsWithOptions(request, runtime);
}

model DeleteProductTopicRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  topicId?: string(name='TopicId'),
}

model DeleteProductTopicResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteProductTopicResponseBody(name='body'),
}

async function deleteProductTopicWithOptions(request: DeleteProductTopicRequest, runtime: Util.RuntimeOptions): DeleteProductTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteProductTopic', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteProductTopic(request: DeleteProductTopicRequest): DeleteProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductTopicWithOptions(request, runtime);
}

model DeleteRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: long(name='RuleId'),
}

model DeleteRuleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteRuleActionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  actionId?: long(name='ActionId'),
}

model DeleteRuleActionResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleActionResponseBody(name='body'),
}

async function deleteRuleActionWithOptions(request: DeleteRuleActionRequest, runtime: Util.RuntimeOptions): DeleteRuleActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRuleAction', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRuleAction(request: DeleteRuleActionRequest): DeleteRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleActionWithOptions(request, runtime);
}

model DeleteSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
}

model DeleteSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSceneRuleResponseBody(name='body'),
}

async function deleteSceneRuleWithOptions(request: DeleteSceneRuleRequest, runtime: Util.RuntimeOptions): DeleteSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSceneRule(request: DeleteSceneRuleRequest): DeleteSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSceneRuleWithOptions(request, runtime);
}

model DeleteSubscribeRelationRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  type?: string(name='Type'),
}

model DeleteSubscribeRelationResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubscribeRelationResponseBody(name='body'),
}

async function deleteSubscribeRelationWithOptions(request: DeleteSubscribeRelationRequest, runtime: Util.RuntimeOptions): DeleteSubscribeRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSubscribeRelation', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSubscribeRelation(request: DeleteSubscribeRelationRequest): DeleteSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubscribeRelationWithOptions(request, runtime);
}

model DeleteThingModelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  productKey?: string(name='ProductKey'),
  functionBlockId?: string(name='FunctionBlockId'),
  isClearAllFunction?: boolean(name='IsClearAllFunction'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
  propertyIdentifier?: [ string ](name='PropertyIdentifier'),
  serviceIdentifier?: [ string ](name='ServiceIdentifier'),
  eventIdentifier?: [ string ](name='EventIdentifier'),
}

model DeleteThingModelResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteThingModelResponseBody(name='body'),
}

async function deleteThingModelWithOptions(request: DeleteThingModelRequest, runtime: Util.RuntimeOptions): DeleteThingModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteThingModel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteThingModel(request: DeleteThingModelRequest): DeleteThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteThingModelWithOptions(request, runtime);
}

model DeleteTopicRouteTableRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  srcTopic?: string(name='SrcTopic'),
  dstTopic?: [ string ](name='DstTopic'),
}

model DeleteTopicRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  isAllSucceed?: boolean(name='IsAllSucceed'),
  success?: boolean(name='Success'),
}

model DeleteTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTopicRouteTableResponseBody(name='body'),
}

async function deleteTopicRouteTableWithOptions(request: DeleteTopicRouteTableRequest, runtime: Util.RuntimeOptions): DeleteTopicRouteTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTopicRouteTable', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTopicRouteTable(request: DeleteTopicRouteTableRequest): DeleteTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTopicRouteTableWithOptions(request, runtime);
}

model DisableSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
}

model DisableSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DisableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSceneRuleResponseBody(name='body'),
}

async function disableSceneRuleWithOptions(request: DisableSceneRuleRequest, runtime: Util.RuntimeOptions): DisableSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableSceneRule(request: DisableSceneRuleRequest): DisableSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSceneRuleWithOptions(request, runtime);
}

model DisableThingRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
}

model DisableThingResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model DisableThingResponse = {
  headers: map[string]string(name='headers'),
  body: DisableThingResponseBody(name='body'),
}

async function disableThingWithOptions(request: DisableThingRequest, runtime: Util.RuntimeOptions): DisableThingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableThing', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableThing(request: DisableThingRequest): DisableThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableThingWithOptions(request, runtime);
}

model EnableSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
}

model EnableSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model EnableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSceneRuleResponseBody(name='body'),
}

async function enableSceneRuleWithOptions(request: EnableSceneRuleRequest, runtime: Util.RuntimeOptions): EnableSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableSceneRule(request: EnableSceneRuleRequest): EnableSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSceneRuleWithOptions(request, runtime);
}

model EnableThingRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
}

model EnableThingResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model EnableThingResponse = {
  headers: map[string]string(name='headers'),
  body: EnableThingResponseBody(name='body'),
}

async function enableThingWithOptions(request: EnableThingRequest, runtime: Util.RuntimeOptions): EnableThingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableThing', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableThing(request: EnableThingRequest): EnableThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableThingWithOptions(request, runtime);
}

model GenerateDeviceNameListURLRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model GenerateDeviceNameListURLResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    key?: string(name='Key'),
    signature?: string(name='Signature'),
    host?: string(name='Host'),
    fileUrl?: string(name='FileUrl'),
    policy?: string(name='Policy'),
    objectStorage?: string(name='ObjectStorage'),
    utcCreate?: string(name='UtcCreate'),
    accessKeyId?: string(name='AccessKeyId'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GenerateDeviceNameListURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateDeviceNameListURLResponseBody(name='body'),
}

async function generateDeviceNameListURLWithOptions(request: GenerateDeviceNameListURLRequest, runtime: Util.RuntimeOptions): GenerateDeviceNameListURLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateDeviceNameListURL', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateDeviceNameListURL(request: GenerateDeviceNameListURLRequest): GenerateDeviceNameListURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDeviceNameListURLWithOptions(request, runtime);
}

model GenerateFileUploadURLRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  fileSuffix?: string(name='FileSuffix'),
  bizCode?: string(name='BizCode'),
}

model GenerateFileUploadURLResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    key?: string(name='Key'),
    ossAccessKeyId?: string(name='OssAccessKeyId'),
    signature?: string(name='Signature'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    objectStorage?: string(name='ObjectStorage'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GenerateFileUploadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateFileUploadURLResponseBody(name='body'),
}

async function generateFileUploadURLWithOptions(request: GenerateFileUploadURLRequest, runtime: Util.RuntimeOptions): GenerateFileUploadURLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateFileUploadURL', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateFileUploadURL(request: GenerateFileUploadURLRequest): GenerateFileUploadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateFileUploadURLWithOptions(request, runtime);
}

model GenerateOTAUploadURLRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  fileSuffix?: string(name='FileSuffix'),
}

model GenerateOTAUploadURLResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    key?: string(name='Key'),
    OSSAccessKeyId?: string(name='OSSAccessKeyId'),
    signature?: string(name='Signature'),
    host?: string(name='Host'),
    policy?: string(name='Policy'),
    objectStorage?: string(name='ObjectStorage'),
    firmwareUrl?: string(name='FirmwareUrl'),
    utcCreate?: string(name='UtcCreate'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GenerateOTAUploadURLResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateOTAUploadURLResponseBody(name='body'),
}

async function generateOTAUploadURLWithOptions(request: GenerateOTAUploadURLRequest, runtime: Util.RuntimeOptions): GenerateOTAUploadURLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GenerateOTAUploadURL', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function generateOTAUploadURL(request: GenerateOTAUploadURLRequest): GenerateOTAUploadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOTAUploadURLWithOptions(request, runtime);
}

model GetDataAPIServiceDetailRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  apiSrn?: string(name='ApiSrn'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model GetDataAPIServiceDetailResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    displayName?: string(name='DisplayName'),
    status?: int32(name='Status'),
    apiSrn?: string(name='ApiSrn'),
    sqlTemplateDTO?: {
      requestParams?: {
        requestParams?: [ 
        {
          type?: string(name='Type'),
          required?: boolean(name='Required'),
          example?: string(name='Example'),
          name?: string(name='Name'),
          desc?: string(name='Desc'),
        }
      ](name='RequestParams')
      }(name='RequestParams'),
      originSql?: string(name='OriginSql'),
      responseParams?: {
        responseParams?: [ 
        {
          type?: string(name='Type'),
          required?: boolean(name='Required'),
          example?: string(name='Example'),
          name?: string(name='Name'),
          desc?: string(name='Desc'),
        }
      ](name='ResponseParams')
      }(name='ResponseParams'),
      templateSql?: string(name='TemplateSql'),
    }(name='SqlTemplateDTO'),
    description?: string(name='Description'),
    createTime?: long(name='CreateTime'),
    lastUpdateTime?: long(name='LastUpdateTime'),
    requestMethod?: string(name='RequestMethod'),
    dateFormat?: string(name='DateFormat'),
    requestProtocol?: string(name='RequestProtocol'),
    apiPath?: string(name='ApiPath'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetDataAPIServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetDataAPIServiceDetailResponseBody(name='body'),
}

async function getDataAPIServiceDetailWithOptions(request: GetDataAPIServiceDetailRequest, runtime: Util.RuntimeOptions): GetDataAPIServiceDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDataAPIServiceDetail', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDataAPIServiceDetail(request: GetDataAPIServiceDetailRequest): GetDataAPIServiceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataAPIServiceDetailWithOptions(request, runtime);
}

model GetDeviceShadowRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
}

model GetDeviceShadowResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  shadowMessage?: string(name='ShadowMessage'),
  success?: boolean(name='Success'),
}

model GetDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceShadowResponseBody(name='body'),
}

async function getDeviceShadowWithOptions(request: GetDeviceShadowRequest, runtime: Util.RuntimeOptions): GetDeviceShadowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceShadow', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceShadow(request: GetDeviceShadowRequest): GetDeviceShadowResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceShadowWithOptions(request, runtime);
}

model GetDeviceStatusRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
}

model GetDeviceStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceStatusResponseBody(name='body'),
}

async function getDeviceStatusWithOptions(request: GetDeviceStatusRequest, runtime: Util.RuntimeOptions): GetDeviceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDeviceStatus', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDeviceStatus(request: GetDeviceStatusRequest): GetDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceStatusWithOptions(request, runtime);
}

model GetEdgeDriverVersionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverId?: string(name='DriverId'),
  driverVersion?: string(name='DriverVersion'),
}

model GetEdgeDriverVersionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    configCheckRule?: string(name='ConfigCheckRule'),
    edgeVersion?: string(name='EdgeVersion'),
    driverId?: string(name='DriverId'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
    versionState?: string(name='VersionState'),
    containerConfig?: string(name='ContainerConfig'),
    description?: string(name='Description'),
    driverConfig?: string(name='DriverConfig'),
    argument?: string(name='Argument'),
    driverVersion?: string(name='DriverVersion'),
    sourceConfig?: string(name='SourceConfig'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeDriverVersionResponseBody(name='body'),
}

async function getEdgeDriverVersionWithOptions(request: GetEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): GetEdgeDriverVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEdgeDriverVersion', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEdgeDriverVersion(request: GetEdgeDriverVersionRequest): GetEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeDriverVersionWithOptions(request, runtime);
}

model GetEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
}

model GetEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    type?: string(name='Type'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    roleArn?: string(name='RoleArn'),
    roleAttachTime?: string(name='RoleAttachTime'),
    spec?: int32(name='Spec'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
    tags?: string(name='Tags'),
    roleName?: string(name='RoleName'),
    instanceId?: string(name='InstanceId'),
    gmtModified?: string(name='GmtModified'),
    roleAttachTimestamp?: long(name='RoleAttachTimestamp'),
    latestDeploymentType?: string(name='LatestDeploymentType'),
    latestDeploymentStatus?: int32(name='LatestDeploymentStatus'),
    bizEnable?: boolean(name='BizEnable'),
    gmtCreate?: string(name='GmtCreate'),
    name?: string(name='Name'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceResponseBody(name='body'),
}

async function getEdgeInstanceWithOptions(request: GetEdgeInstanceRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEdgeInstance(request: GetEdgeInstanceRequest): GetEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceWithOptions(request, runtime);
}

model GetEdgeInstanceDeploymentRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  deploymentId?: string(name='DeploymentId'),
}

model GetEdgeInstanceDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
    type?: string(name='Type'),
    status?: int32(name='Status'),
    deploymentId?: string(name='DeploymentId'),
    description?: string(name='Description'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
    taskList?: [ 
      {
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        status?: int32(name='Status'),
        resourceSnapshotList?: [ 
          {
            gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
            status?: int32(name='Status'),
            stage?: int32(name='Stage'),
            gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
            log?: string(name='Log'),
            gmtModified?: string(name='GmtModified'),
            operateType?: int32(name='OperateType'),
            resourceType?: string(name='ResourceType'),
            snapshotId?: string(name='SnapshotId'),
            gmtCompleted?: string(name='GmtCompleted'),
            gmtCreate?: string(name='GmtCreate'),
            gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
            resourceId?: string(name='ResourceId'),
            resourceName?: string(name='ResourceName'),
          }
        ](name='ResourceSnapshotList'),
        stage?: int32(name='Stage'),
        gatewayId?: string(name='GatewayId'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        gmtCompleted?: string(name='GmtCompleted'),
        gmtCreate?: string(name='GmtCreate'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
        gmtModified?: string(name='GmtModified'),
        taskId?: string(name='TaskId'),
      }
    ](name='TaskList'),
    gmtCompleted?: string(name='GmtCompleted'),
    gmtCreate?: string(name='GmtCreate'),
    gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
    gmtModified?: string(name='GmtModified'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: GetEdgeInstanceDeploymentResponseBody(name='body'),
}

async function getEdgeInstanceDeploymentWithOptions(request: GetEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEdgeInstanceDeployment', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEdgeInstanceDeployment(request: GetEdgeInstanceDeploymentRequest): GetEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceDeploymentWithOptions(request, runtime);
}

model GetGatewayBySubDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
}

model GetGatewayBySubDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    status?: string(name='Status'),
    utcActive?: string(name='UtcActive'),
    productName?: string(name='ProductName'),
    deviceName?: string(name='DeviceName'),
    utcCreate?: string(name='UtcCreate'),
    firmwareVersion?: string(name='FirmwareVersion'),
    gmtOnline?: string(name='GmtOnline'),
    region?: string(name='region'),
    iotId?: string(name='iotId'),
    utcOnline?: string(name='UtcOnline'),
    productKey?: string(name='ProductKey'),
    ipAddress?: string(name='IpAddress'),
    nodeType?: string(name='NodeType'),
    deviceSecret?: string(name='DeviceSecret'),
    gmtCreate?: string(name='GmtCreate'),
    gmtActive?: string(name='GmtActive'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetGatewayBySubDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayBySubDeviceResponseBody(name='body'),
}

async function getGatewayBySubDeviceWithOptions(request: GetGatewayBySubDeviceRequest, runtime: Util.RuntimeOptions): GetGatewayBySubDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetGatewayBySubDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getGatewayBySubDevice(request: GetGatewayBySubDeviceRequest): GetGatewayBySubDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayBySubDeviceWithOptions(request, runtime);
}

model GetLoraNodesTaskRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  taskId?: string(name='TaskId'),
}

model GetLoraNodesTaskResponseBody = {
  totalCount?: long(name='TotalCount'),
  successDevEuis?: {
    successDevEui?: [ string ](name='SuccessDevEui')
  }(name='SuccessDevEuis'),
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  successCount?: long(name='SuccessCount'),
  taskState?: string(name='TaskState'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetLoraNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetLoraNodesTaskResponseBody(name='body'),
}

async function getLoraNodesTaskWithOptions(request: GetLoraNodesTaskRequest, runtime: Util.RuntimeOptions): GetLoraNodesTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetLoraNodesTask', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getLoraNodesTask(request: GetLoraNodesTaskRequest): GetLoraNodesTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoraNodesTaskWithOptions(request, runtime);
}

model GetNodesAddingTaskRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  taskId?: string(name='TaskId'),
}

model GetNodesAddingTaskResponseBody = {
  totalCount?: long(name='TotalCount'),
  successDevEuis?: {
    successDevEui?: [ string ](name='SuccessDevEui')
  }(name='SuccessDevEuis'),
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  successCount?: long(name='SuccessCount'),
  taskState?: string(name='TaskState'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetNodesAddingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodesAddingTaskResponseBody(name='body'),
}

async function getNodesAddingTaskWithOptions(request: GetNodesAddingTaskRequest, runtime: Util.RuntimeOptions): GetNodesAddingTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetNodesAddingTask', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getNodesAddingTask(request: GetNodesAddingTaskRequest): GetNodesAddingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodesAddingTaskWithOptions(request, runtime);
}

model GetRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: long(name='RuleId'),
}

model GetRuleResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  ruleInfo?: {
    status?: string(name='Status'),
    modified?: string(name='Modified'),
    dataType?: string(name='DataType'),
    select?: string(name='Select'),
    utcCreated?: string(name='UtcCreated'),
    createUserId?: long(name='CreateUserId'),
    topicType?: int32(name='TopicType'),
    where?: string(name='Where'),
    productKey?: string(name='ProductKey'),
    utcModified?: string(name='UtcModified'),
    topic?: string(name='Topic'),
    shortTopic?: string(name='ShortTopic'),
    ruleDesc?: string(name='RuleDesc'),
    name?: string(name='Name'),
    created?: string(name='Created'),
    id?: long(name='Id'),
  }(name='RuleInfo'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleResponseBody(name='body'),
}

async function getRuleWithOptions(request: GetRuleRequest, runtime: Util.RuntimeOptions): GetRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleWithOptions(request, runtime);
}

model GetRuleActionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  actionId?: long(name='ActionId'),
}

model GetRuleActionResponseBody = {
  requestId?: string(name='RequestId'),
  ruleActionInfo?: {
    type?: string(name='Type'),
    configuration?: string(name='Configuration'),
    errorActionFlag?: boolean(name='ErrorActionFlag'),
    id?: long(name='Id'),
    ruleId?: long(name='RuleId'),
  }(name='RuleActionInfo'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: GetRuleActionResponseBody(name='body'),
}

async function getRuleActionWithOptions(request: GetRuleActionRequest, runtime: Util.RuntimeOptions): GetRuleActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetRuleAction', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getRuleAction(request: GetRuleActionRequest): GetRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleActionWithOptions(request, runtime);
}

model GetSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
}

model GetSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    ruleStatus?: int32(name='RuleStatus'),
    ruleContent?: string(name='RuleContent'),
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    ruleDescription?: string(name='RuleDescription'),
    ruleName?: string(name='RuleName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: GetSceneRuleResponseBody(name='body'),
}

async function getSceneRuleWithOptions(request: GetSceneRuleRequest, runtime: Util.RuntimeOptions): GetSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSceneRule(request: GetSceneRuleRequest): GetSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSceneRuleWithOptions(request, runtime);
}

model GetThingModelTslRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  productKey?: string(name='ProductKey'),
  modelVersion?: string(name='ModelVersion'),
  simple?: boolean(name='Simple'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model GetThingModelTslResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    tslStr?: string(name='TslStr'),
    tslUri?: string(name='TslUri'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingModelTslResponseBody(name='body'),
}

async function getThingModelTslWithOptions(request: GetThingModelTslRequest, runtime: Util.RuntimeOptions): GetThingModelTslResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetThingModelTsl', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getThingModelTsl(request: GetThingModelTslRequest): GetThingModelTslResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingModelTslWithOptions(request, runtime);
}

model GetThingModelTslPublishedRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  resourceGroupId?: string(name='ResourceGroupId'),
  simple?: boolean(name='Simple'),
  modelVersion?: string(name='ModelVersion'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model GetThingModelTslPublishedResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    tslStr?: string(name='TslStr'),
    tslUri?: string(name='TslUri'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetThingModelTslPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingModelTslPublishedResponseBody(name='body'),
}

async function getThingModelTslPublishedWithOptions(request: GetThingModelTslPublishedRequest, runtime: Util.RuntimeOptions): GetThingModelTslPublishedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetThingModelTslPublished', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getThingModelTslPublished(request: GetThingModelTslPublishedRequest): GetThingModelTslPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingModelTslPublishedWithOptions(request, runtime);
}

model GetThingScriptRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model GetThingScriptResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    scriptType?: string(name='ScriptType'),
    scriptUrl?: string(name='ScriptUrl'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingScriptResponseBody(name='body'),
}

async function getThingScriptWithOptions(request: GetThingScriptRequest, runtime: Util.RuntimeOptions): GetThingScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetThingScript', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getThingScript(request: GetThingScriptRequest): GetThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingScriptWithOptions(request, runtime);
}

model GetThingTemplateRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  categoryKey?: string(name='CategoryKey'),
}

model GetThingTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  thingModelJSON?: string(name='ThingModelJSON'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetThingTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingTemplateResponseBody(name='body'),
}

async function getThingTemplateWithOptions(request: GetThingTemplateRequest, runtime: Util.RuntimeOptions): GetThingTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetThingTemplate', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getThingTemplate(request: GetThingTemplateRequest): GetThingTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingTemplateWithOptions(request, runtime);
}

model GetThingTopoRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  pageNo?: int32(name='PageNo'),
  iotId?: string(name='IotId'),
}

model GetThingTopoResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    list?: {
      deviceInfo?: [ 
      {
        productKey?: string(name='ProductKey'),
        deviceName?: string(name='DeviceName'),
        iotId?: string(name='IotId'),
      }
    ](name='deviceInfo')
    }(name='List'),
    pageSize?: int32(name='PageSize'),
    pageCount?: long(name='PageCount'),
    total?: long(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: GetThingTopoResponseBody(name='body'),
}

async function getThingTopoWithOptions(request: GetThingTopoRequest, runtime: Util.RuntimeOptions): GetThingTopoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetThingTopo', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getThingTopo(request: GetThingTopoRequest): GetThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingTopoWithOptions(request, runtime);
}

model ImportThingModelTslRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  productKey?: string(name='ProductKey'),
  tslStr?: string(name='TslStr'),
  tslUrl?: string(name='TslUrl'),
  functionBlockId?: string(name='FunctionBlockId'),
  functionBlockName?: string(name='FunctionBlockName'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model ImportThingModelTslResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ImportThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  body: ImportThingModelTslResponseBody(name='body'),
}

async function importThingModelTslWithOptions(request: ImportThingModelTslRequest, runtime: Util.RuntimeOptions): ImportThingModelTslResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportThingModelTsl', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importThingModelTsl(request: ImportThingModelTslRequest): ImportThingModelTslResponse {
  var runtime = new Util.RuntimeOptions{};
  return importThingModelTslWithOptions(request, runtime);
}

model InvokeDataAPIServiceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  apiSrn?: string(name='ApiSrn'),
  iotInstanceId?: string(name='IotInstanceId'),
  param?: [ 
    {
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
      paramValue?: string(name='ParamValue'),
      listParamType?: string(name='ListParamType'),
      listParamValue?: [ string ](name='ListParamValue'),
    }
  ](name='Param'),
}

model InvokeDataAPIServiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    resultList?: {
      resultList?: [  map[string]any ](name='ResultList')
    }(name='ResultList'),
    apiSrn?: string(name='ApiSrn'),
    fieldNameList?: {
      fieldNameList?: [ string ](name='FieldNameList')
    }(name='FieldNameList'),
    pageNo?: int32(name='PageNo'),
    pageSize?: int32(name='PageSize'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model InvokeDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeDataAPIServiceResponseBody(name='body'),
}

async function invokeDataAPIServiceWithOptions(request: InvokeDataAPIServiceRequest, runtime: Util.RuntimeOptions): InvokeDataAPIServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeDataAPIService', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeDataAPIService(request: InvokeDataAPIServiceRequest): InvokeDataAPIServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeDataAPIServiceWithOptions(request, runtime);
}

model InvokeThingServiceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  identifier?: string(name='Identifier'),
  args?: string(name='Args'),
  iotId?: string(name='IotId'),
}

model InvokeThingServiceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    messageId?: string(name='MessageId'),
    result?: string(name='Result'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model InvokeThingServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeThingServiceResponseBody(name='body'),
}

async function invokeThingServiceWithOptions(request: InvokeThingServiceRequest, runtime: Util.RuntimeOptions): InvokeThingServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeThingService', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeThingService(request: InvokeThingServiceRequest): InvokeThingServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeThingServiceWithOptions(request, runtime);
}

model InvokeThingsServiceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  identifier?: string(name='Identifier'),
  args?: string(name='Args'),
  deviceName?: [ string ](name='DeviceName'),
}

model InvokeThingsServiceResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model InvokeThingsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeThingsServiceResponseBody(name='body'),
}

async function invokeThingsServiceWithOptions(request: InvokeThingsServiceRequest, runtime: Util.RuntimeOptions): InvokeThingsServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeThingsService', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeThingsService(request: InvokeThingsServiceRequest): InvokeThingsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeThingsServiceWithOptions(request, runtime);
}

model ListJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  status?: string(name='Status'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model ListJobResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  page?: int32(name='Page'),
  data?: {
    data?: [ 
    {
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
      status?: string(name='Status'),
      description?: string(name='Description'),
      type?: string(name='Type'),
    }
  ](name='data')
  }(name='Data'),
}

model ListJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobResponseBody(name='body'),
}

async function listJobWithOptions(request: ListJobRequest, runtime: Util.RuntimeOptions): ListJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listJob(request: ListJobRequest): ListJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobWithOptions(request, runtime);
}

model ListOTAFirmwareRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  destVersion?: string(name='DestVersion'),
}

model ListOTAFirmwareResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  currentPage?: int32(name='CurrentPage'),
  firmwareInfo?: {
    simpleFirmwareInfo?: [ 
    {
      firmwareName?: string(name='FirmwareName'),
      firmwareId?: string(name='FirmwareId'),
      srcVersion?: string(name='SrcVersion'),
      destVersion?: string(name='DestVersion'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
      status?: int32(name='Status'),
      firmwareDesc?: string(name='FirmwareDesc'),
      firmwareSign?: string(name='FirmwareSign'),
      firmwareSize?: int32(name='FirmwareSize'),
      firmwareUrl?: string(name='FirmwareUrl'),
      productKey?: string(name='ProductKey'),
      signMethod?: string(name='SignMethod'),
      productName?: string(name='ProductName'),
      type?: int32(name='Type'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='SimpleFirmwareInfo')
  }(name='FirmwareInfo'),
}

model ListOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAFirmwareResponseBody(name='body'),
}

async function listOTAFirmwareWithOptions(request: ListOTAFirmwareRequest, runtime: Util.RuntimeOptions): ListOTAFirmwareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOTAFirmware', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOTAFirmware(request: ListOTAFirmwareRequest): ListOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAFirmwareWithOptions(request, runtime);
}

model ListOTAJobByDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  currentPage?: int32(name='CurrentPage'),
}

model ListOTAJobByDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      jobId?: string(name='JobId'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
      productKey?: string(name='ProductKey'),
      firmwareId?: string(name='FirmwareId'),
      utcStartTime?: string(name='UtcStartTime'),
      utcEndTime?: string(name='UtcEndTime'),
      jobStatus?: string(name='JobStatus'),
      jobType?: string(name='JobType'),
      targetSelection?: string(name='TargetSelection'),
      selectionType?: string(name='SelectionType'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
}

model ListOTAJobByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAJobByDeviceResponseBody(name='body'),
}

async function listOTAJobByDeviceWithOptions(request: ListOTAJobByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAJobByDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOTAJobByDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOTAJobByDevice(request: ListOTAJobByDeviceRequest): ListOTAJobByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAJobByDeviceWithOptions(request, runtime);
}

model ListOTAJobByFirmwareRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model ListOTAJobByFirmwareResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      jobId?: string(name='JobId'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
      productKey?: string(name='ProductKey'),
      firmwareId?: string(name='FirmwareId'),
      utcStartTime?: string(name='UtcStartTime'),
      utcEndTime?: string(name='UtcEndTime'),
      jobStatus?: string(name='JobStatus'),
      jobType?: string(name='JobType'),
      targetSelection?: string(name='TargetSelection'),
      selectionType?: string(name='SelectionType'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
}

model ListOTAJobByFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAJobByFirmwareResponseBody(name='body'),
}

async function listOTAJobByFirmwareWithOptions(request: ListOTAJobByFirmwareRequest, runtime: Util.RuntimeOptions): ListOTAJobByFirmwareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOTAJobByFirmware', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOTAJobByFirmware(request: ListOTAJobByFirmwareRequest): ListOTAJobByFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAJobByFirmwareWithOptions(request, runtime);
}

model ListOTAModuleByProductRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  authConfig?: string(name='AuthConfig'),
}

model ListOTAModuleByProductResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: [ 
    {
      productKey?: string(name='ProductKey'),
      moduleName?: string(name='ModuleName'),
      aliasName?: string(name='AliasName'),
      desc?: string(name='Desc'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
    }
  ](name='Data'),
}

model ListOTAModuleByProductResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAModuleByProductResponseBody(name='body'),
}

async function listOTAModuleByProductWithOptions(request: ListOTAModuleByProductRequest, runtime: Util.RuntimeOptions): ListOTAModuleByProductResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListOTAModuleByProduct', '2018-01-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listOTAModuleByProduct(request: ListOTAModuleByProductRequest): ListOTAModuleByProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAModuleByProductWithOptions(request, runtime);
}

model ListOTAModuleVersionsByDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  currentPage?: int32(name='CurrentPage'),
}

model ListOTAModuleVersionsByDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTAModuleInfo?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      moduleVersion?: string(name='ModuleVersion'),
      moduleName?: string(name='ModuleName'),
    }
  ](name='SimpleOTAModuleInfo')
  }(name='Data'),
}

model ListOTAModuleVersionsByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTAModuleVersionsByDeviceResponseBody(name='body'),
}

async function listOTAModuleVersionsByDeviceWithOptions(request: ListOTAModuleVersionsByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAModuleVersionsByDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOTAModuleVersionsByDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOTAModuleVersionsByDevice(request: ListOTAModuleVersionsByDeviceRequest): ListOTAModuleVersionsByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAModuleVersionsByDeviceWithOptions(request, runtime);
}

model ListOTATaskByJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  taskStatus?: string(name='TaskStatus'),
  jobId?: string(name='JobId'),
  currentPage?: int32(name='CurrentPage'),
  deviceNames?: [ string ](name='DeviceNames'),
}

model ListOTATaskByJobResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  currentPage?: int32(name='CurrentPage'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      taskId?: string(name='TaskId'),
      utcModified?: string(name='UtcModified'),
      productKey?: string(name='ProductKey'),
      firmwareId?: string(name='FirmwareId'),
      taskStatus?: string(name='TaskStatus'),
      jobId?: string(name='JobId'),
      productName?: string(name='ProductName'),
      deviceName?: string(name='DeviceName'),
      srcVersion?: string(name='SrcVersion'),
      destVersion?: string(name='DestVersion'),
      taskDesc?: string(name='TaskDesc'),
      progress?: string(name='Progress'),
      iotId?: string(name='IotId'),
      utcCreate?: string(name='UtcCreate'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data'),
}

model ListOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListOTATaskByJobResponseBody(name='body'),
}

async function listOTATaskByJobWithOptions(request: ListOTATaskByJobRequest, runtime: Util.RuntimeOptions): ListOTATaskByJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListOTATaskByJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listOTATaskByJob(request: ListOTATaskByJobRequest): ListOTATaskByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTATaskByJobWithOptions(request, runtime);
}

model ListProductByTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  productTag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag'),
}

model ListProductByTagsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  productInfos?: {
    productInfo?: [ 
    {
      productName?: string(name='ProductName'),
      productKey?: string(name='ProductKey'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      nodeType?: int32(name='NodeType'),
    }
  ](name='ProductInfo')
  }(name='ProductInfos'),
}

model ListProductByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductByTagsResponseBody(name='body'),
}

async function listProductByTagsWithOptions(request: ListProductByTagsRequest, runtime: Util.RuntimeOptions): ListProductByTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListProductByTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listProductByTags(request: ListProductByTagsRequest): ListProductByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductByTagsWithOptions(request, runtime);
}

model ListProductTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model ListProductTagsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  data?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag')
  }(name='Data'),
}

model ListProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListProductTagsResponseBody(name='body'),
}

async function listProductTagsWithOptions(request: ListProductTagsRequest, runtime: Util.RuntimeOptions): ListProductTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListProductTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listProductTags(request: ListProductTagsRequest): ListProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductTagsWithOptions(request, runtime);
}

model ListRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  searchName?: string(name='SearchName'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  data?: {
    ruleInfo?: [ 
    {
      id?: long(name='Id'),
      select?: string(name='Select'),
      topic?: string(name='Topic'),
      shortTopic?: string(name='ShortTopic'),
      where?: string(name='Where'),
      status?: string(name='Status'),
      createUserId?: long(name='CreateUserId'),
      productKey?: string(name='ProductKey'),
      name?: string(name='Name'),
      dataType?: string(name='DataType'),
      ruleDesc?: string(name='RuleDesc'),
      created?: string(name='Created'),
      utcCreated?: string(name='UtcCreated'),
      modified?: string(name='Modified'),
      utcModified?: string(name='UtcModified'),
    }
  ](name='RuleInfo')
  }(name='Data'),
}

model ListRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleResponseBody(name='body'),
}

async function listRuleWithOptions(request: ListRuleRequest, runtime: Util.RuntimeOptions): ListRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRule(request: ListRuleRequest): ListRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleWithOptions(request, runtime);
}

model ListRuleActionsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: long(name='RuleId'),
}

model ListRuleActionsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  ruleActionList?: {
    ruleActionInfo?: [ 
    {
      id?: long(name='Id'),
      ruleId?: long(name='RuleId'),
      type?: string(name='Type'),
      configuration?: string(name='Configuration'),
      errorActionFlag?: boolean(name='ErrorActionFlag'),
    }
  ](name='RuleActionInfo')
  }(name='RuleActionList'),
}

model ListRuleActionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleActionsResponseBody(name='body'),
}

async function listRuleActionsWithOptions(request: ListRuleActionsRequest, runtime: Util.RuntimeOptions): ListRuleActionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRuleActions', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRuleActions(request: ListRuleActionsRequest): ListRuleActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleActionsWithOptions(request, runtime);
}

model ListTaskRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  limit?: int32(name='Limit'),
  jobId?: string(name='JobId'),
  nextToken?: string(name='NextToken'),
  device?: string(name='Device'),
  status?: string(name='Status'),
}

model ListTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken'),
  data?: {
    data?: [ 
    {
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      taskId?: string(name='TaskId'),
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      progress?: string(name='Progress'),
      utcQueueTime?: string(name='UtcQueueTime'),
      utcModified?: string(name='UtcModified'),
      status?: string(name='Status'),
    }
  ](name='data')
  }(name='Data'),
}

model ListTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskResponseBody(name='body'),
}

async function listTaskWithOptions(request: ListTaskRequest, runtime: Util.RuntimeOptions): ListTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTask', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTask(request: ListTaskRequest): ListTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskWithOptions(request, runtime);
}

model ListTaskByPageRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: string(name='PageSize'),
  pageNo?: string(name='PageNo'),
  jobId?: string(name='JobId'),
  device?: string(name='Device'),
  status?: string(name='Status'),
  deviceName?: string(name='DeviceName'),
  jobName?: string(name='JobName'),
}

model ListTaskByPageResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  page?: int32(name='Page'),
  data?: {
    data?: [ 
    {
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      taskId?: string(name='TaskId'),
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      progress?: int32(name='Progress'),
      utcQueueTime?: string(name='UtcQueueTime'),
      utcModified?: string(name='UtcModified'),
      statusDetail?: string(name='StatusDetail'),
      status?: string(name='Status'),
      productName?: string(name='ProductName'),
    }
  ](name='data')
  }(name='Data'),
}

model ListTaskByPageResponse = {
  headers: map[string]string(name='headers'),
  body: ListTaskByPageResponseBody(name='body'),
}

async function listTaskByPageWithOptions(request: ListTaskByPageRequest, runtime: Util.RuntimeOptions): ListTaskByPageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTaskByPage', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTaskByPage(request: ListTaskByPageRequest): ListTaskByPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskByPageWithOptions(request, runtime);
}

model ListThingModelVersionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  productKey?: string(name='ProductKey'),
}

model ListThingModelVersionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    modelVersions?: [ 
      {
        modelVersion?: string(name='ModelVersion'),
        description?: string(name='Description'),
        gmtCreate?: long(name='GmtCreate'),
      }
    ](name='ModelVersions'),
  }(name='Data'),
}

model ListThingModelVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ListThingModelVersionResponseBody(name='body'),
}

async function listThingModelVersionWithOptions(request: ListThingModelVersionRequest, runtime: Util.RuntimeOptions): ListThingModelVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListThingModelVersion', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listThingModelVersion(request: ListThingModelVersionRequest): ListThingModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listThingModelVersionWithOptions(request, runtime);
}

model ListThingTemplatesRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ListThingTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: [ 
    {
      categoryKey?: string(name='CategoryKey'),
      categoryName?: string(name='CategoryName'),
    }
  ](name='Data'),
}

model ListThingTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListThingTemplatesResponseBody(name='body'),
}

async function listThingTemplatesWithOptions(request: ListThingTemplatesRequest, runtime: Util.RuntimeOptions): ListThingTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListThingTemplates', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listThingTemplates(request: ListThingTemplatesRequest): ListThingTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listThingTemplatesWithOptions(request, runtime);
}

model NotifyAddThingTopoRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  deviceListStr?: string(name='DeviceListStr'),
  gwIotId?: string(name='GwIotId'),
  gwProductKey?: string(name='GwProductKey'),
  gwDeviceName?: string(name='GwDeviceName'),
}

model NotifyAddThingTopoResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  data?: {
    messageId?: string(name='MessageId'),
  }(name='Data'),
}

model NotifyAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: NotifyAddThingTopoResponseBody(name='body'),
}

async function notifyAddThingTopoWithOptions(request: NotifyAddThingTopoRequest, runtime: Util.RuntimeOptions): NotifyAddThingTopoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('NotifyAddThingTopo', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function notifyAddThingTopo(request: NotifyAddThingTopoRequest): NotifyAddThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return notifyAddThingTopoWithOptions(request, runtime);
}

model PubRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  qos?: int32(name='Qos'),
  topicFullName?: string(name='TopicFullName'),
  messageContent?: string(name='MessageContent'),
  responseTopic?: string(name='ResponseTopic'),
  correlationData?: string(name='CorrelationData'),
  userProp?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='UserProp'),
}

model PubResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: string(name='MessageId'),
}

model PubResponse = {
  headers: map[string]string(name='headers'),
  body: PubResponseBody(name='body'),
}

async function pubWithOptions(request: PubRequest, runtime: Util.RuntimeOptions): PubResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('Pub', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pub(request: PubRequest): PubResponse {
  var runtime = new Util.RuntimeOptions{};
  return pubWithOptions(request, runtime);
}

model PubBroadcastRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  topicFullName?: string(name='TopicFullName'),
  messageContent?: string(name='MessageContent'),
}

model PubBroadcastResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId'),
}

model PubBroadcastResponse = {
  headers: map[string]string(name='headers'),
  body: PubBroadcastResponseBody(name='body'),
}

async function pubBroadcastWithOptions(request: PubBroadcastRequest, runtime: Util.RuntimeOptions): PubBroadcastResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PubBroadcast', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pubBroadcast(request: PubBroadcastRequest): PubBroadcastResponse {
  var runtime = new Util.RuntimeOptions{};
  return pubBroadcastWithOptions(request, runtime);
}

model PublishThingModelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  productKey?: string(name='ProductKey'),
  modelVersion?: string(name='ModelVersion'),
  description?: string(name='Description'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model PublishThingModelResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model PublishThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: PublishThingModelResponseBody(name='body'),
}

async function publishThingModelWithOptions(request: PublishThingModelRequest, runtime: Util.RuntimeOptions): PublishThingModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishThingModel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishThingModel(request: PublishThingModelRequest): PublishThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishThingModelWithOptions(request, runtime);
}

model QueryAppDeviceListRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKeyList?: [ string ](name='ProductKeyList'),
  categoryKeyList?: [ string ](name='CategoryKeyList'),
  appKey?: string(name='AppKey'),
  tagList?: [ 
    {
      tagName?: string(name='TagName'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagList'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryAppDeviceListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  total?: int32(name='Total'),
  data?: {
    data?: [ 
    {
      productName?: string(name='ProductName'),
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      nodeType?: int32(name='NodeType'),
      status?: string(name='Status'),
      activeTime?: string(name='ActiveTime'),
      lastOnlineTime?: string(name='LastOnlineTime'),
      createTime?: string(name='CreateTime'),
      childDeviceCount?: long(name='ChildDeviceCount'),
      utcActiveTime?: string(name='UtcActiveTime'),
      utcLastOnlineTime?: string(name='UtcLastOnlineTime'),
      utcCreateTime?: string(name='UtcCreateTime'),
    }
  ](name='Data')
  }(name='Data'),
}

model QueryAppDeviceListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAppDeviceListResponseBody(name='body'),
}

async function queryAppDeviceListWithOptions(request: QueryAppDeviceListRequest, runtime: Util.RuntimeOptions): QueryAppDeviceListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAppDeviceList', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAppDeviceList(request: QueryAppDeviceListRequest): QueryAppDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppDeviceListWithOptions(request, runtime);
}

model QueryBatchRegisterDeviceStatusRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  applyId?: long(name='ApplyId'),
}

model QueryBatchRegisterDeviceStatusResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    status?: string(name='Status'),
    validList?: {
      name?: [ string ](name='Name')
    }(name='ValidList'),
    invalidList?: {
      name?: [ string ](name='Name')
    }(name='InvalidList'),
  }(name='Data'),
}

model QueryBatchRegisterDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBatchRegisterDeviceStatusResponseBody(name='body'),
}

async function queryBatchRegisterDeviceStatusWithOptions(request: QueryBatchRegisterDeviceStatusRequest, runtime: Util.RuntimeOptions): QueryBatchRegisterDeviceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryBatchRegisterDeviceStatus', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryBatchRegisterDeviceStatus(request: QueryBatchRegisterDeviceStatusRequest): QueryBatchRegisterDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBatchRegisterDeviceStatusWithOptions(request, runtime);
}

model QueryCertUrlByApplyIdRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  applyId?: long(name='ApplyId'),
}

model QueryCertUrlByApplyIdResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  certUrl?: string(name='CertUrl'),
}

model QueryCertUrlByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCertUrlByApplyIdResponseBody(name='body'),
}

async function queryCertUrlByApplyIdWithOptions(request: QueryCertUrlByApplyIdRequest, runtime: Util.RuntimeOptions): QueryCertUrlByApplyIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCertUrlByApplyId', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCertUrlByApplyId(request: QueryCertUrlByApplyIdRequest): QueryCertUrlByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCertUrlByApplyIdWithOptions(request, runtime);
}

model QueryClientIdsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotId?: string(name='IotId'),
  iotInstanceId?: string(name='IotInstanceId'),
  authConfig?: string(name='AuthConfig'),
}

model QueryClientIdsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    iotId?: string(name='IotId'),
    dynamicRegClientIds?: [ 
      {
        clientId?: string(name='ClientId'),
        createTime?: long(name='CreateTime'),
      }
    ](name='DynamicRegClientIds'),
  }(name='Data'),
}

model QueryClientIdsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryClientIdsResponseBody(name='body'),
}

async function queryClientIdsWithOptions(request: QueryClientIdsRequest, runtime: Util.RuntimeOptions): QueryClientIdsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryClientIds', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryClientIds(request: QueryClientIdsRequest): QueryClientIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClientIdsWithOptions(request, runtime);
}

model QueryConsumerGroupByGroupIdRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
}

model QueryConsumerGroupByGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  data?: {
    groupId?: string(name='GroupId'),
    groupName?: string(name='GroupName'),
    createTime?: string(name='CreateTime'),
  }(name='Data'),
}

model QueryConsumerGroupByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupByGroupIdResponseBody(name='body'),
}

async function queryConsumerGroupByGroupIdWithOptions(request: QueryConsumerGroupByGroupIdRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupByGroupIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryConsumerGroupByGroupId', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryConsumerGroupByGroupId(request: QueryConsumerGroupByGroupIdRequest): QueryConsumerGroupByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupByGroupIdWithOptions(request, runtime);
}

model QueryConsumerGroupListRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  fuzzy?: boolean(name='Fuzzy'),
  groupName?: string(name='GroupName'),
}

model QueryConsumerGroupListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  total?: int32(name='Total'),
  currentPage?: int32(name='CurrentPage'),
  code?: string(name='Code'),
  data?: {
    consumerGroupDTO?: [ 
    {
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      createTime?: string(name='CreateTime'),
    }
  ](name='ConsumerGroupDTO')
  }(name='Data'),
}

model QueryConsumerGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupListResponseBody(name='body'),
}

async function queryConsumerGroupListWithOptions(request: QueryConsumerGroupListRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryConsumerGroupList', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryConsumerGroupList(request: QueryConsumerGroupListRequest): QueryConsumerGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupListWithOptions(request, runtime);
}

model QueryConsumerGroupStatusRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
}

model QueryConsumerGroupStatusResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  accumulationCount?: int32(name='AccumulationCount'),
  consumerSpeed?: int32(name='ConsumerSpeed'),
  lastConsumerTime?: string(name='LastConsumerTime'),
  code?: string(name='Code'),
  clientConnectionStatusList?: {
    consumerGroupClientConnectionInfo?: [ 
    {
      clientId?: string(name='ClientId'),
      clientIpPort?: string(name='ClientIpPort'),
      onlineTime?: long(name='OnlineTime'),
    }
  ](name='ConsumerGroupClientConnectionInfo')
  }(name='ClientConnectionStatusList'),
}

model QueryConsumerGroupStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryConsumerGroupStatusResponseBody(name='body'),
}

async function queryConsumerGroupStatusWithOptions(request: QueryConsumerGroupStatusRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryConsumerGroupStatus', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryConsumerGroupStatus(request: QueryConsumerGroupStatusRequest): QueryConsumerGroupStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupStatusWithOptions(request, runtime);
}

model QueryDetailSceneRuleLogRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
  traceId?: string(name='TraceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryDetailSceneRuleLogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    logList?: [ 
      {
        code?: string(name='Code'),
        message?: string(name='Message'),
        pkDn?: string(name='PkDn'),
      }
    ](name='LogList'),
  }(name='Data'),
}

model QueryDetailSceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDetailSceneRuleLogResponseBody(name='body'),
}

async function queryDetailSceneRuleLogWithOptions(request: QueryDetailSceneRuleLogRequest, runtime: Util.RuntimeOptions): QueryDetailSceneRuleLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDetailSceneRuleLog', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDetailSceneRuleLog(request: QueryDetailSceneRuleLogRequest): QueryDetailSceneRuleLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDetailSceneRuleLogWithOptions(request, runtime);
}

model QueryDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  total?: int32(name='Total'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  page?: int32(name='Page'),
  data?: {
    deviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId'),
      deviceSecret?: string(name='DeviceSecret'),
      productKey?: string(name='ProductKey'),
      deviceStatus?: string(name='DeviceStatus'),
      deviceName?: string(name='DeviceName'),
      deviceType?: string(name='DeviceType'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
      iotId?: string(name='IotId'),
      nickname?: string(name='Nickname'),
    }
  ](name='DeviceInfo')
  }(name='Data'),
}

model QueryDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceResponseBody(name='body'),
}

async function queryDeviceWithOptions(request: QueryDeviceRequest, runtime: Util.RuntimeOptions): QueryDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDevice(request: QueryDeviceRequest): QueryDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceWithOptions(request, runtime);
}

model QueryDeviceBySQLRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  SQL?: string(name='SQL'),
}

model QueryDeviceBySQLResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  totalCount?: long(name='TotalCount'),
  data?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      nickname?: string(name='Nickname'),
      status?: string(name='Status'),
      activeTime?: string(name='ActiveTime'),
      iotId?: string(name='IotId'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      groups?: [ 
        {
          groupId?: string(name='GroupId'),
        }
      ](name='Groups'),
      tags?: [ 
        {
          tagName?: string(name='TagName'),
          tagValue?: string(name='TagValue'),
        }
      ](name='Tags'),
      OTAModules?: [ 
        {
          moduleName?: string(name='ModuleName'),
          firmwareVersion?: string(name='FirmwareVersion'),
        }
      ](name='OTAModules'),
    }
  ](name='Data'),
}

model QueryDeviceBySQLResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceBySQLResponseBody(name='body'),
}

async function queryDeviceBySQLWithOptions(request: QueryDeviceBySQLRequest, runtime: Util.RuntimeOptions): QueryDeviceBySQLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceBySQL', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceBySQL(request: QueryDeviceBySQLRequest): QueryDeviceBySQLResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceBySQLWithOptions(request, runtime);
}

model QueryDeviceByStatusRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  status?: int32(name='Status'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  bizTenantId?: string(name='BizTenantId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDeviceByStatusResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  total?: int32(name='Total'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      status?: string(name='Status'),
      iotId?: string(name='IotId'),
      nickname?: string(name='Nickname'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      utcCreate?: string(name='UtcCreate'),
      utcModified?: string(name='UtcModified'),
      deviceSecret?: string(name='DeviceSecret'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
}

model QueryDeviceByStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceByStatusResponseBody(name='body'),
}

async function queryDeviceByStatusWithOptions(request: QueryDeviceByStatusRequest, runtime: Util.RuntimeOptions): QueryDeviceByStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceByStatus', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceByStatus(request: QueryDeviceByStatusRequest): QueryDeviceByStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceByStatusWithOptions(request, runtime);
}

model QueryDeviceByTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  tag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryDeviceByTagsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  total?: int32(name='Total'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      productName?: string(name='ProductName'),
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
}

model QueryDeviceByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceByTagsResponseBody(name='body'),
}

async function queryDeviceByTagsWithOptions(request: QueryDeviceByTagsRequest, runtime: Util.RuntimeOptions): QueryDeviceByTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceByTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceByTags(request: QueryDeviceByTagsRequest): QueryDeviceByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceByTagsWithOptions(request, runtime);
}

model QueryDeviceCertRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
}

model QueryDeviceCertResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  deviceCertInfo?: {
    status?: int32(name='Status'),
    certificate?: string(name='Certificate'),
    privateKey?: string(name='PrivateKey'),
    certSN?: string(name='CertSN'),
  }(name='DeviceCertInfo'),
}

model QueryDeviceCertResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceCertResponseBody(name='body'),
}

async function queryDeviceCertWithOptions(request: QueryDeviceCertRequest, runtime: Util.RuntimeOptions): QueryDeviceCertResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceCert', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceCert(request: QueryDeviceCertRequest): QueryDeviceCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceCertWithOptions(request, runtime);
}

model QueryDeviceDesiredPropertyRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  identifier?: [ string ](name='Identifier'),
  iotId?: string(name='IotId'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDeviceDesiredPropertyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    list?: {
      desiredPropertyInfo?: [ 
      {
        unit?: string(name='Unit'),
        identifier?: string(name='Identifier'),
        dataType?: string(name='DataType'),
        time?: string(name='Time'),
        value?: string(name='Value'),
        name?: string(name='Name'),
        version?: long(name='Version'),
      }
    ](name='DesiredPropertyInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDesiredPropertyResponseBody(name='body'),
}

async function queryDeviceDesiredPropertyWithOptions(request: QueryDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): QueryDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceDesiredProperty', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceDesiredProperty(request: QueryDeviceDesiredPropertyRequest): QueryDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDesiredPropertyWithOptions(request, runtime);
}

model QueryDeviceDetailRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDeviceDetailResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    iotId?: string(name='IotId'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
    firmwareVersion?: string(name='FirmwareVersion'),
    gmtCreate?: string(name='GmtCreate'),
    utcCreate?: string(name='UtcCreate'),
    gmtActive?: string(name='GmtActive'),
    utcActive?: string(name='UtcActive'),
    gmtOnline?: string(name='GmtOnline'),
    utcOnline?: string(name='UtcOnline'),
    status?: string(name='Status'),
    ipAddress?: string(name='IpAddress'),
    nodeType?: int32(name='NodeType'),
    region?: string(name='Region'),
    owner?: boolean(name='Owner'),
    nickname?: string(name='Nickname'),
  }(name='Data'),
}

model QueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceDetailResponseBody(name='body'),
}

async function queryDeviceDetailWithOptions(request: QueryDeviceDetailRequest, runtime: Util.RuntimeOptions): QueryDeviceDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceDetail', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceDetail(request: QueryDeviceDetailRequest): QueryDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDetailWithOptions(request, runtime);
}

model QueryDeviceEventDataRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  startTime?: long(name='StartTime'),
  identifier?: string(name='Identifier'),
  eventType?: string(name='EventType'),
  asc?: int32(name='Asc'),
  iotId?: string(name='IotId'),
  endTime?: long(name='EndTime'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDeviceEventDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    nextTime?: long(name='NextTime'),
    nextValid?: boolean(name='NextValid'),
    list?: {
      eventInfo?: [ 
      {
        time?: string(name='Time'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        eventType?: string(name='EventType'),
        outputData?: string(name='OutputData'),
      }
    ](name='EventInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDeviceEventDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceEventDataResponseBody(name='body'),
}

async function queryDeviceEventDataWithOptions(request: QueryDeviceEventDataRequest, runtime: Util.RuntimeOptions): QueryDeviceEventDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceEventData', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceEventData(request: QueryDeviceEventDataRequest): QueryDeviceEventDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventDataWithOptions(request, runtime);
}

model QueryDeviceFileRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  fileId?: string(name='FileId'),
}

model QueryDeviceFileResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    fileId?: string(name='FileId'),
    name?: string(name='Name'),
    size?: string(name='Size'),
    utcCreatedOn?: string(name='UtcCreatedOn'),
    downloadUrl?: string(name='DownloadUrl'),
  }(name='Data'),
}

model QueryDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileResponseBody(name='body'),
}

async function queryDeviceFileWithOptions(request: QueryDeviceFileRequest, runtime: Util.RuntimeOptions): QueryDeviceFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceFile', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceFile(request: QueryDeviceFileRequest): QueryDeviceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileWithOptions(request, runtime);
}

model QueryDeviceFileListRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryDeviceFileListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  currentPage?: int32(name='CurrentPage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  total?: int32(name='Total'),
  data?: {
    fileSummary?: [ 
    {
      fileId?: string(name='FileId'),
      name?: string(name='Name'),
      size?: string(name='Size'),
      utcCreatedOn?: string(name='UtcCreatedOn'),
    }
  ](name='FileSummary')
  }(name='Data'),
}

model QueryDeviceFileListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceFileListResponseBody(name='body'),
}

async function queryDeviceFileListWithOptions(request: QueryDeviceFileListRequest, runtime: Util.RuntimeOptions): QueryDeviceFileListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceFileList', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceFileList(request: QueryDeviceFileListRequest): QueryDeviceFileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileListWithOptions(request, runtime);
}

model QueryDeviceGroupByDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
}

model QueryDeviceGroupByDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  groupInfos?: {
    groupInfo?: [ 
    {
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      utcCreate?: string(name='UtcCreate'),
      groupDesc?: string(name='GroupDesc'),
    }
  ](name='GroupInfo')
  }(name='GroupInfos'),
}

model QueryDeviceGroupByDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupByDeviceResponseBody(name='body'),
}

async function queryDeviceGroupByDeviceWithOptions(request: QueryDeviceGroupByDeviceRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupByDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceGroupByDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceGroupByDevice(request: QueryDeviceGroupByDeviceRequest): QueryDeviceGroupByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupByDeviceWithOptions(request, runtime);
}

model QueryDeviceGroupByTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  tag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryDeviceGroupByTagsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  total?: int32(name='Total'),
  data?: {
    deviceGroup?: [ 
    {
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
    }
  ](name='DeviceGroup')
  }(name='Data'),
}

model QueryDeviceGroupByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupByTagsResponseBody(name='body'),
}

async function queryDeviceGroupByTagsWithOptions(request: QueryDeviceGroupByTagsRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupByTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceGroupByTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceGroupByTags(request: QueryDeviceGroupByTagsRequest): QueryDeviceGroupByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupByTagsWithOptions(request, runtime);
}

model QueryDeviceGroupInfoRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDeviceGroupInfoResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    groupId?: string(name='GroupId'),
    utcCreate?: string(name='UtcCreate'),
    groupName?: string(name='GroupName'),
    groupDesc?: string(name='GroupDesc'),
    deviceCount?: int32(name='DeviceCount'),
    deviceActive?: int32(name='DeviceActive'),
    deviceOnline?: int32(name='DeviceOnline'),
  }(name='Data'),
}

model QueryDeviceGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupInfoResponseBody(name='body'),
}

async function queryDeviceGroupInfoWithOptions(request: QueryDeviceGroupInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceGroupInfo', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceGroupInfo(request: QueryDeviceGroupInfoRequest): QueryDeviceGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupInfoWithOptions(request, runtime);
}

model QueryDeviceGroupListRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  superGroupId?: string(name='SuperGroupId'),
  groupName?: string(name='GroupName'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryDeviceGroupListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  currentPage?: int32(name='CurrentPage'),
  pageCount?: int32(name='PageCount'),
  pageSize?: int32(name='PageSize'),
  total?: int32(name='Total'),
  data?: {
    groupInfo?: [ 
    {
      groupId?: string(name='GroupId'),
      utcCreate?: string(name='UtcCreate'),
      groupName?: string(name='GroupName'),
      groupDesc?: string(name='GroupDesc'),
    }
  ](name='GroupInfo')
  }(name='Data'),
}

model QueryDeviceGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupListResponseBody(name='body'),
}

async function queryDeviceGroupListWithOptions(request: QueryDeviceGroupListRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceGroupList', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceGroupList(request: QueryDeviceGroupListRequest): QueryDeviceGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupListWithOptions(request, runtime);
}

model QueryDeviceGroupTagListRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
}

model QueryDeviceGroupTagListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    groupTagInfo?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='GroupTagInfo')
  }(name='Data'),
}

model QueryDeviceGroupTagListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceGroupTagListResponseBody(name='body'),
}

async function queryDeviceGroupTagListWithOptions(request: QueryDeviceGroupTagListRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupTagListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceGroupTagList', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceGroupTagList(request: QueryDeviceGroupTagListRequest): QueryDeviceGroupTagListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupTagListWithOptions(request, runtime);
}

model QueryDeviceListByDeviceGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryDeviceListByDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  pageCount?: int32(name='PageCount'),
  total?: int32(name='Total'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      productName?: string(name='ProductName'),
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
}

model QueryDeviceListByDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceListByDeviceGroupResponseBody(name='body'),
}

async function queryDeviceListByDeviceGroupWithOptions(request: QueryDeviceListByDeviceGroupRequest, runtime: Util.RuntimeOptions): QueryDeviceListByDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceListByDeviceGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceListByDeviceGroup(request: QueryDeviceListByDeviceGroupRequest): QueryDeviceListByDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceListByDeviceGroupWithOptions(request, runtime);
}

model QueryDeviceOriginalEventDataRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  nextPageToken?: string(name='NextPageToken'),
  startTime?: long(name='StartTime'),
  identifier?: string(name='Identifier'),
  asc?: int32(name='Asc'),
  iotId?: string(name='IotId'),
  endTime?: long(name='EndTime'),
}

model QueryDeviceOriginalEventDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    nextPageToken?: string(name='NextPageToken'),
    nextValid?: boolean(name='NextValid'),
    list?: {
      eventInfo?: [ 
      {
        time?: string(name='Time'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        eventType?: string(name='EventType'),
        outputData?: string(name='OutputData'),
      }
    ](name='EventInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDeviceOriginalEventDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalEventDataResponseBody(name='body'),
}

async function queryDeviceOriginalEventDataWithOptions(request: QueryDeviceOriginalEventDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalEventDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceOriginalEventData', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceOriginalEventData(request: QueryDeviceOriginalEventDataRequest): QueryDeviceOriginalEventDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalEventDataWithOptions(request, runtime);
}

model QueryDeviceOriginalPropertyDataRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  nextPageToken?: string(name='NextPageToken'),
  startTime?: long(name='StartTime'),
  identifier?: string(name='Identifier'),
  asc?: int32(name='Asc'),
  iotId?: string(name='IotId'),
  endTime?: long(name='EndTime'),
}

model QueryDeviceOriginalPropertyDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    nextValid?: boolean(name='NextValid'),
    nextPageToken?: string(name='nextPageToken'),
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time'),
        value?: string(name='Value'),
      }
    ](name='PropertyInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDeviceOriginalPropertyDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalPropertyDataResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyDataWithOptions(request: QueryDeviceOriginalPropertyDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalPropertyDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceOriginalPropertyData', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceOriginalPropertyData(request: QueryDeviceOriginalPropertyDataRequest): QueryDeviceOriginalPropertyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalPropertyDataWithOptions(request, runtime);
}

model QueryDeviceOriginalPropertyStatusRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  nextPageToken?: string(name='NextPageToken'),
  iotId?: string(name='IotId'),
  asc?: int32(name='Asc'),
}

model QueryDeviceOriginalPropertyStatusResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    nextValid?: boolean(name='NextValid'),
    nextPageToken?: string(name='NextPageToken'),
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier'),
        value?: string(name='Value'),
        time?: long(name='Time'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDeviceOriginalPropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalPropertyStatusResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyStatusWithOptions(request: QueryDeviceOriginalPropertyStatusRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalPropertyStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceOriginalPropertyStatus', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceOriginalPropertyStatus(request: QueryDeviceOriginalPropertyStatusRequest): QueryDeviceOriginalPropertyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalPropertyStatusWithOptions(request, runtime);
}

model QueryDeviceOriginalServiceDataRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  nextPageToken?: string(name='NextPageToken'),
  startTime?: long(name='StartTime'),
  identifier?: string(name='Identifier'),
  asc?: int32(name='Asc'),
  iotId?: string(name='IotId'),
  endTime?: long(name='EndTime'),
}

model QueryDeviceOriginalServiceDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    nextPageToken?: string(name='NextPageToken'),
    nextValid?: boolean(name='NextValid'),
    list?: {
      serviceInfo?: [ 
      {
        time?: string(name='Time'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        inputData?: string(name='InputData'),
        outputData?: string(name='OutputData'),
      }
    ](name='ServiceInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDeviceOriginalServiceDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceOriginalServiceDataResponseBody(name='body'),
}

async function queryDeviceOriginalServiceDataWithOptions(request: QueryDeviceOriginalServiceDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalServiceDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceOriginalServiceData', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceOriginalServiceData(request: QueryDeviceOriginalServiceDataRequest): QueryDeviceOriginalServiceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalServiceDataWithOptions(request, runtime);
}

model QueryDevicePropRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDevicePropResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  props?: string(name='Props'),
}

model QueryDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropResponseBody(name='body'),
}

async function queryDevicePropWithOptions(request: QueryDevicePropRequest, runtime: Util.RuntimeOptions): QueryDevicePropResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceProp', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceProp(request: QueryDevicePropRequest): QueryDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropWithOptions(request, runtime);
}

model QueryDevicePropertiesDataRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  startTime?: long(name='StartTime'),
  identifier?: [ string ](name='Identifier'),
  asc?: int32(name='Asc'),
  iotId?: string(name='IotId'),
  endTime?: long(name='EndTime'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDevicePropertiesDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  nextValid?: boolean(name='NextValid'),
  nextTime?: long(name='NextTime'),
  propertyDataInfos?: {
    propertyDataInfo?: [ 
    {
      identifier?: string(name='Identifier'),
      list?: {
        propertyInfo?: [ 
        {
          time?: long(name='Time'),
          value?: string(name='Value'),
        }
      ](name='PropertyInfo')
      }(name='List'),
    }
  ](name='PropertyDataInfo')
  }(name='PropertyDataInfos'),
}

model QueryDevicePropertiesDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertiesDataResponseBody(name='body'),
}

async function queryDevicePropertiesDataWithOptions(request: QueryDevicePropertiesDataRequest, runtime: Util.RuntimeOptions): QueryDevicePropertiesDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDevicePropertiesData', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDevicePropertiesData(request: QueryDevicePropertiesDataRequest): QueryDevicePropertiesDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertiesDataWithOptions(request, runtime);
}

model QueryDevicePropertyDataRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  startTime?: long(name='StartTime'),
  identifier?: string(name='Identifier'),
  asc?: int32(name='Asc'),
  iotId?: string(name='IotId'),
  endTime?: long(name='EndTime'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDevicePropertyDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    nextValid?: boolean(name='NextValid'),
    nextTime?: long(name='NextTime'),
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time'),
        value?: string(name='Value'),
      }
    ](name='PropertyInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDevicePropertyDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertyDataResponseBody(name='body'),
}

async function queryDevicePropertyDataWithOptions(request: QueryDevicePropertyDataRequest, runtime: Util.RuntimeOptions): QueryDevicePropertyDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDevicePropertyData', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDevicePropertyData(request: QueryDevicePropertyDataRequest): QueryDevicePropertyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertyDataWithOptions(request, runtime);
}

model QueryDevicePropertyStatusRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDevicePropertyStatusResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    list?: {
      propertyStatusInfo?: [ 
      {
        unit?: string(name='Unit'),
        identifier?: string(name='Identifier'),
        dataType?: string(name='DataType'),
        time?: string(name='Time'),
        value?: string(name='Value'),
        name?: string(name='Name'),
      }
    ](name='PropertyStatusInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDevicePropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDevicePropertyStatusResponseBody(name='body'),
}

async function queryDevicePropertyStatusWithOptions(request: QueryDevicePropertyStatusRequest, runtime: Util.RuntimeOptions): QueryDevicePropertyStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDevicePropertyStatus', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDevicePropertyStatus(request: QueryDevicePropertyStatusRequest): QueryDevicePropertyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertyStatusWithOptions(request, runtime);
}

model QueryDeviceServiceDataRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  startTime?: long(name='StartTime'),
  identifier?: string(name='Identifier'),
  asc?: int32(name='Asc'),
  iotId?: string(name='IotId'),
  endTime?: long(name='EndTime'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDeviceServiceDataResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    nextTime?: long(name='NextTime'),
    nextValid?: boolean(name='NextValid'),
    list?: {
      serviceInfo?: [ 
      {
        time?: string(name='Time'),
        identifier?: string(name='Identifier'),
        name?: string(name='Name'),
        inputData?: string(name='InputData'),
        outputData?: string(name='OutputData'),
      }
    ](name='ServiceInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryDeviceServiceDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceServiceDataResponseBody(name='body'),
}

async function queryDeviceServiceDataWithOptions(request: QueryDeviceServiceDataRequest, runtime: Util.RuntimeOptions): QueryDeviceServiceDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceServiceData', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceServiceData(request: QueryDeviceServiceDataRequest): QueryDeviceServiceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceServiceDataWithOptions(request, runtime);
}

model QueryDeviceStatisticsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  groupId?: string(name='GroupId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryDeviceStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    deviceCount?: long(name='deviceCount'),
    onlineCount?: long(name='onlineCount'),
    activeCount?: long(name='activeCount'),
  }(name='Data'),
}

model QueryDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDeviceStatisticsResponseBody(name='body'),
}

async function queryDeviceStatisticsWithOptions(request: QueryDeviceStatisticsRequest, runtime: Util.RuntimeOptions): QueryDeviceStatisticsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDeviceStatistics', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDeviceStatistics(request: QueryDeviceStatisticsRequest): QueryDeviceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceStatisticsWithOptions(request, runtime);
}

model QueryEdgeDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  type?: int32(name='Type'),
  driverName?: string(name='DriverName'),
}

model QueryEdgeDriverResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    driverList?: [ 
      {
        driverId?: string(name='DriverId'),
        driverName?: string(name='DriverName'),
        driverProtocol?: string(name='DriverProtocol'),
        runtime?: string(name='Runtime'),
        cpuArch?: string(name='CpuArch'),
        type?: int32(name='Type'),
        isBuiltIn?: boolean(name='IsBuiltIn'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
      }
    ](name='DriverList'),
  }(name='Data'),
}

model QueryEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeDriverResponseBody(name='body'),
}

async function queryEdgeDriverWithOptions(request: QueryEdgeDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeDriver(request: QueryEdgeDriverRequest): QueryEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeDriverWithOptions(request, runtime);
}

model QueryEdgeDriverVersionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  driverId?: string(name='DriverId'),
  driverVersion?: string(name='DriverVersion'),
  versionState?: int32(name='VersionState'),
}

model QueryEdgeDriverVersionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    driverVersionList?: [ 
      {
        driverId?: string(name='DriverId'),
        driverVersion?: string(name='DriverVersion'),
        versionState?: string(name='VersionState'),
        edgeVersion?: string(name='EdgeVersion'),
        description?: string(name='Description'),
        sourceConfig?: string(name='SourceConfig'),
        driverConfig?: string(name='DriverConfig'),
        containerConfig?: string(name='ContainerConfig'),
        configCheckRule?: string(name='ConfigCheckRule'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        argument?: string(name='Argument'),
      }
    ](name='DriverVersionList'),
  }(name='Data'),
}

model QueryEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeDriverVersionResponseBody(name='body'),
}

async function queryEdgeDriverVersionWithOptions(request: QueryEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): QueryEdgeDriverVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeDriverVersion', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeDriverVersion(request: QueryEdgeDriverVersionRequest): QueryEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeDriverVersionWithOptions(request, runtime);
}

model QueryEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
  name?: string(name='Name'),
}

model QueryEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    instanceList?: [ 
      {
        instanceId?: string(name='InstanceId'),
        name?: string(name='Name'),
        tags?: string(name='Tags'),
        type?: int32(name='Type'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        roleArn?: string(name='RoleArn'),
        roleName?: string(name='RoleName'),
        roleAttachTime?: string(name='RoleAttachTime'),
        spec?: int32(name='Spec'),
        bizEnable?: boolean(name='BizEnable'),
        latestDeploymentStatus?: int32(name='LatestDeploymentStatus'),
        latestDeploymentType?: string(name='LatestDeploymentType'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        roleAttachTimestamp?: long(name='RoleAttachTimestamp'),
      }
    ](name='InstanceList'),
  }(name='Data'),
}

model QueryEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceResponseBody(name='body'),
}

async function queryEdgeInstanceWithOptions(request: QueryEdgeInstanceRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstance(request: QueryEdgeInstanceRequest): QueryEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceWithOptions(request, runtime);
}

model QueryEdgeInstanceChannelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  channelName?: string(name='ChannelName'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryEdgeInstanceChannelResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    channelList?: {
      channel?: [ 
      {
        channelId?: string(name='ChannelId'),
        channelName?: string(name='ChannelName'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        configList?: {
          config?: [ 
          {
            configId?: string(name='ConfigId'),
            format?: string(name='Format'),
            content?: string(name='Content'),
            key?: string(name='Key'),
          }
        ](name='Config')
        }(name='ConfigList'),
      }
    ](name='Channel')
    }(name='ChannelList'),
  }(name='Data'),
}

model QueryEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceChannelResponseBody(name='body'),
}

async function queryEdgeInstanceChannelWithOptions(request: QueryEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstanceChannel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstanceChannel(request: QueryEdgeInstanceChannelRequest): QueryEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceChannelWithOptions(request, runtime);
}

model QueryEdgeInstanceDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryEdgeInstanceDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    deviceList?: [ 
      {
        iotId?: string(name='IotId'),
        productKey?: string(name='ProductKey'),
        deviceName?: string(name='DeviceName'),
        driverId?: string(name='DriverId'),
      }
    ](name='DeviceList'),
  }(name='Data'),
}

model QueryEdgeInstanceDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDeviceResponseBody(name='body'),
}

async function queryEdgeInstanceDeviceWithOptions(request: QueryEdgeInstanceDeviceRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstanceDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstanceDevice(request: QueryEdgeInstanceDeviceRequest): QueryEdgeInstanceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDeviceWithOptions(request, runtime);
}

model QueryEdgeInstanceDeviceByDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  instanceId?: string(name='InstanceId'),
  channelId?: string(name='ChannelId'),
  driverId?: string(name='DriverId'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryEdgeInstanceDeviceByDriverResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    deviceList?: [ 
      {
        iotId?: string(name='IotId'),
      }
    ](name='DeviceList'),
  }(name='Data'),
}

model QueryEdgeInstanceDeviceByDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDeviceByDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDeviceByDriverWithOptions(request: QueryEdgeInstanceDeviceByDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDeviceByDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstanceDeviceByDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstanceDeviceByDriver(request: QueryEdgeInstanceDeviceByDriverRequest): QueryEdgeInstanceDeviceByDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDeviceByDriverWithOptions(request, runtime);
}

model QueryEdgeInstanceDriverRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryEdgeInstanceDriverResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    driverList?: [ 
      {
        driverId?: string(name='DriverId'),
        driverVersion?: string(name='DriverVersion'),
        orderId?: string(name='OrderId'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
      }
    ](name='DriverList'),
  }(name='Data'),
}

model QueryEdgeInstanceDriverResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDriverWithOptions(request: QueryEdgeInstanceDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDriverResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstanceDriver', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstanceDriver(request: QueryEdgeInstanceDriverRequest): QueryEdgeInstanceDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDriverWithOptions(request, runtime);
}

model QueryEdgeInstanceGatewayRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
}

model QueryEdgeInstanceGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  gatewayList?: [ 
    {
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      edgeVersion?: string(name='EdgeVersion'),
    }
  ](name='GatewayList'),
}

model QueryEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceGatewayResponseBody(name='body'),
}

async function queryEdgeInstanceGatewayWithOptions(request: QueryEdgeInstanceGatewayRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceGatewayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstanceGateway', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstanceGateway(request: QueryEdgeInstanceGatewayRequest): QueryEdgeInstanceGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceGatewayWithOptions(request, runtime);
}

model QueryEdgeInstanceHistoricDeploymentRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model QueryEdgeInstanceHistoricDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    deploymentList?: [ 
      {
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        gmtCompleted?: string(name='GmtCompleted'),
        deploymentId?: string(name='DeploymentId'),
        description?: string(name='Description'),
        status?: int32(name='Status'),
        type?: string(name='Type'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp'),
      }
    ](name='DeploymentList'),
  }(name='Data'),
}

model QueryEdgeInstanceHistoricDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceHistoricDeploymentResponseBody(name='body'),
}

async function queryEdgeInstanceHistoricDeploymentWithOptions(request: QueryEdgeInstanceHistoricDeploymentRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceHistoricDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstanceHistoricDeployment', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstanceHistoricDeployment(request: QueryEdgeInstanceHistoricDeploymentRequest): QueryEdgeInstanceHistoricDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceHistoricDeploymentWithOptions(request, runtime);
}

model QueryEdgeInstanceSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  currentPage?: int32(name='CurrentPage'),
  pageSize?: int32(name='PageSize'),
}

model QueryEdgeInstanceSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    ruleList?: [ 
      {
        ruleId?: string(name='RuleId'),
        ruleName?: string(name='RuleName'),
        gmtCreate?: long(name='GmtCreate'),
        status?: int32(name='Status'),
        isExisted?: int32(name='IsExisted'),
      }
    ](name='RuleList'),
  }(name='Data'),
}

model QueryEdgeInstanceSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEdgeInstanceSceneRuleResponseBody(name='body'),
}

async function queryEdgeInstanceSceneRuleWithOptions(request: QueryEdgeInstanceSceneRuleRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEdgeInstanceSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEdgeInstanceSceneRule(request: QueryEdgeInstanceSceneRuleRequest): QueryEdgeInstanceSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceSceneRuleWithOptions(request, runtime);
}

model QueryJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  jobId?: string(name='JobId'),
}

model QueryJobResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    jobId?: string(name='JobId'),
    jobName?: string(name='JobName'),
    utcCreate?: string(name='UtcCreate'),
    status?: string(name='Status'),
    description?: string(name='Description'),
    type?: string(name='Type'),
    jobDocument?: string(name='JobDocument'),
    utcModified?: string(name='UtcModified'),
    rolloutConfig?: {
      maximumPerMinute?: int32(name='MaximumPerMinute'),
    }(name='RolloutConfig'),
    timeoutConfig?: {
      inProgressTimeoutInMinutes?: int32(name='InProgressTimeoutInMinutes'),
    }(name='TimeoutConfig'),
    jobFile?: {
      fileUrl?: string(name='FileUrl'),
      signMethod?: string(name='SignMethod'),
      sign?: string(name='Sign'),
    }(name='JobFile'),
    targetConfig?: {
      targetGroup?: string(name='TargetGroup'),
      targetProduct?: string(name='TargetProduct'),
      targetType?: string(name='TargetType'),
      targetDevices?: {
        targetDevices?: [ 
        {
          productKey?: string(name='ProductKey'),
          deviceName?: string(name='DeviceName'),
        }
      ](name='targetDevices')
      }(name='TargetDevices'),
    }(name='TargetConfig'),
  }(name='Data'),
}

model QueryJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobResponseBody(name='body'),
}

async function queryJobWithOptions(request: QueryJobRequest, runtime: Util.RuntimeOptions): QueryJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryJob(request: QueryJobRequest): QueryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobWithOptions(request, runtime);
}

model QueryJobStatisticsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  jobId?: string(name='JobId'),
}

model QueryJobStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    queued?: int32(name='Queued'),
    sent?: int32(name='Sent'),
    inProgress?: int32(name='InProgress'),
    succeeded?: int32(name='Succeeded'),
    failed?: int32(name='Failed'),
    rejected?: int32(name='Rejected'),
    timeOut?: int32(name='TimeOut'),
    cancelled?: int32(name='Cancelled'),
  }(name='Data'),
}

model QueryJobStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryJobStatisticsResponseBody(name='body'),
}

async function queryJobStatisticsWithOptions(request: QueryJobStatisticsRequest, runtime: Util.RuntimeOptions): QueryJobStatisticsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryJobStatistics', '2018-01-20', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryJobStatistics(request: QueryJobStatisticsRequest): QueryJobStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobStatisticsWithOptions(request, runtime);
}

model QueryLoRaJoinPermissionsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model QueryLoRaJoinPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey'),
  joinPermissions?: {
    joinPermission?: [ 
    {
      joinPermissionId?: string(name='JoinPermissionId'),
      joinPermissionName?: string(name='JoinPermissionName'),
      joinPermissionType?: string(name='JoinPermissionType'),
      ownerAliyunPk?: string(name='OwnerAliyunPk'),
      enabled?: boolean(name='Enabled'),
      classMode?: string(name='ClassMode'),
    }
  ](name='JoinPermission')
  }(name='JoinPermissions'),
}

model QueryLoRaJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLoRaJoinPermissionsResponseBody(name='body'),
}

async function queryLoRaJoinPermissionsWithOptions(request: QueryLoRaJoinPermissionsRequest, runtime: Util.RuntimeOptions): QueryLoRaJoinPermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryLoRaJoinPermissions', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryLoRaJoinPermissions(request: QueryLoRaJoinPermissionsRequest): QueryLoRaJoinPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLoRaJoinPermissionsWithOptions(request, runtime);
}

model QueryOTAFirmwareRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  firmwareId?: string(name='FirmwareId'),
}

model QueryOTAFirmwareResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  firmwareInfo?: {
    firmwareName?: string(name='FirmwareName'),
    firmwareId?: string(name='FirmwareId'),
    srcVersion?: string(name='SrcVersion'),
    destVersion?: string(name='DestVersion'),
    utcCreate?: string(name='UtcCreate'),
    utcModified?: string(name='UtcModified'),
    status?: int32(name='Status'),
    firmwareDesc?: string(name='FirmwareDesc'),
    firmwareSign?: string(name='FirmwareSign'),
    firmwareSize?: int32(name='FirmwareSize'),
    firmwareUrl?: string(name='FirmwareUrl'),
    productKey?: string(name='ProductKey'),
    signMethod?: string(name='SignMethod'),
    productName?: string(name='ProductName'),
    type?: int32(name='Type'),
    verifyProgress?: int32(name='VerifyProgress'),
    moduleName?: string(name='ModuleName'),
  }(name='FirmwareInfo'),
}

model QueryOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOTAFirmwareResponseBody(name='body'),
}

async function queryOTAFirmwareWithOptions(request: QueryOTAFirmwareRequest, runtime: Util.RuntimeOptions): QueryOTAFirmwareResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryOTAFirmware', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryOTAFirmware(request: QueryOTAFirmwareRequest): QueryOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOTAFirmwareWithOptions(request, runtime);
}

model QueryOTAJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  jobId?: string(name='JobId'),
}

model QueryOTAJobResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    jobId?: string(name='JobId'),
    utcCreate?: string(name='UtcCreate'),
    utcModified?: string(name='UtcModified'),
    productKey?: string(name='ProductKey'),
    firmwareId?: string(name='FirmwareId'),
    utcStartTime?: string(name='UtcStartTime'),
    utcEndTime?: string(name='UtcEndTime'),
    jobStatus?: string(name='JobStatus'),
    jobType?: string(name='JobType'),
    jobDesc?: string(name='JobDesc'),
    name?: string(name='Name'),
    utcScheduleTime?: string(name='UtcScheduleTime'),
    retryInterval?: int32(name='RetryInterval'),
    retryCount?: int32(name='RetryCount'),
    timeoutInMinutes?: int32(name='TimeoutInMinutes'),
    targetSelection?: string(name='TargetSelection'),
    selectionType?: string(name='SelectionType'),
    grayPercent?: string(name='GrayPercent'),
    maximumPerMinute?: int32(name='MaximumPerMinute'),
    destVersion?: string(name='DestVersion'),
    utcScheduleFinishTime?: string(name='UtcScheduleFinishTime'),
    overwriteMode?: int32(name='OverwriteMode'),
    dynamicMode?: int32(name='DynamicMode'),
    srcVersions?: {
      srcVersion?: [ string ](name='SrcVersion')
    }(name='SrcVersions'),
    tags?: {
      otaTagDTO?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='OtaTagDTO')
    }(name='Tags'),
  }(name='Data'),
}

model QueryOTAJobResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOTAJobResponseBody(name='body'),
}

async function queryOTAJobWithOptions(request: QueryOTAJobRequest, runtime: Util.RuntimeOptions): QueryOTAJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryOTAJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryOTAJob(request: QueryOTAJobRequest): QueryOTAJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOTAJobWithOptions(request, runtime);
}

model QueryPageByApplyIdRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  applyId?: long(name='ApplyId'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryPageByApplyIdResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  pageSize?: int32(name='PageSize'),
  page?: int32(name='Page'),
  pageCount?: int32(name='PageCount'),
  total?: int32(name='Total'),
  applyDeviceList?: {
    applyDeviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId'),
      deviceName?: string(name='DeviceName'),
      deviceSecret?: string(name='DeviceSecret'),
      iotId?: string(name='IotId'),
    }
  ](name='ApplyDeviceInfo')
  }(name='ApplyDeviceList'),
}

model QueryPageByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPageByApplyIdResponseBody(name='body'),
}

async function queryPageByApplyIdWithOptions(request: QueryPageByApplyIdRequest, runtime: Util.RuntimeOptions): QueryPageByApplyIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPageByApplyId', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPageByApplyId(request: QueryPageByApplyIdRequest): QueryPageByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPageByApplyIdWithOptions(request, runtime);
}

model QueryProductRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryProductResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    gmtCreate?: long(name='GmtCreate'),
    dataFormat?: int32(name='DataFormat'),
    description?: string(name='Description'),
    deviceCount?: int32(name='DeviceCount'),
    nodeType?: int32(name='NodeType'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
    productSecret?: string(name='ProductSecret'),
    categoryName?: string(name='CategoryName'),
    categoryKey?: string(name='CategoryKey'),
    aliyunCommodityCode?: string(name='AliyunCommodityCode'),
    id2?: boolean(name='Id2'),
    protocolType?: string(name='ProtocolType'),
    productStatus?: string(name='ProductStatus'),
    owner?: boolean(name='Owner'),
    netType?: int32(name='NetType'),
    authType?: string(name='AuthType'),
    validateType?: int32(name='ValidateType'),
  }(name='Data'),
}

model QueryProductResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductResponseBody(name='body'),
}

async function queryProductWithOptions(request: QueryProductRequest, runtime: Util.RuntimeOptions): QueryProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryProduct', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryProduct(request: QueryProductRequest): QueryProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductWithOptions(request, runtime);
}

model QueryProductCertInfoRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model QueryProductCertInfoResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  productCertInfo?: {
    issueModel?: int32(name='IssueModel'),
  }(name='ProductCertInfo'),
}

model QueryProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductCertInfoResponseBody(name='body'),
}

async function queryProductCertInfoWithOptions(request: QueryProductCertInfoRequest, runtime: Util.RuntimeOptions): QueryProductCertInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryProductCertInfo', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryProductCertInfo(request: QueryProductCertInfoRequest): QueryProductCertInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductCertInfoWithOptions(request, runtime);
}

model QueryProductListRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  aliyunCommodityCode?: string(name='AliyunCommodityCode'),
  currentPage?: int32(name='CurrentPage'),
}

model QueryProductListResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    list?: {
      productInfo?: [ 
      {
        gmtCreate?: long(name='GmtCreate'),
        dataFormat?: int32(name='DataFormat'),
        description?: string(name='Description'),
        deviceCount?: int32(name='DeviceCount'),
        nodeType?: int32(name='NodeType'),
        productKey?: string(name='ProductKey'),
        productName?: string(name='ProductName'),
        authType?: string(name='AuthType'),
      }
    ](name='ProductInfo')
    }(name='List'),
  }(name='Data'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductListWithOptions(request: QueryProductListRequest, runtime: Util.RuntimeOptions): QueryProductListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryProductList', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductListWithOptions(request, runtime);
}

model QueryProductTopicRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model QueryProductTopicResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    productTopicInfo?: [ 
    {
      productKey?: string(name='ProductKey'),
      topicShortName?: string(name='TopicShortName'),
      operation?: string(name='Operation'),
      desc?: string(name='Desc'),
      id?: string(name='Id'),
    }
  ](name='ProductTopicInfo')
  }(name='Data'),
}

model QueryProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductTopicResponseBody(name='body'),
}

async function queryProductTopicWithOptions(request: QueryProductTopicRequest, runtime: Util.RuntimeOptions): QueryProductTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryProductTopic', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryProductTopic(request: QueryProductTopicRequest): QueryProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductTopicWithOptions(request, runtime);
}

model QuerySceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleName?: string(name='RuleName'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QuerySceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    ruleList?: [ 
      {
        ruleId?: string(name='RuleId'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        ruleName?: string(name='RuleName'),
        ruleDescription?: string(name='RuleDescription'),
        ruleStatus?: int32(name='RuleStatus'),
      }
    ](name='RuleList'),
  }(name='Data'),
}

model QuerySceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySceneRuleResponseBody(name='body'),
}

async function querySceneRuleWithOptions(request: QuerySceneRuleRequest, runtime: Util.RuntimeOptions): QuerySceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySceneRule(request: QuerySceneRuleRequest): QuerySceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneRuleWithOptions(request, runtime);
}

model QuerySubscribeRelationRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  type?: string(name='Type'),
}

model QuerySubscribeRelationResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey'),
  type?: string(name='Type'),
  deviceDataFlag?: boolean(name='DeviceDataFlag'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag'),
  otaEventFlag?: boolean(name='OtaEventFlag'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag'),
  mnsConfiguration?: string(name='MnsConfiguration'),
  deviceTagFlag?: boolean(name='DeviceTagFlag'),
  otaVersionFlag?: boolean(name='OtaVersionFlag'),
  otaJobFlag?: boolean(name='OtaJobFlag'),
  consumerGroupIds?: [ string ](name='ConsumerGroupIds'),
}

model QuerySubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySubscribeRelationResponseBody(name='body'),
}

async function querySubscribeRelationWithOptions(request: QuerySubscribeRelationRequest, runtime: Util.RuntimeOptions): QuerySubscribeRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySubscribeRelation', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySubscribeRelation(request: QuerySubscribeRelationRequest): QuerySubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubscribeRelationWithOptions(request, runtime);
}

model QuerySummarySceneRuleLogRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
  startTime?: int32(name='StartTime'),
  endTime?: int32(name='EndTime'),
  status?: string(name='Status'),
  pageSize?: int32(name='PageSize'),
  currentPage?: int32(name='CurrentPage'),
}

model QuerySummarySceneRuleLogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  data?: {
    total?: int32(name='Total'),
    pageSize?: int32(name='PageSize'),
    currentPage?: int32(name='CurrentPage'),
    logList?: {
      logInfo?: [ 
      {
        logTime?: int32(name='LogTime'),
        result?: string(name='Result'),
        traceId?: string(name='TraceId'),
      }
    ](name='LogInfo')
    }(name='LogList'),
  }(name='Data'),
}

model QuerySummarySceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySummarySceneRuleLogResponseBody(name='body'),
}

async function querySummarySceneRuleLogWithOptions(request: QuerySummarySceneRuleLogRequest, runtime: Util.RuntimeOptions): QuerySummarySceneRuleLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySummarySceneRuleLog', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySummarySceneRuleLog(request: QuerySummarySceneRuleLogRequest): QuerySummarySceneRuleLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySummarySceneRuleLogWithOptions(request, runtime);
}

model QuerySuperDeviceGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
}

model QuerySuperDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    groupInfo?: [ 
    {
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      groupDesc?: string(name='GroupDesc'),
    }
  ](name='GroupInfo')
  }(name='Data'),
}

model QuerySuperDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySuperDeviceGroupResponseBody(name='body'),
}

async function querySuperDeviceGroupWithOptions(request: QuerySuperDeviceGroupRequest, runtime: Util.RuntimeOptions): QuerySuperDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySuperDeviceGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySuperDeviceGroup(request: QuerySuperDeviceGroupRequest): QuerySuperDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySuperDeviceGroupWithOptions(request, runtime);
}

model QueryTaskRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  taskId?: string(name='TaskId'),
}

model QueryTaskResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    data?: [ 
    {
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      taskId?: string(name='TaskId'),
      productKey?: string(name='ProductKey'),
      deviceName?: string(name='DeviceName'),
      iotId?: string(name='IotId'),
      progress?: string(name='Progress'),
      utcQueueTime?: string(name='UtcQueueTime'),
      utcModified?: string(name='UtcModified'),
      statusDetail?: string(name='StatusDetail'),
      status?: string(name='Status'),
      message?: string(name='Message'),
    }
  ](name='data')
  }(name='Data'),
}

model QueryTaskResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskResponseBody(name='body'),
}

async function queryTaskWithOptions(request: QueryTaskRequest, runtime: Util.RuntimeOptions): QueryTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTask', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTask(request: QueryTaskRequest): QueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskWithOptions(request, runtime);
}

model QueryThingModelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  productKey?: string(name='ProductKey'),
  modelVersion?: string(name='ModelVersion'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryThingModelResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
}

model QueryThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelResponseBody(name='body'),
}

async function queryThingModelWithOptions(request: QueryThingModelRequest, runtime: Util.RuntimeOptions): QueryThingModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryThingModel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryThingModel(request: QueryThingModelRequest): QueryThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelWithOptions(request, runtime);
}

model QueryThingModelExtendConfigRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  resourceGroupId?: string(name='ResourceGroupId'),
  modelVersion?: string(name='ModelVersion'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryThingModelExtendConfigResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    configuration?: string(name='Configuration'),
  }(name='Data'),
}

model QueryThingModelExtendConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelExtendConfigResponseBody(name='body'),
}

async function queryThingModelExtendConfigWithOptions(request: QueryThingModelExtendConfigRequest, runtime: Util.RuntimeOptions): QueryThingModelExtendConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryThingModelExtendConfig', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryThingModelExtendConfig(request: QueryThingModelExtendConfigRequest): QueryThingModelExtendConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelExtendConfigWithOptions(request, runtime);
}

model QueryThingModelExtendConfigPublishedRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  modelVersion?: string(name='ModelVersion'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryThingModelExtendConfigPublishedResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    configuration?: string(name='Configuration'),
  }(name='Data'),
}

model QueryThingModelExtendConfigPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelExtendConfigPublishedResponseBody(name='body'),
}

async function queryThingModelExtendConfigPublishedWithOptions(request: QueryThingModelExtendConfigPublishedRequest, runtime: Util.RuntimeOptions): QueryThingModelExtendConfigPublishedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryThingModelExtendConfigPublished', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryThingModelExtendConfigPublished(request: QueryThingModelExtendConfigPublishedRequest): QueryThingModelExtendConfigPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelExtendConfigPublishedWithOptions(request, runtime);
}

model QueryThingModelPublishedRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  resourceGroupId?: string(name='ResourceGroupId'),
  modelVersion?: string(name='ModelVersion'),
  functionBlockId?: string(name='FunctionBlockId'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model QueryThingModelPublishedResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
}

model QueryThingModelPublishedResponse = {
  headers: map[string]string(name='headers'),
  body: QueryThingModelPublishedResponseBody(name='body'),
}

async function queryThingModelPublishedWithOptions(request: QueryThingModelPublishedRequest, runtime: Util.RuntimeOptions): QueryThingModelPublishedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryThingModelPublished', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryThingModelPublished(request: QueryThingModelPublishedRequest): QueryThingModelPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelPublishedWithOptions(request, runtime);
}

model QueryTopicReverseRouteTableRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  regionId?: string(name='RegionId'),
  topic?: string(name='Topic'),
}

model QueryTopicReverseRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  srcTopics?: {
    topic?: [ map[string]string ](name='Topic')
  }(name='SrcTopics'),
}

model QueryTopicReverseRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTopicReverseRouteTableResponseBody(name='body'),
}

async function queryTopicReverseRouteTableWithOptions(request: QueryTopicReverseRouteTableRequest, runtime: Util.RuntimeOptions): QueryTopicReverseRouteTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTopicReverseRouteTable', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTopicReverseRouteTable(request: QueryTopicReverseRouteTableRequest): QueryTopicReverseRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopicReverseRouteTableWithOptions(request, runtime);
}

model QueryTopicRouteTableRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  topic?: string(name='Topic'),
}

model QueryTopicRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  dstTopics?: {
    topic?: [ map[string]string ](name='Topic')
  }(name='DstTopics'),
}

model QueryTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTopicRouteTableResponseBody(name='body'),
}

async function queryTopicRouteTableWithOptions(request: QueryTopicRouteTableRequest, runtime: Util.RuntimeOptions): QueryTopicRouteTableResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTopicRouteTable', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTopicRouteTable(request: QueryTopicRouteTableRequest): QueryTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopicRouteTableWithOptions(request, runtime);
}

model RegisterDeviceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  devEui?: string(name='DevEui'),
  nickname?: string(name='Nickname'),
  pinCode?: string(name='PinCode'),
  joinEui?: string(name='JoinEui'),
  appKey?: string(name='AppKey'),
  loraNodeType?: string(name='LoraNodeType'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model RegisterDeviceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    iotId?: string(name='IotId'),
    productKey?: string(name='ProductKey'),
    deviceName?: string(name='DeviceName'),
    deviceSecret?: string(name='DeviceSecret'),
    devEui?: string(name='DevEui'),
    joinEui?: string(name='JoinEui'),
    nickname?: string(name='Nickname'),
  }(name='Data'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterDevice', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model ReleaseEdgeDriverVersionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverId?: string(name='DriverId'),
  driverVersion?: string(name='DriverVersion'),
}

model ReleaseEdgeDriverVersionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model ReleaseEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEdgeDriverVersionResponseBody(name='body'),
}

async function releaseEdgeDriverVersionWithOptions(request: ReleaseEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): ReleaseEdgeDriverVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseEdgeDriverVersion', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseEdgeDriverVersion(request: ReleaseEdgeDriverVersionRequest): ReleaseEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEdgeDriverVersionWithOptions(request, runtime);
}

model RemoveThingTopoRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
}

model RemoveThingTopoResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: boolean(name='Data'),
}

model RemoveThingTopoResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveThingTopoResponseBody(name='body'),
}

async function removeThingTopoWithOptions(request: RemoveThingTopoRequest, runtime: Util.RuntimeOptions): RemoveThingTopoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveThingTopo', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeThingTopo(request: RemoveThingTopoRequest): RemoveThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeThingTopoWithOptions(request, runtime);
}

model ReplaceEdgeInstanceGatewayRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  currentGatewayId?: string(name='CurrentGatewayId'),
  newGatewayId?: string(name='NewGatewayId'),
}

model ReplaceEdgeInstanceGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model ReplaceEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceEdgeInstanceGatewayResponseBody(name='body'),
}

async function replaceEdgeInstanceGatewayWithOptions(request: ReplaceEdgeInstanceGatewayRequest, runtime: Util.RuntimeOptions): ReplaceEdgeInstanceGatewayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReplaceEdgeInstanceGateway', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function replaceEdgeInstanceGateway(request: ReplaceEdgeInstanceGatewayRequest): ReplaceEdgeInstanceGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceEdgeInstanceGatewayWithOptions(request, runtime);
}

model ResetConsumerGroupPositionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
}

model ResetConsumerGroupPositionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
}

model ResetConsumerGroupPositionResponse = {
  headers: map[string]string(name='headers'),
  body: ResetConsumerGroupPositionResponseBody(name='body'),
}

async function resetConsumerGroupPositionWithOptions(request: ResetConsumerGroupPositionRequest, runtime: Util.RuntimeOptions): ResetConsumerGroupPositionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetConsumerGroupPosition', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetConsumerGroupPosition(request: ResetConsumerGroupPositionRequest): ResetConsumerGroupPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetConsumerGroupPositionWithOptions(request, runtime);
}

model ResetThingRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
}

model ResetThingResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model ResetThingResponse = {
  headers: map[string]string(name='headers'),
  body: ResetThingResponseBody(name='body'),
}

async function resetThingWithOptions(request: ResetThingRequest, runtime: Util.RuntimeOptions): ResetThingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetThing', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetThing(request: ResetThingRequest): ResetThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetThingWithOptions(request, runtime);
}

model RRpcRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  timeout?: int32(name='Timeout'),
  requestBase64Byte?: string(name='RequestBase64Byte'),
  topic?: string(name='Topic'),
}

model RRpcResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  rrpcCode?: string(name='RrpcCode'),
  payloadBase64Byte?: string(name='PayloadBase64Byte'),
  messageId?: long(name='MessageId'),
}

model RRpcResponse = {
  headers: map[string]string(name='headers'),
  body: RRpcResponseBody(name='body'),
}

async function rRpcWithOptions(request: RRpcRequest, runtime: Util.RuntimeOptions): RRpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RRpc', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rRpc(request: RRpcRequest): RRpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return rRpcWithOptions(request, runtime);
}

model SaveDevicePropRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  props?: string(name='Props'),
  iotId?: string(name='IotId'),
}

model SaveDevicePropResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model SaveDevicePropResponse = {
  headers: map[string]string(name='headers'),
  body: SaveDevicePropResponseBody(name='body'),
}

async function saveDevicePropWithOptions(request: SaveDevicePropRequest, runtime: Util.RuntimeOptions): SaveDevicePropResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveDeviceProp', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveDeviceProp(request: SaveDevicePropRequest): SaveDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDevicePropWithOptions(request, runtime);
}

model SetDeviceDesiredPropertyRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  iotId?: string(name='IotId'),
  deviceName?: string(name='DeviceName'),
  productKey?: string(name='ProductKey'),
  items?: string(name='Items'),
  versions?: string(name='Versions'),
}

model SetDeviceDesiredPropertyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  data?: {
    messageId?: string(name='MessageId'),
    versions?: string(name='Versions'),
  }(name='Data'),
}

model SetDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceDesiredPropertyResponseBody(name='body'),
}

async function setDeviceDesiredPropertyWithOptions(request: SetDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): SetDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDeviceDesiredProperty', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDeviceDesiredProperty(request: SetDeviceDesiredPropertyRequest): SetDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceDesiredPropertyWithOptions(request, runtime);
}

model SetDeviceGroupTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
  tagString?: string(name='TagString'),
}

model SetDeviceGroupTagsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model SetDeviceGroupTagsResponse = {
  headers: map[string]string(name='headers'),
  body: SetDeviceGroupTagsResponseBody(name='body'),
}

async function setDeviceGroupTagsWithOptions(request: SetDeviceGroupTagsRequest, runtime: Util.RuntimeOptions): SetDeviceGroupTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDeviceGroupTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDeviceGroupTags(request: SetDeviceGroupTagsRequest): SetDeviceGroupTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceGroupTagsWithOptions(request, runtime);
}

model SetDevicePropertyRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  iotId?: string(name='IotId'),
  items?: string(name='Items'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model SetDevicePropertyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  data?: {
    messageId?: string(name='MessageId'),
  }(name='Data'),
}

model SetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicePropertyResponseBody(name='body'),
}

async function setDevicePropertyWithOptions(request: SetDevicePropertyRequest, runtime: Util.RuntimeOptions): SetDevicePropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDeviceProperty', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDeviceProperty(request: SetDevicePropertyRequest): SetDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicePropertyWithOptions(request, runtime);
}

model SetDevicesPropertyRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  deviceName?: [ string ](name='DeviceName'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  items?: string(name='Items'),
}

model SetDevicesPropertyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
}

model SetDevicesPropertyResponse = {
  headers: map[string]string(name='headers'),
  body: SetDevicesPropertyResponseBody(name='body'),
}

async function setDevicesPropertyWithOptions(request: SetDevicesPropertyRequest, runtime: Util.RuntimeOptions): SetDevicesPropertyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDevicesProperty', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDevicesProperty(request: SetDevicesPropertyRequest): SetDevicesPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicesPropertyWithOptions(request, runtime);
}

model SetEdgeInstanceDriverConfigsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  configs?: [ 
    {
      format?: string(name='Format'),
      content?: string(name='Content'),
      key?: string(name='Key'),
    }
  ](name='Configs'),
}

model SetEdgeInstanceDriverConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model SetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: SetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function setEdgeInstanceDriverConfigsWithOptions(request: SetEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): SetEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetEdgeInstanceDriverConfigs', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setEdgeInstanceDriverConfigs(request: SetEdgeInstanceDriverConfigsRequest): SetEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model SetProductCertInfoRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  issueModel?: int32(name='IssueModel'),
}

model SetProductCertInfoResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model SetProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetProductCertInfoResponseBody(name='body'),
}

async function setProductCertInfoWithOptions(request: SetProductCertInfoRequest, runtime: Util.RuntimeOptions): SetProductCertInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetProductCertInfo', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setProductCertInfo(request: SetProductCertInfoRequest): SetProductCertInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return setProductCertInfoWithOptions(request, runtime);
}

model SpeechByCombinationRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  combinationList?: [ string ](name='CombinationList'),
  iotId?: string(name='IotId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
}

model SpeechByCombinationResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model SpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  body: SpeechByCombinationResponseBody(name='body'),
}

async function speechByCombinationWithOptions(request: SpeechByCombinationRequest, runtime: Util.RuntimeOptions): SpeechByCombinationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SpeechByCombination', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function speechByCombination(request: SpeechByCombinationRequest): SpeechByCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return speechByCombinationWithOptions(request, runtime);
}

model StartCpuRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  targetValue?: string(name='TargetValue'),
  iotId?: string(name='IotId'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model StartCpuResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  data?: {
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    timeZone?: string(name='TimeZone'),
    iotInstanceId?: string(name='IotInstanceId'),
  }(name='Data'),
}

model StartCpuResponse = {
  headers: map[string]string(name='headers'),
  body: StartCpuResponseBody(name='body'),
}

async function startCpuWithOptions(request: StartCpuRequest, runtime: Util.RuntimeOptions): StartCpuResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartCpu', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startCpu(request: StartCpuRequest): StartCpuResponse {
  var runtime = new Util.RuntimeOptions{};
  return startCpuWithOptions(request, runtime);
}

model StartRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: long(name='RuleId'),
}

model StartRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model StartRuleResponse = {
  headers: map[string]string(name='headers'),
  body: StartRuleResponseBody(name='body'),
}

async function startRuleWithOptions(request: StartRuleRequest, runtime: Util.RuntimeOptions): StartRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startRule(request: StartRuleRequest): StartRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRuleWithOptions(request, runtime);
}

model StopRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: long(name='RuleId'),
}

model StopRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model StopRuleResponse = {
  headers: map[string]string(name='headers'),
  body: StopRuleResponseBody(name='body'),
}

async function stopRuleWithOptions(request: StopRuleRequest, runtime: Util.RuntimeOptions): StopRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopRule(request: StopRuleRequest): StopRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRuleWithOptions(request, runtime);
}

model TransformClientIdRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotId?: string(name='IotId'),
  clientId?: string(name='ClientId'),
  iotInstanceId?: string(name='IotInstanceId'),
  authConfig?: string(name='AuthConfig'),
}

model TransformClientIdResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model TransformClientIdResponse = {
  headers: map[string]string(name='headers'),
  body: TransformClientIdResponseBody(name='body'),
}

async function transformClientIdWithOptions(request: TransformClientIdRequest, runtime: Util.RuntimeOptions): TransformClientIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TransformClientId', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function transformClientId(request: TransformClientIdRequest): TransformClientIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformClientIdWithOptions(request, runtime);
}

model TriggerSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
  instanceId?: string(name='InstanceId'),
}

model TriggerSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
}

model TriggerSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerSceneRuleResponseBody(name='body'),
}

async function triggerSceneRuleWithOptions(request: TriggerSceneRuleRequest, runtime: Util.RuntimeOptions): TriggerSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TriggerSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function triggerSceneRule(request: TriggerSceneRuleRequest): TriggerSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerSceneRuleWithOptions(request, runtime);
}

model UnbindApplicationFromEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  applicationId?: string(name='ApplicationId'),
}

model UnbindApplicationFromEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UnbindApplicationFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindApplicationFromEdgeInstanceResponseBody(name='body'),
}

async function unbindApplicationFromEdgeInstanceWithOptions(request: UnbindApplicationFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindApplicationFromEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindApplicationFromEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindApplicationFromEdgeInstance(request: UnbindApplicationFromEdgeInstanceRequest): UnbindApplicationFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindApplicationFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindDriverFromEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
}

model UnbindDriverFromEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UnbindDriverFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindDriverFromEdgeInstanceResponseBody(name='body'),
}

async function unbindDriverFromEdgeInstanceWithOptions(request: UnbindDriverFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindDriverFromEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindDriverFromEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindDriverFromEdgeInstance(request: UnbindDriverFromEdgeInstanceRequest): UnbindDriverFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindDriverFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindRoleFromEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
}

model UnbindRoleFromEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UnbindRoleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindRoleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindRoleFromEdgeInstanceWithOptions(request: UnbindRoleFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindRoleFromEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindRoleFromEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindRoleFromEdgeInstance(request: UnbindRoleFromEdgeInstanceRequest): UnbindRoleFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindRoleFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindSceneRuleFromEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  ruleId?: string(name='RuleId'),
}

model UnbindSceneRuleFromEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UnbindSceneRuleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindSceneRuleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindSceneRuleFromEdgeInstanceWithOptions(request: UnbindSceneRuleFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindSceneRuleFromEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnbindSceneRuleFromEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unbindSceneRuleFromEdgeInstance(request: UnbindSceneRuleFromEdgeInstanceRequest): UnbindSceneRuleFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSceneRuleFromEdgeInstanceWithOptions(request, runtime);
}

model UpdateConsumerGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  newGroupName?: string(name='NewGroupName'),
  groupId?: string(name='GroupId'),
}

model UpdateConsumerGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

async function updateConsumerGroupWithOptions(request: UpdateConsumerGroupRequest, runtime: Util.RuntimeOptions): UpdateConsumerGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateConsumerGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConsumerGroupWithOptions(request, runtime);
}

model UpdateDeviceGroupRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  groupId?: string(name='GroupId'),
  groupDesc?: string(name='GroupDesc'),
}

model UpdateDeviceGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceGroupResponseBody(name='body'),
}

async function updateDeviceGroupWithOptions(request: UpdateDeviceGroupRequest, runtime: Util.RuntimeOptions): UpdateDeviceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceGroup', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceGroup(request: UpdateDeviceGroupRequest): UpdateDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceGroupWithOptions(request, runtime);
}

model UpdateDeviceShadowRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  deviceName?: string(name='DeviceName'),
  shadowMessage?: string(name='ShadowMessage'),
  deltaUpdate?: boolean(name='DeltaUpdate'),
}

model UpdateDeviceShadowResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDeviceShadowResponseBody(name='body'),
}

async function updateDeviceShadowWithOptions(request: UpdateDeviceShadowRequest, runtime: Util.RuntimeOptions): UpdateDeviceShadowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDeviceShadow', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDeviceShadow(request: UpdateDeviceShadowRequest): UpdateDeviceShadowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceShadowWithOptions(request, runtime);
}

model UpdateEdgeDriverVersionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  driverId?: string(name='DriverId'),
  driverVersion?: string(name='DriverVersion'),
  edgeVersion?: string(name='EdgeVersion'),
  description?: string(name='Description'),
  sourceConfig?: string(name='SourceConfig'),
  driverConfig?: string(name='DriverConfig'),
  containerConfig?: string(name='ContainerConfig'),
  configCheckRule?: string(name='ConfigCheckRule'),
  argument?: string(name='Argument'),
}

model UpdateEdgeDriverVersionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeDriverVersionResponseBody(name='body'),
}

async function updateEdgeDriverVersionWithOptions(request: UpdateEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): UpdateEdgeDriverVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateEdgeDriverVersion', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateEdgeDriverVersion(request: UpdateEdgeDriverVersionRequest): UpdateEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeDriverVersionWithOptions(request, runtime);
}

model UpdateEdgeInstanceRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  tags?: string(name='Tags'),
  spec?: int32(name='Spec'),
  bizEnable?: boolean(name='BizEnable'),
}

model UpdateEdgeInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceResponseBody(name='body'),
}

async function updateEdgeInstanceWithOptions(request: UpdateEdgeInstanceRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateEdgeInstance', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateEdgeInstance(request: UpdateEdgeInstanceRequest): UpdateEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceWithOptions(request, runtime);
}

model UpdateEdgeInstanceChannelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  instanceId?: string(name='InstanceId'),
  driverId?: string(name='DriverId'),
  channelId?: string(name='ChannelId'),
  channelName?: string(name='ChannelName'),
  configs?: [ 
    {
      format?: string(name='Format'),
      content?: string(name='Content'),
      key?: string(name='Key'),
    }
  ](name='Configs'),
}

model UpdateEdgeInstanceChannelResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEdgeInstanceChannelResponseBody(name='body'),
}

async function updateEdgeInstanceChannelWithOptions(request: UpdateEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateEdgeInstanceChannel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateEdgeInstanceChannel(request: UpdateEdgeInstanceChannelRequest): UpdateEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceChannelWithOptions(request, runtime);
}

model UpdateJobRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  description?: string(name='Description'),
  timeoutConfig?: string(name='TimeoutConfig'),
  rolloutConfig?: string(name='RolloutConfig'),
  jobId?: string(name='JobId'),
}

model UpdateJobResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJobWithOptions(request: UpdateJobRequest, runtime: Util.RuntimeOptions): UpdateJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateJob', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateJobWithOptions(request, runtime);
}

model UpdateOTAModuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  aliasName?: string(name='AliasName'),
  iotInstanceId?: string(name='IotInstanceId'),
  moduleName?: string(name='ModuleName'),
  desc?: string(name='Desc'),
  productKey?: string(name='ProductKey'),
}

model UpdateOTAModuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOTAModuleResponseBody(name='body'),
}

async function updateOTAModuleWithOptions(request: UpdateOTAModuleRequest, runtime: Util.RuntimeOptions): UpdateOTAModuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateOTAModule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateOTAModule(request: UpdateOTAModuleRequest): UpdateOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOTAModuleWithOptions(request, runtime);
}

model UpdateProductRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  description?: string(name='Description'),
  productKey?: string(name='ProductKey'),
  productName?: string(name='ProductName'),
}

model UpdateProductResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProductWithOptions(request: UpdateProductRequest, runtime: Util.RuntimeOptions): UpdateProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProduct', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductWithOptions(request, runtime);
}

model UpdateProductFilterConfigRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  propertyTimestampFilter?: boolean(name='PropertyTimestampFilter'),
  propertyValueFilter?: boolean(name='PropertyValueFilter'),
}

model UpdateProductFilterConfigResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateProductFilterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductFilterConfigResponseBody(name='body'),
}

async function updateProductFilterConfigWithOptions(request: UpdateProductFilterConfigRequest, runtime: Util.RuntimeOptions): UpdateProductFilterConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProductFilterConfig', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProductFilterConfig(request: UpdateProductFilterConfigRequest): UpdateProductFilterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductFilterConfigWithOptions(request, runtime);
}

model UpdateProductTagsRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  productTag?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='ProductTag'),
}

model UpdateProductTagsResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
}

model UpdateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductTagsResponseBody(name='body'),
}

async function updateProductTagsWithOptions(request: UpdateProductTagsRequest, runtime: Util.RuntimeOptions): UpdateProductTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProductTags', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProductTags(request: UpdateProductTagsRequest): UpdateProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductTagsWithOptions(request, runtime);
}

model UpdateProductTopicRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  desc?: string(name='Desc'),
  operation?: string(name='Operation'),
  topicShortName?: string(name='TopicShortName'),
  topicId?: string(name='TopicId'),
}

model UpdateProductTopicResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateProductTopicResponseBody(name='body'),
}

async function updateProductTopicWithOptions(request: UpdateProductTopicRequest, runtime: Util.RuntimeOptions): UpdateProductTopicResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateProductTopic', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateProductTopic(request: UpdateProductTopicRequest): UpdateProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductTopicWithOptions(request, runtime);
}

model UpdateRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: long(name='RuleId'),
  select?: string(name='Select'),
  shortTopic?: string(name='ShortTopic'),
  where?: string(name='Where'),
  productKey?: string(name='ProductKey'),
  name?: string(name='Name'),
  ruleDesc?: string(name='RuleDesc'),
  topicType?: int32(name='TopicType'),
  topic?: string(name='Topic'),
}

model UpdateRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleResponseBody(name='body'),
}

async function updateRuleWithOptions(request: UpdateRuleRequest, runtime: Util.RuntimeOptions): UpdateRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleWithOptions(request, runtime);
}

model UpdateRuleActionRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  actionId?: long(name='ActionId'),
  type?: string(name='Type'),
  configuration?: string(name='Configuration'),
}

model UpdateRuleActionResponseBody = {
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRuleActionResponseBody(name='body'),
}

async function updateRuleActionWithOptions(request: UpdateRuleActionRequest, runtime: Util.RuntimeOptions): UpdateRuleActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateRuleAction', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateRuleAction(request: UpdateRuleActionRequest): UpdateRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleActionWithOptions(request, runtime);
}

model UpdateSceneRuleRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  ruleId?: string(name='RuleId'),
  ruleName?: string(name='RuleName'),
  ruleContent?: string(name='RuleContent'),
  ruleDescription?: string(name='RuleDescription'),
}

model UpdateSceneRuleResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSceneRuleResponseBody(name='body'),
}

async function updateSceneRuleWithOptions(request: UpdateSceneRuleRequest, runtime: Util.RuntimeOptions): UpdateSceneRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSceneRule', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSceneRule(request: UpdateSceneRuleRequest): UpdateSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSceneRuleWithOptions(request, runtime);
}

model UpdateSubscribeRelationRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag'),
  iotInstanceId?: string(name='IotInstanceId'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag'),
  productKey?: string(name='ProductKey'),
  type?: string(name='Type'),
  deviceDataFlag?: boolean(name='DeviceDataFlag'),
  consumerGroupIds?: [ string ](name='ConsumerGroupIds'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag'),
  otaEventFlag?: boolean(name='OtaEventFlag'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag'),
  mnsConfiguration?: string(name='MnsConfiguration'),
  deviceTagFlag?: boolean(name='DeviceTagFlag'),
  otaVersionFlag?: boolean(name='OtaVersionFlag'),
  otaJobFlag?: boolean(name='OtaJobFlag'),
}

model UpdateSubscribeRelationResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSubscribeRelationResponseBody(name='body'),
}

async function updateSubscribeRelationWithOptions(request: UpdateSubscribeRelationRequest, runtime: Util.RuntimeOptions): UpdateSubscribeRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateSubscribeRelation', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateSubscribeRelation(request: UpdateSubscribeRelationRequest): UpdateSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSubscribeRelationWithOptions(request, runtime);
}

model UpdateThingModelRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  identifier?: string(name='Identifier'),
  thingModelJson?: string(name='ThingModelJson'),
  functionBlockId?: string(name='FunctionBlockId'),
  functionBlockName?: string(name='FunctionBlockName'),
  realTenantId?: string(name='RealTenantId'),
  realTripartiteKey?: string(name='RealTripartiteKey'),
}

model UpdateThingModelResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateThingModelResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingModelResponseBody(name='body'),
}

async function updateThingModelWithOptions(request: UpdateThingModelRequest, runtime: Util.RuntimeOptions): UpdateThingModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateThingModel', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateThingModel(request: UpdateThingModelRequest): UpdateThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateThingModelWithOptions(request, runtime);
}

model UpdateThingModelValidationConfigRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  validateType?: int32(name='ValidateType'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model UpdateThingModelValidationConfigResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateThingModelValidationConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingModelValidationConfigResponseBody(name='body'),
}

async function updateThingModelValidationConfigWithOptions(request: UpdateThingModelValidationConfigRequest, runtime: Util.RuntimeOptions): UpdateThingModelValidationConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateThingModelValidationConfig', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateThingModelValidationConfig(request: UpdateThingModelValidationConfigRequest): UpdateThingModelValidationConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateThingModelValidationConfigWithOptions(request, runtime);
}

model UpdateThingScriptRequest {
  apiProduct?: string(name='ApiProduct'),
  apiRevision?: string(name='ApiRevision'),
  scriptContent?: string(name='ScriptContent'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  scriptType?: string(name='ScriptType'),
}

model UpdateThingScriptResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
}

model UpdateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateThingScriptResponseBody(name='body'),
}

async function updateThingScriptWithOptions(request: UpdateThingScriptRequest, runtime: Util.RuntimeOptions): UpdateThingScriptResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateThingScript', '2018-01-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateThingScript(request: UpdateThingScriptRequest): UpdateThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateThingScriptWithOptions(request, runtime);
}

