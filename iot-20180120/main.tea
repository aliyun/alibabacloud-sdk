/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'iot.aliyuncs.com',
    ap-south-1 = 'iot.aliyuncs.com',
    ap-southeast-2 = 'iot.aliyuncs.com',
    ap-southeast-3 = 'iot.aliyuncs.com',
    ap-southeast-5 = 'iot.aliyuncs.com',
    cn-beijing-finance-1 = 'iot.aliyuncs.com',
    cn-beijing-finance-pop = 'iot.aliyuncs.com',
    cn-beijing-gov-1 = 'iot.aliyuncs.com',
    cn-beijing-nu16-b01 = 'iot.aliyuncs.com',
    cn-chengdu = 'iot.aliyuncs.com',
    cn-edge-1 = 'iot.aliyuncs.com',
    cn-fujian = 'iot.aliyuncs.com',
    cn-haidian-cm12-c01 = 'iot.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'iot.aliyuncs.com',
    cn-hangzhou-finance = 'iot.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'iot.aliyuncs.com',
    cn-hangzhou-test-306 = 'iot.aliyuncs.com',
    cn-hongkong = 'iot.aliyuncs.com',
    cn-hongkong-finance-pop = 'iot.aliyuncs.com',
    cn-huhehaote = 'iot.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'iot.aliyuncs.com',
    cn-qingdao = 'iot.aliyuncs.com',
    cn-qingdao-nebula = 'iot.aliyuncs.com',
    cn-shanghai-et15-b01 = 'iot.aliyuncs.com',
    cn-shanghai-et2-b01 = 'iot.aliyuncs.com',
    cn-shanghai-finance-1 = 'iot.aliyuncs.com',
    cn-shanghai-inner = 'iot.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'iot.aliyuncs.com',
    cn-shenzhen-finance-1 = 'iot.aliyuncs.com',
    cn-shenzhen-inner = 'iot.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'iot.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'iot.aliyuncs.com',
    cn-wuhan = 'iot.aliyuncs.com',
    cn-wulanchabu = 'iot.aliyuncs.com',
    cn-yushanfang = 'iot.aliyuncs.com',
    cn-zhangbei = 'iot.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'iot.aliyuncs.com',
    cn-zhangjiakou = 'iot.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'iot.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'iot.aliyuncs.com',
    eu-west-1 = 'iot.aliyuncs.com',
    eu-west-1-oxs = 'iot.aliyuncs.com',
    me-east-1 = 'iot.aliyuncs.com',
    rus-west-1-pop = 'iot.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('iot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDataForApiSourceRequest {
  apiId?: string(name='ApiId', example='cxatswiniekxw***'),
  content?: string(name='Content', example='{"key":"value","ts":16376582*****}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n*****'),
}

model AddDataForApiSourceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: long(name='Data', example='1234567890'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09934561E'),
  success?: boolean(name='Success', example='true'),
}

model AddDataForApiSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataForApiSourceResponseBody(name='body'),
}

async function addDataForApiSourceWithOptions(request: AddDataForApiSourceRequest, runtime: Util.RuntimeOptions): AddDataForApiSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDataForApiSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDataForApiSource(request: AddDataForApiSourceRequest): AddDataForApiSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDataForApiSourceWithOptions(request, runtime);
}

model AddShareTaskDeviceRequest {
  iotIdList?: [ string ](name='IotIdList', example='y4u2weAIrpp****WHMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64********'),
  productKey?: string(name='ProductKey', example='a2YwD23***'),
  shareTaskId?: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********'),
}

model AddShareTaskDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    progress?: int32(name='Progress', example='100'),
    progressId?: string(name='ProgressId', example='Md3ZiTL888K9llXDy7890***********'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model AddShareTaskDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddShareTaskDeviceResponseBody(name='body'),
}

async function addShareTaskDeviceWithOptions(request: AddShareTaskDeviceRequest, runtime: Util.RuntimeOptions): AddShareTaskDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotIdList)) {
    body['IotIdList'] = request.iotIdList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.shareTaskId)) {
    body['ShareTaskId'] = request.shareTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddShareTaskDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addShareTaskDevice(request: AddShareTaskDeviceRequest): AddShareTaskDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addShareTaskDeviceWithOptions(request, runtime);
}

model AttachDestinationRequest {
  destinationId?: long(name='DestinationId', example='1002'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  isFailover?: boolean(name='IsFailover', example='false'),
  parserId?: long(name='ParserId', example='1000'),
}

model AttachDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model AttachDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachDestinationResponseBody(name='body'),
}

async function attachDestinationWithOptions(request: AttachDestinationRequest, runtime: Util.RuntimeOptions): AttachDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isFailover)) {
    query['IsFailover'] = request.isFailover;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachDestination(request: AttachDestinationRequest): AttachDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDestinationWithOptions(request, runtime);
}

model AttachParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  parserId?: long(name='ParserId', example='1000'),
}

model AttachParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model AttachParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachParserDataSourceResponseBody(name='body'),
}

async function attachParserDataSourceWithOptions(request: AttachParserDataSourceRequest, runtime: Util.RuntimeOptions): AttachParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachParserDataSource(request: AttachParserDataSourceRequest): AttachParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachParserDataSourceWithOptions(request, runtime);
}

model BatchAddDataForApiSourceRequest {
  apiId?: string(name='ApiId', example='cxatswiniekxw***'),
  contentList?: map[string]any(name='ContentList', example='[{"key":"value1","ts":1637658286000},{"key":"value2","ts":1637658287000}]'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n*****'),
}

model BatchAddDataForApiSourceShrinkRequest {
  apiId?: string(name='ApiId', example='cxatswiniekxw***'),
  contentListShrink?: string(name='ContentList', example='[{"key":"value1","ts":1637658286000},{"key":"value2","ts":1637658287000}]'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n*****'),
}

model BatchAddDataForApiSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: map[string]any(name='Data', example='{"count":2,"hasNext":false,"items":[{"key":"value1","ts":1637658286000,"id":1234567890},{"key":"value2","ts":1637658287000,"id":1234567891}],"pageNum":1,"pageSize":2}'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model BatchAddDataForApiSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddDataForApiSourceResponseBody(name='body'),
}

async function batchAddDataForApiSourceWithOptions(tmpReq: BatchAddDataForApiSourceRequest, runtime: Util.RuntimeOptions): BatchAddDataForApiSourceResponse {
  Util.validateModel(tmpReq);
  var request = new BatchAddDataForApiSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contentList)) {
    request.contentListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contentList, 'ContentList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.contentListShrink)) {
    query['ContentList'] = request.contentListShrink;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddDataForApiSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAddDataForApiSource(request: BatchAddDataForApiSourceRequest): BatchAddDataForApiSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddDataForApiSourceWithOptions(request, runtime);
}

model BatchAddDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName?: string(name='DeviceName', example='ZHuPo6sZzv7pOzYh****'),
      productKey?: string(name='ProductKey', example='a1kORrK****'),
    }
  ](name='Device'),
  groupId?: string(name='GroupId', example='6VfhebLg5iUe****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchAddDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount', example='0'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  exceedTenGroupDeviceCount?: int32(name='ExceedTenGroupDeviceCount', example='0'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
  successAddedDeviceCount?: int32(name='SuccessAddedDeviceCount', example='2'),
  validDeviceCount?: int32(name='ValidDeviceCount', example='2'),
}

model BatchAddDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddDeviceGroupRelationsResponseBody(name='body'),
}

async function batchAddDeviceGroupRelationsWithOptions(request: BatchAddDeviceGroupRelationsRequest, runtime: Util.RuntimeOptions): BatchAddDeviceGroupRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.device)) {
    query['Device'] = request.device;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddDeviceGroupRelations',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAddDeviceGroupRelations(request: BatchAddDeviceGroupRelationsRequest): BatchAddDeviceGroupRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddDeviceGroupRelationsWithOptions(request, runtime);
}

model BatchAddThingTopoRequest {
  gwDeviceName?: string(name='GwDeviceName', example='gateway'),
  gwProductKey?: string(name='GwProductKey', example='a1vL7cp****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  topoAddItem?: [ 
    {
      clientId?: string(name='ClientId', example='a1BwAGV****device1'),
      deviceName?: string(name='DeviceName', example='light'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      sign?: string(name='Sign', example='C1C1606D61884C5F16C9EA6622E5****'),
      signMethod?: string(name='SignMethod', example='hmacMd5'),
      timestamp?: string(name='Timestamp', example='1579335899000'),
    }
  ](name='TopoAddItem'),
}

model BatchAddThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddThingTopoResponseBody(name='body'),
}

async function batchAddThingTopoWithOptions(request: BatchAddThingTopoRequest, runtime: Util.RuntimeOptions): BatchAddThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gwDeviceName)) {
    query['GwDeviceName'] = request.gwDeviceName;
  }
  if (!Util.isUnset(request.gwProductKey)) {
    query['GwProductKey'] = request.gwProductKey;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.topoAddItem)) {
    query['TopoAddItem'] = request.topoAddItem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAddThingTopo(request: BatchAddThingTopoRequest): BatchAddThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddThingTopoWithOptions(request, runtime);
}

model BatchBindDeviceToEdgeInstanceWithDriverRequest {
  driverId?: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='BFFA9519-6AF1-4D15-AFAF-FD412714C1BE'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody(name='body'),
}

async function batchBindDeviceToEdgeInstanceWithDriverWithOptions(request: BatchBindDeviceToEdgeInstanceWithDriverRequest, runtime: Util.RuntimeOptions): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindDeviceToEdgeInstanceWithDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindDeviceToEdgeInstanceWithDriver(request: BatchBindDeviceToEdgeInstanceWithDriverRequest): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindDeviceToEdgeInstanceWithDriverWithOptions(request, runtime);
}

model BatchBindDevicesIntoProjectRequest {
  devices?: [ 
    {
      deviceName?: string(name='DeviceName', example='Ee2******'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='Devices'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model BatchBindDevicesIntoProjectResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindDevicesIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchBindDevicesIntoProjectResponseBody(name='body'),
}

async function batchBindDevicesIntoProjectWithOptions(request: BatchBindDevicesIntoProjectRequest, runtime: Util.RuntimeOptions): BatchBindDevicesIntoProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.devices)) {
    body['Devices'] = request.devices;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindDevicesIntoProject',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindDevicesIntoProject(request: BatchBindDevicesIntoProjectRequest): BatchBindDevicesIntoProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindDevicesIntoProjectWithOptions(request, runtime);
}

model BatchBindProductsIntoProjectRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKeys?: [ string ](name='ProductKeys', example='a1BwAGV****'),
  projectId?: string(name='ProjectId', example='a123********'),
}

model BatchBindProductsIntoProjectResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindProductsIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchBindProductsIntoProjectResponseBody(name='body'),
}

async function batchBindProductsIntoProjectWithOptions(request: BatchBindProductsIntoProjectRequest, runtime: Util.RuntimeOptions): BatchBindProductsIntoProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKeys)) {
    body['ProductKeys'] = request.productKeys;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindProductsIntoProject',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindProductsIntoProject(request: BatchBindProductsIntoProjectRequest): BatchBindProductsIntoProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindProductsIntoProjectWithOptions(request, runtime);
}

model BatchCheckDeviceNamesRequest {
  deviceName?: [ string ](name='DeviceName', example='light'),
  deviceNameList?: [ 
    {
      deviceName?: string(name='DeviceName', example='light1'),
      deviceNickname?: string(name='DeviceNickname'),
    }
  ](name='DeviceNameList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchCheckDeviceNamesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='InvalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceNicknameList?: {
      invalidDeviceNickname?: [ string ](name='InvalidDeviceNickname')
    }(name='InvalidDeviceNicknameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckDeviceNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCheckDeviceNamesResponseBody(name='body'),
}

async function batchCheckDeviceNamesWithOptions(request: BatchCheckDeviceNamesRequest, runtime: Util.RuntimeOptions): BatchCheckDeviceNamesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.deviceNameList)) {
    query['DeviceNameList'] = request.deviceNameList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchCheckDeviceNames',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCheckDeviceNames(request: BatchCheckDeviceNamesRequest): BatchCheckDeviceNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCheckDeviceNamesWithOptions(request, runtime);
}

model BatchCheckImportDeviceRequest {
  deviceList?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
      sn?: string(name='Sn', example='QC4******001'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchCheckImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidDeviceNameList?: [ string ](name='InvalidDeviceNameList'),
    invalidDeviceSecretList?: [ string ](name='InvalidDeviceSecretList'),
    invalidSnList?: [ string ](name='InvalidSnList'),
    repeatedDeviceNameList?: [ string ](name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCheckImportDeviceResponseBody(name='body'),
}

async function batchCheckImportDeviceWithOptions(request: BatchCheckImportDeviceRequest, runtime: Util.RuntimeOptions): BatchCheckImportDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceList)) {
    query['DeviceList'] = request.deviceList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchCheckImportDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCheckImportDevice(request: BatchCheckImportDeviceRequest): BatchCheckImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCheckImportDeviceWithOptions(request, runtime);
}

model BatchCheckVehicleDeviceRequest {
  deviceList?: [ 
    {
      deviceId?: string(name='DeviceId', example='di0001'),
      deviceModel?: string(name='DeviceModel', example='dm0001'),
      manufacturer?: string(name='Manufacturer', example='mf0001'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1Bw****'),
}

model BatchCheckVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidDeviceIdList?: [ string ](name='InvalidDeviceIdList'),
    invalidDeviceModelList?: [ string ](name='InvalidDeviceModelList'),
    invalidManufacturerList?: [ string ](name='InvalidManufacturerList'),
    repeatedDeviceIdList?: [ string ](name='RepeatedDeviceIdList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCheckVehicleDeviceResponseBody(name='body'),
}

async function batchCheckVehicleDeviceWithOptions(request: BatchCheckVehicleDeviceRequest, runtime: Util.RuntimeOptions): BatchCheckVehicleDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceList)) {
    query['DeviceList'] = request.deviceList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchCheckVehicleDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCheckVehicleDevice(request: BatchCheckVehicleDeviceRequest): BatchCheckVehicleDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCheckVehicleDeviceWithOptions(request, runtime);
}

model BatchClearEdgeInstanceDeviceConfigRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchClearEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='0BC2AA1C-E4D0-4E78-A70F-08C9A90686B0'),
  success?: boolean(name='Success', example='true'),
}

model BatchClearEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchClearEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchClearEdgeInstanceDeviceConfigWithOptions(request: BatchClearEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchClearEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchClearEdgeInstanceDeviceConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchClearEdgeInstanceDeviceConfig(request: BatchClearEdgeInstanceDeviceConfigRequest): BatchClearEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchClearEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchCreateSoundCodeLabelRequest {
  description?: string(name='Description', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
  total?: int32(name='Total', example='20'),
}

model BatchCreateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCreateSoundCodeLabelResponseBody(name='body'),
}

async function batchCreateSoundCodeLabelWithOptions(request: BatchCreateSoundCodeLabelRequest, runtime: Util.RuntimeOptions): BatchCreateSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  if (!Util.isUnset(request.total)) {
    body['Total'] = request.total;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCreateSoundCodeLabel(request: BatchCreateSoundCodeLabelRequest): BatchCreateSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateSoundCodeLabelWithOptions(request, runtime);
}

model BatchCreateSoundCodeLabelWithLabelsRequest {
  description?: string(name='Description', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  labels?: [ string ](name='Labels', example='test'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model BatchCreateSoundCodeLabelWithLabelsResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateSoundCodeLabelWithLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCreateSoundCodeLabelWithLabelsResponseBody(name='body'),
}

async function batchCreateSoundCodeLabelWithLabelsWithOptions(request: BatchCreateSoundCodeLabelWithLabelsRequest, runtime: Util.RuntimeOptions): BatchCreateSoundCodeLabelWithLabelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateSoundCodeLabelWithLabels',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCreateSoundCodeLabelWithLabels(request: BatchCreateSoundCodeLabelWithLabelsRequest): BatchCreateSoundCodeLabelWithLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateSoundCodeLabelWithLabelsWithOptions(request, runtime);
}

model BatchDeleteDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName?: string(name='DeviceName', example='ZHuPo6sZzv7pOzYh****'),
      productKey?: string(name='ProductKey', example='a1kORrK****'),
    }
  ](name='Device'),
  groupId?: string(name='GroupId', example='W16X8Tvdosec****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchDeleteDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount', example='2'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='8739385E-143F-4389-B900-B7DF9174CE0D'),
  success?: boolean(name='Success', example='true'),
  successDeviceCount?: int32(name='SuccessDeviceCount', example='2'),
  validDeviceCount?: int32(name='ValidDeviceCount', example='2'),
}

model BatchDeleteDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteDeviceGroupRelationsResponseBody(name='body'),
}

async function batchDeleteDeviceGroupRelationsWithOptions(request: BatchDeleteDeviceGroupRelationsRequest, runtime: Util.RuntimeOptions): BatchDeleteDeviceGroupRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.device)) {
    query['Device'] = request.device;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteDeviceGroupRelations',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteDeviceGroupRelations(request: BatchDeleteDeviceGroupRelationsRequest): BatchDeleteDeviceGroupRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteDeviceGroupRelationsWithOptions(request, runtime);
}

model BatchDeleteEdgeInstanceChannelRequest {
  channelIds?: [ string ](name='ChannelIds', example='BE0BD49EF5EF4D119D09CC1B25******'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchDeleteEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C95D46F1-0B13-46C7-9FA7-FDBFCF2F9F6F'),
  success?: boolean(name='Success', example='true'),
}

model BatchDeleteEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteEdgeInstanceChannelResponseBody(name='body'),
}

async function batchDeleteEdgeInstanceChannelWithOptions(request: BatchDeleteEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): BatchDeleteEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteEdgeInstanceChannel(request: BatchDeleteEdgeInstanceChannelRequest): BatchDeleteEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteEdgeInstanceChannelWithOptions(request, runtime);
}

model BatchGetDeviceBindStatusRequest {
  iotIds?: [ string ](name='IotIds', example='sjI0Sd124XFYyjBYMiYO******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetDeviceBindStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      bindStatus?: int32(name='BindStatus', example='1'),
      instanceId?: string(name='InstanceId'),
      iotId?: string(name='IotId', example='sjI0Sd124XFYyjBYMiYO******'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B1DF865D-2474-4CD5-9B7E-59B06D204CBF'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetDeviceBindStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetDeviceBindStatusResponseBody(name='body'),
}

async function batchGetDeviceBindStatusWithOptions(request: BatchGetDeviceBindStatusRequest, runtime: Util.RuntimeOptions): BatchGetDeviceBindStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetDeviceBindStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetDeviceBindStatus(request: BatchGetDeviceBindStatusRequest): BatchGetDeviceBindStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetDeviceBindStatusWithOptions(request, runtime);
}

model BatchGetDeviceStateRequest {
  deviceName?: [ string ](name='DeviceName', example='light'),
  iotId?: [ string ](name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchGetDeviceStateResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceStatusList?: {
    deviceStatus?: [ 
    {
      asAddress?: string(name='AsAddress', example='192.0.2.1'),
      deviceId?: string(name='DeviceId', example='dwnS41bhNxjslDAI****'),
      deviceName?: string(name='DeviceName', example='light'),
      iotId?: string(name='IotId', example='dwnS41bhNxjslDAI****000100'),
      lastOnlineTime?: string(name='LastOnlineTime', example='2020-01-17 16:19:11'),
      status?: string(name='Status', example='OFFLINE'),
    }
  ](name='DeviceStatus')
  }(name='DeviceStatusList'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetDeviceStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetDeviceStateResponseBody(name='body'),
}

async function batchGetDeviceStateWithOptions(request: BatchGetDeviceStateRequest, runtime: Util.RuntimeOptions): BatchGetDeviceStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetDeviceState',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetDeviceState(request: BatchGetDeviceStateRequest): BatchGetDeviceStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetDeviceStateWithOptions(request, runtime);
}

model BatchGetEdgeDriverRequest {
  driverIds?: [ string ](name='DriverIds', example='fec565038d7544978d9aed5c1a******'),
  iotInstanceId?: string(name='IotInstanceId', example='ot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  driverList?: [ 
    {
      cpuArch?: string(name='CpuArch', example='x86-64'),
      driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
      driverName?: string(name='DriverName', example='MyLedDriver'),
      driverProtocol?: string(name='DriverProtocol', example='customize'),
      gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
      gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
      isBuiltIn?: boolean(name='IsBuiltIn', example='false'),
      runtime?: string(name='Runtime', example='c'),
      type?: int32(name='Type', example='1'),
    }
  ](name='DriverList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='A42CAB88-6E26-4DC7-9A35-584D17E82DE0'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeDriverResponseBody(name='body'),
}

async function batchGetEdgeDriverWithOptions(request: BatchGetEdgeDriverRequest, runtime: Util.RuntimeOptions): BatchGetEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverIds)) {
    query['DriverIds'] = request.driverIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeDriver(request: BatchGetEdgeDriverRequest): BatchGetEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeDriverWithOptions(request, runtime);
}

model BatchGetEdgeInstanceChannelRequest {
  channelIds?: [ string ](name='ChannelIds', example='BE0BD49EF5EF4D119D09CC1B25******'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    channel?: [ 
    {
      channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
      channelName?: string(name='ChannelName', example='le_name0'),
      configList?: {
        config?: [ 
        {
          configId?: string(name='ConfigId', example='5d6016035c1a451daf174b1051******'),
          content?: string(name='Content', example='{\\"protocol\\":\\"TCP\\", \\"ip\\":\\"1.2.3.4\\", \\"port\\":1}'),
          format?: string(name='Format', example='JSON'),
          key?: string(name='Key', example='key1'),
        }
      ](name='Config')
      }(name='ConfigList'),
    }
  ](name='Channel')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='5B86570E-C1A7-4569-BF7B-F7F09EB35BEB'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceChannelWithOptions(request: BatchGetEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceChannel(request: BatchGetEdgeInstanceChannelRequest): BatchGetEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceChannelWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceChannelRequest {
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotIds?: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceChannelList?: [ 
    {
      channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
      channelName?: string(name='ChannelName', example='le_name_update'),
      iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN0******'),
    }
  ](name='DeviceChannelList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='029BC40B-8353-48B3-94C3-7ABF296F0AE5'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceChannelWithOptions(request: BatchGetEdgeInstanceDeviceChannelRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDeviceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceDeviceChannel(request: BatchGetEdgeInstanceDeviceChannelRequest): BatchGetEdgeInstanceDeviceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceChannelWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceConfigRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fDl****000101'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceConfigList?: [ 
    {
      config?: {
        content?: string(name='Content', example='{\\"test\\": \\"device_config_demo\\"}'),
        format?: string(name='Format', example='JSON'),
      }(name='Config'),
      iotId?: string(name='IotId', example='sjI0Sd124XFYyjBY****000101'),
    }
  ](name='DeviceConfigList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4A102C2-36A5-4964-9694-0F8EFF95CCA8'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceConfigWithOptions(request: BatchGetEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDeviceConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceDeviceConfig(request: BatchGetEdgeInstanceDeviceConfigRequest): BatchGetEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceDriverRequest {
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotIds?: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDeviceDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceDriverList?: [ 
    {
      driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
      iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN******'),
    }
  ](name='DeviceDriverList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E8D82F7A-0F84-4BD3-AE8A-5444A5B42800'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDeviceDriverResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceDriverWithOptions(request: BatchGetEdgeInstanceDeviceDriverRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDeviceDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceDeviceDriver(request: BatchGetEdgeInstanceDeviceDriverRequest): BatchGetEdgeInstanceDeviceDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceDriverWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDriverConfigsRequest {
  driverIds?: [ string ](name='DriverIds', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', example='Success'),
  driverConfigList?: [ 
    {
      configList?: [ 
        {
          configId?: string(name='ConfigId', example='dac71722ceac4a299dbf3e8dc3c8****'),
          content?: string(name='Content', example='{\\"test\\":123}'),
          format?: string(name='Format', example='JSON'),
          key?: string(name='Key', example='key1'),
        }
      ](name='ConfigList'),
      driverId?: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****'),
    }
  ](name='DriverConfigList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D6113390-F507-458B-8544-7B01F945630B'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function batchGetEdgeInstanceDriverConfigsWithOptions(request: BatchGetEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverIds)) {
    query['DriverIds'] = request.driverIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDriverConfigs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceDriverConfigs(request: BatchGetEdgeInstanceDriverConfigsRequest): BatchGetEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model BatchImportDeviceRequest {
  deviceList?: [ 
    {
      deviceName?: string(name='DeviceName', example='device1'),
      deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
      sn?: string(name='Sn', example='QC4******001'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='invalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceSecretList?: {
      invalidDeviceSecret?: [ string ](name='invalidDeviceSecret')
    }(name='InvalidDeviceSecretList'),
    invalidSnList?: {
      invalidSn?: [ string ](name='invalidSn')
    }(name='InvalidSnList'),
    repeatedDeviceNameList?: {
      repeatedDeviceName?: [ string ](name='repeatedDeviceName')
    }(name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchImportDeviceResponseBody(name='body'),
}

async function batchImportDeviceWithOptions(request: BatchImportDeviceRequest, runtime: Util.RuntimeOptions): BatchImportDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceList)) {
    query['DeviceList'] = request.deviceList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchImportDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchImportDevice(request: BatchImportDeviceRequest): BatchImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchImportDeviceWithOptions(request, runtime);
}

model BatchImportVehicleDeviceRequest {
  deviceList?: [ 
    {
      deviceId?: string(name='DeviceId', example='di0001'),
      deviceModel?: string(name='DeviceModel', example='dm0001'),
      manufacturer?: string(name='Manufacturer', example='mf0001'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1Bw****'),
}

model BatchImportVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchImportVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchImportVehicleDeviceResponseBody(name='body'),
}

async function batchImportVehicleDeviceWithOptions(request: BatchImportVehicleDeviceRequest, runtime: Util.RuntimeOptions): BatchImportVehicleDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceList)) {
    query['DeviceList'] = request.deviceList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchImportVehicleDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchImportVehicleDevice(request: BatchImportVehicleDeviceRequest): BatchImportVehicleDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchImportVehicleDeviceWithOptions(request, runtime);
}

model BatchPubRequest {
  deviceName?: [ string ](name='DeviceName', example='newdevice1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  messageContent?: string(name='MessageContent', example='eyJ0ZXN0IjoidGFzayBiYXRjaHB1YiBicm9hZGNhc3QifQ=='),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  qos?: int32(name='Qos', example='0'),
  topicShortName?: string(name='TopicShortName', example='get'),
}

model BatchPubResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchPubResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchPubResponseBody(name='body'),
}

async function batchPubWithOptions(request: BatchPubRequest, runtime: Util.RuntimeOptions): BatchPubResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.messageContent)) {
    query['MessageContent'] = request.messageContent;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.qos)) {
    query['Qos'] = request.qos;
  }
  if (!Util.isUnset(request.topicShortName)) {
    query['TopicShortName'] = request.topicShortName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchPub',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchPub(request: BatchPubRequest): BatchPubResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchPubWithOptions(request, runtime);
}

model BatchQueryDeviceDetailRequest {
  deviceName?: [ string ](name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchQueryDeviceDetailResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
      firmwareVersion?: string(name='FirmwareVersion', example='V1.0.0.0'),
      gmtActive?: string(name='GmtActive', example='2019-06-21 20:33:00'),
      gmtCreate?: string(name='GmtCreate', example='2019-06-21 20:31:42'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname'),
      nodeType?: int32(name='NodeType', example='0'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      productName?: string(name='ProductName'),
      region?: string(name='Region', example='cn-shanghai'),
      status?: string(name='Status', example='ONLINE'),
      utcActive?: string(name='UtcActive', example='2019-06-21T12:31:42.000Z'),
      utcCreate?: string(name='UtcCreate', example='2019-06-21T12:31:42.000Z'),
    }
  ](name='Data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchQueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchQueryDeviceDetailResponseBody(name='body'),
}

async function batchQueryDeviceDetailWithOptions(request: BatchQueryDeviceDetailRequest, runtime: Util.RuntimeOptions): BatchQueryDeviceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchQueryDeviceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchQueryDeviceDetail(request: BatchQueryDeviceDetailRequest): BatchQueryDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchQueryDeviceDetailWithOptions(request, runtime);
}

model BatchRegisterDeviceRequest {
  count?: int32(name='Count', example='100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchRegisterDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchRegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchRegisterDeviceResponseBody(name='body'),
}

async function batchRegisterDeviceWithOptions(request: BatchRegisterDeviceRequest, runtime: Util.RuntimeOptions): BatchRegisterDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchRegisterDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchRegisterDevice(request: BatchRegisterDeviceRequest): BatchRegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRegisterDeviceWithOptions(request, runtime);
}

model BatchRegisterDeviceWithApplyIdRequest {
  applyId?: long(name='ApplyId', example='1295006'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchRegisterDeviceWithApplyIdResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchRegisterDeviceWithApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchRegisterDeviceWithApplyIdResponseBody(name='body'),
}

async function batchRegisterDeviceWithApplyIdWithOptions(request: BatchRegisterDeviceWithApplyIdRequest, runtime: Util.RuntimeOptions): BatchRegisterDeviceWithApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchRegisterDeviceWithApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchRegisterDeviceWithApplyId(request: BatchRegisterDeviceWithApplyIdRequest): BatchRegisterDeviceWithApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRegisterDeviceWithApplyIdWithOptions(request, runtime);
}

model BatchSetEdgeInstanceDeviceChannelRequest {
  channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotIds?: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchSetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B0325EA9-671C-460B-B0F3-83F41CFF855B'),
  success?: boolean(name='Success', example='true'),
}

model BatchSetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceChannelWithOptions(request: BatchSetEdgeInstanceDeviceChannelRequest, runtime: Util.RuntimeOptions): BatchSetEdgeInstanceDeviceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetEdgeInstanceDeviceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetEdgeInstanceDeviceChannel(request: BatchSetEdgeInstanceDeviceChannelRequest): BatchSetEdgeInstanceDeviceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetEdgeInstanceDeviceChannelWithOptions(request, runtime);
}

model BatchSetEdgeInstanceDeviceConfigRequest {
  deviceConfigs?: [ 
    {
      content?: string(name='Content', example='{"test": "device_config_demo"}'),
      iotId?: string(name='IotId', example='sjI0Sd124XFYyjBY****000101'),
    }
  ](name='DeviceConfigs'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchSetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='748659E2-EDC9-4E3E-BF9D-06F16995CF66'),
  success?: boolean(name='Success', example='true'),
}

model BatchSetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceConfigWithOptions(request: BatchSetEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchSetEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceConfigs)) {
    query['DeviceConfigs'] = request.deviceConfigs;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetEdgeInstanceDeviceConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetEdgeInstanceDeviceConfig(request: BatchSetEdgeInstanceDeviceConfigRequest): BatchSetEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchUnbindDeviceFromEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchUnbindDeviceFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='34755DC3-2809-4AE2-BAD8-7B81ED69D570'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindDeviceFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUnbindDeviceFromEdgeInstanceResponseBody(name='body'),
}

async function batchUnbindDeviceFromEdgeInstanceWithOptions(request: BatchUnbindDeviceFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): BatchUnbindDeviceFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindDeviceFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindDeviceFromEdgeInstance(request: BatchUnbindDeviceFromEdgeInstanceRequest): BatchUnbindDeviceFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindDeviceFromEdgeInstanceWithOptions(request, runtime);
}

model BatchUnbindProjectDevicesRequest {
  devices?: [ 
    {
      deviceName?: string(name='DeviceName', example='Ee2******'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='Devices'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model BatchUnbindProjectDevicesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindProjectDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUnbindProjectDevicesResponseBody(name='body'),
}

async function batchUnbindProjectDevicesWithOptions(request: BatchUnbindProjectDevicesRequest, runtime: Util.RuntimeOptions): BatchUnbindProjectDevicesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.devices)) {
    body['Devices'] = request.devices;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindProjectDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindProjectDevices(request: BatchUnbindProjectDevicesRequest): BatchUnbindProjectDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindProjectDevicesWithOptions(request, runtime);
}

model BatchUnbindProjectProductsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKeys?: [ string ](name='ProductKeys', example='a1BwAGV****'),
  projectId?: string(name='ProjectId', example='a123********'),
}

model BatchUnbindProjectProductsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindProjectProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUnbindProjectProductsResponseBody(name='body'),
}

async function batchUnbindProjectProductsWithOptions(request: BatchUnbindProjectProductsRequest, runtime: Util.RuntimeOptions): BatchUnbindProjectProductsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKeys)) {
    body['ProductKeys'] = request.productKeys;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindProjectProducts',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindProjectProducts(request: BatchUnbindProjectProductsRequest): BatchUnbindProjectProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindProjectProductsWithOptions(request, runtime);
}

model BatchUpdateDeviceNicknameRequest {
  deviceNicknameInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname', example='AliyunDataCenter'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='DeviceNicknameInfo'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchUpdateDeviceNicknameResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUpdateDeviceNicknameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUpdateDeviceNicknameResponseBody(name='body'),
}

async function batchUpdateDeviceNicknameWithOptions(request: BatchUpdateDeviceNicknameRequest, runtime: Util.RuntimeOptions): BatchUpdateDeviceNicknameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceNicknameInfo)) {
    query['DeviceNicknameInfo'] = request.deviceNicknameInfo;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateDeviceNickname',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUpdateDeviceNickname(request: BatchUpdateDeviceNicknameRequest): BatchUpdateDeviceNicknameResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateDeviceNicknameWithOptions(request, runtime);
}

model BindApplicationToEdgeInstanceRequest {
  applicationId?: string(name='ApplicationId', example='361368ba5a094da9bf5625d092******'),
  applicationVersion?: string(name='ApplicationVersion', example='3.7'),
  instanceId?: string(name='InstanceId', example='Tb4r9k3GWHJFWv******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BindApplicationToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='86B23D5F-BF86-4F29-82E2-686D7B4D9AAA'),
  success?: boolean(name='Success', example='true'),
}

model BindApplicationToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindApplicationToEdgeInstanceResponseBody(name='body'),
}

async function bindApplicationToEdgeInstanceWithOptions(request: BindApplicationToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindApplicationToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.applicationVersion)) {
    query['ApplicationVersion'] = request.applicationVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindApplicationToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindApplicationToEdgeInstance(request: BindApplicationToEdgeInstanceRequest): BindApplicationToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindApplicationToEdgeInstanceWithOptions(request, runtime);
}

model BindDriverToEdgeInstanceRequest {
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc959228****'),
  driverVersion?: string(name='DriverVersion', example='2.0.0'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  orderId?: string(name='OrderId', example='11123458765****'),
}

model BindDriverToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model BindDriverToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindDriverToEdgeInstanceResponseBody(name='body'),
}

async function bindDriverToEdgeInstanceWithOptions(request: BindDriverToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindDriverToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindDriverToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindDriverToEdgeInstance(request: BindDriverToEdgeInstanceRequest): BindDriverToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindDriverToEdgeInstanceWithOptions(request, runtime);
}

model BindGatewayToEdgeInstanceRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotId?: string(name='IotId', example='4z819VQHk6VSLmmBJfrf0010******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1mAdeG****'),
}

model BindGatewayToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model BindGatewayToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindGatewayToEdgeInstanceResponseBody(name='body'),
}

async function bindGatewayToEdgeInstanceWithOptions(request: BindGatewayToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindGatewayToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindGatewayToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindGatewayToEdgeInstance(request: BindGatewayToEdgeInstanceRequest): BindGatewayToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindGatewayToEdgeInstanceWithOptions(request, runtime);
}

model BindLicenseDeviceRequest {
  deviceNameList?: [ string ](name='DeviceNameList'),
  iotIdList?: [ string ](name='IotIdList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  licenseCode?: string(name='LicenseCode', example='720P'),
  productKey?: string(name='ProductKey', example='a2YwD23***'),
}

model BindLicenseDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    checkProgressId?: string(name='CheckProgressId', example='123***'),
    failSum?: long(name='FailSum', example='2'),
    progress?: int32(name='Progress', example='100'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***'),
    successSum?: long(name='SuccessSum', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model BindLicenseDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindLicenseDeviceResponseBody(name='body'),
}

async function bindLicenseDeviceWithOptions(request: BindLicenseDeviceRequest, runtime: Util.RuntimeOptions): BindLicenseDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceNameList)) {
    body['DeviceNameList'] = request.deviceNameList;
  }
  if (!Util.isUnset(request.iotIdList)) {
    body['IotIdList'] = request.iotIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BindLicenseDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindLicenseDevice(request: BindLicenseDeviceRequest): BindLicenseDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindLicenseDeviceWithOptions(request, runtime);
}

model BindLicenseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-23***'),
  licenseCode?: string(name='LicenseCode', example='480P'),
  productKey?: string(name='ProductKey', example='a1BwAGV***'),
}

model BindLicenseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model BindLicenseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindLicenseProductResponseBody(name='body'),
}

async function bindLicenseProductWithOptions(request: BindLicenseProductRequest, runtime: Util.RuntimeOptions): BindLicenseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindLicenseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindLicenseProduct(request: BindLicenseProductRequest): BindLicenseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindLicenseProductWithOptions(request, runtime);
}

model BindRoleToEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  roleArn?: string(name='RoleArn', example='acs:ram::176********:role/iotedgerole'),
  roleName?: string(name='RoleName', example='IoTEdgeRole'),
}

model BindRoleToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3DE428F8-22AF-4B37-8FEC-E64CFBE4A125'),
  success?: boolean(name='Success', example='true'),
}

model BindRoleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindRoleToEdgeInstanceResponseBody(name='body'),
}

async function bindRoleToEdgeInstanceWithOptions(request: BindRoleToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindRoleToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindRoleToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindRoleToEdgeInstance(request: BindRoleToEdgeInstanceRequest): BindRoleToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindRoleToEdgeInstanceWithOptions(request, runtime);
}

model BindSceneRuleToEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='llL44UVXUqb9m5******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model BindSceneRuleToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA909EK'),
  success?: boolean(name='Success', example='true'),
}

model BindSceneRuleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindSceneRuleToEdgeInstanceResponseBody(name='body'),
}

async function bindSceneRuleToEdgeInstanceWithOptions(request: BindSceneRuleToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindSceneRuleToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindSceneRuleToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindSceneRuleToEdgeInstance(request: BindSceneRuleToEdgeInstanceRequest): BindSceneRuleToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSceneRuleToEdgeInstanceWithOptions(request, runtime);
}

model CancelJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
}

model CancelJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='C25255EA-9F6E-4E04-85FE-AC1E9C136EBB'),
  success?: boolean(name='Success', example='true'),
}

model CancelJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelJobResponseBody(name='body'),
}

async function cancelJobWithOptions(request: CancelJobRequest, runtime: Util.RuntimeOptions): CancelJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelJob(request: CancelJobRequest): CancelJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelJobWithOptions(request, runtime);
}

model CancelOTAStrategyByJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', example='HvKuBpuk3rdk6E92CP****0200'),
}

model CancelOTAStrategyByJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CancelOTAStrategyByJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOTAStrategyByJobResponseBody(name='body'),
}

async function cancelOTAStrategyByJobWithOptions(request: CancelOTAStrategyByJobRequest, runtime: Util.RuntimeOptions): CancelOTAStrategyByJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOTAStrategyByJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOTAStrategyByJob(request: CancelOTAStrategyByJobRequest): CancelOTAStrategyByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTAStrategyByJobWithOptions(request, runtime);
}

model CancelOTATaskByDeviceRequest {
  deviceName?: [ string ](name='DeviceName', example='device1'),
  firmwareId?: string(name='FirmwareId', example='T0F5b5tpFnHQrgfk****030100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****'),
  productKey?: string(name='ProductKey', example='a1V4kde****'),
}

model CancelOTATaskByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
}

model CancelOTATaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOTATaskByDeviceResponseBody(name='body'),
}

async function cancelOTATaskByDeviceWithOptions(request: CancelOTATaskByDeviceRequest, runtime: Util.RuntimeOptions): CancelOTATaskByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOTATaskByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOTATaskByDevice(request: CancelOTATaskByDeviceRequest): CancelOTATaskByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTATaskByDeviceWithOptions(request, runtime);
}

model CancelOTATaskByJobRequest {
  cancelInProgressTask?: boolean(name='CancelInProgressTask', example='false'),
  cancelNotifiedTask?: boolean(name='CancelNotifiedTask', example='false'),
  cancelQueuedTask?: boolean(name='CancelQueuedTask', example='false'),
  cancelScheduledTask?: boolean(name='CancelScheduledTask', example='false'),
  cancelUnconfirmedTask?: boolean(name='CancelUnconfirmedTask', example='false'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****'),
}

model CancelOTATaskByJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CancelOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOTATaskByJobResponseBody(name='body'),
}

async function cancelOTATaskByJobWithOptions(request: CancelOTATaskByJobRequest, runtime: Util.RuntimeOptions): CancelOTATaskByJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cancelInProgressTask)) {
    query['CancelInProgressTask'] = request.cancelInProgressTask;
  }
  if (!Util.isUnset(request.cancelNotifiedTask)) {
    query['CancelNotifiedTask'] = request.cancelNotifiedTask;
  }
  if (!Util.isUnset(request.cancelQueuedTask)) {
    query['CancelQueuedTask'] = request.cancelQueuedTask;
  }
  if (!Util.isUnset(request.cancelScheduledTask)) {
    query['CancelScheduledTask'] = request.cancelScheduledTask;
  }
  if (!Util.isUnset(request.cancelUnconfirmedTask)) {
    query['CancelUnconfirmedTask'] = request.cancelUnconfirmedTask;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOTATaskByJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOTATaskByJob(request: CancelOTATaskByJobRequest): CancelOTATaskByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTATaskByJobWithOptions(request, runtime);
}

model CancelReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model CancelReleaseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CancelReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelReleaseProductResponseBody(name='body'),
}

async function cancelReleaseProductWithOptions(request: CancelReleaseProductRequest, runtime: Util.RuntimeOptions): CancelReleaseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelReleaseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelReleaseProduct(request: CancelReleaseProductRequest): CancelReleaseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelReleaseProductWithOptions(request, runtime);
}

model CheckBindLicenseDeviceProgressRequest {
  checkProgressId?: string(name='CheckProgressId', example='23****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2ws****'),
  licenseCode?: string(name='LicenseCode', example='720P'),
  productKey?: string(name='ProductKey', example='uhf5****'),
}

model CheckBindLicenseDeviceProgressResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    failSum?: long(name='FailSum', example='1'),
    progress?: int32(name='Progress', example='80'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***.oss-***.aliyuncs.com/license_device_***/***/d***h/c***.csv?Expires=16***&OSSAccessKeyId=L***&Signature=***'),
    successSum?: long(name='SuccessSum', example='9'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CheckBindLicenseDeviceProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckBindLicenseDeviceProgressResponseBody(name='body'),
}

async function checkBindLicenseDeviceProgressWithOptions(request: CheckBindLicenseDeviceProgressRequest, runtime: Util.RuntimeOptions): CheckBindLicenseDeviceProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkProgressId)) {
    query['CheckProgressId'] = request.checkProgressId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckBindLicenseDeviceProgress',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkBindLicenseDeviceProgress(request: CheckBindLicenseDeviceProgressRequest): CheckBindLicenseDeviceProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkBindLicenseDeviceProgressWithOptions(request, runtime);
}

model ClearDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', example='light'),
  identifies?: [ string ](name='Identifies', example='temperature'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model ClearDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    versions?: string(name='Versions', example='{\\"temperature\\":0}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ClearDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearDeviceDesiredPropertyResponseBody(name='body'),
}

async function clearDeviceDesiredPropertyWithOptions(request: ClearDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): ClearDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.identifies)) {
    body['Identifies'] = request.identifies;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ClearDeviceDesiredProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearDeviceDesiredProperty(request: ClearDeviceDesiredPropertyRequest): ClearDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearDeviceDesiredPropertyWithOptions(request, runtime);
}

model ClearEdgeInstanceDriverConfigsRequest {
  driverId?: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model ClearEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='DF6B728B-ADD7-4C41-88C3-D21B4CA82CF1'),
  success?: boolean(name='Success', example='true'),
}

model ClearEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function clearEdgeInstanceDriverConfigsWithOptions(request: ClearEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): ClearEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearEdgeInstanceDriverConfigs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function clearEdgeInstanceDriverConfigs(request: ClearEdgeInstanceDriverConfigsRequest): ClearEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model CloseDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
}

model CloseDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CloseDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDeviceTunnelResponseBody(name='body'),
}

async function closeDeviceTunnelWithOptions(request: CloseDeviceTunnelRequest, runtime: Util.RuntimeOptions): CloseDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tunnelId)) {
    query['TunnelId'] = request.tunnelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeDeviceTunnel(request: CloseDeviceTunnelRequest): CloseDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDeviceTunnelWithOptions(request, runtime);
}

model CloseEdgeInstanceDeploymentRequest {
  instanceId?: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model CloseEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3C969586-3DD1-41A7-9B8E-E8B134CA6600'),
  success?: boolean(name='Success', example='true'),
}

model CloseEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseEdgeInstanceDeploymentResponseBody(name='body'),
}

async function closeEdgeInstanceDeploymentWithOptions(request: CloseEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): CloseEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseEdgeInstanceDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeEdgeInstanceDeployment(request: CloseEdgeInstanceDeploymentRequest): CloseEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeEdgeInstanceDeploymentWithOptions(request, runtime);
}

model ConfirmOTATaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64********'),
  taskId?: [ string ](name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
}

model ConfirmOTATaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmOTATaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmOTATaskResponseBody(name='body'),
}

async function confirmOTATaskWithOptions(request: ConfirmOTATaskRequest, runtime: Util.RuntimeOptions): ConfirmOTATaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmOTATask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmOTATask(request: ConfirmOTATaskRequest): ConfirmOTATaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmOTATaskWithOptions(request, runtime);
}

model CopyThingModelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****'),
  sourceModelVersion?: string(name='SourceModelVersion', example='V1.0.0'),
  sourceProductKey?: string(name='SourceProductKey', example='a1BwAGV****'),
  targetProductKey?: string(name='TargetProductKey', example='a1BwwG0****'),
}

model CopyThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CopyThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyThingModelResponseBody(name='body'),
}

async function copyThingModelWithOptions(request: CopyThingModelRequest, runtime: Util.RuntimeOptions): CopyThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceModelVersion)) {
    query['SourceModelVersion'] = request.sourceModelVersion;
  }
  if (!Util.isUnset(request.sourceProductKey)) {
    query['SourceProductKey'] = request.sourceProductKey;
  }
  if (!Util.isUnset(request.targetProductKey)) {
    query['TargetProductKey'] = request.targetProductKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyThingModel(request: CopyThingModelRequest): CopyThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyThingModelWithOptions(request, runtime);
}

model CountSpeechBroadcastHourRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  queryDateTimeHour?: string(name='QueryDateTimeHour', example='2020090919'),
  shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
}

model CountSpeechBroadcastHourResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  data?: int32(name='Data', example='1000'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CountSpeechBroadcastHourResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CountSpeechBroadcastHourResponseBody(name='body'),
}

async function countSpeechBroadcastHourWithOptions(request: CountSpeechBroadcastHourRequest, runtime: Util.RuntimeOptions): CountSpeechBroadcastHourResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryDateTimeHour)) {
    query['QueryDateTimeHour'] = request.queryDateTimeHour;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.shareTaskCode)) {
    body['ShareTaskCode'] = request.shareTaskCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CountSpeechBroadcastHour',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countSpeechBroadcastHour(request: CountSpeechBroadcastHourRequest): CountSpeechBroadcastHourResponse {
  var runtime = new Util.RuntimeOptions{};
  return countSpeechBroadcastHourWithOptions(request, runtime);
}

model CreateConsumerGroupRequest {
  groupName?: string(name='GroupName'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

async function createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupWithOptions(request, runtime);
}

model CreateConsumerGroupSubscribeRelationRequest {
  consumerGroupId?: string(name='ConsumerGroupId', example='nJRaJPn5U1JITGfjBO9l00****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
}

model CreateConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function createConsumerGroupSubscribeRelationWithOptions(request: CreateConsumerGroupSubscribeRelationRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupId)) {
    query['ConsumerGroupId'] = request.consumerGroupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroupSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createConsumerGroupSubscribeRelation(request: CreateConsumerGroupSubscribeRelationRequest): CreateConsumerGroupSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupSubscribeRelationWithOptions(request, runtime);
}

model CreateDataAPIServiceRequest {
  apiPath?: string(name='ApiPath', example='device/getDeviceCountByStatus'),
  desc?: string(name='Desc'),
  displayName?: string(name='DisplayName'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  originSql?: string(name='OriginSql', example='SELECT COUNT(iot_id) AS deviceCount FROM ${system.device} WHERE status=1'),
  requestParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example', example='dksiaiek23s'),
      name?: string(name='Name', example='status'),
      required?: boolean(name='Required', example='true'),
      type?: string(name='Type', example='VARCHAR'),
    }
  ](name='RequestParam'),
  responseParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example', example='100'),
      name?: string(name='Name', example='deviceCount'),
      required?: boolean(name='Required', example='true'),
      type?: string(name='Type', example='INTEGER'),
    }
  ](name='ResponseParam'),
  templateSql?: string(name='TemplateSql', example='SELECT COUNT(iot_id) AS deviceCount FROM ${system.device} WHERE status=${status}'),
}

model CreateDataAPIServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    createTime?: long(name='CreateTime', example='1557839468865'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1557839468865'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataAPIServiceResponseBody(name='body'),
}

async function createDataAPIServiceWithOptions(request: CreateDataAPIServiceRequest, runtime: Util.RuntimeOptions): CreateDataAPIServiceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.desc)) {
    body['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.originSql)) {
    body['OriginSql'] = request.originSql;
  }
  if (!Util.isUnset(request.requestParam)) {
    body['RequestParam'] = request.requestParam;
  }
  if (!Util.isUnset(request.responseParam)) {
    body['ResponseParam'] = request.responseParam;
  }
  if (!Util.isUnset(request.templateSql)) {
    body['TemplateSql'] = request.templateSql;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataAPIService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataAPIService(request: CreateDataAPIServiceRequest): CreateDataAPIServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataAPIServiceWithOptions(request, runtime);
}

model CreateDataSourceItemRequest {
  dataSourceId?: long(name='DataSourceId', example='1002'),
  deviceName?: string(name='DeviceName'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t***'),
  productKey?: string(name='ProductKey'),
  scopeType?: string(name='ScopeType'),
  topic?: string(name='Topic', example='/as/mqtt/status/gy***z/+'),
}

model CreateDataSourceItemResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataSourceItemResponseBody(name='body'),
}

async function createDataSourceItemWithOptions(request: CreateDataSourceItemRequest, runtime: Util.RuntimeOptions): CreateDataSourceItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.scopeType)) {
    query['ScopeType'] = request.scopeType;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSourceItem',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataSourceItem(request: CreateDataSourceItemRequest): CreateDataSourceItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceItemWithOptions(request, runtime);
}

model CreateDestinationRequest {
  configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  name?: string(name='Name', example='DataPurpose'),
  type?: string(name='Type', example='REPUBLISH'),
}

model CreateDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destination?: {
    configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
    destinationId?: long(name='DestinationId', example='1003'),
    isFailover?: boolean(name='IsFailover', example='false'),
    name?: string(name='Name', example='DataPurpose'),
    type?: string(name='Type', example='REPUBLISH'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='Destination'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CreateDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDestinationResponseBody(name='body'),
}

async function createDestinationWithOptions(request: CreateDestinationRequest, runtime: Util.RuntimeOptions): CreateDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDestination(request: CreateDestinationRequest): CreateDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDestinationWithOptions(request, runtime);
}

model CreateDeviceDistributeJobRequest {
  deviceName?: [ string ](name='DeviceName', example='RepeatList'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', example='iot-060***'),
  strategy?: int32(name='Strategy', example='0'),
  targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com'),
  targetInstanceConfig?: [ 
    {
      targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***'),
    }
  ](name='TargetInstanceConfig'),
  targetUid?: string(name='TargetUid', example='198***'),
}

model CreateDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceDistributeJobResponseBody(name='body'),
}

async function createDeviceDistributeJobWithOptions(request: CreateDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): CreateDeviceDistributeJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    body['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.strategy)) {
    body['Strategy'] = request.strategy;
  }
  if (!Util.isUnset(request.targetAliyunId)) {
    body['TargetAliyunId'] = request.targetAliyunId;
  }
  if (!Util.isUnset(request.targetInstanceConfig)) {
    body['TargetInstanceConfig'] = request.targetInstanceConfig;
  }
  if (!Util.isUnset(request.targetUid)) {
    body['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceDistributeJob(request: CreateDeviceDistributeJobRequest): CreateDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceDistributeJobWithOptions(request, runtime);
}

model CreateDeviceDynamicGroupRequest {
  dynamicGroupExpression?: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"'),
  groupDesc?: string(name='GroupDesc', example='test'),
  groupName?: string(name='GroupName', example='grouptest'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***'),
}

model CreateDeviceDynamicGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dynamicGroupExpression?: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"'),
    groupDesc?: string(name='GroupDesc', example='test'),
    groupId?: string(name='GroupId', example='HtMLECKbdJQL***'),
    groupName?: string(name='GroupName', example='grouptest'),
    utcCreate?: string(name='UtcCreate', example='2021-10-17T11:19:31.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0634D'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceDynamicGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceDynamicGroupResponseBody(name='body'),
}

async function createDeviceDynamicGroupWithOptions(request: CreateDeviceDynamicGroupRequest, runtime: Util.RuntimeOptions): CreateDeviceDynamicGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dynamicGroupExpression)) {
    query['DynamicGroupExpression'] = request.dynamicGroupExpression;
  }
  if (!Util.isUnset(request.groupDesc)) {
    query['GroupDesc'] = request.groupDesc;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceDynamicGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceDynamicGroup(request: CreateDeviceDynamicGroupRequest): CreateDeviceDynamicGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceDynamicGroupWithOptions(request, runtime);
}

model CreateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', example='Group test'),
  groupName?: string(name='GroupName', example='grouptest'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  superGroupId?: string(name='SuperGroupId', example='SuperGroupId1'),
}

model CreateDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    groupDesc?: string(name='GroupDesc', example='Group test'),
    groupId?: string(name='GroupId', example='HtMLECKbdJQL****'),
    groupName?: string(name='GroupName', example='grouptest'),
    utcCreate?: string(name='UtcCreate', example='2018-10-17T11:19:31.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0634D'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceGroupResponseBody(name='body'),
}

async function createDeviceGroupWithOptions(request: CreateDeviceGroupRequest, runtime: Util.RuntimeOptions): CreateDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupDesc)) {
    query['GroupDesc'] = request.groupDesc;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.superGroupId)) {
    query['SuperGroupId'] = request.superGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceGroup(request: CreateDeviceGroupRequest): CreateDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceGroupWithOptions(request, runtime);
}

model CreateDeviceTunnelRequest {
  description?: string(name='Description'),
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv***00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV***'),
  udi?: string(name='Udi', example='reboot'),
}

model CreateDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    sourceAccessToken?: string(name='SourceAccessToken', example='521c43e4-a6da-***'),
    sourceURI?: string(name='SourceURI', example='wss://secure-tunnel-ws.iot.aliyun.test/tunnel/1834248a-37b7-4fd2-***/source'),
    tunnelId?: string(name='TunnelId', example='d4098041-***'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceTunnelResponseBody(name='body'),
}

async function createDeviceTunnelWithOptions(request: CreateDeviceTunnelRequest, runtime: Util.RuntimeOptions): CreateDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.udi)) {
    query['Udi'] = request.udi;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceTunnel(request: CreateDeviceTunnelRequest): CreateDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceTunnelWithOptions(request, runtime);
}

model CreateDownloadDataJobRequest {
  downloadDataType?: string(name='DownloadDataType', example='TABLE'),
  endTime?: long(name='EndTime', example='1658406464534'),
  fileConfig?: map[string]any(name='FileConfig', example='{"fileName":"fileName01"}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  startTime?: long(name='StartTime', example='1658332800000'),
  tableName?: string(name='TableName', example='product_info'),
}

model CreateDownloadDataJobShrinkRequest {
  downloadDataType?: string(name='DownloadDataType', example='TABLE'),
  endTime?: long(name='EndTime', example='1658406464534'),
  fileConfigShrink?: string(name='FileConfig', example='{"fileName":"fileName01"}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  startTime?: long(name='StartTime', example='1658332800000'),
  tableName?: string(name='TableName', example='product_info'),
}

model CreateDownloadDataJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    asyncExecute?: boolean(name='AsyncExecute', example='true'),
    csvFileName?: string(name='CsvFileName', example='test_download_file'),
    csvUrl?: string(name='CsvUrl', example='https://oss-xxxx-xxxx.xxxx......'),
    longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
    status?: int32(name='Status', example='-1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='no authorization.'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0643F'),
  success?: boolean(name='Success', example='true'),
}

model CreateDownloadDataJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDownloadDataJobResponseBody(name='body'),
}

async function createDownloadDataJobWithOptions(tmpReq: CreateDownloadDataJobRequest, runtime: Util.RuntimeOptions): CreateDownloadDataJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDownloadDataJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fileConfig)) {
    request.fileConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fileConfig, 'FileConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.downloadDataType)) {
    query['DownloadDataType'] = request.downloadDataType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fileConfigShrink)) {
    query['FileConfig'] = request.fileConfigShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDownloadDataJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDownloadDataJob(request: CreateDownloadDataJobRequest): CreateDownloadDataJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDownloadDataJobWithOptions(request, runtime);
}

model CreateEdgeDriverRequest {
  cpuArch?: string(name='CpuArch', example='x86-64'),
  driverName?: string(name='DriverName', example='MyLedDriver'),
  driverProtocol?: string(name='DriverProtocol', example='customize'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  isBuiltIn?: boolean(name='IsBuiltIn', example='false'),
  runtime?: string(name='Runtime', example='c'),
}

model CreateEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='BB179FE4-94AB-41B0-AE8A-66DDB7B8B13A'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeDriverResponseBody(name='body'),
}

async function createEdgeDriverWithOptions(request: CreateEdgeDriverRequest, runtime: Util.RuntimeOptions): CreateEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cpuArch)) {
    query['CpuArch'] = request.cpuArch;
  }
  if (!Util.isUnset(request.driverName)) {
    query['DriverName'] = request.driverName;
  }
  if (!Util.isUnset(request.driverProtocol)) {
    query['DriverProtocol'] = request.driverProtocol;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isBuiltIn)) {
    query['IsBuiltIn'] = request.isBuiltIn;
  }
  if (!Util.isUnset(request.runtime)) {
    query['Runtime'] = request.runtime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeDriver(request: CreateEdgeDriverRequest): CreateEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeDriverWithOptions(request, runtime);
}

model CreateEdgeDriverVersionRequest {
  argument?: string(name='Argument', example='-XX:+PrintGCDetails'),
  configCheckRule?: string(name='ConfigCheckRule', example='{"deviceConfig":{"required":false},"driverConfig":{"required":false}}'),
  containerConfig?: string(name='ContainerConfig', example='{"privileged":1,"devMappings":[],"volumeMappings":[],"hostNetworkMode":0,"portMappings":[]}'),
  description?: string(name='Description'),
  driverConfig?: string(name='DriverConfig', example='[{"format":"JSON","content":"{\\"defaultConfig\\":\\"this is default driver config demo\\"}"}]'),
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', example='1.2.0'),
  edgeVersion?: string(name='EdgeVersion', example='2.0.0'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  sourceConfig?: string(name='SourceConfig', example='{"ossAddress":"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30c******/ck3n3koe200003h6zf******.zip"}'),
}

model CreateEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='001ADA35-8846-4B6F-93E7-E5C076F8BB56'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeDriverVersionResponseBody(name='body'),
}

async function createEdgeDriverVersionWithOptions(request: CreateEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): CreateEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.argument)) {
    query['Argument'] = request.argument;
  }
  if (!Util.isUnset(request.configCheckRule)) {
    query['ConfigCheckRule'] = request.configCheckRule;
  }
  if (!Util.isUnset(request.containerConfig)) {
    query['ContainerConfig'] = request.containerConfig;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.driverConfig)) {
    query['DriverConfig'] = request.driverConfig;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.edgeVersion)) {
    query['EdgeVersion'] = request.edgeVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.sourceConfig)) {
    query['SourceConfig'] = request.sourceConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeDriverVersion(request: CreateEdgeDriverVersionRequest): CreateEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeDriverVersionWithOptions(request, runtime);
}

model CreateEdgeInstanceRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='LinkIoTEdge_Node'),
  spec?: int32(name='Spec', example='20'),
  tags?: string(name='Tags', example='k1:v1,k2:v2'),
}

model CreateEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceResponseBody(name='body'),
}

async function createEdgeInstanceWithOptions(request: CreateEdgeInstanceRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeInstance(request: CreateEdgeInstanceRequest): CreateEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceWithOptions(request, runtime);
}

model CreateEdgeInstanceChannelRequest {
  channelName?: string(name='ChannelName', example='le_name0'),
  configs?: [ 
    {
      content?: string(name='Content', example='{"protocol":"TCP", "ip":"1.2.3.4", "port":1}'),
      format?: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model CreateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='BE0BD49EF5EF4D119D09CC1B25******'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B34673EA-ECE7-44F5-BF01-40B5FAE633B6'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceChannelResponseBody(name='body'),
}

async function createEdgeInstanceChannelWithOptions(request: CreateEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelName)) {
    query['ChannelName'] = request.channelName;
  }
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeInstanceChannel(request: CreateEdgeInstanceChannelRequest): CreateEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceChannelWithOptions(request, runtime);
}

model CreateEdgeInstanceDeploymentRequest {
  instanceId?: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  type?: string(name='Type', example='deploy'),
}

model CreateEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  deploymentId?: string(name='DeploymentId', example='38d544b1222d45b4b425240167bf****'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C8293A57-6BBC-42FB-B093-BF304D5BF09C'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceDeploymentResponseBody(name='body'),
}

async function createEdgeInstanceDeploymentWithOptions(request: CreateEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstanceDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeInstanceDeployment(request: CreateEdgeInstanceDeploymentRequest): CreateEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceDeploymentWithOptions(request, runtime);
}

model CreateEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='nF9oXo7kLRWQ********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='le_lite2'),
  sourceData?: string(name='SourceData', example='#'),
  sourceType?: string(name='SourceType', example='device'),
  targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********'),
  targetIotHubQos?: int32(name='TargetIotHubQos', example='0'),
  targetType?: string(name='TargetType', example='function'),
  topicFilter?: string(name='TopicFilter', example='all'),
}

model CreateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AC786033-00C5-4FD6-8435-F2807740D9FA'),
  routeId?: long(name='RouteId', example='123456'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function createEdgeInstanceMessageRoutingWithOptions(request: CreateEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.sourceData)) {
    query['SourceData'] = request.sourceData;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.targetData)) {
    query['TargetData'] = request.targetData;
  }
  if (!Util.isUnset(request.targetIotHubQos)) {
    query['TargetIotHubQos'] = request.targetIotHubQos;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.topicFilter)) {
    query['TopicFilter'] = request.topicFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeInstanceMessageRouting(request: CreateEdgeInstanceMessageRoutingRequest): CreateEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model CreateEdgeOssPreSignedAddressRequest {
  fileName?: string(name='FileName', example='testfile.zip'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  resourceId?: string(name='ResourceId', example='df9b9f441*********4c90d0c21d14'),
  resourceVersion?: string(name='ResourceVersion', example='2.0.0'),
  type?: string(name='Type', example='DRIVER_VERSION_CONTENT'),
}

model CreateEdgeOssPreSignedAddressResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    ossAddress?: string(name='OssAddress', example='http://xxxx.oss-cn-shanghai.aliyuncs.com/driver/a534d3b81*******8fe7da0/DRIVER_VERSION_CONTENT/df9b9f441*********4c90d0c21d14/2.0.0/1581586102750/driver_code.zip'),
    ossPreSignedAddress?: string(name='OssPreSignedAddress', example='http://xxxx.oss-cn-shanghai.aliyuncs.com/driver/a534d3b81*******8fe7da0/DRIVER_VERSION_CONTENT/df9b9f441*********4c90d0c21d14/2.0.0/1581586102750/driver_code.zip?Expires\\u003d1581586402\\u0026OSSAccessKeyId\\u003daS4MT0IYrP******\\u0026Signature\\u003dIUUjZ881H3rUoCOwjMXPmGbw******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='91E2BFA2-ECD7-4E11-B36B-66BCC4773922'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeOssPreSignedAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeOssPreSignedAddressResponseBody(name='body'),
}

async function createEdgeOssPreSignedAddressWithOptions(request: CreateEdgeOssPreSignedAddressRequest, runtime: Util.RuntimeOptions): CreateEdgeOssPreSignedAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceVersion)) {
    query['ResourceVersion'] = request.resourceVersion;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeOssPreSignedAddress',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeOssPreSignedAddress(request: CreateEdgeOssPreSignedAddressRequest): CreateEdgeOssPreSignedAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeOssPreSignedAddressWithOptions(request, runtime);
}

model CreateJobRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobDocument?: string(name='JobDocument', example='{ "serviceIdentifier": "test_service", "params": { "key1": "value1", "key2": "value2" } }'),
  jobFile?: map[string]any(name='JobFile', example='{   "fileKey":"5cc34***f9/tazJ***s",   "signMethod":"Sha256",   "sign":"***" }'),
  jobName?: string(name='JobName', example='oneJob'),
  rolloutConfig?: map[string]any(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
  targetConfig?: map[string]any(name='TargetConfig', example='{"targetType":"PRODUCT_KEY","targetProduct":"a1j***3d"}'),
  timeoutConfig?: map[string]any(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
  type?: string(name='Type', example='INVOKE_SERVICE'),
}

model CreateJobShrinkRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobDocument?: string(name='JobDocument', example='{ "serviceIdentifier": "test_service", "params": { "key1": "value1", "key2": "value2" } }'),
  jobFileShrink?: string(name='JobFile', example='{   "fileKey":"5cc34***f9/tazJ***s",   "signMethod":"Sha256",   "sign":"***" }'),
  jobName?: string(name='JobName', example='oneJob'),
  rolloutConfigShrink?: string(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
  targetConfigShrink?: string(name='TargetConfig', example='{"targetType":"PRODUCT_KEY","targetProduct":"a1j***3d"}'),
  timeoutConfigShrink?: string(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
  type?: string(name='Type', example='INVOKE_SERVICE'),
}

model CreateJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateJobResponseBody(name='body'),
}

async function createJobWithOptions(tmpReq: CreateJobRequest, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobFile)) {
    request.jobFileShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobFile, 'JobFile', 'json');
  }
  if (!Util.isUnset(tmpReq.rolloutConfig)) {
    request.rolloutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rolloutConfig, 'RolloutConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.targetConfig)) {
    request.targetConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targetConfig, 'TargetConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.timeoutConfig)) {
    request.timeoutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timeoutConfig, 'TimeoutConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobDocument)) {
    query['JobDocument'] = request.jobDocument;
  }
  if (!Util.isUnset(request.jobFileShrink)) {
    query['JobFile'] = request.jobFileShrink;
  }
  if (!Util.isUnset(request.jobName)) {
    query['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.rolloutConfigShrink)) {
    query['RolloutConfig'] = request.rolloutConfigShrink;
  }
  if (!Util.isUnset(request.scheduledTime)) {
    query['ScheduledTime'] = request.scheduledTime;
  }
  if (!Util.isUnset(request.targetConfigShrink)) {
    query['TargetConfig'] = request.targetConfigShrink;
  }
  if (!Util.isUnset(request.timeoutConfigShrink)) {
    query['TimeoutConfig'] = request.timeoutConfigShrink;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobWithOptions(request, runtime);
}

model CreateLoRaNodesTaskRequest {
  deviceInfo?: [ 
    {
      devEui?: string(name='DevEui', example='d896e0efff00****'),
      pinCode?: string(name='PinCode', example='123***'),
    }
  ](name='DeviceInfo'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model CreateLoRaNodesTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='62146'),
}

model CreateLoRaNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLoRaNodesTaskResponseBody(name='body'),
}

async function createLoRaNodesTaskWithOptions(request: CreateLoRaNodesTaskRequest, runtime: Util.RuntimeOptions): CreateLoRaNodesTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceInfo)) {
    query['DeviceInfo'] = request.deviceInfo;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoRaNodesTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLoRaNodesTask(request: CreateLoRaNodesTaskRequest): CreateLoRaNodesTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoRaNodesTaskWithOptions(request, runtime);
}

model CreateOTADynamicUpgradeJobRequest {
  downloadProtocol?: string(name='DownloadProtocol', example='HTTPS'),
  dynamicMode?: int32(name='DynamicMode', example='1'),
  firmwareId?: string(name='FirmwareId', example='nx3xxVvFdwvn6dim50PY03****'),
  groupId?: string(name='GroupId', example='IwOwQj7DJ***'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  maximumPerMinute?: int32(name='MaximumPerMinute', example='1000'),
  multiModuleMode?: boolean(name='MultiModuleMode', example='false'),
  needConfirm?: boolean(name='NeedConfirm', example='false'),
  needPush?: boolean(name='NeedPush', example='true'),
  overwriteMode?: int32(name='OverwriteMode', example='2'),
  productKey?: string(name='ProductKey', example='a1Le6d0****'),
  retryCount?: int32(name='RetryCount', example='1'),
  retryInterval?: int32(name='RetryInterval', example='60'),
  srcVersion?: [ string ](name='SrcVersion', example='V1.0.1'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='1440'),
}

model CreateOTADynamicUpgradeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
    utcCreate?: string(name='UtcCreate', example='2019-05-10T02:18:53.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9F41D14E-CB5F-4CCE-939C-057F39E688F5'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTADynamicUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTADynamicUpgradeJobResponseBody(name='body'),
}

async function createOTADynamicUpgradeJobWithOptions(request: CreateOTADynamicUpgradeJobRequest, runtime: Util.RuntimeOptions): CreateOTADynamicUpgradeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.downloadProtocol)) {
    query['DownloadProtocol'] = request.downloadProtocol;
  }
  if (!Util.isUnset(request.dynamicMode)) {
    query['DynamicMode'] = request.dynamicMode;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.maximumPerMinute)) {
    query['MaximumPerMinute'] = request.maximumPerMinute;
  }
  if (!Util.isUnset(request.multiModuleMode)) {
    query['MultiModuleMode'] = request.multiModuleMode;
  }
  if (!Util.isUnset(request.needConfirm)) {
    query['NeedConfirm'] = request.needConfirm;
  }
  if (!Util.isUnset(request.needPush)) {
    query['NeedPush'] = request.needPush;
  }
  if (!Util.isUnset(request.overwriteMode)) {
    query['OverwriteMode'] = request.overwriteMode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.retryCount)) {
    query['RetryCount'] = request.retryCount;
  }
  if (!Util.isUnset(request.retryInterval)) {
    query['RetryInterval'] = request.retryInterval;
  }
  if (!Util.isUnset(request.srcVersion)) {
    query['SrcVersion'] = request.srcVersion;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timeoutInMinutes)) {
    query['TimeoutInMinutes'] = request.timeoutInMinutes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTADynamicUpgradeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOTADynamicUpgradeJob(request: CreateOTADynamicUpgradeJobRequest): CreateOTADynamicUpgradeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTADynamicUpgradeJobWithOptions(request, runtime);
}

model CreateOTAFirmwareRequest {
  destVersion?: string(name='DestVersion', example='2.0.0'),
  firmwareDesc?: string(name='FirmwareDesc', example='OTA function updated'),
  firmwareName?: string(name='FirmwareName', example='Firmware2'),
  firmwareSign?: string(name='FirmwareSign', example='93230c3bde425a9d7984a594ac55****'),
  firmwareSize?: int32(name='FirmwareSize', example='900'),
  firmwareUrl?: string(name='FirmwareUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/bcd6142594d0183a16d825ad8225****/A6B3400B70CA4D6D872160D1A91A****.bin'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', example='WifiConfigModify'),
  multiFiles?: [ 
    {
      fileMd5?: string(name='FileMd5', example='93230c3bde425a9d7984a594ac56***'),
      name?: string(name='Name', example='Firmware1'),
      signValue?: string(name='SignValue', example='93230c3bde425a9d7984a594ac45****'),
      size?: int32(name='Size', example='200'),
      url?: string(name='Url', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/bcd6142594d0183a16d825ad8225****/A6B3400B70CA4D6D872160D1A91A****.bin'),
    }
  ](name='MultiFiles'),
  needToVerify?: boolean(name='NeedToVerify', example='true'),
  productKey?: string(name='ProductKey', example='a1uctKe****'),
  signMethod?: string(name='SignMethod', example='MD5'),
  srcVersion?: string(name='SrcVersion', example='1.0.0'),
  type?: int32(name='Type', example='0'),
  udi?: string(name='Udi'),
}

model CreateOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    firmwareId?: string(name='FirmwareId', example='s8SSHiKjpBfrM3BSN0z803****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:21:54.607Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAFirmwareResponseBody(name='body'),
}

async function createOTAFirmwareWithOptions(request: CreateOTAFirmwareRequest, runtime: Util.RuntimeOptions): CreateOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destVersion)) {
    query['DestVersion'] = request.destVersion;
  }
  if (!Util.isUnset(request.firmwareDesc)) {
    query['FirmwareDesc'] = request.firmwareDesc;
  }
  if (!Util.isUnset(request.firmwareName)) {
    query['FirmwareName'] = request.firmwareName;
  }
  if (!Util.isUnset(request.firmwareSign)) {
    query['FirmwareSign'] = request.firmwareSign;
  }
  if (!Util.isUnset(request.firmwareSize)) {
    query['FirmwareSize'] = request.firmwareSize;
  }
  if (!Util.isUnset(request.firmwareUrl)) {
    query['FirmwareUrl'] = request.firmwareUrl;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.multiFiles)) {
    query['MultiFiles'] = request.multiFiles;
  }
  if (!Util.isUnset(request.needToVerify)) {
    query['NeedToVerify'] = request.needToVerify;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.signMethod)) {
    query['SignMethod'] = request.signMethod;
  }
  if (!Util.isUnset(request.srcVersion)) {
    query['SrcVersion'] = request.srcVersion;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.udi)) {
    query['Udi'] = request.udi;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOTAFirmware(request: CreateOTAFirmwareRequest): CreateOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAFirmwareWithOptions(request, runtime);
}

model CreateOTAModuleRequest {
  aliasName?: string(name='AliasName'),
  desc?: string(name='Desc'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', example='barcodeScanner'),
  productKey?: string(name='ProductKey', example='a1Le6d0****'),
}

model CreateOTAModuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAModuleResponseBody(name='body'),
}

async function createOTAModuleWithOptions(request: CreateOTAModuleRequest, runtime: Util.RuntimeOptions): CreateOTAModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAModule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOTAModule(request: CreateOTAModuleRequest): CreateOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAModuleWithOptions(request, runtime);
}

model CreateOTAStaticUpgradeJobRequest {
  dnListFileUrl?: string(name='DnListFileUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
  downloadProtocol?: string(name='DownloadProtocol', example='HTTPS'),
  firmwareId?: string(name='FirmwareId', example='nx3xxVvFdwvn6dim50PY03****'),
  grayPercent?: string(name='GrayPercent', example='33.33'),
  groupId?: string(name='GroupId', example='CtjzCkNuOx***'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  maximumPerMinute?: int32(name='MaximumPerMinute', example='1000'),
  multiModuleMode?: boolean(name='MultiModuleMode', example='false'),
  needConfirm?: boolean(name='NeedConfirm', example='false'),
  needPush?: boolean(name='NeedPush', example='true'),
  overwriteMode?: int32(name='OverwriteMode', example='1'),
  productKey?: string(name='ProductKey', example='a1Le6d0****'),
  retryCount?: int32(name='RetryCount', example='1'),
  retryInterval?: int32(name='RetryInterval', example='60'),
  scheduleFinishTime?: long(name='ScheduleFinishTime', example='1577909000000'),
  scheduleTime?: long(name='ScheduleTime', example='1577808000000'),
  srcVersion?: [ string ](name='SrcVersion', example='V1.0.1'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag'),
  targetDeviceName?: [ string ](name='TargetDeviceName', example='deviceName1'),
  targetSelection?: string(name='TargetSelection', example='ALL'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='1440'),
}

model CreateOTAStaticUpgradeJobResponseBody = {
  code?: string(name='Code', example='MissingFirmwareId'),
  data?: {
    jobId?: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:22:19.566Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='FirmwareId is mandatory for this action.'),
  requestId?: string(name='RequestId', example='29EC7245-0FA4-4BB6-B4F5-5F04818FDFB1'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAStaticUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAStaticUpgradeJobResponseBody(name='body'),
}

async function createOTAStaticUpgradeJobWithOptions(request: CreateOTAStaticUpgradeJobRequest, runtime: Util.RuntimeOptions): CreateOTAStaticUpgradeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dnListFileUrl)) {
    query['DnListFileUrl'] = request.dnListFileUrl;
  }
  if (!Util.isUnset(request.downloadProtocol)) {
    query['DownloadProtocol'] = request.downloadProtocol;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.grayPercent)) {
    query['GrayPercent'] = request.grayPercent;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.maximumPerMinute)) {
    query['MaximumPerMinute'] = request.maximumPerMinute;
  }
  if (!Util.isUnset(request.multiModuleMode)) {
    query['MultiModuleMode'] = request.multiModuleMode;
  }
  if (!Util.isUnset(request.needConfirm)) {
    query['NeedConfirm'] = request.needConfirm;
  }
  if (!Util.isUnset(request.needPush)) {
    query['NeedPush'] = request.needPush;
  }
  if (!Util.isUnset(request.overwriteMode)) {
    query['OverwriteMode'] = request.overwriteMode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.retryCount)) {
    query['RetryCount'] = request.retryCount;
  }
  if (!Util.isUnset(request.retryInterval)) {
    query['RetryInterval'] = request.retryInterval;
  }
  if (!Util.isUnset(request.scheduleFinishTime)) {
    query['ScheduleFinishTime'] = request.scheduleFinishTime;
  }
  if (!Util.isUnset(request.scheduleTime)) {
    query['ScheduleTime'] = request.scheduleTime;
  }
  if (!Util.isUnset(request.srcVersion)) {
    query['SrcVersion'] = request.srcVersion;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetDeviceName)) {
    query['TargetDeviceName'] = request.targetDeviceName;
  }
  if (!Util.isUnset(request.targetSelection)) {
    query['TargetSelection'] = request.targetSelection;
  }
  if (!Util.isUnset(request.timeoutInMinutes)) {
    query['TimeoutInMinutes'] = request.timeoutInMinutes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAStaticUpgradeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOTAStaticUpgradeJob(request: CreateOTAStaticUpgradeJobRequest): CreateOTAStaticUpgradeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAStaticUpgradeJobWithOptions(request, runtime);
}

model CreateOTAVerifyJobRequest {
  downloadProtocol?: string(name='DownloadProtocol', example='HTTPS'),
  firmwareId?: string(name='FirmwareId', example='nx3xxVvFdwvn6dim50PY03****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  needConfirm?: boolean(name='NeedConfirm', example='false'),
  needPush?: boolean(name='NeedPush', example='true'),
  productKey?: string(name='ProductKey', example='a1VJwBw****'),
  tag?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='Tag'),
  targetDeviceName?: [ string ](name='TargetDeviceName', example='testdevice'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', example='1440'),
}

model CreateOTAVerifyJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    jobId?: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:22:19.566Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='29EC7245-0FA4-4BB6-B4F5-5F04818FDFB1'),
  success?: boolean(name='Success', example='true'),
}

model CreateOTAVerifyJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAVerifyJobResponseBody(name='body'),
}

async function createOTAVerifyJobWithOptions(request: CreateOTAVerifyJobRequest, runtime: Util.RuntimeOptions): CreateOTAVerifyJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.downloadProtocol)) {
    query['DownloadProtocol'] = request.downloadProtocol;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.needConfirm)) {
    query['NeedConfirm'] = request.needConfirm;
  }
  if (!Util.isUnset(request.needPush)) {
    query['NeedPush'] = request.needPush;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetDeviceName)) {
    query['TargetDeviceName'] = request.targetDeviceName;
  }
  if (!Util.isUnset(request.timeoutInMinutes)) {
    query['TimeoutInMinutes'] = request.timeoutInMinutes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAVerifyJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createOTAVerifyJob(request: CreateOTAVerifyJobRequest): CreateOTAVerifyJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAVerifyJobWithOptions(request, runtime);
}

model CreateParserRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  name?: string(name='Name', example='DataParser'),
}

model CreateParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  parserId?: long(name='ParserId', example='100*'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateParserResponseBody(name='body'),
}

async function createParserWithOptions(request: CreateParserRequest, runtime: Util.RuntimeOptions): CreateParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createParser(request: CreateParserRequest): CreateParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createParserWithOptions(request, runtime);
}

model CreateParserDataSourceRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-w2****'),
  name?: string(name='Name', example='DataSource'),
}

model CreateParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSource?: {
    dataSourceId?: long(name='DataSourceId', example='1001'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataSource'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='DataSource'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateParserDataSourceResponseBody(name='body'),
}

async function createParserDataSourceWithOptions(request: CreateParserDataSourceRequest, runtime: Util.RuntimeOptions): CreateParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createParserDataSource(request: CreateParserDataSourceRequest): CreateParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createParserDataSourceWithOptions(request, runtime);
}

model CreateProductRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior'),
  authType?: string(name='AuthType', example='secret'),
  categoryKey?: string(name='CategoryKey', example='Lighting'),
  dataFormat?: int32(name='DataFormat', example='1'),
  description?: string(name='Description', example='Product test'),
  id2?: boolean(name='Id2', example='false'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v64***'),
  joinPermissionId?: string(name='JoinPermissionId', example='8***'),
  netType?: string(name='NetType', example='WIFI'),
  nodeType?: int32(name='NodeType', example='0'),
  productName?: string(name='ProductName', example='Light'),
  protocolType?: string(name='ProtocolType', example='modbus'),
  publishAuto?: boolean(name='PublishAuto', example='false'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph***'),
  validateType?: int32(name='ValidateType', example='1'),
}

model CreateProductResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior'),
    authType?: string(name='AuthType', example='secret'),
    dataFormat?: int32(name='DataFormat', example='1'),
    description?: string(name='Description', example='Product test'),
    id2?: boolean(name='Id2', example='false'),
    nodeType?: int32(name='NodeType', example='0'),
    productKey?: string(name='ProductKey', example='a1FlqIQ****'),
    productName?: string(name='ProductName', example='Test'),
    productSecret?: string(name='ProductSecret', example='U5tW7i44uilc****'),
    protocolType?: string(name='ProtocolType', example='modbus'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey', example='a1FlqIQ****'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

async function createProductWithOptions(request: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunCommodityCode)) {
    query['AliyunCommodityCode'] = request.aliyunCommodityCode;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.categoryKey)) {
    query['CategoryKey'] = request.categoryKey;
  }
  if (!Util.isUnset(request.dataFormat)) {
    query['DataFormat'] = request.dataFormat;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.id2)) {
    query['Id2'] = request.id2;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.joinPermissionId)) {
    query['JoinPermissionId'] = request.joinPermissionId;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.productName)) {
    query['ProductName'] = request.productName;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.publishAuto)) {
    query['PublishAuto'] = request.publishAuto;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.validateType)) {
    query['ValidateType'] = request.validateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateProductDistributeJobRequest {
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-st2***'),
  targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com'),
  targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***'),
  targetUid?: string(name='TargetUid', example='198***'),
}

model CreateProductDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateProductDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductDistributeJobResponseBody(name='body'),
}

async function createProductDistributeJobWithOptions(request: CreateProductDistributeJobRequest, runtime: Util.RuntimeOptions): CreateProductDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    query['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.targetAliyunId)) {
    query['TargetAliyunId'] = request.targetAliyunId;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    query['TargetInstanceId'] = request.targetInstanceId;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProductDistributeJob(request: CreateProductDistributeJobRequest): CreateProductDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductDistributeJobWithOptions(request, runtime);
}

model CreateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='TagValue'),
    }
  ](name='ProductTag'),
}

model CreateProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='123$'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductTagsResponseBody(name='body'),
}

async function createProductTagsWithOptions(request: CreateProductTagsRequest, runtime: Util.RuntimeOptions): CreateProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productTag)) {
    query['ProductTag'] = request.productTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProductTags(request: CreateProductTagsRequest): CreateProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductTagsWithOptions(request, runtime);
}

model CreateProductTopicRequest {
  desc?: string(name='Desc', example='submit a test topic'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  operation?: string(name='Operation', example='PUB'),
  productKey?: string(name='ProductKey', example='aldDEin****'),
  topicShortName?: string(name='TopicShortName', example='submit'),
}

model CreateProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
  topicId?: long(name='TopicId', example='10000'),
}

model CreateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductTopicResponseBody(name='body'),
}

async function createProductTopicWithOptions(request: CreateProductTopicRequest, runtime: Util.RuntimeOptions): CreateProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicShortName)) {
    query['TopicShortName'] = request.topicShortName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProductTopic(request: CreateProductTopicRequest): CreateProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductTopicWithOptions(request, runtime);
}

model CreateRuleRequest {
  dataType?: string(name='DataType', example='JSON'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  name?: string(name='Name', example='iot_test1'),
  productKey?: string(name='ProductKey', example='a1T27vz****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
  ruleDesc?: string(name='RuleDesc', example='rule test'),
  select?: string(name='Select', example='deviceName() as deviceName, items.Humidity.value as Humidity, items.Temperature.value as Temperature'),
  shortTopic?: string(name='ShortTopic', example='+/thing/event/property/post'),
  topic?: string(name='Topic', example='/sys/g18l***/device1/thing/event/property/post'),
  topicType?: int32(name='TopicType', example='1'),
  where?: string(name='Where', example='Temperature>35'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  ruleId?: long(name='RuleId', example='100000'),
  success?: boolean(name='Success', example='true'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ruleDesc)) {
    query['RuleDesc'] = request.ruleDesc;
  }
  if (!Util.isUnset(request.select)) {
    query['Select'] = request.select;
  }
  if (!Util.isUnset(request.shortTopic)) {
    query['ShortTopic'] = request.shortTopic;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.topicType)) {
    query['TopicType'] = request.topicType;
  }
  if (!Util.isUnset(request.where)) {
    query['Where'] = request.where;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateRuleActionRequest {
  configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
  errorActionFlag?: boolean(name='ErrorActionFlag', example='false'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  ruleId?: long(name='RuleId', example='100000'),
  type?: string(name='Type', example='REPUBLISH'),
}

model CreateRuleActionResponseBody = {
  actionId?: long(name='ActionId', example='10003'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model CreateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRuleActionResponseBody(name='body'),
}

async function createRuleActionWithOptions(request: CreateRuleActionRequest, runtime: Util.RuntimeOptions): CreateRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.errorActionFlag)) {
    query['ErrorActionFlag'] = request.errorActionFlag;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRuleAction(request: CreateRuleActionRequest): CreateRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleActionWithOptions(request, runtime);
}

model CreateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleContent?: string(name='RuleContent'),
  ruleDescription?: string(name='RuleDescription'),
  ruleName?: string(name='RuleName', example='test'),
}

model CreateSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
  success?: boolean(name='Success', example='true'),
}

model CreateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSceneRuleResponseBody(name='body'),
}

async function createSceneRuleWithOptions(request: CreateSceneRuleRequest, runtime: Util.RuntimeOptions): CreateSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleContent)) {
    query['RuleContent'] = request.ruleContent;
  }
  if (!Util.isUnset(request.ruleDescription)) {
    query['RuleDescription'] = request.ruleDescription;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSceneRule(request: CreateSceneRuleRequest): CreateSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSceneRuleWithOptions(request, runtime);
}

model CreateSchedulePeriodRequest {
  description?: string(name='Description', example='test'),
  endTime?: string(name='EndTime', example='01:00'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
  startTime?: string(name='StartTime', example='00:00'),
}

model CreateSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSchedulePeriodResponseBody(name='body'),
}

async function createSchedulePeriodWithOptions(request: CreateSchedulePeriodRequest, runtime: Util.RuntimeOptions): CreateSchedulePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSchedulePeriod',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSchedulePeriod(request: CreateSchedulePeriodRequest): CreateSchedulePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSchedulePeriodWithOptions(request, runtime);
}

model CreateSoundCodeRequest {
  duration?: int32(name='Duration', example='2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name'),
  openType?: string(name='OpenType'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
}

model CreateSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSoundCodeResponseBody(name='body'),
}

async function createSoundCodeWithOptions(request: CreateSoundCodeRequest, runtime: Util.RuntimeOptions): CreateSoundCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.openType)) {
    body['OpenType'] = request.openType;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSoundCode',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSoundCode(request: CreateSoundCodeRequest): CreateSoundCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSoundCodeWithOptions(request, runtime);
}

model CreateSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  label?: string(name='Label', example='test'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model CreateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSoundCodeLabelResponseBody(name='body'),
}

async function createSoundCodeLabelWithOptions(request: CreateSoundCodeLabelRequest, runtime: Util.RuntimeOptions): CreateSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSoundCodeLabel(request: CreateSoundCodeLabelRequest): CreateSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSoundCodeLabelWithOptions(request, runtime);
}

model CreateSoundCodeScheduleRequest {
  description?: string(name='Description', example='test'),
  endDate?: string(name='EndDate', example='2022-03-31'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test'),
  openType?: string(name='OpenType', example='INNER'),
  startDate?: string(name='StartDate', example='2022-03-31'),
}

model CreateSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSoundCodeScheduleResponseBody(name='body'),
}

async function createSoundCodeScheduleWithOptions(request: CreateSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): CreateSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.openType)) {
    body['OpenType'] = request.openType;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSoundCodeSchedule(request: CreateSoundCodeScheduleRequest): CreateSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSoundCodeScheduleWithOptions(request, runtime);
}

model CreateSpeechRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  bizCode?: string(name='BizCode', example='identifying'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Xiaoyun'),
  volume?: int32(name='Volume', example='50'),
}

model CreateSpeechShrinkRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  bizCode?: string(name='BizCode', example='identifying'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeConfigShrink?: string(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Xiaoyun'),
  volume?: int32(name='Volume', example='50'),
}

model CreateSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSpeechResponseBody(name='body'),
}

async function createSpeechWithOptions(tmpReq: CreateSpeechRequest, runtime: Util.RuntimeOptions): CreateSpeechResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSpeechShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.soundCodeConfig)) {
    request.soundCodeConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.soundCodeConfig, 'SoundCodeConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.bizCode)) {
    body['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.enableSoundCode)) {
    body['EnableSoundCode'] = request.enableSoundCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.soundCodeConfigShrink)) {
    body['SoundCodeConfig'] = request.soundCodeConfigShrink;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.speechType)) {
    body['SpeechType'] = request.speechType;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSpeech(request: CreateSpeechRequest): CreateSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSpeechWithOptions(request, runtime);
}

model CreateStudioAppDomainOpenRequest {
  appId?: string(name='AppId', example='a12*******'),
  host?: string(name='Host', example='www.aliyun.test.com'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123******'),
  protocol?: string(name='Protocol', example='https'),
}

model CreateStudioAppDomainOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    appId?: string(name='AppId', example='a12******'),
    host?: string(name='Host', example='www.aliyun.test.com'),
    id?: int32(name='Id', example='1573'),
    isBeian?: string(name='IsBeian', example='YES'),
    projectId?: string(name='ProjectId', example='a12*******'),
    protocol?: string(name='Protocol', example='https'),
    tenantId?: string(name='TenantId', example='C70B541046F64EAABE3*******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStudioAppDomainOpenResponseBody(name='body'),
}

async function createStudioAppDomainOpenWithOptions(request: CreateStudioAppDomainOpenRequest, runtime: Util.RuntimeOptions): CreateStudioAppDomainOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.host)) {
    body['Host'] = request.host;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocol)) {
    body['Protocol'] = request.protocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateStudioAppDomainOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStudioAppDomainOpen(request: CreateStudioAppDomainOpenRequest): CreateStudioAppDomainOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStudioAppDomainOpenWithOptions(request, runtime);
}

model CreateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', example='nJRaJPn5U1JITGfjBO9l00****'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', example='true'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', example='true'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', example='true'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', example='true'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', example='true'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  mnsConfiguration?: string(name='MnsConfiguration', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }'),
  otaEventFlag?: boolean(name='OtaEventFlag', example='true'),
  otaJobFlag?: boolean(name='OtaJobFlag', example='true'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', example='true'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
  subscribeFlags?: string(name='SubscribeFlags'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', example='true'),
  type?: string(name='Type', example='AMQP'),
}

model CreateSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model CreateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubscribeRelationResponseBody(name='body'),
}

async function createSubscribeRelationWithOptions(request: CreateSubscribeRelationRequest, runtime: Util.RuntimeOptions): CreateSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupIds)) {
    query['ConsumerGroupIds'] = request.consumerGroupIds;
  }
  if (!Util.isUnset(request.deviceDataFlag)) {
    query['DeviceDataFlag'] = request.deviceDataFlag;
  }
  if (!Util.isUnset(request.deviceLifeCycleFlag)) {
    query['DeviceLifeCycleFlag'] = request.deviceLifeCycleFlag;
  }
  if (!Util.isUnset(request.deviceStatusChangeFlag)) {
    query['DeviceStatusChangeFlag'] = request.deviceStatusChangeFlag;
  }
  if (!Util.isUnset(request.deviceTagFlag)) {
    query['DeviceTagFlag'] = request.deviceTagFlag;
  }
  if (!Util.isUnset(request.deviceTopoLifeCycleFlag)) {
    query['DeviceTopoLifeCycleFlag'] = request.deviceTopoLifeCycleFlag;
  }
  if (!Util.isUnset(request.foundDeviceListFlag)) {
    query['FoundDeviceListFlag'] = request.foundDeviceListFlag;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.mnsConfiguration)) {
    query['MnsConfiguration'] = request.mnsConfiguration;
  }
  if (!Util.isUnset(request.otaEventFlag)) {
    query['OtaEventFlag'] = request.otaEventFlag;
  }
  if (!Util.isUnset(request.otaJobFlag)) {
    query['OtaJobFlag'] = request.otaJobFlag;
  }
  if (!Util.isUnset(request.otaVersionFlag)) {
    query['OtaVersionFlag'] = request.otaVersionFlag;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.subscribeFlags)) {
    query['SubscribeFlags'] = request.subscribeFlags;
  }
  if (!Util.isUnset(request.thingHistoryFlag)) {
    query['ThingHistoryFlag'] = request.thingHistoryFlag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubscribeRelation(request: CreateSubscribeRelationRequest): CreateSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscribeRelationWithOptions(request, runtime);
}

model CreateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  functionBlockName?: string(name='FunctionBlockName'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  thingModelJson?: string(name='ThingModelJson'),
}

model CreateThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateThingModelResponseBody(name='body'),
}

async function createThingModelWithOptions(request: CreateThingModelRequest, runtime: Util.RuntimeOptions): CreateThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.functionBlockName)) {
    query['FunctionBlockName'] = request.functionBlockName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.thingModelJson)) {
    query['ThingModelJson'] = request.thingModelJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createThingModel(request: CreateThingModelRequest): CreateThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThingModelWithOptions(request, runtime);
}

model CreateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1Q5XoY****'),
  scriptContent?: string(name='ScriptContent', example='"function protocolToRawData(jsonObj) {return rawdata; }function rawDataToProtocol(rawData) {return jsonObj; }"'),
  scriptType?: string(name='ScriptType', example='JavaScript'),
}

model CreateThingScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model CreateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateThingScriptResponseBody(name='body'),
}

async function createThingScriptWithOptions(request: CreateThingScriptRequest, runtime: Util.RuntimeOptions): CreateThingScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.scriptContent)) {
    query['ScriptContent'] = request.scriptContent;
  }
  if (!Util.isUnset(request.scriptType)) {
    query['ScriptType'] = request.scriptType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateThingScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createThingScript(request: CreateThingScriptRequest): CreateThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThingScriptWithOptions(request, runtime);
}

model CreateTopicRouteTableRequest {
  dstTopic?: [ string ](name='DstTopic', example='/x7aWKW9****/deviceNameTest1/user/add'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  srcTopic?: string(name='SrcTopic', example='/x7aWKW9****/testDataToDataHub/user/update'),
}

model CreateTopicRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='iot.system.SystemException'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics'),
  isAllSucceed?: boolean(name='IsAllSucceed', example='true'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model CreateTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTopicRouteTableResponseBody(name='body'),
}

async function createTopicRouteTableWithOptions(request: CreateTopicRouteTableRequest, runtime: Util.RuntimeOptions): CreateTopicRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dstTopic)) {
    query['DstTopic'] = request.dstTopic;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.srcTopic)) {
    query['SrcTopic'] = request.srcTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTopicRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTopicRouteTable(request: CreateTopicRouteTableRequest): CreateTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTopicRouteTableWithOptions(request, runtime);
}

model DeleteClientIdsRequest {
  iotId?: string(name='IotId', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-12****78'),
}

model DeleteClientIdsResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', example='true'),
}

model DeleteClientIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClientIdsResponseBody(name='body'),
}

async function deleteClientIdsWithOptions(request: DeleteClientIdsRequest, runtime: Util.RuntimeOptions): DeleteClientIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientIds',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClientIds(request: DeleteClientIdsRequest): DeleteClientIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientIdsWithOptions(request, runtime);
}

model DeleteConsumerGroupRequest {
  groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

async function deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupWithOptions(request, runtime);
}

model DeleteConsumerGroupSubscribeRelationRequest {
  consumerGroupId?: string(name='ConsumerGroupId', example='nJRaJPn5U1JITGfjBO9l00****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
}

model DeleteConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConsumerGroupSubscribeRelationResponseBody(name='body'),
}

async function deleteConsumerGroupSubscribeRelationWithOptions(request: DeleteConsumerGroupSubscribeRelationRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupId)) {
    query['ConsumerGroupId'] = request.consumerGroupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroupSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteConsumerGroupSubscribeRelation(request: DeleteConsumerGroupSubscribeRelationRequest): DeleteConsumerGroupSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupSubscribeRelationWithOptions(request, runtime);
}

model DeleteDataSourceItemRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  dataSourceItemId?: long(name='DataSourceItemId', example='129322'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****'),
}

model DeleteDataSourceItemResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceItemResponseBody(name='body'),
}

async function deleteDataSourceItemWithOptions(request: DeleteDataSourceItemRequest, runtime: Util.RuntimeOptions): DeleteDataSourceItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.dataSourceItemId)) {
    query['DataSourceItemId'] = request.dataSourceItemId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSourceItem',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSourceItem(request: DeleteDataSourceItemRequest): DeleteDataSourceItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceItemWithOptions(request, runtime);
}

model DeleteDestinationRequest {
  destinationId?: long(name='DestinationId', example='1003'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model DeleteDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDestinationResponseBody(name='body'),
}

async function deleteDestinationWithOptions(request: DeleteDestinationRequest, runtime: Util.RuntimeOptions): DeleteDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDestination(request: DeleteDestinationRequest): DeleteDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDestinationWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='MpEKNuEUJzIORNANAWJX0010929900*****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1FlqIQ****'),
}

model DeleteDeviceResponseBody = {
  code?: string(name='Code', example='iot.prod.NullProductKey'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='false'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceResponseBody(name='body'),
}

async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model DeleteDeviceDistributeJobRequest {
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
}

model DeleteDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceDistributeJobResponseBody(name='body'),
}

async function deleteDeviceDistributeJobWithOptions(request: DeleteDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): DeleteDeviceDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceDistributeJob(request: DeleteDeviceDistributeJobRequest): DeleteDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceDistributeJobWithOptions(request, runtime);
}

model DeleteDeviceDynamicGroupRequest {
  groupId?: string(name='GroupId', example='tDQvBJqbUyHs***'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
}

model DeleteDeviceDynamicGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceDynamicGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceDynamicGroupResponseBody(name='body'),
}

async function deleteDeviceDynamicGroupWithOptions(request: DeleteDeviceDynamicGroupRequest, runtime: Util.RuntimeOptions): DeleteDeviceDynamicGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceDynamicGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceDynamicGroup(request: DeleteDeviceDynamicGroupRequest): DeleteDeviceDynamicGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceDynamicGroupWithOptions(request, runtime);
}

model DeleteDeviceFileRequest {
  deviceName?: string(name='DeviceName', example='light'),
  fileId?: string(name='FileId', example='6UCo1SqbqnQEoh9aK4561****'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model DeleteDeviceFileResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceFileResponseBody(name='body'),
}

async function deleteDeviceFileWithOptions(request: DeleteDeviceFileRequest, runtime: Util.RuntimeOptions): DeleteDeviceFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceFile',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceFile(request: DeleteDeviceFileRequest): DeleteDeviceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceFileWithOptions(request, runtime);
}

model DeleteDeviceGroupRequest {
  groupId?: string(name='GroupId', example='tDQvBJqbUyHs****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceGroupResponseBody(name='body'),
}

async function deleteDeviceGroupWithOptions(request: DeleteDeviceGroupRequest, runtime: Util.RuntimeOptions): DeleteDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceGroup(request: DeleteDeviceGroupRequest): DeleteDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceGroupWithOptions(request, runtime);
}

model DeleteDevicePropRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  propKey?: string(name='PropKey', example='room'),
}

model DeleteDevicePropResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDevicePropResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDevicePropResponseBody(name='body'),
}

async function deleteDevicePropWithOptions(request: DeleteDevicePropRequest, runtime: Util.RuntimeOptions): DeleteDevicePropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.propKey)) {
    query['PropKey'] = request.propKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceProp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceProp(request: DeleteDevicePropRequest): DeleteDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDevicePropWithOptions(request, runtime);
}

model DeleteDeviceSpeechRequest {
  deviceSpeechList?: [ 
    {
      audioFormat?: string(name='AudioFormat', example='wav'),
      bizCode?: string(name='BizCode', example='identifying'),
    }
  ](name='DeviceSpeechList'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteDeviceSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceSpeechResponseBody(name='body'),
}

async function deleteDeviceSpeechWithOptions(request: DeleteDeviceSpeechRequest, runtime: Util.RuntimeOptions): DeleteDeviceSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceSpeechList)) {
    body['DeviceSpeechList'] = request.deviceSpeechList;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceSpeech(request: DeleteDeviceSpeechRequest): DeleteDeviceSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceSpeechWithOptions(request, runtime);
}

model DeleteDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
}

model DeleteDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceTunnelResponseBody(name='body'),
}

async function deleteDeviceTunnelWithOptions(request: DeleteDeviceTunnelRequest, runtime: Util.RuntimeOptions): DeleteDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tunnelId)) {
    query['TunnelId'] = request.tunnelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceTunnel(request: DeleteDeviceTunnelRequest): DeleteDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceTunnelWithOptions(request, runtime);
}

model DeleteEdgeDriverRequest {
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='F82E857F-B6B9-4CCC-96B8-E4BE97095F1A'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeDriverResponseBody(name='body'),
}

async function deleteEdgeDriverWithOptions(request: DeleteEdgeDriverRequest, runtime: Util.RuntimeOptions): DeleteEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEdgeDriver(request: DeleteEdgeDriverRequest): DeleteEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeDriverWithOptions(request, runtime);
}

model DeleteEdgeDriverVersionRequest {
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', example='1.2.0'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='J82E857F-T6B9-4FDE-96B8-E4BE97095D1A'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeDriverVersionResponseBody(name='body'),
}

async function deleteEdgeDriverVersionWithOptions(request: DeleteEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): DeleteEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEdgeDriverVersion(request: DeleteEdgeDriverVersionRequest): DeleteEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeDriverVersionWithOptions(request, runtime);
}

model DeleteEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='F29C33E5-BF22-48FE-9FEF-8A24146E3388'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeInstanceResponseBody(name='body'),
}

async function deleteEdgeInstanceWithOptions(request: DeleteEdgeInstanceRequest, runtime: Util.RuntimeOptions): DeleteEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEdgeInstance(request: DeleteEdgeInstanceRequest): DeleteEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeInstanceWithOptions(request, runtime);
}

model DeleteEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='5zvK1COK1gtr********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  routeId?: long(name='RouteId', example='123456'),
}

model DeleteEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E252BC84-EF9A-4F0F-8E73-ADCF9CA3B722'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function deleteEdgeInstanceMessageRoutingWithOptions(request: DeleteEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): DeleteEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEdgeInstanceMessageRouting(request: DeleteEdgeInstanceMessageRoutingRequest): DeleteEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model DeleteJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
}

model DeleteJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='C25255EA-9F6E-4E04-85FE-AC1E9C136EBB'),
  success?: boolean(name='Success', example='true'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJobWithOptions(request: DeleteJobRequest, runtime: Util.RuntimeOptions): DeleteJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteJobWithOptions(request, runtime);
}

model DeleteOTAFirmwareRequest {
  firmwareId?: string(name='FirmwareId', example='s8SSHiKjpBfrM3BSN0z803****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9B7BF858-7686-496E-B8B0-BF9E5D7F86CE'),
  success?: boolean(name='Success', example='true'),
}

model DeleteOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOTAFirmwareResponseBody(name='body'),
}

async function deleteOTAFirmwareWithOptions(request: DeleteOTAFirmwareRequest, runtime: Util.RuntimeOptions): DeleteOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteOTAFirmware(request: DeleteOTAFirmwareRequest): DeleteOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOTAFirmwareWithOptions(request, runtime);
}

model DeleteOTAModuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', example='barcodeScanner'),
  productKey?: string(name='ProductKey', example='a1uctKe****'),
}

model DeleteOTAModuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model DeleteOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOTAModuleResponseBody(name='body'),
}

async function deleteOTAModuleWithOptions(request: DeleteOTAModuleRequest, runtime: Util.RuntimeOptions): DeleteOTAModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOTAModule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteOTAModule(request: DeleteOTAModuleRequest): DeleteOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOTAModuleWithOptions(request, runtime);
}

model DeleteParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  parserId?: long(name='ParserId', example='1001'),
}

model DeleteParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteParserResponseBody(name='body'),
}

async function deleteParserWithOptions(request: DeleteParserRequest, runtime: Util.RuntimeOptions): DeleteParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteParser(request: DeleteParserRequest): DeleteParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteParserWithOptions(request, runtime);
}

model DeleteParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model DeleteParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteParserDataSourceResponseBody(name='body'),
}

async function deleteParserDataSourceWithOptions(request: DeleteParserDataSourceRequest, runtime: Util.RuntimeOptions): DeleteParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteParserDataSource(request: DeleteParserDataSourceRequest): DeleteParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteParserDataSourceWithOptions(request, runtime);
}

model DeleteProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model DeleteProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  productTagKey?: [ string ](name='ProductTagKey', example='room'),
}

model DeleteProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductTagsResponseBody(name='body'),
}

async function deleteProductTagsWithOptions(request: DeleteProductTagsRequest, runtime: Util.RuntimeOptions): DeleteProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productTagKey)) {
    query['ProductTagKey'] = request.productTagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProductTags(request: DeleteProductTagsRequest): DeleteProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductTagsWithOptions(request, runtime);
}

model DeleteProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  topicId?: string(name='TopicId', example='798****'),
}

model DeleteProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductTopicResponseBody(name='body'),
}

async function deleteProductTopicWithOptions(request: DeleteProductTopicRequest, runtime: Util.RuntimeOptions): DeleteProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.topicId)) {
    query['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteProductTopic(request: DeleteProductTopicRequest): DeleteProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductTopicWithOptions(request, runtime);
}

model DeleteRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', example='100000'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A8F48485-44B9-40D8-A56D-F716F384F387'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteRuleActionRequest {
  actionId?: long(name='ActionId', example='100001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteRuleActionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='8FC9E36B-E0DC-4802-84EE-184E255B4E95'),
  success?: boolean(name='Success', example='true'),
}

model DeleteRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRuleActionResponseBody(name='body'),
}

async function deleteRuleActionWithOptions(request: DeleteRuleActionRequest, runtime: Util.RuntimeOptions): DeleteRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionId)) {
    query['ActionId'] = request.actionId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRuleAction(request: DeleteRuleActionRequest): DeleteRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleActionWithOptions(request, runtime);
}

model DeleteSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model DeleteSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneRuleResponseBody(name='body'),
}

async function deleteSceneRuleWithOptions(request: DeleteSceneRuleRequest, runtime: Util.RuntimeOptions): DeleteSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSceneRule(request: DeleteSceneRuleRequest): DeleteSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSceneRuleWithOptions(request, runtime);
}

model DeleteSchedulePeriodRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  periodCode?: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSchedulePeriodResponseBody(name='body'),
}

async function deleteSchedulePeriodWithOptions(request: DeleteSchedulePeriodRequest, runtime: Util.RuntimeOptions): DeleteSchedulePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.periodCode)) {
    body['PeriodCode'] = request.periodCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSchedulePeriod',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSchedulePeriod(request: DeleteSchedulePeriodRequest): DeleteSchedulePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSchedulePeriodWithOptions(request, runtime);
}

model DeleteShareTaskDeviceRequest {
  iotIdList?: [ string ](name='IotIdList', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  shareTaskId?: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteShareTaskDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    progress?: int32(name='Progress', example='100'),
    progressId?: string(name='ProgressId', example='Md3ZiTL888K9llXDy7890***********'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model DeleteShareTaskDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteShareTaskDeviceResponseBody(name='body'),
}

async function deleteShareTaskDeviceWithOptions(request: DeleteShareTaskDeviceRequest, runtime: Util.RuntimeOptions): DeleteShareTaskDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotIdList)) {
    body['IotIdList'] = request.iotIdList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.shareTaskId)) {
    body['ShareTaskId'] = request.shareTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteShareTaskDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteShareTaskDevice(request: DeleteShareTaskDeviceRequest): DeleteShareTaskDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShareTaskDeviceWithOptions(request, runtime);
}

model DeleteSoundCodeRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSoundCodeResponseBody(name='body'),
}

async function deleteSoundCodeWithOptions(request: DeleteSoundCodeRequest, runtime: Util.RuntimeOptions): DeleteSoundCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSoundCode',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSoundCode(request: DeleteSoundCodeRequest): DeleteSoundCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSoundCodeWithOptions(request, runtime);
}

model DeleteSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSoundCodeLabelResponseBody(name='body'),
}

async function deleteSoundCodeLabelWithOptions(request: DeleteSoundCodeLabelRequest, runtime: Util.RuntimeOptions): DeleteSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSoundCodeLabel(request: DeleteSoundCodeLabelRequest): DeleteSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSoundCodeLabelWithOptions(request, runtime);
}

model DeleteSoundCodeScheduleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSoundCodeScheduleResponseBody(name='body'),
}

async function deleteSoundCodeScheduleWithOptions(request: DeleteSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): DeleteSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSoundCodeSchedule(request: DeleteSoundCodeScheduleRequest): DeleteSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSoundCodeScheduleWithOptions(request, runtime);
}

model DeleteSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  speechCodeList?: [ string ](name='SpeechCodeList', example='4de2c367****8c585e5992**'),
}

model DeleteSpeechResponseBody = {
  code?: string(name='Code', example='iot.speech.InvalidSpeechCodeList'),
  errorMessage?: string(name='ErrorMessage', example='invalid SpeechCodeList'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpeechResponseBody(name='body'),
}

async function deleteSpeechWithOptions(request: DeleteSpeechRequest, runtime: Util.RuntimeOptions): DeleteSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.speechCodeList)) {
    body['SpeechCodeList'] = request.speechCodeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSpeech(request: DeleteSpeechRequest): DeleteSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpeechWithOptions(request, runtime);
}

model DeleteStudioAppDomainOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  domainId?: int32(name='DomainId', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123*******'),
}

model DeleteStudioAppDomainOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStudioAppDomainOpenResponseBody(name='body'),
}

async function deleteStudioAppDomainOpenWithOptions(request: DeleteStudioAppDomainOpenRequest, runtime: Util.RuntimeOptions): DeleteStudioAppDomainOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.domainId)) {
    body['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStudioAppDomainOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStudioAppDomainOpen(request: DeleteStudioAppDomainOpenRequest): DeleteStudioAppDomainOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStudioAppDomainOpenWithOptions(request, runtime);
}

model DeleteSubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
  type?: string(name='Type', example='AMQP'),
}

model DeleteSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSubscribeRelationResponseBody(name='body'),
}

async function deleteSubscribeRelationWithOptions(request: DeleteSubscribeRelationRequest, runtime: Util.RuntimeOptions): DeleteSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSubscribeRelation(request: DeleteSubscribeRelationRequest): DeleteSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubscribeRelationWithOptions(request, runtime);
}

model DeleteThingModelRequest {
  eventIdentifier?: [ string ](name='EventIdentifier', example='OfflineAlert'),
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  propertyIdentifier?: [ string ](name='PropertyIdentifier', example='Temperature'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****'),
  serviceIdentifier?: [ string ](name='ServiceIdentifier', example='Set'),
}

model DeleteThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteThingModelResponseBody(name='body'),
}

async function deleteThingModelWithOptions(request: DeleteThingModelRequest, runtime: Util.RuntimeOptions): DeleteThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventIdentifier)) {
    query['EventIdentifier'] = request.eventIdentifier;
  }
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.propertyIdentifier)) {
    query['PropertyIdentifier'] = request.propertyIdentifier;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceIdentifier)) {
    query['ServiceIdentifier'] = request.serviceIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteThingModel(request: DeleteThingModelRequest): DeleteThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteThingModelWithOptions(request, runtime);
}

model DeleteTopicRouteTableRequest {
  dstTopic?: [ string ](name='DstTopic', example='/x7aWKW9***/deviceNameTest1/user/add'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  srcTopic?: string(name='SrcTopic', example='/x7aWKW9***/testDataToDataHub/user/update'),
}

model DeleteTopicRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics'),
  isAllSucceed?: boolean(name='IsAllSucceed', example='true'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model DeleteTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTopicRouteTableResponseBody(name='body'),
}

async function deleteTopicRouteTableWithOptions(request: DeleteTopicRouteTableRequest, runtime: Util.RuntimeOptions): DeleteTopicRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dstTopic)) {
    query['DstTopic'] = request.dstTopic;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.srcTopic)) {
    query['SrcTopic'] = request.srcTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTopicRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTopicRouteTable(request: DeleteTopicRouteTableRequest): DeleteTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTopicRouteTableWithOptions(request, runtime);
}

model DetachDestinationRequest {
  destinationId?: long(name='DestinationId', example='1002'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  parserId?: long(name='ParserId', example='1000'),
}

model DetachDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DetachDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachDestinationResponseBody(name='body'),
}

async function detachDestinationWithOptions(request: DetachDestinationRequest, runtime: Util.RuntimeOptions): DetachDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachDestination(request: DetachDestinationRequest): DetachDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDestinationWithOptions(request, runtime);
}

model DetachParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  parserId?: long(name='ParserId', example='1000'),
}

model DetachParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DetachParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachParserDataSourceResponseBody(name='body'),
}

async function detachParserDataSourceWithOptions(request: DetachParserDataSourceRequest, runtime: Util.RuntimeOptions): DetachParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachParserDataSource(request: DetachParserDataSourceRequest): DetachParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachParserDataSourceWithOptions(request, runtime);
}

model DisableDeviceTunnelRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model DisableDeviceTunnelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='73671995-9588-406B-9C1E-FC38450A2AA1'),
  success?: boolean(name='Success', example='true'),
}

model DisableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDeviceTunnelResponseBody(name='body'),
}

async function disableDeviceTunnelWithOptions(request: DisableDeviceTunnelRequest, runtime: Util.RuntimeOptions): DisableDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDeviceTunnel(request: DisableDeviceTunnelRequest): DisableDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDeviceTunnelWithOptions(request, runtime);
}

model DisableDeviceTunnelShareRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model DisableDeviceTunnelShareResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='35023CAB-CBED-4A2E-92DF-201C72850B50'),
  success?: boolean(name='Success', example='true'),
}

model DisableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDeviceTunnelShareResponseBody(name='body'),
}

async function disableDeviceTunnelShareWithOptions(request: DisableDeviceTunnelShareRequest, runtime: Util.RuntimeOptions): DisableDeviceTunnelShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDeviceTunnelShare',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDeviceTunnelShare(request: DisableDeviceTunnelShareRequest): DisableDeviceTunnelShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDeviceTunnelShareWithOptions(request, runtime);
}

model DisableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='fec565038d7544978d9aed5c1a******'),
}

model DisableSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7BAA989EK'),
  success?: boolean(name='Success', example='true'),
}

model DisableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSceneRuleResponseBody(name='body'),
}

async function disableSceneRuleWithOptions(request: DisableSceneRuleRequest, runtime: Util.RuntimeOptions): DisableSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSceneRule(request: DisableSceneRuleRequest): DisableSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSceneRuleWithOptions(request, runtime);
}

model DisableThingRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model DisableThingResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DisableThingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableThingResponseBody(name='body'),
}

async function disableThingWithOptions(request: DisableThingRequest, runtime: Util.RuntimeOptions): DisableThingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableThing',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableThing(request: DisableThingRequest): DisableThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableThingWithOptions(request, runtime);
}

model EnableDeviceTunnelRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model EnableDeviceTunnelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='577F07AF-7EFE-4B98-AEA2-634ED864BA01'),
  success?: boolean(name='Success', example='true'),
}

model EnableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableDeviceTunnelResponseBody(name='body'),
}

async function enableDeviceTunnelWithOptions(request: EnableDeviceTunnelRequest, runtime: Util.RuntimeOptions): EnableDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableDeviceTunnel(request: EnableDeviceTunnelRequest): EnableDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDeviceTunnelWithOptions(request, runtime);
}

model EnableDeviceTunnelShareRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model EnableDeviceTunnelShareResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3DB31A1A-BD83-4155-AD2B-56AD041E372C'),
  success?: boolean(name='Success', example='true'),
}

model EnableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableDeviceTunnelShareResponseBody(name='body'),
}

async function enableDeviceTunnelShareWithOptions(request: EnableDeviceTunnelShareRequest, runtime: Util.RuntimeOptions): EnableDeviceTunnelShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableDeviceTunnelShare',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableDeviceTunnelShare(request: EnableDeviceTunnelShareRequest): EnableDeviceTunnelShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDeviceTunnelShareWithOptions(request, runtime);
}

model EnableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model EnableSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EK'),
  success?: boolean(name='Success', example='true'),
}

model EnableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSceneRuleResponseBody(name='body'),
}

async function enableSceneRuleWithOptions(request: EnableSceneRuleRequest, runtime: Util.RuntimeOptions): EnableSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSceneRule(request: EnableSceneRuleRequest): EnableSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSceneRuleWithOptions(request, runtime);
}

model EnableThingRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model EnableThingResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model EnableThingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableThingResponseBody(name='body'),
}

async function enableThingWithOptions(request: EnableThingRequest, runtime: Util.RuntimeOptions): EnableThingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableThing',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableThing(request: EnableThingRequest): EnableThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableThingWithOptions(request, runtime);
}

model GenerateDeviceNameListURLRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model GenerateDeviceNameListURLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', example='cS8uRRy54Rsz****'),
    fileUrl?: string(name='FileUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.csv'),
    host?: string(name='Host', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com'),
    key?: string(name='Key', example='ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.csv'),
    objectStorage?: string(name='ObjectStorage', example='OSS'),
    policy?: string(name='Policy', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', example='v6lViO4FBvfquajQjg20K5hK****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:21:54.607Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model GenerateDeviceNameListURLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDeviceNameListURLResponseBody(name='body'),
}

async function generateDeviceNameListURLWithOptions(request: GenerateDeviceNameListURLRequest, runtime: Util.RuntimeOptions): GenerateDeviceNameListURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDeviceNameListURL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateDeviceNameListURL(request: GenerateDeviceNameListURLRequest): GenerateDeviceNameListURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDeviceNameListURLWithOptions(request, runtime);
}

model GenerateFileUploadURLRequest {
  bizCode?: string(name='BizCode', example='DEVICE_JOB_FILE'),
  fileName?: string(name='FileName', example='file1'),
  fileSuffix?: string(name='FileSuffix', example='bin'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model GenerateFileUploadURLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    host?: string(name='Host', example='https://iotx-bucket-name.oss-***.aliyuncs.com'),
    key?: string(name='Key', example='subpath/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.suffix'),
    objectStorage?: string(name='ObjectStorage', example='OSS'),
    ossAccessKeyId?: string(name='OssAccessKeyId', example='cS8uRRy54Rsz****'),
    policy?: string(name='Policy', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', example='v6lViO4FBvfquajQjg20K5hK****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GenerateFileUploadURLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateFileUploadURLResponseBody(name='body'),
}

async function generateFileUploadURLWithOptions(request: GenerateFileUploadURLRequest, runtime: Util.RuntimeOptions): GenerateFileUploadURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileSuffix)) {
    query['FileSuffix'] = request.fileSuffix;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateFileUploadURL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateFileUploadURL(request: GenerateFileUploadURLRequest): GenerateFileUploadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateFileUploadURLWithOptions(request, runtime);
}

model GenerateOTAUploadURLRequest {
  fileSuffix?: string(name='FileSuffix', example='apk'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model GenerateOTAUploadURLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    firmwareUrl?: string(name='FirmwareUrl', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
    host?: string(name='Host', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com'),
    key?: string(name='Key', example='ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
    OSSAccessKeyId?: string(name='OSSAccessKeyId', example='cS8uRRy54Rsz****'),
    objectStorage?: string(name='ObjectStorage', example='OSS'),
    policy?: string(name='Policy', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', example='v6lViO4FBvfquajQjg20K5hK****'),
    utcCreate?: string(name='UtcCreate', example='2019-11-04T06:21:54.607Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model GenerateOTAUploadURLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateOTAUploadURLResponseBody(name='body'),
}

async function generateOTAUploadURLWithOptions(request: GenerateOTAUploadURLRequest, runtime: Util.RuntimeOptions): GenerateOTAUploadURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSuffix)) {
    query['FileSuffix'] = request.fileSuffix;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateOTAUploadURL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateOTAUploadURL(request: GenerateOTAUploadURLRequest): GenerateOTAUploadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOTAUploadURLWithOptions(request, runtime);
}

model GetDataAPIServiceDetailRequest {
  apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetDataAPIServiceDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiPath?: string(name='ApiPath', example='/device/getDeviceCountByStatus'),
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    createTime?: long(name='CreateTime', example='1557839468865'),
    dateFormat?: string(name='DateFormat', example='JSON'),
    description?: string(name='Description'),
    displayName?: string(name='DisplayName'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1557839468865'),
    requestMethod?: string(name='RequestMethod', example='GET/POST'),
    requestProtocol?: string(name='RequestProtocol', example='HTTPS'),
    sqlTemplateDTO?: {
      originSql?: string(name='OriginSql', example='SELECT COUNT(*) FROM ${system.device} WHERE status = 1'),
      requestParams?: {
        requestParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example', example='0'),
          name?: string(name='Name', example='status'),
          required?: boolean(name='Required', example='true'),
          type?: string(name='Type', example='INTEGER'),
        }
      ](name='RequestParams')
      }(name='RequestParams'),
      responseParams?: {
        responseParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example', example='100'),
          name?: string(name='Name', example='deviceCount'),
          required?: boolean(name='Required', example='true'),
          type?: string(name='Type', example='INTEGER'),
        }
      ](name='ResponseParams')
      }(name='ResponseParams'),
      templateSql?: string(name='TemplateSql', example='SELECT COUNT(*) as deviceCount FROM ${system.device} WHERE status = ${status}'),
    }(name='SqlTemplateDTO'),
    status?: int32(name='Status', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model GetDataAPIServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataAPIServiceDetailResponseBody(name='body'),
}

async function getDataAPIServiceDetailWithOptions(request: GetDataAPIServiceDetailRequest, runtime: Util.RuntimeOptions): GetDataAPIServiceDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiSrn)) {
    body['ApiSrn'] = request.apiSrn;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataAPIServiceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataAPIServiceDetail(request: GetDataAPIServiceDetailRequest): GetDataAPIServiceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataAPIServiceDetailWithOptions(request, runtime);
}

model GetDestinationRequest {
  destinationId?: long(name='DestinationId', example='1004'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model GetDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destination?: {
    configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
    destinationId?: string(name='DestinationId', example='1003'),
    isFailover?: boolean(name='IsFailover', example='false'),
    name?: string(name='Name', example='DataPurpose'),
    status?: string(name='Status'),
    type?: string(name='Type', example='REPUBLISH'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='Destination'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDestinationResponseBody(name='body'),
}

async function getDestinationWithOptions(request: GetDestinationRequest, runtime: Util.RuntimeOptions): GetDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDestination(request: GetDestinationRequest): GetDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDestinationWithOptions(request, runtime);
}

model GetDeviceShadowRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1T27vz****'),
}

model GetDeviceShadowResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A56E345A-0978-4993-ACBA-3EF444ED187F'),
  shadowMessage?: string(name='ShadowMessage', example='{"method":"update","state":{"desired":{"color":"green"}},"version":1}'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceShadowResponseBody(name='body'),
}

async function getDeviceShadowWithOptions(request: GetDeviceShadowRequest, runtime: Util.RuntimeOptions): GetDeviceShadowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceShadow',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceShadow(request: GetDeviceShadowRequest): GetDeviceShadowResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceShadowWithOptions(request, runtime);
}

model GetDeviceStatusRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model GetDeviceStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    status?: string(name='Status', example='ONLINE'),
    timestamp?: long(name='Timestamp', example='1557062301656'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceStatusResponseBody(name='body'),
}

async function getDeviceStatusWithOptions(request: GetDeviceStatusRequest, runtime: Util.RuntimeOptions): GetDeviceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceStatus(request: GetDeviceStatusRequest): GetDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceStatusWithOptions(request, runtime);
}

model GetDeviceTunnelShareStatusRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model GetDeviceTunnelShareStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtOpened?: long(name='GmtOpened', example='1617941371000'),
    isOpen?: boolean(name='IsOpen', example='true'),
    password?: string(name='Password', example='848bbfa0e9a31e579502869920b4d4c********'),
    shareId?: string(name='ShareId', example='18f72f95cad34ca3aeabeeefcb******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ACC1D51C-1A58-440E-92A7-71AB61C6595A'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceTunnelShareStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceTunnelShareStatusResponseBody(name='body'),
}

async function getDeviceTunnelShareStatusWithOptions(request: GetDeviceTunnelShareStatusRequest, runtime: Util.RuntimeOptions): GetDeviceTunnelShareStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceTunnelShareStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceTunnelShareStatus(request: GetDeviceTunnelShareStatusRequest): GetDeviceTunnelShareStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceTunnelShareStatusWithOptions(request, runtime);
}

model GetDeviceTunnelStatusRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1kqtIX****'),
}

model GetDeviceTunnelStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='online'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='7CCFF08F-34D1-4FBD-ACA9-22D9364EA5A4'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceTunnelStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceTunnelStatusResponseBody(name='body'),
}

async function getDeviceTunnelStatusWithOptions(request: GetDeviceTunnelStatusRequest, runtime: Util.RuntimeOptions): GetDeviceTunnelStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceTunnelStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceTunnelStatus(request: GetDeviceTunnelStatusRequest): GetDeviceTunnelStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceTunnelStatusWithOptions(request, runtime);
}

model GetDownloadFileRequest {
  context?: map[string]any(name='Context', example='{"xxx";xxx}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
}

model GetDownloadFileShrinkRequest {
  contextShrink?: string(name='Context', example='{"xxx";xxx}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
}

model GetDownloadFileResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    asyncExecute?: boolean(name='AsyncExecute', example='true'),
    beginTime?: long(name='BeginTime', example='1658406464534'),
    csvFileName?: string(name='CsvFileName', example='test_download_flie'),
    csvUrl?: string(name='CsvUrl', example='https://xxxxx-data-download-sh.oss-cn-shanghai.aliyuncs.com/data/download/6B761BxxxxxxxxAAA0BF03D32C80E/62da39b9xxxxxx5a7b953376/download_file_name.csv?Expires=1658469132&amp;OSSAccessKeyId=xxxxxxxxx&amp;Signature=rRL%xxxxxxx%3D'),
    datasetId?: string(name='DatasetId', example='xxxxxx'),
    endTime?: long(name='EndTime', example='1658406465000'),
    header?: [ 
      {
        alias?: string(name='Alias', example='user_name_alias'),
        dimDateClass?: string(name='DimDateClass', example='DAY'),
        fieldName?: string(name='FieldName', example='user_name'),
        fieldType?: string(name='FieldType', example='INTEGER'),
        geoClass?: string(name='GeoClass', example='{xxx:xxxx}'),
        timeClass?: string(name='TimeClass', example='HOUR/DAY/MONTH'),
        typeClass?: string(name='TypeClass', example='date'),
      }
    ](name='Header'),
    longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    previewSize?: int32(name='PreviewSize', example='100'),
    querySetting?: {
      astExpr?: [ 
        {
          expr?: string(name='Expr', example='{"header":{"fieldName":"xxx"},"operator":"GreaterThanOrEqual","value":12345}'),
          exprType?: string(name='ExprType', example='binaryOp'),
        }
      ](name='AstExpr'),
      selectedHeaders?: [ 
        {
          alias?: string(name='Alias', example='user_name_alias'),
          dimDateClass?: string(name='DimDateClass', example='DAY'),
          fieldName?: string(name='FieldName', example='user_name'),
          fieldType?: string(name='FieldType', example='INTEGER'),
          geoClass?: string(name='GeoClass', example='{xxx:xxx}'),
          timeClass?: string(name='TimeClass', example='HOUR/DAY/MONTH'),
        }
      ](name='SelectedHeaders'),
    }(name='QuerySetting'),
    result?: [  map[string]any ](name='Result'),
    resultDataInString?: string(name='ResultDataInString', example='{"a":123}'),
    status?: int32(name='Status', example='1'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='no authorization.'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09934****'),
  success?: boolean(name='Success', example='true'),
}

model GetDownloadFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDownloadFileResponseBody(name='body'),
}

async function getDownloadFileWithOptions(tmpReq: GetDownloadFileRequest, runtime: Util.RuntimeOptions): GetDownloadFileResponse {
  Util.validateModel(tmpReq);
  var request = new GetDownloadFileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.context)) {
    request.contextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.context, 'Context', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.longJobId)) {
    query['LongJobId'] = request.longJobId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contextShrink)) {
    body['Context'] = request.contextShrink;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDownloadFile',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDownloadFile(request: GetDownloadFileRequest): GetDownloadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDownloadFileWithOptions(request, runtime);
}

model GetEdgeDriverVersionRequest {
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', example='1.2.0'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    argument?: string(name='Argument', example='-XX:+PrintGCDetails'),
    configCheckRule?: string(name='ConfigCheckRule', example='{\\"deviceConfig\\":{\\"required\\":false},\\"driverConfig\\":{\\"required\\":false}}'),
    containerConfig?: string(name='ContainerConfig', example='{\\"devMappings\\":[],\\"hostNetworkMode\\":0,\\"portMappings\\":[],\\"privileged\\":1,\\"volumeMappings\\":[]}'),
    description?: string(name='Description'),
    driverConfig?: string(name='DriverConfig', example='[{\\"content\\":\\"{\\\\\\"defaultConfig\\\\\\":\\\\\\"this is default driver config demo\\\\\\"}\\",\\"format\\":\\"JSON\\"}]'),
    driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
    driverVersion?: string(name='DriverVersion', example='1.2.0'),
    edgeVersion?: string(name='EdgeVersion', example='2.0.0'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
    sourceConfig?: string(name='SourceConfig', example='{\\"ossAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30******/ck3n3koe200003h6zfg******.zip\\",\\"temporaryOssAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30******/ck3n3koe200003h6zf******.zip?Expires\\u003d1575******\\u0026OSSAccessKeyId\\u003daS4MT0IYrP******\\u0026Signature\\u003dm6cpmcaB8rm3YfbkhTYgb0******\\"}'),
    versionState?: string(name='VersionState', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='6ECE664B-E670-47BA-A6AD-62B9F35E3A7B'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeDriverVersionResponseBody(name='body'),
}

async function getEdgeDriverVersionWithOptions(request: GetEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): GetEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEdgeDriverVersion(request: GetEdgeDriverVersionRequest): GetEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeDriverVersionWithOptions(request, runtime);
}

model GetEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    bizEnable?: boolean(name='BizEnable', example='true'),
    gmtCreate?: string(name='GmtCreate', example='2019-06-26 12:33:25'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
    gmtModified?: string(name='GmtModified', example='2019-06-26 12:33:25'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
    instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
    latestDeploymentStatus?: int32(name='LatestDeploymentStatus', example='2'),
    latestDeploymentType?: string(name='LatestDeploymentType', example='deploy'),
    name?: string(name='Name'),
    roleArn?: string(name='RoleArn', example='acs:ram::1473922805******:role/aliyuniotaccessingfcrole'),
    roleAttachTime?: string(name='RoleAttachTime', example='2020-02-19 11:25:48'),
    roleAttachTimestamp?: long(name='RoleAttachTimestamp', example='1581912859713'),
    roleName?: string(name='RoleName', example='AliyunIOTAccessingFCRole'),
    spec?: int32(name='Spec', example='30'),
    tags?: string(name='Tags', example='k1:v1,k2:v2'),
    type?: string(name='Type', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='16645053-546B-4D7C-832E-E519B0E23CF1'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeInstanceResponseBody(name='body'),
}

async function getEdgeInstanceWithOptions(request: GetEdgeInstanceRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEdgeInstance(request: GetEdgeInstanceRequest): GetEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceWithOptions(request, runtime);
}

model GetEdgeInstanceDeploymentRequest {
  deploymentId?: string(name='DeploymentId', example='9261e308a9504fde9b4cf8462b0b****'),
  instanceId?: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    deploymentId?: string(name='DeploymentId', example='9261e308a9504fde9b4cf8462b0b****'),
    description?: string(name='Description', example='deploy_1561543948874'),
    gmtCompleted?: string(name='GmtCompleted', example='2019-06-26 18:12:35'),
    gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
    gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
    gmtModified?: string(name='GmtModified', example='2019-06-26 18:12:35'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
    status?: int32(name='Status', example='2'),
    taskList?: [ 
      {
        gatewayId?: string(name='GatewayId', example='jQWf3MVgQjMzcwsY****000101'),
        gmtCompleted?: string(name='GmtCompleted', example='2019-06-26 18:12:35'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
        gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModified?: string(name='GmtModified', example='2019-06-26 18:12:35'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        resourceSnapshotList?: [ 
          {
            gmtCompleted?: string(name='GmtCompleted', example='2019-06-26 18:12:34'),
            gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
            gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
            gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
            gmtModified?: string(name='GmtModified', example='2019-06-26 18:12:34'),
            gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
            log?: string(name='Log', example='[{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":0,\\"level\\":\\"INFO\\",\\"message\\":\\"init success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543949858},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":8,\\"level\\":\\"INFO\\",\\"message\\":\\"assembly success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543951419},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":16,\\"level\\":\\"INFO\\",\\"message\\":\\"package success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543952591},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":32,\\"level\\":\\"INFO\\",\\"message\\":\\"download success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543954149}]'),
            operateType?: int32(name='OperateType', example='0'),
            resourceId?: string(name='ResourceId', example='device_config'),
            resourceName?: string(name='ResourceName', example='device_config'),
            resourceType?: string(name='ResourceType', example='device_config'),
            snapshotId?: string(name='SnapshotId', example='ab576e84a43043d7840cbcebf4a5****'),
            stage?: int32(name='Stage', example='32'),
            status?: int32(name='Status', example='2'),
          }
        ](name='ResourceSnapshotList'),
        stage?: int32(name='Stage', example='32'),
        status?: int32(name='Status', example='2'),
        taskId?: string(name='TaskId', example='49ea651529014bf8b5645d5f9062****'),
      }
    ](name='TaskList'),
    type?: string(name='Type', example='deploy'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='6B72291A-9492-445E-81D9-335D2D3E44C0'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeInstanceDeploymentResponseBody(name='body'),
}

async function getEdgeInstanceDeploymentWithOptions(request: GetEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deploymentId)) {
    query['DeploymentId'] = request.deploymentId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeInstanceDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEdgeInstanceDeployment(request: GetEdgeInstanceDeploymentRequest): GetEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceDeploymentWithOptions(request, runtime);
}

model GetEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='8jKxIuMVT9rX********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  routeId?: long(name='RouteId', example='123456'),
}

model GetEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtCreate?: string(name='GmtCreate', example='2020-05-25 19:54:59'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1590407699000'),
    gmtModified?: string(name='GmtModified', example='2020-05-25 19:54:59'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1590407699000'),
    name?: string(name='Name', example='sample'),
    routeContext?: {
      qos?: string(name='Qos', example='1'),
      sourceApplicationName?: string(name='SourceApplicationName', example='le_object_detector'),
      sourceFcFunctionName?: string(name='SourceFcFunctionName', example='object_detector_app'),
      sourceFcServiceName?: string(name='SourceFcServiceName', example='EdgeFC'),
      targetApplicationName?: string(name='TargetApplicationName', example='le_object_detector'),
      targetFcFunctionName?: string(name='TargetFcFunctionName', example='lightSensorDataFilter'),
      targetFcServiceName?: string(name='TargetFcServiceName', example='EdgeFC'),
    }(name='RouteContext'),
    sourceData?: string(name='SourceData', example='#'),
    sourceType?: string(name='SourceType', example='device'),
    targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********'),
    targetType?: string(name='TargetType', example='IotHub'),
    topicFilter?: string(name='TopicFilter', example='all'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='8A248DEC-887C-4A37-8DE5-E128FFA3698D'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function getEdgeInstanceMessageRoutingWithOptions(request: GetEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEdgeInstanceMessageRouting(request: GetEdgeInstanceMessageRoutingRequest): GetEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model GetGatewayBySubDeviceRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model GetGatewayBySubDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='gateway'),
    deviceSecret?: string(name='DeviceSecret', example='dCYdTU3gw5Z77bsHjPk6lPHPVnBT****'),
    firmwareVersion?: string(name='FirmwareVersion', example='V1.0.1'),
    gmtActive?: string(name='GmtActive', example='2019-12-18 23:25:30'),
    gmtCreate?: string(name='GmtCreate', example='2019-12-18 16:58:33'),
    gmtOnline?: string(name='GmtOnline', example='2020-01-20 17:41:04'),
    ipAddress?: string(name='IpAddress', example='106.**.1**.**'),
    nodeType?: string(name='NodeType', example='1'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    productName?: string(name='ProductName', example='LinkIoT'),
    status?: string(name='Status', example='online'),
    utcActive?: string(name='UtcActive', example='2019-12-18T15:25:30.176Z'),
    utcCreate?: string(name='UtcCreate', example='2019-12-18T08:58:33.000Z'),
    utcOnline?: string(name='UtcOnline', example='2020-01-20T09:41:04.879Z'),
    iotId?: string(name='iotId', example='WuyjPSDQE1L22z1d****000100'),
    region?: string(name='region', example='cn-shanghai'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetGatewayBySubDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayBySubDeviceResponseBody(name='body'),
}

async function getGatewayBySubDeviceWithOptions(request: GetGatewayBySubDeviceRequest, runtime: Util.RuntimeOptions): GetGatewayBySubDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayBySubDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayBySubDevice(request: GetGatewayBySubDeviceRequest): GetGatewayBySubDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayBySubDeviceWithOptions(request, runtime);
}

model GetLoraNodesTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  taskId?: string(name='TaskId', example='623***'),
}

model GetLoraNodesTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  successCount?: long(name='SuccessCount', example='100'),
  successDevEuis?: {
    successDevEui?: [ string ](name='SuccessDevEui')
  }(name='SuccessDevEuis'),
  taskId?: string(name='TaskId', example='625***'),
  taskState?: string(name='TaskState', example='RUNNING'),
  totalCount?: long(name='TotalCount', example='200'),
}

model GetLoraNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLoraNodesTaskResponseBody(name='body'),
}

async function getLoraNodesTaskWithOptions(request: GetLoraNodesTaskRequest, runtime: Util.RuntimeOptions): GetLoraNodesTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLoraNodesTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLoraNodesTask(request: GetLoraNodesTaskRequest): GetLoraNodesTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoraNodesTaskWithOptions(request, runtime);
}

model GetParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model GetParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dataSourceId?: long(name='DataSourceId', example='1003'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataParser'),
    parserId?: long(name='ParserId', example='1001'),
    script?: string(name='Script', example='var data = payload("json"); var h = data.items.Humidity.value; var t = data.items.Temperature.value; writeTsdb(1000,timestamp(),"temperature", t , {"deviceName":deviceName()}); writeTsdb(1000,timestamp(),"humidity", h , {"deviceName":deviceName()});'),
    scriptDraft?: string(name='ScriptDraft', example='var data = payload("json"); var h = data.items.Humidity.value; var t = data.items.Temperature.value; writeTsdb(1000,timestamp(),"temperature", t , {"deviceName":deviceName()}); writeTsdb(1000,timestamp(),"humidity", h , {"deviceName":deviceName()});'),
    status?: string(name='Status', example='STOP'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    utcModified?: string(name='UtcModified', example='2022-04-27T12:45:43.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetParserResponseBody(name='body'),
}

async function getParserWithOptions(request: GetParserRequest, runtime: Util.RuntimeOptions): GetParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getParser(request: GetParserRequest): GetParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getParserWithOptions(request, runtime);
}

model GetParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model GetParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSource?: {
    createUserId?: long(name='CreateUserId', example='11111111000000111'),
    dataSourceId?: long(name='DataSourceId', example='1001'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataSource'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='DataSource'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetParserDataSourceResponseBody(name='body'),
}

async function getParserDataSourceWithOptions(request: GetParserDataSourceRequest, runtime: Util.RuntimeOptions): GetParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getParserDataSource(request: GetParserDataSourceRequest): GetParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getParserDataSourceWithOptions(request, runtime);
}

model GetRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  ruleId?: long(name='RuleId', example='100000'),
}

model GetRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='58D4CEC0-3E95-4DBE-AFC1-809D1400E52F'),
  ruleInfo?: {
    createUserId?: long(name='CreateUserId', example='100000000000000'),
    created?: string(name='Created', example='Thu Feb 28 14:14:33 CST 2019'),
    dataType?: string(name='DataType', example='JSON'),
    id?: long(name='Id', example='100000'),
    modified?: string(name='Modified', example='Thu Feb 28 14:20:58 CST 2019'),
    name?: string(name='Name', example='iotrules'),
    productKey?: string(name='ProductKey', example='a1KiV******'),
    ruleDesc?: string(name='RuleDesc', example='rule1Desc'),
    select?: string(name='Select', example='deviceName() as deviceName'),
    shortTopic?: string(name='ShortTopic', example='+/user/pm25data'),
    status?: string(name='Status', example='STOP'),
    topic?: string(name='Topic', example='/a1QsMlL44pp/+/user/pm25data'),
    topicType?: int32(name='TopicType', example='1'),
    utcCreated?: string(name='UtcCreated', example='2019-02-28T06:14:33.000Z'),
    utcModified?: string(name='UtcModified', example='2019-02-28T06:20:58.000Z'),
    where?: string(name='Where', example='Temperature>35'),
  }(name='RuleInfo'),
  success?: boolean(name='Success', example='true'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRuleResponseBody(name='body'),
}

async function getRuleWithOptions(request: GetRuleRequest, runtime: Util.RuntimeOptions): GetRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRule(request: GetRuleRequest): GetRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleWithOptions(request, runtime);
}

model GetRuleActionRequest {
  actionId?: long(name='ActionId', example='100001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetRuleActionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='F2D0755D-F350-40FE-9A6D-491859DB5E5F'),
  ruleActionInfo?: {
    configuration?: string(name='Configuration', example='{\\"topic\\":\\"/sys/a1zSA28****/device/thing/service/property/set\\",\\"topicType\\":0,\\"uid\\":\\"1231579*******\\"}'),
    errorActionFlag?: boolean(name='ErrorActionFlag', example='false'),
    id?: long(name='Id', example='100001'),
    ruleId?: long(name='RuleId', example='152323'),
    type?: string(name='Type', example='REPUBLISH'),
  }(name='RuleActionInfo'),
  success?: boolean(name='Success', example='true'),
}

model GetRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRuleActionResponseBody(name='body'),
}

async function getRuleActionWithOptions(request: GetRuleActionRequest, runtime: Util.RuntimeOptions): GetRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionId)) {
    query['ActionId'] = request.actionId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRuleAction(request: GetRuleActionRequest): GetRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleActionWithOptions(request, runtime);
}

model GetSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model GetSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtCreate?: long(name='GmtCreate', example='1584085921000'),
    gmtModified?: long(name='GmtModified', example='1579493552000'),
    ruleContent?: string(name='RuleContent', example='{\\"action\\":[{\\"params\\":{\\"productKey\\":\\"a19luLB****\\",\\"propertyItems\\":{\\"LightAdjustLevel\\":10},\\"deviceName\\":\\"test01\\"},\\"uri\\":\\"action/device/setProperty\\"}],\\"trigger\\":{\\"params\\":{\\"cron\\":\\"22 13 20 1 *\\",\\"cronType\\":\\"linux\\"},\\"uri\\":\\"trigger/timer\\"},\\"type\\":\\"IFTTT\\",\\"sid\\":\\"9df954b33c854d469a507ef8d6******\\"}'),
    ruleDescription?: string(name='RuleDescription'),
    ruleName?: string(name='RuleName', example='test'),
    ruleStatus?: int32(name='RuleStatus', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='1B6D50A7-F160-4D47-863C-EDEE25E26495'),
  success?: boolean(name='Success', example='true'),
}

model GetSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSceneRuleResponseBody(name='body'),
}

async function getSceneRuleWithOptions(request: GetSceneRuleRequest, runtime: Util.RuntimeOptions): GetSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSceneRule(request: GetSceneRuleRequest): GetSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSceneRuleWithOptions(request, runtime);
}

model GetShareTaskByDeviceOpenRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='y4u2weAIrpp****WHMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64********'),
  productKey?: string(name='ProductKey', example='a2Yw*****'),
}

model GetShareTaskByDeviceOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetShareTaskByDeviceOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShareTaskByDeviceOpenResponseBody(name='body'),
}

async function getShareTaskByDeviceOpenWithOptions(request: GetShareTaskByDeviceOpenRequest, runtime: Util.RuntimeOptions): GetShareTaskByDeviceOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShareTaskByDeviceOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getShareTaskByDeviceOpen(request: GetShareTaskByDeviceOpenRequest): GetShareTaskByDeviceOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getShareTaskByDeviceOpenWithOptions(request, runtime);
}

model GetSoundCodeAudioRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  soundCodeList?: [ string ](name='SoundCodeList', example='Md3ZiTL888K9llXDy7890***********'),
}

model GetSoundCodeAudioResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    items?: [ string ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSoundCodeAudioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSoundCodeAudioResponseBody(name='body'),
}

async function getSoundCodeAudioWithOptions(request: GetSoundCodeAudioRequest, runtime: Util.RuntimeOptions): GetSoundCodeAudioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.soundCodeList)) {
    body['SoundCodeList'] = request.soundCodeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSoundCodeAudio',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSoundCodeAudio(request: GetSoundCodeAudioRequest): GetSoundCodeAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSoundCodeAudioWithOptions(request, runtime);
}

model GetSoundCodeScheduleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model GetSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    description?: string(name='Description', example='test'),
    endDate?: string(name='EndDate', example='2022-03-28'),
    endTime?: string(name='EndTime', example='23:59'),
    gmtCreate?: long(name='GmtCreate', example='1620634297000'),
    name?: string(name='Name', example='test'),
    openType?: string(name='OpenType', example='INNER'),
    scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
    startDate?: string(name='StartDate', example='2022-03-28'),
    startTime?: string(name='StartTime', example='00:00'),
    status?: string(name='Status', example='WORKING'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='iot.soundcodeservice.NotSigned'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSoundCodeScheduleResponseBody(name='body'),
}

async function getSoundCodeScheduleWithOptions(request: GetSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): GetSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSoundCodeSchedule(request: GetSoundCodeScheduleRequest): GetSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSoundCodeScheduleWithOptions(request, runtime);
}

model GetSpeechDeviceDetailRequest {
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetSpeechDeviceDetailResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    availableSpace?: float(name='AvailableSpace', example='200'),
    deviceName?: string(name='DeviceName', example='test'),
    iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    speechListUpdateTime?: long(name='SpeechListUpdateTime', example='1620624606000'),
    status?: string(name='Status', example='ONLINE'),
    totalSpace?: float(name='TotalSpace', example='2000'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpeechDeviceDetailResponseBody(name='body'),
}

async function getSpeechDeviceDetailWithOptions(request: GetSpeechDeviceDetailRequest, runtime: Util.RuntimeOptions): GetSpeechDeviceDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSpeechDeviceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSpeechDeviceDetail(request: GetSpeechDeviceDetailRequest): GetSpeechDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpeechDeviceDetailWithOptions(request, runtime);
}

model GetSpeechLicenseDeviceStatisticsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
}

model GetSpeechLicenseDeviceStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    availableQuota?: int32(name='AvailableQuota', example='100'),
    expiredQuota?: int32(name='ExpiredQuota', example='100'),
    expiringQuota?: int32(name='ExpiringQuota', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechLicenseDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpeechLicenseDeviceStatisticsResponseBody(name='body'),
}

async function getSpeechLicenseDeviceStatisticsWithOptions(request: GetSpeechLicenseDeviceStatisticsRequest, runtime: Util.RuntimeOptions): GetSpeechLicenseDeviceStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSpeechLicenseDeviceStatistics',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSpeechLicenseDeviceStatistics(request: GetSpeechLicenseDeviceStatisticsRequest): GetSpeechLicenseDeviceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpeechLicenseDeviceStatisticsWithOptions(request, runtime);
}

model GetSpeechVoiceResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    items?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value', example='tongyong'),
      voiceList?: {
        items?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value', example='Xiaoyun'),
        }
      ](name='Items')
      }(name='VoiceList'),
    }
  ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='F94F72A5-82F0-496F-9AC2-3DBCFF77608A'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechVoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpeechVoiceResponseBody(name='body'),
}

async function getSpeechVoiceWithOptions(runtime: Util.RuntimeOptions): GetSpeechVoiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetSpeechVoice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSpeechVoice(): GetSpeechVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpeechVoiceWithOptions(runtime);
}

model GetStudioAppTokenOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123*******'),
}

model GetStudioAppTokenOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    bizId?: string(name='BizId', example='a12*******'),
    bizType?: string(name='BizType', example='webApp'),
    isEnable?: string(name='IsEnable', example='YES'),
    token?: string(name='Token', example='25bf576a6c*******'),
    type?: string(name='Type', example='custom'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStudioAppTokenOpenResponseBody(name='body'),
}

async function getStudioAppTokenOpenWithOptions(request: GetStudioAppTokenOpenRequest, runtime: Util.RuntimeOptions): GetStudioAppTokenOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStudioAppTokenOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStudioAppTokenOpen(request: GetStudioAppTokenOpenRequest): GetStudioAppTokenOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStudioAppTokenOpenWithOptions(request, runtime);
}

model GetThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  simple?: boolean(name='Simple', example='true'),
}

model GetThingModelTslResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    tslStr?: string(name='TslStr', example='{\\"schema\\":\\"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json\\",\\"profile\\":{\\"productKey\\":\\"a14TeWI****\\"},\\"properties\\":[{\\"identifier\\":\\"Humidity\\"}]}'),
    tslUri?: string(name='TslUri', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119&OSSAccessKeyId=LTAIuFOwFSR9****&Signature=5i389hacjdj3t%2FnrHmQpEUfnxw****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingModelTslResponseBody(name='body'),
}

async function getThingModelTslWithOptions(request: GetThingModelTslRequest, runtime: Util.RuntimeOptions): GetThingModelTslResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.simple)) {
    query['Simple'] = request.simple;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingModelTsl',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getThingModelTsl(request: GetThingModelTslRequest): GetThingModelTslResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingModelTslWithOptions(request, runtime);
}

model GetThingModelTslPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****'),
  simple?: boolean(name='Simple', example='true'),
}

model GetThingModelTslPublishedResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    tslStr?: string(name='TslStr', example='{\\"schema\\":\\"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json\\",\\"profile\\":{\\"productKey\\":\\"a14TeWI****\\"},\\"properties\\":[{\\"identifier\\":\\"Humidity\\"}]}'),
    tslUri?: string(name='TslUri', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119&OSSAccessKeyId=LTAIuFOwFSR9****&Signature=5i389hacjdj3t%2FnrHmQpEUfnxw****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingModelTslPublishedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingModelTslPublishedResponseBody(name='body'),
}

async function getThingModelTslPublishedWithOptions(request: GetThingModelTslPublishedRequest, runtime: Util.RuntimeOptions): GetThingModelTslPublishedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.simple)) {
    query['Simple'] = request.simple;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingModelTslPublished',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getThingModelTslPublished(request: GetThingModelTslPublishedRequest): GetThingModelTslPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingModelTslPublishedWithOptions(request, runtime);
}

model GetThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1Q5XoY****'),
}

model GetThingScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    scriptType?: string(name='ScriptType', example='JavaScript'),
    scriptUrl?: string(name='ScriptUrl', example='http://***'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model GetThingScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingScriptResponseBody(name='body'),
}

async function getThingScriptWithOptions(request: GetThingScriptRequest, runtime: Util.RuntimeOptions): GetThingScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getThingScript(request: GetThingScriptRequest): GetThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingScriptWithOptions(request, runtime);
}

model GetThingTemplateRequest {
  categoryKey?: string(name='CategoryKey', example='Lighting'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****'),
}

model GetThingTemplateResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  thingModelJSON?: string(name='ThingModelJSON', example='{ "properties":[],"services":[], "events":[]}'),
}

model GetThingTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingTemplateResponseBody(name='body'),
}

async function getThingTemplateWithOptions(request: GetThingTemplateRequest, runtime: Util.RuntimeOptions): GetThingTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryKey)) {
    query['CategoryKey'] = request.categoryKey;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getThingTemplate(request: GetThingTemplateRequest): GetThingTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingTemplateWithOptions(request, runtime);
}

model GetThingTopoRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model GetThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    list?: {
      deviceInfo?: [ 
      {
        deviceName?: string(name='DeviceName', example='light'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='deviceInfo')
    }(name='List'),
    pageCount?: long(name='PageCount', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: long(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingTopoResponseBody(name='body'),
}

async function getThingTopoWithOptions(request: GetThingTopoRequest, runtime: Util.RuntimeOptions): GetThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getThingTopo(request: GetThingTopoRequest): GetThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingTopoWithOptions(request, runtime);
}

model GisQueryDeviceLocationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l'),
  thingList?: [ 
    {
      deviceName?: string(name='DeviceName', example='mock_device_name'),
      productKey?: string(name='ProductKey', example='g3r****Vjta'),
    }
  ](name='ThingList'),
}

model GisQueryDeviceLocationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      adcode?: long(name='Adcode', example='90000'),
      city?: string(name='City'),
      coordinateSystem?: int32(name='CoordinateSystem', example='1'),
      country?: string(name='Country'),
      deviceName?: string(name='DeviceName', example='mock_device_name'),
      ip?: string(name='Ip', example='127.0.0.1'),
      latitude?: float(name='Latitude', example='30.0'),
      longitude?: float(name='Longitude', example='120.0'),
      productKey?: string(name='ProductKey', example='g3r****Vjta'),
      province?: string(name='Province'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model GisQueryDeviceLocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GisQueryDeviceLocationResponseBody(name='body'),
}

async function gisQueryDeviceLocationWithOptions(request: GisQueryDeviceLocationRequest, runtime: Util.RuntimeOptions): GisQueryDeviceLocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.thingList)) {
    query['ThingList'] = request.thingList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GisQueryDeviceLocation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function gisQueryDeviceLocation(request: GisQueryDeviceLocationRequest): GisQueryDeviceLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return gisQueryDeviceLocationWithOptions(request, runtime);
}

model GisSearchDeviceTraceRequest {
  deviceName?: string(name='DeviceName', example='mock_device_name'),
  endTime?: long(name='EndTime', example='1645071254000'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l'),
  mapMatch?: int32(name='MapMatch', example='0'),
  productKey?: string(name='ProductKey', example='g3r****Vjta'),
  startTime?: long(name='StartTime', example='1645071254000'),
}

model GisSearchDeviceTraceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    deviceName?: string(name='DeviceName', example='mock_device_name'),
    points?: [ 
      {
        locateTime?: long(name='LocateTime', example='1645071254000'),
        location?: string(name='Location', example='120.0,30.0'),
      }
    ](name='Points'),
    productKey?: string(name='ProductKey', example='g3r****Vjta'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model GisSearchDeviceTraceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GisSearchDeviceTraceResponseBody(name='body'),
}

async function gisSearchDeviceTraceWithOptions(request: GisSearchDeviceTraceRequest, runtime: Util.RuntimeOptions): GisSearchDeviceTraceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.mapMatch)) {
    query['MapMatch'] = request.mapMatch;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GisSearchDeviceTrace',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function gisSearchDeviceTrace(request: GisSearchDeviceTraceRequest): GisSearchDeviceTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return gisSearchDeviceTraceWithOptions(request, runtime);
}

model ImportDTDataRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-****001'),
  items?: [ 
    {
      deviceName?: string(name='DeviceName', example='Device1'),
      params?: string(name='Params', example='{"key1":12,"key2":56}'),
    }
  ](name='Items'),
  productKey?: string(name='ProductKey', example='dgb9****'),
}

model ImportDTDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ImportDTDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportDTDataResponseBody(name='body'),
}

async function importDTDataWithOptions(request: ImportDTDataRequest, runtime: Util.RuntimeOptions): ImportDTDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    body['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportDTData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importDTData(request: ImportDTDataRequest): ImportDTDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDTDataWithOptions(request, runtime);
}

model ImportDeviceRequest {
  deviceName?: string(name='DeviceName', example='light'),
  deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  nickname?: string(name='Nickname'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  sn?: string(name='Sn', example='QC4******001'),
}

model ImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
    iotId?: string(name='IotId', example='1O4YPNtRqB2anumz2Canp4GB7*****'),
    nickname?: string(name='Nickname'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    sn?: string(name='Sn', example='QC4******001'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model ImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportDeviceResponseBody(name='body'),
}

async function importDeviceWithOptions(request: ImportDeviceRequest, runtime: Util.RuntimeOptions): ImportDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.deviceSecret)) {
    query['DeviceSecret'] = request.deviceSecret;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nickname)) {
    query['Nickname'] = request.nickname;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sn)) {
    query['Sn'] = request.sn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importDevice(request: ImportDeviceRequest): ImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDeviceWithOptions(request, runtime);
}

model ImportThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  functionBlockName?: string(name='FunctionBlockName'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****'),
  tslStr?: string(name='TslStr', example='{"schema":"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json","profile":{"productKey":"a14TeW****"},"properties":[]}'),
  tslUrl?: string(name='TslUrl', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119...'),
}

model ImportThingModelTslResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ImportThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportThingModelTslResponseBody(name='body'),
}

async function importThingModelTslWithOptions(request: ImportThingModelTslRequest, runtime: Util.RuntimeOptions): ImportThingModelTslResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.functionBlockName)) {
    query['FunctionBlockName'] = request.functionBlockName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tslStr)) {
    query['TslStr'] = request.tslStr;
  }
  if (!Util.isUnset(request.tslUrl)) {
    query['TslUrl'] = request.tslUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportThingModelTsl',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importThingModelTsl(request: ImportThingModelTslRequest): ImportThingModelTslResponse {
  var runtime = new Util.RuntimeOptions{};
  return importThingModelTslWithOptions(request, runtime);
}

model InvokeDataAPIServiceRequest {
  apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  param?: [ 
    {
      listParamType?: string(name='ListParamType', example='VARCHAR'),
      listParamValue?: [ string ](name='ListParamValue', example='["1","2","3"]'),
      paramName?: string(name='ParamName', example='status'),
      paramType?: string(name='ParamType', example='VARCHAR'),
      paramValue?: string(name='ParamValue', example='1'),
    }
  ](name='Param'),
}

model InvokeDataAPIServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    fieldNameList?: {
      fieldNameList?: [ string ](name='FieldNameList')
    }(name='FieldNameList'),
    pageNo?: int32(name='PageNo', example='0'),
    pageSize?: int32(name='PageSize', example='1'),
    resultList?: {
      resultList?: [  map[string]any ](name='ResultList')
    }(name='ResultList'),
    totalSize?: int32(name='TotalSize', example='2'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E68FE5DC-4D7B-4987-B785-DF8C6F191F5D'),
  success?: boolean(name='Success', example='true'),
}

model InvokeDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeDataAPIServiceResponseBody(name='body'),
}

async function invokeDataAPIServiceWithOptions(request: InvokeDataAPIServiceRequest, runtime: Util.RuntimeOptions): InvokeDataAPIServiceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiSrn)) {
    body['ApiSrn'] = request.apiSrn;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.param)) {
    body['Param'] = request.param;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvokeDataAPIService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invokeDataAPIService(request: InvokeDataAPIServiceRequest): InvokeDataAPIServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeDataAPIServiceWithOptions(request, runtime);
}

model InvokeThingServiceRequest {
  args?: string(name='Args', example='{"param1":1}'),
  deviceName?: string(name='DeviceName', example='light'),
  identifier?: string(name='Identifier', example='Set'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model InvokeThingServiceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='abcabcabc1234****'),
    result?: string(name='Result', example='{"param1":1}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model InvokeThingServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeThingServiceResponseBody(name='body'),
}

async function invokeThingServiceWithOptions(request: InvokeThingServiceRequest, runtime: Util.RuntimeOptions): InvokeThingServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvokeThingService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invokeThingService(request: InvokeThingServiceRequest): InvokeThingServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeThingServiceWithOptions(request, runtime);
}

model InvokeThingsServiceRequest {
  args?: string(name='Args', example='{"param1":1}'),
  deviceName?: [ string ](name='DeviceName', example='device1'),
  identifier?: string(name='Identifier', example='Set'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model InvokeThingsServiceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model InvokeThingsServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeThingsServiceResponseBody(name='body'),
}

async function invokeThingsServiceWithOptions(request: InvokeThingsServiceRequest, runtime: Util.RuntimeOptions): InvokeThingsServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvokeThingsService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invokeThingsService(request: InvokeThingsServiceRequest): InvokeThingsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeThingsServiceWithOptions(request, runtime);
}

model ListAnalyticsDataRequest {
  apiPath?: string(name='ApiPath', example='/iot-cn-npk1v******/system/query/hist_dev_cnt_stat'),
  condition?: [ 
    {
      betweenEnd?: string(name='BetweenEnd', example='5'),
      betweenStart?: string(name='BetweenStart', example='1'),
      fieldName?: string(name='FieldName', example='testCode'),
      operate?: string(name='Operate', example='='),
      value?: string(name='Value', example='4'),
    }
  ](name='Condition'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  isoId?: string(name='IsoId', example='oxs_iso_id'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
}

model ListAnalyticsDataResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    count?: long(name='Count', example='3'),
    hasNext?: boolean(name='HasNext', example='false'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    resultJson?: string(name='ResultJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='7EC5B624-AF1B-4C4D-BA82-A02BA1******'),
  success?: boolean(name='Success', example='false'),
}

model ListAnalyticsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnalyticsDataResponseBody(name='body'),
}

async function listAnalyticsDataWithOptions(request: ListAnalyticsDataRequest, runtime: Util.RuntimeOptions): ListAnalyticsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiPath)) {
    query['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.condition)) {
    query['Condition'] = request.condition;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isoId)) {
    query['IsoId'] = request.isoId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnalyticsData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAnalyticsData(request: ListAnalyticsDataRequest): ListAnalyticsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnalyticsDataWithOptions(request, runtime);
}

model ListDataSourceItemRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t***'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='thing'),
}

model ListDataSourceItemResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSourceItems?: {
    dataSourceItem?: [ 
    {
      dataSourceItemId?: long(name='DataSourceItemId', example='129322'),
      deviceName?: string(name='DeviceName'),
      productKey?: string(name='ProductKey'),
      scopeType?: string(name='ScopeType'),
      topic?: string(name='Topic', example='/gyh***z/+/thing/event/property/post'),
    }
  ](name='dataSourceItem')
  }(name='DataSourceItems'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceItemResponseBody(name='body'),
}

async function listDataSourceItemWithOptions(request: ListDataSourceItemRequest, runtime: Util.RuntimeOptions): ListDataSourceItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceItem',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSourceItem(request: ListDataSourceItemRequest): ListDataSourceItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceItemWithOptions(request, runtime);
}

model ListDestinationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='DataPurpose'),
  types?: [ string ](name='Types', example='["REPUBLISH", "OTS"]'),
}

model ListDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destinations?: {
    destinations?: [ 
    {
      configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
      description?: string(name='Description'),
      destinationId?: long(name='DestinationId', example='1003'),
      isFailover?: boolean(name='IsFailover', example='false'),
      name?: string(name='Name', example='DataPurpose'),
      status?: string(name='Status'),
      type?: string(name='Type', example='REPUBLISH'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    }
  ](name='destinations')
  }(name='Destinations'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDestinationResponseBody(name='body'),
}

async function listDestinationWithOptions(request: ListDestinationRequest, runtime: Util.RuntimeOptions): ListDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDestination(request: ListDestinationRequest): ListDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDestinationWithOptions(request, runtime);
}

model ListDeviceDistributeJobRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1T27vz****'),
  status?: int32(name='Status', example='1'),
  targetUid?: string(name='TargetUid', example='198***'),
}

model ListDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    jobInfo?: {
      items?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1581595942000'),
        jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName'),
        sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', example='198***'),
        status?: int32(name='Status', example='1'),
        strategy?: int32(name='Strategy', example='0'),
        targetInstanceConfigs?: {
          targetInstanceConfigs?: [ 
          {
            targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***'),
            targetInstanceName?: string(name='TargetInstanceName'),
            targetRegion?: string(name='TargetRegion', example='cn-shanghai'),
          }
        ](name='targetInstanceConfigs')
        }(name='TargetInstanceConfigs'),
        targetUid?: string(name='TargetUid', example='198***'),
        total?: int32(name='Total', example='5'),
      }
    ](name='items')
    }(name='JobInfo'),
    nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceDistributeJobResponseBody(name='body'),
}

async function listDeviceDistributeJobWithOptions(request: ListDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): ListDeviceDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeviceDistributeJob(request: ListDeviceDistributeJobRequest): ListDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceDistributeJobWithOptions(request, runtime);
}

model ListDistributedDeviceRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceName?: string(name='DeviceName', example='mydevice'),
  pageSize?: int32(name='PageSize', example='5'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', example='iot-060***'),
  targetUid?: string(name='TargetUid', example='198***'),
}

model ListDistributedDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    info?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='mydevice'),
        gmtCreate?: long(name='GmtCreate', example='1581595942000'),
        gmtModified?: long(name='GmtModified', example='1581595942222'),
        productKey?: string(name='ProductKey', example='a1BwAGV***'),
        sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName', example='myproInstance'),
        sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', example='198***'),
        targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com'),
        targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-09k***'),
        targetInstanceName?: string(name='TargetInstanceName', example='newinstance'),
        targetRegion?: string(name='TargetRegion', example='cn-shenzhen'),
        targetUid?: string(name='TargetUid', example='198***'),
      }
    ](name='items')
    }(name='Info'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListDistributedDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributedDeviceResponseBody(name='body'),
}

async function listDistributedDeviceWithOptions(request: ListDistributedDeviceRequest, runtime: Util.RuntimeOptions): ListDistributedDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    query['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributedDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDistributedDevice(request: ListDistributedDeviceRequest): ListDistributedDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributedDeviceWithOptions(request, runtime);
}

model ListDistributedProductRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', example='iot-060***'),
  targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***'),
  targetUid?: string(name='TargetUid', example='198***'),
}

model ListDistributedProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    info?: {
      items?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1581595942'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName', example='myproInstance'),
        sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', example='198***'),
        targetAliyunId?: string(name='TargetAliyunId', example='io****@example.com'),
        targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-09k***'),
        targetInstanceName?: string(name='TargetInstanceName', example='newinstance'),
        targetRegion?: string(name='TargetRegion', example='cn-shenzhen'),
        targetUid?: string(name='TargetUid', example='198***'),
      }
    ](name='items')
    }(name='Info'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListDistributedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributedProductResponseBody(name='body'),
}

async function listDistributedProductWithOptions(request: ListDistributedProductRequest, runtime: Util.RuntimeOptions): ListDistributedProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    query['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    query['TargetInstanceId'] = request.targetInstanceId;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributedProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDistributedProduct(request: ListDistributedProductRequest): ListDistributedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributedProductWithOptions(request, runtime);
}

model ListJobRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='IN_PROGRESS'),
}

model ListJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      description?: string(name='Description', example='TestDescription'),
      jobId?: string(name='JobId', example='Z20nyanW5****010001'),
      jobName?: string(name='JobName', example='MyTestJobOEfwJN'),
      scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
      status?: string(name='Status', example='COMPLETED'),
      type?: string(name='Type', example='CUSTOM_JOB'),
      utcCreate?: string(name='UtcCreate', example='2019-05-21T11:45:37.000Z'),
      utcModified?: string(name='UtcModified', example='2019-05-21T17:15:46.000Z'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='BF449394-1C7D-4144-B7C4-9C3FA29F8B64'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='20'),
}

model ListJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJobResponseBody(name='body'),
}

async function listJobWithOptions(request: ListJobRequest, runtime: Util.RuntimeOptions): ListJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listJob(request: ListJobRequest): ListJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobWithOptions(request, runtime);
}

model ListOTAFirmwareRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  destVersion?: string(name='DestVersion', example='4.0.0'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a19mzPZ****'),
}

model ListOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  errorMessage?: string(name='ErrorMessage'),
  firmwareInfo?: {
    simpleFirmwareInfo?: [ 
    {
      destVersion?: string(name='DestVersion', example='4.0.0'),
      firmwareDesc?: string(name='FirmwareDesc', example='firmwareDesc'),
      firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
      firmwareName?: string(name='FirmwareName', example='t3q5rkNm'),
      firmwareSign?: string(name='FirmwareSign', example='3d04ab6462633508606e5f3daac8****'),
      firmwareSize?: int32(name='FirmwareSize', example='924'),
      moduleName?: string(name='ModuleName', example='module1234'),
      productKey?: string(name='ProductKey', example='a19mzPZ****'),
      productName?: string(name='ProductName', example='MyProduct'),
      signMethod?: string(name='SignMethod', example='MD5'),
      srcVersion?: string(name='SrcVersion', example='V1.0.0'),
      status?: int32(name='Status', example='0'),
      type?: int32(name='Type', example='0'),
      utcCreate?: string(name='UtcCreate', example='2019-12-28T02:42:22.000Z'),
      utcModified?: string(name='UtcModified', example='2019-12-28T02:42:22.000Z'),
    }
  ](name='SimpleFirmwareInfo')
  }(name='FirmwareInfo'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model ListOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAFirmwareResponseBody(name='body'),
}

async function listOTAFirmwareWithOptions(request: ListOTAFirmwareRequest, runtime: Util.RuntimeOptions): ListOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.destVersion)) {
    query['DestVersion'] = request.destVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOTAFirmware(request: ListOTAFirmwareRequest): ListOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAFirmwareWithOptions(request, runtime);
}

model ListOTAJobByDeviceRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceName?: string(name='DeviceName', example='light1'),
  firmwareId?: string(name='FirmwareId', example='FJFx8JzpnhpIsKftRjjm03****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a19mzPZ****'),
}

model ListOTAJobByDeviceResponseBody = {
  code?: string(name='Code', example='MissingFirmwareId'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId', example='FJFx8JzpnhpIsKftRjjm03****'),
      jobId?: string(name='JobId', example='HvKuBpuk3rdk6E92CP****'),
      jobStatus?: string(name='JobStatus', example='COMPLETED'),
      jobType?: string(name='JobType', example='UPGRADE_FIRMWARE'),
      productKey?: string(name='ProductKey', example='a19mzPZ****'),
      selectionType?: string(name='SelectionType', example='STATIC'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
      targetSelection?: string(name='TargetSelection', example='ALL'),
      utcCreate?: string(name='UtcCreate', example='2019-12-28T02:43:10.000Z'),
      utcEndTime?: string(name='UtcEndTime', example='2019-12-29T02:43:10.000Z'),
      utcModified?: string(name='UtcModified', example='2019-12-29T02:43:10.000Z'),
      utcStartTime?: string(name='UtcStartTime', example='2019-12-29T02:43:10.000Z'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='FirmwareId is mandatory for this action'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model ListOTAJobByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAJobByDeviceResponseBody(name='body'),
}

async function listOTAJobByDeviceWithOptions(request: ListOTAJobByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAJobByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAJobByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOTAJobByDevice(request: ListOTAJobByDeviceRequest): ListOTAJobByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAJobByDeviceWithOptions(request, runtime);
}

model ListOTAJobByFirmwareRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  firmwareId?: string(name='FirmwareId', example='FJFx8JzpnhpIsKftRjjm03****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListOTAJobByFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
      jobId?: string(name='JobId', example='HvKuBpuk3rdk6E92CP****0200'),
      jobStatus?: string(name='JobStatus', example='IN_PROGRESS'),
      jobType?: string(name='JobType', example='UPGRADE_FIRMWARE'),
      productKey?: string(name='ProductKey', example='a19mzPZ****'),
      selectionType?: string(name='SelectionType', example='STATIC'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='OtaTagDTO')
      }(name='Tags'),
      targetSelection?: string(name='TargetSelection', example='SPECIFIC'),
      utcCreate?: string(name='UtcCreate', example='2019-12-28T02:43:10.000Z'),
      utcEndTime?: string(name='UtcEndTime', example='2019-12-29T02:43:10.000Z'),
      utcModified?: string(name='UtcModified', example='2019-12-28T02:43:10.000Z'),
      utcStartTime?: string(name='UtcStartTime', example='2019-12-28T02:43:10.000Z'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='5D58AC86-D5BF-4B39-834E-913E7F2C985D'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model ListOTAJobByFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAJobByFirmwareResponseBody(name='body'),
}

async function listOTAJobByFirmwareWithOptions(request: ListOTAJobByFirmwareRequest, runtime: Util.RuntimeOptions): ListOTAJobByFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAJobByFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOTAJobByFirmware(request: ListOTAJobByFirmwareRequest): ListOTAJobByFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAJobByFirmwareWithOptions(request, runtime);
}

model ListOTAModuleByProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1uctKe****'),
}

model ListOTAModuleByProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: [ 
    {
      aliasName?: string(name='AliasName'),
      desc?: string(name='Desc'),
      gmtCreate?: string(name='GmtCreate', example='2020-10-13T09:46Z'),
      gmtModified?: string(name='GmtModified', example='2020-10-19T09:46Z'),
      moduleName?: string(name='ModuleName', example='barcodeScanner'),
      productKey?: string(name='ProductKey', example='aluctKe****'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model ListOTAModuleByProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAModuleByProductResponseBody(name='body'),
}

async function listOTAModuleByProductWithOptions(request: ListOTAModuleByProductRequest, runtime: Util.RuntimeOptions): ListOTAModuleByProductResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAModuleByProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOTAModuleByProduct(request: ListOTAModuleByProductRequest): ListOTAModuleByProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAModuleByProductWithOptions(request, runtime);
}

model ListOTAModuleVersionsByDeviceRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceName?: string(name='DeviceName', example='newdevice'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='aluctKe****'),
}

model ListOTAModuleVersionsByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTAModuleInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='newDevice'),
      iotId?: string(name='IotId', example='QjIFT***000101'),
      moduleName?: string(name='ModuleName', example='barcodeScanner'),
      moduleVersion?: string(name='ModuleVersion', example='1.0'),
      productKey?: string(name='ProductKey', example='aluctKe****'),
    }
  ](name='SimpleOTAModuleInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='10'),
}

model ListOTAModuleVersionsByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAModuleVersionsByDeviceResponseBody(name='body'),
}

async function listOTAModuleVersionsByDeviceWithOptions(request: ListOTAModuleVersionsByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAModuleVersionsByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAModuleVersionsByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOTAModuleVersionsByDevice(request: ListOTAModuleVersionsByDeviceRequest): ListOTAModuleVersionsByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAModuleVersionsByDeviceWithOptions(request, runtime);
}

model ListOTATaskByJobRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceNames?: [ string ](name='DeviceNames', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****'),
  pageSize?: int32(name='PageSize', example='10'),
  taskStatus?: string(name='TaskStatus', example='FAILED'),
}

model ListOTATaskByJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion', example='1.0.1'),
      deviceName?: string(name='DeviceName', example='testDevice2'),
      firmwareId?: string(name='FirmwareId', example='q3j9OYBjUAZMv1hlMgdo03****'),
      iotId?: string(name='IotId', example='nadRdeffljdEndlfadgadfse****'),
      jobId?: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****'),
      productKey?: string(name='ProductKey', example='a1GUfrM****'),
      productName?: string(name='ProductName', example='MyProduct'),
      progress?: string(name='Progress', example='0.00'),
      srcVersion?: string(name='SrcVersion', example='1.0.0'),
      taskDesc?: string(name='TaskDesc', example='report version is not conform'),
      taskId?: string(name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
      taskStatus?: string(name='TaskStatus', example='FAILED'),
      timeout?: string(name='Timeout', example='1440'),
      utcCreate?: string(name='UtcCreate', example='2019-11-04T03:38:22.000Z'),
      utcModified?: string(name='UtcModified', example='2019-11-04T03:38:22.000Z'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model ListOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTATaskByJobResponseBody(name='body'),
}

async function listOTATaskByJobWithOptions(request: ListOTATaskByJobRequest, runtime: Util.RuntimeOptions): ListOTATaskByJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceNames)) {
    query['DeviceNames'] = request.deviceNames;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTATaskByJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOTATaskByJob(request: ListOTATaskByJobRequest): ListOTATaskByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTATaskByJobWithOptions(request, runtime);
}

model ListOTAUnfinishedTaskByDeviceRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='TfmUAeJjQQhCPH84UVNn0010c6****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-c3j***'),
  moduleName?: string(name='ModuleName', example='WifiConfigModify'),
  productKey?: string(name='ProductKey', example='a19mzPZ****'),
  taskStatus?: string(name='TaskStatus', example='CONFIRM'),
}

model ListOTAUnfinishedTaskByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion', example='1.0.1'),
      deviceName?: string(name='DeviceName', example='light'),
      firmwareId?: string(name='FirmwareId', example='q3j9OYBjUAZMv1hlMgdo03****'),
      iotId?: string(name='IotId', example='nadRdeffljdEndlfadgadfse****'),
      jobId?: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****'),
      moduleName?: string(name='ModuleName', example='WifiConfigModify'),
      productKey?: string(name='ProductKey', example='a1GUfrM****'),
      productName?: string(name='ProductName', example='MyProduct'),
      srcVersion?: string(name='SrcVersion', example='1.0.0'),
      taskId?: string(name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
      taskStatus?: string(name='TaskStatus', example='CONFIRM'),
      utcCreate?: string(name='UtcCreate', example='2019-11-04T03:38:22.000Z'),
      utcModified?: string(name='UtcModified', example='2021-11-04T03:38:22.000Z'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', example='true'),
}

model ListOTAUnfinishedTaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAUnfinishedTaskByDeviceResponseBody(name='body'),
}

async function listOTAUnfinishedTaskByDeviceWithOptions(request: ListOTAUnfinishedTaskByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAUnfinishedTaskByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAUnfinishedTaskByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOTAUnfinishedTaskByDevice(request: ListOTAUnfinishedTaskByDeviceRequest): ListOTAUnfinishedTaskByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAUnfinishedTaskByDeviceWithOptions(request, runtime);
}

model ListParserRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t****'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='DataParser'),
}

model ListParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    parserList?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name', example='DataParser'),
      parserId?: long(name='ParserId', example='1001'),
      status?: string(name='Status', example='STOP'),
      utcCreated?: string(name='UtcCreated', example='2022-03-21T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2022-03-25T12:45:43.000Z'),
    }
  ](name='ParserList')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParserResponseBody(name='body'),
}

async function listParserWithOptions(request: ListParserRequest, runtime: Util.RuntimeOptions): ListParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listParser(request: ListParserRequest): ListParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listParserWithOptions(request, runtime);
}

model ListParserDataSourceRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='DataSource'),
}

model ListParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dataSource?: [ 
    {
      dataSourceId?: long(name='DataSourceId', example='1001'),
      description?: string(name='Description'),
      name?: string(name='Name', example='DataSource'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    }
  ](name='DataSource')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParserDataSourceResponseBody(name='body'),
}

async function listParserDataSourceWithOptions(request: ListParserDataSourceRequest, runtime: Util.RuntimeOptions): ListParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listParserDataSource(request: ListParserDataSourceRequest): ListParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listParserDataSourceWithOptions(request, runtime);
}

model ListParserDestinationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  isFailover?: boolean(name='IsFailover', example='false'),
  parserId?: long(name='ParserId', example='1002'),
}

model ListParserDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    destinations?: [ 
    {
      configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
      destinationId?: long(name='DestinationId', example='1003'),
      isFailover?: boolean(name='IsFailover', example='false'),
      name?: string(name='Name', example='DataPurpose'),
      type?: string(name='Type', example='REPUBLISH'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2022-05-27T12:45:43.000Z'),
    }
  ](name='destinations')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model ListParserDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParserDestinationResponseBody(name='body'),
}

async function listParserDestinationWithOptions(request: ListParserDestinationRequest, runtime: Util.RuntimeOptions): ListParserDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isFailover)) {
    query['IsFailover'] = request.isFailover;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListParserDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listParserDestination(request: ListParserDestinationRequest): ListParserDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listParserDestinationWithOptions(request, runtime);
}

model ListProductByTagsRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  pageSize?: int32(name='PageSize', example='10'),
  productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='102'),
    }
  ](name='ProductTag'),
}

model ListProductByTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  productInfos?: {
    productInfo?: [ 
    {
      createTime?: long(name='CreateTime', example='1545355537000'),
      description?: string(name='Description', example='This is a test product.'),
      nodeType?: int32(name='NodeType', example='0'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      productName?: string(name='ProductName'),
    }
  ](name='ProductInfo')
  }(name='ProductInfos'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListProductByTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductByTagsResponseBody(name='body'),
}

async function listProductByTagsWithOptions(request: ListProductByTagsRequest, runtime: Util.RuntimeOptions): ListProductByTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productTag)) {
    query['ProductTag'] = request.productTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductByTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductByTags(request: ListProductByTagsRequest): ListProductByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductByTagsWithOptions(request, runtime);
}

model ListProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model ListProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='102'),
    }
  ](name='ProductTag')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductTagsResponseBody(name='body'),
}

async function listProductTagsWithOptions(request: ListProductTagsRequest, runtime: Util.RuntimeOptions): ListProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listProductTags(request: ListProductTagsRequest): ListProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductTagsWithOptions(request, runtime);
}

model ListRuleRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='2'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
}

model ListRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    ruleInfo?: [ 
    {
      createUserId?: long(name='CreateUserId', example='1231579085000000'),
      created?: string(name='Created', example='Wed Feb 27 20:45:43 CST 2019'),
      dataType?: string(name='DataType', example='JSON'),
      id?: long(name='Id', example='151454'),
      modified?: string(name='Modified', example='Wed Feb 27 20:45:43 CST 2019'),
      name?: string(name='Name', example='test123'),
      productKey?: string(name='ProductKey', example='a1KiV******'),
      ruleDesc?: string(name='RuleDesc', example='rule1Desc'),
      select?: string(name='Select', example='deviceName() as deviceName'),
      shortTopic?: string(name='ShortTopic', example='+/thing/event/property/post'),
      status?: string(name='Status', example='STOP'),
      topic?: string(name='Topic', example='/a1T27vz****/+/thing/event/property/post'),
      utcCreated?: string(name='UtcCreated', example='2019-02-27T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2019-02-27T12:45:43.000Z'),
      where?: string(name='Where', example='Temperature>35'),
    }
  ](name='RuleInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', example='1564B626-DE97-452D-9E9B-305888AC6105'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='25'),
}

model ListRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleResponseBody(name='body'),
}

async function listRuleWithOptions(request: ListRuleRequest, runtime: Util.RuntimeOptions): ListRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRule(request: ListRuleRequest): ListRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleWithOptions(request, runtime);
}

model ListRuleActionsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', example='10000'),
}

model ListRuleActionsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='22254BDB-3DC1-4643-8D1B-EE0437EF09A9'),
  ruleActionList?: {
    ruleActionInfo?: [ 
    {
      configuration?: string(name='Configuration', example='{\\"endPoint\\":\\"http://ShanghaiRegion.cn-shanghai.ots.aliyuncs.com\\",\\"instanceName\\":\\"ShanghaiRegion\\",\\"primaryKeys\\":[{\\"columnName\\":\\"temperature\\",\\"columnType\\":\\"INTEGER\\",\\"columnValue\\":\\"${deviceName}\\"}],\\"regionName\\":\\"cn-shanghai\\",\\"role\\":{\\"roleArn\\":\\"acs:ram::1231579085******:role/aliyuniotaccessingotsrole\\",\\"roleName\\":\\"AliyunIOTAccessingOTSRole\\"},\\"tableName\\":\\"iottest\\",\\"uid\\":\\"1231579085******\\"}'),
      errorActionFlag?: boolean(name='ErrorActionFlag', example='false'),
      id?: long(name='Id', example='139099'),
      ruleId?: long(name='RuleId', example='10000'),
      status?: string(name='Status', example='NORMAL'),
      type?: string(name='Type', example='OTS'),
    }
  ](name='RuleActionInfo')
  }(name='RuleActionList'),
  success?: boolean(name='Success', example='true'),
}

model ListRuleActionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleActionsResponseBody(name='body'),
}

async function listRuleActionsWithOptions(request: ListRuleActionsRequest, runtime: Util.RuntimeOptions): ListRuleActionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRuleActions',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRuleActions(request: ListRuleActionsRequest): ListRuleActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleActionsWithOptions(request, runtime);
}

model ListTaskRequest {
  device?: map[string]any(name='Device', example='{}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='sGWotgRk***010001'),
  limit?: int32(name='Limit', example='10'),
  nextToken?: string(name='NextToken', example='22dhgg***'),
  status?: string(name='Status', example='QUEUED'),
}

model ListTaskShrinkRequest {
  deviceShrink?: string(name='Device', example='{}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='sGWotgRk***010001'),
  limit?: int32(name='Limit', example='10'),
  nextToken?: string(name='NextToken', example='22dhgg***'),
  status?: string(name='Status', example='QUEUED'),
}

model ListTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName', example='mydevice'),
      iotId?: string(name='IotId', example='BDjhIC***i000101'),
      jobId?: string(name='JobId', example='sGWotg***010001'),
      jobName?: string(name='JobName', example='MyTestJobIax6Eq'),
      productKey?: string(name='ProductKey', example='a1S0OM***'),
      progress?: string(name='Progress', example='80'),
      status?: string(name='Status', example='SUCCEEDED'),
      taskId?: string(name='TaskId', example='MSnT9wl***q010101'),
      utcModified?: string(name='UtcModified', example='2019-05-21T13:03:56.000Z'),
      utcQueueTime?: string(name='UtcQueueTime', example='2019-05-21T13:03:53.000Z'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='223sdf***'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskResponseBody(name='body'),
}

async function listTaskWithOptions(tmpReq: ListTaskRequest, runtime: Util.RuntimeOptions): ListTaskResponse {
  Util.validateModel(tmpReq);
  var request = new ListTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.device)) {
    request.deviceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.device, 'Device', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.deviceShrink)) {
    query['Device'] = request.deviceShrink;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTask(request: ListTaskRequest): ListTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskWithOptions(request, runtime);
}

model ListThingModelVersionRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model ListThingModelVersionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    modelVersions?: [ 
      {
        description?: string(name='Description'),
        gmtCreate?: long(name='GmtCreate', example='1579235657535'),
        modelVersion?: string(name='ModelVersion', example='V1.0.0'),
      }
    ](name='ModelVersions'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListThingModelVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListThingModelVersionResponseBody(name='body'),
}

async function listThingModelVersionWithOptions(request: ListThingModelVersionRequest, runtime: Util.RuntimeOptions): ListThingModelVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListThingModelVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listThingModelVersion(request: ListThingModelVersionRequest): ListThingModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listThingModelVersionWithOptions(request, runtime);
}

model ListThingTemplatesRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model ListThingTemplatesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: [ 
    {
      categoryKey?: string(name='CategoryKey', example='lighting'),
      categoryName?: string(name='CategoryName'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ListThingTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListThingTemplatesResponseBody(name='body'),
}

async function listThingTemplatesWithOptions(request: ListThingTemplatesRequest, runtime: Util.RuntimeOptions): ListThingTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListThingTemplates',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listThingTemplates(request: ListThingTemplatesRequest): ListThingTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listThingTemplatesWithOptions(request, runtime);
}

model NotifyAddThingTopoRequest {
  deviceListStr?: string(name='DeviceListStr', example='[{"productKey":"a1BwAGV****","deviceName":"device1"},{"IotId":"Q7uOhVRdZRRlDnTLv****00100"}]'),
  gwDeviceName?: string(name='GwDeviceName', example='gateway'),
  gwIotId?: string(name='GwIotId', example='vWxNur6BUApsqjv****4000100'),
  gwProductKey?: string(name='GwProductKey', example='a1T27vz****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model NotifyAddThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='5443123'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model NotifyAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NotifyAddThingTopoResponseBody(name='body'),
}

async function notifyAddThingTopoWithOptions(request: NotifyAddThingTopoRequest, runtime: Util.RuntimeOptions): NotifyAddThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceListStr)) {
    query['DeviceListStr'] = request.deviceListStr;
  }
  if (!Util.isUnset(request.gwDeviceName)) {
    query['GwDeviceName'] = request.gwDeviceName;
  }
  if (!Util.isUnset(request.gwIotId)) {
    query['GwIotId'] = request.gwIotId;
  }
  if (!Util.isUnset(request.gwProductKey)) {
    query['GwProductKey'] = request.gwProductKey;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'NotifyAddThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function notifyAddThingTopo(request: NotifyAddThingTopoRequest): NotifyAddThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return notifyAddThingTopoWithOptions(request, runtime);
}

model OpenIotServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenIotServiceResponseBody = {
  orderId?: string(name='OrderId', example='20671870***'),
  requestId?: string(name='RequestId', example='427DB0B3-9436-4A3C-B2BC-B961F95E9488'),
}

model OpenIotServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenIotServiceResponseBody(name='body'),
}

async function openIotServiceWithOptions(request: OpenIotServiceRequest, runtime: Util.RuntimeOptions): OpenIotServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenIotService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openIotService(request: OpenIotServiceRequest): OpenIotServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openIotServiceWithOptions(request, runtime);
}

model PackageSoundCodeLabelBatchAudioRequest {
  batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model PackageSoundCodeLabelBatchAudioResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='http://****.oss-cn-shanghai.aliyuncs.com/speech_test_audio/CPjUL8qUtOMoQmC******.wav?Expires=1620380723'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PackageSoundCodeLabelBatchAudioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PackageSoundCodeLabelBatchAudioResponseBody(name='body'),
}

async function packageSoundCodeLabelBatchAudioWithOptions(request: PackageSoundCodeLabelBatchAudioRequest, runtime: Util.RuntimeOptions): PackageSoundCodeLabelBatchAudioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchCode)) {
    body['BatchCode'] = request.batchCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PackageSoundCodeLabelBatchAudio',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function packageSoundCodeLabelBatchAudio(request: PackageSoundCodeLabelBatchAudioRequest): PackageSoundCodeLabelBatchAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return packageSoundCodeLabelBatchAudioWithOptions(request, runtime);
}

model PageQuerySharedSpeechOpenRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='sd34****'),
  shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
  status?: int32(name='Status', example='1'),
}

model PageQuerySharedSpeechOpenResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  data?: {
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    resultData?: {
      data?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='identifying'),
        code?: string(name='Code', example='ws****'),
        speechRate?: int32(name='SpeechRate', example='50'),
        status?: int32(name='Status', example='1'),
        text?: string(name='Text', example='test'),
        voice?: string(name='Voice', example='Siyue'),
        volume?: int32(name='Volume', example='50'),
      }
    ](name='Data')
    }(name='ResultData'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model PageQuerySharedSpeechOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageQuerySharedSpeechOpenResponseBody(name='body'),
}

async function pageQuerySharedSpeechOpenWithOptions(request: PageQuerySharedSpeechOpenRequest, runtime: Util.RuntimeOptions): PageQuerySharedSpeechOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.shareTaskCode)) {
    body['ShareTaskCode'] = request.shareTaskCode;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageQuerySharedSpeechOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageQuerySharedSpeechOpen(request: PageQuerySharedSpeechOpenRequest): PageQuerySharedSpeechOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageQuerySharedSpeechOpenWithOptions(request, runtime);
}

model PageQuerySpeechBroadcastHourRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  pageSize?: int32(name='PageSize', example='10'),
  pageToken?: string(name='PageToken', example='TGlzdFJlc291cm****'),
  queryDateTimeHour?: string(name='QueryDateTimeHour', example='2020090919'),
  shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
}

model PageQuerySpeechBroadcastHourResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    pageToken?: string(name='PageToken', example='TGlzdFJlc291cm****'),
    resultData?: {
      data?: [ 
      {
        code?: int32(name='Code', example='0'),
        deviceName?: string(name='DeviceName', example='device1'),
        msg?: string(name='Msg'),
        productKey?: string(name='ProductKey', example='sd34****'),
        shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
        speechId?: string(name='SpeechId', example='42000011392021112380****'),
        speechs?: string(name='Speechs', example='["ANC","CDF"]'),
        startTime?: long(name='StartTime', example='1663210172207'),
      }
    ](name='Data')
    }(name='ResultData'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model PageQuerySpeechBroadcastHourResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageQuerySpeechBroadcastHourResponseBody(name='body'),
}

async function pageQuerySpeechBroadcastHourWithOptions(request: PageQuerySpeechBroadcastHourRequest, runtime: Util.RuntimeOptions): PageQuerySpeechBroadcastHourResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryDateTimeHour)) {
    query['QueryDateTimeHour'] = request.queryDateTimeHour;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pageToken)) {
    body['PageToken'] = request.pageToken;
  }
  if (!Util.isUnset(request.shareTaskCode)) {
    body['ShareTaskCode'] = request.shareTaskCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageQuerySpeechBroadcastHour',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageQuerySpeechBroadcastHour(request: PageQuerySpeechBroadcastHourRequest): PageQuerySpeechBroadcastHourResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageQuerySpeechBroadcastHourWithOptions(request, runtime);
}

model PrintByTemplateRequest {
  deviceName?: string(name='DeviceName', example='light'),
  historyPrintTopic?: boolean(name='HistoryPrintTopic', example='true'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  paramsJsonString?: string(name='ParamsJsonString'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  templateBizCode?: string(name='TemplateBizCode', example='test'),
}

model PrintByTemplateResponseBody = {
  code?: string(name='Code', example='iot.printservice.NotSigned'),
  data?: {
    deviceErrorCode?: string(name='DeviceErrorCode', example='2'),
    deviceErrorMessage?: string(name='DeviceErrorMessage', example='no paper'),
    id?: string(name='Id', example='NyWh5lw3*****RfL9LJUivhOhQV*****'),
    maxRetryCount?: int32(name='MaxRetryCount', example='2'),
    retryCount?: int32(name='RetryCount', example='0'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='print service not open'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PrintByTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PrintByTemplateResponseBody(name='body'),
}

async function printByTemplateWithOptions(request: PrintByTemplateRequest, runtime: Util.RuntimeOptions): PrintByTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.historyPrintTopic)) {
    body['HistoryPrintTopic'] = request.historyPrintTopic;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.paramsJsonString)) {
    body['ParamsJsonString'] = request.paramsJsonString;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.templateBizCode)) {
    body['TemplateBizCode'] = request.templateBizCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PrintByTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function printByTemplate(request: PrintByTemplateRequest): PrintByTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return printByTemplateWithOptions(request, runtime);
}

model PubRequest {
  contentType?: string(name='ContentType'),
  correlationData?: string(name='CorrelationData', example='aGVsbG8****'),
  deviceName?: string(name='DeviceName', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  messageContent?: string(name='MessageContent', example='eyJ0ZXN0IjoidGFzayBwdWIgYnJvYWRjYXN0In0='),
  payloadFormatIndicator?: int32(name='PayloadFormatIndicator'),
  productKey?: string(name='ProductKey', example='a1Q5XoY****'),
  qos?: int32(name='Qos', example='0'),
  responseTopic?: string(name='ResponseTopic', example='/a1Q5XoY****/device1/user/update'),
  topicFullName?: string(name='TopicFullName', example='/a1Q5XoY****/device1/user/get'),
  userProp?: [ 
    {
      key?: string(name='Key', example='key1'),
      value?: string(name='Value', example='value1'),
    }
  ](name='UserProp'),
}

model PubResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: string(name='MessageId', example='889455942124347329'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model PubResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PubResponseBody(name='body'),
}

async function pubWithOptions(request: PubRequest, runtime: Util.RuntimeOptions): PubResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.correlationData)) {
    query['CorrelationData'] = request.correlationData;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.payloadFormatIndicator)) {
    query['PayloadFormatIndicator'] = request.payloadFormatIndicator;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.qos)) {
    query['Qos'] = request.qos;
  }
  if (!Util.isUnset(request.responseTopic)) {
    query['ResponseTopic'] = request.responseTopic;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  if (!Util.isUnset(request.userProp)) {
    query['UserProp'] = request.userProp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageContent)) {
    body['MessageContent'] = request.messageContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Pub',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pub(request: PubRequest): PubResponse {
  var runtime = new Util.RuntimeOptions{};
  return pubWithOptions(request, runtime);
}

model PubBroadcastRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  messageContent?: string(name='MessageContent', example='aGVsbG93b3JsZA'),
  productKey?: string(name='ProductKey', example='aldeji3*****'),
  topicFullName?: string(name='TopicFullName', example='/broadcast/UPqSxj2vXXX/xxx'),
}

model PubBroadcastResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId', example='1234291569964771840'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model PubBroadcastResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PubBroadcastResponseBody(name='body'),
}

async function pubBroadcastWithOptions(request: PubBroadcastRequest, runtime: Util.RuntimeOptions): PubBroadcastResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.messageContent)) {
    query['MessageContent'] = request.messageContent;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PubBroadcast',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pubBroadcast(request: PubBroadcastRequest): PubBroadcastResponse {
  var runtime = new Util.RuntimeOptions{};
  return pubBroadcastWithOptions(request, runtime);
}

model PublishScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model PublishScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  syntaxErrorMsg?: string(name='SyntaxErrorMsg', example='script doesn\\"t contains transmit function'),
}

model PublishScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishScriptResponseBody(name='body'),
}

async function publishScriptWithOptions(request: PublishScriptRequest, runtime: Util.RuntimeOptions): PublishScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishScript(request: PublishScriptRequest): PublishScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishScriptWithOptions(request, runtime);
}

model PublishStudioAppRequest {
  appId?: string(name='AppId', example='a12*******'),
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123******'),
}

model PublishStudioAppResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model PublishStudioAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishStudioAppResponseBody(name='body'),
}

async function publishStudioAppWithOptions(request: PublishStudioAppRequest, runtime: Util.RuntimeOptions): PublishStudioAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishStudioApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishStudioApp(request: PublishStudioAppRequest): PublishStudioAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishStudioAppWithOptions(request, runtime);
}

model PublishThingModelRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****'),
}

model PublishThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model PublishThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishThingModelResponseBody(name='body'),
}

async function publishThingModelWithOptions(request: PublishThingModelRequest, runtime: Util.RuntimeOptions): PublishThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishThingModel(request: PublishThingModelRequest): PublishThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishThingModelWithOptions(request, runtime);
}

model PushSpeechRequest {
  deviceName?: string(name='DeviceName', example='a1BwAGV****'),
  groupId?: string(name='GroupId', example='4de2c367****8c585e5992**'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='light'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  pushMode?: string(name='PushMode', example='SINGLE_DEVICE'),
  speechCodeList?: [ string ](name='SpeechCodeList', example='4de2c367****8c585e5992**'),
}

model PushSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: string(name='Data', example='4de2c367****8c585e5992**'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PushSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushSpeechResponseBody(name='body'),
}

async function pushSpeechWithOptions(request: PushSpeechRequest, runtime: Util.RuntimeOptions): PushSpeechResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.pushMode)) {
    body['PushMode'] = request.pushMode;
  }
  if (!Util.isUnset(request.speechCodeList)) {
    body['SpeechCodeList'] = request.speechCodeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushSpeech(request: PushSpeechRequest): PushSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushSpeechWithOptions(request, runtime);
}

model QueryBatchRegisterDeviceStatusRequest {
  applyId?: long(name='ApplyId', example='1295006'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryBatchRegisterDeviceStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidList?: {
      name?: [ string ](name='Name')
    }(name='InvalidList'),
    status?: string(name='Status', example='CREATE_SUCCESS'),
    validList?: {
      name?: [ string ](name='Name')
    }(name='ValidList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryBatchRegisterDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBatchRegisterDeviceStatusResponseBody(name='body'),
}

async function queryBatchRegisterDeviceStatusWithOptions(request: QueryBatchRegisterDeviceStatusRequest, runtime: Util.RuntimeOptions): QueryBatchRegisterDeviceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBatchRegisterDeviceStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBatchRegisterDeviceStatus(request: QueryBatchRegisterDeviceStatusRequest): QueryBatchRegisterDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBatchRegisterDeviceStatusWithOptions(request, runtime);
}

model QueryCertUrlByApplyIdRequest {
  applyId?: long(name='ApplyId', example='1234567'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QueryCertUrlByApplyIdResponseBody = {
  certUrl?: string(name='CertUrl', example='https://****'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryCertUrlByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCertUrlByApplyIdResponseBody(name='body'),
}

async function queryCertUrlByApplyIdWithOptions(request: QueryCertUrlByApplyIdRequest, runtime: Util.RuntimeOptions): QueryCertUrlByApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCertUrlByApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCertUrlByApplyId(request: QueryCertUrlByApplyIdRequest): QueryCertUrlByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCertUrlByApplyIdWithOptions(request, runtime);
}

model QueryClientIdsRequest {
  iotId?: string(name='IotId', example='y4u2weAIrpp****WHMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l'),
}

model QueryClientIdsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    dynamicRegClientIds?: [ 
      {
        clientId?: string(name='ClientId', example='9rSzYt4js92********f000112'),
        createTime?: long(name='CreateTime', example='1636514022424'),
      }
    ](name='DynamicRegClientIds'),
    iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', example='true'),
}

model QueryClientIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClientIdsResponseBody(name='body'),
}

async function queryClientIdsWithOptions(request: QueryClientIdsRequest, runtime: Util.RuntimeOptions): QueryClientIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClientIds',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryClientIds(request: QueryClientIdsRequest): QueryClientIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClientIdsWithOptions(request, runtime);
}

model QueryConsumerGroupByGroupIdRequest {
  groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model QueryConsumerGroupByGroupIdResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    createTime?: string(name='CreateTime', example='2020-05-20T00:05:20.000Z'),
    groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
    groupName?: string(name='GroupName'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model QueryConsumerGroupByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConsumerGroupByGroupIdResponseBody(name='body'),
}

async function queryConsumerGroupByGroupIdWithOptions(request: QueryConsumerGroupByGroupIdRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupByGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConsumerGroupByGroupId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConsumerGroupByGroupId(request: QueryConsumerGroupByGroupIdRequest): QueryConsumerGroupByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupByGroupIdWithOptions(request, runtime);
}

model QueryConsumerGroupListRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  fuzzy?: boolean(name='Fuzzy', example='false'),
  groupName?: string(name='GroupName'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', example='2'),
}

model QueryConsumerGroupListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    consumerGroupDTO?: [ 
    {
      createTime?: string(name='CreateTime', example='2020-05-20T00:05:20.000Z'),
      groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
      groupName?: string(name='GroupName'),
    }
  ](name='ConsumerGroupDTO')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='4'),
  pageSize?: int32(name='PageSize', example='2'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='8'),
}

model QueryConsumerGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConsumerGroupListResponseBody(name='body'),
}

async function queryConsumerGroupListWithOptions(request: QueryConsumerGroupListRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fuzzy)) {
    query['Fuzzy'] = request.fuzzy;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConsumerGroupList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConsumerGroupList(request: QueryConsumerGroupListRequest): QueryConsumerGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupListWithOptions(request, runtime);
}

model QueryConsumerGroupStatusRequest {
  groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model QueryConsumerGroupStatusResponseBody = {
  accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute', example='10'),
  accumulationCount?: int32(name='AccumulationCount', example='13'),
  clientConnectionStatusList?: {
    consumerGroupClientConnectionInfo?: [ 
    {
      accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute', example='10'),
      clientId?: string(name='ClientId', example='868575026******'),
      clientIpPort?: string(name='ClientIpPort', example='192.168.1.2:36918'),
      onlineTime?: long(name='OnlineTime', example='1591240546649'),
      realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute', example='5'),
    }
  ](name='ConsumerGroupClientConnectionInfo')
  }(name='ClientConnectionStatusList'),
  code?: string(name='Code', example='iot.system.SystemException'),
  consumerSpeed?: int32(name='ConsumerSpeed', example='14'),
  errorMessage?: string(name='ErrorMessage'),
  lastConsumerTime?: string(name='LastConsumerTime', example='2020-05-29T03:37:56.000Z'),
  realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute', example='14'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryConsumerGroupStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConsumerGroupStatusResponseBody(name='body'),
}

async function queryConsumerGroupStatusWithOptions(request: QueryConsumerGroupStatusRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConsumerGroupStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryConsumerGroupStatus(request: QueryConsumerGroupStatusRequest): QueryConsumerGroupStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupStatusWithOptions(request, runtime);
}

model QueryDetailSceneRuleLogRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: int32(name='EndTime', example='1581918482'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
  ruleId?: string(name='RuleId', example='e5dd1c7aa3994ecdbc88235979******'),
  startTime?: int32(name='StartTime', example='1581917582'),
  traceId?: string(name='TraceId', example='b662a9671581918480168107******'),
}

model QueryDetailSceneRuleLogResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    logList?: [ 
      {
        code?: string(name='Code', example='9201'),
        message?: string(name='Message', example='device offline, productKey: a1c3t****, deviceName: my_device1'),
        pkDn?: string(name='PkDn', example='a1c3t****/my_device1'),
      }
    ](name='LogList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ED2DF141-B09A-4C8A-BAA5-30CCEE63036C'),
  success?: boolean(name='Success', example='true'),
}

model QueryDetailSceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDetailSceneRuleLogResponseBody(name='body'),
}

async function queryDetailSceneRuleLogWithOptions(request: QueryDetailSceneRuleLogRequest, runtime: Util.RuntimeOptions): QueryDetailSceneRuleLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceId)) {
    query['TraceId'] = request.traceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDetailSceneRuleLog',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDetailSceneRuleLog(request: QueryDetailSceneRuleLogRequest): QueryDetailSceneRuleLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDetailSceneRuleLogWithOptions(request, runtime);
}

model QueryDeviceRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291cm***'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId', example='dwnS41bhNxjslDAI****'),
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='sLefbFmN9SYfnWLJTePG893XNuRV****'),
      deviceStatus?: string(name='DeviceStatus', example='ONLINE'),
      deviceType?: string(name='DeviceType', example='Lighting'),
      gmtCreate?: string(name='GmtCreate', example='Wed, 20-Feb-2019 02:16:09 GMT'),
      gmtModified?: string(name='GmtModified', example='Wed, 20-Feb-2019 02:16:09 GMT'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      utcCreate?: string(name='UtcCreate', example='2019-02-20T02:16:09.000Z'),
      utcModified?: string(name='UtcModified', example='2019-02-20T02:16:09.000Z'),
    }
  ](name='DeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291cm***'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceResponseBody(name='body'),
}

async function queryDeviceWithOptions(request: QueryDeviceRequest, runtime: Util.RuntimeOptions): QueryDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevice(request: QueryDeviceRequest): QueryDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceWithOptions(request, runtime);
}

model QueryDeviceBySQLRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  SQL?: string(name='SQL', example='SELECT * FROM device where product_key = "a1*********" limit 100, 20'),
}

model QueryDeviceBySQLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: [ 
    {
      activeTime?: string(name='ActiveTime', example='2020-04-04 16:38:18.607'),
      deviceName?: string(name='DeviceName', example='light'),
      gmtCreate?: string(name='GmtCreate', example='2020-04-04 16:38:17.000'),
      gmtModified?: string(name='GmtModified', example='2020-04-04 16:38:19.000'),
      groups?: [ 
        {
          groupId?: string(name='GroupId', example='a1d21d2fas'),
        }
      ](name='Groups'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname'),
      OTAModules?: [ 
        {
          firmwareVersion?: string(name='FirmwareVersion', example='a1-dads2-dad2'),
          moduleName?: string(name='ModuleName', example='SomeSampleModule'),
        }
      ](name='OTAModules'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      status?: string(name='Status', example='ONLINE'),
      tags?: [ 
        {
          tagName?: string(name='TagName', example='Color'),
          tagValue?: string(name='TagValue', example='Red'),
        }
      ](name='Tags'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='100'),
}

model QueryDeviceBySQLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceBySQLResponseBody(name='body'),
}

async function queryDeviceBySQLWithOptions(request: QueryDeviceBySQLRequest, runtime: Util.RuntimeOptions): QueryDeviceBySQLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.SQL)) {
    query['SQL'] = request.SQL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceBySQL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceBySQL(request: QueryDeviceBySQLRequest): QueryDeviceBySQLResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceBySQLWithOptions(request, runtime);
}

model QueryDeviceByStatusRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd***'),
  status?: int32(name='Status', example='1'),
}

model QueryDeviceByStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='sLefbFmN9SYfnWLJTePG893XNuRV****'),
      gmtCreate?: string(name='GmtCreate', example='2021-02-18 10:46:32'),
      gmtModified?: string(name='GmtModified', example='2021-02-18 10:46:32'),
      iotId?: string(name='IotId', example='Av8NGHGtwPrH9BYGLMBi00****'),
      nickname?: string(name='Nickname', example='SensorInShanghai'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      status?: string(name='Status', example='ONLINE'),
      utcCreate?: string(name='UtcCreate', example='2021-02-18T02:46:32.000Z'),
      utcModified?: string(name='UtcModified', example='2021-02-18T02:46:32.000Z'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryDeviceByStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceByStatusResponseBody(name='body'),
}

async function queryDeviceByStatusWithOptions(request: QueryDeviceByStatusRequest, runtime: Util.RuntimeOptions): QueryDeviceByStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceByStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceByStatus(request: QueryDeviceByStatusRequest): QueryDeviceByStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceByStatusWithOptions(request, runtime);
}

model QueryDeviceByTagsRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  tag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='101'),
    }
  ](name='Tag'),
}

model QueryDeviceByTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='light1'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      productName?: string(name='ProductName', example='lamp'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model QueryDeviceByTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceByTagsResponseBody(name='body'),
}

async function queryDeviceByTagsWithOptions(request: QueryDeviceByTagsRequest, runtime: Util.RuntimeOptions): QueryDeviceByTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceByTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceByTags(request: QueryDeviceByTagsRequest): QueryDeviceByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceByTagsWithOptions(request, runtime);
}

model QueryDeviceCertRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceCertResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceCertInfo?: {
    certSN?: string(name='CertSN', example='636217374433****'),
    certificate?: string(name='Certificate', example='tXHf4ezGEHcwdyMwoCDHGBmk9avi****'),
    privateKey?: string(name='PrivateKey', example='CqXL5h5ysRTA4NxjABjj0010fa****'),
    status?: int32(name='Status', example='2'),
  }(name='DeviceCertInfo'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceCertResponseBody(name='body'),
}

async function queryDeviceCertWithOptions(request: QueryDeviceCertRequest, runtime: Util.RuntimeOptions): QueryDeviceCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceCert',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceCert(request: QueryDeviceCertRequest): QueryDeviceCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceCertWithOptions(request, runtime);
}

model QueryDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', example='light'),
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  identifier?: [ string ](name='Identifier', example='Temperature'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      desiredPropertyInfo?: [ 
      {
        dataType?: string(name='DataType', example='int'),
        identifier?: string(name='Identifier', example='Temperature'),
        name?: string(name='Name', example='airconditioning'),
        time?: string(name='Time', example='1579335899000'),
        unit?: string(name='Unit', example='℃'),
        value?: string(name='Value', example='34'),
        version?: long(name='Version', example='1'),
      }
    ](name='DesiredPropertyInfo')
    }(name='List'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDesiredPropertyResponseBody(name='body'),
}

async function queryDeviceDesiredPropertyWithOptions(request: QueryDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): QueryDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDesiredProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceDesiredProperty(request: QueryDeviceDesiredPropertyRequest): QueryDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDesiredPropertyWithOptions(request, runtime);
}

model QueryDeviceDetailRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceDetailResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    firmwareVersion?: string(name='FirmwareVersion', example='V1.0.0.0'),
    gmtActive?: string(name='GmtActive', example='2018-08-06 10:48:41'),
    gmtCreate?: string(name='GmtCreate', example='2018-08-06 10:47:50'),
    gmtOnline?: string(name='GmtOnline', example='2018-08-06 13:43:12'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
    ipAddress?: string(name='IpAddress', example='10.0.0.1'),
    nickname?: string(name='Nickname', example='detectors_in_beijing'),
    nodeType?: int32(name='NodeType', example='0'),
    owner?: boolean(name='Owner', example='true'),
    productKey?: string(name='ProductKey', example='a1rYuVF****'),
    productName?: string(name='ProductName', example='test'),
    region?: string(name='Region', example='cn-shanghai'),
    status?: string(name='Status', example='ONLINE'),
    utcActive?: string(name='UtcActive', example='2018-08-06T02:48:41.000Z'),
    utcCreate?: string(name='UtcCreate', example='2018-08-06T02:47:50.000Z'),
    utcOnline?: string(name='UtcOnline', example='2018-08-06T05:43:12.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDetailResponseBody(name='body'),
}

async function queryDeviceDetailWithOptions(request: QueryDeviceDetailRequest, runtime: Util.RuntimeOptions): QueryDeviceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceDetail(request: QueryDeviceDetailRequest): QueryDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDetailWithOptions(request, runtime);
}

model QueryDeviceDistributeDetailRequest {
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
}

model QueryDeviceDistributeDetailResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  file?: string(name='File', example='https://iotx-***.oss-cn-shanghai.aliyuncs.com/job***/7u***'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDistributeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDistributeDetailResponseBody(name='body'),
}

async function queryDeviceDistributeDetailWithOptions(request: QueryDeviceDistributeDetailRequest, runtime: Util.RuntimeOptions): QueryDeviceDistributeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDistributeDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceDistributeDetail(request: QueryDeviceDistributeDetailRequest): QueryDeviceDistributeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDistributeDetailWithOptions(request, runtime);
}

model QueryDeviceDistributeJobRequest {
  jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
}

model QueryDeviceDistributeJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    gmtCreate?: long(name='GmtCreate', example='1581595942000'),
    jobId?: string(name='JobId', example='UbmsMHmkqv0PiAG****010001'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    sourceInstanceId?: string(name='SourceInstanceId', example='iot-cn-6ja***'),
    sourceUid?: string(name='SourceUid', example='198***'),
    status?: int32(name='Status', example='1'),
    strategy?: int32(name='Strategy', example='0'),
    targetInstanceConfigs?: {
      targetInstanceConfigs?: [ 
      {
        targetInstanceId?: string(name='TargetInstanceId', example='iot-cn-6ja***'),
      }
    ](name='targetInstanceConfigs')
    }(name='TargetInstanceConfigs'),
    targetUid?: string(name='TargetUid', example='198***'),
    total?: int32(name='Total', example='5'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDistributeJobResponseBody(name='body'),
}

async function queryDeviceDistributeJobWithOptions(request: QueryDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): QueryDeviceDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceDistributeJob(request: QueryDeviceDistributeJobRequest): QueryDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDistributeJobWithOptions(request, runtime);
}

model QueryDeviceEventDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='light'),
  endTime?: long(name='EndTime', example='1516541900303'),
  eventType?: string(name='EventType', example='info'),
  identifier?: string(name='Identifier', example='PowerOff'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1516541900303'),
}

model QueryDeviceEventDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType', example='info'),
        identifier?: string(name='Identifier', example='PowerOff'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{"structArgs":{"structchildFLOATf71c20e":1.23}}'),
        time?: string(name='Time', example='1579163099000'),
      }
    ](name='EventInfo')
    }(name='List'),
    nextTime?: long(name='NextTime', example='1579163099000'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceEventDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceEventDataResponseBody(name='body'),
}

async function queryDeviceEventDataWithOptions(request: QueryDeviceEventDataRequest, runtime: Util.RuntimeOptions): QueryDeviceEventDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceEventData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceEventData(request: QueryDeviceEventDataRequest): QueryDeviceEventDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventDataWithOptions(request, runtime);
}

model QueryDeviceFileRequest {
  deviceName?: string(name='DeviceName', example='light'),
  fileId?: string(name='FileId', example='xL0G67MBLBDtkR7GCfT******'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceFileResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    downloadUrl?: string(name='DownloadUrl', example='http://iotx-file-store.oss-cn-shanghai.aliyuncs.com/device_file/A849E4E5CFF64804A18D9384AC9D****/aGEKIpp5NAGxdP2oo90000****/testFile3.txt?Expires=1553162075&OSSAccessKeyId=LTAIYLScbHiV****&Signature=%2F88xdEFPukJ****%2F8****%2Bdv3io%3D'),
    fileId?: string(name='FileId', example='6UCo1SqbqnQEoh9aKqDQ01****'),
    name?: string(name='Name', example='testFile3.txt'),
    size?: string(name='Size', example='102400'),
    utcCreatedOn?: string(name='UtcCreatedOn', example='2019-03-21T08:45:42.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceFileResponseBody(name='body'),
}

async function queryDeviceFileWithOptions(request: QueryDeviceFileRequest, runtime: Util.RuntimeOptions): QueryDeviceFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceFile',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceFile(request: QueryDeviceFileRequest): QueryDeviceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileWithOptions(request, runtime);
}

model QueryDeviceFileListRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceFileListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    fileSummary?: [ 
    {
      fileId?: string(name='FileId', example='xL0G67MBLBDtkR7GCfT******'),
      name?: string(name='Name', example='testFile2.txt'),
      size?: string(name='Size', example='1024000'),
      utcCreatedOn?: string(name='UtcCreatedOn', example='2019-03-21T08:45:42.000Z'),
    }
  ](name='FileSummary')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryDeviceFileListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceFileListResponseBody(name='body'),
}

async function queryDeviceFileListWithOptions(request: QueryDeviceFileListRequest, runtime: Util.RuntimeOptions): QueryDeviceFileListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceFileList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceFileList(request: QueryDeviceFileListRequest): QueryDeviceFileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileListWithOptions(request, runtime);
}

model QueryDeviceGroupByDeviceRequest {
  deviceName?: string(name='DeviceName', example='test456'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1SKk9K****'),
}

model QueryDeviceGroupByDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  groupInfos?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', example='father desc'),
      groupId?: string(name='GroupId', example='6a3FF2XE2BKa****'),
      groupName?: string(name='GroupName', example='father1543152336554'),
      groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
      utcCreate?: string(name='UtcCreate', example='2018-11-25T13:25:37.000Z'),
    }
  ](name='GroupInfo')
  }(name='GroupInfos'),
  requestId?: string(name='RequestId', example='7941C8CD-7764-4A94-8CD9-E2762D4A73AC'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceGroupByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupByDeviceResponseBody(name='body'),
}

async function queryDeviceGroupByDeviceWithOptions(request: QueryDeviceGroupByDeviceRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceGroupByDevice(request: QueryDeviceGroupByDeviceRequest): QueryDeviceGroupByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupByDeviceWithOptions(request, runtime);
}

model QueryDeviceGroupByTagsRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  tag?: [ 
    {
      tagKey?: string(name='TagKey', example='group'),
      tagValue?: string(name='TagValue', example='tag'),
    }
  ](name='Tag'),
}

model QueryDeviceGroupByTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceGroup?: [ 
    {
      groupId?: string(name='GroupId', example='Z0ElGF5aqc0t****'),
      groupName?: string(name='GroupName', example='test11'),
    }
  ](name='DeviceGroup')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9599EE98-1642-4FCD-BFC4-039E458A4693'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model QueryDeviceGroupByTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupByTagsResponseBody(name='body'),
}

async function queryDeviceGroupByTagsWithOptions(request: QueryDeviceGroupByTagsRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupByTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupByTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceGroupByTags(request: QueryDeviceGroupByTagsRequest): QueryDeviceGroupByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupByTagsWithOptions(request, runtime);
}

model QueryDeviceGroupInfoRequest {
  groupId?: string(name='GroupId', example='tDQvBJqbUyHs****'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model QueryDeviceGroupInfoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceActive?: int32(name='DeviceActive', example='1'),
    deviceCount?: int32(name='DeviceCount', example='10'),
    deviceOnline?: int32(name='DeviceOnline', example='0'),
    dynamicGroupExpression?: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"'),
    groupDesc?: string(name='GroupDesc', example='usefulGroup'),
    groupId?: string(name='GroupId', example='tDQvBJqbUyHs****'),
    groupName?: string(name='GroupName', example='aliyun'),
    utcCreate?: string(name='UtcCreate', example='2018-09-14T14:35:51.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='7411716B-A488-4EEB-9AA0-6DB05AD2491F'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupInfoResponseBody(name='body'),
}

async function queryDeviceGroupInfoWithOptions(request: QueryDeviceGroupInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceGroupInfo(request: QueryDeviceGroupInfoRequest): QueryDeviceGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupInfoWithOptions(request, runtime);
}

model QueryDeviceGroupListRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  groupName?: string(name='GroupName', example='GroupName1'),
  groupTypes?: [ string ](name='GroupTypes', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  superGroupId?: string(name='SuperGroupId', example='8vDubXr4nUvZkNgk9mle010200'),
}

model QueryDeviceGroupListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', example='1'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', example='usefulGroup'),
      groupId?: string(name='GroupId', example='Kzt9FD8wje8o****'),
      groupName?: string(name='GroupName', example='test1'),
      groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
      utcCreate?: string(name='UtcCreate', example='2018-10-09T02:58:34.000Z'),
    }
  ](name='GroupInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  pageCount?: int32(name='PageCount', example='3'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='BEFCA316-D6C7-470C-81ED-1FF4FFD4AA0D'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='24'),
}

model QueryDeviceGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupListResponseBody(name='body'),
}

async function queryDeviceGroupListWithOptions(request: QueryDeviceGroupListRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupTypes)) {
    query['GroupTypes'] = request.groupTypes;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.superGroupId)) {
    query['SuperGroupId'] = request.superGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceGroupList(request: QueryDeviceGroupListRequest): QueryDeviceGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupListWithOptions(request, runtime);
}

model QueryDeviceGroupTagListRequest {
  groupId?: string(name='GroupId', example='W16X8Tvdosec****'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QueryDeviceGroupTagListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    groupTagInfo?: [ 
    {
      tagKey?: string(name='TagKey', example='room1'),
      tagValue?: string(name='TagValue', example='bulb'),
    }
  ](name='GroupTagInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='214154FF-9D47-4E3F-AAAD-F4CE67F41060'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceGroupTagListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupTagListResponseBody(name='body'),
}

async function queryDeviceGroupTagListWithOptions(request: QueryDeviceGroupTagListRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupTagListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupTagList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceGroupTagList(request: QueryDeviceGroupTagListRequest): QueryDeviceGroupTagListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupTagListWithOptions(request, runtime);
}

model QueryDeviceInfoRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceInfoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
    nickname?: string(name='Nickname', example='detectors_in_beijing'),
    productKey?: string(name='ProductKey', example='a1rYuVF****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceInfoResponseBody(name='body'),
}

async function queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceInfoWithOptions(request, runtime);
}

model QueryDeviceListByDeviceGroupRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  groupId?: string(name='GroupId', example='7DIgqIl1Ijnh****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryDeviceListByDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', example='ios_1207_08'),
      iotId?: string(name='IotId', example='TfmUAeJjQQhCPH84UVNn0010c6****'),
      productKey?: string(name='ProductKey', example='a1hWjHD****'),
      productName?: string(name='ProductName', example='WIFIdevice'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='B1A921D9-1061-4D45-9F12-EA6B0FDEDE30'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='3'),
}

model QueryDeviceListByDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceListByDeviceGroupResponseBody(name='body'),
}

async function queryDeviceListByDeviceGroupWithOptions(request: QueryDeviceListByDeviceGroupRequest, runtime: Util.RuntimeOptions): QueryDeviceListByDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceListByDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceListByDeviceGroup(request: QueryDeviceListByDeviceGroupRequest): QueryDeviceListByDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceListByDeviceGroupWithOptions(request, runtime);
}

model QueryDeviceOriginalEventDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='light'),
  endTime?: long(name='EndTime', example='1516541900303'),
  identifier?: string(name='Identifier', example='PowerOff'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1516538300303'),
}

model QueryDeviceOriginalEventDataResponseBody = {
  code?: string(name='Code', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType', example='info'),
        identifier?: string(name='Identifier', example='PowerOff'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{"structArgs":{"structchildFLOATf71c20e":1.23}}'),
        time?: string(name='Time', example='1579163099000'),
      }
    ](name='EventInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalEventDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalEventDataResponseBody(name='body'),
}

async function queryDeviceOriginalEventDataWithOptions(request: QueryDeviceOriginalEventDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalEventDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalEventData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceOriginalEventData(request: QueryDeviceOriginalEventDataRequest): QueryDeviceOriginalEventDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalEventDataWithOptions(request, runtime);
}

model QueryDeviceOriginalPropertyDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='light'),
  endTime?: long(name='EndTime', example='1579249499000'),
  identifier?: string(name='Identifier', example='temperature'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1579249499000'),
}

model QueryDeviceOriginalPropertyDataResponseBody = {
  code?: string(name='Code', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', example='1516541885630'),
        value?: string(name='Value', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextValid?: boolean(name='NextValid', example='true'),
    nextPageToken?: string(name='nextPageToken', example='Bo***x44Qx'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalPropertyDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalPropertyDataResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyDataWithOptions(request: QueryDeviceOriginalPropertyDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalPropertyDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalPropertyData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceOriginalPropertyData(request: QueryDeviceOriginalPropertyDataRequest): QueryDeviceOriginalPropertyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalPropertyDataWithOptions(request, runtime);
}

model QueryDeviceOriginalPropertyStatusRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceOriginalPropertyStatusResponseBody = {
  code?: string(name='Code', example='iot.common.InvalidPageParams'),
  data?: {
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Temperture'),
        time?: long(name='Time', example='1517553572362'),
        value?: string(name='Value', example='26'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalPropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalPropertyStatusResponseBody(name='body'),
}

async function queryDeviceOriginalPropertyStatusWithOptions(request: QueryDeviceOriginalPropertyStatusRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalPropertyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalPropertyStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceOriginalPropertyStatus(request: QueryDeviceOriginalPropertyStatusRequest): QueryDeviceOriginalPropertyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalPropertyStatusWithOptions(request, runtime);
}

model QueryDeviceOriginalServiceDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='light'),
  endTime?: long(name='EndTime', example='1579249499000'),
  identifier?: string(name='Identifier', example='Set'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1579249498000'),
}

model QueryDeviceOriginalServiceDataResponseBody = {
  code?: string(name='Code', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Set'),
        inputData?: string(name='InputData', example='{\\"code\\":200,\\"data\\":{},\\"id\\":\\"100686\\",\\"message\\":\\"success\\",\\"version\\":\\"1.0\\"}'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{\\"LightAdjustLevel\\":123}'),
        time?: string(name='Time', example='1579249499000'),
      }
    ](name='ServiceInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceOriginalServiceDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalServiceDataResponseBody(name='body'),
}

async function queryDeviceOriginalServiceDataWithOptions(request: QueryDeviceOriginalServiceDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalServiceDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalServiceData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceOriginalServiceData(request: QueryDeviceOriginalServiceDataRequest): QueryDeviceOriginalServiceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalServiceDataWithOptions(request, runtime);
}

model QueryDevicePropRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDevicePropResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  props?: string(name='Props', example='{"coordinate":"104.07086:30.549169"}'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropResponseBody(name='body'),
}

async function queryDevicePropWithOptions(request: QueryDevicePropRequest, runtime: Util.RuntimeOptions): QueryDevicePropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceProp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceProp(request: QueryDevicePropRequest): QueryDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropWithOptions(request, runtime);
}

model QueryDevicePropertiesDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='airconditioning'),
  endTime?: long(name='EndTime', example='1579249499000'),
  identifier?: [ string ](name='Identifier', example='temperature'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1579249499000'),
}

model QueryDevicePropertiesDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  nextTime?: long(name='NextTime', example='1579249499000'),
  nextValid?: boolean(name='NextValid', example='true'),
  propertyDataInfos?: {
    propertyDataInfo?: [ 
    {
      identifier?: string(name='Identifier', example='temperature'),
      list?: {
        propertyInfo?: [ 
        {
          time?: long(name='Time', example='1579249499000'),
          value?: string(name='Value', example='21.3'),
        }
      ](name='PropertyInfo')
      }(name='List'),
    }
  ](name='PropertyDataInfo')
  }(name='PropertyDataInfos'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropertiesDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropertiesDataResponseBody(name='body'),
}

async function queryDevicePropertiesDataWithOptions(request: QueryDevicePropertiesDataRequest, runtime: Util.RuntimeOptions): QueryDevicePropertiesDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePropertiesData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePropertiesData(request: QueryDevicePropertiesDataRequest): QueryDevicePropertiesDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertiesDataWithOptions(request, runtime);
}

model QueryDevicePropertyDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='airconditioning'),
  endTime?: long(name='EndTime', example='1579249499000'),
  identifier?: string(name='Identifier', example='temperature'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1579249499000'),
}

model QueryDevicePropertyDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', example='1516541885630'),
        value?: string(name='Value', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextTime?: long(name='NextTime', example='1579249499000'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropertyDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropertyDataResponseBody(name='body'),
}

async function queryDevicePropertyDataWithOptions(request: QueryDevicePropertyDataRequest, runtime: Util.RuntimeOptions): QueryDevicePropertyDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePropertyData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePropertyData(request: QueryDevicePropertyDataRequest): QueryDevicePropertyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertyDataWithOptions(request, runtime);
}

model QueryDevicePropertyStatusRequest {
  deviceName?: string(name='DeviceName', example='light'),
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDevicePropertyStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyStatusInfo?: [ 
      {
        dataType?: string(name='DataType', example='int'),
        identifier?: string(name='Identifier', example='Temperture'),
        name?: string(name='Name', example='temperature'),
        time?: string(name='Time', example='1517553572362'),
        unit?: string(name='Unit', example='°C'),
        value?: string(name='Value', example='25'),
      }
    ](name='PropertyStatusInfo')
    }(name='List'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicePropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropertyStatusResponseBody(name='body'),
}

async function queryDevicePropertyStatusWithOptions(request: QueryDevicePropertyStatusRequest, runtime: Util.RuntimeOptions): QueryDevicePropertyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePropertyStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicePropertyStatus(request: QueryDevicePropertyStatusRequest): QueryDevicePropertyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertyStatusWithOptions(request, runtime);
}

model QueryDeviceProvisioningRequest {
  deviceName?: string(name='DeviceName', example='testDevcieBwT3Un'),
  productKey?: string(name='ProductKey', example='a1ji*****'),
}

model QueryDeviceProvisioningResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    aliyunUid?: string(name='AliyunUid', example='io****@example.com'),
    deviceName?: string(name='DeviceName', example='testDevcieBwT3Un'),
    gmtCreate?: long(name='GmtCreate', example='1676297683000'),
    gmtModified?: long(name='GmtModified', example='1676297683000'),
    productKey?: string(name='ProductKey', example='a1ji*****'),
    sourceIotInstanceId?: string(name='SourceIotInstanceId', example='iot-6ja****'),
    sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
    targetIotInstanceId?: string(name='TargetIotInstanceId', example='iot-09k****'),
    targetRegion?: string(name='TargetRegion', example='ap-southeast-1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceProvisioningResponseBody(name='body'),
}

async function queryDeviceProvisioningWithOptions(request: QueryDeviceProvisioningRequest, runtime: Util.RuntimeOptions): QueryDeviceProvisioningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceProvisioning',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceProvisioning(request: QueryDeviceProvisioningRequest): QueryDeviceProvisioningResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceProvisioningWithOptions(request, runtime);
}

model QueryDeviceServiceDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='light'),
  endTime?: long(name='EndTime', example='1579249499000'),
  identifier?: string(name='Identifier', example='Set'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1579249499000'),
}

model QueryDeviceServiceDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Set'),
        inputData?: string(name='InputData', example='{\\"code\\":200,\\"data\\":{},\\"id\\":\\"100686\\",\\"message\\":\\"success\\",\\"version\\":\\"1.0\\"}'),
        name?: string(name='Name'),
        outputData?: string(name='OutputData', example='{\\"LightAdjustLevel\\":123}'),
        time?: string(name='Time', example='1579249499000'),
      }
    ](name='ServiceInfo')
    }(name='List'),
    nextTime?: long(name='NextTime', example='1579335899000'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceServiceDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceServiceDataResponseBody(name='body'),
}

async function queryDeviceServiceDataWithOptions(request: QueryDeviceServiceDataRequest, runtime: Util.RuntimeOptions): QueryDeviceServiceDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceServiceData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceServiceData(request: QueryDeviceServiceDataRequest): QueryDeviceServiceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceServiceDataWithOptions(request, runtime);
}

model QueryDeviceSpeechRequest {
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QueryDeviceSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='ZFDZ'),
        size?: float(name='Size', example='16'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceSpeechResponseBody(name='body'),
}

async function queryDeviceSpeechWithOptions(request: QueryDeviceSpeechRequest, runtime: Util.RuntimeOptions): QueryDeviceSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceSpeech(request: QueryDeviceSpeechRequest): QueryDeviceSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceSpeechWithOptions(request, runtime);
}

model QueryDeviceStatisticsRequest {
  groupId?: string(name='GroupId', example='W16X8Tvdosec****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    activeCount?: long(name='activeCount', example='10'),
    deviceCount?: long(name='deviceCount', example='100'),
    onlineCount?: long(name='onlineCount', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceStatisticsResponseBody(name='body'),
}

async function queryDeviceStatisticsWithOptions(request: QueryDeviceStatisticsRequest, runtime: Util.RuntimeOptions): QueryDeviceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceStatistics',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceStatistics(request: QueryDeviceStatisticsRequest): QueryDeviceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceStatisticsWithOptions(request, runtime);
}

model QueryDeviceSubTopicRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='hf768****'),
}

model QueryDeviceSubTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  topicList?: [ 
    {
      timestamp?: long(name='Timestamp', example='1662039965873'),
      topicName?: string(name='TopicName', example='/hf768****/device1/user/test'),
    }
  ](name='TopicList'),
}

model QueryDeviceSubTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceSubTopicResponseBody(name='body'),
}

async function queryDeviceSubTopicWithOptions(request: QueryDeviceSubTopicRequest, runtime: Util.RuntimeOptions): QueryDeviceSubTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceSubTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceSubTopic(request: QueryDeviceSubTopicRequest): QueryDeviceSubTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceSubTopicWithOptions(request, runtime);
}

model QueryDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
}

model QueryDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    description?: string(name='Description'),
    deviceConnState?: string(name='DeviceConnState', example='CONNECTED'),
    deviceName?: string(name='DeviceName', example='light'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv***00100'),
    productKey?: string(name='ProductKey', example='a1rYuVF***'),
    productName?: string(name='ProductName', example='test'),
    sourceConnState?: string(name='SourceConnState', example='DISCONNECTED'),
    tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
    tunnelState?: string(name='TunnelState', example='OPEN'),
    udi?: string(name='Udi', example='reboot'),
    utcClosed?: string(name='UtcClosed', example='2021-09-22T12:44:12.000Z'),
    utcCreated?: string(name='UtcCreated', example='2021-09-22T12:44:12.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceTunnelResponseBody(name='body'),
}

async function queryDeviceTunnelWithOptions(request: QueryDeviceTunnelRequest, runtime: Util.RuntimeOptions): QueryDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tunnelId)) {
    query['TunnelId'] = request.tunnelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceTunnel(request: QueryDeviceTunnelRequest): QueryDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceTunnelWithOptions(request, runtime);
}

model QueryDevicesHotStorageDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='device1'),
  endTime?: long(name='EndTime', example='1579249499000'),
  identifier?: string(name='Identifier', example='temperature'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1579249499000'),
  userTopic?: string(name='UserTopic', example='user/a***/b***'),
}

model QueryDevicesHotStorageDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', example='1516541885630'),
        value?: string(name='Value', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextValid?: boolean(name='NextValid', example='true'),
    nextPageToken?: string(name='nextPageToken', example='Bo***x44Qx'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicesHotStorageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicesHotStorageDataResponseBody(name='body'),
}

async function queryDevicesHotStorageDataWithOptions(request: QueryDevicesHotStorageDataRequest, runtime: Util.RuntimeOptions): QueryDevicesHotStorageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.userTopic)) {
    query['UserTopic'] = request.userTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicesHotStorageData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicesHotStorageData(request: QueryDevicesHotStorageDataRequest): QueryDevicesHotStorageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesHotStorageDataWithOptions(request, runtime);
}

model QueryDevicesHotStorageDataStatusRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  userTopic?: string(name='UserTopic', example='user/a***/b***'),
}

model QueryDevicesHotStorageDataStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Temperture'),
        time?: long(name='Time', example='1517553572362'),
        value?: string(name='Value', example='22'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicesHotStorageDataStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicesHotStorageDataStatusResponseBody(name='body'),
}

async function queryDevicesHotStorageDataStatusWithOptions(request: QueryDevicesHotStorageDataStatusRequest, runtime: Util.RuntimeOptions): QueryDevicesHotStorageDataStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.userTopic)) {
    query['UserTopic'] = request.userTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicesHotStorageDataStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicesHotStorageDataStatus(request: QueryDevicesHotStorageDataStatusRequest): QueryDevicesHotStorageDataStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesHotStorageDataStatusWithOptions(request, runtime);
}

model QueryDynamicGroupDevicesRequest {
  currentPage?: int32(name='CurrentPage', example='2'),
  deviceName?: string(name='DeviceName', example='light'),
  fuzzyName?: boolean(name='FuzzyName', example='true'),
  groupId?: string(name='GroupId', example='tDQvBJqbUyHs***'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV***'),
  status?: string(name='Status', example='OFFLINE'),
}

model QueryDynamicGroupDevicesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      activeTime?: string(name='ActiveTime', example='2018-08-06 10:48:41'),
      categoryKey?: string(name='CategoryKey', example='Lighting'),
      deviceName?: string(name='DeviceName', example='light'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      lastOnlineTime?: string(name='LastOnlineTime', example='2018-08-06 13:43:12'),
      nickname?: string(name='Nickname', example='detectors_in_beijing'),
      nodeType?: int32(name='NodeType', example='0'),
      productKey?: string(name='ProductKey', example='a1rYuVF***'),
      productName?: string(name='ProductName', example='test'),
      status?: string(name='Status', example='ONLINE'),
      utcActiveTime?: string(name='UtcActiveTime', example='2018-08-06T02:48:41.000Z'),
      utcLastOnlineTime?: string(name='UtcLastOnlineTime', example='2018-08-06T05:43:12.000Z'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='24'),
}

model QueryDynamicGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDynamicGroupDevicesResponseBody(name='body'),
}

async function queryDynamicGroupDevicesWithOptions(request: QueryDynamicGroupDevicesRequest, runtime: Util.RuntimeOptions): QueryDynamicGroupDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.fuzzyName)) {
    query['FuzzyName'] = request.fuzzyName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDynamicGroupDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDynamicGroupDevices(request: QueryDynamicGroupDevicesRequest): QueryDynamicGroupDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDynamicGroupDevicesWithOptions(request, runtime);
}

model QueryEdgeDriverRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  driverName?: string(name='DriverName', example='MyledDriver'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
  type?: int32(name='Type', example='1'),
}

model QueryEdgeDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    driverList?: [ 
      {
        cpuArch?: string(name='CpuArch', example='x86-64'),
        driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
        driverName?: string(name='DriverName', example='MyLedDriver'),
        driverProtocol?: string(name='DriverProtocol', example='customize'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        isApply?: boolean(name='IsApply', example='false'),
        isBuiltIn?: boolean(name='IsBuiltIn', example='false'),
        runtime?: string(name='Runtime', example='c'),
        type?: int32(name='Type', example='1'),
      }
    ](name='DriverList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E0BD540E-DCFE-4602-B6D1-D208E8594BF7'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeDriverResponseBody(name='body'),
}

async function queryEdgeDriverWithOptions(request: QueryEdgeDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverName)) {
    query['DriverName'] = request.driverName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeDriver(request: QueryEdgeDriverRequest): QueryEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeDriverWithOptions(request, runtime);
}

model QueryEdgeDriverVersionRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
  versionState?: int32(name='VersionState', example='0'),
}

model QueryEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    driverVersionList?: [ 
      {
        argument?: string(name='Argument', example='-XX:+PrintGCDetails'),
        configCheckRule?: string(name='ConfigCheckRule', example='{\\"deviceConfig\\":{\\"required\\":false},\\"driverConfig\\":{\\"required\\":false}}'),
        containerConfig?: string(name='ContainerConfig', example='{\\"devMappings\\":[],\\"hostNetworkMode\\":0,\\"portMappings\\":[],\\"privileged\\":1,\\"volumeMappings\\":[]}'),
        description?: string(name='Description'),
        driverConfig?: string(name='DriverConfig', example='[{\\"content\\":\\"{\\\\\\"defaultConfig\\\\\\":\\\\\\"this is default driver config demo\\\\\\"}\\",\\"format\\":\\"JSON\\"}]'),
        driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
        driverVersion?: string(name='DriverVersion', example='1.2.0'),
        edgeVersion?: string(name='EdgeVersion', example='2.0.0'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        sourceConfig?: string(name='SourceConfig', example='{\\"ossAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb3******/ck3n3koe200003h6zf******.zip\\",\\"temporaryOssAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb3******/ck3n3koe200003h6zf******.zip?Expires\\u003d1575******\\u0026OSSAccessKeyId\\u003daS4MT0IYr******\\u0026Signature\\u003dm6cpmcaB8rm3YfbkhTYgb0W******\\"}'),
        versionState?: string(name='VersionState', example='0'),
      }
    ](name='DriverVersionList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ABA0CD1F-4270-42FE-84AD-D612240196F7'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeDriverVersionResponseBody(name='body'),
}

async function queryEdgeDriverVersionWithOptions(request: QueryEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): QueryEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.versionState)) {
    query['VersionState'] = request.versionState;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeDriverVersion(request: QueryEdgeDriverVersionRequest): QueryEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeDriverVersionWithOptions(request, runtime);
}

model QueryEdgeInstanceRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name'),
  pageSize?: int32(name='PageSize', example='15'),
}

model QueryEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    instanceList?: [ 
      {
        bizEnable?: boolean(name='BizEnable', example='true'),
        gmtCreate?: string(name='GmtCreate', example='2019-07-17 14:34:28'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModified?: string(name='GmtModified', example='2019-07-17 14:51:38'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        instanceId?: string(name='InstanceId', example='9iqyQAKDb2aYGVKa****'),
        latestDeploymentStatus?: int32(name='LatestDeploymentStatus', example='1'),
        latestDeploymentType?: string(name='LatestDeploymentType', example='deploy'),
        name?: string(name='Name', example='test_le1'),
        roleArn?: string(name='RoleArn', example='acs:ram::1473922805******:role/aliyuniotaccessingfcrole'),
        roleAttachTime?: string(name='RoleAttachTime', example='2020-02-19 11:25:48'),
        roleAttachTimestamp?: long(name='RoleAttachTimestamp', example='1581912859713'),
        roleName?: string(name='RoleName', example='AliyunIOTAccessingFCRole'),
        spec?: int32(name='Spec', example='30'),
        tags?: string(name='Tags', example='k1:v1,k2:v2'),
        type?: int32(name='Type', example='0'),
      }
    ](name='InstanceList'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='201'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='199BBC5D-FC99-46CB-88E2-FB98E92446FA'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceResponseBody(name='body'),
}

async function queryEdgeInstanceWithOptions(request: QueryEdgeInstanceRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstance(request: QueryEdgeInstanceRequest): QueryEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceWithOptions(request, runtime);
}

model QueryEdgeInstanceChannelRequest {
  channelName?: string(name='ChannelName', example='le_name0'),
  currentPage?: int32(name='CurrentPage', example='1'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
}

model QueryEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    channelList?: {
      channel?: [ 
      {
        channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
        channelName?: string(name='ChannelName', example='le_name0'),
        configList?: {
          config?: [ 
          {
            configId?: string(name='ConfigId', example='5d6016035c1a451daf174b1051******'),
            content?: string(name='Content', example='{\\"protocol\\":\\"TCP\\", \\"ip\\":\\"1.2.3.4\\", \\"port\\":1}'),
            format?: string(name='Format', example='JSON'),
            key?: string(name='Key', example='key1'),
          }
        ](name='Config')
        }(name='ConfigList'),
        gmtCreate?: string(name='GmtCreate', example='2020-03-16 23:06:52'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1584371212000'),
        gmtModified?: string(name='GmtModified', example='2020-03-16 23:06:52'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1584371212000'),
      }
    ](name='Channel')
    }(name='ChannelList'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AA1EF007-0455-43C7-8E03-39D0BA20F4F5'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceChannelResponseBody(name='body'),
}

async function queryEdgeInstanceChannelWithOptions(request: QueryEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelName)) {
    query['ChannelName'] = request.channelName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceChannel(request: QueryEdgeInstanceChannelRequest): QueryEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceChannelWithOptions(request, runtime);
}

model QueryEdgeInstanceDeviceRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceId?: string(name='InstanceId', example='tG7sKuOQ7ylb7qS4****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
}

model QueryEdgeInstanceDeviceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    deviceList?: [ 
      {
        deviceName?: string(name='DeviceName', example='test_tmp_zdy'),
        driverId?: string(name='DriverId', example='44c090ba7b104641a4b9bcf10241****'),
        iotId?: string(name='IotId', example='XSpPdtxzE6ebtCkx****000101'),
        productKey?: string(name='ProductKey', example='a1p5QfE****'),
      }
    ](name='DeviceList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='4'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AC76932E-E0C9-41EE-843D-B1CA3279B053'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceDeviceResponseBody(name='body'),
}

async function queryEdgeInstanceDeviceWithOptions(request: QueryEdgeInstanceDeviceRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceDevice(request: QueryEdgeInstanceDeviceRequest): QueryEdgeInstanceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDeviceWithOptions(request, runtime);
}

model QueryEdgeInstanceDeviceByDriverRequest {
  channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
  currentPage?: int32(name='CurrentPage', example='1'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
}

model QueryEdgeInstanceDeviceByDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    deviceList?: [ 
      {
        iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN******'),
      }
    ](name='DeviceList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C2AEE142-A9ED-46C5-9EA4-BF0817F0D556'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceDeviceByDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceDeviceByDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDeviceByDriverWithOptions(request: QueryEdgeInstanceDeviceByDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDeviceByDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceDeviceByDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceDeviceByDriver(request: QueryEdgeInstanceDeviceByDriverRequest): QueryEdgeInstanceDeviceByDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDeviceByDriverWithOptions(request, runtime);
}

model QueryEdgeInstanceDriverRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryEdgeInstanceDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    driverList?: [ 
      {
        driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc959228****'),
        driverVersion?: string(name='DriverVersion', example='1.0.0'),
        gmtCreate?: string(name='GmtCreate', example='2019-06-26 17:22:25'),
        gmtModified?: string(name='GmtModified', example='2019-06-26 17:22:25'),
        orderId?: string(name='OrderId', example='11123458765423'),
      }
    ](name='DriverList'),
    pageSize?: int32(name='PageSize', example='30'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='77F540BC-A0EF-46A4-ABDE-18644C69AAF5'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDriverWithOptions(request: QueryEdgeInstanceDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceDriver(request: QueryEdgeInstanceDriverRequest): QueryEdgeInstanceDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDriverWithOptions(request, runtime);
}

model QueryEdgeInstanceGatewayRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QueryEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  gatewayList?: [ 
    {
      deviceName?: string(name='DeviceName', example='gateway_01'),
      edgeVersion?: string(name='EdgeVersion', example='v1.0.0'),
      iotId?: string(name='IotId', example='LuD9x5hiRUdVemWU****000101'),
      productKey?: string(name='ProductKey', example='a1mAdeG****'),
    }
  ](name='GatewayList'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceGatewayResponseBody(name='body'),
}

async function queryEdgeInstanceGatewayWithOptions(request: QueryEdgeInstanceGatewayRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceGateway',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceGateway(request: QueryEdgeInstanceGatewayRequest): QueryEdgeInstanceGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceGatewayWithOptions(request, runtime);
}

model QueryEdgeInstanceHistoricDeploymentRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: long(name='EndTime', example='1561543998639'),
  instanceId?: string(name='InstanceId', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
  startTime?: long(name='StartTime', example='1558951998639'),
}

model QueryEdgeInstanceHistoricDeploymentResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    deploymentList?: [ 
      {
        deploymentId?: string(name='DeploymentId', example='e4803e566b424fa68e7f4b1c747c****'),
        description?: string(name='Description', example='deploy_1561694817061'),
        gmtCompleted?: string(name='GmtCompleted', example='2019-06-28 12:07:16'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', example='1581912859713'),
        gmtCreate?: string(name='GmtCreate', example='2019-06-26 18:12:29'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModified?: string(name='GmtModified', example='2019-06-28 12:07:16'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        status?: int32(name='Status', example='2'),
        type?: string(name='Type', example='deploy'),
      }
    ](name='DeploymentList'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='6'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989E4'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceHistoricDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceHistoricDeploymentResponseBody(name='body'),
}

async function queryEdgeInstanceHistoricDeploymentWithOptions(request: QueryEdgeInstanceHistoricDeploymentRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceHistoricDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceHistoricDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceHistoricDeployment(request: QueryEdgeInstanceHistoricDeploymentRequest): QueryEdgeInstanceHistoricDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceHistoricDeploymentWithOptions(request, runtime);
}

model QueryEdgeInstanceMessageRoutingRequest {
  currentPage?: int32(name='CurrentPage'),
  instanceId?: string(name='InstanceId'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
}

model QueryEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    messageRouteList?: {
      messageRoute?: [ 
      {
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        name?: string(name='Name'),
        routeContext?: {
          qos?: string(name='Qos'),
          sourceApplicationName?: string(name='SourceApplicationName'),
          sourceFcFunctionName?: string(name='SourceFcFunctionName'),
          sourceFcServiceName?: string(name='SourceFcServiceName'),
          targetApplicationName?: string(name='TargetApplicationName'),
          targetFcFunctionName?: string(name='TargetFcFunctionName'),
          targetFcServiceName?: string(name='TargetFcServiceName'),
        }(name='RouteContext'),
        routeId?: int32(name='RouteId'),
        sourceData?: string(name='SourceData'),
        sourceType?: string(name='SourceType'),
        targetData?: string(name='TargetData'),
        targetType?: string(name='TargetType'),
        topicFilter?: string(name='TopicFilter'),
      }
    ](name='MessageRoute')
    }(name='MessageRouteList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function queryEdgeInstanceMessageRoutingWithOptions(request: QueryEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceMessageRouting(request: QueryEdgeInstanceMessageRoutingRequest): QueryEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model QueryEdgeInstanceSceneRuleRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceId?: string(name='InstanceId', example='llL44UVXUqb9m5******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryEdgeInstanceSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1582004185000'),
        isExisted?: int32(name='IsExisted', example='1'),
        ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
        ruleName?: string(name='RuleName', example='test'),
        status?: int32(name='Status', example='1'),
      }
    ](name='RuleList'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4C3331B-0FA8-4A05-AFE2-54F698EDEAF7'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceSceneRuleResponseBody(name='body'),
}

async function queryEdgeInstanceSceneRuleWithOptions(request: QueryEdgeInstanceSceneRuleRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceSceneRule(request: QueryEdgeInstanceSceneRuleRequest): QueryEdgeInstanceSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceSceneRuleWithOptions(request, runtime);
}

model QueryImportedDeviceByApplyIdRequest {
  applyId?: long(name='ApplyId', example='1295006'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryImportedDeviceByApplyIdResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceList?: {
    device?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      sn?: string(name='Sn', example='QC4******001'),
    }
  ](name='device')
  }(name='DeviceList'),
  errorMessage?: string(name='ErrorMessage'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  totalPage?: int32(name='TotalPage', example='100'),
}

model QueryImportedDeviceByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryImportedDeviceByApplyIdResponseBody(name='body'),
}

async function queryImportedDeviceByApplyIdWithOptions(request: QueryImportedDeviceByApplyIdRequest, runtime: Util.RuntimeOptions): QueryImportedDeviceByApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryImportedDeviceByApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryImportedDeviceByApplyId(request: QueryImportedDeviceByApplyIdRequest): QueryImportedDeviceByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryImportedDeviceByApplyIdWithOptions(request, runtime);
}

model QueryJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='450407b***'),
}

model QueryJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    description?: string(name='Description', example='jobDescription'),
    jobDocument?: string(name='JobDocument', example='{ "serviceIdentifier": "test_service", "params": { "key1": "value1", "key2": "value2" } } }'),
    jobFile?: {
      fileUrl?: string(name='FileUrl', example='https://iotx-***.oss-cn-shanghai.aliyuncs.com/job***/7u***.sh?Expires=16***&OSSAccessKeyId=LTA***&Signature=TTTejn***'),
      sign?: string(name='Sign', example='TTTejn***'),
      signMethod?: string(name='SignMethod', example='SHA256'),
    }(name='JobFile'),
    jobId?: string(name='JobId', example='450407b***'),
    jobName?: string(name='JobName', example='tes'),
    rolloutConfig?: {
      maximumPerMinute?: int32(name='MaximumPerMinute', example='10'),
      messageQoS?: string(name='MessageQoS', example='Qos1'),
    }(name='RolloutConfig'),
    scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
    status?: string(name='Status', example='CANCELLED'),
    targetConfig?: {
      targetDevices?: {
        targetDevices?: [ 
        {
          deviceName?: string(name='DeviceName', example='a1Ix***'),
          productKey?: string(name='ProductKey', example='nCwfSBzc***'),
        }
      ](name='targetDevices')
      }(name='TargetDevices'),
      targetGroup?: string(name='TargetGroup', example='1234'),
      targetProduct?: string(name='TargetProduct', example='nCwfSBzc***'),
      targetType?: string(name='TargetType', example='DEVICE_LIST'),
    }(name='TargetConfig'),
    timeoutConfig?: {
      inProgressTimeoutInMinutes?: int32(name='InProgressTimeoutInMinutes', example='5'),
    }(name='TimeoutConfig'),
    type?: string(name='Type', example='SET_PROPERTY'),
    utcCreate?: string(name='UtcCreate', example='2020-12-13T04:09:51.000Z'),
    utcModified?: string(name='UtcModified', example='2020-12-13T04:10:00.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A6BEAB33-03E6-4CE0-A94F-9E24C5512BAD'),
  success?: boolean(name='Success', example='true'),
}

model QueryJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryJobResponseBody(name='body'),
}

async function queryJobWithOptions(request: QueryJobRequest, runtime: Util.RuntimeOptions): QueryJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryJob(request: QueryJobRequest): QueryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobWithOptions(request, runtime);
}

model QueryJobStatisticsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='sGWotgRkut***10001'),
}

model QueryJobStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    cancelled?: int32(name='Cancelled', example='3'),
    failed?: int32(name='Failed', example='1'),
    inProgress?: int32(name='InProgress', example='13'),
    queued?: int32(name='Queued', example='2'),
    rejected?: int32(name='Rejected', example='1'),
    sent?: int32(name='Sent', example='3'),
    succeeded?: int32(name='Succeeded', example='22'),
    timeOut?: int32(name='TimeOut', example='5'),
    total?: int32(name='Total', example='50'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model QueryJobStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryJobStatisticsResponseBody(name='body'),
}

async function queryJobStatisticsWithOptions(request: QueryJobStatisticsRequest, runtime: Util.RuntimeOptions): QueryJobStatisticsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryJobStatistics',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryJobStatistics(request: QueryJobStatisticsRequest): QueryJobStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobStatisticsWithOptions(request, runtime);
}

model QueryLicenseDeviceListRequest {
  endTime?: long(name='EndTime', example='1620934297000'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-ws4***'),
  licenseCode?: string(name='LicenseCode', example='720P'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  productKey?: string(name='ProductKey', example='es****'),
  startTime?: long(name='StartTime', example='1620634297000'),
}

model QueryLicenseDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      item?: [ 
      {
        deviceName?: string(name='DeviceName', example='device1'),
        expiryTime?: long(name='ExpiryTime', example='1690934297000'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        licenseCode?: string(name='LicenseCode', example='720P'),
        productKey?: string(name='ProductKey', example='es****'),
        productName?: string(name='ProductName'),
      }
    ](name='item')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model QueryLicenseDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLicenseDeviceListResponseBody(name='body'),
}

async function queryLicenseDeviceListWithOptions(request: QueryLicenseDeviceListRequest, runtime: Util.RuntimeOptions): QueryLicenseDeviceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.pageId)) {
    query['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryLicenseDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLicenseDeviceList(request: QueryLicenseDeviceListRequest): QueryLicenseDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLicenseDeviceListWithOptions(request, runtime);
}

model QueryLoRaJoinPermissionsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QueryLoRaJoinPermissionsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  joinPermissions?: {
    joinPermission?: [ 
    {
      classMode?: string(name='ClassMode', example='A'),
      enabled?: boolean(name='Enabled', example='true'),
      joinPermissionId?: string(name='JoinPermissionId', example='80***'),
      joinPermissionName?: string(name='JoinPermissionName', example='ForTest'),
      joinPermissionType?: string(name='JoinPermissionType', example='LOCAL'),
      ownerAliyunPk?: string(name='OwnerAliyunPk', example='1375364789****'),
    }
  ](name='JoinPermission')
  }(name='JoinPermissions'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryLoRaJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLoRaJoinPermissionsResponseBody(name='body'),
}

async function queryLoRaJoinPermissionsWithOptions(request: QueryLoRaJoinPermissionsRequest, runtime: Util.RuntimeOptions): QueryLoRaJoinPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryLoRaJoinPermissions',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLoRaJoinPermissions(request: QueryLoRaJoinPermissionsRequest): QueryLoRaJoinPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLoRaJoinPermissionsWithOptions(request, runtime);
}

model QueryMessageInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t***'),
  uniMsgId?: string(name='UniMsgId', example='323455***'),
}

model QueryMessageInfoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  message?: {
    generateTime?: long(name='GenerateTime', example='1624419431000'),
    messageContent?: string(name='MessageContent', example='eyJsYXN0VGltZSI6IjIwMjEtMDYtMjQgMTY6Mj**'),
    topicFullName?: string(name='TopicFullName', example='/a1Q5XoY****/device1/user/get'),
    uniMsgId?: string(name='UniMsgId', example='323455***'),
    userProperties?: [ 
      {
        key?: string(name='Key', example='key1'),
        value?: string(name='Value', example='value1'),
      }
    ](name='UserProperties'),
  }(name='Message'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model QueryMessageInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMessageInfoResponseBody(name='body'),
}

async function queryMessageInfoWithOptions(request: QueryMessageInfoRequest, runtime: Util.RuntimeOptions): QueryMessageInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.uniMsgId)) {
    query['UniMsgId'] = request.uniMsgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMessageInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMessageInfo(request: QueryMessageInfoRequest): QueryMessageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMessageInfoWithOptions(request, runtime);
}

model QueryOTAFirmwareRequest {
  firmwareId?: string(name='FirmwareId', example='s8SSHiKjpBfrM3BSN0z803****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QueryOTAFirmwareResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  firmwareInfo?: {
    destVersion?: string(name='DestVersion', example='4.0.0'),
    firmwareDesc?: string(name='FirmwareDesc', example='modified-WiFi-module'),
    firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
    firmwareName?: string(name='FirmwareName', example='t3q5rkNm'),
    firmwareSign?: string(name='FirmwareSign', example='3d04ab6462633508606e5f3daac8****'),
    firmwareSize?: int32(name='FirmwareSize', example='924'),
    firmwareUrl?: string(name='FirmwareUrl', example='https://ota-***.aliyuncs.com/ota/572ef2fd12ca4791a5b21a9eb948****/5E962CF83DB1495E8337E9C8A4D1****.bin?Expires=1577587360&OSSAccessKeyId=cS8uRRy54Rsz****&Signature=farzC8%2FVMN4HYdEtXvdiC2OevH****'),
    moduleName?: string(name='ModuleName', example='WifiConfigModify'),
    multiFiles?: [ 
      {
        fileMd5?: string(name='FileMd5', example='3d04ab6462633508606e5f3d****'),
        name?: string(name='Name', example='firmware1'),
        signValue?: string(name='SignValue', example='3d04ab6462633508606e5f3d****'),
        size?: int32(name='Size', example='200'),
        url?: string(name='Url', example='https://ota-***.aliyuncs.com/ota/572ef2fd12ca4791a5b21a9eb948****/5E962CF83DB1495E8337E9C8A4D1****.bin?Expires=1577587360&OSSAccessKeyId=cS8uRRy54Rsz****&Signature=farzC8%2FVMN4HYdEtXvdiC2OevH****'),
      }
    ](name='MultiFiles'),
    productKey?: string(name='ProductKey', example='a19mzPZ****'),
    productName?: string(name='ProductName', example='MyProduct'),
    signMethod?: string(name='SignMethod', example='MD5'),
    srcVersion?: string(name='SrcVersion', example='1.0.0'),
    status?: int32(name='Status', example='2'),
    type?: int32(name='Type', example='0'),
    udi?: string(name='Udi'),
    utcCreate?: string(name='UtcCreate', example='2019-12-28T02:42:22.000Z'),
    utcModified?: string(name='UtcModified', example='2019-12-28T02:42:41.000Z'),
    verifyProgress?: int32(name='VerifyProgress', example='0'),
  }(name='FirmwareInfo'),
  requestId?: string(name='RequestId', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', example='true'),
}

model QueryOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOTAFirmwareResponseBody(name='body'),
}

async function queryOTAFirmwareWithOptions(request: QueryOTAFirmwareRequest, runtime: Util.RuntimeOptions): QueryOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOTAFirmware(request: QueryOTAFirmwareRequest): QueryOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOTAFirmwareWithOptions(request, runtime);
}

model QueryOTAJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='wahVIzGkCMuAUE2gDERM02****'),
}

model QueryOTAJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    destVersion?: string(name='DestVersion', example='1.0.1'),
    downloadProtocol?: string(name='DownloadProtocol', example='HTTPS'),
    dynamicMode?: int32(name='DynamicMode', example='1'),
    firmwareId?: string(name='FirmwareId', example='UfuxnwygsuSkVE0VCN****0100'),
    grayPercent?: string(name='GrayPercent', example='50.00'),
    groupId?: string(name='GroupId', example='CtjzCkNuOxUR***'),
    groupName?: string(name='GroupName', example='test'),
    jobDesc?: string(name='JobDesc', example='batch upgrade'),
    jobId?: string(name='JobId', example='HvKuBpuk3rdk6E92CP****0200'),
    jobStatus?: string(name='JobStatus', example='IN_PROGRESS'),
    jobType?: string(name='JobType', example='UPGRADE_FIRMWARE'),
    maximumPerMinute?: int32(name='MaximumPerMinute', example='1000'),
    multiModuleMode?: boolean(name='MultiModuleMode', example='false'),
    name?: string(name='Name', example='Firmware2'),
    needConfirm?: boolean(name='NeedConfirm', example='false'),
    needPush?: boolean(name='NeedPush', example='true'),
    overwriteMode?: int32(name='OverwriteMode', example='1'),
    productKey?: string(name='ProductKey', example='a19mzPZ****'),
    retryCount?: int32(name='RetryCount', example='1'),
    retryInterval?: int32(name='RetryInterval', example='60'),
    selectionType?: string(name='SelectionType', example='STATIC'),
    srcVersions?: {
      srcVersion?: [ string ](name='SrcVersion')
    }(name='SrcVersions'),
    tags?: {
      otaTagDTO?: [ 
      {
        key?: string(name='Key', example='key1'),
        value?: string(name='Value', example='value1'),
      }
    ](name='OtaTagDTO')
    }(name='Tags'),
    targetSelection?: string(name='TargetSelection', example='SPECIFIC'),
    timeoutInMinutes?: int32(name='TimeoutInMinutes', example='5'),
    utcCreate?: string(name='UtcCreate', example='2019-12-28T02:43:10.000Z'),
    utcEndTime?: string(name='UtcEndTime', example='2019-12-29T02:43:10.000Z'),
    utcModified?: string(name='UtcModified', example='2019-12-28T02:43:10.000Z'),
    utcScheduleFinishTime?: string(name='UtcScheduleFinishTime', example='2019-12-30T02:43:10.000Z'),
    utcScheduleTime?: string(name='UtcScheduleTime', example='2019-12-29T02:43:10.000Z'),
    utcStartTime?: string(name='UtcStartTime', example='2019-12-28T02:43:10.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='30F1BB8D-EDBF-44FD-BBC0-BE97DEA73991'),
  success?: boolean(name='Success', example='true'),
}

model QueryOTAJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOTAJobResponseBody(name='body'),
}

async function queryOTAJobWithOptions(request: QueryOTAJobRequest, runtime: Util.RuntimeOptions): QueryOTAJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOTAJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOTAJob(request: QueryOTAJobRequest): QueryOTAJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOTAJobWithOptions(request, runtime);
}

model QueryPageByApplyIdRequest {
  applyId?: long(name='ApplyId', example='1295006'),
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryPageByApplyIdResponseBody = {
  applyDeviceList?: {
    applyDeviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId', example='gQG2GJ2y10m6hIk8****'),
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='SkfeXXKrTgp1DbDxYr74mfJ5cnui****'),
      iotId?: string(name='IotId', example='vWxNur6BUApsqjv9****000100'),
    }
  ](name='ApplyDeviceInfo')
  }(name='ApplyDeviceList'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='2'),
}

model QueryPageByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPageByApplyIdResponseBody(name='body'),
}

async function queryPageByApplyIdWithOptions(request: QueryPageByApplyIdRequest, runtime: Util.RuntimeOptions): QueryPageByApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPageByApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPageByApplyId(request: QueryPageByApplyIdRequest): QueryPageByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPageByApplyIdWithOptions(request, runtime);
}

model QueryProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior'),
    authType?: string(name='AuthType', example='secret'),
    categoryKey?: string(name='CategoryKey', example='Lighting'),
    categoryName?: string(name='CategoryName'),
    dataFormat?: int32(name='DataFormat', example='1'),
    description?: string(name='Description'),
    deviceCount?: int32(name='DeviceCount', example='0'),
    gmtCreate?: long(name='GmtCreate', example='1581595942000'),
    id2?: boolean(name='Id2', example='false'),
    netType?: int32(name='NetType', example='3'),
    nodeType?: int32(name='NodeType', example='0'),
    owner?: boolean(name='Owner', example='true'),
    productKey?: string(name='ProductKey', example='a1T27vz****'),
    productName?: string(name='ProductName'),
    productSecret?: string(name='ProductSecret', example='U5tW7i44uilc****'),
    productStatus?: string(name='ProductStatus', example='DEVELOPMENT_STATUS'),
    protocolType?: string(name='ProtocolType', example='modbus'),
    validateType?: int32(name='ValidateType', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductResponseBody(name='body'),
}

async function queryProductWithOptions(request: QueryProductRequest, runtime: Util.RuntimeOptions): QueryProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProduct(request: QueryProductRequest): QueryProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductWithOptions(request, runtime);
}

model QueryProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a2YwD23****'),
}

model QueryProductCertInfoResponseBody = {
  code?: string(name='Code', example='MissingProductKey'),
  errorMessage?: string(name='ErrorMessage', example='ProductKey is mandatory for this action.'),
  productCertInfo?: {
    issueModel?: int32(name='IssueModel', example='1'),
  }(name='ProductCertInfo'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductCertInfoResponseBody(name='body'),
}

async function queryProductCertInfoWithOptions(request: QueryProductCertInfoRequest, runtime: Util.RuntimeOptions): QueryProductCertInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductCertInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProductCertInfo(request: QueryProductCertInfoRequest): QueryProductCertInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductCertInfoWithOptions(request, runtime);
}

model QueryProductListRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', example='iothub_senior'),
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='2'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxazb4ph****'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    list?: {
      productInfo?: [ 
      {
        authType?: string(name='AuthType', example='secret'),
        dataFormat?: int32(name='DataFormat', example='1'),
        description?: string(name='Description', example='This is a test product.'),
        deviceCount?: int32(name='DeviceCount', example='128'),
        gmtCreate?: long(name='GmtCreate', example='1581595942000'),
        nodeType?: int32(name='NodeType', example='0'),
        productKey?: string(name='ProductKey', example='a1T27vz****'),
        productName?: string(name='ProductName'),
      }
    ](name='ProductInfo')
    }(name='List'),
    pageCount?: int32(name='PageCount', example='92'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='184'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='4B4ECF2C-6222-42EC-A4B5-C12202E71CEA'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductListWithOptions(request: QueryProductListRequest, runtime: Util.RuntimeOptions): QueryProductListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunCommodityCode)) {
    query['AliyunCommodityCode'] = request.aliyunCommodityCode;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductListWithOptions(request, runtime);
}

model QueryProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='HMyB*******'),
}

model QueryProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    productTopicInfo?: [ 
    {
      desc?: string(name='Desc', example='topicDesc'),
      id?: string(name='Id', example='821****'),
      operation?: string(name='Operation', example='1'),
      productKey?: string(name='ProductKey', example='HMyB***'),
      topicShortName?: string(name='TopicShortName', example='/HMyB***/${deviceName}/user/get'),
    }
  ](name='ProductTopicInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B953EAFF-CFF6-4FF8-BC94-8B89F018E4DD'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductTopicResponseBody(name='body'),
}

async function queryProductTopicWithOptions(request: QueryProductTopicRequest, runtime: Util.RuntimeOptions): QueryProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProductTopic(request: QueryProductTopicRequest): QueryProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductTopicWithOptions(request, runtime);
}

model QueryProjectShareDeviceListRequest {
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryProjectShareDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        sharable?: long(name='Sharable', example='1'),
      }
    ](name='items')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model QueryProjectShareDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProjectShareDeviceListResponseBody(name='body'),
}

async function queryProjectShareDeviceListWithOptions(request: QueryProjectShareDeviceListRequest, runtime: Util.RuntimeOptions): QueryProjectShareDeviceListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryProjectShareDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProjectShareDeviceList(request: QueryProjectShareDeviceListRequest): QueryProjectShareDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProjectShareDeviceListWithOptions(request, runtime);
}

model QuerySceneRuleRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  ruleName?: string(name='RuleName', example='test'),
}

model QuerySceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1582004185000'),
        gmtModified?: long(name='GmtModified', example='1582098176000'),
        ruleDescription?: string(name='RuleDescription'),
        ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
        ruleName?: string(name='RuleName', example='test'),
        ruleStatus?: int32(name='RuleStatus', example='1'),
      }
    ](name='RuleList'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4C3331B-0FA8-4A05-AFE2-54F698EDEAF7'),
  success?: boolean(name='Success', example='true'),
}

model QuerySceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneRuleResponseBody(name='body'),
}

async function querySceneRuleWithOptions(request: QuerySceneRuleRequest, runtime: Util.RuntimeOptions): QuerySceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneRule(request: QuerySceneRuleRequest): QuerySceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneRuleWithOptions(request, runtime);
}

model QuerySchedulePeriodListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model QuerySchedulePeriodListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        description?: string(name='Description', example='test'),
        endTime?: string(name='EndTime', example='00:10'),
        periodCode?: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********'),
        soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
        startTime?: string(name='StartTime', example='00:00'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySchedulePeriodListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySchedulePeriodListResponseBody(name='body'),
}

async function querySchedulePeriodListWithOptions(request: QuerySchedulePeriodListRequest, runtime: Util.RuntimeOptions): QuerySchedulePeriodListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySchedulePeriodList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySchedulePeriodList(request: QuerySchedulePeriodListRequest): QuerySchedulePeriodListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySchedulePeriodListWithOptions(request, runtime);
}

model QueryShareTaskDeviceListRequest {
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  shareTaskId?: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********'),
}

model QueryShareTaskDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        gmtAdded?: long(name='GmtAdded', example='1620624606000'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='items')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryShareTaskDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryShareTaskDeviceListResponseBody(name='body'),
}

async function queryShareTaskDeviceListWithOptions(request: QueryShareTaskDeviceListRequest, runtime: Util.RuntimeOptions): QueryShareTaskDeviceListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shareTaskId)) {
    body['ShareTaskId'] = request.shareTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryShareTaskDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryShareTaskDeviceList(request: QueryShareTaskDeviceListRequest): QueryShareTaskDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryShareTaskDeviceListWithOptions(request, runtime);
}

model QuerySolutionDeviceGroupPageRequest {
  fuzzyGroupName?: string(name='FuzzyGroupName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
}

model QuerySolutionDeviceGroupPageResponseBody = {
  code?: string(name='Code', example='iot.tcloud.ProjectNotFound'),
  data?: {
    list?: {
      itemName?: [ 
      {
        deviceCount?: long(name='DeviceCount', example='100'),
        gmtCreate?: long(name='GmtCreate', example='1356565656'),
        gmtModified?: long(name='GmtModified', example='1357865658'),
        groupDesc?: string(name='GroupDesc', example='description'),
        groupId?: string(name='GroupId', example='4de2c367****8c585e5992**'),
        groupName?: string(name='GroupName', example='test***'),
      }
    ](name='itemName')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='project not found'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySolutionDeviceGroupPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySolutionDeviceGroupPageResponseBody(name='body'),
}

async function querySolutionDeviceGroupPageWithOptions(request: QuerySolutionDeviceGroupPageRequest, runtime: Util.RuntimeOptions): QuerySolutionDeviceGroupPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fuzzyGroupName)) {
    query['FuzzyGroupName'] = request.fuzzyGroupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    query['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySolutionDeviceGroupPage',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySolutionDeviceGroupPage(request: QuerySolutionDeviceGroupPageRequest): QuerySolutionDeviceGroupPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySolutionDeviceGroupPageWithOptions(request, runtime);
}

model QuerySoundCodeLabelBatchFailedResultRequest {
  batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QuerySoundCodeLabelBatchFailedResultResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    items?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='sound code label exist'),
      label?: string(name='Label', example='test'),
      resultCode?: string(name='ResultCode', example='7541'),
    }
  ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelBatchFailedResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeLabelBatchFailedResultResponseBody(name='body'),
}

async function querySoundCodeLabelBatchFailedResultWithOptions(request: QuerySoundCodeLabelBatchFailedResultRequest, runtime: Util.RuntimeOptions): QuerySoundCodeLabelBatchFailedResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchCode)) {
    body['BatchCode'] = request.batchCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeLabelBatchFailedResult',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeLabelBatchFailedResult(request: QuerySoundCodeLabelBatchFailedResultRequest): QuerySoundCodeLabelBatchFailedResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeLabelBatchFailedResultWithOptions(request, runtime);
}

model QuerySoundCodeLabelBatchListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model QuerySoundCodeLabelBatchListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
        description?: string(name='Description', example='test'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        status?: string(name='Status', example='RUNNING'),
        successNum?: int32(name='SuccessNum', example='1'),
        total?: int32(name='Total', example='20'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelBatchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeLabelBatchListResponseBody(name='body'),
}

async function querySoundCodeLabelBatchListWithOptions(request: QuerySoundCodeLabelBatchListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeLabelBatchListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeLabelBatchList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeLabelBatchList(request: QuerySoundCodeLabelBatchListRequest): QuerySoundCodeLabelBatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeLabelBatchListWithOptions(request, runtime);
}

model QuerySoundCodeLabelListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model QuerySoundCodeLabelListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        label?: string(name='Label', example='test'),
        soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeLabelListResponseBody(name='body'),
}

async function querySoundCodeLabelListWithOptions(request: QuerySoundCodeLabelListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeLabelListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeLabelList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeLabelList(request: QuerySoundCodeLabelListRequest): QuerySoundCodeLabelListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeLabelListWithOptions(request, runtime);
}

model QuerySoundCodeListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QuerySoundCodeListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        duration?: int32(name='Duration', example='2'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        name?: string(name='Name', example='test1'),
        openType?: string(name='OpenType', example='OPEN'),
        soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
        soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeListResponseBody(name='body'),
}

async function querySoundCodeListWithOptions(request: QuerySoundCodeListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeList(request: QuerySoundCodeListRequest): QuerySoundCodeListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeListWithOptions(request, runtime);
}

model QuerySoundCodeScheduleListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='20'),
  pageSize?: int32(name='PageSize', example='1'),
}

model QuerySoundCodeScheduleListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        description?: string(name='Description', example='test'),
        endDate?: string(name='EndDate', example='2022-03-28'),
        endTime?: string(name='EndTime', example='23:59'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        name?: string(name='Name', example='test'),
        openType?: string(name='OpenType', example='INNER'),
        scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
        startDate?: string(name='StartDate', example='2022-03-28'),
        startTime?: string(name='StartTime', example='00:00'),
        status?: string(name='Status', example='WORKING'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeScheduleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeScheduleListResponseBody(name='body'),
}

async function querySoundCodeScheduleListWithOptions(request: QuerySoundCodeScheduleListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeScheduleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeScheduleList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeScheduleList(request: QuerySoundCodeScheduleListRequest): QuerySoundCodeScheduleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeScheduleListWithOptions(request, runtime);
}

model QuerySpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
}

model QuerySpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    audioFormat?: string(name='AudioFormat', example='wav'),
    bizCode?: string(name='BizCode', example='identifying'),
    enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
    soundCodeConfig?: {
      additionalDuration?: int32(name='AdditionalDuration', example='3'),
      soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
    }(name='SoundCodeConfig'),
    speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
    speechRate?: int32(name='SpeechRate', example='0'),
    speechType?: string(name='SpeechType', example='custom'),
    text?: string(name='Text', example='test'),
    voice?: string(name='Voice', example='Siyue'),
    volume?: int32(name='Volume', example='50'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechResponseBody(name='body'),
}

async function querySpeechWithOptions(request: QuerySpeechRequest, runtime: Util.RuntimeOptions): QuerySpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.speechCode)) {
    body['SpeechCode'] = request.speechCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeech(request: QuerySpeechRequest): QuerySpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechWithOptions(request, runtime);
}

model QuerySpeechDeviceRequest {
  availableSpace?: string(name='AvailableSpace', example='500'),
  availableSpaceScope?: string(name='AvailableSpaceScope', example='smaller'),
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
}

model QuerySpeechDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      items?: [ 
      {
        availableSpace?: float(name='AvailableSpace', example='200'),
        deviceName?: string(name='DeviceName', example='test'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechDeviceResponseBody(name='body'),
}

async function querySpeechDeviceWithOptions(request: QuerySpeechDeviceRequest, runtime: Util.RuntimeOptions): QuerySpeechDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.availableSpace)) {
    body['AvailableSpace'] = request.availableSpace;
  }
  if (!Util.isUnset(request.availableSpaceScope)) {
    body['AvailableSpaceScope'] = request.availableSpaceScope;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechDevice(request: QuerySpeechDeviceRequest): QuerySpeechDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechDeviceWithOptions(request, runtime);
}

model QuerySpeechLicenseDeviceListRequest {
  checkGroupId?: string(name='CheckGroupId', example='4de2c367****8c585e5992**'),
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  licenseStatusList?: [ string ](name='LicenseStatusList', example='NORMAL'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QuerySpeechLicenseDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      item?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        deviceStatus?: string(name='DeviceStatus', example='ONLINE'),
        expiryTime?: long(name='ExpiryTime', example='1620624606000'),
        inSpecifiedGroup?: boolean(name='InSpecifiedGroup', example='true'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        licenseStatus?: string(name='LicenseStatus', example='NORMAL'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        productName?: string(name='ProductName', example='test'),
      }
    ](name='item')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechLicenseDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechLicenseDeviceListResponseBody(name='body'),
}

async function querySpeechLicenseDeviceListWithOptions(request: QuerySpeechLicenseDeviceListRequest, runtime: Util.RuntimeOptions): QuerySpeechLicenseDeviceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    query['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkGroupId)) {
    body['CheckGroupId'] = request.checkGroupId;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.licenseStatusList)) {
    body['LicenseStatusList'] = request.licenseStatusList;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechLicenseDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechLicenseDeviceList(request: QuerySpeechLicenseDeviceListRequest): QuerySpeechLicenseDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechLicenseDeviceListWithOptions(request, runtime);
}

model QuerySpeechListRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
}

model QuerySpeechListResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='identifying'),
        speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode', example='identifying'),
            speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
            text?: string(name='Text', example='test'),
            voice?: string(name='Voice', example='Siyue'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType', example='custom'),
        text?: string(name='Text', example='test'),
        voice?: string(name='Voice', example='Siyue'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechListResponseBody(name='body'),
}

async function querySpeechListWithOptions(request: QuerySpeechListRequest, runtime: Util.RuntimeOptions): QuerySpeechListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechList(request: QuerySpeechListRequest): QuerySpeechListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechListWithOptions(request, runtime);
}

model QuerySpeechPushJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****'),
  jobCode?: string(name='JobCode', example='tBUm***********************QPGT'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='0Ykj************************Av0I'),
  pushMode?: string(name='PushMode', example='ALL'),
  statusList?: [ string ](name='StatusList', example='RUNNING'),
}

model QuerySpeechPushJobResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        code?: string(name='Code', example='tBUm***********************QPGT'),
        createdTime?: long(name='CreatedTime', example='1620634297000'),
        deviceName?: string(name='DeviceName', example='test'),
        expiredTime?: long(name='ExpiredTime', example='1620634297000'),
        failDeviceNum?: int32(name='FailDeviceNum', example='1'),
        groupId?: string(name='GroupId', example='test_group'),
        groupName?: string(name='GroupName'),
        iotId?: string(name='IotId', example='0iOf*****************n001'),
        productKey?: string(name='ProductKey', example='den0ZLt****'),
        pushMode?: string(name='PushMode', example='ALL'),
        runningDeviceNum?: int32(name='RunningDeviceNum', example='2'),
        speechNum?: int32(name='SpeechNum', example='1'),
        speechStatus?: boolean(name='SpeechStatus', example='true'),
        status?: string(name='Status', example='RUNNING'),
        successDeviceNum?: int32(name='SuccessDeviceNum', example='1'),
        totalDeviceNum?: int32(name='TotalDeviceNum', example='3'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechPushJobResponseBody(name='body'),
}

async function querySpeechPushJobWithOptions(request: QuerySpeechPushJobRequest, runtime: Util.RuntimeOptions): QuerySpeechPushJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobCode)) {
    query['JobCode'] = request.jobCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.pushMode)) {
    body['PushMode'] = request.pushMode;
  }
  if (!Util.isUnset(request.statusList)) {
    body['StatusList'] = request.statusList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechPushJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechPushJob(request: QuerySpeechPushJobRequest): QuerySpeechPushJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechPushJobWithOptions(request, runtime);
}

model QuerySpeechPushJobDeviceRequest {
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****'),
  jobCode?: string(name='JobCode', example='tBUm***********************QPGT'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='SUCCESS'),
}

model QuerySpeechPushJobDeviceResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        errorCode?: string(name='ErrorCode', example='2'),
        errorMessage?: string(name='ErrorMessage', example='device storage limited'),
        gmtModified?: long(name='GmtModified', example='1620624606000'),
        status?: string(name='Status', example='SUCCESS'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechPushJobDeviceResponseBody(name='body'),
}

async function querySpeechPushJobDeviceWithOptions(request: QuerySpeechPushJobDeviceRequest, runtime: Util.RuntimeOptions): QuerySpeechPushJobDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobCode)) {
    body['JobCode'] = request.jobCode;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechPushJobDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechPushJobDevice(request: QuerySpeechPushJobDeviceRequest): QuerySpeechPushJobDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechPushJobDeviceWithOptions(request, runtime);
}

model QuerySpeechPushJobSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****'),
  jobCode?: string(name='JobCode', example='0Ykj************************Av0I'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QuerySpeechPushJobSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        bizCode?: string(name='BizCode', example='ZFDZ'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode', example='SYS_TONE_0'),
            text?: string(name='Text', example='1'),
            voice?: string(name='Voice', example='Xiaoyun'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType', example='CUSTOM'),
        text?: string(name='Text'),
        voice?: string(name='Voice', example='Xiaoyun'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechPushJobSpeechResponseBody(name='body'),
}

async function querySpeechPushJobSpeechWithOptions(request: QuerySpeechPushJobSpeechRequest, runtime: Util.RuntimeOptions): QuerySpeechPushJobSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobCode)) {
    body['JobCode'] = request.jobCode;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechPushJobSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechPushJobSpeech(request: QuerySpeechPushJobSpeechRequest): QuerySpeechPushJobSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechPushJobSpeechWithOptions(request, runtime);
}

model QueryStudioAppDomainListOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model QueryStudioAppDomainListOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      domainInfo?: [ 
      {
        appId?: string(name='AppId', example='a12*******'),
        gmtCreate?: string(name='GmtCreate', example='1619598445000'),
        gmtModified?: string(name='GmtModified', example='1619598445000'),
        host?: string(name='Host', example='example.com'),
        id?: int32(name='Id', example='1548'),
        isBeian?: string(name='IsBeian', example='YES'),
        projectId?: string(name='ProjectId', example='a123********'),
        protocol?: string(name='Protocol', example='https'),
        tenantId?: string(name='TenantId', example='C70B541046F64EAAB*********'),
      }
    ](name='DomainInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppDomainListOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioAppDomainListOpenResponseBody(name='body'),
}

async function queryStudioAppDomainListOpenWithOptions(request: QueryStudioAppDomainListOpenRequest, runtime: Util.RuntimeOptions): QueryStudioAppDomainListOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioAppDomainListOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioAppDomainListOpen(request: QueryStudioAppDomainListOpenRequest): QueryStudioAppDomainListOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioAppDomainListOpenWithOptions(request, runtime);
}

model QueryStudioAppListRequest {
  fuzzyName?: string(name='FuzzyName', example='test1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  projectId?: string(name='ProjectId', example='a123********'),
  types?: [ string ](name='Types', example='["webApp", "mobileApp"]'),
}

model QueryStudioAppListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      appInfo?: [ 
      {
        appId?: string(name='AppId', example='a123********'),
        appKey?: string(name='AppKey', example='322******'),
        appSecret?: string(name='AppSecret', example='a605*******'),
        description?: string(name='Description', example='This is a test.'),
        gmtCreate?: string(name='GmtCreate', example='2020-12-25 16:20:53'),
        gmtModified?: string(name='GmtModified', example='2021-04-10 15:06:23'),
        gmtRelease?: string(name='GmtRelease', example='2021-04-15 19:11:32'),
        name?: string(name='Name', example='test1'),
        projectId?: string(name='ProjectId', example='a123********'),
        type?: string(name='Type', example='webApp'),
      }
    ](name='AppInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
    totalPage?: int32(name='TotalPage', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioAppListResponseBody(name='body'),
}

async function queryStudioAppListWithOptions(request: QueryStudioAppListRequest, runtime: Util.RuntimeOptions): QueryStudioAppListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fuzzyName)) {
    body['FuzzyName'] = request.fuzzyName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.types)) {
    body['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioAppList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioAppList(request: QueryStudioAppListRequest): QueryStudioAppListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioAppListWithOptions(request, runtime);
}

model QueryStudioAppPageListOpenRequest {
  appId?: string(name='AppId', example='a12*******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  isRelease?: boolean(name='IsRelease', example='false'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model QueryStudioAppPageListOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      pageInfo?: [ 
      {
        gmtCreate?: string(name='GmtCreate', example='2020-12-25T16:21Z'),
        gmtModified?: string(name='GmtModified', example='2021-05-08T17:18Z'),
        id?: int32(name='Id', example='49739'),
        isHidden?: int32(name='IsHidden', example='1'),
        isHome?: int32(name='IsHome', example='1'),
        isLoginPage?: int32(name='IsLoginPage', example='1'),
        name?: string(name='Name', example='test1'),
        pageId?: string(name='PageId', example='44920'),
        path?: string(name='Path', example='/page/44920'),
      }
    ](name='PageInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppPageListOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioAppPageListOpenResponseBody(name='body'),
}

async function queryStudioAppPageListOpenWithOptions(request: QueryStudioAppPageListOpenRequest, runtime: Util.RuntimeOptions): QueryStudioAppPageListOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isRelease)) {
    body['IsRelease'] = request.isRelease;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioAppPageListOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioAppPageListOpen(request: QueryStudioAppPageListOpenRequest): QueryStudioAppPageListOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioAppPageListOpenWithOptions(request, runtime);
}

model QueryStudioProjectListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test1'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QueryStudioProjectListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      projectInfo?: [ 
      {
        description?: string(name='Description', example='This is a test project.'),
        gmtCreate?: long(name='GmtCreate', example='1611819839000'),
        gmtModified?: long(name='GmtModified', example='1611819860000'),
        name?: string(name='Name', example='test1'),
        projectId?: string(name='ProjectId', example='a123********'),
      }
    ](name='ProjectInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
    totalPage?: int32(name='TotalPage', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioProjectListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioProjectListResponseBody(name='body'),
}

async function queryStudioProjectListWithOptions(request: QueryStudioProjectListRequest, runtime: Util.RuntimeOptions): QueryStudioProjectListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioProjectList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioProjectList(request: QueryStudioProjectListRequest): QueryStudioProjectListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioProjectListWithOptions(request, runtime);
}

model QuerySubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
  type?: string(name='Type', example='AMQP'),
}

model QuerySubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  consumerGroupIds?: [ string ](name='ConsumerGroupIds'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', example='true'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', example='true'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', example='true'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', example='true'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', example='true'),
  mnsConfiguration?: string(name='MnsConfiguration', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }'),
  otaEventFlag?: boolean(name='OtaEventFlag', example='true'),
  otaJobFlag?: boolean(name='OtaJobFlag', example='true'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', example='true'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  subscribeFlags?: string(name='SubscribeFlags'),
  success?: boolean(name='Success', example='true'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', example='true'),
  type?: string(name='Type', example='AMQP'),
}

model QuerySubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySubscribeRelationResponseBody(name='body'),
}

async function querySubscribeRelationWithOptions(request: QuerySubscribeRelationRequest, runtime: Util.RuntimeOptions): QuerySubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySubscribeRelation(request: QuerySubscribeRelationRequest): QuerySubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubscribeRelationWithOptions(request, runtime);
}

model QuerySummarySceneRuleLogRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: int32(name='EndTime', example='1582373873'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  ruleId?: string(name='RuleId', example='fec565038d7544978d9aed5c1a******'),
  startTime?: int32(name='StartTime', example='1582372973'),
  status?: string(name='Status', example='2'),
}

model QuerySummarySceneRuleLogResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    logList?: {
      logInfo?: [ 
      {
        logTime?: int32(name='LogTime', example='1582373706'),
        result?: string(name='Result', example='true'),
        traceId?: string(name='TraceId', example='a6a5b5df1582373508176121******'),
      }
    ](name='LogInfo')
    }(name='LogList'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='3'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='2279A994-3E7D-4EC6-BD17-FA0D0EC2EC77'),
  success?: boolean(name='Success', example='true'),
}

model QuerySummarySceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySummarySceneRuleLogResponseBody(name='body'),
}

async function querySummarySceneRuleLogWithOptions(request: QuerySummarySceneRuleLogRequest, runtime: Util.RuntimeOptions): QuerySummarySceneRuleLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySummarySceneRuleLog',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySummarySceneRuleLog(request: QuerySummarySceneRuleLogRequest): QuerySummarySceneRuleLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySummarySceneRuleLogWithOptions(request, runtime);
}

model QuerySuperDeviceGroupRequest {
  groupId?: string(name='GroupId', example='DMoI2Kby5m62****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QuerySuperDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', example='A test'),
      groupId?: string(name='GroupId', example='tDQvBJqbUyHskDse'),
      groupName?: string(name='GroupName', example='IOTTEST'),
    }
  ](name='GroupInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='7411716B-A488-4EEB-9AA0-6DB05AD2491F'),
  success?: boolean(name='Success', example='true'),
}

model QuerySuperDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySuperDeviceGroupResponseBody(name='body'),
}

async function querySuperDeviceGroupWithOptions(request: QuerySuperDeviceGroupRequest, runtime: Util.RuntimeOptions): QuerySuperDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySuperDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySuperDeviceGroup(request: QuerySuperDeviceGroupRequest): QuerySuperDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySuperDeviceGroupWithOptions(request, runtime);
}

model QueryTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  taskId?: string(name='TaskId', example='MSnT9***q010101'),
}

model QueryTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='mydevice'),
    iotId?: string(name='IotId', example='BDjhI****01'),
    jobId?: string(name='JobId', example='sGWotgRkutxX*****'),
    jobName?: string(name='JobName', example='MyTestJobIax6Eq'),
    message?: string(name='Message', example='this is message about task execution'),
    productKey?: string(name='ProductKey', example='a1S****'),
    progress?: string(name='Progress', example='80'),
    status?: string(name='Status', example='SUCCEEDED'),
    statusDetail?: string(name='StatusDetail', example='{ "msg":"this is message reported by device" }'),
    taskId?: string(name='TaskId', example='MSnT9***q010101'),
    utcModified?: string(name='UtcModified', example='2019-05-21T13:03:56.000Z'),
    utcQueueTime?: string(name='UtcQueueTime', example='2019-05-21T13:03:53.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model QueryTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskResponseBody(name='body'),
}

async function queryTaskWithOptions(request: QueryTaskRequest, runtime: Util.RuntimeOptions): QueryTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTask(request: QueryTaskRequest): QueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskWithOptions(request, runtime);
}

model QueryThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd****'),
}

model QueryThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelResponseBody(name='body'),
}

async function queryThingModelWithOptions(request: QueryThingModelRequest, runtime: Util.RuntimeOptions): QueryThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryThingModel(request: QueryThingModelRequest): QueryThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelWithOptions(request, runtime);
}

model QueryThingModelExtendConfigRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0'),
  productKey?: string(name='ProductKey', example='a1T27vz****'),
  resourceGroupId?: string(name='ResourceGroupId', example='123***'),
}

model QueryThingModelExtendConfigResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    configuration?: string(name='Configuration', example='{\\"profile\\":{\\"productKey\\":\\"a114x******\\"},\\"properties\\":[{\\"originalDataType\\":{\\"specs\\":{\\"registerCount\\":1,\\"reverseRegister\\":0,\\"swap16\\":0},\\"type\\":\\"bool\\"},\\"identifier\\":\\"WakeUpData\\",\\"registerAddress\\":\\"0x04\\",\\"scaling\\":1,\\"writeFunctionCode\\":0,\\"operateType\\":\\"inputStatus\\",\\"pollingTime\\":1000,\\"trigger\\":1}]}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelExtendConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelExtendConfigResponseBody(name='body'),
}

async function queryThingModelExtendConfigWithOptions(request: QueryThingModelExtendConfigRequest, runtime: Util.RuntimeOptions): QueryThingModelExtendConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModelExtendConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryThingModelExtendConfig(request: QueryThingModelExtendConfigRequest): QueryThingModelExtendConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelExtendConfigWithOptions(request, runtime);
}

model QueryThingModelExtendConfigPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryThingModelExtendConfigPublishedResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    configuration?: string(name='Configuration', example='{\\"profile\\":{\\"productKey\\":\\"a114x******\\"},\\"properties\\":[{\\"originalDataType\\":{\\"specs\\":{\\"registerCount\\":1,\\"reverseRegister\\":0,\\"swap16\\":0},\\"type\\":\\"bool\\"},\\"identifier\\":\\"WakeUpData\\",\\"registerAddress\\":\\"0x04\\",\\"scaling\\":1,\\"writeFunctionCode\\":0,\\"operateType\\":\\"inputStatus\\",\\"pollingTime\\":1000,\\"trigger\\":1}]}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelExtendConfigPublishedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelExtendConfigPublishedResponseBody(name='body'),
}

async function queryThingModelExtendConfigPublishedWithOptions(request: QueryThingModelExtendConfigPublishedRequest, runtime: Util.RuntimeOptions): QueryThingModelExtendConfigPublishedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModelExtendConfigPublished',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryThingModelExtendConfigPublished(request: QueryThingModelExtendConfigPublishedRequest): QueryThingModelExtendConfigPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelExtendConfigPublishedWithOptions(request, runtime);
}

model QueryThingModelPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', example='v1.0.0'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd***'),
}

model QueryThingModelPublishedResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    thingModelJson?: string(name='ThingModelJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model QueryThingModelPublishedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelPublishedResponseBody(name='body'),
}

async function queryThingModelPublishedWithOptions(request: QueryThingModelPublishedRequest, runtime: Util.RuntimeOptions): QueryThingModelPublishedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModelPublished',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryThingModelPublished(request: QueryThingModelPublishedRequest): QueryThingModelPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelPublishedWithOptions(request, runtime);
}

model QueryTopicReverseRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  topic?: string(name='Topic', example='/x7aWKW9***/testDataToDataHub/user/update'),
}

model QueryTopicReverseRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC"'),
  srcTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='SrcTopics'),
  success?: boolean(name='Success', example='true'),
}

model QueryTopicReverseRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopicReverseRouteTableResponseBody(name='body'),
}

async function queryTopicReverseRouteTableWithOptions(request: QueryTopicReverseRouteTableRequest, runtime: Util.RuntimeOptions): QueryTopicReverseRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopicReverseRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopicReverseRouteTable(request: QueryTopicReverseRouteTableRequest): QueryTopicReverseRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopicReverseRouteTableWithOptions(request, runtime);
}

model QueryTopicRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  topic?: string(name='Topic', example='/x7aWKW94bb8/testDataToDataHub/user/update'),
}

model QueryTopicRouteTableResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dstTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='DstTopics'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model QueryTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopicRouteTableResponseBody(name='body'),
}

async function queryTopicRouteTableWithOptions(request: QueryTopicRouteTableRequest, runtime: Util.RuntimeOptions): QueryTopicRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopicRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopicRouteTable(request: QueryTopicRouteTableRequest): QueryTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopicRouteTableWithOptions(request, runtime);
}

model QueryVehicleDeviceRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  productKey?: string(name='ProductKey', example='a1Bw****'),
}

model QueryVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    authCode?: string(name='AuthCode', example='******'),
    city?: string(name='City'),
    createTime?: long(name='CreateTime', example='1557062301656'),
    deviceId?: string(name='DeviceId', example='di0001'),
    deviceModel?: string(name='DeviceModel', example='dm0001'),
    deviceName?: string(name='DeviceName', example='light'),
    iotId?: string(name='IotId', example='dm0001'),
    manufacturer?: string(name='Manufacturer', example='mf0001'),
    modifiedTime?: long(name='ModifiedTime', example='1657062301656'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    province?: string(name='Province'),
    registerTime?: long(name='RegisterTime', example='1517062301656'),
    status?: string(name='Status', example='create'),
    vehicleColour?: string(name='VehicleColour', example='1'),
    vehicleNumber?: string(name='VehicleNumber'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model QueryVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryVehicleDeviceResponseBody(name='body'),
}

async function queryVehicleDeviceWithOptions(request: QueryVehicleDeviceRequest, runtime: Util.RuntimeOptions): QueryVehicleDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryVehicleDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryVehicleDevice(request: QueryVehicleDeviceRequest): QueryVehicleDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVehicleDeviceWithOptions(request, runtime);
}

model RRpcRequest {
  contentType?: string(name='ContentType'),
  deviceName?: string(name='DeviceName', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='aldfeSe****'),
  requestBase64Byte?: string(name='RequestBase64Byte', example='dGhpcyBpcyBhbiBleGFtcGxl'),
  timeout?: int32(name='Timeout', example='1000'),
  topic?: string(name='Topic', example='/a1uZfYb****/A_Vol****/user/update'),
}

model RRpcResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId', example='889455942124347392'),
  payloadBase64Byte?: string(name='PayloadBase64Byte', example='d29ybGQgaGVsbG8='),
  requestId?: string(name='RequestId', example='41C4265E-F05D-4E2E-AB09-E031F501AF7F'),
  rrpcCode?: string(name='RrpcCode', example='SUCCESS'),
  success?: boolean(name='Success', example='true'),
}

model RRpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RRpcResponseBody(name='body'),
}

async function rRpcWithOptions(request: RRpcRequest, runtime: Util.RuntimeOptions): RRpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.requestBase64Byte)) {
    query['RequestBase64Byte'] = request.requestBase64Byte;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RRpc',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rRpc(request: RRpcRequest): RRpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return rRpcWithOptions(request, runtime);
}

model ReBindLicenseDeviceRequest {
  deviceNameList?: [ string ](name='DeviceNameList', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  licenseCode?: string(name='LicenseCode', example='LINK_SPEECH_COMMON_LICENSE'),
  productKey?: string(name='ProductKey', example='a2YwD23***'),
}

model ReBindLicenseDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    checkProgressId?: string(name='CheckProgressId', example='123***'),
    failSum?: long(name='FailSum', example='2'),
    progress?: int32(name='Progress', example='100'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***'),
    successSum?: long(name='SuccessSum', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model ReBindLicenseDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReBindLicenseDeviceResponseBody(name='body'),
}

async function reBindLicenseDeviceWithOptions(request: ReBindLicenseDeviceRequest, runtime: Util.RuntimeOptions): ReBindLicenseDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceNameList)) {
    body['DeviceNameList'] = request.deviceNameList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReBindLicenseDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reBindLicenseDevice(request: ReBindLicenseDeviceRequest): ReBindLicenseDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return reBindLicenseDeviceWithOptions(request, runtime);
}

model RecognizeCarNumRequest {
  url?: string(name='Url', example='https://img.alicdn.com/***/i4/O1***f_***-582.png'),
}

model RecognizeCarNumResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model RecognizeCarNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCarNumResponseBody(name='body'),
}

async function recognizeCarNumWithOptions(request: RecognizeCarNumRequest, runtime: Util.RuntimeOptions): RecognizeCarNumResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCarNum',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCarNum(request: RecognizeCarNumRequest): RecognizeCarNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarNumWithOptions(request, runtime);
}

model RecognizePictureGeneralRequest {
  url?: string(name='Url', example='https://img.alicdn.com/***/i4/O1***f_***-582.png'),
}

model RecognizePictureGeneralResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model RecognizePictureGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePictureGeneralResponseBody(name='body'),
}

async function recognizePictureGeneralWithOptions(request: RecognizePictureGeneralRequest, runtime: Util.RuntimeOptions): RecognizePictureGeneralResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecognizePictureGeneral',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePictureGeneral(request: RecognizePictureGeneralRequest): RecognizePictureGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePictureGeneralWithOptions(request, runtime);
}

model RefreshDeviceTunnelSharePasswordRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model RefreshDeviceTunnelSharePasswordResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  password?: string(name='Password', example='5f5c96d7e792af75da33a81dc87982ea********'),
  requestId?: string(name='RequestId', example='46AF6619-EFF3-4B77-A90B-B9EAA0C6D1AF'),
  success?: boolean(name='Success', example='true'),
}

model RefreshDeviceTunnelSharePasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshDeviceTunnelSharePasswordResponseBody(name='body'),
}

async function refreshDeviceTunnelSharePasswordWithOptions(request: RefreshDeviceTunnelSharePasswordRequest, runtime: Util.RuntimeOptions): RefreshDeviceTunnelSharePasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshDeviceTunnelSharePassword',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshDeviceTunnelSharePassword(request: RefreshDeviceTunnelSharePasswordRequest): RefreshDeviceTunnelSharePasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDeviceTunnelSharePasswordWithOptions(request, runtime);
}

model RefreshStudioAppTokenOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123*******'),
}

model RefreshStudioAppTokenOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    bizId?: string(name='BizId', example='a12*******'),
    bizType?: string(name='BizType', example='webApp'),
    isEnable?: string(name='IsEnable', example='YES'),
    token?: string(name='Token', example='cf245ddebd******'),
    type?: string(name='Type', example='custom'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model RefreshStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshStudioAppTokenOpenResponseBody(name='body'),
}

async function refreshStudioAppTokenOpenWithOptions(request: RefreshStudioAppTokenOpenRequest, runtime: Util.RuntimeOptions): RefreshStudioAppTokenOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RefreshStudioAppTokenOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshStudioAppTokenOpen(request: RefreshStudioAppTokenOpenRequest): RefreshStudioAppTokenOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshStudioAppTokenOpenWithOptions(request, runtime);
}

model RegisterDeviceRequest {
  appKey?: string(name='AppKey', example='674f***'),
  devEui?: string(name='DevEui', example='e8SDdgeIlk3nED****'),
  deviceName?: string(name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  joinEui?: string(name='JoinEui', example='Ede4tde8erth****'),
  loraNodeType?: string(name='LoraNodeType', example='ALIYUNDEFINED'),
  nickname?: string(name='Nickname'),
  pinCode?: string(name='PinCode', example='DIe80dfeg*****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    devEui?: string(name='DevEui', example='e8SDdgeIlk3nED****'),
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    iotId?: string(name='IotId', example='1O4YPNtRqB2anumz2Canp4GB7q****'),
    joinEui?: string(name='JoinEui', example='Ede4tde8erth****'),
    nickname?: string(name='Nickname'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterDeviceResponseBody(name='body'),
}

async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.devEui)) {
    query['DevEui'] = request.devEui;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.joinEui)) {
    query['JoinEui'] = request.joinEui;
  }
  if (!Util.isUnset(request.loraNodeType)) {
    query['LoraNodeType'] = request.loraNodeType;
  }
  if (!Util.isUnset(request.nickname)) {
    query['Nickname'] = request.nickname;
  }
  if (!Util.isUnset(request.pinCode)) {
    query['PinCode'] = request.pinCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model ReleaseEdgeDriverVersionRequest {
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', example='1.2.0'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model ReleaseEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3E56BFDF-3F00-495F-89A1-F891930DDB51'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseEdgeDriverVersionResponseBody(name='body'),
}

async function releaseEdgeDriverVersionWithOptions(request: ReleaseEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): ReleaseEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseEdgeDriverVersion(request: ReleaseEdgeDriverVersionRequest): ReleaseEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEdgeDriverVersionWithOptions(request, runtime);
}

model ReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model ReleaseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseProductResponseBody(name='body'),
}

async function releaseProductWithOptions(request: ReleaseProductRequest, runtime: Util.RuntimeOptions): ReleaseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseProduct(request: ReleaseProductRequest): ReleaseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseProductWithOptions(request, runtime);
}

model RemoveThingTopoRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model RemoveThingTopoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model RemoveThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveThingTopoResponseBody(name='body'),
}

async function removeThingTopoWithOptions(request: RemoveThingTopoRequest, runtime: Util.RuntimeOptions): RemoveThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeThingTopo(request: RemoveThingTopoRequest): RemoveThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeThingTopoWithOptions(request, runtime);
}

model ReplaceEdgeInstanceGatewayRequest {
  currentGatewayId?: string(name='CurrentGatewayId', example='oTCJomvT95WPyPPQ5sje******'),
  instanceId?: string(name='InstanceId', example='G4TGWGYwpo8zwr******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  newGatewayId?: string(name='NewGatewayId', example='65SkFyhZcU5d3PO2Ri13******'),
}

model ReplaceEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='10E5C856-E0A1-4468-BE01-E540A8BA8819'),
  success?: boolean(name='Success', example='true'),
}

model ReplaceEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceEdgeInstanceGatewayResponseBody(name='body'),
}

async function replaceEdgeInstanceGatewayWithOptions(request: ReplaceEdgeInstanceGatewayRequest, runtime: Util.RuntimeOptions): ReplaceEdgeInstanceGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentGatewayId)) {
    query['CurrentGatewayId'] = request.currentGatewayId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.newGatewayId)) {
    query['NewGatewayId'] = request.newGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceEdgeInstanceGateway',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replaceEdgeInstanceGateway(request: ReplaceEdgeInstanceGatewayRequest): ReplaceEdgeInstanceGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceEdgeInstanceGatewayWithOptions(request, runtime);
}

model RerunJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****'),
  jobId?: string(name='JobId', example='450407b***'),
}

model RerunJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A6BEAB33-03E6-4CE0-A94F-9E24C5512BAD'),
  success?: boolean(name='Success', example='true'),
}

model RerunJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RerunJobResponseBody(name='body'),
}

async function rerunJobWithOptions(request: RerunJobRequest, runtime: Util.RuntimeOptions): RerunJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RerunJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rerunJob(request: RerunJobRequest): RerunJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return rerunJobWithOptions(request, runtime);
}

model ResetConsumerGroupPositionRequest {
  groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model ResetConsumerGroupPositionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ResetConsumerGroupPositionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetConsumerGroupPositionResponseBody(name='body'),
}

async function resetConsumerGroupPositionWithOptions(request: ResetConsumerGroupPositionRequest, runtime: Util.RuntimeOptions): ResetConsumerGroupPositionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetConsumerGroupPosition',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetConsumerGroupPosition(request: ResetConsumerGroupPositionRequest): ResetConsumerGroupPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetConsumerGroupPositionWithOptions(request, runtime);
}

model ResetThingRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='SR8FiTu1R9tlUR2V1bmi0010a5****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1KiV******'),
}

model ResetThingResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='450407b***'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model ResetThingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetThingResponseBody(name='body'),
}

async function resetThingWithOptions(request: ResetThingRequest, runtime: Util.RuntimeOptions): ResetThingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetThing',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetThing(request: ResetThingRequest): ResetThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetThingWithOptions(request, runtime);
}

model RetrySoundCodeLabelBatchRequest {
  batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model RetrySoundCodeLabelBatchResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model RetrySoundCodeLabelBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetrySoundCodeLabelBatchResponseBody(name='body'),
}

async function retrySoundCodeLabelBatchWithOptions(request: RetrySoundCodeLabelBatchRequest, runtime: Util.RuntimeOptions): RetrySoundCodeLabelBatchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchCode)) {
    body['BatchCode'] = request.batchCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RetrySoundCodeLabelBatch',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retrySoundCodeLabelBatch(request: RetrySoundCodeLabelBatchRequest): RetrySoundCodeLabelBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return retrySoundCodeLabelBatchWithOptions(request, runtime);
}

model ReupgradeOTATaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64***'),
  jobId?: string(name='JobId', example='7glPHmaDYLAYMD1HHutT02****'),
  taskId?: [ string ](name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
}

model ReupgradeOTATaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='false'),
}

model ReupgradeOTATaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReupgradeOTATaskResponseBody(name='body'),
}

async function reupgradeOTATaskWithOptions(request: ReupgradeOTATaskRequest, runtime: Util.RuntimeOptions): ReupgradeOTATaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReupgradeOTATask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reupgradeOTATask(request: ReupgradeOTATaskRequest): ReupgradeOTATaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return reupgradeOTATaskWithOptions(request, runtime);
}

model SaveDevicePropRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  props?: string(name='Props', example='{"color":"red"}'),
}

model SaveDevicePropResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SaveDevicePropResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveDevicePropResponseBody(name='body'),
}

async function saveDevicePropWithOptions(request: SaveDevicePropRequest, runtime: Util.RuntimeOptions): SaveDevicePropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.props)) {
    query['Props'] = request.props;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveDeviceProp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveDeviceProp(request: SaveDevicePropRequest): SaveDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDevicePropWithOptions(request, runtime);
}

model SaveScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
  scriptDraft?: string(name='ScriptDraft', example='var data = payload("json")'),
}

model SaveScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model SaveScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveScriptResponseBody(name='body'),
}

async function saveScriptWithOptions(request: SaveScriptRequest, runtime: Util.RuntimeOptions): SaveScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  if (!Util.isUnset(request.scriptDraft)) {
    query['ScriptDraft'] = request.scriptDraft;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveScript(request: SaveScriptRequest): SaveScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveScriptWithOptions(request, runtime);
}

model SetDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  items?: string(name='Items', example='{"Temperature":35}'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  versions?: string(name='Versions', example='{"Temperature":2}'),
}

model SetDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='300511751'),
    versions?: string(name='Versions', example='{\\"Temperature\\":2}'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDeviceDesiredPropertyResponseBody(name='body'),
}

async function setDeviceDesiredPropertyWithOptions(request: SetDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): SetDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.versions)) {
    query['Versions'] = request.versions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceDesiredProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDeviceDesiredProperty(request: SetDeviceDesiredPropertyRequest): SetDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceDesiredPropertyWithOptions(request, runtime);
}

model SetDeviceGroupTagsRequest {
  groupId?: string(name='GroupId', example='W16X8Tvdosec****'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  tagString?: string(name='TagString', example='[{"tagKey":"h1","tagValue":"rr"},{"tagKey":"7h","tagValue":"rr"}]'),
}

model SetDeviceGroupTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='12CFDAF1-99D9-42E0-8C2F-F281DA5E8953'),
  success?: boolean(name='Success', example='true'),
}

model SetDeviceGroupTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDeviceGroupTagsResponseBody(name='body'),
}

async function setDeviceGroupTagsWithOptions(request: SetDeviceGroupTagsRequest, runtime: Util.RuntimeOptions): SetDeviceGroupTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tagString)) {
    query['TagString'] = request.tagString;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceGroupTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDeviceGroupTags(request: SetDeviceGroupTagsRequest): SetDeviceGroupTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceGroupTagsWithOptions(request, runtime);
}

model SetDevicePropertyRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64*****'),
  items?: string(name='Items', example='{"Switch":1,"Color":"blue"}'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model SetDevicePropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', example='abcabc123'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDevicePropertyResponseBody(name='body'),
}

async function setDevicePropertyWithOptions(request: SetDevicePropertyRequest, runtime: Util.RuntimeOptions): SetDevicePropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDeviceProperty(request: SetDevicePropertyRequest): SetDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicePropertyWithOptions(request, runtime);
}

model SetDevicesPropertyRequest {
  deviceName?: [ string ](name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  items?: string(name='Items', example='{"Switch":1,"Color":"blue"}'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model SetDevicesPropertyResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetDevicesPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDevicesPropertyResponseBody(name='body'),
}

async function setDevicesPropertyWithOptions(request: SetDevicesPropertyRequest, runtime: Util.RuntimeOptions): SetDevicesPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDevicesProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDevicesProperty(request: SetDevicesPropertyRequest): SetDevicesPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicesPropertyWithOptions(request, runtime);
}

model SetEdgeInstanceDriverConfigsRequest {
  configs?: [ 
    {
      content?: string(name='Content', example='{"test":123}'),
      format?: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs'),
  driverId?: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model SetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='252C7754-F6A2-454B-9DE2-382A97FC0C3F'),
  success?: boolean(name='Success', example='true'),
}

model SetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function setEdgeInstanceDriverConfigsWithOptions(request: SetEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): SetEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetEdgeInstanceDriverConfigs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setEdgeInstanceDriverConfigs(request: SetEdgeInstanceDriverConfigsRequest): SetEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model SetProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  issueModel?: int32(name='IssueModel', example='1'),
  productKey?: string(name='ProductKey', example='aS2dewS****'),
}

model SetProductCertInfoResponseBody = {
  code?: string(name='Code', example='MissingProductKey'),
  errorMessage?: string(name='ErrorMessage', example='ProductKey is mandatory for this action.'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model SetProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetProductCertInfoResponseBody(name='body'),
}

async function setProductCertInfoWithOptions(request: SetProductCertInfoRequest, runtime: Util.RuntimeOptions): SetProductCertInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.issueModel)) {
    query['IssueModel'] = request.issueModel;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetProductCertInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setProductCertInfo(request: SetProductCertInfoRequest): SetProductCertInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return setProductCertInfoWithOptions(request, runtime);
}

model SetStudioProjectCooperationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  status?: string(name='Status', example='1'),
}

model SetStudioProjectCooperationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetStudioProjectCooperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetStudioProjectCooperationResponseBody(name='body'),
}

async function setStudioProjectCooperationWithOptions(request: SetStudioProjectCooperationRequest, runtime: Util.RuntimeOptions): SetStudioProjectCooperationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetStudioProjectCooperation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setStudioProjectCooperation(request: SetStudioProjectCooperationRequest): SetStudioProjectCooperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return setStudioProjectCooperationWithOptions(request, runtime);
}

model SetupStudioAppAuthModeOpenRequest {
  appId?: string(name='AppId', example='a12*****'),
  authMode?: int32(name='AuthMode', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123********'),
}

model SetupStudioAppAuthModeOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    authMode?: int32(name='AuthMode', example='1'),
    tokenInfo?: {
      bizId?: string(name='BizId', example='a12********'),
      bizType?: string(name='BizType', example='webApp'),
      isEnable?: string(name='IsEnable', example='YES'),
      token?: string(name='Token', example='25bf576a6c6f**********'),
      type?: string(name='Type', example='custom'),
    }(name='TokenInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetupStudioAppAuthModeOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetupStudioAppAuthModeOpenResponseBody(name='body'),
}

async function setupStudioAppAuthModeOpenWithOptions(request: SetupStudioAppAuthModeOpenRequest, runtime: Util.RuntimeOptions): SetupStudioAppAuthModeOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.authMode)) {
    body['AuthMode'] = request.authMode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetupStudioAppAuthModeOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setupStudioAppAuthModeOpen(request: SetupStudioAppAuthModeOpenRequest): SetupStudioAppAuthModeOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupStudioAppAuthModeOpenWithOptions(request, runtime);
}

model ShareSpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  combinationList?: [ string ](name='CombinationList', example='ZFBDZ'),
  deviceName?: string(name='DeviceName', example='test'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
}

model ShareSpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model ShareSpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShareSpeechByCombinationResponseBody(name='body'),
}

async function shareSpeechByCombinationWithOptions(request: ShareSpeechByCombinationRequest, runtime: Util.RuntimeOptions): ShareSpeechByCombinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.combinationList)) {
    body['CombinationList'] = request.combinationList;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ShareSpeechByCombination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function shareSpeechByCombination(request: ShareSpeechByCombinationRequest): ShareSpeechByCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return shareSpeechByCombinationWithOptions(request, runtime);
}

model SpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  combinationList?: [ string ](name='CombinationList', example='ZFBDZ'),
  deviceName?: string(name='DeviceName', example='test'),
  enforceFlag?: boolean(name='EnforceFlag'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
}

model SpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SpeechByCombinationResponseBody(name='body'),
}

async function speechByCombinationWithOptions(request: SpeechByCombinationRequest, runtime: Util.RuntimeOptions): SpeechByCombinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.combinationList)) {
    body['CombinationList'] = request.combinationList;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.enforceFlag)) {
    body['EnforceFlag'] = request.enforceFlag;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SpeechByCombination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function speechByCombination(request: SpeechByCombinationRequest): SpeechByCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return speechByCombinationWithOptions(request, runtime);
}

model SpeechBySynthesisRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  deviceName?: string(name='DeviceName', example='test'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
  speechRate?: int32(name='SpeechRate', example='0'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model SpeechBySynthesisResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SpeechBySynthesisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SpeechBySynthesisResponseBody(name='body'),
}

async function speechBySynthesisWithOptions(request: SpeechBySynthesisRequest, runtime: Util.RuntimeOptions): SpeechBySynthesisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SpeechBySynthesis',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function speechBySynthesis(request: SpeechBySynthesisRequest): SpeechBySynthesisResponse {
  var runtime = new Util.RuntimeOptions{};
  return speechBySynthesisWithOptions(request, runtime);
}

model StartParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model StartParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model StartParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartParserResponseBody(name='body'),
}

async function startParserWithOptions(request: StartParserRequest, runtime: Util.RuntimeOptions): StartParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startParser(request: StartParserRequest): StartParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return startParserWithOptions(request, runtime);
}

model StartRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', example='100000'),
}

model StartRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', example='true'),
}

model StartRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartRuleResponseBody(name='body'),
}

async function startRuleWithOptions(request: StartRuleRequest, runtime: Util.RuntimeOptions): StartRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startRule(request: StartRuleRequest): StartRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRuleWithOptions(request, runtime);
}

model StopParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model StopParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model StopParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopParserResponseBody(name='body'),
}

async function stopParserWithOptions(request: StopParserRequest, runtime: Util.RuntimeOptions): StopParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopParser(request: StopParserRequest): StopParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopParserWithOptions(request, runtime);
}

model StopRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', example='100000'),
}

model StopRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', example='true'),
}

model StopRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopRuleResponseBody(name='body'),
}

async function stopRuleWithOptions(request: StopRuleRequest, runtime: Util.RuntimeOptions): StopRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopRule(request: StopRuleRequest): StopRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRuleWithOptions(request, runtime);
}

model SubscribeTopicRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-06***'),
  productKey?: string(name='ProductKey', example='a1Q5XoY***'),
  topic?: [ string ](name='Topic', example='/a1Q5XoY***/device1/user/get'),
}

model SubscribeTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model SubscribeTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubscribeTopicResponseBody(name='body'),
}

async function subscribeTopicWithOptions(request: SubscribeTopicRequest, runtime: Util.RuntimeOptions): SubscribeTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubscribeTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function subscribeTopic(request: SubscribeTopicRequest): SubscribeTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return subscribeTopicWithOptions(request, runtime);
}

model SyncSpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  combinationList?: [ string ](name='CombinationList', example='ZFBDZ'),
  deviceName?: string(name='DeviceName', example='test'),
  enforceFlag?: boolean(name='EnforceFlag'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
}

model SyncSpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    detail?: string(name='Detail', example='Bat_Pt:99 RSSI: -92'),
    deviceErrorCode?: string(name='DeviceErrorCode', example='1'),
    deviceErrorMessage?: string(name='DeviceErrorMessage', example='speech model not found'),
    id?: string(name='Id', example='42000011392021112380********'),
    maxRetryCount?: int32(name='MaxRetryCount', example='2'),
    retryCount?: int32(name='RetryCount', example='1'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SyncSpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncSpeechByCombinationResponseBody(name='body'),
}

async function syncSpeechByCombinationWithOptions(request: SyncSpeechByCombinationRequest, runtime: Util.RuntimeOptions): SyncSpeechByCombinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.combinationList)) {
    body['CombinationList'] = request.combinationList;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.enforceFlag)) {
    body['EnforceFlag'] = request.enforceFlag;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncSpeechByCombination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncSpeechByCombination(request: SyncSpeechByCombinationRequest): SyncSpeechByCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncSpeechByCombinationWithOptions(request, runtime);
}

model TestSpeechRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model TestSpeechShrinkRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfigShrink?: string(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model TestSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    items?: [ string ](name='items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model TestSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestSpeechResponseBody(name='body'),
}

async function testSpeechWithOptions(tmpReq: TestSpeechRequest, runtime: Util.RuntimeOptions): TestSpeechResponse {
  Util.validateModel(tmpReq);
  var request = new TestSpeechShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.soundCodeConfig)) {
    request.soundCodeConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.soundCodeConfig, 'SoundCodeConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.enableSoundCode)) {
    body['EnableSoundCode'] = request.enableSoundCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.soundCodeConfigShrink)) {
    body['SoundCodeConfig'] = request.soundCodeConfigShrink;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.speechType)) {
    body['SpeechType'] = request.speechType;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TestSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testSpeech(request: TestSpeechRequest): TestSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return testSpeechWithOptions(request, runtime);
}

model TransformClientIdRequest {
  clientId?: string(name='ClientId', example='9rSz********UNMWj33f000112'),
  iotId?: string(name='IotId', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-02****43'),
}

model TransformClientIdResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', example='true'),
}

model TransformClientIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransformClientIdResponseBody(name='body'),
}

async function transformClientIdWithOptions(request: TransformClientIdRequest, runtime: Util.RuntimeOptions): TransformClientIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransformClientId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function transformClientId(request: TransformClientIdRequest): TransformClientIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformClientIdWithOptions(request, runtime);
}

model TriggerSceneRuleRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model TriggerSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA989EK'),
  success?: boolean(name='Success', example='true'),
}

model TriggerSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TriggerSceneRuleResponseBody(name='body'),
}

async function triggerSceneRuleWithOptions(request: TriggerSceneRuleRequest, runtime: Util.RuntimeOptions): TriggerSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TriggerSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function triggerSceneRule(request: TriggerSceneRuleRequest): TriggerSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerSceneRuleWithOptions(request, runtime);
}

model UnbindApplicationFromEdgeInstanceRequest {
  applicationId?: string(name='ApplicationId', example='361368ba5a094da9bf5625d092******'),
  instanceId?: string(name='InstanceId', example='Tb4r9k3GWHJFWv******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UnbindApplicationFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='5CA3B4EE-D865-47B0-91FD-BA7C2BC6BCC4'),
  success?: boolean(name='Success', example='true'),
}

model UnbindApplicationFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindApplicationFromEdgeInstanceResponseBody(name='body'),
}

async function unbindApplicationFromEdgeInstanceWithOptions(request: UnbindApplicationFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindApplicationFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindApplicationFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindApplicationFromEdgeInstance(request: UnbindApplicationFromEdgeInstanceRequest): UnbindApplicationFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindApplicationFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindDriverFromEdgeInstanceRequest {
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc959228****'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UnbindDriverFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', example='true'),
}

model UnbindDriverFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindDriverFromEdgeInstanceResponseBody(name='body'),
}

async function unbindDriverFromEdgeInstanceWithOptions(request: UnbindDriverFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindDriverFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindDriverFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindDriverFromEdgeInstance(request: UnbindDriverFromEdgeInstanceRequest): UnbindDriverFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindDriverFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindLicenseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-s3***'),
  licenseCode?: string(name='LicenseCode', example='480P'),
  productKey?: string(name='ProductKey', example='gq62z***'),
}

model UnbindLicenseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model UnbindLicenseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindLicenseProductResponseBody(name='body'),
}

async function unbindLicenseProductWithOptions(request: UnbindLicenseProductRequest, runtime: Util.RuntimeOptions): UnbindLicenseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindLicenseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindLicenseProduct(request: UnbindLicenseProductRequest): UnbindLicenseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindLicenseProductWithOptions(request, runtime);
}

model UnbindRoleFromEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='BlYJyXZpLBtkmR******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UnbindRoleFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='270097AC-FFC3-4D2F-B48D-384BA1EA9962'),
  success?: boolean(name='Success', example='true'),
}

model UnbindRoleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindRoleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindRoleFromEdgeInstanceWithOptions(request: UnbindRoleFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindRoleFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindRoleFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindRoleFromEdgeInstance(request: UnbindRoleFromEdgeInstanceRequest): UnbindRoleFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindRoleFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindSceneRuleFromEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='llL44UVXUqb9m5******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model UnbindSceneRuleFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA909EK'),
  success?: boolean(name='Success', example='true'),
}

model UnbindSceneRuleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindSceneRuleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindSceneRuleFromEdgeInstanceWithOptions(request: UnbindSceneRuleFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindSceneRuleFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindSceneRuleFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindSceneRuleFromEdgeInstance(request: UnbindSceneRuleFromEdgeInstanceRequest): UnbindSceneRuleFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSceneRuleFromEdgeInstanceWithOptions(request, runtime);
}

model UpdateConsumerGroupRequest {
  groupId?: string(name='GroupId', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  newGroupName?: string(name='NewGroupName'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

async function updateConsumerGroupWithOptions(request: UpdateConsumerGroupRequest, runtime: Util.RuntimeOptions): UpdateConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.newGroupName)) {
    query['NewGroupName'] = request.newGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConsumerGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConsumerGroupWithOptions(request, runtime);
}

model UpdateDestinationRequest {
  configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
  description?: string(name='Description'),
  destinationId?: long(name='DestinationId', example='1002'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  name?: string(name='Name', example='DataPurpose'),
  type?: string(name='Type', example='REPUBLISH'),
}

model UpdateDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDestinationResponseBody(name='body'),
}

async function updateDestinationWithOptions(request: UpdateDestinationRequest, runtime: Util.RuntimeOptions): UpdateDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDestination(request: UpdateDestinationRequest): UpdateDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDestinationWithOptions(request, runtime);
}

model UpdateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', example='test2'),
  groupId?: string(name='GroupId', example='W16X8Tvdosec****'),
  groupType?: string(name='GroupType', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UpdateDeviceGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeviceGroupResponseBody(name='body'),
}

async function updateDeviceGroupWithOptions(request: UpdateDeviceGroupRequest, runtime: Util.RuntimeOptions): UpdateDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupDesc)) {
    query['GroupDesc'] = request.groupDesc;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDeviceGroup(request: UpdateDeviceGroupRequest): UpdateDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceGroupWithOptions(request, runtime);
}

model UpdateDeviceShadowRequest {
  deltaUpdate?: boolean(name='DeltaUpdate', example='false'),
  deviceName?: string(name='DeviceName', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1T27vz****'),
  shadowMessage?: string(name='ShadowMessage', example='{"method":"update","state":{"desired":{"color":"green"}},"version":2}'),
}

model UpdateDeviceShadowResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='6754C0E7-A35D-4CC8-A684-45EB1F0008D9'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeviceShadowResponseBody(name='body'),
}

async function updateDeviceShadowWithOptions(request: UpdateDeviceShadowRequest, runtime: Util.RuntimeOptions): UpdateDeviceShadowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deltaUpdate)) {
    query['DeltaUpdate'] = request.deltaUpdate;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.shadowMessage)) {
    query['ShadowMessage'] = request.shadowMessage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDeviceShadow',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDeviceShadow(request: UpdateDeviceShadowRequest): UpdateDeviceShadowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceShadowWithOptions(request, runtime);
}

model UpdateEdgeDriverVersionRequest {
  argument?: string(name='Argument', example='-XX:+PrintGCDetails'),
  configCheckRule?: string(name='ConfigCheckRule', example='{"deviceConfig":{"required":false},"driverConfig":{"required":false}}'),
  containerConfig?: string(name='ContainerConfig', example='{"privileged":1,"devMappings":[],"volumeMappings":[],"hostNetworkMode":0,"portMappings":[]}'),
  description?: string(name='Description'),
  driverConfig?: string(name='DriverConfig', example='[{"format":"JSON","content":"{\\"defaultConfig\\":\\"this is default driver config demo\\"}"}]'),
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', example='1.2.0'),
  edgeVersion?: string(name='EdgeVersion', example='2.0.0'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  sourceConfig?: string(name='SourceConfig', example='{"ossAddress":"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30c******/ck3n3koe200003h6zf******.zip"}'),
}

model UpdateEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='7757A782-6C24-4325-A663-C62857F32E87'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeDriverVersionResponseBody(name='body'),
}

async function updateEdgeDriverVersionWithOptions(request: UpdateEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): UpdateEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.argument)) {
    query['Argument'] = request.argument;
  }
  if (!Util.isUnset(request.configCheckRule)) {
    query['ConfigCheckRule'] = request.configCheckRule;
  }
  if (!Util.isUnset(request.containerConfig)) {
    query['ContainerConfig'] = request.containerConfig;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.driverConfig)) {
    query['DriverConfig'] = request.driverConfig;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.edgeVersion)) {
    query['EdgeVersion'] = request.edgeVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.sourceConfig)) {
    query['SourceConfig'] = request.sourceConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEdgeDriverVersion(request: UpdateEdgeDriverVersionRequest): UpdateEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeDriverVersionWithOptions(request, runtime);
}

model UpdateEdgeInstanceRequest {
  bizEnable?: boolean(name='BizEnable', example='true'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='LinkIoTEdge_Node'),
  spec?: int32(name='Spec', example='10'),
  tags?: string(name='Tags', example='k1:v1,k2:v2'),
}

model UpdateEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='10CA6DAD-EBAF-4D3E-9309-9DB5B0FF48F2'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeInstanceResponseBody(name='body'),
}

async function updateEdgeInstanceWithOptions(request: UpdateEdgeInstanceRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizEnable)) {
    query['BizEnable'] = request.bizEnable;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEdgeInstance(request: UpdateEdgeInstanceRequest): UpdateEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceWithOptions(request, runtime);
}

model UpdateEdgeInstanceChannelRequest {
  channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
  channelName?: string(name='ChannelName', example='le_name_update'),
  configs?: [ 
    {
      content?: string(name='Content', example='{"protocol":"TCP", "ip":"1.2.3.4", "port":122}'),
      format?: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UpdateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='60D75DC6-00BC-47B5-AB1B-0619B7830D7D'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeInstanceChannelResponseBody(name='body'),
}

async function updateEdgeInstanceChannelWithOptions(request: UpdateEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.channelName)) {
    query['ChannelName'] = request.channelName;
  }
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEdgeInstanceChannel(request: UpdateEdgeInstanceChannelRequest): UpdateEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceChannelWithOptions(request, runtime);
}

model UpdateEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='nF9oXo7kLRWQ********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='le_lite1'),
  routeId?: long(name='RouteId', example='123456'),
  sourceData?: string(name='SourceData', example='#'),
  sourceType?: string(name='SourceType', example='device'),
  targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********'),
  targetIotHubQos?: int32(name='TargetIotHubQos', example='1'),
  targetType?: string(name='TargetType', example='function'),
  topicFilter?: string(name='TopicFilter', example='all'),
}

model UpdateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='BBE0E0C7-913A-47B8-A255-F2C6038B5FD8'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function updateEdgeInstanceMessageRoutingWithOptions(request: UpdateEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  if (!Util.isUnset(request.sourceData)) {
    query['SourceData'] = request.sourceData;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.targetData)) {
    query['TargetData'] = request.targetData;
  }
  if (!Util.isUnset(request.targetIotHubQos)) {
    query['TargetIotHubQos'] = request.targetIotHubQos;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.topicFilter)) {
    query['TopicFilter'] = request.topicFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEdgeInstanceMessageRouting(request: UpdateEdgeInstanceMessageRoutingRequest): UpdateEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model UpdateJobRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
  rolloutConfig?: map[string]any(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  timeoutConfig?: map[string]any(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
}

model UpdateJobShrinkRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
  rolloutConfigShrink?: string(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  timeoutConfigShrink?: string(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
}

model UpdateJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJobWithOptions(tmpReq: UpdateJobRequest, runtime: Util.RuntimeOptions): UpdateJobResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rolloutConfig)) {
    request.rolloutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rolloutConfig, 'RolloutConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.timeoutConfig)) {
    request.timeoutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timeoutConfig, 'TimeoutConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.rolloutConfigShrink)) {
    query['RolloutConfig'] = request.rolloutConfigShrink;
  }
  if (!Util.isUnset(request.timeoutConfigShrink)) {
    query['TimeoutConfig'] = request.timeoutConfigShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateJobWithOptions(request, runtime);
}

model UpdateOTAModuleRequest {
  aliasName?: string(name='AliasName'),
  desc?: string(name='Desc'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', example='barcodeScanner'),
  productKey?: string(name='ProductKey', example='a1Le6d0****'),
}

model UpdateOTAModuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', example='true'),
}

model UpdateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateOTAModuleResponseBody(name='body'),
}

async function updateOTAModuleWithOptions(request: UpdateOTAModuleRequest, runtime: Util.RuntimeOptions): UpdateOTAModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOTAModule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateOTAModule(request: UpdateOTAModuleRequest): UpdateOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOTAModuleWithOptions(request, runtime);
}

model UpdateParserRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-8t***'),
  name?: string(name='Name', example='DataParserTwo'),
  parserId?: long(name='ParserId', example='1001'),
}

model UpdateParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateParserResponseBody(name='body'),
}

async function updateParserWithOptions(request: UpdateParserRequest, runtime: Util.RuntimeOptions): UpdateParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateParser(request: UpdateParserRequest): UpdateParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateParserWithOptions(request, runtime);
}

model UpdateParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  name?: string(name='Name', example='DataSource'),
}

model UpdateParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateParserDataSourceResponseBody(name='body'),
}

async function updateParserDataSourceWithOptions(request: UpdateParserDataSourceRequest, runtime: Util.RuntimeOptions): UpdateParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateParserDataSource(request: UpdateParserDataSourceRequest): UpdateParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateParserDataSourceWithOptions(request, runtime);
}

model UpdateProductRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  productName?: string(name='ProductName'),
}

model UpdateProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProductWithOptions(request: UpdateProductRequest, runtime: Util.RuntimeOptions): UpdateProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productName)) {
    query['ProductName'] = request.productName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductWithOptions(request, runtime);
}

model UpdateProductFilterConfigRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  propertyTimestampFilter?: boolean(name='PropertyTimestampFilter', example='false'),
  propertyValueFilter?: boolean(name='PropertyValueFilter', example='true'),
}

model UpdateProductFilterConfigResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductFilterConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductFilterConfigResponseBody(name='body'),
}

async function updateProductFilterConfigWithOptions(request: UpdateProductFilterConfigRequest, runtime: Util.RuntimeOptions): UpdateProductFilterConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.propertyTimestampFilter)) {
    query['PropertyTimestampFilter'] = request.propertyTimestampFilter;
  }
  if (!Util.isUnset(request.propertyValueFilter)) {
    query['PropertyValueFilter'] = request.propertyValueFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductFilterConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProductFilterConfig(request: UpdateProductFilterConfigRequest): UpdateProductFilterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductFilterConfigWithOptions(request, runtime);
}

model UpdateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='202'),
    }
  ](name='ProductTag'),
}

model UpdateProductTagsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', example='room'),
      tagValue?: string(name='TagValue', example='123'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductTagsResponseBody(name='body'),
}

async function updateProductTagsWithOptions(request: UpdateProductTagsRequest, runtime: Util.RuntimeOptions): UpdateProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productTag)) {
    query['ProductTag'] = request.productTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProductTags(request: UpdateProductTagsRequest): UpdateProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductTagsWithOptions(request, runtime);
}

model UpdateProductTopicRequest {
  desc?: string(name='Desc', example='resubmit a test topic'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  operation?: string(name='Operation', example='PUB'),
  topicId?: string(name='TopicId', example='821****'),
  topicShortName?: string(name='TopicShortName', example='resubmit'),
}

model UpdateProductTopicResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', example='true'),
}

model UpdateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductTopicResponseBody(name='body'),
}

async function updateProductTopicWithOptions(request: UpdateProductTopicRequest, runtime: Util.RuntimeOptions): UpdateProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.topicId)) {
    query['TopicId'] = request.topicId;
  }
  if (!Util.isUnset(request.topicShortName)) {
    query['TopicShortName'] = request.topicShortName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateProductTopic(request: UpdateProductTopicRequest): UpdateProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductTopicWithOptions(request, runtime);
}

model UpdateRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  name?: string(name='Name', example='test_2'),
  productKey?: string(name='ProductKey', example='aladaeW****'),
  ruleDesc?: string(name='RuleDesc', example='test'),
  ruleId?: long(name='RuleId', example='100000'),
  select?: string(name='Select', example='deviceName() as deviceName, items.Humidity.value as Humidity, items.Temperature.value as Temperature'),
  shortTopic?: string(name='ShortTopic', example='+/thing/event/property/post'),
  topic?: string(name='Topic', example='/sys/g18l***/device1/thing/event/property/post'),
  topicType?: int32(name='TopicType', example='1'),
  where?: string(name='Where', example='Temperature>35'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRuleResponseBody(name='body'),
}

async function updateRuleWithOptions(request: UpdateRuleRequest, runtime: Util.RuntimeOptions): UpdateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.ruleDesc)) {
    query['RuleDesc'] = request.ruleDesc;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.select)) {
    query['Select'] = request.select;
  }
  if (!Util.isUnset(request.shortTopic)) {
    query['ShortTopic'] = request.shortTopic;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.topicType)) {
    query['TopicType'] = request.topicType;
  }
  if (!Util.isUnset(request.where)) {
    query['Where'] = request.where;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleWithOptions(request, runtime);
}

model UpdateRuleActionRequest {
  actionId?: long(name='ActionId', example='1000003'),
  configuration?: string(name='Configuration', example='{"topic":"/a1iYSOl****/device5/user/get","topicType":1}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  type?: string(name='Type', example='REPUBLISH'),
}

model UpdateRuleActionResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model UpdateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRuleActionResponseBody(name='body'),
}

async function updateRuleActionWithOptions(request: UpdateRuleActionRequest, runtime: Util.RuntimeOptions): UpdateRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionId)) {
    query['ActionId'] = request.actionId;
  }
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRuleAction(request: UpdateRuleActionRequest): UpdateRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleActionWithOptions(request, runtime);
}

model UpdateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleContent?: string(name='RuleContent'),
  ruleDescription?: string(name='RuleDescription'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
  ruleName?: string(name='RuleName', example='test'),
}

model UpdateSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneRuleResponseBody(name='body'),
}

async function updateSceneRuleWithOptions(request: UpdateSceneRuleRequest, runtime: Util.RuntimeOptions): UpdateSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleContent)) {
    query['RuleContent'] = request.ruleContent;
  }
  if (!Util.isUnset(request.ruleDescription)) {
    query['RuleDescription'] = request.ruleDescription;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSceneRule(request: UpdateSceneRuleRequest): UpdateSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSceneRuleWithOptions(request, runtime);
}

model UpdateSchedulePeriodRequest {
  description?: string(name='Description', example='test'),
  endTime?: string(name='EndTime', example='01:00'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  periodCode?: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
  startTime?: string(name='StartTime', example='00:00'),
}

model UpdateSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSchedulePeriodResponseBody(name='body'),
}

async function updateSchedulePeriodWithOptions(request: UpdateSchedulePeriodRequest, runtime: Util.RuntimeOptions): UpdateSchedulePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.periodCode)) {
    body['PeriodCode'] = request.periodCode;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSchedulePeriod',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSchedulePeriod(request: UpdateSchedulePeriodRequest): UpdateSchedulePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSchedulePeriodWithOptions(request, runtime);
}

model UpdateSoundCodeRequest {
  duration?: int32(name='Duration', example='2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
}

model UpdateSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSoundCodeResponseBody(name='body'),
}

async function updateSoundCodeWithOptions(request: UpdateSoundCodeRequest, runtime: Util.RuntimeOptions): UpdateSoundCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSoundCode',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSoundCode(request: UpdateSoundCodeRequest): UpdateSoundCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSoundCodeWithOptions(request, runtime);
}

model UpdateSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  label?: string(name='Label', example='test'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model UpdateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSoundCodeLabelResponseBody(name='body'),
}

async function updateSoundCodeLabelWithOptions(request: UpdateSoundCodeLabelRequest, runtime: Util.RuntimeOptions): UpdateSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSoundCodeLabel(request: UpdateSoundCodeLabelRequest): UpdateSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSoundCodeLabelWithOptions(request, runtime);
}

model UpdateSoundCodeScheduleRequest {
  description?: string(name='Description', example='test'),
  endDate?: string(name='EndDate', example='2022-03-31'),
  endTime?: string(name='EndTime', example='23:59'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
  startDate?: string(name='StartDate', example='2022-03-31'),
  startTime?: string(name='StartTime', example='00:00'),
  status?: string(name='Status', example='WORKING'),
}

model UpdateSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSoundCodeScheduleResponseBody(name='body'),
}

async function updateSoundCodeScheduleWithOptions(request: UpdateSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): UpdateSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSoundCodeSchedule(request: UpdateSoundCodeScheduleRequest): UpdateSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSoundCodeScheduleWithOptions(request, runtime);
}

model UpdateSpeechRequest {
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechCode?: string(name='SpeechCode', example='VlKzbj3XIZ****CeIHH6vR82JNCSzk**'),
  speechRate?: int32(name='SpeechRate', example='0'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model UpdateSpeechShrinkRequest {
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfigShrink?: string(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechCode?: string(name='SpeechCode', example='VlKzbj3XIZ****CeIHH6vR82JNCSzk**'),
  speechRate?: int32(name='SpeechRate', example='0'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model UpdateSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSpeechResponseBody(name='body'),
}

async function updateSpeechWithOptions(tmpReq: UpdateSpeechRequest, runtime: Util.RuntimeOptions): UpdateSpeechResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSpeechShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.soundCodeConfig)) {
    request.soundCodeConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.soundCodeConfig, 'SoundCodeConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.enableSoundCode)) {
    body['EnableSoundCode'] = request.enableSoundCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.soundCodeConfigShrink)) {
    body['SoundCodeConfig'] = request.soundCodeConfigShrink;
  }
  if (!Util.isUnset(request.speechCode)) {
    body['SpeechCode'] = request.speechCode;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSpeech(request: UpdateSpeechRequest): UpdateSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSpeechWithOptions(request, runtime);
}

model UpdateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', example='nJRaJPn5U1JITGfjBO9l00****'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', example='true'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', example='true'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', example='true'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', example='true'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', example='true'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  mnsConfiguration?: string(name='MnsConfiguration', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }'),
  otaEventFlag?: boolean(name='OtaEventFlag', example='true'),
  otaJobFlag?: boolean(name='OtaJobFlag', example='true'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', example='true'),
  productKey?: string(name='ProductKey', example='a1fyXVF****'),
  subscribeFlags?: string(name='SubscribeFlags'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', example='true'),
  type?: string(name='Type', example='AMQP'),
}

model UpdateSubscribeRelationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSubscribeRelationResponseBody(name='body'),
}

async function updateSubscribeRelationWithOptions(request: UpdateSubscribeRelationRequest, runtime: Util.RuntimeOptions): UpdateSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupIds)) {
    query['ConsumerGroupIds'] = request.consumerGroupIds;
  }
  if (!Util.isUnset(request.deviceDataFlag)) {
    query['DeviceDataFlag'] = request.deviceDataFlag;
  }
  if (!Util.isUnset(request.deviceLifeCycleFlag)) {
    query['DeviceLifeCycleFlag'] = request.deviceLifeCycleFlag;
  }
  if (!Util.isUnset(request.deviceStatusChangeFlag)) {
    query['DeviceStatusChangeFlag'] = request.deviceStatusChangeFlag;
  }
  if (!Util.isUnset(request.deviceTagFlag)) {
    query['DeviceTagFlag'] = request.deviceTagFlag;
  }
  if (!Util.isUnset(request.deviceTopoLifeCycleFlag)) {
    query['DeviceTopoLifeCycleFlag'] = request.deviceTopoLifeCycleFlag;
  }
  if (!Util.isUnset(request.foundDeviceListFlag)) {
    query['FoundDeviceListFlag'] = request.foundDeviceListFlag;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.mnsConfiguration)) {
    query['MnsConfiguration'] = request.mnsConfiguration;
  }
  if (!Util.isUnset(request.otaEventFlag)) {
    query['OtaEventFlag'] = request.otaEventFlag;
  }
  if (!Util.isUnset(request.otaJobFlag)) {
    query['OtaJobFlag'] = request.otaJobFlag;
  }
  if (!Util.isUnset(request.otaVersionFlag)) {
    query['OtaVersionFlag'] = request.otaVersionFlag;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.subscribeFlags)) {
    query['SubscribeFlags'] = request.subscribeFlags;
  }
  if (!Util.isUnset(request.thingHistoryFlag)) {
    query['ThingHistoryFlag'] = request.thingHistoryFlag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSubscribeRelation(request: UpdateSubscribeRelationRequest): UpdateSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSubscribeRelationWithOptions(request, runtime);
}

model UpdateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', example='BatteryModule'),
  functionBlockName?: string(name='FunctionBlockName'),
  identifier?: string(name='Identifier', example='Temperature'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  thingModelJson?: string(name='ThingModelJson'),
}

model UpdateThingModelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateThingModelResponseBody(name='body'),
}

async function updateThingModelWithOptions(request: UpdateThingModelRequest, runtime: Util.RuntimeOptions): UpdateThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.functionBlockName)) {
    query['FunctionBlockName'] = request.functionBlockName;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.thingModelJson)) {
    query['ThingModelJson'] = request.thingModelJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateThingModel(request: UpdateThingModelRequest): UpdateThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateThingModelWithOptions(request, runtime);
}

model UpdateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1Q5XoY****'),
  scriptContent?: string(name='ScriptContent', example='"function protocolToRawData(jsonObj) {return rawdata; }function rawDataToProtocol(rawData) {return jsonObj; }"'),
  scriptType?: string(name='ScriptType', example='JavaScript'),
}

model UpdateThingScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateThingScriptResponseBody(name='body'),
}

async function updateThingScriptWithOptions(request: UpdateThingScriptRequest, runtime: Util.RuntimeOptions): UpdateThingScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.scriptContent)) {
    query['ScriptContent'] = request.scriptContent;
  }
  if (!Util.isUnset(request.scriptType)) {
    query['ScriptType'] = request.scriptType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateThingScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateThingScript(request: UpdateThingScriptRequest): UpdateThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateThingScriptWithOptions(request, runtime);
}

model UpdateTopicConfigRequest {
  enableBroadcast?: boolean(name='EnableBroadcast', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a1Q5XoY****'),
  topicFullName?: string(name='TopicFullName', example='/broadcast/a1Q5XoY****/test'),
}

model UpdateTopicConfigResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTopicConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTopicConfigResponseBody(name='body'),
}

async function updateTopicConfigWithOptions(request: UpdateTopicConfigRequest, runtime: Util.RuntimeOptions): UpdateTopicConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.enableBroadcast)) {
    query['EnableBroadcast'] = request.enableBroadcast;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTopicConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTopicConfig(request: UpdateTopicConfigRequest): UpdateTopicConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTopicConfigWithOptions(request, runtime);
}

model WriteDevicesHotStorageDataRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  items?: string(name='Items', example='{ "Power": { "value": "on", "time": 1524448722000 }, "WF": { "value": 23.6, "time": 1524448722000 } }'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  userTopic?: string(name='UserTopic', example='user/a***/b***'),
}

model WriteDevicesHotStorageDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model WriteDevicesHotStorageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WriteDevicesHotStorageDataResponseBody(name='body'),
}

async function writeDevicesHotStorageDataWithOptions(request: WriteDevicesHotStorageDataRequest, runtime: Util.RuntimeOptions): WriteDevicesHotStorageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.userTopic)) {
    query['UserTopic'] = request.userTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'WriteDevicesHotStorageData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function writeDevicesHotStorageData(request: WriteDevicesHotStorageDataRequest): WriteDevicesHotStorageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return writeDevicesHotStorageDataWithOptions(request, runtime);
}

