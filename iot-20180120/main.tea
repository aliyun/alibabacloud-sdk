/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'iot.aliyuncs.com',
    ap-south-1 = 'iot.aliyuncs.com',
    ap-southeast-2 = 'iot.aliyuncs.com',
    ap-southeast-3 = 'iot.aliyuncs.com',
    ap-southeast-5 = 'iot.aliyuncs.com',
    cn-beijing-finance-1 = 'iot.aliyuncs.com',
    cn-beijing-finance-pop = 'iot.aliyuncs.com',
    cn-beijing-gov-1 = 'iot.aliyuncs.com',
    cn-beijing-nu16-b01 = 'iot.aliyuncs.com',
    cn-chengdu = 'iot.aliyuncs.com',
    cn-edge-1 = 'iot.aliyuncs.com',
    cn-fujian = 'iot.aliyuncs.com',
    cn-haidian-cm12-c01 = 'iot.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'iot.aliyuncs.com',
    cn-hangzhou-finance = 'iot.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'iot.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'iot.aliyuncs.com',
    cn-hangzhou-test-306 = 'iot.aliyuncs.com',
    cn-hongkong = 'iot.aliyuncs.com',
    cn-hongkong-finance-pop = 'iot.aliyuncs.com',
    cn-huhehaote = 'iot.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'iot.aliyuncs.com',
    cn-qingdao = 'iot.aliyuncs.com',
    cn-qingdao-nebula = 'iot.aliyuncs.com',
    cn-shanghai-et15-b01 = 'iot.aliyuncs.com',
    cn-shanghai-et2-b01 = 'iot.aliyuncs.com',
    cn-shanghai-finance-1 = 'iot.aliyuncs.com',
    cn-shanghai-inner = 'iot.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'iot.aliyuncs.com',
    cn-shenzhen-finance-1 = 'iot.aliyuncs.com',
    cn-shenzhen-inner = 'iot.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'iot.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'iot.aliyuncs.com',
    cn-wuhan = 'iot.aliyuncs.com',
    cn-wulanchabu = 'iot.aliyuncs.com',
    cn-yushanfang = 'iot.aliyuncs.com',
    cn-zhangbei = 'iot.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'iot.aliyuncs.com',
    cn-zhangjiakou = 'iot.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'iot.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'iot.aliyuncs.com',
    eu-west-1 = 'iot.aliyuncs.com',
    eu-west-1-oxs = 'iot.aliyuncs.com',
    me-east-1 = 'iot.aliyuncs.com',
    rus-west-1-pop = 'iot.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('iot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDataForApiSourceRequest {
  apiId?: string(name='ApiId', example='cxatswiniekxw***'),
  content?: string(name='Content', example='{"key":"value","ts":16376582*****}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n*****'),
}

model AddDataForApiSourceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: long(name='Data', example='1234567890'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09934561E'),
  success?: boolean(name='Success', example='true'),
}

model AddDataForApiSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDataForApiSourceResponseBody(name='body'),
}

async function addDataForApiSourceWithOptions(request: AddDataForApiSourceRequest, runtime: Util.RuntimeOptions): AddDataForApiSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDataForApiSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDataForApiSource(request: AddDataForApiSourceRequest): AddDataForApiSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDataForApiSourceWithOptions(request, runtime);
}

model AddShareTaskDeviceRequest {
  iotIdList?: [ string ](name='IotIdList', example='y4u2weAIrpp****WHMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64********'),
  productKey?: string(name='ProductKey', example='a2YwD23***'),
  shareTaskId?: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********'),
}

model AddShareTaskDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    failSum?: int32(name='FailSum'),
    failedResultCsvFile?: string(name='FailedResultCsvFile'),
    progress?: int32(name='Progress', example='100'),
    progressId?: string(name='ProgressId', example='Md3ZiTL888K9llXDy7890***********'),
    successSum?: int32(name='SuccessSum'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model AddShareTaskDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddShareTaskDeviceResponseBody(name='body'),
}

async function addShareTaskDeviceWithOptions(request: AddShareTaskDeviceRequest, runtime: Util.RuntimeOptions): AddShareTaskDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotIdList)) {
    body['IotIdList'] = request.iotIdList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.shareTaskId)) {
    body['ShareTaskId'] = request.shareTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddShareTaskDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addShareTaskDevice(request: AddShareTaskDeviceRequest): AddShareTaskDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addShareTaskDeviceWithOptions(request, runtime);
}

model AsyncRRpcRequest {
  deviceName?: string(name='DeviceName'),
  extInfo?: string(name='ExtInfo'),
  iotInstanceId?: string(name='IotInstanceId'),
  messageContent?: string(name='MessageContent'),
  productKey?: string(name='ProductKey'),
  topicFullName?: string(name='TopicFullName'),
}

model AsyncRRpcResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  messageId?: long(name='MessageId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AsyncRRpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AsyncRRpcResponseBody(name='body'),
}

async function asyncRRpcWithOptions(request: AsyncRRpcRequest, runtime: Util.RuntimeOptions): AsyncRRpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.extInfo)) {
    query['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageContent)) {
    body['MessageContent'] = request.messageContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AsyncRRpc',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function asyncRRpc(request: AsyncRRpcRequest): AsyncRRpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return asyncRRpcWithOptions(request, runtime);
}

model AttachDestinationRequest {
  destinationId?: long(name='DestinationId', example='1002'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  isFailover?: boolean(name='IsFailover', example='false'),
  parserId?: long(name='ParserId', example='1000'),
}

model AttachDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model AttachDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachDestinationResponseBody(name='body'),
}

async function attachDestinationWithOptions(request: AttachDestinationRequest, runtime: Util.RuntimeOptions): AttachDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isFailover)) {
    query['IsFailover'] = request.isFailover;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachDestination(request: AttachDestinationRequest): AttachDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDestinationWithOptions(request, runtime);
}

model AttachParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  parserId?: long(name='ParserId', example='1000'),
}

model AttachParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model AttachParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachParserDataSourceResponseBody(name='body'),
}

async function attachParserDataSourceWithOptions(request: AttachParserDataSourceRequest, runtime: Util.RuntimeOptions): AttachParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachParserDataSource(request: AttachParserDataSourceRequest): AttachParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachParserDataSourceWithOptions(request, runtime);
}

model BatchAddDataForApiSourceRequest {
  apiId?: string(name='ApiId', example='cxatswiniekxw***'),
  contentList?: map[string]any(name='ContentList', example='[{"key":"value1","ts":1637658286000},{"key":"value2","ts":1637658287000}]'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n*****'),
}

model BatchAddDataForApiSourceShrinkRequest {
  apiId?: string(name='ApiId', example='cxatswiniekxw***'),
  contentListShrink?: string(name='ContentList', example='[{"key":"value1","ts":1637658286000},{"key":"value2","ts":1637658287000}]'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n*****'),
}

model BatchAddDataForApiSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: map[string]any(name='Data', example='{"count":2,"hasNext":false,"items":[{"key":"value1","ts":1637658286000,"id":1234567890},{"key":"value2","ts":1637658287000,"id":1234567891}],"pageNum":1,"pageSize":2}'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model BatchAddDataForApiSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddDataForApiSourceResponseBody(name='body'),
}

async function batchAddDataForApiSourceWithOptions(tmpReq: BatchAddDataForApiSourceRequest, runtime: Util.RuntimeOptions): BatchAddDataForApiSourceResponse {
  Util.validateModel(tmpReq);
  var request = new BatchAddDataForApiSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.contentList)) {
    request.contentListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.contentList, 'ContentList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.contentListShrink)) {
    query['ContentList'] = request.contentListShrink;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddDataForApiSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAddDataForApiSource(request: BatchAddDataForApiSourceRequest): BatchAddDataForApiSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddDataForApiSourceWithOptions(request, runtime);
}

model BatchAddDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName?: string(name='DeviceName', description='The error message returned if the call fails.', example='ZHuPo6sZzv7pOzYh****'),
      productKey?: string(name='ProductKey', description='The names of the devices to be added. You can specify a maximum of 200 devices.', example='a1kORrK****'),
    }
  ](name='Device'),
  groupId?: string(name='GroupId', description='The ProductKeys of the products to which the devices belong. You can specify a maximum of 200 ProductKeys.', example='6VfhebLg5iUe****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.', example='iot_instc_pu****_c*-v64********'),
}

model BatchAddDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='0'),
  code?: string(name='Code', description='The number of valid devices that you specified.', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.'),
  exceedTenGroupDeviceCount?: int32(name='ExceedTenGroupDeviceCount', description='The number of devices that exist in the group.', example='0'),
  requestId?: string(name='RequestId', description='The number of the specified devices that are added to 10 or more groups. You can add a device to a maximum of 10 groups.', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='true'),
  successAddedDeviceCount?: int32(name='SuccessAddedDeviceCount', example='2'),
  validDeviceCount?: int32(name='ValidDeviceCount', description='The number of devices that are added to the group.', example='2'),
}

model BatchAddDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddDeviceGroupRelationsResponseBody(name='body'),
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request BatchAddDeviceGroupRelationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchAddDeviceGroupRelationsResponse
 */
async function batchAddDeviceGroupRelationsWithOptions(request: BatchAddDeviceGroupRelationsRequest, runtime: Util.RuntimeOptions): BatchAddDeviceGroupRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.device)) {
    query['Device'] = request.device;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddDeviceGroupRelations',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request BatchAddDeviceGroupRelationsRequest
  * @return BatchAddDeviceGroupRelationsResponse
 */
async function batchAddDeviceGroupRelations(request: BatchAddDeviceGroupRelationsRequest): BatchAddDeviceGroupRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddDeviceGroupRelationsWithOptions(request, runtime);
}

model BatchAddThingTopoRequest {
  gwDeviceName?: string(name='GwDeviceName', description='The name of the gateway.', example='gateway'),
  gwProductKey?: string(name='GwProductKey', description='The key of the product to which the gateway belongs.', example='a1vL7cp****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. On the **Overview** page in the IoT Platform console, you can view the ID of the instance.

>*   If your instance has an ID, you must specify this parameter. Otherwise, the call fails.
>*   If no **Overview** page or instance ID appears in the IoT Platform console, ignore this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  topoAddItem?: [ 
    {
      clientId?: string(name='ClientId', description='The client ID of the sub-device. The ID can be the serial number (SN) or media access control (MAC) address of the device. This parameter is optional.

> If this parameter is included in the value of the **TopoAddItem.N.Sign** parameter, you must specify this parameter.', example='a1BwAGV****device1'),
      deviceName?: string(name='DeviceName', description='The name of each sub-device.', example='light'),
      productKey?: string(name='ProductKey', description='The key of the product to which the sub-device belongs.', example='a1BwAGV****'),
      sign?: string(name='Sign', description='The signature of the sub-device.

Set the Sign parameter to the result of the **SignMethod(deviceSecret,content)** function.

To obtain the **content** parameter, sort all sub-device parameters that are submitted to the server, except the Sign and SignMethod parameters, in alphabetical order. Then, concatenate the parameters and values in sequence. No concatenation symbol is required to separate these parameters and values.

For example, you want to specify the following parameters for a sub-device: **ClientId=868575026974305, DeviceName=868575026974305, ProductKey=a1PB5fp1234, SignMethod=hmacmd5, timestamp=1646277090411, and deviceSecret=1234**. In this case, the signature function is `hmacmd5(1234, clientId868575026974305deviceName868575026974305productKeya1PB5fp1234timestamp1646277090411)`, and the calculation result is `3BA0DFA4C477B40C007D84D30D6466CC`.

>  In the preceding example, **ClientId** indicates the client ID of the sub-device. You can specify a custom client ID.

For more information about how to calculate the signature value, see [How do I obtain MQTT parameters for authentication?](~~292635~~). The signature value is the calculated value of the passwd parameter.', example='C1C1606D61884C5F16C9EA6622E5****'),
      signMethod?: string(name='SignMethod', description='The signature algorithm. Valid values: **hmacSha1**, **hmacSha256**, **hmacMd5**, and **Sha256**. The value is not case-sensitive.', example='hmacMd5'),
      timestamp?: string(name='Timestamp', description='The timestamp in UTC. This parameter is optional.

> If this parameter is included in the value of the **TopoAddItem.N.Sign** parameter, you must specify this parameter.', example='1579335899000'),
    }
  ](name='TopoAddItem'),
}

model BatchAddThingTopoResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model BatchAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddThingTopoResponseBody(name='body'),
}

/**
  * *   You can attach up to 10 sub-devices to a gateway in a single call.
  * *   The API operation caller must be the gateway owner.
  * *   If you specify a sub-device that is already attached to a gateway, the original gateway is replaced with the specified gateway.
  * *   If one of the specified sub-devices fails to establish a topological relationship with the gateway, the system rolls back, and all specified sub-devices fail to establish topological relationships with the gateway.
  * *   After you call this operation to establish topological relationships between sub-devices and the gateway, IoT Platform uses the `/sys/${productKey}/${deviceName}/thing/topo/change` topic to push information that includes the result of this operation to the gateway. For more information, see [Notify gateways of changes of topological relationships](~~89299~~).
  * ## QPS limits
  * You can call this API operation up to 10 times per second per Alibaba Cloud account. 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchAddThingTopoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchAddThingTopoResponse
 */
async function batchAddThingTopoWithOptions(request: BatchAddThingTopoRequest, runtime: Util.RuntimeOptions): BatchAddThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gwDeviceName)) {
    query['GwDeviceName'] = request.gwDeviceName;
  }
  if (!Util.isUnset(request.gwProductKey)) {
    query['GwProductKey'] = request.gwProductKey;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.topoAddItem)) {
    query['TopoAddItem'] = request.topoAddItem;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can attach up to 10 sub-devices to a gateway in a single call.
  * *   The API operation caller must be the gateway owner.
  * *   If you specify a sub-device that is already attached to a gateway, the original gateway is replaced with the specified gateway.
  * *   If one of the specified sub-devices fails to establish a topological relationship with the gateway, the system rolls back, and all specified sub-devices fail to establish topological relationships with the gateway.
  * *   After you call this operation to establish topological relationships between sub-devices and the gateway, IoT Platform uses the `/sys/${productKey}/${deviceName}/thing/topo/change` topic to push information that includes the result of this operation to the gateway. For more information, see [Notify gateways of changes of topological relationships](~~89299~~).
  * ## QPS limits
  * You can call this API operation up to 10 times per second per Alibaba Cloud account. 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchAddThingTopoRequest
  * @return BatchAddThingTopoResponse
 */
async function batchAddThingTopo(request: BatchAddThingTopoRequest): BatchAddThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchAddThingTopoWithOptions(request, runtime);
}

model BatchBindDeviceToEdgeInstanceWithDriverRequest {
  driverId?: string(name='DriverId', description='The IDs of the devices.

You can call the [QueryDevice](~~69905~~) operation to query detailed information about all devices that belong to the current Alibaba Cloud account and obtain the required device IDs.

>  You can specify a maximum of 20 device IDs when you call the BatchBindDeviceToEdgeInstanceWithDriver operation.', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver that you want to configure and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance to which you want to bind multiple devices and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='iot_instc_pu****_c*-v64********'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponseBody = {
  code?: string(name='Code', description='The error message that is returned if the call failed.', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.', example='request parameter error'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='BFFA9519-6AF1-4D15-AFAF-FD412714C1BE'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindDeviceToEdgeInstanceWithDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchBindDeviceToEdgeInstanceWithDriverResponseBody(name='body'),
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information about common request parameters, see [Common parameters](~~30561~~).
  *
  * @param request BatchBindDeviceToEdgeInstanceWithDriverRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchBindDeviceToEdgeInstanceWithDriverResponse
 */
async function batchBindDeviceToEdgeInstanceWithDriverWithOptions(request: BatchBindDeviceToEdgeInstanceWithDriverRequest, runtime: Util.RuntimeOptions): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindDeviceToEdgeInstanceWithDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information about common request parameters, see [Common parameters](~~30561~~).
  *
  * @param request BatchBindDeviceToEdgeInstanceWithDriverRequest
  * @return BatchBindDeviceToEdgeInstanceWithDriverResponse
 */
async function batchBindDeviceToEdgeInstanceWithDriver(request: BatchBindDeviceToEdgeInstanceWithDriverRequest): BatchBindDeviceToEdgeInstanceWithDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindDeviceToEdgeInstanceWithDriverWithOptions(request, runtime);
}

model BatchBindDevicesIntoProjectRequest {
  devices?: [ 
    {
      deviceName?: string(name='DeviceName', example='Ee2******'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='Devices'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model BatchBindDevicesIntoProjectResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindDevicesIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchBindDevicesIntoProjectResponseBody(name='body'),
}

async function batchBindDevicesIntoProjectWithOptions(request: BatchBindDevicesIntoProjectRequest, runtime: Util.RuntimeOptions): BatchBindDevicesIntoProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.devices)) {
    body['Devices'] = request.devices;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindDevicesIntoProject',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindDevicesIntoProject(request: BatchBindDevicesIntoProjectRequest): BatchBindDevicesIntoProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindDevicesIntoProjectWithOptions(request, runtime);
}

model BatchBindProductsIntoProjectRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKeys?: [ string ](name='ProductKeys', example='a1BwAGV****'),
  projectId?: string(name='ProjectId', example='a123********'),
}

model BatchBindProductsIntoProjectResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchBindProductsIntoProjectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchBindProductsIntoProjectResponseBody(name='body'),
}

async function batchBindProductsIntoProjectWithOptions(request: BatchBindProductsIntoProjectRequest, runtime: Util.RuntimeOptions): BatchBindProductsIntoProjectResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKeys)) {
    body['ProductKeys'] = request.productKeys;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchBindProductsIntoProject',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchBindProductsIntoProject(request: BatchBindProductsIntoProjectRequest): BatchBindProductsIntoProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchBindProductsIntoProjectWithOptions(request, runtime);
}

model BatchCheckDeviceNamesRequest {
  deviceName?: [ string ](name='DeviceName'),
  deviceNameList?: [ 
    {
      deviceName?: string(name='DeviceName'),
      deviceNickname?: string(name='DeviceNickname'),
    }
  ](name='DeviceNameList'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the devices belong.', example='a1BwAGV****'),
}

model BatchCheckDeviceNamesResponseBody = {
  code?: string(name='Code', description='The returned data.', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
    invalidDetailList?: {
      invalidDetailList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        errorMsg?: string(name='ErrorMsg'),
        nickName?: string(name='NickName'),
      }
    ](name='InvalidDetailList')
    }(name='InvalidDetailList'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='InvalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceNicknameList?: {
      invalidDeviceNickname?: [ string ](name='InvalidDeviceNickname')
    }(name='InvalidDeviceNicknameList'),
    repeatedDeviceNameList?: {
      repeatDevieNameList?: [ string ](name='RepeatDevieNameList')
    }(name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', description='The application ID (ApplyId) returned if the call is successful. When you call the [BatchRegisterDeviceWithApplyId](~~69514~~) operation to register the devices, this parameter is required.'),
  requestId?: string(name='RequestId', description='The list of invalid device aliases returned if the call fails.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='The list of invalid DeviceNames returned if the call fails.', example='true'),
}

model BatchCheckDeviceNamesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCheckDeviceNamesResponseBody(name='body'),
}

/**
  * You can call this operation with the **BatchRegisterDeviceWithApplyId** operation to register multiple devices under a product. Each device carries a unique DeviceName.
  * Procedure:
  * 1\\. Call this operation to specify the DeviceNames of the devices to be registered. IoT Platform returns an application ID (**ApplyId**). A successful response indicates that the request to verify the DeviceNames is submitted. The actual registration process is asynchronously implemented and takes some minutes.
  * 2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
  * 3\\. Call the [BatchRegisterDeviceWithApplyId](~~69514~~) operation to register multiple devices.
  * 4\\. Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to view the registration result.
  * 5\\. Call the [QueryPageByApplyId](~~69518~~) operation to query the information about the registered devices.
  * ## Limits
  * - You can specify a maximum of 10,000 DeviceNames in a single call.
  * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchCheckDeviceNamesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchCheckDeviceNamesResponse
 */
async function batchCheckDeviceNamesWithOptions(request: BatchCheckDeviceNamesRequest, runtime: Util.RuntimeOptions): BatchCheckDeviceNamesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.deviceNameList)) {
    body['DeviceNameList'] = request.deviceNameList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCheckDeviceNames',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation with the **BatchRegisterDeviceWithApplyId** operation to register multiple devices under a product. Each device carries a unique DeviceName.
  * Procedure:
  * 1\\. Call this operation to specify the DeviceNames of the devices to be registered. IoT Platform returns an application ID (**ApplyId**). A successful response indicates that the request to verify the DeviceNames is submitted. The actual registration process is asynchronously implemented and takes some minutes.
  * 2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
  * 3\\. Call the [BatchRegisterDeviceWithApplyId](~~69514~~) operation to register multiple devices.
  * 4\\. Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to view the registration result.
  * 5\\. Call the [QueryPageByApplyId](~~69518~~) operation to query the information about the registered devices.
  * ## Limits
  * - You can specify a maximum of 10,000 DeviceNames in a single call.
  * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchCheckDeviceNamesRequest
  * @return BatchCheckDeviceNamesResponse
 */
async function batchCheckDeviceNames(request: BatchCheckDeviceNamesRequest): BatchCheckDeviceNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCheckDeviceNamesWithOptions(request, runtime);
}

model BatchCheckImportDeviceRequest {
  deviceList?: [ 
    {
      deviceName?: string(name='DeviceName'),
      deviceSecret?: string(name='DeviceSecret'),
      sn?: string(name='Sn'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchCheckImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidDetailList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        deviceSecret?: string(name='DeviceSecret'),
        errorMsg?: string(name='ErrorMsg'),
        sn?: string(name='Sn'),
      }
    ](name='InvalidDetailList'),
    invalidDeviceNameList?: [ string ](name='InvalidDeviceNameList'),
    invalidDeviceSecretList?: [ string ](name='InvalidDeviceSecretList'),
    invalidSnList?: [ string ](name='InvalidSnList'),
    repeatedDeviceNameList?: [ string ](name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCheckImportDeviceResponseBody(name='body'),
}

async function batchCheckImportDeviceWithOptions(request: BatchCheckImportDeviceRequest, runtime: Util.RuntimeOptions): BatchCheckImportDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceList)) {
    body['DeviceList'] = request.deviceList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCheckImportDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCheckImportDevice(request: BatchCheckImportDeviceRequest): BatchCheckImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCheckImportDeviceWithOptions(request, runtime);
}

model BatchCheckVehicleDeviceRequest {
  deviceList?: [ 
    {
      deviceId?: string(name='DeviceId'),
      deviceModel?: string(name='DeviceModel'),
      deviceName?: string(name='DeviceName'),
      manufacturer?: string(name='Manufacturer'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', description='BatchCheckVehicleDevice', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1Bw****'),
}

model BatchCheckVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    invalidDetailList?: [ 
      {
        deviceId?: string(name='DeviceId'),
        deviceModel?: string(name='DeviceModel'),
        deviceName?: string(name='DeviceName'),
        errorMsg?: string(name='ErrorMsg'),
        manufacturer?: string(name='Manufacturer'),
      }
    ](name='InvalidDetailList'),
    invalidDeviceIdList?: [ string ](name='InvalidDeviceIdList'),
    invalidDeviceModelList?: [ string ](name='InvalidDeviceModelList'),
    invalidDeviceNameList?: [ string ](name='InvalidDeviceNameList'),
    invalidManufacturerList?: [ string ](name='InvalidManufacturerList'),
    repeatedDeviceIdList?: [ string ](name='RepeatedDeviceIdList'),
    repeatedDeviceNameList?: [ string ](name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchCheckVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCheckVehicleDeviceResponseBody(name='body'),
}

/**
  * The invalid device models returned if the call fails.
  *
  * @param request BatchCheckVehicleDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchCheckVehicleDeviceResponse
 */
async function batchCheckVehicleDeviceWithOptions(request: BatchCheckVehicleDeviceRequest, runtime: Util.RuntimeOptions): BatchCheckVehicleDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceList)) {
    body['DeviceList'] = request.deviceList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCheckVehicleDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The invalid device models returned if the call fails.
  *
  * @param request BatchCheckVehicleDeviceRequest
  * @return BatchCheckVehicleDeviceResponse
 */
async function batchCheckVehicleDevice(request: BatchCheckVehicleDeviceRequest): BatchCheckVehicleDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCheckVehicleDeviceWithOptions(request, runtime);
}

model BatchClearEdgeInstanceDeviceConfigRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to manage and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model BatchClearEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0BC2AA1C-E4D0-4E78-A70F-08C9A90686B0'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model BatchClearEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchClearEdgeInstanceDeviceConfigResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchClearEdgeInstanceDeviceConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchClearEdgeInstanceDeviceConfigResponse
 */
async function batchClearEdgeInstanceDeviceConfigWithOptions(request: BatchClearEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchClearEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchClearEdgeInstanceDeviceConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchClearEdgeInstanceDeviceConfigRequest
  * @return BatchClearEdgeInstanceDeviceConfigResponse
 */
async function batchClearEdgeInstanceDeviceConfig(request: BatchClearEdgeInstanceDeviceConfigRequest): BatchClearEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchClearEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchCreateSoundCodeLabelRequest {
  description?: string(name='Description', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
  total?: int32(name='Total', example='20'),
}

model BatchCreateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCreateSoundCodeLabelResponseBody(name='body'),
}

async function batchCreateSoundCodeLabelWithOptions(request: BatchCreateSoundCodeLabelRequest, runtime: Util.RuntimeOptions): BatchCreateSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  if (!Util.isUnset(request.total)) {
    body['Total'] = request.total;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCreateSoundCodeLabel(request: BatchCreateSoundCodeLabelRequest): BatchCreateSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateSoundCodeLabelWithOptions(request, runtime);
}

model BatchCreateSoundCodeLabelWithLabelsRequest {
  description?: string(name='Description', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  labels?: [ string ](name='Labels', example='test'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model BatchCreateSoundCodeLabelWithLabelsResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateSoundCodeLabelWithLabelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCreateSoundCodeLabelWithLabelsResponseBody(name='body'),
}

async function batchCreateSoundCodeLabelWithLabelsWithOptions(request: BatchCreateSoundCodeLabelWithLabelsRequest, runtime: Util.RuntimeOptions): BatchCreateSoundCodeLabelWithLabelsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.labels)) {
    body['Labels'] = request.labels;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateSoundCodeLabelWithLabels',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchCreateSoundCodeLabelWithLabels(request: BatchCreateSoundCodeLabelWithLabelsRequest): BatchCreateSoundCodeLabelWithLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCreateSoundCodeLabelWithLabelsWithOptions(request, runtime);
}

model BatchDeleteDeviceGroupRelationsRequest {
  device?: [ 
    {
      deviceName?: string(name='DeviceName', description='The names of the devices to be removed. You can specify a maximum of 200 devices.', example='ZHuPo6sZzv7pOzYh****'),
      productKey?: string(name='ProductKey', description='The ProductKeys of the products to which the devices belong. You can specify a maximum of 200 ProductKeys.', example='a1kORrK****'),
    }
  ](name='Device'),
  groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.', example='W16X8Tvdosec****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model BatchDeleteDeviceGroupRelationsResponseBody = {
  alreadyRelatedGroupDeviceCount?: int32(name='AlreadyRelatedGroupDeviceCount', description='The number of devices that exist in the group.', example='2'),
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8739385E-143F-4389-B900-B7DF9174CE0D'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  successDeviceCount?: int32(name='SuccessDeviceCount', description='The number of devices that are removed from the group.', example='2'),
  validDeviceCount?: int32(name='ValidDeviceCount', description='The number of valid devices that you specified.', example='2'),
}

model BatchDeleteDeviceGroupRelationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteDeviceGroupRelationsResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchDeleteDeviceGroupRelationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchDeleteDeviceGroupRelationsResponse
 */
async function batchDeleteDeviceGroupRelationsWithOptions(request: BatchDeleteDeviceGroupRelationsRequest, runtime: Util.RuntimeOptions): BatchDeleteDeviceGroupRelationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.device)) {
    query['Device'] = request.device;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteDeviceGroupRelations',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchDeleteDeviceGroupRelationsRequest
  * @return BatchDeleteDeviceGroupRelationsResponse
 */
async function batchDeleteDeviceGroupRelations(request: BatchDeleteDeviceGroupRelationsRequest): BatchDeleteDeviceGroupRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteDeviceGroupRelationsWithOptions(request, runtime);
}

model BatchDeleteEdgeInstanceChannelRequest {
  channelIds?: [ string ](name='ChannelIds', example='BE0BD49EF5EF4D119D09CC1B25******'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchDeleteEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C95D46F1-0B13-46C7-9FA7-FDBFCF2F9F6F'),
  success?: boolean(name='Success', example='true'),
}

model BatchDeleteEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteEdgeInstanceChannelResponseBody(name='body'),
}

async function batchDeleteEdgeInstanceChannelWithOptions(request: BatchDeleteEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): BatchDeleteEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteEdgeInstanceChannel(request: BatchDeleteEdgeInstanceChannelRequest): BatchDeleteEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteEdgeInstanceChannelWithOptions(request, runtime);
}

model BatchGetDeviceBindStatusRequest {
  iotIds?: [ string ](name='IotIds', example='sjI0Sd124XFYyjBYMiYO******'),
  iotInstanceId?: string(name='IotInstanceId'),
}

model BatchGetDeviceBindStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      bindStatus?: int32(name='BindStatus', example='1'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='iot-v64********'),
      iotId?: string(name='IotId', example='sjI0Sd124XFYyjBYMiYO******'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B1DF865D-2474-4CD5-9B7E-59B06D204CBF'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetDeviceBindStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetDeviceBindStatusResponseBody(name='body'),
}

async function batchGetDeviceBindStatusWithOptions(request: BatchGetDeviceBindStatusRequest, runtime: Util.RuntimeOptions): BatchGetDeviceBindStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetDeviceBindStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetDeviceBindStatus(request: BatchGetDeviceBindStatusRequest): BatchGetDeviceBindStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetDeviceBindStatusWithOptions(request, runtime);
}

model BatchGetDeviceStateRequest {
  deviceName?: [ string ](name='DeviceName', example='light'),
  iotId?: [ string ](name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.


> If you configure this parameter, you must also specify a value for the **DeviceName** parameter.', example='a1BwAGV****'),
}

model BatchGetDeviceStateResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  deviceStatusList?: {
    deviceStatus?: [ 
    {
      asAddress?: string(name='AsAddress', description='The IP address of the device.', example='192.0.2.1'),
      deviceId?: string(name='DeviceId', description='The ID of the device (expired).

>  This parameter is no longer supported. Do not use this parameter to identify a device. You can use the value of the **IotId**** parameter or a combination of the values of the ****ProductKey** and DeviceName parameters to identify a device.', example='dwnS41bhNxjslDAI****'),
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
      iotId?: string(name='IotId', description='The ID of the device. The ID is the unique identifier that is issued by IoT Platform to the device.', example='dwnS41bhNxjslDAI****000100'),
      lastOnlineTime?: string(name='LastOnlineTime', description='The last time when the device was online.', example='2020-01-17 16:19:11'),
      status?: string(name='Status', description='The status of the device. Valid values: Valid values:

*   **ONLINE**: The device is online.
*   **OFFLINE**: The device is offline.
*   **UNACTIVE**: The device is not activated.
*   **DISABLE**: The device is disabled.', example='OFFLINE'),
    }
  ](name='DeviceStatus')
  }(name='DeviceStatusList', description='The device status information returned if the call is successful. For more information, see the following parameters that are included in the DeviceStatus parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model BatchGetDeviceStateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetDeviceStateResponseBody(name='body'),
}

/**
  * When you call this operation, you can perform the following operations:
  * *   You can specify a value for the **ProductKey** parameter and multiple values for the **DeviceName** parameter to query the status of devices that belong to a product.
  * *   You can specify multiple values for the **IotId** parameter to query the status of devices that belong to different products.****
  * >You can query the status of up to 50 devices in a call.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchGetDeviceStateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchGetDeviceStateResponse
 */
async function batchGetDeviceStateWithOptions(request: BatchGetDeviceStateRequest, runtime: Util.RuntimeOptions): BatchGetDeviceStateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetDeviceState',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, you can perform the following operations:
  * *   You can specify a value for the **ProductKey** parameter and multiple values for the **DeviceName** parameter to query the status of devices that belong to a product.
  * *   You can specify multiple values for the **IotId** parameter to query the status of devices that belong to different products.****
  * >You can query the status of up to 50 devices in a call.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchGetDeviceStateRequest
  * @return BatchGetDeviceStateResponse
 */
async function batchGetDeviceState(request: BatchGetDeviceStateRequest): BatchGetDeviceStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetDeviceStateWithOptions(request, runtime);
}

model BatchGetEdgeDriverRequest {
  driverIds?: [ string ](name='DriverIds', example='fec565038d7544978d9aed5c1a******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for public instances. However, this parameter is required for the instances that you have purchased.', example='ot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeDriverResponseBody = {
  code?: string(name='Code', description='The error code. Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  driverList?: [ 
    {
      cpuArch?: string(name='CpuArch', description='The CPU architecture that the driver supports. Valid values:

*   ARMv7
*   ARMv7-HF
*   AArch64
*   x86-64
*   x86', example='x86-64'),
      driverId?: string(name='DriverId', description='The ID of the driver.', example='fec565038d7544978d9aed5c1a******'),
      driverName?: string(name='DriverName', description='The name of the driver.', example='MyLedDriver'),
      driverProtocol?: string(name='DriverProtocol', description='The communications protocol that the driver uses. Valid values:

*   modbus: Modbus protocol
*   opc-ua: OPC UA protocol
*   customize: custom protocol', example='customize'),
      gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The time when the driver was created. The time is displayed in UTC.', example='1581912859713'),
      gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The time when the driver was last modified. The time is displayed in UTC.', example='1581912859713'),
      isBuiltIn?: boolean(name='IsBuiltIn', description='Indicates whether the driver is a built-in driver.

*   true: indicates that the driver is a built-in driver, that is, the driver code is pre-configured on the gateway device.
*   false: indicates that the driver is not a built-in driver.', example='false'),
      runtime?: string(name='Runtime', description='The language in which the driver is programmed. Valid values:

*   nodejs8: Node.js v8
*   python3: Python v3.5
*   c: C', example='c'),
      type?: int32(name='Type', description='The type of the driver. Valid values:

*   0: official driver
*   1: custom driver', example='1'),
    }
  ](name='DriverList', description='The information about each driver.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A42CAB88-6E26-4DC7-9A35-584D17E82DE0'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. true indicates that the call was successful. false indicates that the call failed.', example='true'),
}

model BatchGetEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeDriverResponseBody(name='body'),
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request BatchGetEdgeDriverRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchGetEdgeDriverResponse
 */
async function batchGetEdgeDriverWithOptions(request: BatchGetEdgeDriverRequest, runtime: Util.RuntimeOptions): BatchGetEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverIds)) {
    query['DriverIds'] = request.driverIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request BatchGetEdgeDriverRequest
  * @return BatchGetEdgeDriverResponse
 */
async function batchGetEdgeDriver(request: BatchGetEdgeDriverRequest): BatchGetEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeDriverWithOptions(request, runtime);
}

model BatchGetEdgeInstanceChannelRequest {
  channelIds?: [ string ](name='ChannelIds', example='BE0BD49EF5EF4D119D09CC1B25******'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    channel?: [ 
    {
      channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
      channelName?: string(name='ChannelName', example='le_name0'),
      configList?: {
        config?: [ 
        {
          configId?: string(name='ConfigId', example='5d6016035c1a451daf174b1051******'),
          content?: string(name='Content', example='{\\"protocol\\":\\"TCP\\", \\"ip\\":\\"1.2.3.4\\", \\"port\\":1}'),
          format?: string(name='Format', example='JSON'),
          key?: string(name='Key', example='key1'),
        }
      ](name='Config')
      }(name='ConfigList'),
    }
  ](name='Channel')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='5B86570E-C1A7-4569-BF7B-F7F09EB35BEB'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceChannelWithOptions(request: BatchGetEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelIds)) {
    query['ChannelIds'] = request.channelIds;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceChannel(request: BatchGetEdgeInstanceChannelRequest): BatchGetEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceChannelWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceChannelRequest {
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotIds?: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceChannelList?: [ 
    {
      channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
      channelName?: string(name='ChannelName', example='le_name_update'),
      iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN0******'),
    }
  ](name='DeviceChannelList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='029BC40B-8353-48B3-94C3-7ABF296F0AE5'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceChannelWithOptions(request: BatchGetEdgeInstanceDeviceChannelRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDeviceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceDeviceChannel(request: BatchGetEdgeInstanceDeviceChannelRequest): BatchGetEdgeInstanceDeviceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceChannelWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceConfigRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to query and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fDl****000101'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  deviceConfigList?: [ 
    {
      config?: {
        content?: string(name='Content', description='The configuration content or the Object Storage Service (OSS) path of the configuration file.', example='{\\"test\\": \\"device_config_demo\\"}'),
        format?: string(name='Format', description='The format of the configuration. Valid values: KV (key-value pair), JSON (JSON string), and FILE (configuration file).', example='JSON'),
      }(name='Config', description='The configuration information of the device.'),
      iotId?: string(name='IotId', description='The ID of the device.', example='sjI0Sd124XFYyjBY****000101'),
    }
  ](name='DeviceConfigList', description='The device configuration information that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D4A102C2-36A5-4964-9694-0F8EFF95CCA8'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model BatchGetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchGetEdgeInstanceDeviceConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchGetEdgeInstanceDeviceConfigResponse
 */
async function batchGetEdgeInstanceDeviceConfigWithOptions(request: BatchGetEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDeviceConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchGetEdgeInstanceDeviceConfigRequest
  * @return BatchGetEdgeInstanceDeviceConfigResponse
 */
async function batchGetEdgeInstanceDeviceConfig(request: BatchGetEdgeInstanceDeviceConfigRequest): BatchGetEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDeviceDriverRequest {
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotIds?: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDeviceDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  deviceDriverList?: [ 
    {
      driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
      iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN******'),
    }
  ](name='DeviceDriverList'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E8D82F7A-0F84-4BD3-AE8A-5444A5B42800'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetEdgeInstanceDeviceDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDeviceDriverResponseBody(name='body'),
}

async function batchGetEdgeInstanceDeviceDriverWithOptions(request: BatchGetEdgeInstanceDeviceDriverRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDeviceDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDeviceDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGetEdgeInstanceDeviceDriver(request: BatchGetEdgeInstanceDeviceDriverRequest): BatchGetEdgeInstanceDeviceDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDeviceDriverWithOptions(request, runtime);
}

model BatchGetEdgeInstanceDriverConfigsRequest {
  driverIds?: [ string ](name='DriverIds', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that uses the drivers and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model BatchGetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  driverConfigList?: [ 
    {
      configList?: [ 
        {
          configId?: string(name='ConfigId', description='The ID of the configuration.', example='dac71722ceac4a299dbf3e8dc3c8****'),
          content?: string(name='Content', description='The configuration content or the Object Storage Service (OSS) path of the configuration file.', example='{\\"test\\":123}'),
          format?: string(name='Format', description='The format of the configuration. Valid values: KV (key-value pair), JSON (JSON string), and FILE (configuration file).', example='JSON'),
          key?: string(name='Key', description='The key of the configuration. If multiple configurations are available, keywords can be used to identify the configurations.', example='key1'),
        }
      ](name='ConfigList', description='The configuration information of the driver.'),
      driverId?: string(name='DriverId', description='The ID of the driver.', example='021d154d2a2f4dd7a489773d9e04****'),
    }
  ](name='DriverConfigList', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6113390-F507-458B-8544-7B01F945630B'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model BatchGetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchGetEdgeInstanceDriverConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchGetEdgeInstanceDriverConfigsResponse
 */
async function batchGetEdgeInstanceDriverConfigsWithOptions(request: BatchGetEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): BatchGetEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverIds)) {
    query['DriverIds'] = request.driverIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchGetEdgeInstanceDriverConfigs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchGetEdgeInstanceDriverConfigsRequest
  * @return BatchGetEdgeInstanceDriverConfigsResponse
 */
async function batchGetEdgeInstanceDriverConfigs(request: BatchGetEdgeInstanceDriverConfigsRequest): BatchGetEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGetEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model BatchGrayMigrationDeviceRequest {
  deviceNames?: [ string ](name='DeviceNames', example='light'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchGrayMigrationDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    details?: {
      item?: [ 
      {
        code?: int32(name='Code', example='500'),
        deviceName?: string(name='DeviceName', example='light'),
        message?: string(name='Message'),
        status?: string(name='Status', example='SUCCEEDEED'),
      }
    ](name='item')
    }(name='Details'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchGrayMigrationDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchGrayMigrationDeviceResponseBody(name='body'),
}

async function batchGrayMigrationDeviceWithOptions(request: BatchGrayMigrationDeviceRequest, runtime: Util.RuntimeOptions): BatchGrayMigrationDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceNames)) {
    body['DeviceNames'] = request.deviceNames;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchGrayMigrationDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchGrayMigrationDevice(request: BatchGrayMigrationDeviceRequest): BatchGrayMigrationDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchGrayMigrationDeviceWithOptions(request, runtime);
}

model BatchImportDeviceRequest {
  deviceList?: [ 
    {
      deviceName?: string(name='DeviceName'),
      deviceSecret?: string(name='DeviceSecret'),
      sn?: string(name='Sn'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model BatchImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
    invalidDetailList?: {
      invalidDetailList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        deviceSecret?: string(name='DeviceSecret'),
        errorMsg?: string(name='ErrorMsg'),
        sn?: string(name='Sn'),
      }
    ](name='InvalidDetailList')
    }(name='InvalidDetailList'),
    invalidDeviceNameList?: {
      invalidDeviceName?: [ string ](name='invalidDeviceName')
    }(name='InvalidDeviceNameList'),
    invalidDeviceSecretList?: {
      invalidDeviceSecret?: [ string ](name='invalidDeviceSecret')
    }(name='InvalidDeviceSecretList'),
    invalidSnList?: {
      invalidSn?: [ string ](name='invalidSn')
    }(name='InvalidSnList'),
    repeatedDeviceNameList?: {
      repeatedDeviceName?: [ string ](name='repeatedDeviceName')
    }(name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchImportDeviceResponseBody(name='body'),
}

async function batchImportDeviceWithOptions(request: BatchImportDeviceRequest, runtime: Util.RuntimeOptions): BatchImportDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceList)) {
    body['DeviceList'] = request.deviceList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchImportDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchImportDevice(request: BatchImportDeviceRequest): BatchImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchImportDeviceWithOptions(request, runtime);
}

model BatchImportVehicleDeviceRequest {
  deviceList?: [ 
    {
      deviceId?: string(name='DeviceId'),
      deviceModel?: string(name='DeviceModel'),
      deviceName?: string(name='DeviceName'),
      manufacturer?: string(name='Manufacturer'),
    }
  ](name='DeviceList'),
  iotInstanceId?: string(name='IotInstanceId', description='BatchImportVehicleDevice', example='iot-1n8t****'),
  productKey?: string(name='ProductKey', example='a1Bw****'),
}

model BatchImportVehicleDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', example='1295006'),
    invalidDetailList?: {
      invalidDetailList?: [ 
      {
        deviceId?: string(name='DeviceId'),
        deviceModel?: string(name='DeviceModel'),
        deviceName?: string(name='DeviceName'),
        errorMsg?: string(name='ErrorMsg'),
        manufacturer?: string(name='Manufacturer'),
      }
    ](name='InvalidDetailList')
    }(name='InvalidDetailList'),
    invalidDeviceIdList?: {
      invalidDeviceIdList?: [ string ](name='invalidDeviceIdList')
    }(name='InvalidDeviceIdList'),
    invalidDeviceModelList?: {
      invalidDeviceModelList?: [ string ](name='invalidDeviceModelList')
    }(name='InvalidDeviceModelList'),
    invalidDeviceNameList?: {
      invalidDeviceNameList?: [ string ](name='InvalidDeviceNameList')
    }(name='InvalidDeviceNameList'),
    invalidManufacturerList?: {
      invalidManufacturerList?: [ string ](name='invalidManufacturerList')
    }(name='InvalidManufacturerList'),
    repeatedDeviceIdList?: {
      repeatedDeviceIdList?: [ string ](name='repeatedDeviceIdList')
    }(name='RepeatedDeviceIdList'),
    repeatedDeviceNameList?: {
      repeatedDeviceNameList?: [ string ](name='RepeatedDeviceNameList')
    }(name='RepeatedDeviceNameList'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model BatchImportVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchImportVehicleDeviceResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values: 
  * - **true**: The call was successful.
  * - **false**: The call failed.
  *
  * @param request BatchImportVehicleDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchImportVehicleDeviceResponse
 */
async function batchImportVehicleDeviceWithOptions(request: BatchImportVehicleDeviceRequest, runtime: Util.RuntimeOptions): BatchImportVehicleDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceList)) {
    body['DeviceList'] = request.deviceList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchImportVehicleDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Indicates whether the call was successful. Valid values: 
  * - **true**: The call was successful.
  * - **false**: The call failed.
  *
  * @param request BatchImportVehicleDeviceRequest
  * @return BatchImportVehicleDeviceResponse
 */
async function batchImportVehicleDevice(request: BatchImportVehicleDeviceRequest): BatchImportVehicleDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchImportVehicleDeviceWithOptions(request, runtime);
}

model BatchPubRequest {
  deviceName?: [ string ](name='DeviceName', example='newdevice1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  messageContent?: string(name='MessageContent', description='The body of the message to be published. The maximum size of a message is 256 KB.

To generate a message body, you must convert the raw message into binary data and perform Base64 encoding.', example='eyJ0ZXN0IjoidGFzayBiYXRjaHB1YiBicm9hZGNhc3QifQ=='),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
  qos?: int32(name='Qos', description='The quality of service (QoS) level of the message. Valid values:

*   **0**: The message is published at most once.
*   **1**: The message is published at least once.

Default value: **0**.

>  IoT Platform stores QoS 1 messages for up to 7 days. IoT Platform does not store QoS 0 messages.', example='0'),
  topicShortName?: string(name='TopicShortName', description='The suffix of the custom topic.

A custom topic is in the following format: `/${productKey}/${deviceName}/user/${TopicShortName}`. ${TopicShortName} specifies the suffix.

>  You must specify the Subscribe permission, or Publish and Subscribe permissions for the topic. Make sure that all devices subscribe to the topic.

You can use the following methods to view custom topics:

*   On the **Topic Categories** tab of the Product Details page, view the custom topics of the product.
*   On the **Topic List** tab of the Device Details page, view the custom topics to which the device has subscribed.
*   Call the [QueryProductTopic](~~69647~~) operation to query the custom topics of the product.', example='get'),
}

model BatchPubResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model BatchPubResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchPubResponseBody(name='body'),
}

/**
  * *   You can call this operation to publish a message to a maximum of 100 devices of a product at a time.
  * *   The BatchPub operation cannot be used to send commands of setting properties or calling services. If you need to set properties, use the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation. If you need to call services, use the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchPubRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchPubResponse
 */
async function batchPubWithOptions(request: BatchPubRequest, runtime: Util.RuntimeOptions): BatchPubResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.messageContent)) {
    query['MessageContent'] = request.messageContent;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.qos)) {
    query['Qos'] = request.qos;
  }
  if (!Util.isUnset(request.topicShortName)) {
    query['TopicShortName'] = request.topicShortName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchPub',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation to publish a message to a maximum of 100 devices of a product at a time.
  * *   The BatchPub operation cannot be used to send commands of setting properties or calling services. If you need to set properties, use the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation. If you need to call services, use the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchPubRequest
  * @return BatchPubResponse
 */
async function batchPub(request: BatchPubRequest): BatchPubResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchPubWithOptions(request, runtime);
}

model BatchQueryDeviceDetailRequest {
  deviceName?: [ string ](name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64***'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the devices specified by the **DeviceName.N** parameter belong.', example='a1BwAGV****'),
}

model BatchQueryDeviceDetailResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
      deviceSecret?: string(name='DeviceSecret', description='The DeviceSecret of the device.', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
      firmwareVersion?: string(name='FirmwareVersion', description='The firmware version number of the device.', example='V1.0.0.0'),
      gmtActive?: string(name='GmtActive', description='The activation time of the device. The time is displayed in UTC.', example='2019-06-21 20:33:00'),
      gmtCreate?: string(name='GmtCreate', description='The creation time of the device. The time is displayed in UTC.', example='2019-06-21 20:31:42'),
      iotId?: string(name='IotId', description='The unique ID of the device. The device ID is issued by IoT Platform.', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname', description='The alias of the device.'),
      nodeType?: int32(name='NodeType', description='The type of the node. Valid values:

*   **0**: device. Sub-devices cannot be mounted on a gateway. A device can connect to IoT Platform directly or as a sub-device of a gateway.
*   **1**: gateway. Sub-devices can be attached to a gateway. A gateway can manage sub-devices, maintain the topological relationships with sub-devices, and synchronize the topological relationships to IoT Platform.', example='0'),
      productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
      productName?: string(name='ProductName', description='The name of the product to which the device belongs.'),
      region?: string(name='Region', description='The ID of the region where the device resides. The region is the same as the region where IoT Platform resides. You can view the region in the IoT Platform console.', example='cn-shanghai'),
      status?: string(name='Status', description='The status of the device. Valid values:

*   **ONLINE**: The device is online.
*   **OFFLINE**: The device is offline.
*   **UNACTIVE**: The device is not activated.
*   **DISABLE**: The device is disabled.', example='ONLINE'),
      utcActive?: string(name='UtcActive', description='The activation time of the device. The time is displayed in UTC.', example='2019-06-21T12:31:42.000Z'),
      utcCreate?: string(name='UtcCreate', description='The creation time of the device. The time is displayed in UTC.', example='2019-06-21T12:31:42.000Z'),
    }
  ](name='Data')
  }(name='Data', description='The device details returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model BatchQueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchQueryDeviceDetailResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can query a maximum of 100 devices in a single call.
  * *   You can query the details of devices that belong only to the current Alibaba Cloud account. If you specify a device that does not belong to the current account, an error message is returned.
  * *   If you specify multiple devices and some devices do not exist, only the details of existing devices are returned.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchQueryDeviceDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchQueryDeviceDetailResponse
 */
async function batchQueryDeviceDetailWithOptions(request: BatchQueryDeviceDetailRequest, runtime: Util.RuntimeOptions): BatchQueryDeviceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchQueryDeviceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can query a maximum of 100 devices in a single call.
  * *   You can query the details of devices that belong only to the current Alibaba Cloud account. If you specify a device that does not belong to the current account, an error message is returned.
  * *   If you specify multiple devices and some devices do not exist, only the details of existing devices are returned.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchQueryDeviceDetailRequest
  * @return BatchQueryDeviceDetailResponse
 */
async function batchQueryDeviceDetail(request: BatchQueryDeviceDetailRequest): BatchQueryDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchQueryDeviceDetailWithOptions(request, runtime);
}

model BatchRegisterDeviceRequest {
  count?: int32(name='Count', description='The number of devices to be registered.

>  You can register up to 10,000 devices in a single call.', example='100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the devices belong.', example='a1BwAGV****'),
}

model BatchRegisterDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', description='The application ID (ApplyId) returned for the request if the call is successful.', example='1295006'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model BatchRegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchRegisterDeviceResponseBody(name='body'),
}

/**
  * You can use one of the following methods to register multiple devices:
  * *   If you want to generate random DeviceNames, call the BatchRegisterDevice operation.
  *     Perform the following steps to register devices and view the result:
  *     1\\. Call the BatchRegisterDevice operation to register multiple devices. A successful response indicates that the registration request is submitted. The actual registration process is asynchronously implemented and takes some minutes.
  *     2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
  *     3\\. Call the [QueryPageByApplyId](~~69518~~) operation to view the details of registered devices. The details include the DeviceName, DeviceSecret, and IotId parameters.
  * *   If you want to specify custom DeviceNames, call the BatchRegisterDeviceWithApplyId operation. For more information, see [BatchRegisterDeviceWithApplyId](~~69514~~).
  * ## Limits
  * - You can create a maximum of 10,000 devices in a single call.
  * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchRegisterDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchRegisterDeviceResponse
 */
async function batchRegisterDeviceWithOptions(request: BatchRegisterDeviceRequest, runtime: Util.RuntimeOptions): BatchRegisterDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.count)) {
    query['Count'] = request.count;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchRegisterDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use one of the following methods to register multiple devices:
  * *   If you want to generate random DeviceNames, call the BatchRegisterDevice operation.
  *     Perform the following steps to register devices and view the result:
  *     1\\. Call the BatchRegisterDevice operation to register multiple devices. A successful response indicates that the registration request is submitted. The actual registration process is asynchronously implemented and takes some minutes.
  *     2\\. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
  *     3\\. Call the [QueryPageByApplyId](~~69518~~) operation to view the details of registered devices. The details include the DeviceName, DeviceSecret, and IotId parameters.
  * *   If you want to specify custom DeviceNames, call the BatchRegisterDeviceWithApplyId operation. For more information, see [BatchRegisterDeviceWithApplyId](~~69514~~).
  * ## Limits
  * - You can create a maximum of 10,000 devices in a single call.
  * - Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchRegisterDeviceRequest
  * @return BatchRegisterDeviceResponse
 */
async function batchRegisterDevice(request: BatchRegisterDeviceRequest): BatchRegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRegisterDeviceWithOptions(request, runtime);
}

model BatchRegisterDeviceWithApplyIdRequest {
  applyId?: long(name='ApplyId', description='The ID of the application. The application ID is returned by the [BatchCheckDeviceNames](~~69482~~) operation.', example='1295006'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
}

model BatchRegisterDeviceWithApplyIdResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    applyId?: long(name='ApplyId', description='The application ID.', example='1295006'),
  }(name='Data', description='The data returned if the call succeeds. For more information, see the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model BatchRegisterDeviceWithApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchRegisterDeviceWithApplyIdResponseBody(name='body'),
}

/**
  * You can use one of the following methods to register multiple devices at a time:
  * *   Call the [BatchRegisterDevice](~~69473~~) operation to generate random DeviceNames.
  * *   Call the BatchRegisterDeviceWithApplyId and **BatchCheckDeviceNames** operations to specify custom DeviceNames. Procedure:
  *     Call the [BatchCheckDeviceNames](~~69482~~) operation and specify the names of devices that you want to register. If the DeviceNames are valid, IoT Platform returns an application ID that is specified by the **ApplyId** parameter. You can query the DeviceName setting results, device registration results, and device details by **ApplyId**.
  *     Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
  *     Call the BatchRegisterDeviceWithApplyId operation to register multiple devices. The successful result that is returned by this operation indicates that only the batch registration request is submitted. In actual scenarios, the registration process takes a few minutes.
  *     Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
  *     Call the [QueryPageByApplyId](~~69518~~) operation to view the details of devices that are registered in batches.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request BatchRegisterDeviceWithApplyIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchRegisterDeviceWithApplyIdResponse
 */
async function batchRegisterDeviceWithApplyIdWithOptions(request: BatchRegisterDeviceWithApplyIdRequest, runtime: Util.RuntimeOptions): BatchRegisterDeviceWithApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchRegisterDeviceWithApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use one of the following methods to register multiple devices at a time:
  * *   Call the [BatchRegisterDevice](~~69473~~) operation to generate random DeviceNames.
  * *   Call the BatchRegisterDeviceWithApplyId and **BatchCheckDeviceNames** operations to specify custom DeviceNames. Procedure:
  *     Call the [BatchCheckDeviceNames](~~69482~~) operation and specify the names of devices that you want to register. If the DeviceNames are valid, IoT Platform returns an application ID that is specified by the **ApplyId** parameter. You can query the DeviceName setting results, device registration results, and device details by **ApplyId**.
  *     Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the name setting result.
  *     Call the BatchRegisterDeviceWithApplyId operation to register multiple devices. The successful result that is returned by this operation indicates that only the batch registration request is submitted. In actual scenarios, the registration process takes a few minutes.
  *     Optional. Call the [QueryBatchRegisterDeviceStatus](~~69483~~) operation to query the device registration result.
  *     Call the [QueryPageByApplyId](~~69518~~) operation to view the details of devices that are registered in batches.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request BatchRegisterDeviceWithApplyIdRequest
  * @return BatchRegisterDeviceWithApplyIdResponse
 */
async function batchRegisterDeviceWithApplyId(request: BatchRegisterDeviceWithApplyIdRequest): BatchRegisterDeviceWithApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchRegisterDeviceWithApplyIdWithOptions(request, runtime);
}

model BatchSetEdgeInstanceDeviceChannelRequest {
  channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotIds?: [ string ](name='IotIds', example='Hathoyxglj9jpYPyw3WN******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchSetEdgeInstanceDeviceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B0325EA9-671C-460B-B0F3-83F41CFF855B'),
  success?: boolean(name='Success', example='true'),
}

model BatchSetEdgeInstanceDeviceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetEdgeInstanceDeviceChannelResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceChannelWithOptions(request: BatchSetEdgeInstanceDeviceChannelRequest, runtime: Util.RuntimeOptions): BatchSetEdgeInstanceDeviceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetEdgeInstanceDeviceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetEdgeInstanceDeviceChannel(request: BatchSetEdgeInstanceDeviceChannelRequest): BatchSetEdgeInstanceDeviceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetEdgeInstanceDeviceChannelWithOptions(request, runtime);
}

model BatchSetEdgeInstanceDeviceConfigRequest {
  deviceConfigs?: [ 
    {
      content?: string(name='Content', example='{"test": "device_config_demo"}'),
      iotId?: string(name='IotId', example='sjI0Sd124XFYyjBY****000101'),
    }
  ](name='DeviceConfigs'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BatchSetEdgeInstanceDeviceConfigResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='748659E2-EDC9-4E3E-BF9D-06F16995CF66'),
  success?: boolean(name='Success', example='true'),
}

model BatchSetEdgeInstanceDeviceConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchSetEdgeInstanceDeviceConfigResponseBody(name='body'),
}

async function batchSetEdgeInstanceDeviceConfigWithOptions(request: BatchSetEdgeInstanceDeviceConfigRequest, runtime: Util.RuntimeOptions): BatchSetEdgeInstanceDeviceConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceConfigs)) {
    query['DeviceConfigs'] = request.deviceConfigs;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchSetEdgeInstanceDeviceConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchSetEdgeInstanceDeviceConfig(request: BatchSetEdgeInstanceDeviceConfigRequest): BatchSetEdgeInstanceDeviceConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetEdgeInstanceDeviceConfigWithOptions(request, runtime);
}

model BatchUnbindDeviceFromEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance from which you want to unbind multiple devices and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotIds?: [ string ](name='IotIds', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model BatchUnbindDeviceFromEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='34755DC3-2809-4AE2-BAD8-7B81ED69D570'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model BatchUnbindDeviceFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUnbindDeviceFromEdgeInstanceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchUnbindDeviceFromEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchUnbindDeviceFromEdgeInstanceResponse
 */
async function batchUnbindDeviceFromEdgeInstanceWithOptions(request: BatchUnbindDeviceFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): BatchUnbindDeviceFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotIds)) {
    query['IotIds'] = request.iotIds;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindDeviceFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchUnbindDeviceFromEdgeInstanceRequest
  * @return BatchUnbindDeviceFromEdgeInstanceResponse
 */
async function batchUnbindDeviceFromEdgeInstance(request: BatchUnbindDeviceFromEdgeInstanceRequest): BatchUnbindDeviceFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindDeviceFromEdgeInstanceWithOptions(request, runtime);
}

model BatchUnbindProjectDevicesRequest {
  devices?: [ 
    {
      deviceName?: string(name='DeviceName', example='Ee2******'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
    }
  ](name='Devices'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model BatchUnbindProjectDevicesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindProjectDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUnbindProjectDevicesResponseBody(name='body'),
}

async function batchUnbindProjectDevicesWithOptions(request: BatchUnbindProjectDevicesRequest, runtime: Util.RuntimeOptions): BatchUnbindProjectDevicesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.devices)) {
    body['Devices'] = request.devices;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindProjectDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindProjectDevices(request: BatchUnbindProjectDevicesRequest): BatchUnbindProjectDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindProjectDevicesWithOptions(request, runtime);
}

model BatchUnbindProjectProductsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKeys?: [ string ](name='ProductKeys', example='a1BwAGV****'),
  projectId?: string(name='ProjectId', example='a123********'),
}

model BatchUnbindProjectProductsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model BatchUnbindProjectProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUnbindProjectProductsResponseBody(name='body'),
}

async function batchUnbindProjectProductsWithOptions(request: BatchUnbindProjectProductsRequest, runtime: Util.RuntimeOptions): BatchUnbindProjectProductsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKeys)) {
    body['ProductKeys'] = request.productKeys;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchUnbindProjectProducts',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchUnbindProjectProducts(request: BatchUnbindProjectProductsRequest): BatchUnbindProjectProductsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUnbindProjectProductsWithOptions(request, runtime);
}

model BatchUpdateDeviceNicknameRequest {
  deviceNicknameInfo?: [ 
    {
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
      iotId?: string(name='IotId', description='The ID of the device.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname', description='The new alias of the device. The alias must be 4 to 32 characters in length, and can contain letters, digits, and underscores (\\_). Each Chinese character is counted as two characters.

>  If you do not specify this parameter, the original alias of the device will be deleted.', example='AliyunDataCenter'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
    }
  ](name='DeviceNicknameInfo'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model BatchUpdateDeviceNicknameResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model BatchUpdateDeviceNicknameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchUpdateDeviceNicknameResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchUpdateDeviceNicknameRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchUpdateDeviceNicknameResponse
 */
async function batchUpdateDeviceNicknameWithOptions(request: BatchUpdateDeviceNicknameRequest, runtime: Util.RuntimeOptions): BatchUpdateDeviceNicknameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceNicknameInfo)) {
    query['DeviceNicknameInfo'] = request.deviceNicknameInfo;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchUpdateDeviceNickname',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BatchUpdateDeviceNicknameRequest
  * @return BatchUpdateDeviceNicknameResponse
 */
async function batchUpdateDeviceNickname(request: BatchUpdateDeviceNicknameRequest): BatchUpdateDeviceNicknameResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchUpdateDeviceNicknameWithOptions(request, runtime);
}

model BindApplicationToEdgeInstanceRequest {
  applicationId?: string(name='ApplicationId', example='361368ba5a094da9bf5625d092******'),
  applicationVersion?: string(name='ApplicationVersion', example='3.7'),
  instanceId?: string(name='InstanceId', example='Tb4r9k3GWHJFWv******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model BindApplicationToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='86B23D5F-BF86-4F29-82E2-686D7B4D9AAA'),
  success?: boolean(name='Success', example='true'),
}

model BindApplicationToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindApplicationToEdgeInstanceResponseBody(name='body'),
}

async function bindApplicationToEdgeInstanceWithOptions(request: BindApplicationToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindApplicationToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.applicationVersion)) {
    query['ApplicationVersion'] = request.applicationVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindApplicationToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindApplicationToEdgeInstance(request: BindApplicationToEdgeInstanceRequest): BindApplicationToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindApplicationToEdgeInstanceWithOptions(request, runtime);
}

model BindDriverToEdgeInstanceRequest {
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver that you want to bind and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='9c1ae7bd59f1469abbdccc959228****'),
  driverVersion?: string(name='DriverVersion', description='The version number of the driver. By default, if you do not specify this parameter, the latest version of the driver is used.', example='2.0.0'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance to which you want to bind a driver and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  orderId?: string(name='OrderId', description='The ID of the order.

>  This parameter is required if you use a third-party driver that is purchased from the IoT marketplace. If an official or self-developed driver is used, you do not need to specify this parameter.', example='11123458765****'),
}

model BindDriverToEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model BindDriverToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindDriverToEdgeInstanceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BindDriverToEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BindDriverToEdgeInstanceResponse
 */
async function bindDriverToEdgeInstanceWithOptions(request: BindDriverToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindDriverToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindDriverToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BindDriverToEdgeInstanceRequest
  * @return BindDriverToEdgeInstanceResponse
 */
async function bindDriverToEdgeInstance(request: BindDriverToEdgeInstanceRequest): BindDriverToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindDriverToEdgeInstanceWithOptions(request, runtime);
}

model BindGatewayToEdgeInstanceRequest {
  deviceName?: string(name='DeviceName', description='The name of the gateway.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='device1'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance to which you want to bind a gateway and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotId?: string(name='IotId', description='The ID of the gateway in IoT Platform. This parameter corresponds to the combination of the **ProductKey** and **DeviceName** parameters.

>  If you specify this parameter, you do not need to specify the **ProductKey** or **DeviceName** parameter. If you use the **IotId** parameter and the combination of the **ProductKey** and **DeviceName** parameters, only the **IotId** parameter takes effect.', example='4z819VQHk6VSLmmBJfrf0010******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The key that uniquely identifies the product to which the gateway belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1mAdeG****'),
}

model BindGatewayToEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model BindGatewayToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindGatewayToEdgeInstanceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BindGatewayToEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BindGatewayToEdgeInstanceResponse
 */
async function bindGatewayToEdgeInstanceWithOptions(request: BindGatewayToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindGatewayToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindGatewayToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request BindGatewayToEdgeInstanceRequest
  * @return BindGatewayToEdgeInstanceResponse
 */
async function bindGatewayToEdgeInstance(request: BindGatewayToEdgeInstanceRequest): BindGatewayToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindGatewayToEdgeInstanceWithOptions(request, runtime);
}

model BindLicenseDeviceRequest {
  deviceNameList?: [ string ](name='DeviceNameList'),
  iotIdList?: [ string ](name='IotIdList'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  licenseCode?: string(name='LicenseCode', example='720P'),
  productKey?: string(name='ProductKey', example='a2YwD23***'),
}

model BindLicenseDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    checkProgressId?: string(name='CheckProgressId', example='123***'),
    failSum?: long(name='FailSum', example='2'),
    progress?: int32(name='Progress', example='100'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***'),
    successSum?: long(name='SuccessSum', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model BindLicenseDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindLicenseDeviceResponseBody(name='body'),
}

async function bindLicenseDeviceWithOptions(request: BindLicenseDeviceRequest, runtime: Util.RuntimeOptions): BindLicenseDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceNameList)) {
    body['DeviceNameList'] = request.deviceNameList;
  }
  if (!Util.isUnset(request.iotIdList)) {
    body['IotIdList'] = request.iotIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BindLicenseDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindLicenseDevice(request: BindLicenseDeviceRequest): BindLicenseDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindLicenseDeviceWithOptions(request, runtime);
}

model BindLicenseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-23***'),
  licenseCode?: string(name='LicenseCode', example='480P'),
  productKey?: string(name='ProductKey', example='a1BwAGV***'),
}

model BindLicenseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model BindLicenseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindLicenseProductResponseBody(name='body'),
}

async function bindLicenseProductWithOptions(request: BindLicenseProductRequest, runtime: Util.RuntimeOptions): BindLicenseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindLicenseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindLicenseProduct(request: BindLicenseProductRequest): BindLicenseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindLicenseProductWithOptions(request, runtime);
}

model BindRoleToEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  roleArn?: string(name='RoleArn', example='acs:ram::176********:role/iotedgerole'),
  roleName?: string(name='RoleName', example='IoTEdgeRole'),
}

model BindRoleToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3DE428F8-22AF-4B37-8FEC-E64CFBE4A125'),
  success?: boolean(name='Success', example='true'),
}

model BindRoleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindRoleToEdgeInstanceResponseBody(name='body'),
}

async function bindRoleToEdgeInstanceWithOptions(request: BindRoleToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindRoleToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindRoleToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindRoleToEdgeInstance(request: BindRoleToEdgeInstanceRequest): BindRoleToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindRoleToEdgeInstanceWithOptions(request, runtime);
}

model BindSceneRuleToEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='llL44UVXUqb9m5******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model BindSceneRuleToEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA909EK'),
  success?: boolean(name='Success', example='true'),
}

model BindSceneRuleToEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BindSceneRuleToEdgeInstanceResponseBody(name='body'),
}

async function bindSceneRuleToEdgeInstanceWithOptions(request: BindSceneRuleToEdgeInstanceRequest, runtime: Util.RuntimeOptions): BindSceneRuleToEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BindSceneRuleToEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindSceneRuleToEdgeInstance(request: BindSceneRuleToEdgeInstanceRequest): BindSceneRuleToEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindSceneRuleToEdgeInstanceWithOptions(request, runtime);
}

model CancelJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
}

model CancelJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='C25255EA-9F6E-4E04-85FE-AC1E9C136EBB'),
  success?: boolean(name='Success', example='true'),
}

model CancelJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelJobResponseBody(name='body'),
}

async function cancelJobWithOptions(request: CancelJobRequest, runtime: Util.RuntimeOptions): CancelJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelJob(request: CancelJobRequest): CancelJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelJobWithOptions(request, runtime);
}

model CancelOTAStrategyByJobRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', description='The ID of the update batch.

After you call the [CreateOTADynamicUpgradeJob](~~147887~~) operation to create an update batch, the **JobId** parameter is returned. You can also view the batch ID on the **Firmware Details** page of the IoT Platform console.', example='HvKuBpuk3rdk6E92CP****0200'),
}

model CancelOTAStrategyByJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CancelOTAStrategyByJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOTAStrategyByJobResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can cancel only the dynamic update policy that is attached to a dynamic update batch. This operation is not applicable to static update batches.
  *     After the operation is successful, the **JobStatus** parameter is set to CANCELED.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CancelOTAStrategyByJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelOTAStrategyByJobResponse
 */
async function cancelOTAStrategyByJobWithOptions(request: CancelOTAStrategyByJobRequest, runtime: Util.RuntimeOptions): CancelOTAStrategyByJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOTAStrategyByJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can cancel only the dynamic update policy that is attached to a dynamic update batch. This operation is not applicable to static update batches.
  *     After the operation is successful, the **JobStatus** parameter is set to CANCELED.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CancelOTAStrategyByJobRequest
  * @return CancelOTAStrategyByJobResponse
 */
async function cancelOTAStrategyByJob(request: CancelOTAStrategyByJobRequest): CancelOTAStrategyByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTAStrategyByJobWithOptions(request, runtime);
}

model CancelOTATaskByDeviceRequest {
  deviceName?: [ string ](name='DeviceName', example='device1'),
  firmwareId?: string(name='FirmwareId', description='The unique ID of the OTA update package.

An update package ID is returned after you call the [CreateOTAFirmware](~~147311~~) operation to create the update package.

You can call the [ListOTAFirmware](~~147450~~) operation and view the update package ID in the response.', example='T0F5b5tpFnHQrgfk****030100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', description='The ID of the update batch. If you configure this parameter, only the device update tasks in the specified update batch are deleted.

After you call the [CreateOTAVerifyJob](~~147480~~), [CreateOTAStaticUpgradeJob](~~147496~~), or [CreateOTADynamicUpgradeJob](~~147887~~) operation to create a device update task, you can obtain the value of the **JobId** parameter. You can also view the batch ID on the **Firmware Details** page in the IoT Platform console.', example='wahVIzGkCMuAUE2gDERM02****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1V4kde****'),
}

model CancelOTATaskByDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CancelOTATaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOTATaskByDeviceResponseBody(name='body'),
}

/**
  * This operation can cancel device update tasks only when the tasks are in the to be pushed, pushed, or in upgrade state.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request CancelOTATaskByDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelOTATaskByDeviceResponse
 */
async function cancelOTATaskByDeviceWithOptions(request: CancelOTATaskByDeviceRequest, runtime: Util.RuntimeOptions): CancelOTATaskByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOTATaskByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation can cancel device update tasks only when the tasks are in the to be pushed, pushed, or in upgrade state.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request CancelOTATaskByDeviceRequest
  * @return CancelOTATaskByDeviceResponse
 */
async function cancelOTATaskByDevice(request: CancelOTATaskByDeviceRequest): CancelOTATaskByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTATaskByDeviceWithOptions(request, runtime);
}

model CancelOTATaskByJobRequest {
  cancelInProgressTask?: boolean(name='CancelInProgressTask', description='Specifies whether to cancel the update tasks that are in the **IN_PROGRESS** state in an update batch. Default value: false. Valid values:

*   **true**: cancel the update tasks that are in the IN_PROGRESS state.
*   **false**: do not cancel the update tasks that are in the IN_PROGRESS state.', example='false'),
  cancelNotifiedTask?: boolean(name='CancelNotifiedTask', description='Specifies whether to cancel the update tasks that are in the **NOTIFIED** state in an update batch. Default value: false. Valid values:

*   **true**: cancel the update tasks that are in the NOTIFIED state.
*   **false**: do not cancel the update tasks that are in the NOTIFIED state.', example='false'),
  cancelQueuedTask?: boolean(name='CancelQueuedTask', description='Specifies whether to cancel the update tasks that are in the **QUEUED** state in an update batch. Default value: false. Valid values:

*   **true**: cancel the update tasks that are in the NOTIFIED state.
*   **false**: do not cancel the update tasks that are in the NOTIFIED state.

> If you set this parameter to **true** and specify the **CancelUnconfirmedTask** parameter, only the update tasks that are in the QUEUED state are canceled. If you do not specify the **CancelUnconfirmedTask** parameter, the update tasks that are in the QUEUED or CONFIRM state are canceled.', example='false'),
  cancelScheduledTask?: boolean(name='CancelScheduledTask', description='Specifies whether to cancel update tasks of a scheduled update batch. If you specify the **ScheduleTime** parameter when you call the [CreateOTAStaticUpgradeJob](~~147496~~) operation, a scheduled update batch is created. Default value: false. Valid values:

*   **true**: cancel update tasks of a scheduled update batch.
*   **false**: do not cancel update tasks of a scheduled update batch.', example='false'),
  cancelUnconfirmedTask?: boolean(name='CancelUnconfirmedTask', description='Specifies whether to cancel the update tasks that are in the **CONFIRM** state in an update batch. Default value: false. Valid values:

*   **true**: cancel the update tasks that are in the CONFIRM state.
*   **false**: do not cancel the update tasks that are in the CONFIRM state.

This parameter is empty by default.

> If you do not specify this parameter and set the **CancelQueuedTask** parameter to **true**, the update tasks that are in the CONFIRM state are canceled. If you set the **CancelQueuedTask** parameter to **false**, the update tasks that are in the CONFIRM state are not canceled.', example='false'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can obtain the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify this parameter. Otherwise, the call fails.
>*   If the **Overview** page or an instance ID is not displayed in the IoT Platform console, ignore this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', description='The ID of the update batch.

Use the value that is returned for the **JobId** parameter contained in the response of the [CreateOTAStaticUpgradeJob](~~147496~~) or [CreateOTADynamicUpgradeJob](~~147887~~) operation. You can also obtain the batch ID on the **Firmware Details** page of the IoT Platform console.', example='7glPHmaDYLAYMD1HHutT02****'),
}

model CancelOTATaskByJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**
*   **false**', example='true'),
}

model CancelOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOTATaskByJobResponseBody(name='body'),
}

/**
  * When you call this operation, make sure that you specify at least one of the CancelScheduledTask, CancelQueuedTask, CancelInProgressTask, CancelNotifiedTask, and CancelUnconfirmedTask parameters. Otherwise, the request will fail.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CancelOTATaskByJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelOTATaskByJobResponse
 */
async function cancelOTATaskByJobWithOptions(request: CancelOTATaskByJobRequest, runtime: Util.RuntimeOptions): CancelOTATaskByJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cancelInProgressTask)) {
    query['CancelInProgressTask'] = request.cancelInProgressTask;
  }
  if (!Util.isUnset(request.cancelNotifiedTask)) {
    query['CancelNotifiedTask'] = request.cancelNotifiedTask;
  }
  if (!Util.isUnset(request.cancelQueuedTask)) {
    query['CancelQueuedTask'] = request.cancelQueuedTask;
  }
  if (!Util.isUnset(request.cancelScheduledTask)) {
    query['CancelScheduledTask'] = request.cancelScheduledTask;
  }
  if (!Util.isUnset(request.cancelUnconfirmedTask)) {
    query['CancelUnconfirmedTask'] = request.cancelUnconfirmedTask;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOTATaskByJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, make sure that you specify at least one of the CancelScheduledTask, CancelQueuedTask, CancelInProgressTask, CancelNotifiedTask, and CancelUnconfirmedTask parameters. Otherwise, the request will fail.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CancelOTATaskByJobRequest
  * @return CancelOTATaskByJobResponse
 */
async function cancelOTATaskByJob(request: CancelOTATaskByJobRequest): CancelOTATaskByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOTATaskByJobWithOptions(request, runtime);
}

model CancelReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to be unpublished.', example='a1BwAGV****'),
}

model CancelReleaseProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CancelReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelReleaseProductResponseBody(name='body'),
}

/**
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CancelReleaseProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelReleaseProductResponse
 */
async function cancelReleaseProductWithOptions(request: CancelReleaseProductRequest, runtime: Util.RuntimeOptions): CancelReleaseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelReleaseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CancelReleaseProductRequest
  * @return CancelReleaseProductResponse
 */
async function cancelReleaseProduct(request: CancelReleaseProductRequest): CancelReleaseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelReleaseProductWithOptions(request, runtime);
}

model CheckBindLicenseDeviceProgressRequest {
  checkProgressId?: string(name='CheckProgressId', example='23****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2ws****'),
  licenseCode?: string(name='LicenseCode', example='720P'),
  productKey?: string(name='ProductKey', example='uhf5****'),
}

model CheckBindLicenseDeviceProgressResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    failSum?: long(name='FailSum', example='1'),
    progress?: int32(name='Progress', example='80'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***.oss-***.aliyuncs.com/license_device_***/***/d***h/c***.csv?Expires=16***&OSSAccessKeyId=L***&Signature=***'),
    successSum?: long(name='SuccessSum', example='9'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CheckBindLicenseDeviceProgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckBindLicenseDeviceProgressResponseBody(name='body'),
}

async function checkBindLicenseDeviceProgressWithOptions(request: CheckBindLicenseDeviceProgressRequest, runtime: Util.RuntimeOptions): CheckBindLicenseDeviceProgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.checkProgressId)) {
    query['CheckProgressId'] = request.checkProgressId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckBindLicenseDeviceProgress',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkBindLicenseDeviceProgress(request: CheckBindLicenseDeviceProgressRequest): CheckBindLicenseDeviceProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkBindLicenseDeviceProgressWithOptions(request, runtime);
}

model ClearDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify a value for this parameter, you must configure the **ProductKey** parameter.', example='light'),
  identifies?: [ string ](name='Identifies', example='temperature'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  The IotId parameter specifies a globally unique identifier (GUID) for the device. The value of the **IotId** parameter is equivalent to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for the IotId parameter, you do not need to configure the **ProductKey** or **DeviceName** parameter. If you specify values for the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.****

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-2w****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.

>  If you specify a value for this parameter, you must configure the **DeviceName** parameter.', example='a1BwAGV****'),
}

model ClearDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see the "**Error codes**" section of this topic.', example='iot.system.SystemException'),
  data?: {
    versions?: string(name='Versions', description='The latest version of the desired values of the properties after you call this operation to delete the specified desired property values.', example='{\\"temperature\\":0}'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ClearDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearDeviceDesiredPropertyResponseBody(name='body'),
}

/**
  * *   Each time you call this operation, you must specify the identifiers of properties whose desired values you want to delete for the **Identifies** parameter. If you do not configure the **Identifies** parameter, the call fails.
  * *   You can specify up to 10 property identifiers for the **Identifies** parameter in a single call.
  * *   After you call this operation to deletes the desired values of properties of a device, you can call the [QueryDeviceDesiredProperty](~~107566~~) operation to query the desired values of properties of the device. In this case, the QueryDeviceDesiredProperty operation returns the **Identifier** parameter instead of the **Value** parameter.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ClearDeviceDesiredPropertyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ClearDeviceDesiredPropertyResponse
 */
async function clearDeviceDesiredPropertyWithOptions(request: ClearDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): ClearDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.identifies)) {
    body['Identifies'] = request.identifies;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ClearDeviceDesiredProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Each time you call this operation, you must specify the identifiers of properties whose desired values you want to delete for the **Identifies** parameter. If you do not configure the **Identifies** parameter, the call fails.
  * *   You can specify up to 10 property identifiers for the **Identifies** parameter in a single call.
  * *   After you call this operation to deletes the desired values of properties of a device, you can call the [QueryDeviceDesiredProperty](~~107566~~) operation to query the desired values of properties of the device. In this case, the QueryDeviceDesiredProperty operation returns the **Identifier** parameter instead of the **Value** parameter.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ClearDeviceDesiredPropertyRequest
  * @return ClearDeviceDesiredPropertyResponse
 */
async function clearDeviceDesiredProperty(request: ClearDeviceDesiredPropertyRequest): ClearDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearDeviceDesiredPropertyWithOptions(request, runtime);
}

model ClearEdgeInstanceDriverConfigsRequest {
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver whose configurations you want to delete and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that uses the driver and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='This parameter is not required for the public instance but required for your purchased instances.', example='iot_instc_pu****_c*-v64********'),
}

model ClearEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DF6B728B-ADD7-4C41-88C3-D21B4CA82CF1'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model ClearEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ClearEdgeInstanceDriverConfigsResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ClearEdgeInstanceDriverConfigsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ClearEdgeInstanceDriverConfigsResponse
 */
async function clearEdgeInstanceDriverConfigsWithOptions(request: ClearEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): ClearEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ClearEdgeInstanceDriverConfigs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ClearEdgeInstanceDriverConfigsRequest
  * @return ClearEdgeInstanceDriverConfigsResponse
 */
async function clearEdgeInstanceDriverConfigs(request: ClearEdgeInstanceDriverConfigsRequest): ClearEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model CloseDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
}

model CloseDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CloseDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseDeviceTunnelResponseBody(name='body'),
}

async function closeDeviceTunnelWithOptions(request: CloseDeviceTunnelRequest, runtime: Util.RuntimeOptions): CloseDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tunnelId)) {
    query['TunnelId'] = request.tunnelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function closeDeviceTunnel(request: CloseDeviceTunnelRequest): CloseDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDeviceTunnelWithOptions(request, runtime);
}

model CloseEdgeInstanceDeploymentRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance for which you want to stop deployment tasks and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model CloseEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3C969586-3DD1-41A7-9B8E-E8B134CA6600'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model CloseEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CloseEdgeInstanceDeploymentResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CloseEdgeInstanceDeploymentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CloseEdgeInstanceDeploymentResponse
 */
async function closeEdgeInstanceDeploymentWithOptions(request: CloseEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): CloseEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CloseEdgeInstanceDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CloseEdgeInstanceDeploymentRequest
  * @return CloseEdgeInstanceDeploymentResponse
 */
async function closeEdgeInstanceDeployment(request: CloseEdgeInstanceDeploymentRequest): CloseEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeEdgeInstanceDeploymentWithOptions(request, runtime);
}

model ConfirmOTATaskRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64********'),
  taskId?: [ string ](name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
}

model ConfirmOTATaskResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ConfirmOTATaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmOTATaskResponseBody(name='body'),
}

/**
  * To confirm update tasks in a scheduled update batch, you must call this operation within the specified time range.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ConfirmOTATaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ConfirmOTATaskResponse
 */
async function confirmOTATaskWithOptions(request: ConfirmOTATaskRequest, runtime: Util.RuntimeOptions): ConfirmOTATaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmOTATask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To confirm update tasks in a scheduled update batch, you must call this operation within the specified time range.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ConfirmOTATaskRequest
  * @return ConfirmOTATaskResponse
 */
async function confirmOTATask(request: ConfirmOTATaskRequest): ConfirmOTATaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmOTATaskWithOptions(request, runtime);
}

model CopyThingModelRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. On the **Overview** page in the IoT Platform console, you can view the ID of the instance.

>*   If your instance has an ID, you must specify this parameter. Otherwise, the call fails.
>*   If the **Overview** page or instance ID is not displayed in the IoT Platform console, ignore this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

>  You do not need to configure this parameter.', example='rg-acfm4l5tcwd****'),
  sourceModelVersion?: string(name='SourceModelVersion', description='The version of the TSL model that you want to copy.

You can call the [ListThingModelVersion](~~150318~~) operation to view the TSL model versions of a product.', example='V1.0.0'),
  sourceProductKey?: string(name='SourceProductKey', description='The ProductKey of the source product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwAGV****'),
  targetProductKey?: string(name='TargetProductKey', description='The ProductKey of the destination product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwwG0****'),
}

model CopyThingModelResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CopyThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyThingModelResponseBody(name='body'),
}

/**
  * *   If a destination product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you can copy a TSL model.
  * *   The categories of the source product and destination product must be the same. The product category is indicated by the **CategoryKey** parameter. You can call the [QueryProduct](~~69272~~) operation and view the **CategoryKey** parameter of a product in the returned result.
  * *   You must specify the version of the TSL model that you want to copy by using the **SourceModelVersion** parameter in the request. Otherwise, the CopyThingModel operation fails.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to five queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CopyThingModelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CopyThingModelResponse
 */
async function copyThingModelWithOptions(request: CopyThingModelRequest, runtime: Util.RuntimeOptions): CopyThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sourceModelVersion)) {
    query['SourceModelVersion'] = request.sourceModelVersion;
  }
  if (!Util.isUnset(request.sourceProductKey)) {
    query['SourceProductKey'] = request.sourceProductKey;
  }
  if (!Util.isUnset(request.targetProductKey)) {
    query['TargetProductKey'] = request.targetProductKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If a destination product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you can copy a TSL model.
  * *   The categories of the source product and destination product must be the same. The product category is indicated by the **CategoryKey** parameter. You can call the [QueryProduct](~~69272~~) operation and view the **CategoryKey** parameter of a product in the returned result.
  * *   You must specify the version of the TSL model that you want to copy by using the **SourceModelVersion** parameter in the request. Otherwise, the CopyThingModel operation fails.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to five queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CopyThingModelRequest
  * @return CopyThingModelResponse
 */
async function copyThingModel(request: CopyThingModelRequest): CopyThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyThingModelWithOptions(request, runtime);
}

model CountSpeechBroadcastHourRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  queryDateTimeHour?: string(name='QueryDateTimeHour', example='2020090919'),
  shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
}

model CountSpeechBroadcastHourResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  data?: int32(name='Data', example='1000'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CountSpeechBroadcastHourResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CountSpeechBroadcastHourResponseBody(name='body'),
}

async function countSpeechBroadcastHourWithOptions(request: CountSpeechBroadcastHourRequest, runtime: Util.RuntimeOptions): CountSpeechBroadcastHourResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryDateTimeHour)) {
    query['QueryDateTimeHour'] = request.queryDateTimeHour;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.shareTaskCode)) {
    body['ShareTaskCode'] = request.shareTaskCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CountSpeechBroadcastHour',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countSpeechBroadcastHour(request: CountSpeechBroadcastHourRequest): CountSpeechBroadcastHourResponse {
  var runtime = new Util.RuntimeOptions{};
  return countSpeechBroadcastHourWithOptions(request, runtime);
}

model CreateConsumerGroupRequest {
  groupName?: string(name='GroupName', description='The name of the consumer group. The name must be 4 to 30 characters in length and can contain letters, digits, and underscores (\\_).'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  subBizCode?: string(name='SubBizCode'),
  type?: string(name='Type'),
}

model CreateConsumerGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  groupId?: string(name='GroupId', description='The ID of the consumer group.', example='nJRaJPn5U1JITGf******'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConsumerGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateConsumerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroupWithOptions(request: CreateConsumerGroupRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.subBizCode)) {
    query['SubBizCode'] = request.subBizCode;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateConsumerGroupRequest
  * @return CreateConsumerGroupResponse
 */
async function createConsumerGroup(request: CreateConsumerGroupRequest): CreateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupWithOptions(request, runtime);
}

model CreateConsumerGroupSubscribeRelationRequest {
  consumerGroupId?: string(name='ConsumerGroupId', description='The ID of the consumer group. After you call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group, the consumer group ID is returned. You can call the [QueryConsumerGroupList](~~170419~~) operation to query the consumer group ID by group name. You can also go to the IoT Platform console,and choose **Rules** > **Server-side Subscription** > **Consumer Groups** to view the consumer group ID.', example='nJRaJPn5U1JITGfjBO9l00****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product that is specified for the subscription.', example='a1fyXVF****'),
}

model CreateConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateConsumerGroupSubscribeRelationResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateConsumerGroupSubscribeRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateConsumerGroupSubscribeRelationResponse
 */
async function createConsumerGroupSubscribeRelationWithOptions(request: CreateConsumerGroupSubscribeRelationRequest, runtime: Util.RuntimeOptions): CreateConsumerGroupSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupId)) {
    query['ConsumerGroupId'] = request.consumerGroupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateConsumerGroupSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateConsumerGroupSubscribeRelationRequest
  * @return CreateConsumerGroupSubscribeRelationResponse
 */
async function createConsumerGroupSubscribeRelation(request: CreateConsumerGroupSubscribeRelationRequest): CreateConsumerGroupSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createConsumerGroupSubscribeRelationWithOptions(request, runtime);
}

model CreateDataAPIServiceRequest {
  apiPath?: string(name='ApiPath', example='device/getDeviceCountByStatus'),
  desc?: string(name='Desc'),
  displayName?: string(name='DisplayName'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  originSql?: string(name='OriginSql', example='SELECT COUNT(iot_id) AS deviceCount FROM ${system.device} WHERE status=1'),
  requestParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example', example='dksiaiek23s'),
      name?: string(name='Name', example='status'),
      required?: boolean(name='Required', example='true'),
      type?: string(name='Type', example='VARCHAR'),
    }
  ](name='RequestParam'),
  responseParam?: [ 
    {
      desc?: string(name='Desc'),
      example?: string(name='Example', example='100'),
      name?: string(name='Name', example='deviceCount'),
      required?: boolean(name='Required', example='true'),
      type?: string(name='Type', example='INTEGER'),
    }
  ](name='ResponseParam'),
  templateSql?: string(name='TemplateSql', example='SELECT COUNT(iot_id) AS deviceCount FROM ${system.device} WHERE status=${status}'),
}

model CreateDataAPIServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    createTime?: long(name='CreateTime', example='1557839468865'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1557839468865'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataAPIServiceResponseBody(name='body'),
}

async function createDataAPIServiceWithOptions(request: CreateDataAPIServiceRequest, runtime: Util.RuntimeOptions): CreateDataAPIServiceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiPath)) {
    body['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.desc)) {
    body['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.displayName)) {
    body['DisplayName'] = request.displayName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.originSql)) {
    body['OriginSql'] = request.originSql;
  }
  if (!Util.isUnset(request.requestParam)) {
    body['RequestParam'] = request.requestParam;
  }
  if (!Util.isUnset(request.responseParam)) {
    body['ResponseParam'] = request.responseParam;
  }
  if (!Util.isUnset(request.templateSql)) {
    body['TemplateSql'] = request.templateSql;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataAPIService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataAPIService(request: CreateDataAPIServiceRequest): CreateDataAPIServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataAPIServiceWithOptions(request, runtime);
}

model CreateDataSourceItemRequest {
  dataSourceId?: long(name='DataSourceId', example='1002'),
  deviceName?: string(name='DeviceName', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t***'),
  productKey?: string(name='ProductKey', example='gy***z'),
  scopeType?: string(name='ScopeType', example='PRODUCT'),
  topic?: string(name='Topic', example='/as/mqtt/status/gy***z/+'),
}

model CreateDataSourceItemResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CreateDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDataSourceItemResponseBody(name='body'),
}

async function createDataSourceItemWithOptions(request: CreateDataSourceItemRequest, runtime: Util.RuntimeOptions): CreateDataSourceItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.scopeType)) {
    query['ScopeType'] = request.scopeType;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataSourceItem',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataSourceItem(request: CreateDataSourceItemRequest): CreateDataSourceItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataSourceItemWithOptions(request, runtime);
}

model CreateDestinationRequest {
  configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  name?: string(name='Name', example='DataPurpose'),
  type?: string(name='Type', example='REPUBLISH'),
}

model CreateDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destination?: {
    configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
    destinationId?: long(name='DestinationId', example='1003'),
    isFailover?: boolean(name='IsFailover', example='false'),
    name?: string(name='Name', example='DataPurpose'),
    type?: string(name='Type', example='REPUBLISH'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='Destination'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model CreateDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDestinationResponseBody(name='body'),
}

async function createDestinationWithOptions(request: CreateDestinationRequest, runtime: Util.RuntimeOptions): CreateDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDestination(request: CreateDestinationRequest): CreateDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDestinationWithOptions(request, runtime);
}

model CreateDeviceDistributeJobRequest {
  deviceName?: [ string ](name='DeviceName', description='The names of the devices to be distributed. You can specify a maximum of 10,000 device names.', example='RepeatList'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance to which the device belongs.

*   The IDs of public instances in different regions:

    *   China (Shanghai): iotx-oxssharez200.
    *   Japan (Tokyo): iotx-oxssharez300.
    *   Singapore (Singapore): iotx-oxssharez400.
    *   US (Silicon Valley): iotx-oxssharez500.
    *   US (Virginia): iotx-oxssharez600.
    *   Germany (Frankfurt): iotx-oxssharez700.

*   The IDs of Enterprise Edition instances:

    1\\. Log on to the IoT Platform console. Select a region from the drop-down list in the upper-left corner of the top navigation bar.

    2\\. On the **Overview** page, click the instance name. On the **Instance Details** page, view the instance ID in the **Basic Information** section.', example='iot-060***'),
  strategy?: int32(name='Strategy', description='The distribution policy. Default value: 0.

*   **0**: distributes devices to instances in a specified region.
*   **1**: configures instance IDs in multiple regions and distributes devices to the nearest regions based on the IP addresses of the devices.', example='0'),
  targetAliyunId?: string(name='TargetAliyunId', description='The Alibaba Cloud account to which the device belongs. You can log on to the IoT Platform console, click the profile picture, and then view the account ID on the **Security Settings** page.

The **TargetUid** and **TargetAliyunId** parameters cannot be left empty at the same time.', example='io****@example.com'),
  targetInstanceConfig?: [ 
    {
      targetInstanceId?: string(name='TargetInstanceId', description='The configurations of the destination instance to which the device is distributed. For more information about instance IDs, see the description of the **SourceInstanceId** parameter.

*   If the value of the **Strategy** parameter is **1**, you can specify multiple instance IDs.
*   If the value of the **Strategy** parameter is **0**, you can specify only one instance ID.', example='iot-cn-6ja***'),
    }
  ](name='TargetInstanceConfig'),
  targetUid?: string(name='TargetUid', description='The ID of the Alibaba Cloud account to which the device belongs. You can log on to the IoT Platform console, click the profile picture, and then view the account ID on the **Security Settings** page.

The **TargetUid** and **TargetAliyunId** parameters cannot be left empty at the same time.', example='198***'),
}

model CreateDeviceDistributeJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  jobId?: string(name='JobId', description='The task ID returned if the call is successful. The ID globally identifies the task.', example='UbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceDistributeJobResponseBody(name='body'),
}

/**
  * To distribute devices, perform the following steps:
  * 1\\. Asynchronously call this operation to create a device distribution task and obtain the **JobId** parameter.
  * 2\\. Use **JobId** as a request parameter and repeatedly call the [QueryDeviceDistributeJob](~~199536~~) operation to obtain the **Status** parameter.
  * >  You must control the frequency of calls based on the QPS limit of the QueryDeviceDistributeJob operation.
  * If either of the following values is returned for the **Status** parameter, the distribution task ends:
  * *   **2**: The device distribution task is completed. This return value does not indicate that the devices are distributed. To obtain the distribution result of each device, perform the next step.
  * *   **3**: The distribution is unexpectedly interrupted. After you process the error, you can initiate a device distribution task again.
  * 3\\. Use **JobId** that is returned in Step 1 as a request parameter and call the [QueryDeviceDistributeDetail](~~199533~~) operation to obtain the **File** parameter. The File parameter indicates the file URL of the distribution result.
  * >  The file URL is valid for 10 minutes.
  * 4\\. Obtain the distribution result by using the file URL. The **Code** parameter indicates whether a device is distributed. If the value of the **Code** parameter is 200, the device is distributed.
  * If the distribution fails, you can perform the preceding steps to distribute devices again.
  * ## Limits
  * - This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * - You cannot call this operation to distribute devices across accounts.
  * - Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a product distribution task, see [CreateProductDistributeJob](/help/en/iot-platform/latest/createproductdistributejob).
  * - Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateDeviceDistributeJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDeviceDistributeJobResponse
 */
async function createDeviceDistributeJobWithOptions(request: CreateDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): CreateDeviceDistributeJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    body['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.strategy)) {
    body['Strategy'] = request.strategy;
  }
  if (!Util.isUnset(request.targetAliyunId)) {
    body['TargetAliyunId'] = request.targetAliyunId;
  }
  if (!Util.isUnset(request.targetInstanceConfig)) {
    body['TargetInstanceConfig'] = request.targetInstanceConfig;
  }
  if (!Util.isUnset(request.targetUid)) {
    body['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To distribute devices, perform the following steps:
  * 1\\. Asynchronously call this operation to create a device distribution task and obtain the **JobId** parameter.
  * 2\\. Use **JobId** as a request parameter and repeatedly call the [QueryDeviceDistributeJob](~~199536~~) operation to obtain the **Status** parameter.
  * >  You must control the frequency of calls based on the QPS limit of the QueryDeviceDistributeJob operation.
  * If either of the following values is returned for the **Status** parameter, the distribution task ends:
  * *   **2**: The device distribution task is completed. This return value does not indicate that the devices are distributed. To obtain the distribution result of each device, perform the next step.
  * *   **3**: The distribution is unexpectedly interrupted. After you process the error, you can initiate a device distribution task again.
  * 3\\. Use **JobId** that is returned in Step 1 as a request parameter and call the [QueryDeviceDistributeDetail](~~199533~~) operation to obtain the **File** parameter. The File parameter indicates the file URL of the distribution result.
  * >  The file URL is valid for 10 minutes.
  * 4\\. Obtain the distribution result by using the file URL. The **Code** parameter indicates whether a device is distributed. If the value of the **Code** parameter is 200, the device is distributed.
  * If the distribution fails, you can perform the preceding steps to distribute devices again.
  * ## Limits
  * - This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * - You cannot call this operation to distribute devices across accounts.
  * - Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a product distribution task, see [CreateProductDistributeJob](/help/en/iot-platform/latest/createproductdistributejob).
  * - Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).  >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateDeviceDistributeJobRequest
  * @return CreateDeviceDistributeJobResponse
 */
async function createDeviceDistributeJob(request: CreateDeviceDistributeJobRequest): CreateDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceDistributeJobWithOptions(request, runtime);
}

model CreateDeviceDynamicGroupRequest {
  dynamicGroupExpression?: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"'),
  groupDesc?: string(name='GroupDesc', example='test'),
  groupName?: string(name='GroupName', example='grouptest'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***'),
}

model CreateDeviceDynamicGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dynamicGroupExpression?: string(name='DynamicGroupExpression', example='product_key = "a1***" and name LIKE "test%"'),
    groupDesc?: string(name='GroupDesc', example='test'),
    groupId?: string(name='GroupId', example='HtMLECKbdJQL***'),
    groupName?: string(name='GroupName', example='grouptest'),
    utcCreate?: string(name='UtcCreate', example='2021-10-17T11:19:31.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0634D'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceDynamicGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceDynamicGroupResponseBody(name='body'),
}

async function createDeviceDynamicGroupWithOptions(request: CreateDeviceDynamicGroupRequest, runtime: Util.RuntimeOptions): CreateDeviceDynamicGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dynamicGroupExpression)) {
    query['DynamicGroupExpression'] = request.dynamicGroupExpression;
  }
  if (!Util.isUnset(request.groupDesc)) {
    query['GroupDesc'] = request.groupDesc;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceDynamicGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceDynamicGroup(request: CreateDeviceDynamicGroupRequest): CreateDeviceDynamicGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceDynamicGroupWithOptions(request, runtime);
}

model CreateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', description='The description of the group. The description must be 1 to 100 characters in length.', example='Group test'),
  groupName?: string(name='GroupName', description='The name of the group. The alias must be 4 to 30 characters in length, and can contain letters, digits, and underscores (\\_).', example='grouptest'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.



>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  superGroupId?: string(name='SuperGroupId', description='The ID of the parent group.

If you need to create a first-level group, do not specify this parameter.', example='SuperGroupId1'),
}

model CreateDeviceGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    groupDesc?: string(name='GroupDesc', description='The description of each group.', example='Group test'),
    groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) that the system generates for the group.', example='HtMLECKbdJQL****'),
    groupName?: string(name='GroupName', description='The name of the group.', example='grouptest'),
    utcCreate?: string(name='UtcCreate', description='The time when the group was created.', example='2018-10-17T11:19:31.000Z'),
  }(name='Data', description='The group information returned if the call succeeds.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4D6D7F71-1C94-4160-8511-EFF4B8F0634D'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateDeviceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDeviceGroupResponse
 */
async function createDeviceGroupWithOptions(request: CreateDeviceGroupRequest, runtime: Util.RuntimeOptions): CreateDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupDesc)) {
    query['GroupDesc'] = request.groupDesc;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.superGroupId)) {
    query['SuperGroupId'] = request.superGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateDeviceGroupRequest
  * @return CreateDeviceGroupResponse
 */
async function createDeviceGroup(request: CreateDeviceGroupRequest): CreateDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceGroupWithOptions(request, runtime);
}

model CreateDeviceTunnelRequest {
  description?: string(name='Description'),
  deviceName?: string(name='DeviceName', example='light'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv***00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v64***'),
  productKey?: string(name='ProductKey', example='a1BwAGV***'),
  udi?: string(name='Udi', example='reboot'),
}

model CreateDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    sourceAccessToken?: string(name='SourceAccessToken', example='521c43e4-a6da-***'),
    sourceURI?: string(name='SourceURI', example='wss://secure-tunnel-ws.iot.aliyun.test/tunnel/1834248a-37b7-4fd2-***/source'),
    tunnelId?: string(name='TunnelId', example='d4098041-***'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeviceTunnelResponseBody(name='body'),
}

async function createDeviceTunnelWithOptions(request: CreateDeviceTunnelRequest, runtime: Util.RuntimeOptions): CreateDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.udi)) {
    query['Udi'] = request.udi;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeviceTunnel(request: CreateDeviceTunnelRequest): CreateDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeviceTunnelWithOptions(request, runtime);
}

model CreateDownloadDataJobRequest {
  downloadDataType?: string(name='DownloadDataType', example='TABLE'),
  endTime?: long(name='EndTime', example='1658406464534'),
  fileConfig?: map[string]any(name='FileConfig', example='{"fileName":"fileName01"}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  startTime?: long(name='StartTime', example='1658332800000'),
  tableName?: string(name='TableName', example='product_info'),
}

model CreateDownloadDataJobShrinkRequest {
  downloadDataType?: string(name='DownloadDataType', example='TABLE'),
  endTime?: long(name='EndTime', example='1658406464534'),
  fileConfigShrink?: string(name='FileConfig', example='{"fileName":"fileName01"}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  startTime?: long(name='StartTime', example='1658332800000'),
  tableName?: string(name='TableName', example='product_info'),
}

model CreateDownloadDataJobResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    asyncExecute?: boolean(name='AsyncExecute', example='true'),
    csvFileName?: string(name='CsvFileName', example='test_download_file'),
    csvUrl?: string(name='CsvUrl', example='https://oss-xxxx-xxxx.xxxx......'),
    longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
    status?: int32(name='Status', example='-1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='no authorization.'),
  requestId?: string(name='RequestId', example='4D6D7F71-1C94-4160-8511-EFF4B8F0643F'),
  success?: boolean(name='Success', example='true'),
}

model CreateDownloadDataJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDownloadDataJobResponseBody(name='body'),
}

async function createDownloadDataJobWithOptions(tmpReq: CreateDownloadDataJobRequest, runtime: Util.RuntimeOptions): CreateDownloadDataJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateDownloadDataJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.fileConfig)) {
    request.fileConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.fileConfig, 'FileConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.downloadDataType)) {
    query['DownloadDataType'] = request.downloadDataType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.fileConfigShrink)) {
    query['FileConfig'] = request.fileConfigShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tableName)) {
    query['TableName'] = request.tableName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateDownloadDataJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDownloadDataJob(request: CreateDownloadDataJobRequest): CreateDownloadDataJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDownloadDataJobWithOptions(request, runtime);
}

model CreateEdgeDriverRequest {
  cpuArch?: string(name='CpuArch', description='The CPU architecture that the driver supports. Valid values:

*   ARMv7
*   ARMv7-HF
*   AArch64
*   x86-64
*   x86', example='x86-64'),
  driverName?: string(name='DriverName', description='The name of the driver to create. The name cannot exceed 20 characters in length and can contain only uppercase letters, lowercase letters, digits, and underscores (\\_). It must start with a letter.', example='MyLedDriver'),
  driverProtocol?: string(name='DriverProtocol', description='The communications protocol that the driver uses. Valid values:

*   modbus: Modbus protocol
*   opc-ua: OPC UA protocol
*   customize: custom protocol', example='customize'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for public instances. However, this parameter is required for the instances that you have purchased.', example='iot_instc_pu****_c*-v64********'),
  isBuiltIn?: boolean(name='IsBuiltIn', description='Specifies whether the driver is a built-in driver.

*   true: indicates that the driver is a built-in driver, that is, the driver code is pre-configured on the gateway device.

*   false: indicates that the driver is not a built-in driver and you must upload the driver code. Default value: false.

> If the driver is not a built-in driver, you must upload the driver code.', example='false'),
  runtime?: string(name='Runtime', description='The language in which the driver is programmed. Valid values:

*   nodejs8: Node.js v8
*   python3: Python v3.5
*   c: C', example='c'),
}

model CreateEdgeDriverResponseBody = {
  code?: string(name='Code', description='The error code. Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  driverId?: string(name='DriverId', description='The ID of the driver created.', example='fec565038d7544978d9aed5c1a******'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BB179FE4-94AB-41B0-AE8A-66DDB7B8B13A'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. true indicates that the call was successful. false indicates that the call failed.', example='true'),
}

model CreateEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeDriverResponseBody(name='body'),
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request CreateEdgeDriverRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateEdgeDriverResponse
 */
async function createEdgeDriverWithOptions(request: CreateEdgeDriverRequest, runtime: Util.RuntimeOptions): CreateEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cpuArch)) {
    query['CpuArch'] = request.cpuArch;
  }
  if (!Util.isUnset(request.driverName)) {
    query['DriverName'] = request.driverName;
  }
  if (!Util.isUnset(request.driverProtocol)) {
    query['DriverProtocol'] = request.driverProtocol;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isBuiltIn)) {
    query['IsBuiltIn'] = request.isBuiltIn;
  }
  if (!Util.isUnset(request.runtime)) {
    query['Runtime'] = request.runtime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request CreateEdgeDriverRequest
  * @return CreateEdgeDriverResponse
 */
async function createEdgeDriver(request: CreateEdgeDriverRequest): CreateEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeDriverWithOptions(request, runtime);
}

model CreateEdgeDriverVersionRequest {
  argument?: string(name='Argument', description='The Java Virtual Machine (JVM) startup parameter.', example='-XX:+PrintGCDetails'),
  configCheckRule?: string(name='ConfigCheckRule', description='The rule for verifying configurations. Set this parameter to a JSON string in the following format:

`{"deviceConfig":{"required":false},"driverConfig":{"required":false}`

The JSON string contains the following parameters:

*   driverConfig: the rule for verifying the configuration of the driver when the driver is to be deployed in an edge instance.
*   deviceConfig: the rule for verifying the configurations of devices that use the driver when the driver is to be deployed in an edge instance.

`required`: A value of true indicates that the corresponding parameter is required. A value of false indicates that the corresponding parameter is optional.', example='{"deviceConfig":{"required":false},"driverConfig":{"required":false}}'),
  containerConfig?: string(name='ContainerConfig', description='The configuration of the container where the driver runs. Set this parameter to a JSON string. For more information about parameters in the JSON string, see the following parameter description of **ContainerConfig**.', example='{"privileged":1,"devMappings":[],"volumeMappings":[],"hostNetworkMode":0,"portMappings":[]}'),
  description?: string(name='Description', description='The description of the driver. The description can be a maximum of 256 bytes in length.'),
  driverConfig?: string(name='DriverConfig', description='The configuration of the driver. Set this parameter to a JSON string in the following format:

`{"format":"JSON","content":"{}"}`

The JSON string contains the following parameters:

*   format: the format of the driver configuration. Valid values: KV (key-value pair), JSON (JSON string), and FILE (configuration file).

*   content: the content of the driver configuration. If you set the format parameter to KV or JSON, set this parameter to the configuration content of the driver. If you set the format parameter to FILE, set this parameter to the URL of the driver configuration file stored in OSS.

> To obtain the URL of the driver configuration file stored in OSS, call the [CreateOssPreSignedAddress](~~155858~~) operation.', example='[{"format":"JSON","content":"{\\"defaultConfig\\":\\"this is default driver config demo\\"}"}]'),
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver for which you want to create a driver version and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', description='The version number of the driver. The version number must be unique for the driver. The version number can be up to 64 characters in length and can contain letters, digits, underscores (\\_), hyphens (-), and periods (.).', example='1.2.0'),
  edgeVersion?: string(name='EdgeVersion', description='The earliest version of Link IoT Edge that is supported by the driver. The driver can run on gateways of only this version and later. For example, if you set this parameter to 2.4.0, the driver can run on gateways of only version 2.4.0 and later.', example='2.0.0'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  sourceConfig?: string(name='SourceConfig', example='{"ossAddress":"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30c******/ck3n3koe200003h6zf******.zip"}'),
}

model CreateEdgeDriverVersionResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='001ADA35-8846-4B6F-93E7-E5C076F8BB56'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model CreateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeDriverVersionResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateEdgeDriverVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateEdgeDriverVersionResponse
 */
async function createEdgeDriverVersionWithOptions(request: CreateEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): CreateEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.argument)) {
    query['Argument'] = request.argument;
  }
  if (!Util.isUnset(request.configCheckRule)) {
    query['ConfigCheckRule'] = request.configCheckRule;
  }
  if (!Util.isUnset(request.containerConfig)) {
    query['ContainerConfig'] = request.containerConfig;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.driverConfig)) {
    query['DriverConfig'] = request.driverConfig;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.edgeVersion)) {
    query['EdgeVersion'] = request.edgeVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.sourceConfig)) {
    query['SourceConfig'] = request.sourceConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateEdgeDriverVersionRequest
  * @return CreateEdgeDriverVersionResponse
 */
async function createEdgeDriverVersion(request: CreateEdgeDriverVersionRequest): CreateEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeDriverVersionWithOptions(request, runtime);
}

model CreateEdgeInstanceRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for public instances. However, this parameter is required for the instances that you have purchased.', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', description='The name of the edge instance.

An instance name cannot exceed 20 characters in length and can contain uppercase letters, lowercase letters, digits, underscores (\\_), and hyphens (-).', example='LinkIoTEdge_Node'),
  spec?: int32(name='Spec', description='The specification of the edge instance.

*   10: Lite Edition.
*   20: Standard Edition.
*   30: Pro Edition.

Default value: 20.', example='20'),
  tags?: string(name='Tags', description='The tags of the edge instance. Syntax of a tag: `key:value`. Multiple tags are separated with commas (,), for example, `k1:v1,k2:v2`.

*   Note the following limits on tag keys:

    *   Tag values cannot be left empty.
    *   Tag keys must be unique in the edge instance.
    *   Tag keys only support letters.
    *   Each tag key cannot exceed 20 characters in length.

*   Note the following limits on tag values:

    *   Tag values cannot be left empty.
    *   A tag value can contain uppercase letters, lowercase letters, digits, underscores (\\_), and hyphens (-).
    *   Each tag value cannot exceed 20 characters in length.', example='k1:v1,k2:v2'),
}

model CreateEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The error code. Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call failed.', example='request parameter error'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance.', example='F3APY0tPLhmgGtx0****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. true: indicates that the call was successful. false: indicates that the call failed.', example='true'),
}

model CreateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceResponseBody(name='body'),
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request CreateEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateEdgeInstanceResponse
 */
async function createEdgeInstanceWithOptions(request: CreateEdgeInstanceRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request CreateEdgeInstanceRequest
  * @return CreateEdgeInstanceResponse
 */
async function createEdgeInstance(request: CreateEdgeInstanceRequest): CreateEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceWithOptions(request, runtime);
}

model CreateEdgeInstanceChannelRequest {
  channelName?: string(name='ChannelName', example='le_name0'),
  configs?: [ 
    {
      content?: string(name='Content', example='{"protocol":"TCP", "ip":"1.2.3.4", "port":1}'),
      format?: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model CreateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='BE0BD49EF5EF4D119D09CC1B25******'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='B34673EA-ECE7-44F5-BF01-40B5FAE633B6'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceChannelResponseBody(name='body'),
}

async function createEdgeInstanceChannelWithOptions(request: CreateEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelName)) {
    query['ChannelName'] = request.channelName;
  }
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeInstanceChannel(request: CreateEdgeInstanceChannelRequest): CreateEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceChannelWithOptions(request, runtime);
}

model CreateEdgeInstanceDeploymentRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance for which you want to create a deployment task and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  type?: string(name='Type', description='The type of the deployment task.

*   deploy: deploys the edge instance.
*   reset: resets the edge instance.', example='deploy'),
}

model CreateEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  deploymentId?: string(name='DeploymentId', description='The deployment task ID that is returned if the call was successful.', example='38d544b1222d45b4b425240167bf****'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8293A57-6BBC-42FB-B093-BF304D5BF09C'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model CreateEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceDeploymentResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateEdgeInstanceDeploymentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateEdgeInstanceDeploymentResponse
 */
async function createEdgeInstanceDeploymentWithOptions(request: CreateEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstanceDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateEdgeInstanceDeploymentRequest
  * @return CreateEdgeInstanceDeploymentResponse
 */
async function createEdgeInstanceDeployment(request: CreateEdgeInstanceDeploymentRequest): CreateEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceDeploymentWithOptions(request, runtime);
}

model CreateEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='nF9oXo7kLRWQ********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='le_lite2'),
  sourceData?: string(name='SourceData', example='#'),
  sourceType?: string(name='SourceType', example='device'),
  targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********'),
  targetIotHubQos?: int32(name='TargetIotHubQos', example='0'),
  targetType?: string(name='TargetType', example='function'),
  topicFilter?: string(name='TopicFilter', example='all'),
}

model CreateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AC786033-00C5-4FD6-8435-F2807740D9FA'),
  routeId?: long(name='RouteId', example='123456'),
  success?: boolean(name='Success', example='true'),
}

model CreateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function createEdgeInstanceMessageRoutingWithOptions(request: CreateEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): CreateEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.sourceData)) {
    query['SourceData'] = request.sourceData;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.targetData)) {
    query['TargetData'] = request.targetData;
  }
  if (!Util.isUnset(request.targetIotHubQos)) {
    query['TargetIotHubQos'] = request.targetIotHubQos;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.topicFilter)) {
    query['TopicFilter'] = request.topicFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEdgeInstanceMessageRouting(request: CreateEdgeInstanceMessageRoutingRequest): CreateEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model CreateEdgeOssPreSignedAddressRequest {
  fileName?: string(name='FileName', description='The name of the object whose URL is to be obtained. The format is `<File name>.<File name extension>`.', example='testfile.zip'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that uses the driver and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.

>  When the **Type** parameter is set to **INSTANCE_DRIVER_VERSION_CONFIG**, this parameter is required.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  resourceId?: string(name='ResourceId', description='The ID of the resource for which the object URL is to be obtained. Only driver resources are supported. Set this parameter to the ID of the corresponding driver.

To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver for which the object URL you want to obtain and obtain the driver ID. You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='df9b9f441*********4c90d0c21d14'),
  resourceVersion?: string(name='ResourceVersion', description='The version number of the resource. Only driver resources are supported. Set this parameter to the version number of the corresponding driver.', example='2.0.0'),
  type?: string(name='Type', description='The content type of the object. Valid values:

*   DRIVER_VERSION_CONTENT: the code of a specific driver version.
*   DRIVER_VERSION_DEFAULT_CONFIG: the default configuration of a specific driver version.
*   INSTANCE_DRIVER_VERSION_CONFIG: the configuration of a specific driver version that is used in an edge instance.', example='DRIVER_VERSION_CONTENT'),
}

model CreateEdgeOssPreSignedAddressResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    ossAddress?: string(name='OssAddress', description='The URL of the OSS object.', example='http://xxxx.oss-cn-shanghai.aliyuncs.com/driver/a534d3b81*******8fe7da0/DRIVER_VERSION_CONTENT/df9b9f441*********4c90d0c21d14/2.0.0/1581586102750/driver_code.zip'),
    ossPreSignedAddress?: string(name='OssPreSignedAddress', description='The pre-signed URL of the OSS object. For more information, see [OSS documentation](~~32016~~).', example='http://xxxx.oss-cn-shanghai.aliyuncs.com/driver/a534d3b81*******8fe7da0/DRIVER_VERSION_CONTENT/df9b9f441*********4c90d0c21d14/2.0.0/1581586102750/driver_code.zip?Expires\\u003d1581586402\\u0026OSSAccessKeyId\\u003daS4MT0IYrP******\\u0026Signature\\u003dIUUjZ881H3rUoCOwjMXPmGbw******'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='91E2BFA2-ECD7-4E11-B36B-66BCC4773922'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model CreateEdgeOssPreSignedAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEdgeOssPreSignedAddressResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateEdgeOssPreSignedAddressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateEdgeOssPreSignedAddressResponse
 */
async function createEdgeOssPreSignedAddressWithOptions(request: CreateEdgeOssPreSignedAddressRequest, runtime: Util.RuntimeOptions): CreateEdgeOssPreSignedAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceVersion)) {
    query['ResourceVersion'] = request.resourceVersion;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEdgeOssPreSignedAddress',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateEdgeOssPreSignedAddressRequest
  * @return CreateEdgeOssPreSignedAddressResponse
 */
async function createEdgeOssPreSignedAddress(request: CreateEdgeOssPreSignedAddressRequest): CreateEdgeOssPreSignedAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEdgeOssPreSignedAddressWithOptions(request, runtime);
}

model CreateJobRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobDocument?: string(name='JobDocument', example='{ "serviceIdentifier": "test_service", "params": { "key1": "value1", "key2": "value2" } }'),
  jobFile?: map[string]any(name='JobFile', example='{   "fileKey":"5cc34***f9/tazJ***s",   "signMethod":"Sha256",   "sign":"***" }'),
  jobName?: string(name='JobName', example='oneJob'),
  rolloutConfig?: map[string]any(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
  targetConfig?: map[string]any(name='TargetConfig', example='{"targetType":"PRODUCT_KEY","targetProduct":"a1j***3d"}'),
  timeoutConfig?: map[string]any(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
  type?: string(name='Type', example='INVOKE_SERVICE'),
}

model CreateJobShrinkRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobDocument?: string(name='JobDocument', example='{ "serviceIdentifier": "test_service", "params": { "key1": "value1", "key2": "value2" } }'),
  jobFileShrink?: string(name='JobFile', example='{   "fileKey":"5cc34***f9/tazJ***s",   "signMethod":"Sha256",   "sign":"***" }'),
  jobName?: string(name='JobName', example='oneJob'),
  rolloutConfigShrink?: string(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
  targetConfigShrink?: string(name='TargetConfig', example='{"targetType":"PRODUCT_KEY","targetProduct":"a1j***3d"}'),
  timeoutConfigShrink?: string(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
  type?: string(name='Type', example='INVOKE_SERVICE'),
}

model CreateJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateJobResponseBody(name='body'),
}

async function createJobWithOptions(tmpReq: CreateJobRequest, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.jobFile)) {
    request.jobFileShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.jobFile, 'JobFile', 'json');
  }
  if (!Util.isUnset(tmpReq.rolloutConfig)) {
    request.rolloutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rolloutConfig, 'RolloutConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.targetConfig)) {
    request.targetConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.targetConfig, 'TargetConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.timeoutConfig)) {
    request.timeoutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timeoutConfig, 'TimeoutConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobDocument)) {
    query['JobDocument'] = request.jobDocument;
  }
  if (!Util.isUnset(request.jobFileShrink)) {
    query['JobFile'] = request.jobFileShrink;
  }
  if (!Util.isUnset(request.jobName)) {
    query['JobName'] = request.jobName;
  }
  if (!Util.isUnset(request.rolloutConfigShrink)) {
    query['RolloutConfig'] = request.rolloutConfigShrink;
  }
  if (!Util.isUnset(request.scheduledTime)) {
    query['ScheduledTime'] = request.scheduledTime;
  }
  if (!Util.isUnset(request.targetConfigShrink)) {
    query['TargetConfig'] = request.targetConfigShrink;
  }
  if (!Util.isUnset(request.timeoutConfigShrink)) {
    query['TimeoutConfig'] = request.timeoutConfigShrink;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createJobWithOptions(request, runtime);
}

model CreateLoRaNodesTaskRequest {
  deviceInfo?: [ 
    {
      devEui?: string(name='DevEui', example='d896e0efff00****'),
      pinCode?: string(name='PinCode', example='123***'),
    }
  ](name='DeviceInfo'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model CreateLoRaNodesTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  taskId?: string(name='TaskId', example='62146'),
}

model CreateLoRaNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLoRaNodesTaskResponseBody(name='body'),
}

async function createLoRaNodesTaskWithOptions(request: CreateLoRaNodesTaskRequest, runtime: Util.RuntimeOptions): CreateLoRaNodesTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceInfo)) {
    query['DeviceInfo'] = request.deviceInfo;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLoRaNodesTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLoRaNodesTask(request: CreateLoRaNodesTaskRequest): CreateLoRaNodesTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLoRaNodesTaskWithOptions(request, runtime);
}

model CreateOTADynamicUpgradeJobRequest {
  downloadProtocol?: string(name='DownloadProtocol', description='Specifies whether the device supports simultaneous updates of multiple modules. Default value: false. Valid values:

*   **false**

*   **true**: In this case, do not set **OverwriteMode** to **2**.********

    The update tasks for the same module are overwritten. The update tasks that are in progress are not overwritten. The update tasks of the modules do not affect each other.

>*   Only Enterprise Edition instances and new public instances are supported.
>*   You must use Link SDK for C 4.x to develop the device.
>*   If you initiate a group-based dynamic update batch, the settings of **MultiModuleMode** and **OverwriteMode** must be the same as those in the existing dynamic update batch of the group.

For more information, see [Overview](~~58328~~).', example='HTTPS'),
  dynamicMode?: int32(name='DynamicMode', description='Specifies whether to automatically push update tasks from IoT Platform to devices. Default value: true. Valid values:

*   **true**: After an update batch is created, IoT Platform automatically pushes update tasks to the specified online devices.

    In this case, a device can still initiate a request to obtain the information about the over-the-air (OTA) update task from IoT Platform.

*   **false**: A device must initiate a request to obtain the information about the OTA update task from IoT Platform.', example='1'),
  firmwareId?: string(name='FirmwareId', description='The **ProductKey** of the product to which the update package belongs.

A **ProductKey** is the unique identifier of a product in IoT Platform. You can view the information about all products within the current Alibaba Cloud account in the IoT Platform console or by calling the [QueryProductList](~~69271~~) operation.', example='nx3xxVvFdwvn6dim50PY03****'),
  groupId?: string(name='GroupId', description='The type of the group. Valid value: **LINK_PLATFORM_DYNAMIC**.

*   If you specify this parameter, you must also specify the **GroupId** parameter. In this case, do not specify the **SrcVersion.N** parameter.
*   If you do not specify this parameter, you do not need to specify the **GroupId** parameter. In this case, you must specify the **SrcVersion.N** parameter.', example='IwOwQj7DJ***'),
  groupType?: string(name='GroupType', description='The download protocol of the update package. Valid values: **HTTPS** and **MQTT**. Default value: HTTPS. After the device receives the update package information pushed by IoT Platform, this protocol is used to download the update package.

> If you need to download the update package over MQTT, take note of the following items:
>*   Your service must be deployed in the China (Shanghai) region.
>*   The OTA update package can contain only one file, and the size of the file cannot exceed 16 MB.
>*   You must use the latest version of Link SDK for C to develop the device features to perform OTA updates and download files over MQTT. For more information, see [Sample code](~~330985~~).', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the update package.

An update package ID is returned when you call the [CreateOTAFirmware](~~147311~~) operation to create the update package.

You can also call the [ListOTAFirmware](~~147450~~) operation to obtain the ID.', example='iot-cn-0pp1n8t****'),
  maximumPerMinute?: int32(name='MaximumPerMinute', description='Specifies whether to overwrite the previous update task. Default value: 1. Valid values:

*   **1**: The previous update task is not overwritten. If a device already has an update task, the previous update task is implemented.
*   **2**: The previous update task is overwritten. Only the current update task is implemented. In this case, you cannot set **MultiModuleMode** to **true**.

>  The update task that is in progress is not overwritten.', example='1000'),
  multiModuleMode?: boolean(name='MultiModuleMode', description='The list of firmware versions to be updated.

*   If you specify this parameter, do not specify the **GroupId** and **GroupType** parameters.
*   If you do not specify this parameter, you must specify the **GroupId** and **GroupType** parameters.

> If you use differential update packages to perform dynamic update tasks on dynamic groups, you do not need to specify this parameter.
>*   If you use differential update packages to perform dynamic update tasks based on versions, the value of this parameter must be the same as the value of **SrcVersion**.
>*   You can call the [QueryDeviceDetail](~~69594~~) operation and view the **FirmwareVersion** parameter in the response.
>*   The version numbers must be unique in the list.
>*   You can specify a maximum of 10 version numbers.', example='false'),
  needConfirm?: boolean(name='NeedConfirm', description='The ID of the group.

*   If you specify this parameter, you must also specify the **GroupType** parameter. In this case, do not specify the **SrcVersion.N** parameter.
*   If you do not specify this parameter, you do not need to specify the **GroupType** parameter. In this case, you must specify the **SrcVersion.N** parameter.

You can call the [QueryDeviceGroupList](~~93356~~) operation to query the **GroupId** parameter.', example='false'),
  needPush?: boolean(name='NeedPush', description='Specifies whether to control the update by using a mobile app. You must develop the mobile app as needed. Default value: false. Valid values:

*   **false**: A device obtains the information about the OTA update task based on the **NeedPush** parameter.
*   **true**: To perform an OTA update on a device, you must confirm the update by using your mobile app. Then, the device can obtain the information about the OTA update task based on the **NeedPush** parameter.', example='true'),
  overwriteMode?: int32(name='OverwriteMode', description='The mode of dynamic update. Default value: 1. Valid values:

*   **1**: constantly updates the devices that meet the conditions.
*   **2**: updates only the devices that subsequently submit the latest firmware versions.', example='2'),
  productKey?: string(name='ProductKey', description='The automatic retry interval if a device fails to be updated. Unit: minutes. Valid values:

*   **0**: An automatic retry is immediately performed.
*   **10**: An automatic retry is performed after 10 minutes.
*   **30**: An automatic retry is performed after 30 minutes.
*   **60**: An automatic retry is performed after 60 minutes (1 hour).
*   **1440**: An automatic retry is performed after 1,440 minutes (24 hours).

> The value of the **RetryInterval** parameter must be less than the value of the **TimeoutInMinutes** parameter. Examples:
>*   If the value of the **TimeoutInMinutes** parameter is set to 60, the maximum value of the **RetryInterval** parameter is 30.
>*   If the value of the **TimeoutInMinutes** parameter is set to 1440, the maximum value of the **RetryInterval** parameter is 60.

If the value of the **RetryInterval** parameter is set to 1440, we recommend that you do not specify the **TimeoutInMinutes** parameter. If an update times out, no retry is performed.

If you do not specify this parameter, no retry is performed.', example='a1Le6d0****'),
  retryCount?: int32(name='RetryCount', description='The timeout period of the update. If the device is not updated within the specified period, a timeout error occurs. Unit: minutes. Valid values: 1 to 1440.

> *   The timeout period starts from the time when the specified device submits the update progress for the first time. During the update, the update package may be repeatedly pushed to the specified device because the device goes online and offline multiple times. The start time of the update period remains unchanged.
>*   If an update fails due to timeout, no retry is triggered.

If you do not specify this parameter, timeout errors do not occur.', example='1'),
  retryInterval?: int32(name='RetryInterval', description='The number of automatic retries.

If you specify the **RetryInterval** parameter, you must specify this parameter.

Valid values:

*   **1**: retries once.
*   **2**: retries twice.
*   **5**: retries five times.', example='60'),
  srcVersion?: [ string ](name='SrcVersion', example='V1.0.1'),
  tag?: [ 
    {
      key?: string(name='Key', description='The value of the update batch tag. The value must be 1 to 1,024 characters in length. You can add up to 10 tags for each update batch. The total length of the tag keys and tag values of all update batches cannot exceed 4,096 characters in length.

>  Update batch tags are optional. If you want to specify a tag, you must specify the Tag.N.Value and Tag.N.Key parameters in pair.', example='key1'),
      value?: string(name='Value', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='value1'),
    }
  ](name='Tag'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The maximum number of devices to which the download URL of the update package is pushed per minute. Valid values: 10 to 10000.

Default value: 10000.', example='1440'),
}

model CreateOTADynamicUpgradeJobResponseBody = {
  code?: string(name='Code', description='The error message returned if the call fails.', example='iot.system.SystemException'),
  data?: {
    jobId?: string(name='JobId', description='The time when the update batch was created. The time is displayed in UTC.', example='XUbmsMHmkqv0PiAG****010001'),
    utcCreate?: string(name='UtcCreate', example='2019-05-10T02:18:53.000Z'),
  }(name='Data', description='The unique identifier of the update batch.'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful.

*   **true**: The request was successful.
*   **false**: The request failed.', example='9F41D14E-CB5F-4CCE-939C-057F39E688F5'),
  success?: boolean(name='Success', description='The update batch information returned if the call is successful. For more information, see Data.', example='true'),
}

model CreateOTADynamicUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTADynamicUpgradeJobResponseBody(name='body'),
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common parameters](~~30561~~).
  *
  * @param request CreateOTADynamicUpgradeJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOTADynamicUpgradeJobResponse
 */
async function createOTADynamicUpgradeJobWithOptions(request: CreateOTADynamicUpgradeJobRequest, runtime: Util.RuntimeOptions): CreateOTADynamicUpgradeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.downloadProtocol)) {
    query['DownloadProtocol'] = request.downloadProtocol;
  }
  if (!Util.isUnset(request.dynamicMode)) {
    query['DynamicMode'] = request.dynamicMode;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.maximumPerMinute)) {
    query['MaximumPerMinute'] = request.maximumPerMinute;
  }
  if (!Util.isUnset(request.multiModuleMode)) {
    query['MultiModuleMode'] = request.multiModuleMode;
  }
  if (!Util.isUnset(request.needConfirm)) {
    query['NeedConfirm'] = request.needConfirm;
  }
  if (!Util.isUnset(request.needPush)) {
    query['NeedPush'] = request.needPush;
  }
  if (!Util.isUnset(request.overwriteMode)) {
    query['OverwriteMode'] = request.overwriteMode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.retryCount)) {
    query['RetryCount'] = request.retryCount;
  }
  if (!Util.isUnset(request.retryInterval)) {
    query['RetryInterval'] = request.retryInterval;
  }
  if (!Util.isUnset(request.srcVersion)) {
    query['SrcVersion'] = request.srcVersion;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timeoutInMinutes)) {
    query['TimeoutInMinutes'] = request.timeoutInMinutes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTADynamicUpgradeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common parameters](~~30561~~).
  *
  * @param request CreateOTADynamicUpgradeJobRequest
  * @return CreateOTADynamicUpgradeJobResponse
 */
async function createOTADynamicUpgradeJob(request: CreateOTADynamicUpgradeJobRequest): CreateOTADynamicUpgradeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTADynamicUpgradeJobWithOptions(request, runtime);
}

model CreateOTAFirmwareRequest {
  destVersion?: string(name='DestVersion', description='The version number of the OTA update package. The value can contain letters, digits, periods (.), hyphens (-), and underscores (\\_). The version number must be 1 to 64 characters in length.', example='2.0.0'),
  firmwareDesc?: string(name='FirmwareDesc', description='The description of the OTA update package. The description must be 1 to 100 characters in length.', example='OTA function updated'),
  firmwareName?: string(name='FirmwareName', description='The name of the OTA update package. The name must be unique within an Alibaba Cloud account. The name cannot be modified after the OTA update package is created. The name must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-), underscores (\\_), and parentheses (). The name must start with a letter or a digit.', example='Firmware2'),
  firmwareSign?: string(name='FirmwareSign', description='The signature of the OTA update package. The value is calculated by using the specified **signature algorithm** to sign the OTA update package.

> If you add only one file to the OTA update package, you can configure this parameter. If you do not configure this parameter, the MD5 value of the OTA update package in OSS is used as the package signature.', example='93230c3bde425a9d7984a594ac55****'),
  firmwareSize?: int32(name='FirmwareSize', description='The size of the OTA update package. Unit: bytes.

> If you add only one file to the OTA update package, you can configure this parameter. If you do not configure this parameter, the size of the OTA update package in OSS is used.', example='900'),
  firmwareUrl?: string(name='FirmwareUrl', description='The URL of the OTA update package. This parameter specifies the storage location of the OTA update package in OSS. You can call the [GenerateOTAUploadURL](~~147310~~) operation to generate a URL for the OTA update package.

>If you add only one file to the OTA update package, you must configure this parameter.', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/bcd6142594d0183a16d825ad8225****/A6B3400B70CA4D6D872160D1A91A****.bin'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', description='The name of the OTA module. OTA modules are the updatable units of devices that belong to the same product.

> *   If you do not configure this parameter, the default OTA module is used. The default value indicates that the complete device firmware is updated.
>*   You can call the [CreateOTAModule](~~186066~~) operation to create a custom OTA module. You can call the [ListOTAModuleByProduct](~~186532~~) operation to query the existing OTA modules of a product.', example='WifiConfigModify'),
  multiFiles?: [ 
    {
      fileMd5?: string(name='FileMd5', description='The MD5 value of the file.

>  If you want to add multiple files to the OTA update package, you can configure this parameter. If you do not configure this parameter, the MD5 value of the file in OSS is used.', example='93230c3bde425a9d7984a594ac56***'),
      name?: string(name='Name', description='The name of the file in the update package. The name must be 1 to 32 characters in length. You can specify up to 20 file names. Each name must be unique in the OTA update package.

> If you want to add multiple files to the OTA update package, you must configure this parameter.', example='Firmware1'),
      signValue?: string(name='SignValue', description='The signature of the file. The value is calculated by using the specified **signature algorithm** to sign the file.

>  If you want to add multiple files to the OTA update package, you can configure this parameter. If you do not configure this parameter, the MD5 value of the file in OSS is used as the file signature.', example='93230c3bde425a9d7984a594ac45****'),
      size?: int32(name='Size', description='The size of the file in the OTA update package. Unit: bytes.

>  If you want to add multiple files to the OTA update package, you can configure this parameter. If you do not configure this parameter, the size of the file in OSS is used.', example='200'),
      url?: string(name='Url', description='The URL of the file. This parameter specifies the storage location of the file in OSS. You can call the [GenerateOTAUploadURL](~~147310~~) operation to generate a URL for each file in the OTA update package.

> If you want to add multiple files to the OTA update package, you must configure this parameter.', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/bcd6142594d0183a16d825ad8225****/A6B3400B70CA4D6D872160D1A91A****.bin'),
    }
  ](name='MultiFiles'),
  needToVerify?: boolean(name='NeedToVerify', description='Specifies whether to verify the OTA update package before you create a batch update task.

*   **true** The system verifies the OTA update package before you create a batch update task. This is the default value.
*   **false**: The system does not verify the OTA update package before you create a batch update task.', example='true'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the OTA update package belongs.', example='a1uctKe****'),
  signMethod?: string(name='SignMethod', description='The signature algorithm of the OTA update package. Set the value to **MD5**. The value indicates an MD5 signature.

Default value: **MD5**.', example='MD5'),
  srcVersion?: string(name='SrcVersion', description='The version number of the OTA module of the device to be updated.

You can call the [QueryDeviceDetail](~~69594~~) operation and view the **FirmwareVersion** parameter in the response.

> *   If you set the **Type** parameter to **1**, you must configure this parameter, and the value cannot be the same as the update package version that is specified by the **DestVersion** parameter.
>*   If you set the **Type** parameter to **0**, this parameter is optional.', example='1.0.0'),
  type?: int32(name='Type', description='The type of the OTA update package. Valid values:

*   **0**: The uploaded file contains a full update package. IoT Platform pushes the full update package to a device for update.
*   **1**: The uploaded file contains only the differences between the latest update package and the previous update package. IoT Platform pushes only the differences to a device for update.

Default value: **0**.', example='0'),
  udi?: string(name='Udi', description='The custom information that you want to send to a device. The format of the custom information has no limits. However, the information cannot exceed 4,096 characters in length.

After you add the OTA update package and create an update task, IoT Platform sends the custom information to the specified device when IoT Platform pushes an update notification.'),
}

model CreateOTAFirmwareResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    firmwareId?: string(name='FirmwareId', description='The ID of the OTA update package. The ID is a unique identifier issued by IoT Platform to the OTA update package.', example='s8SSHiKjpBfrM3BSN0z803****'),
    utcCreate?: string(name='UtcCreate', description='The time when the OTA update package was created. The time is displayed in UTC.', example='2019-11-04T06:21:54.607Z'),
  }(name='Data', description='The OTA update package information that is returned if the call is successful. For more information, see the "**Data**" section of this topic.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful. The value indicates that the OTA update package was created.
*   **false**: The call failed. The value indicates that the system failed to create the OTA update package.', example='true'),
}

model CreateOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAFirmwareResponseBody(name='body'),
}

/**
  * Before you call this operation to create an OTA update package, you must call the [GenerateOTAUploadURL](~~147310~~) operation to generate the information about the files that you want to add to the OTA update package and call the Object Storage Service (OSS) [PostObject](~~31988~~) operation to upload the files.
  * ## Limits
  * Each Alibaba Cloud account can have up to 500 update packages. 
  * ## QPS limits
  * You can call this API operation up to 10 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAFirmwareRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOTAFirmwareResponse
 */
async function createOTAFirmwareWithOptions(request: CreateOTAFirmwareRequest, runtime: Util.RuntimeOptions): CreateOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destVersion)) {
    query['DestVersion'] = request.destVersion;
  }
  if (!Util.isUnset(request.firmwareDesc)) {
    query['FirmwareDesc'] = request.firmwareDesc;
  }
  if (!Util.isUnset(request.firmwareName)) {
    query['FirmwareName'] = request.firmwareName;
  }
  if (!Util.isUnset(request.firmwareSign)) {
    query['FirmwareSign'] = request.firmwareSign;
  }
  if (!Util.isUnset(request.firmwareSize)) {
    query['FirmwareSize'] = request.firmwareSize;
  }
  if (!Util.isUnset(request.firmwareUrl)) {
    query['FirmwareUrl'] = request.firmwareUrl;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.multiFiles)) {
    query['MultiFiles'] = request.multiFiles;
  }
  if (!Util.isUnset(request.needToVerify)) {
    query['NeedToVerify'] = request.needToVerify;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.signMethod)) {
    query['SignMethod'] = request.signMethod;
  }
  if (!Util.isUnset(request.srcVersion)) {
    query['SrcVersion'] = request.srcVersion;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.udi)) {
    query['Udi'] = request.udi;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation to create an OTA update package, you must call the [GenerateOTAUploadURL](~~147310~~) operation to generate the information about the files that you want to add to the OTA update package and call the Object Storage Service (OSS) [PostObject](~~31988~~) operation to upload the files.
  * ## Limits
  * Each Alibaba Cloud account can have up to 500 update packages. 
  * ## QPS limits
  * You can call this API operation up to 10 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAFirmwareRequest
  * @return CreateOTAFirmwareResponse
 */
async function createOTAFirmware(request: CreateOTAFirmwareRequest): CreateOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAFirmwareWithOptions(request, runtime);
}

model CreateOTAModuleRequest {
  aliasName?: string(name='AliasName', description='The alias of the OTA module. The alias must be 1 to 64 characters in length, and can contain letters, digits, periods(.), hyphens (-), and underscores (\\_).'),
  desc?: string(name='Desc', description='The description of the OTA module. The description can be up to 100 characters in length.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', description='The name of the OTA module. The name is unique in a product and cannot be modified. The name can contain letters, digits, periods (.), hyphens (-), and underscores (\\_). The name must be 1 to 64 characters in length.

>  Letters are not case-sensitive. For example, you cannot use the module names scanner and Scanner at the same time.', example='barcodeScanner'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the OTA module belongs.', example='a1Le6d0****'),
}

model CreateOTAModuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAModuleResponseBody(name='body'),
}

/**
  * ## Limits
  * OTA modules are the updatable units of the devices that belong to the same product. The default module indicates the entire firmware of a device. You can call this operation to create a custom OTA module.
  * *   You can create a maximum of 10 custom OTA modules for each product.
  * *   After an OTA module is created, you cannot modify its name. You can call the [UpdateOTAModule](~~186061~~) operation to modify the module alias and description.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAModuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOTAModuleResponse
 */
async function createOTAModuleWithOptions(request: CreateOTAModuleRequest, runtime: Util.RuntimeOptions): CreateOTAModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAModule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * OTA modules are the updatable units of the devices that belong to the same product. The default module indicates the entire firmware of a device. You can call this operation to create a custom OTA module.
  * *   You can create a maximum of 10 custom OTA modules for each product.
  * *   After an OTA module is created, you cannot modify its name. You can call the [UpdateOTAModule](~~186061~~) operation to modify the module alias and description.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAModuleRequest
  * @return CreateOTAModuleResponse
 */
async function createOTAModule(request: CreateOTAModuleRequest): CreateOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAModuleWithOptions(request, runtime);
}

model CreateOTAStaticUpgradeJobRequest {
  dnListFileUrl?: string(name='DnListFileUrl', description='The URL of the device list file that is used to perform a specific update.

> *   If you set the TargetSelection parameter to `SPECIFIC`, you must specify this parameter or the **TargetDeviceName.N** parameter. You cannot specify the two parameters at the same time.
>*   You can call the [GenerateDeviceNameListURL](~~186062~~) operation to generate a file URL. Then, you can perform the operations as prompted to upload the device list file.
>*   During a full update, the devices that have been updated are skipped.
>*   During a delta update, the devices that have been updated and the devices whose initial version numbers are different from the update package are skipped.', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
  downloadProtocol?: string(name='DownloadProtocol', description='The download protocol of the update package. Valid values: **HTTPS** and **MQTT**. Default value: HTTPS. After the device receives the update package information pushed by IoT Platform, this protocol is used to download the update package.

>If you need to download the update package over MQTT, take note of the following items:
>*   Your service must be deployed in the China (Shanghai), China (Beijing), or China (Shenzhen) region.
>*   The OTA update package can contain only one file, and the size of the file cannot exceed 16 MB.
>*   You must use the latest version of Link SDK for C to develop the device features to perform OTA updates and download files over MQTT. For more information, see [Sample code](~~330985~~).', example='HTTPS'),
  firmwareId?: string(name='FirmwareId', description='The ID of the update package.

An update package ID is returned when you call the [CreateOTAFirmware](~~147311~~) operation to create the update package.

You can also call the [ListOTAFirmware](~~147450~~) operation to obtain the ID.', example='nx3xxVvFdwvn6dim50PY03****'),
  grayPercent?: string(name='GrayPercent', description='The ratio of the phased update. The value is a percentage in the string format. It can be up to three decimal places. The calculated number of devices is rounded down to the nearest integer. You must specify at least one device for a phased update.

For example, if you set the phased update ratio to 33.33 for 100 devices, the number of devices to be updated is 33.

You must specify this parameter if you set the TargetSelection parameter to `GRAY`.', example='33.33'),
  groupId?: string(name='GroupId', description='The ID of the group.

If you set the TargetSelection parameter to `GROUP`, you must specify this parameter and the **GroupType** parameter.

You can call the [QueryDeviceGroupList](~~93356~~) operation to query the **GroupId** parameter.', example='CtjzCkNuOx***'),
  groupType?: string(name='GroupType', description='The type of the group. Valid value: **LINK_PLATFORM**.

If you set the TargetSelection parameter to `GROUP`, you must specify this parameter and the **GroupId** parameter.', example='LINK_PLATFORM'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of an instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. If you do not specify the instance ID, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  maximumPerMinute?: int32(name='MaximumPerMinute', description='The maximum number of devices to which the download URL of the update package is pushed per minute. Valid values: 10 to 10000.

Default value: 10000.', example='1000'),
  multiModuleMode?: boolean(name='MultiModuleMode', description='Specifies whether the device supports simultaneous updates of multiple modules. Default value: false. Valid values:

*   **false**

*   **true**: In this case, do not set **OverwriteMode** to **2**.********

    The update tasks for the same module are overwritten. The update tasks that are in progress are not overwritten. The update tasks of the modules do not affect each other.

>*   Only Enterprise Edition instances and new public instances are supported.
>*   You must use Link SDK for C 4.x to develop the device.

For more information, see [Overview](~~58328~~).', example='false'),
  needConfirm?: boolean(name='NeedConfirm', description='Specifies whether to control the update by using a mobile app. You must develop the mobile app as needed. Default false: true. Valid values:

*   **false**: A device obtains the information about the OTA update task based on the **NeedPush** parameter.
*   **true**: To perform an OTA update on a device, you must confirm the update by using your mobile app. Then, the device can obtain the information about the OTA update task based on the **NeedPush** parameter.', example='false'),
  needPush?: boolean(name='NeedPush', description='Specifies whether to automatically push update tasks from IoT Platform to devices. Default value: true. Valid values:

*   **true**: After an update batch is created, IoT Platform automatically pushes update tasks to the specified online devices.

    In this case, a device can still initiate a request to obtain the information about the over-the-air (OTA) update task from IoT Platform.

*   **false**: A device must initiate a request to obtain the information about the OTA update task from IoT Platform.', example='true'),
  overwriteMode?: int32(name='OverwriteMode', description='Specifies whether to overwrite the previous update task. Default value: 1. Valid values:

*   **1**: The previous update task is not overwritten. If a device already has an update task, the previous update task is implemented.
*   **2**: The previous update task is overwritten. Only the current update task is implemented. In this case, you cannot set **MultiModuleMode** to **true**.

>  The update task that is in progress is not overwritten.', example='1'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the update package belongs.

A **ProductKey** is the unique identifier of a product in IoT Platform. You can view the information about all products within the current Alibaba Cloud account in the IoT Platform console or by calling the [QueryProductList](~~69271~~) operation.', example='a1Le6d0****'),
  retryCount?: int32(name='RetryCount', description='The number of automatic retries.

If you specify the **RetryInterval** parameter, you must specify this parameter.

Valid values:

*   **1**: retries once.
*   **2**: retries twice.
*   **5**: retries five times.', example='1'),
  retryInterval?: int32(name='RetryInterval', description='The automatic retry interval if a device fails to be updated. Unit: minutes. Valid values:

*   **0**: An automatic retry is immediately performed.
*   **10**: An automatic retry is performed after 10 minutes.
*   **30**: An automatic retry is performed after 30 minutes.
*   **60**: An automatic retry is performed after 60 minutes (1 hour).
*   **1440**: An automatic retry is performed after 1,440 minutes (24 hours).

> The value of the **RetryInterval** parameter must be less than the value of the **TimeoutInMinutes** parameter. Examples:
>*   If the value of the **TimeoutInMinutes** parameter is set to 60, the maximum value of the **RetryInterval** parameter is 30.
>*   If the value of the **TimeoutInMinutes** parameter is set to 1440, the maximum value of the **RetryInterval** parameter is 60.

If the value of the **RetryInterval** parameter is set to 1440, we recommend that you do not specify the **TimeoutInMinutes** parameter. If an update times out, no retry is performed.

If you do not specify this parameter, no retry is performed.', example='60'),
  scheduleFinishTime?: long(name='ScheduleFinishTime', description='The time to end the update.

The end time must be 1 hour to 30 days later than the start time that is specified by the **ScheduleTime** parameter. The value must be a 13-digit timestamp.

If you do not specify this parameter, the update is not forcibly ended.', example='1577909000000'),
  scheduleTime?: long(name='ScheduleTime', description='The time to start the over-the-air (OTA) update.

The scheduled time ranges from 5 minutes to 7 days later than the current time. The value must be a 13-digit timestamp.

If you do not specify this parameter, the update immediately starts.', example='1577808000000'),
  srcVersion?: [ string ](name='SrcVersion', example='V1.0.1'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the update batch tag. The key must be 1 to 30 characters in length and can contain letters, digits, and periods (.). You can add up to 10 tags for each update batch.

The tags of an update batch are sent to devices when IoT Platform pushes update notifications to these devices.

>  Update batch tags are optional. If you want to specify a tag, you must specify the Tag.N.Value and Tag.N.Key parameters in pair.', example='key1'),
      value?: string(name='Value', description='The value of the update batch tag. The value must be 1 to 1,024 characters in length. You can add up to 10 tags for each update batch. The total length of the tag keys and tag values of all update batches cannot exceed 4,096 characters in length.

>  Update batch tags are optional. If you want to specify a tag, you must specify the Tag.N.Value and Tag.N.Key parameters in pair.', example='value1'),
    }
  ](name='Tag'),
  targetDeviceName?: [ string ](name='TargetDeviceName', example='deviceName1'),
  targetSelection?: string(name='TargetSelection', description='The scope of the update batch. Valid values:

*   **ALL**: updates all devices.
*   **SPECIFIC**: updates specified devices.
*   **GRAY**: performs a phased update.
*   **GROUP**: updates specified groups.', example='ALL'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period of the update. If the device is not updated within the specified period, a timeout error occurs. Unit: minutes. Valid values: 1 to 1440.

> *   The timeout period starts from the time when the specified device submits the update progress for the first time. During the update, the update package may be repeatedly pushed to the specified device because the device goes online and offline multiple times. The start time of the update period remains unchanged.
>*   If an update fails due to timeout, no retry is triggered.

If you do not specify this parameter, timeout errors do not occur.', example='1440'),
}

model CreateOTAStaticUpgradeJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='MissingFirmwareId'),
  data?: {
    jobId?: string(name='JobId', description='The unique identifier of the update batch.', example='wahVIzGkCMuAUE2gDERM02****'),
    utcCreate?: string(name='UtcCreate', description='The time when the update batch was created. The time is displayed in UTC.', example='2019-11-04T06:22:19.566Z'),
  }(name='Data', description='The update batch information returned if the call is successful. For more information, see Data.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.', example='FirmwareId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='29EC7245-0FA4-4BB6-B4F5-5F04818FDFB1'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateOTAStaticUpgradeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAStaticUpgradeJobResponseBody(name='body'),
}

/**
  * *   If you specify that an update package does not need to be verified when you call the [CreateOTAFirmware](~~147311~~) operation, you must make sure that the update package is verified before you call the CreateOTAStaticUpgradeJob operation to create an update batch. For more information about how to create a task to verify an update package, see [CreateOTAVerifyJob](~~147480~~).
  * *   You can initiate update tasks for a maximum of 200 devices in each call. If you use a device list file, you can initiate update tasks for a maximum of 1,000,000 devices. However, you must call the [GenerateDeviceNameListURL](~~186062~~) operation to generate a URL for the device list file. Then, you can perform the operations as prompted to upload the device list file.
  * *   When you initiate update tasks for multiple devices, the devices that already have the destination firmware versions are skipped.
  * *   Each device can be in the pending or updating status only in one update task. If you initiate another update task for a device that is in the pending or updating status, the update task fails.
  * *   You can create multiple static update batches by using a single update package.
  * *   Downloading update packages through the MQTT protocol is supported only in the China (Shanghai) region.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAStaticUpgradeJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOTAStaticUpgradeJobResponse
 */
async function createOTAStaticUpgradeJobWithOptions(request: CreateOTAStaticUpgradeJobRequest, runtime: Util.RuntimeOptions): CreateOTAStaticUpgradeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dnListFileUrl)) {
    query['DnListFileUrl'] = request.dnListFileUrl;
  }
  if (!Util.isUnset(request.downloadProtocol)) {
    query['DownloadProtocol'] = request.downloadProtocol;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.grayPercent)) {
    query['GrayPercent'] = request.grayPercent;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.maximumPerMinute)) {
    query['MaximumPerMinute'] = request.maximumPerMinute;
  }
  if (!Util.isUnset(request.multiModuleMode)) {
    query['MultiModuleMode'] = request.multiModuleMode;
  }
  if (!Util.isUnset(request.needConfirm)) {
    query['NeedConfirm'] = request.needConfirm;
  }
  if (!Util.isUnset(request.needPush)) {
    query['NeedPush'] = request.needPush;
  }
  if (!Util.isUnset(request.overwriteMode)) {
    query['OverwriteMode'] = request.overwriteMode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.retryCount)) {
    query['RetryCount'] = request.retryCount;
  }
  if (!Util.isUnset(request.retryInterval)) {
    query['RetryInterval'] = request.retryInterval;
  }
  if (!Util.isUnset(request.scheduleFinishTime)) {
    query['ScheduleFinishTime'] = request.scheduleFinishTime;
  }
  if (!Util.isUnset(request.scheduleTime)) {
    query['ScheduleTime'] = request.scheduleTime;
  }
  if (!Util.isUnset(request.srcVersion)) {
    query['SrcVersion'] = request.srcVersion;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetDeviceName)) {
    query['TargetDeviceName'] = request.targetDeviceName;
  }
  if (!Util.isUnset(request.targetSelection)) {
    query['TargetSelection'] = request.targetSelection;
  }
  if (!Util.isUnset(request.timeoutInMinutes)) {
    query['TimeoutInMinutes'] = request.timeoutInMinutes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAStaticUpgradeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If you specify that an update package does not need to be verified when you call the [CreateOTAFirmware](~~147311~~) operation, you must make sure that the update package is verified before you call the CreateOTAStaticUpgradeJob operation to create an update batch. For more information about how to create a task to verify an update package, see [CreateOTAVerifyJob](~~147480~~).
  * *   You can initiate update tasks for a maximum of 200 devices in each call. If you use a device list file, you can initiate update tasks for a maximum of 1,000,000 devices. However, you must call the [GenerateDeviceNameListURL](~~186062~~) operation to generate a URL for the device list file. Then, you can perform the operations as prompted to upload the device list file.
  * *   When you initiate update tasks for multiple devices, the devices that already have the destination firmware versions are skipped.
  * *   Each device can be in the pending or updating status only in one update task. If you initiate another update task for a device that is in the pending or updating status, the update task fails.
  * *   You can create multiple static update batches by using a single update package.
  * *   Downloading update packages through the MQTT protocol is supported only in the China (Shanghai) region.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAStaticUpgradeJobRequest
  * @return CreateOTAStaticUpgradeJobResponse
 */
async function createOTAStaticUpgradeJob(request: CreateOTAStaticUpgradeJobRequest): CreateOTAStaticUpgradeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAStaticUpgradeJobWithOptions(request, runtime);
}

model CreateOTAVerifyJobRequest {
  downloadProtocol?: string(name='DownloadProtocol', description='The download protocol of the update package. Valid values: **HTTPS** and **MQTT**. Default value: HTTPS. After the device receives the update package information pushed by IoT Platform, this protocol is used to download the update package.

> If you want to download the update package over MQTT, take note of the following items:
>*   The following regions are supported: China (Shanghai), China (Beijing), and China (Shenzhen).
>*   The OTA update package can contain only one file and the size of the file cannot exceed 16 MB.
>*   You must use the latest version of Link SDK for C to develop the device features to perform OTA updates and download files over MQTT. For more information, see [Sample code](~~330985~~).', example='HTTPS'),
  firmwareId?: string(name='FirmwareId', description='The ID of the update package.

The **FirmwareId** parameter is returned when you call the [CreateOTAFirmware](~~147311~~) operation to create an OTA update package.

You can also call the [ListOTAFirmware](~~147450~~) operation to obtain the ID.', example='nx3xxVvFdwvn6dim50PY03****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of an instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  needConfirm?: boolean(name='NeedConfirm', description='Specifies whether to control the update by using a mobile app. You must develop the mobile app as needed.

*   **false** (default): no. A device obtains the information about the OTA update task based on the **NeedPush** parameter.
*   **true**: yes To perform an OTA update on a device, you must confirm the update by using your mobile app. Then, the device can obtain the information about the OTA update task based on the **NeedPush** parameter.', example='false'),
  needPush?: boolean(name='NeedPush', description='Specifies whether to automatically push update tasks from IoT Platform to devices.

*   **true** (default): yes. After an update batch is created, IoT Platform automatically pushes update tasks to the specified online devices.

    In this case, a device can still initiate a request to obtain the information about the over-the-air (OTA) update task from IoT Platform.

*   **false**: no. A device must initiate a request to obtain the information about the OTA update task from IoT Platform.', example='true'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the OTA update package belongs.', example='a1VJwBw****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the update batch tag. The key must be 1 to 30 characters in length and can contain letters, digits, and periods (.). You can add up to 10 tags for each update batch.

The tags of an update batch are sent to devices when IoT Platform pushes update notifications to the devices.

>  Update batch tags are optional. If you want to specify a tag, you must specify the Tag.N.Value and Tag.N.Key parameters in pair.', example='key1'),
      value?: string(name='Value', description='The value of the update batch tag. The value must be 1 to 1,024 characters in length. You can add up to 10 tags for each update batch. The total length of the tag keys and tag values of all update batches cannot exceed 4,096 characters.

>  Update batch tags are optional. If you want to specify a tag, you must specify the Tag.N.Value and Tag.N.Key parameters in pair.', example='value1'),
    }
  ](name='Tag'),
  targetDeviceName?: [ string ](name='TargetDeviceName', example='testdevice'),
  timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period for a device to update the firmware. Unit: minutes. Valid values: 1 to 1440.', example='1440'),
}

model CreateOTAVerifyJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    jobId?: string(name='JobId', description='The ID of the verification task.', example='wahVIzGkCMuAUE2gDERM02****'),
    utcCreate?: string(name='UtcCreate', description='The time when the verification task was created. The time is displayed in UTC.', example='2019-11-04T06:22:19.566Z'),
  }(name='Data', description='The task information returned if the call is successful. For more information, see the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request. The ID uniquely identifies this request.', example='29EC7245-0FA4-4BB6-B4F5-5F04818FDFB1'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The request failed.', example='true'),
}

model CreateOTAVerifyJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOTAVerifyJobResponseBody(name='body'),
}

/**
  * *   You must verify an update package before you push the package to devices for a batch update. Only verified update packages can be used to update devices in batches. You can call the [QueryOTAFirmware](~~147461~~) operation to view the status of a verification task.
  * *   You cannot initiate a verification task for an update package that is being verified or has been verified.
  * *   You can specify a maximum of 10 devices for a verification task.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAVerifyJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateOTAVerifyJobResponse
 */
async function createOTAVerifyJobWithOptions(request: CreateOTAVerifyJobRequest, runtime: Util.RuntimeOptions): CreateOTAVerifyJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.downloadProtocol)) {
    query['DownloadProtocol'] = request.downloadProtocol;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.needConfirm)) {
    query['NeedConfirm'] = request.needConfirm;
  }
  if (!Util.isUnset(request.needPush)) {
    query['NeedPush'] = request.needPush;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetDeviceName)) {
    query['TargetDeviceName'] = request.targetDeviceName;
  }
  if (!Util.isUnset(request.timeoutInMinutes)) {
    query['TimeoutInMinutes'] = request.timeoutInMinutes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateOTAVerifyJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You must verify an update package before you push the package to devices for a batch update. Only verified update packages can be used to update devices in batches. You can call the [QueryOTAFirmware](~~147461~~) operation to view the status of a verification task.
  * *   You cannot initiate a verification task for an update package that is being verified or has been verified.
  * *   You can specify a maximum of 10 devices for a verification task.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateOTAVerifyJobRequest
  * @return CreateOTAVerifyJobResponse
 */
async function createOTAVerifyJob(request: CreateOTAVerifyJobRequest): CreateOTAVerifyJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createOTAVerifyJobWithOptions(request, runtime);
}

model CreateParserRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  name?: string(name='Name', example='DataParser'),
}

model CreateParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  parserId?: long(name='ParserId', example='100*'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateParserResponseBody(name='body'),
}

async function createParserWithOptions(request: CreateParserRequest, runtime: Util.RuntimeOptions): CreateParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createParser(request: CreateParserRequest): CreateParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createParserWithOptions(request, runtime);
}

model CreateParserDataSourceRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-w2****'),
  name?: string(name='Name', example='DataSource'),
}

model CreateParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSource?: {
    dataSourceId?: long(name='DataSourceId', example='1001'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataSource'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='DataSource'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model CreateParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateParserDataSourceResponseBody(name='body'),
}

async function createParserDataSourceWithOptions(request: CreateParserDataSourceRequest, runtime: Util.RuntimeOptions): CreateParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createParserDataSource(request: CreateParserDataSourceRequest): CreateParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createParserDataSourceWithOptions(request, runtime);
}

model CreateProductRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', description='The edition of the product.

*   If you do not configure this parameter, a product of the Basic Edition is automatically created. You cannot use a TSL model to define the product.
*   If you want to configure this parameter, set the value to **iothub_senior**. A product that supports TSL models is created. You must also configure the **DataFormat** parameter.', example='iothub_senior'),
  authType?: string(name='AuthType', description='The verification method that is used to connect the devices of the product to IoT Platform.

You do not need to configure this parameter. **secret**: uses DeviceSecrets to verify the devices. Default value: secret. For more information, see [MQTT connections over TCP](~~73742~~).', example='secret'),
  categoryKey?: string(name='CategoryKey', description='The identifier of the product category. If you configure this parameter, a TSL model of the product category is used. Otherwise, no TSL model is used.

You can call the [ListThingTemplates](~~150316~~) operation to query the details of product categories that are predefined by IoT Platform and obtain category keys.', example='Lighting'),
  dataFormat?: int32(name='DataFormat', description='The data format.

If the **AliyunCommodityCode** parameter is set to **iothub_senior**, you must configure this parameter.

Valid values:

*   **0**: custom data format.
*   **1**: Alink JSON format.', example='1'),
  description?: string(name='Description', description='The description of the product. The description can be up to 100 characters in length.', example='Product test'),
  id2?: boolean(name='Id2', description='You do not need to configure this parameter.', example='false'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.


**Important**

*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information about the instance, see [Overview](~~356505~~).', example='iot-***-v64***'),
  joinPermissionId?: string(name='JoinPermissionId', description='You do not need to configure this parameter.', example='8***'),
  netType?: string(name='NetType', description='The network connection method.

If the **AliyunCommodityCode** parameter is set to **iothub_senior** and the devices of the product are directly connected devices or gateways, you must configure this parameter.

Valid values:

*   **WIFI**: Wi-Fi.
*   **CELLULAR**: cellular network.
*   **ETHERNET**: Ethernet.
*   **OTHER**: other networks.

Default value: WIFI.', example='WIFI'),
  nodeType?: int32(name='NodeType', description='The node type of the product. Valid values:

*   **0**: device. Sub-devices cannot be attached to a device. A device can be directly connected to IoT Platform or connected to IoT Platform as a sub-device of a gateway. If you use the device as a sub-device, you must also configure the **ProtocolType** parameter.
*   **1**: gateway. Sub-devices can be attached to a gateway. A gateway can manage sub-devices, maintain topological relationships with sub-devices, and synchronize topological relationships to IoT Platform.', example='0'),
  productName?: string(name='ProductName', description='The name of the product.

The name must be 4 to 30 characters in length, and can contain letters, digits, and underscores (\\_).


**Important** Each product name must be unique within the current instance.', example='Light'),
  protocolType?: string(name='ProtocolType', description='The protocol used by the devices of the product to connect to the gateway.

If the **AliyunCommodityCode** parameter is set to **iothub_senior** and a gateway is required to connect the devices of the product to IoT Platform, you must configure this parameter.

Valid values:

*   **modbus**: Modbus.
*   **opc-ua**: Open Platform Communication Unified Architecture (OPC UA).
*   **customize**: custom protocol.
*   **ble**: Bluetooth Low Energy (BLE).
*   **zigbee**: ZigBee.', example='modbus'),
  publishAuto?: boolean(name='PublishAuto', description='Specifies whether to publish the TSL model after the product is created.

*   **true**: publishes the TSL model after the product is created.
*   **false**: does not publish the TSL model after the product is created.

Default value: **true**.', example='false'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the product belongs. If you specify a value for this parameter, the product is added to the resource group.

You can log on to the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups) to view the ID of the resource group.


**Important**

You can specify a value for this parameter only if you have activated Resource Management.', example='rg-acfmxazb4ph***'),
  validateType?: int32(name='ValidateType', description='The level of data verification. If you do not configure this parameter, the default value is used. Valid values:

*   **1**: weak verification. Default value: 1. IoT Platform verifies only the identifier and dataType fields of the data. All data is forwarded.

    In the IoT Platform console, the data is displayed on the **TSL Data** tab of the **Device Details** page. The data that fails to be verified is not displayed.

    You can view the data that failed to be verified in the **checkFailedData** parameter of the forwarded data. For more information, see [Data formats](~~73736~~).

*   **2**: no verification. IoT Platform does not verify the data. All data is forwarded.

    In the IoT Platform console, the data is not displayed on the **TSL Data** tab of the **Device Details** page.', example='1'),
}

model CreateProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='200'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode', description='The type of the product.

*   **iothub_senior**: A TSL model was used.
*   **iothub**: No TSL model was used.', example='iothub_senior'),
    authType?: string(name='AuthType', description='The authentication method that is used to connect the devices of the product to IoT Platform. Valid values:

*   **secret**: uses DeviceSecrets to verify the devices.
*   **id2**: uses IoT Internet Device ID to verify the devices.
*   **x509**: uses X.509 certificates to verify the devices.', example='secret'),
    dataFormat?: int32(name='DataFormat', description='The data format.

*   **0**: custom data format.
*   **1**: Alink JSON format.

>  This parameter is returned only if the AliyunCommodityCode parameter is set to iothub_senior.', example='1'),
    description?: string(name='Description', description='The description of the product.', example='Product test'),
    id2?: boolean(name='Id2', description='Indicates whether IoT Internet Device ID was enabled.

*   **true**: IoT Internet Device ID was enabled.
*   **false**: IoT Internet Device ID was disabled.', example='false'),
    nodeType?: int32(name='NodeType', description='The node type of the product. Valid values:

*   **0**: device. Sub-devices cannot be attached to a device. A device can be directly connected to IoT Platform or connected to IoT Platform as a sub-device of a gateway.
*   **1**: gateway. Sub-devices can be attached to a gateway. A gateway can manage sub-devices, maintain topological relationships with sub-devices, and synchronize topological relationships to IoT Platform.

>  This parameter is available only if the AliyunCommodityCode parameter is set to iothub_senior.', example='0'),
    productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a globally unique identifier (GUID) issued by IoT Platform to a new product.

>  Secure the **ProductKey** of the product. The ProductKey is required when you perform specific operations.', example='a1FlqIQ****'),
    productName?: string(name='ProductName', description='The name of the product.', example='Test'),
    productSecret?: string(name='ProductSecret', description='The ProductSecret of the product.', example='U5tW7i44uilc****'),
    protocolType?: string(name='ProtocolType', description='The protocol used by the devices of the product to connect to the gateway.

>  This parameter is available only if the AliyunCommodityCode parameter is set to iothub_senior.', example='modbus'),
  }(name='Data', description='The product information returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a GUID that is issued by IoT Platform to a product.', example='a1FlqIQ****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

/**
  * If a Thing Specification Language (TSL) model is required to create a product, you must set the **AliyunCommodityCode** parameter to iothub_senior and configure the **DataFormat** parameter.******** For more information, see the "**Request parameters**" section of this topic.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProductResponse
 */
async function createProductWithOptions(request: CreateProductRequest, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunCommodityCode)) {
    query['AliyunCommodityCode'] = request.aliyunCommodityCode;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.categoryKey)) {
    query['CategoryKey'] = request.categoryKey;
  }
  if (!Util.isUnset(request.dataFormat)) {
    query['DataFormat'] = request.dataFormat;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.id2)) {
    query['Id2'] = request.id2;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.joinPermissionId)) {
    query['JoinPermissionId'] = request.joinPermissionId;
  }
  if (!Util.isUnset(request.netType)) {
    query['NetType'] = request.netType;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.productName)) {
    query['ProductName'] = request.productName;
  }
  if (!Util.isUnset(request.protocolType)) {
    query['ProtocolType'] = request.protocolType;
  }
  if (!Util.isUnset(request.publishAuto)) {
    query['PublishAuto'] = request.publishAuto;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.validateType)) {
    query['ValidateType'] = request.validateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If a Thing Specification Language (TSL) model is required to create a product, you must set the **AliyunCommodityCode** parameter to iothub_senior and configure the **DataFormat** parameter.******** For more information, see the "**Request parameters**" section of this topic.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductRequest
  * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateProductDistributeJobRequest {
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to be published.', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance to which the product belongs.

*   The IDs of public instances in different regions:

    *   China (Shanghai): iotx-oxssharez200.
    *   Japan (Tokyo): iotx-oxssharez300.
    *   Singapore (Singapore): iotx-oxssharez400.
    *   US (Silicon Valley): iotx-oxssharez500.
    *   US (Virginia): iotx-oxssharez600.
    *   Germany (Frankfurt): iotx-oxssharez700.

*   The IDs of Enterprise Edition instances:

    1\\. Log on to the IoT Platform console. Select a region from the drop-down list in the upper-left corner of the top navigation bar.

    2\\. On the **Overview** page, click the instance name. On the **Instance Details** page, view the instance ID in the **Basic Information** section.', example='iot-cn-st2***'),
  targetAliyunId?: string(name='TargetAliyunId', description='The Alibaba Cloud account to which the product belongs. You can log on to the IoT Platform console, click the profile picture, and then view **Logon Account** on the **Security Settings** page.

The **TargetUid** and **TargetAliyunId** parameters cannot be left empty at the same time.', example='io****@example.com'),
  targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance to which the product is distributed. For more information about instance IDs, see the description of the **SourceInstanceId** parameter.', example='iot-cn-6ja***'),
  targetUid?: string(name='TargetUid', description='The ID of the Alibaba Cloud account to which the product belongs. You can log on to the IoT Platform console, click the profile picture, and then view **Account ID** on the **Security Settings** page.

The **TargetUid** and **TargetAliyunId** parameters cannot be left empty at the same time.', example='198***'),
}

model CreateProductDistributeJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  jobId?: string(name='JobId', description='The task ID returned if the call is successful. The ID globally identifies the task.', example='UbmsMHmkqv0PiAG****010001'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateProductDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductDistributeJobResponseBody(name='body'),
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   You cannot call this operation to distribute a product across accounts.
  * *   A product distribution task does not distribute the devices under the product.
  * *   After a product is distributed, you cannot modify its TSL model and scripts.
  * *   Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a device distribution task, see [CreateDeviceDistributeJob](~~199390~~).
  * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
  *     **
  *     **Note** RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductDistributeJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProductDistributeJobResponse
 */
async function createProductDistributeJobWithOptions(request: CreateProductDistributeJobRequest, runtime: Util.RuntimeOptions): CreateProductDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    query['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.targetAliyunId)) {
    query['TargetAliyunId'] = request.targetAliyunId;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    query['TargetInstanceId'] = request.targetInstanceId;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   You cannot call this operation to distribute a product across accounts.
  * *   A product distribution task does not distribute the devices under the product.
  * *   After a product is distributed, you cannot modify its TSL model and scripts.
  * *   Each Alibaba Cloud account can create a maximum of 10 tasks to distribute products or devices. For more information about how to create a device distribution task, see [CreateDeviceDistributeJob](~~199390~~).
  * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
  *     **
  *     **Note** RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductDistributeJobRequest
  * @return CreateProductDistributeJobResponse
 */
async function createProductDistributeJob(request: CreateProductDistributeJobRequest): CreateProductDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductDistributeJobWithOptions(request, runtime);
}

model CreateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.


**Important**

*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product. A **ProductKey** is a GUID that is issued by IoT Platform to a product.

You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
  productTag?: [ 
    {
      tagKey?: string(name='TagKey', description='The keys of product tags. Each key must be 1 to 30 characters in length, and can contain letters, digits, and periods (.).


**Important** `abc` is a **key** that is reserved by IoT Platform. You cannot set a **key** to `abc`. If you set a `key` to abc, the key is automatically filtered when you query tags.', example='room'),
      tagValue?: string(name='TagValue', description='The values of the product tags. Each tag value must be 1 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-).', example='TagValue'),
    }
  ](name='ProductTag'),
}

model CreateProductTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='room'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='123$'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags', description='The invalid product tags returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful. The tags were attached to the product.
*   **false**: The call failed. This value indicates that the tags failed to be attached to the product.', example='true'),
}

model CreateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductTagsResponseBody(name='body'),
}

/**
  * *   You can create a maximum of 10 tags for a product in a single call.
  * *   Each product can have a maximum of 100 tags.
  * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProductTagsResponse
 */
async function createProductTagsWithOptions(request: CreateProductTagsRequest, runtime: Util.RuntimeOptions): CreateProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productTag)) {
    query['ProductTag'] = request.productTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can create a maximum of 10 tags for a product in a single call.
  * *   Each product can have a maximum of 100 tags.
  * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductTagsRequest
  * @return CreateProductTagsResponse
 */
async function createProductTags(request: CreateProductTagsRequest): CreateProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductTagsWithOptions(request, runtime);
}

model CreateProductTopicRequest {
  codec?: string(name='Codec'),
  desc?: string(name='Desc', description='The description of the topic category. The description must be 1 to 100 characters in length.', example='submit a test topic'),
  enableProxySubscribe?: boolean(name='EnableProxySubscribe'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  operation?: string(name='Operation', description='The operation permissions of the device on the topic category. Valid values:

*   **SUB**: Subscribe.
*   **PUB**: Publish.
*   **ALL**: Publish and Subscribe.', example='PUB'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product for which you want to create a topic category.', example='aldDEin****'),
  topicShortName?: string(name='TopicShortName', description='The name of the user-defined category level that you want to set. By default, a topic category includes the following levels: \\_productkey\\_ and \\_devicename\\_. Separate the two levels with slashes (/). Format of a topic category: `productKey/deviceName/topicShortName` .

>  Each level can contain letters, digits, and underscores (\\_), and cannot be empty.', example='submit'),
}

model CreateProductTopicResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  topicId?: long(name='TopicId', description='The ID of the topic category. The ID is generated by IoT Platform if the call is successful.

>  Secure the information for future reference. When you call an operation that is related to the topic category, you must provide this parameter.', example='10000'),
}

model CreateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductTopicResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 1 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateProductTopicResponse
 */
async function createProductTopicWithOptions(request: CreateProductTopicRequest, runtime: Util.RuntimeOptions): CreateProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.codec)) {
    query['Codec'] = request.codec;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.enableProxySubscribe)) {
    query['EnableProxySubscribe'] = request.enableProxySubscribe;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicShortName)) {
    query['TopicShortName'] = request.topicShortName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 1 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateProductTopicRequest
  * @return CreateProductTopicResponse
 */
async function createProductTopic(request: CreateProductTopicRequest): CreateProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProductTopicWithOptions(request, runtime);
}

model CreateRuleRequest {
  dataType?: string(name='DataType', description='The format of the data that is processed based on the rule. The value of this parameter must be consistent with the format of device data that you want to process. Valid values:

*   **JSON**: JSON data. This is the default value.
*   **BINARY**: binary data.

>  If this parameter is set to **BINARY**, you cannot set the **TopicType** parameter to 0 and cannot forward data to Tablestore and ApsaraDB RDS.', example='JSON'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. On the **Overview** page in the IoT Platform console, you can view the **ID** of the instance.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If the **Overview** page or instance ID is not displayed in the IoT Platform console, you do not need to configure this parameter.

For more information about the instance, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  name?: string(name='Name', description='The name of the data forwarding rule. The rule name must be 1 to 30 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-).', example='iot_test1'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the rule applies.', example='a1T27vz****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the rule is assigned. You can view the resource group information in the [Resource Management console](https://resourcemanager.console.aliyun.com/resource-groups).

>You can specify a value for this parameter only if you have activated Resource Management.

If you do not specify this parameter, the rule is assigned to the default resource group.', example='rg-acfmxazb4ph****'),
  ruleDesc?: string(name='RuleDesc', description='The description of the rule. The description can be up to 100 characters in length.', example='rule test'),
  select?: string(name='Select', description='The SQL SELECT statement that you want to execute. For more information about the syntax, see [SQL statements](~~30554~~).

>  This parameter specifies the fields in SELECT statements. For example, if the SELECT statement is `SELECT a,b,c`, specify `a,b,c` for this parameter.', example='deviceName() as deviceName, items.Humidity.value as Humidity, items.Temperature.value as Temperature'),
  shortTopic?: string(name='ShortTopic', description='The topic to which this rule is applied. Format: `${deviceName}/topicShortName`. `${deviceName}` specifies the name of the device, and `topicShortName` specifies the custom name of the topic.

*   Basic communication topics or Thing Specification Language (TSL)-based communication topics. Format: `${deviceName}/topicShortName`. You can replace `${deviceName}` with the `+` wildcard character. The wildcard character indicates that the topic applies to all devices under the product. Valid values of `topicShortName`:

    *   `/thing/event/property/post`: submits the property data of a device.

    *   `/thing/event/${tsl.event.identifier}/post`: submits the event data of a device. `${tsl.event.identifier}` specifies the identifier of an event in the TSL model.

    *   `/thing/lifecycle`: submits device lifecycle changes.

    *   `/thing/downlink/reply/message`: sends a response to a request from IoT Platform.

    *   `/thing/list/found`: submits the data when a gateway detects a new sub-device.

    *   `/thing/topo/lifecycle`: submits device topology changes.

    *   `/thing/event/property/history/post`: submits the historical property data of a device.

    *   `/thing/event/${tsl.event.identifier}/post`: submits the historical event data of a device. `${tsl.event.identifier}` specifies the identifier of an event in the TSL model.

    *   `/ota/upgrade`: submits the OTA update status.

    *   `/ota/version/post`: submits OTA module versions.

    *   `/thing/deviceinfo/update`: submits device tag changes.

    *   `/edge/driver/${driver_id}/point_post`: submits pass-through data from Link IoT Edge. `${driver_id}` specifies the ID of the driver that a device uses to access Link IoT Edge.

        The `${packageId}/${jobId}/ota/job/status` topic submits the status of OTA update batches. This topic is a basic communication topic. `${packageId}` specifies the ID of the update package. `${jobId}` specifies the ID of the update batch.

*   Custom topics. Example: `${deviceName}/user/get`.

    You can call the [QueryProductTopic](~~69647~~) operation to view all custom topics of the product.

    When you specify a custom topic, you can use the `+` and `#` wildcard characters.

    *   You can replace `${deviceName}` with the `+` wildcard character. The wildcard character specifies that the topic applies to all devices in the product.

    *   You can add `/user/#` after ${deviceName}. The `#` wildcard character can match all field values at the levels that follow `/user`.

        For more information about how to use wildcard characters, see [Custom topics with one or more wildcard characters](~~85539~~).

*   Topics that are used to submit device status changes. The topic name is in the `${deviceName}` format.

    You can use the `+` wildcard character. In this case, the status changes of all devices under the product are submitted.', example='+/thing/event/property/post'),
  topic?: string(name='Topic', description='The complete topic to which the rule applies.

If you specify this parameter, you do not need to specify the **ShortTopic** and **TopicType** parameters.', example='/sys/g18l***/device1/thing/event/property/post'),
  topicType?: int32(name='TopicType', description='*   **0**: The topic is a basic communication topic or TSL-based communication topic. The topic that is used to submit the status of OTA update batches belongs to the basic communication topics.****
*   **1**: a custom topic.
*   **2**: The topic is used to submit device status changes. Format: `/as/mqtt/status/${productKey}/${deviceName}`.', example='1'),
  where?: string(name='Where', description='The condition that is used to trigger the rule. For more information about the rule, see [SQL statements](~~30554~~).

>  This parameter specifies the fields in the **WHERE** clause. For example, if the **WHERE** clause is `WHERE a > 10`, you must specify `a > 10` for this parameter.', example='Temperature>35'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request. The ID uniquely identifies this request.', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  ruleId?: long(name='RuleId', description='The ID of the rule. If the call succeeds, the rule ID is generated by the rules engine.

>  Keep the information safe for future reference. You must provide the rule ID when you want to call rule-related operations.', example='100000'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRuleResponseBody(name='body'),
}

/**
  * When you call this operation, you must specify the **ProductKey** parameter in the request.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRuleResponse
 */
async function createRuleWithOptions(request: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.ruleDesc)) {
    query['RuleDesc'] = request.ruleDesc;
  }
  if (!Util.isUnset(request.select)) {
    query['Select'] = request.select;
  }
  if (!Util.isUnset(request.shortTopic)) {
    query['ShortTopic'] = request.shortTopic;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.topicType)) {
    query['TopicType'] = request.topicType;
  }
  if (!Util.isUnset(request.where)) {
    query['Where'] = request.where;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, you must specify the **ProductKey** parameter in the request.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateRuleRequest
  * @return CreateRuleResponse
 */
async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateRuleActionRequest {
  configuration?: string(name='Configuration', description='The configurations of the rule action. You must specify a JSON string. The configurations vary based on the types of rule actions. For more information about required syntax and examples, see the following tables.', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
  errorActionFlag?: boolean(name='ErrorActionFlag', description='Specifies whether the rule action forwards error operation data. Error operation data is generated when the rules engine failed to forward data from the IoT Platform topic to the destination cloud service. A data forwarding failure indicates that forwarding retries also fail. Valid values:

*   **true**: forwards error operation data.
*   **false**: forwards normal data instead of error operation data.

Default value: **false**.', example='false'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  ruleId?: long(name='RuleId', description='The ID of the rule for which you want to create an action. You can log on to the IoT Platform console, and choose **Rules** > **Data Forwarding** to view the rule ID. You can also call the [ListRule](~~69486~~) operation and view the rule ID in the response.', example='100000'),
  type?: string(name='Type', description='The type of the rule action. Valid values:

*   **REPUBLISH**: forwards topic data that is processed by the rules engine to another IoT Platform topic.
*   **AMQP**: forwards data to an AMQP consumer group.
*   **MNS**: forwards data that is processed by the rules engine to Message Service (MNS).
*   **FC**: forwards topic data that is processed by the rules engine to Function Compute for event computing.
*   **OTS**: forwards data that is processed by the rules engine to OTS for NoSQL data storage.

>  If you set the **DataType** parameter to **BINARY**, rules are created in the binary format. These rules cannot be used to forward data to Tablestore.', example='REPUBLISH'),
}

model CreateRuleActionResponseBody = {
  actionId?: long(name='ActionId', description='The ID of the action. The action ID is generated by the rules engine if the call is successful.

>  Secure the information for future reference. When you call an operation that is related to the rule action, you must provide the action ID.', example='10003'),
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRuleActionResponseBody(name='body'),
}

/**
  * ## Limits
  * *   Destination Alibaba Cloud services that are supported by the rules engine vary based on regions. For more information about the regions and destination cloud services that are supported by the rules engine, see [Regions and zones](~~85669~~).
  * *   You can create a maximum of 10 rule actions for each rule.
  * *   You can call this API operation to define rule actions to forward data to an IoT Platform topic, AMQP consumer group, or Alibaba Cloud service. The supported Alibaba Cloud services include Message Service (MNS), Function Compute, and Tablestore. If you need to forward data to ApsaraDB RDS, you must use the [IoT Platform console](https://iot.console.aliyun.com).
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateRuleActionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRuleActionResponse
 */
async function createRuleActionWithOptions(request: CreateRuleActionRequest, runtime: Util.RuntimeOptions): CreateRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.errorActionFlag)) {
    query['ErrorActionFlag'] = request.errorActionFlag;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   Destination Alibaba Cloud services that are supported by the rules engine vary based on regions. For more information about the regions and destination cloud services that are supported by the rules engine, see [Regions and zones](~~85669~~).
  * *   You can create a maximum of 10 rule actions for each rule.
  * *   You can call this API operation to define rule actions to forward data to an IoT Platform topic, AMQP consumer group, or Alibaba Cloud service. The supported Alibaba Cloud services include Message Service (MNS), Function Compute, and Tablestore. If you need to forward data to ApsaraDB RDS, you must use the [IoT Platform console](https://iot.console.aliyun.com).
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateRuleActionRequest
  * @return CreateRuleActionResponse
 */
async function createRuleAction(request: CreateRuleActionRequest): CreateRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleActionWithOptions(request, runtime);
}

model CreateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleContent?: string(name='RuleContent'),
  ruleDescription?: string(name='RuleDescription'),
  ruleName?: string(name='RuleName', example='test'),
}

model CreateSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
  success?: boolean(name='Success', example='true'),
}

model CreateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSceneRuleResponseBody(name='body'),
}

async function createSceneRuleWithOptions(request: CreateSceneRuleRequest, runtime: Util.RuntimeOptions): CreateSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleContent)) {
    query['RuleContent'] = request.ruleContent;
  }
  if (!Util.isUnset(request.ruleDescription)) {
    query['RuleDescription'] = request.ruleDescription;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSceneRule(request: CreateSceneRuleRequest): CreateSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSceneRuleWithOptions(request, runtime);
}

model CreateSchedulePeriodRequest {
  description?: string(name='Description', example='test'),
  endTime?: string(name='EndTime', example='01:00'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
  startTime?: string(name='StartTime', example='00:00'),
}

model CreateSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSchedulePeriodResponseBody(name='body'),
}

async function createSchedulePeriodWithOptions(request: CreateSchedulePeriodRequest, runtime: Util.RuntimeOptions): CreateSchedulePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSchedulePeriod',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSchedulePeriod(request: CreateSchedulePeriodRequest): CreateSchedulePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSchedulePeriodWithOptions(request, runtime);
}

model CreateSoundCodeRequest {
  duration?: int32(name='Duration', example='2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='TEST123'),
  openType?: string(name='OpenType', example='OPEN'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
}

model CreateSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSoundCodeResponseBody(name='body'),
}

async function createSoundCodeWithOptions(request: CreateSoundCodeRequest, runtime: Util.RuntimeOptions): CreateSoundCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.openType)) {
    body['OpenType'] = request.openType;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSoundCode',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSoundCode(request: CreateSoundCodeRequest): CreateSoundCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSoundCodeWithOptions(request, runtime);
}

model CreateSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  label?: string(name='Label', example='test'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model CreateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSoundCodeLabelResponseBody(name='body'),
}

async function createSoundCodeLabelWithOptions(request: CreateSoundCodeLabelRequest, runtime: Util.RuntimeOptions): CreateSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSoundCodeLabel(request: CreateSoundCodeLabelRequest): CreateSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSoundCodeLabelWithOptions(request, runtime);
}

model CreateSoundCodeScheduleRequest {
  description?: string(name='Description', example='test'),
  endDate?: string(name='EndDate', example='2022-03-31'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test'),
  openType?: string(name='OpenType', example='INNER'),
  startDate?: string(name='StartDate', example='2022-03-31'),
}

model CreateSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSoundCodeScheduleResponseBody(name='body'),
}

async function createSoundCodeScheduleWithOptions(request: CreateSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): CreateSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.openType)) {
    body['OpenType'] = request.openType;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSoundCodeSchedule(request: CreateSoundCodeScheduleRequest): CreateSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSoundCodeScheduleWithOptions(request, runtime);
}

model CreateSpeechRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  bizCode?: string(name='BizCode', example='identifying'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Xiaoyun'),
  volume?: int32(name='Volume', example='50'),
}

model CreateSpeechShrinkRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  bizCode?: string(name='BizCode', example='identifying'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeConfigShrink?: string(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Xiaoyun'),
  volume?: int32(name='Volume', example='50'),
}

model CreateSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model CreateSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSpeechResponseBody(name='body'),
}

async function createSpeechWithOptions(tmpReq: CreateSpeechRequest, runtime: Util.RuntimeOptions): CreateSpeechResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSpeechShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.soundCodeConfig)) {
    request.soundCodeConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.soundCodeConfig, 'SoundCodeConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.bizCode)) {
    body['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.enableSoundCode)) {
    body['EnableSoundCode'] = request.enableSoundCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.soundCodeConfigShrink)) {
    body['SoundCodeConfig'] = request.soundCodeConfigShrink;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.speechType)) {
    body['SpeechType'] = request.speechType;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSpeech(request: CreateSpeechRequest): CreateSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSpeechWithOptions(request, runtime);
}

model CreateStudioAppDomainOpenRequest {
  appId?: string(name='AppId', example='a12*******'),
  host?: string(name='Host', example='www.aliyun.test.com'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123******'),
  protocol?: string(name='Protocol', example='https'),
}

model CreateStudioAppDomainOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    appId?: string(name='AppId', example='a12******'),
    host?: string(name='Host', example='www.aliyun.test.com'),
    id?: int32(name='Id', example='1573'),
    isBeian?: string(name='IsBeian', example='YES'),
    projectId?: string(name='ProjectId', example='a12*******'),
    protocol?: string(name='Protocol', example='https'),
    tenantId?: string(name='TenantId', example='C70B541046F64EAABE3*******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model CreateStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStudioAppDomainOpenResponseBody(name='body'),
}

async function createStudioAppDomainOpenWithOptions(request: CreateStudioAppDomainOpenRequest, runtime: Util.RuntimeOptions): CreateStudioAppDomainOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.host)) {
    body['Host'] = request.host;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.protocol)) {
    body['Protocol'] = request.protocol;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateStudioAppDomainOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createStudioAppDomainOpen(request: CreateStudioAppDomainOpenRequest): CreateStudioAppDomainOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStudioAppDomainOpenWithOptions(request, runtime);
}

model CreateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', example='nJRaJPn5U1JITGfjBO9l00****'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', description='Specifies whether to push upstream device messages. Valid values:

*   **true**: yes.
*   **false**: no. This is the default value.', example='true'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', description='Specifies whether to push messages about device lifecycle changes. Valid values:

*   **true**: yes.
*   **false**: no. This is the default value.', example='true'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', description='Specifies whether to push messages about device status changes. Valid values:

*   **true**: yes.
*   **false**: no. This is the default value.', example='true'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', description='Specifies whether to push messages about device tag changes. Valid values:

*   **true**: yes. This parameter is valid only if you set the **Type** parameter to **AMQP**.
*   **false**: no. This is the default value.', example='true'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', description='Specifies whether to push messages about topological relationship changes of devices. Valid values:

*   **true**: yes. This parameter is valid only for gateway products.
*   **false**: no. This is the default value.', example='true'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', description='Specifies whether to push messages when a gateway detects new sub-devices. Valid values:

*   **true**: yes. This parameter is valid only for gateway products.
*   **false**: no. This is the default value.', example='true'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  mnsConfiguration?: string(name='MnsConfiguration', description='The configurations of the MNS queue. If you set the **Type** parameter to **AMQP**, this parameter is required.

For more information, see the "Definition of the MnsConfiguration parameter" section.', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }'),
  otaEventFlag?: boolean(name='OtaEventFlag', description='Specifies whether to push notifications about the status of over-the-air (OTA) update batches. Valid values:

*   **true**: yes.
*   **false**: no. This is the default value.', example='true'),
  otaJobFlag?: boolean(name='OtaJobFlag', description='Specifies whether to push notifications about the status of OTA update batches. Valid values:

*   **true**: yes. This parameter is valid only if you set the **Type** parameter to **AMQP**.
*   **false**: no. This is the default value.', example='true'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', description='Specifies whether to push messages about the version numbers of OTA modules. Valid values:

*   **true**: yes. This parameter is valid only if you set the **Type** parameter to **AMQP**.
*   **false**: no. This is the default value.', example='true'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product that is specified for the subscription.', example='a1fyXVF****'),
  subscribeFlags?: string(name='SubscribeFlags', description='Specifies whether to receive the messages of a specific subscribed product.

If you subscribe to JT/T 808 gateway products, you must configure the **SubscribeFlags** parameter. Set the value to the following code.

```

{
    "jt808DeviceDataFlag": true
}
```', example='{     "jt808DeviceDataFlag": true }'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', description='Specifies whether to push upstream historical Thing Specification Language (TSL) data. Valid values:

*   **true**: yes.
*   **false**: no. This is the default value.', example='true'),
  type?: string(name='Type', description='The type of the subscription. Valid values:

*   **MNS**
*   **AMQP**', example='AMQP'),
}

model CreateSubscribeRelationResponseBody = {
  code?: string(name='Code', description='The error code that is returned if the call fails. For more information about error codes, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSubscribeRelationResponseBody(name='body'),
}

/**
  * Server-side subscriptions are categorized into the following two types:
  * *   MNS subscription: pushes subscribed messages to MNS queues. Your server applications listen to MNS queues to receive device messages. For more information, see [Configure MNS server-side subscriptions](~~68948~~). You can call this operation to create an MNS subscription.
  * *   AMQP subscription: pushes subscribed messages to your server by using the AMQP channel. For more information, see [Configure AMQP server-side subscriptions](~~142376~~). To configure an AMQP subscription, perform the following steps:
  *     1\\. Call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group and obtain the returned consumer group ID. Messages are pushed to the consumer group. The AMQP client carries the consumer group ID when the client connected to IoT Platform. For more information, see [Connect an AMQP client to IoT Platform](~~142489~~).
  *     2\\. Call the CreateSubscribeRelation operation to create an AMQP subscription.
  *     3\\. Optional. Call the [CreateConsumerGroupSubscribeRelation](~~170354~~) operation to add a consumer group to the AMQP subscription. You can also call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove a consumer group from an AMQP subscription.
  *     4\\. Optional. Call the [QueryConsumerGroupStatus](~~170358~~) operation to query the status of a consumer group, including online client information, message consumption rate, number of accumulated messages, and last message consumption time. You can also call the [ResetConsumerGroupPosition](~~170355~~) operation to clear the accumulated messages of the consumer group.
  * ## QPS limits
  * You can call this API operation up to five times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateSubscribeRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSubscribeRelationResponse
 */
async function createSubscribeRelationWithOptions(request: CreateSubscribeRelationRequest, runtime: Util.RuntimeOptions): CreateSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupIds)) {
    query['ConsumerGroupIds'] = request.consumerGroupIds;
  }
  if (!Util.isUnset(request.deviceDataFlag)) {
    query['DeviceDataFlag'] = request.deviceDataFlag;
  }
  if (!Util.isUnset(request.deviceLifeCycleFlag)) {
    query['DeviceLifeCycleFlag'] = request.deviceLifeCycleFlag;
  }
  if (!Util.isUnset(request.deviceStatusChangeFlag)) {
    query['DeviceStatusChangeFlag'] = request.deviceStatusChangeFlag;
  }
  if (!Util.isUnset(request.deviceTagFlag)) {
    query['DeviceTagFlag'] = request.deviceTagFlag;
  }
  if (!Util.isUnset(request.deviceTopoLifeCycleFlag)) {
    query['DeviceTopoLifeCycleFlag'] = request.deviceTopoLifeCycleFlag;
  }
  if (!Util.isUnset(request.foundDeviceListFlag)) {
    query['FoundDeviceListFlag'] = request.foundDeviceListFlag;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.mnsConfiguration)) {
    query['MnsConfiguration'] = request.mnsConfiguration;
  }
  if (!Util.isUnset(request.otaEventFlag)) {
    query['OtaEventFlag'] = request.otaEventFlag;
  }
  if (!Util.isUnset(request.otaJobFlag)) {
    query['OtaJobFlag'] = request.otaJobFlag;
  }
  if (!Util.isUnset(request.otaVersionFlag)) {
    query['OtaVersionFlag'] = request.otaVersionFlag;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.subscribeFlags)) {
    query['SubscribeFlags'] = request.subscribeFlags;
  }
  if (!Util.isUnset(request.thingHistoryFlag)) {
    query['ThingHistoryFlag'] = request.thingHistoryFlag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Server-side subscriptions are categorized into the following two types:
  * *   MNS subscription: pushes subscribed messages to MNS queues. Your server applications listen to MNS queues to receive device messages. For more information, see [Configure MNS server-side subscriptions](~~68948~~). You can call this operation to create an MNS subscription.
  * *   AMQP subscription: pushes subscribed messages to your server by using the AMQP channel. For more information, see [Configure AMQP server-side subscriptions](~~142376~~). To configure an AMQP subscription, perform the following steps:
  *     1\\. Call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group and obtain the returned consumer group ID. Messages are pushed to the consumer group. The AMQP client carries the consumer group ID when the client connected to IoT Platform. For more information, see [Connect an AMQP client to IoT Platform](~~142489~~).
  *     2\\. Call the CreateSubscribeRelation operation to create an AMQP subscription.
  *     3\\. Optional. Call the [CreateConsumerGroupSubscribeRelation](~~170354~~) operation to add a consumer group to the AMQP subscription. You can also call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove a consumer group from an AMQP subscription.
  *     4\\. Optional. Call the [QueryConsumerGroupStatus](~~170358~~) operation to query the status of a consumer group, including online client information, message consumption rate, number of accumulated messages, and last message consumption time. You can also call the [ResetConsumerGroupPosition](~~170355~~) operation to clear the accumulated messages of the consumer group.
  * ## QPS limits
  * You can call this API operation up to five times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateSubscribeRelationRequest
  * @return CreateSubscribeRelationResponse
 */
async function createSubscribeRelation(request: CreateSubscribeRelationRequest): CreateSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubscribeRelationWithOptions(request, runtime);
}

model CreateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product. The identifier must be 1 to 30 characters in length, and can contain letters, digits, and underscores (\\_).

This parameter must be used in combination with the **FunctionBlockName** parameter. If you do not specify this parameter, the system imports the default module.', example='BatteryModule'),
  functionBlockName?: string(name='FunctionBlockName', description='The name of the custom module. The name must be 4 to 30 characters in length, and can contain letters, digits, and underscores (\\_).

This parameter must be used in combination with the **FunctionBlockId** parameter. If you do not specify this parameter, the system imports the default module.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwAGV****'),
  thingModelJson?: string(name='ThingModelJson', description='The details of the new features.

>  You can specify a maximum of 10 features.

Example:

```

{
  "properties": [
    {
      "custom": true,
      "dataSpecsList": [
        {
          "childDataType": "TEXT",
          "childName": "CCID number of the device SIM card",
          "dataSpecs": {
            "custom": true,
            "dataType": "TEXT",
            "length": 20
          },
          "dataType": "STRUCT",
          "identifier": "CCID",
          "name": "CCID number of the device SIM card"
        },
        {
          "childDataType": "INT",
          "childName": "Battery power",
          "dataSpecs": {
            "custom": true,
            "dataType": "INT",
            "max": "60000",
            "min": "0",
            "step": "1"
          },
          "dataType": "STRUCT",
          "identifier": "battery",
          "name": "Battery power"
        },
        {
          "childDataType": "TEXT",
          "childName": "Other information",
          "dataSpecs": {
            "custom": true,
            "dataType": "TEXT",
            "length": 1024
          },
          "dataType": "STRUCT",
          "identifier": "other_info",
          "name": "Other information"
        }
      ],
      "dataType": "STRUCT",
      "identifier": "DEV_INFO",
      "name": "Device information",
      "productKey": "a1T***",
      "propertyId": 18786548,
      "required": false,
      "rwFlag": "READ_ONLY"
    },
    {
      "custom": true,
      "dataSpecs": {
        "childDataType": "INT",
        "custom": true,
        "dataType": "ARRAY",
        "size": 1,
        "dataSpecs": {
          "custom": true,
          "dataType": "INT",
          "max": "65535",
          "min": "0",
          "step": "1",
          "unit": "ppm",
          "unitName": "Parts per million"
        }
      },
      "dataType": "ARRAY",
      "identifier": "airRH_SR",
      "name": "Dehumidifier humidity",
      "productKey": "a1T***",
      "propertyId": 18786551,
      "required": false,
      "rwFlag": "READ_ONLY"
    }
  ],
  "services": [...],
  "events": [...]
}
                                
```

In the **properties** structure of the **ThingModelJson** parameter, you can use the **extendConfig** parameter to define the extended information of the TSL model. For more information, see [Data structure of ThingModelJson](~~150457~~).'),
}

model CreateThingModelResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateThingModelResponseBody(name='body'),
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   Before you call the operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
  * *   You can call this operation to add a maximum of 10 TSL features. TSL features include properties, services, and events.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateThingModelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateThingModelResponse
 */
async function createThingModelWithOptions(request: CreateThingModelRequest, runtime: Util.RuntimeOptions): CreateThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.functionBlockName)) {
    query['FunctionBlockName'] = request.functionBlockName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.thingModelJson)) {
    query['ThingModelJson'] = request.thingModelJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   Before you call the operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
  * *   You can call this operation to add a maximum of 10 TSL features. TSL features include properties, services, and events.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateThingModelRequest
  * @return CreateThingModelResponse
 */
async function createThingModel(request: CreateThingModelRequest): CreateThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThingModelWithOptions(request, runtime);
}

model CreateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify this parameter. Otherwise, the call fails.
>*   If the **Overview** page does not appear in the console or no ID is generated for your instance, you do not need to specify this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.

You can view the **ProductKey** on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1Q5XoY****'),
  scriptContent?: string(name='ScriptContent', description='The content of the script. You must specify this parameter.

For more information about script examples, see [What is data parsing](~~68702~~).', example='"function protocolToRawData(jsonObj) {return rawdata; }function rawDataToProtocol(rawData) {return jsonObj; }"'),
  scriptType?: string(name='ScriptType', description='The language of the script. Valid values:

*   JavaScript
*   Python\\_27: Python 2.7
*   PHP\\_72: PHP 7.2', example='JavaScript'),
}

model CreateThingScriptResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  requestId?: string(name='RequestId', description='The ID of the request. The ID uniquely identifies this request.', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model CreateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateThingScriptResponseBody(name='body'),
}

/**
  * A data parsing script is used to convert data submitted by devices into the JSON format. The data submitted by devices is in a custom format. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
  * > If the data format is **Alink JSON**, the CreateThingScript operation is not supported. Alink JSON is a standard data format that is defined by IoT Connectivity Alliance (ICA).
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateThingScriptRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateThingScriptResponse
 */
async function createThingScriptWithOptions(request: CreateThingScriptRequest, runtime: Util.RuntimeOptions): CreateThingScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.scriptContent)) {
    query['ScriptContent'] = request.scriptContent;
  }
  if (!Util.isUnset(request.scriptType)) {
    query['ScriptType'] = request.scriptType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateThingScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A data parsing script is used to convert data submitted by devices into the JSON format. The data submitted by devices is in a custom format. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
  * > If the data format is **Alink JSON**, the CreateThingScript operation is not supported. Alink JSON is a standard data format that is defined by IoT Connectivity Alliance (ICA).
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateThingScriptRequest
  * @return CreateThingScriptResponse
 */
async function createThingScript(request: CreateThingScriptRequest): CreateThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return createThingScriptWithOptions(request, runtime);
}

model CreateTopicConfigRequest {
  codec?: string(name='Codec'),
  description?: string(name='Description'),
  enableBroadcast?: boolean(name='EnableBroadcast'),
  enableProxySubscribe?: boolean(name='EnableProxySubscribe'),
  iotInstanceId?: string(name='IotInstanceId'),
  operation?: string(name='Operation'),
  productKey?: string(name='ProductKey'),
  topicFullName?: string(name='TopicFullName'),
}

model CreateTopicConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTopicConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTopicConfigResponseBody(name='body'),
}

async function createTopicConfigWithOptions(request: CreateTopicConfigRequest, runtime: Util.RuntimeOptions): CreateTopicConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.codec)) {
    query['Codec'] = request.codec;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableBroadcast)) {
    query['EnableBroadcast'] = request.enableBroadcast;
  }
  if (!Util.isUnset(request.enableProxySubscribe)) {
    query['EnableProxySubscribe'] = request.enableProxySubscribe;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTopicConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTopicConfig(request: CreateTopicConfigRequest): CreateTopicConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTopicConfigWithOptions(request, runtime);
}

model CreateTopicRouteTableRequest {
  dstTopic?: [ string ](name='DstTopic', example='/x7aWKW9****/deviceNameTest1/user/add'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  srcTopic?: string(name='SrcTopic', description='The source topic. Example: `SrcTopic=/x7aWKW9 ****** /testDataToDataHub/user/update`.', example='/x7aWKW9****/testDataToDataHub/user/update'),
}

model CreateTopicRouteTableResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.', example='iot.system.SystemException'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics', description='The list of topics returned if the call fails.'),
  isAllSucceed?: boolean(name='IsAllSucceed', description='Indicates whether all the message routing relationships between topics are established.

*   **true**: All the message routing relationships between topics are established.
*   **false**: Not all the message routing relationships between topics are established.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model CreateTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTopicRouteTableResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can specify a maximum of 100 destination topics for a source topic.
  * *   The device to which the source topic belongs must be activated.
  * *   The source and destination topics support only custom topics.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateTopicRouteTableRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateTopicRouteTableResponse
 */
async function createTopicRouteTableWithOptions(request: CreateTopicRouteTableRequest, runtime: Util.RuntimeOptions): CreateTopicRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dstTopic)) {
    query['DstTopic'] = request.dstTopic;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.srcTopic)) {
    query['SrcTopic'] = request.srcTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTopicRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can specify a maximum of 100 destination topics for a source topic.
  * *   The device to which the source topic belongs must be activated.
  * *   The source and destination topics support only custom topics.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request CreateTopicRouteTableRequest
  * @return CreateTopicRouteTableResponse
 */
async function createTopicRouteTable(request: CreateTopicRouteTableRequest): CreateTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTopicRouteTableWithOptions(request, runtime);
}

model DeleteClientIdsRequest {
  iotId?: string(name='IotId', description='The ID of the device.', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-12****78'),
}

model DeleteClientIdsResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the call was successful. Other values indicate that errors occurred. For more information about error codes, see [Error codes](~~87387~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteClientIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteClientIdsResponseBody(name='body'),
}

/**
  * *   You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device and obtain the number of ClientIDs.
  * *   After you call the DeleteClientIds operation, all ClientIDs of the device are deleted and cannot be resumed. To obtain a new ClientID, you can register the device again.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteClientIdsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteClientIdsResponse
 */
async function deleteClientIdsWithOptions(request: DeleteClientIdsRequest, runtime: Util.RuntimeOptions): DeleteClientIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientIds',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device and obtain the number of ClientIDs.
  * *   After you call the DeleteClientIds operation, all ClientIDs of the device are deleted and cannot be resumed. To obtain a new ClientID, you can register the device again.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteClientIdsRequest
  * @return DeleteClientIdsResponse
 */
async function deleteClientIds(request: DeleteClientIdsRequest): DeleteClientIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientIdsWithOptions(request, runtime);
}

model DeleteConsumerGroupRequest {
  groupId?: string(name='GroupId', description='The ID of the consumer group. After you call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group, the consumer group ID is returned. You can call the [QueryConsumerGroupList](~~170419~~) operation to query the consumer group ID by group name. You can also go to the IoT Platform console,and choose **Rules** > **Server-side Subscription** > **Consumer Groups** to view the consumer group ID.', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
}

model DeleteConsumerGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConsumerGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You cannot delete the default consumer group provided by IoT Platform.
  * *   If the consumer group is associated with an AMQP subscription, you must disassociate the consumer group from the subscription. If the subscription has multiple consumer groups, you can call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove the consumer group from the subscription. If the subscription has only one consumer group, you can call the [UpdateSubscribeRelation](~~170351~~) operation to change the consumer group or call the [DeleteSubscribeRelation](~~170353~~) operation to delete the subscription.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteConsumerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroupWithOptions(request: DeleteConsumerGroupRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You cannot delete the default consumer group provided by IoT Platform.
  * *   If the consumer group is associated with an AMQP subscription, you must disassociate the consumer group from the subscription. If the subscription has multiple consumer groups, you can call the [DeleteConsumerGroupSubscribeRelation](~~170357~~) operation to remove the consumer group from the subscription. If the subscription has only one consumer group, you can call the [UpdateSubscribeRelation](~~170351~~) operation to change the consumer group or call the [DeleteSubscribeRelation](~~170353~~) operation to delete the subscription.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteConsumerGroupRequest
  * @return DeleteConsumerGroupResponse
 */
async function deleteConsumerGroup(request: DeleteConsumerGroupRequest): DeleteConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupWithOptions(request, runtime);
}

model DeleteConsumerGroupSubscribeRelationRequest {
  consumerGroupId?: string(name='ConsumerGroupId', description='The ID of the consumer group. You can call the [QuerySubscribeRelation](~~170352~~) operation to query the consumer group ID in an AMQP subscription. You can also go to the IoT Platform console,and choose **Rules** > **Server-side Subscription** to view the consumer group ID.', example='nJRaJPn5U1JITGfjBO9l00****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product that is specified for the subscription.', example='a1fyXVF****'),
}

model DeleteConsumerGroupSubscribeRelationResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteConsumerGroupSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteConsumerGroupSubscribeRelationResponseBody(name='body'),
}

/**
  * ## Limits
  * *   If the AMQP subscription has only one consumer group, you cannot call this operation to remove the consumer group.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteConsumerGroupSubscribeRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteConsumerGroupSubscribeRelationResponse
 */
async function deleteConsumerGroupSubscribeRelationWithOptions(request: DeleteConsumerGroupSubscribeRelationRequest, runtime: Util.RuntimeOptions): DeleteConsumerGroupSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupId)) {
    query['ConsumerGroupId'] = request.consumerGroupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConsumerGroupSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   If the AMQP subscription has only one consumer group, you cannot call this operation to remove the consumer group.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteConsumerGroupSubscribeRelationRequest
  * @return DeleteConsumerGroupSubscribeRelationResponse
 */
async function deleteConsumerGroupSubscribeRelation(request: DeleteConsumerGroupSubscribeRelationRequest): DeleteConsumerGroupSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteConsumerGroupSubscribeRelationWithOptions(request, runtime);
}

model DeleteDataSourceItemRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  dataSourceItemId?: long(name='DataSourceItemId', example='129322'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****'),
}

model DeleteDataSourceItemResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDataSourceItemResponseBody(name='body'),
}

async function deleteDataSourceItemWithOptions(request: DeleteDataSourceItemRequest, runtime: Util.RuntimeOptions): DeleteDataSourceItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.dataSourceItemId)) {
    query['DataSourceItemId'] = request.dataSourceItemId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDataSourceItem',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDataSourceItem(request: DeleteDataSourceItemRequest): DeleteDataSourceItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataSourceItemWithOptions(request, runtime);
}

model DeleteDestinationRequest {
  destinationId?: long(name='DestinationId', example='1003'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model DeleteDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDestinationResponseBody(name='body'),
}

async function deleteDestinationWithOptions(request: DeleteDestinationRequest, runtime: Util.RuntimeOptions): DeleteDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDestination(request: DeleteDestinationRequest): DeleteDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDestinationWithOptions(request, runtime);
}

model DeleteDeviceRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.


> If you configure this parameter, you must specify a value for the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device.



**Important** The IotId parameter specifies a globally unique identifier (GUID) for the device. The value of the **IotId** parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for this parameter, you do not need to configure the **ProductKey** or **DeviceName** parameter. If you specify values for the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='MpEKNuEUJzIORNANAWJX0010929900*****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.



>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.



> If you configure this parameter, you must specify a value for the **DeviceName** parameter.', example='a1FlqIQ****'),
}

model DeleteDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.prod.NullProductKey'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='false'),
}

model DeleteDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceResponseBody(name='body'),
}

/**
  * *   When you call this operation with an Alibaba Cloud account, IoT Platform sends a verification code by text message to confirm your identity.
  * *   When you call this operation with a RAM user, IoT Platform does not send a verification code. To ensure device security, you can create custom permission policies to perform fine-grained permission management. For more information, see [Mapping of IoT Platform operations and RAM policies](~~47485~~) and [Custom permissions](~~47495~~).
  * **Warning**
  * *   After a device is deleted, the device ID (**IotId**) becomes invalid, and all other information associated with the device is deleted. In addition, you can no longer perform an operation on the device.
  * *   Before you delete a device in the IoT Platform console, make sure that the corresponding actual device is offline. Otherwise, after the device is deleted from IoT Platform, the actual device continues to initiate connection requests to IoT Platform. If the number of requests exceeds the upper limit, IoT Platform starts request throttling. In this case, access of other devices within your Alibaba Cloud account is affected.
  * *   After you delete a device, the certificate of the device becomes invalid and cannot be restored. Proceed with caution.
  * ****
  * *   You must specify a value for the **IotId** parameter or values for the **ProductKey** and **DeviceName** parameters to identify a device.
  * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDeviceResponse
 */
async function deleteDeviceWithOptions(request: DeleteDeviceRequest, runtime: Util.RuntimeOptions): DeleteDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   When you call this operation with an Alibaba Cloud account, IoT Platform sends a verification code by text message to confirm your identity.
  * *   When you call this operation with a RAM user, IoT Platform does not send a verification code. To ensure device security, you can create custom permission policies to perform fine-grained permission management. For more information, see [Mapping of IoT Platform operations and RAM policies](~~47485~~) and [Custom permissions](~~47495~~).
  * **Warning**
  * *   After a device is deleted, the device ID (**IotId**) becomes invalid, and all other information associated with the device is deleted. In addition, you can no longer perform an operation on the device.
  * *   Before you delete a device in the IoT Platform console, make sure that the corresponding actual device is offline. Otherwise, after the device is deleted from IoT Platform, the actual device continues to initiate connection requests to IoT Platform. If the number of requests exceeds the upper limit, IoT Platform starts request throttling. In this case, access of other devices within your Alibaba Cloud account is affected.
  * *   After you delete a device, the certificate of the device becomes invalid and cannot be restored. Proceed with caution.
  * ****
  * *   You must specify a value for the **IotId** parameter or values for the **ProductKey** and **DeviceName** parameters to identify a device.
  * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceRequest
  * @return DeleteDeviceResponse
 */
async function deleteDevice(request: DeleteDeviceRequest): DeleteDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceWithOptions(request, runtime);
}

model DeleteDeviceDistributeJobRequest {
  jobId?: string(name='JobId', description='The ID of the distribution task. The ID globally identifies the task.', example='UbmsMHmkqv0PiAG****010001'),
}

model DeleteDeviceDistributeJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceDistributeJobResponseBody(name='body'),
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceDistributeJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDeviceDistributeJobResponse
 */
async function deleteDeviceDistributeJobWithOptions(request: DeleteDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): DeleteDeviceDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceDistributeJobRequest
  * @return DeleteDeviceDistributeJobResponse
 */
async function deleteDeviceDistributeJob(request: DeleteDeviceDistributeJobRequest): DeleteDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceDistributeJobWithOptions(request, runtime);
}

model DeleteDeviceDynamicGroupRequest {
  groupId?: string(name='GroupId', example='tDQvBJqbUyHs***'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
}

model DeleteDeviceDynamicGroupResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceDynamicGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceDynamicGroupResponseBody(name='body'),
}

async function deleteDeviceDynamicGroupWithOptions(request: DeleteDeviceDynamicGroupRequest, runtime: Util.RuntimeOptions): DeleteDeviceDynamicGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceDynamicGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceDynamicGroup(request: DeleteDeviceDynamicGroupRequest): DeleteDeviceDynamicGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceDynamicGroupWithOptions(request, runtime);
}

model DeleteDeviceFileRequest {
  deviceName?: string(name='DeviceName', description='The name of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  fileId?: string(name='FileId', description='The ID of the file. You can call the [QueryDeviceFileList](~~112001~~) operation and view the file ID in the response.', example='6UCo1SqbqnQEoh9aK4561****'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model DeleteDeviceFileResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceFileResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDeviceFileResponse
 */
async function deleteDeviceFileWithOptions(request: DeleteDeviceFileRequest, runtime: Util.RuntimeOptions): DeleteDeviceFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceFile',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceFileRequest
  * @return DeleteDeviceFileResponse
 */
async function deleteDeviceFile(request: DeleteDeviceFileRequest): DeleteDeviceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceFileWithOptions(request, runtime);
}

model DeleteDeviceGroupRequest {
  groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.', example='tDQvBJqbUyHs****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model DeleteDeviceGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDeviceGroupResponse
 */
async function deleteDeviceGroupWithOptions(request: DeleteDeviceGroupRequest, runtime: Util.RuntimeOptions): DeleteDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDeviceGroupRequest
  * @return DeleteDeviceGroupResponse
 */
async function deleteDeviceGroup(request: DeleteDeviceGroupRequest): DeleteDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceGroupWithOptions(request, runtime);
}

model DeleteDevicePropRequest {
  deviceName?: string(name='DeviceName', description='The name of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
  propKey?: string(name='PropKey', description='The key of the tag.

>  IoT Platform searches for the specified tag key and then deletes the tag. If no result is found, no operation is performed.', example='room'),
}

model DeleteDevicePropResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteDevicePropResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDevicePropResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDevicePropRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDevicePropResponse
 */
async function deleteDevicePropWithOptions(request: DeleteDevicePropRequest, runtime: Util.RuntimeOptions): DeleteDevicePropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.propKey)) {
    query['PropKey'] = request.propKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceProp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteDevicePropRequest
  * @return DeleteDevicePropResponse
 */
async function deleteDeviceProp(request: DeleteDevicePropRequest): DeleteDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDevicePropWithOptions(request, runtime);
}

model DeleteDeviceSpeechRequest {
  deviceSpeechList?: [ 
    {
      audioFormat?: string(name='AudioFormat', example='wav'),
      bizCode?: string(name='BizCode', example='identifying'),
    }
  ](name='DeviceSpeechList'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model DeleteDeviceSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceSpeechResponseBody(name='body'),
}

async function deleteDeviceSpeechWithOptions(request: DeleteDeviceSpeechRequest, runtime: Util.RuntimeOptions): DeleteDeviceSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceSpeechList)) {
    body['DeviceSpeechList'] = request.deviceSpeechList;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceSpeech(request: DeleteDeviceSpeechRequest): DeleteDeviceSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceSpeechWithOptions(request, runtime);
}

model DeleteDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
}

model DeleteDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeviceTunnelResponseBody(name='body'),
}

async function deleteDeviceTunnelWithOptions(request: DeleteDeviceTunnelRequest, runtime: Util.RuntimeOptions): DeleteDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tunnelId)) {
    query['TunnelId'] = request.tunnelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceTunnel(request: DeleteDeviceTunnelRequest): DeleteDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceTunnelWithOptions(request, runtime);
}

model DeleteEdgeDriverRequest {
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver that you want to delete and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='fec565038d7544978d9aed5c1a******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model DeleteEdgeDriverResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F82E857F-B6B9-4CCC-96B8-E4BE97095F1A'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model DeleteEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeDriverResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You are not allowed to delete a driver that has a published version.
  * *   Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteEdgeDriverRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteEdgeDriverResponse
 */
async function deleteEdgeDriverWithOptions(request: DeleteEdgeDriverRequest, runtime: Util.RuntimeOptions): DeleteEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You are not allowed to delete a driver that has a published version.
  * *   Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteEdgeDriverRequest
  * @return DeleteEdgeDriverResponse
 */
async function deleteEdgeDriver(request: DeleteEdgeDriverRequest): DeleteEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeDriverWithOptions(request, runtime);
}

model DeleteEdgeDriverVersionRequest {
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver for which you want to delete a driver version and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', description='The version number of the driver.', example='1.2.0'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model DeleteEdgeDriverVersionResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='J82E857F-T6B9-4FDE-96B8-E4BE97095D1A'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model DeleteEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeDriverVersionResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You are not allowed to delete a published driver version.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteEdgeDriverVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteEdgeDriverVersionResponse
 */
async function deleteEdgeDriverVersionWithOptions(request: DeleteEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): DeleteEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You are not allowed to delete a published driver version.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteEdgeDriverVersionRequest
  * @return DeleteEdgeDriverVersionResponse
 */
async function deleteEdgeDriverVersion(request: DeleteEdgeDriverVersionRequest): DeleteEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeDriverVersionWithOptions(request, runtime);
}

model DeleteEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to delete and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model DeleteEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F29C33E5-BF22-48FE-9FEF-8A24146E3388'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model DeleteEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeInstanceResponseBody(name='body'),
}

/**
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteEdgeInstanceResponse
 */
async function deleteEdgeInstanceWithOptions(request: DeleteEdgeInstanceRequest, runtime: Util.RuntimeOptions): DeleteEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteEdgeInstanceRequest
  * @return DeleteEdgeInstanceResponse
 */
async function deleteEdgeInstance(request: DeleteEdgeInstanceRequest): DeleteEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeInstanceWithOptions(request, runtime);
}

model DeleteEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='5zvK1COK1gtr********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  routeId?: long(name='RouteId', example='123456'),
}

model DeleteEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E252BC84-EF9A-4F0F-8E73-ADCF9CA3B722'),
  success?: boolean(name='Success', example='true'),
}

model DeleteEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function deleteEdgeInstanceMessageRoutingWithOptions(request: DeleteEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): DeleteEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEdgeInstanceMessageRouting(request: DeleteEdgeInstanceMessageRoutingRequest): DeleteEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model DeleteJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
}

model DeleteJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='C25255EA-9F6E-4E04-85FE-AC1E9C136EBB'),
  success?: boolean(name='Success', example='true'),
}

model DeleteJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteJobResponseBody(name='body'),
}

async function deleteJobWithOptions(request: DeleteJobRequest, runtime: Util.RuntimeOptions): DeleteJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteJob(request: DeleteJobRequest): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteJobWithOptions(request, runtime);
}

model DeleteOTAFirmwareRequest {
  firmwareId?: string(name='FirmwareId', description='The unique ID of the OTA update package.

An update package ID is returned when you call the [CreateOTAFirmware](~~147311~~) operation to create the update package.

You can call the [ListOTAFirmware](~~147450~~) operation and view the update package ID in the response.', example='s8SSHiKjpBfrM3BSN0z803****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model DeleteOTAFirmwareResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9B7BF858-7686-496E-B8B0-BF9E5D7F86CE'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOTAFirmwareResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteOTAFirmwareRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteOTAFirmwareResponse
 */
async function deleteOTAFirmwareWithOptions(request: DeleteOTAFirmwareRequest, runtime: Util.RuntimeOptions): DeleteOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteOTAFirmwareRequest
  * @return DeleteOTAFirmwareResponse
 */
async function deleteOTAFirmware(request: DeleteOTAFirmwareRequest): DeleteOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOTAFirmwareWithOptions(request, runtime);
}

model DeleteOTAModuleRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', description='The name of the OTA module.', example='barcodeScanner'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the OTA module belongs.', example='a1uctKe****'),
}

model DeleteOTAModuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOTAModuleResponseBody(name='body'),
}

/**
  * ## Limits
  * *   The default module cannot be deleted.
  * *   If an update package exists in an OTA module, you cannot delete the OTA module.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteOTAModuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteOTAModuleResponse
 */
async function deleteOTAModuleWithOptions(request: DeleteOTAModuleRequest, runtime: Util.RuntimeOptions): DeleteOTAModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteOTAModule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   The default module cannot be deleted.
  * *   If an update package exists in an OTA module, you cannot delete the OTA module.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteOTAModuleRequest
  * @return DeleteOTAModuleResponse
 */
async function deleteOTAModule(request: DeleteOTAModuleRequest): DeleteOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteOTAModuleWithOptions(request, runtime);
}

model DeleteParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  parserId?: long(name='ParserId', example='1001'),
}

model DeleteParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteParserResponseBody(name='body'),
}

async function deleteParserWithOptions(request: DeleteParserRequest, runtime: Util.RuntimeOptions): DeleteParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteParser(request: DeleteParserRequest): DeleteParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteParserWithOptions(request, runtime);
}

model DeleteParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model DeleteParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DeleteParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteParserDataSourceResponseBody(name='body'),
}

async function deleteParserDataSourceWithOptions(request: DeleteParserDataSourceRequest, runtime: Util.RuntimeOptions): DeleteParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteParserDataSource(request: DeleteParserDataSourceRequest): DeleteParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteParserDataSourceWithOptions(request, runtime);
}

model DeleteProductRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-64***'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product that you want to delete. A ProductKey is a GUID that is issued by IoT Platform to a product. You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
}

model DeleteProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductResponseBody(name='body'),
}

/**
  * ## Limits
  * *   After a product is deleted, the ProductKey of the product is invalid. The related information about the product is also deleted. You cannot perform the required operations on the product.
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteProductResponse
 */
async function deleteProductWithOptions(request: DeleteProductRequest, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   After a product is deleted, the ProductKey of the product is invalid. The related information about the product is also deleted. You cannot perform the required operations on the product.
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteProductRequest
  * @return DeleteProductResponse
 */
async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.



>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64***'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a GUID that is issued by IoT Platform to a product. You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
  productTagKey?: [ string ](name='ProductTagKey', example='room'),
}

model DeleteProductTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductTagsResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can delete a maximum of 10 tags in a single call.
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteProductTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteProductTagsResponse
 */
async function deleteProductTagsWithOptions(request: DeleteProductTagsRequest, runtime: Util.RuntimeOptions): DeleteProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productTagKey)) {
    query['ProductTagKey'] = request.productTagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can delete a maximum of 10 tags in a single call.
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteProductTagsRequest
  * @return DeleteProductTagsResponse
 */
async function deleteProductTags(request: DeleteProductTagsRequest): DeleteProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductTagsWithOptions(request, runtime);
}

model DeleteProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  topicId?: string(name='TopicId', description='The ID of the topic category that you want to delete.', example='798****'),
}

model DeleteProductTopicResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductTopicResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteProductTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteProductTopicResponse
 */
async function deleteProductTopicWithOptions(request: DeleteProductTopicRequest, runtime: Util.RuntimeOptions): DeleteProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.topicId)) {
    query['TopicId'] = request.topicId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteProductTopicRequest
  * @return DeleteProductTopicResponse
 */
async function deleteProductTopic(request: DeleteProductTopicRequest): DeleteProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProductTopicWithOptions(request, runtime);
}

model DeleteRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', description='The ID of the rule that you want to delete. You can log on to the IoT Platform console and choose **Rules** > **Data Forwarding** to view the rule ID. You can also call the [ListRule](~~69486~~) operation and view the rule ID in the response.', example='100000'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A8F48485-44B9-40D8-A56D-F716F384F387'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRuleResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRuleResponse
 */
async function deleteRuleWithOptions(request: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteRuleRequest
  * @return DeleteRuleResponse
 */
async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model DeleteRuleActionRequest {
  actionId?: long(name='ActionId', description='The identifier of the rule action that you want to delete.

After you call the [CreateRuleAction](~~69586~~) operation to create a rule action, the rule action ID is returned. You can call the [ListRuleActions](~~69517~~) operation to view the rule action ID.', example='100001'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model DeleteRuleActionResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8FC9E36B-E0DC-4802-84EE-184E255B4E95'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRuleActionResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteRuleActionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRuleActionResponse
 */
async function deleteRuleActionWithOptions(request: DeleteRuleActionRequest, runtime: Util.RuntimeOptions): DeleteRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionId)) {
    query['ActionId'] = request.actionId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteRuleActionRequest
  * @return DeleteRuleActionResponse
 */
async function deleteRuleAction(request: DeleteRuleActionRequest): DeleteRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleActionWithOptions(request, runtime);
}

model DeleteSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model DeleteSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSceneRuleResponseBody(name='body'),
}

async function deleteSceneRuleWithOptions(request: DeleteSceneRuleRequest, runtime: Util.RuntimeOptions): DeleteSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSceneRule(request: DeleteSceneRuleRequest): DeleteSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSceneRuleWithOptions(request, runtime);
}

model DeleteSchedulePeriodRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  periodCode?: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSchedulePeriodResponseBody(name='body'),
}

async function deleteSchedulePeriodWithOptions(request: DeleteSchedulePeriodRequest, runtime: Util.RuntimeOptions): DeleteSchedulePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.periodCode)) {
    body['PeriodCode'] = request.periodCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSchedulePeriod',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSchedulePeriod(request: DeleteSchedulePeriodRequest): DeleteSchedulePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSchedulePeriodWithOptions(request, runtime);
}

model DeleteShareTaskDeviceRequest {
  iotIdList?: [ string ](name='IotIdList', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  shareTaskId?: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteShareTaskDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    progress?: int32(name='Progress', example='100'),
    progressId?: string(name='ProgressId', example='Md3ZiTL888K9llXDy7890***********'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model DeleteShareTaskDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteShareTaskDeviceResponseBody(name='body'),
}

async function deleteShareTaskDeviceWithOptions(request: DeleteShareTaskDeviceRequest, runtime: Util.RuntimeOptions): DeleteShareTaskDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotIdList)) {
    body['IotIdList'] = request.iotIdList;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.shareTaskId)) {
    body['ShareTaskId'] = request.shareTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteShareTaskDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteShareTaskDevice(request: DeleteShareTaskDeviceRequest): DeleteShareTaskDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteShareTaskDeviceWithOptions(request, runtime);
}

model DeleteSoundCodeRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSoundCodeResponseBody(name='body'),
}

async function deleteSoundCodeWithOptions(request: DeleteSoundCodeRequest, runtime: Util.RuntimeOptions): DeleteSoundCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSoundCode',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSoundCode(request: DeleteSoundCodeRequest): DeleteSoundCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSoundCodeWithOptions(request, runtime);
}

model DeleteSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSoundCodeLabelResponseBody(name='body'),
}

async function deleteSoundCodeLabelWithOptions(request: DeleteSoundCodeLabelRequest, runtime: Util.RuntimeOptions): DeleteSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSoundCodeLabel(request: DeleteSoundCodeLabelRequest): DeleteSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSoundCodeLabelWithOptions(request, runtime);
}

model DeleteSoundCodeScheduleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model DeleteSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSoundCodeScheduleResponseBody(name='body'),
}

async function deleteSoundCodeScheduleWithOptions(request: DeleteSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): DeleteSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSoundCodeSchedule(request: DeleteSoundCodeScheduleRequest): DeleteSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSoundCodeScheduleWithOptions(request, runtime);
}

model DeleteSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  speechCodeList?: [ string ](name='SpeechCodeList', example='4de2c367****8c585e5992**'),
}

model DeleteSpeechResponseBody = {
  code?: string(name='Code', example='iot.speech.InvalidSpeechCodeList'),
  errorMessage?: string(name='ErrorMessage', example='invalid SpeechCodeList'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSpeechResponseBody(name='body'),
}

async function deleteSpeechWithOptions(request: DeleteSpeechRequest, runtime: Util.RuntimeOptions): DeleteSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.speechCodeList)) {
    body['SpeechCodeList'] = request.speechCodeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSpeech(request: DeleteSpeechRequest): DeleteSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSpeechWithOptions(request, runtime);
}

model DeleteStudioAppDomainOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  domainId?: int32(name='DomainId', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123*******'),
}

model DeleteStudioAppDomainOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model DeleteStudioAppDomainOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStudioAppDomainOpenResponseBody(name='body'),
}

async function deleteStudioAppDomainOpenWithOptions(request: DeleteStudioAppDomainOpenRequest, runtime: Util.RuntimeOptions): DeleteStudioAppDomainOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.domainId)) {
    body['DomainId'] = request.domainId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStudioAppDomainOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStudioAppDomainOpen(request: DeleteStudioAppDomainOpenRequest): DeleteStudioAppDomainOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStudioAppDomainOpenWithOptions(request, runtime);
}

model DeleteSubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product that is specified for the subscription.', example='a1fyXVF****'),
  type?: string(name='Type', description='The type of the subscription. Valid values:

*   **MNS**
*   **AMQP**', example='AMQP'),
}

model DeleteSubscribeRelationResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSubscribeRelationResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteSubscribeRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSubscribeRelationResponse
 */
async function deleteSubscribeRelationWithOptions(request: DeleteSubscribeRelationRequest, runtime: Util.RuntimeOptions): DeleteSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteSubscribeRelationRequest
  * @return DeleteSubscribeRelationResponse
 */
async function deleteSubscribeRelation(request: DeleteSubscribeRelationRequest): DeleteSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubscribeRelationWithOptions(request, runtime);
}

model DeleteThingModelRequest {
  eventIdentifier?: [ string ](name='EventIdentifier', example='OfflineAlert'),
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

*   If you configure the BatteryModule parameter when a value is specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from the specified custom TSL module. If you do not configure the BatteryModule parameter, the operation removes one or more specified features from the default TSL module.
*   If you configure the BatteryModule parameter when the **PropertyIdentifier.N**, **ServiceIdentifier.N**, and **EventIdentifier.N** parameters are empty, the operation removes all features from the specified custom TSL module.', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.', example='a1BwAGV****'),
  propertyIdentifier?: [ string ](name='PropertyIdentifier', example='Temperature'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

>  You cannot configure this parameter.', example='rg-acfm4l5tcwd****'),
  serviceIdentifier?: [ string ](name='ServiceIdentifier', example='Set'),
}

model DeleteThingModelResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteThingModelResponseBody(name='body'),
}

/**
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call the DeleteThingModel operation.
  * *   If an existing feature or custom TSL module in a product is not published, you can call the DeleteThingModel operation to remove the feature or delete the custom TSL module.
  * *   When you call the DeleteThingModel operation, you must specify a value for the **ProductKey** parameter. The following list describes how the DeleteThingModel operation works:
  *     *   If you specify a value only for the **ProductKey** parameter, the operation deletes all custom TSL modules and removes all features in the default TSL module from the specified product.
  *     *   If you specify values only for the **ProductKey** and **FunctionBlockId** parameters, the operation deletes the specified custom TSL module from the specified product.
  *     *   If you specify a value for the **ProductKey** parameter and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from the default TSL module of the specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist in the default TSL module, the operation returns the same result as when you specify a value only for the **ProductKey** parameter.
  *     *   If you specify values for the **ProductKey** and **FunctionBlockId** parameters and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from a specified custom TSL module in a specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist, the operation returns the same result as when you specify values only for the **ProductKey** and **FunctionBlockId** parameters.
  * > You must specify up to 10 identifiers for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter.
  * *   After you call the DeleteThingModel operation to remove one or more features from a product, you must call the [PublishThingModel](~~150311~~) operation to re-publish the TSL model of the product. This way, the change takes effect.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 5 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request DeleteThingModelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteThingModelResponse
 */
async function deleteThingModelWithOptions(request: DeleteThingModelRequest, runtime: Util.RuntimeOptions): DeleteThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventIdentifier)) {
    query['EventIdentifier'] = request.eventIdentifier;
  }
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.propertyIdentifier)) {
    query['PropertyIdentifier'] = request.propertyIdentifier;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.serviceIdentifier)) {
    query['ServiceIdentifier'] = request.serviceIdentifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call the DeleteThingModel operation.
  * *   If an existing feature or custom TSL module in a product is not published, you can call the DeleteThingModel operation to remove the feature or delete the custom TSL module.
  * *   When you call the DeleteThingModel operation, you must specify a value for the **ProductKey** parameter. The following list describes how the DeleteThingModel operation works:
  *     *   If you specify a value only for the **ProductKey** parameter, the operation deletes all custom TSL modules and removes all features in the default TSL module from the specified product.
  *     *   If you specify values only for the **ProductKey** and **FunctionBlockId** parameters, the operation deletes the specified custom TSL module from the specified product.
  *     *   If you specify a value for the **ProductKey** parameter and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from the default TSL module of the specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist in the default TSL module, the operation returns the same result as when you specify a value only for the **ProductKey** parameter.
  *     *   If you specify values for the **ProductKey** and **FunctionBlockId** parameters and a value for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter, the operation removes one or more specified features from a specified custom TSL module in a specified product. The operation removes the specified features only if the features exist. If the value that you specified for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter does not exist, the operation returns the same result as when you specify values only for the **ProductKey** and **FunctionBlockId** parameters.
  * > You must specify up to 10 identifiers for the **PropertyIdentifier.N**, **ServiceIdentifier.N**, or **EventIdentifier.N** parameter.
  * *   After you call the DeleteThingModel operation to remove one or more features from a product, you must call the [PublishThingModel](~~150311~~) operation to re-publish the TSL model of the product. This way, the change takes effect.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 5 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request DeleteThingModelRequest
  * @return DeleteThingModelResponse
 */
async function deleteThingModel(request: DeleteThingModelRequest): DeleteThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteThingModelWithOptions(request, runtime);
}

model DeleteTopicConfigRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
  topicFullName?: string(name='TopicFullName'),
}

model DeleteTopicConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteTopicConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTopicConfigResponseBody(name='body'),
}

async function deleteTopicConfigWithOptions(request: DeleteTopicConfigRequest, runtime: Util.RuntimeOptions): DeleteTopicConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTopicConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTopicConfig(request: DeleteTopicConfigRequest): DeleteTopicConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTopicConfigWithOptions(request, runtime);
}

model DeleteTopicRouteTableRequest {
  dstTopic?: [ string ](name='DstTopic', example='/x7aWKW9***/deviceNameTest1/user/add'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  srcTopic?: string(name='SrcTopic', example='/x7aWKW9***/testDataToDataHub/user/update'),
}

model DeleteTopicRouteTableResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  failureTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='FailureTopics', description='The list of topics returned if the call fails.'),
  isAllSucceed?: boolean(name='IsAllSucceed', description='Indicates whether all the routing relationships of the topic are deleted.

*   **true**: All the routing relationships of the topic are deleted.
*   **false**: Not all the message routing relationships of the topic are deleted.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DeleteTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTopicRouteTableResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteTopicRouteTableRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteTopicRouteTableResponse
 */
async function deleteTopicRouteTableWithOptions(request: DeleteTopicRouteTableRequest, runtime: Util.RuntimeOptions): DeleteTopicRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dstTopic)) {
    query['DstTopic'] = request.dstTopic;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.srcTopic)) {
    query['SrcTopic'] = request.srcTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTopicRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DeleteTopicRouteTableRequest
  * @return DeleteTopicRouteTableResponse
 */
async function deleteTopicRouteTable(request: DeleteTopicRouteTableRequest): DeleteTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTopicRouteTableWithOptions(request, runtime);
}

model DetachDestinationRequest {
  destinationId?: long(name='DestinationId', description='The ID of the data destination. You can call the [ListDestination](~~433025~~) operation to query data destinations and obtain the ID of the **data destination**.', example='1002'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-2w****'),
  parserId?: long(name='ParserId', description='The ID of the parser. You can call the [ListParser](~~444814~~) operation to query parsers and obtain the ID of the **parser**.', example='1000'),
}

model DetachDestinationResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DetachDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachDestinationResponseBody(name='body'),
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request DetachDestinationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DetachDestinationResponse
 */
async function detachDestinationWithOptions(request: DetachDestinationRequest, runtime: Util.RuntimeOptions): DetachDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request DetachDestinationRequest
  * @return DetachDestinationResponse
 */
async function detachDestination(request: DetachDestinationRequest): DetachDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDestinationWithOptions(request, runtime);
}

model DetachParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  parserId?: long(name='ParserId', example='1000'),
}

model DetachParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model DetachParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachParserDataSourceResponseBody(name='body'),
}

async function detachParserDataSourceWithOptions(request: DetachParserDataSourceRequest, runtime: Util.RuntimeOptions): DetachParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachParserDataSource(request: DetachParserDataSourceRequest): DetachParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachParserDataSourceWithOptions(request, runtime);
}

model DisableDeviceTunnelRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model DisableDeviceTunnelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='73671995-9588-406B-9C1E-FC38450A2AA1'),
  success?: boolean(name='Success', example='true'),
}

model DisableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDeviceTunnelResponseBody(name='body'),
}

async function disableDeviceTunnelWithOptions(request: DisableDeviceTunnelRequest, runtime: Util.RuntimeOptions): DisableDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDeviceTunnel(request: DisableDeviceTunnelRequest): DisableDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDeviceTunnelWithOptions(request, runtime);
}

model DisableDeviceTunnelShareRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model DisableDeviceTunnelShareResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='35023CAB-CBED-4A2E-92DF-201C72850B50'),
  success?: boolean(name='Success', example='true'),
}

model DisableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDeviceTunnelShareResponseBody(name='body'),
}

async function disableDeviceTunnelShareWithOptions(request: DisableDeviceTunnelShareRequest, runtime: Util.RuntimeOptions): DisableDeviceTunnelShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDeviceTunnelShare',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDeviceTunnelShare(request: DisableDeviceTunnelShareRequest): DisableDeviceTunnelShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDeviceTunnelShareWithOptions(request, runtime);
}

model DisableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='fec565038d7544978d9aed5c1a******'),
}

model DisableSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7BAA989EK'),
  success?: boolean(name='Success', example='true'),
}

model DisableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableSceneRuleResponseBody(name='body'),
}

async function disableSceneRuleWithOptions(request: DisableSceneRuleRequest, runtime: Util.RuntimeOptions): DisableSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSceneRule(request: DisableSceneRuleRequest): DisableSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSceneRuleWithOptions(request, runtime);
}

model DisableThingRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model DisableThingResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model DisableThingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableThingResponseBody(name='body'),
}

/**
  * ## Limits
  * *   After a device is disabled, you cannot connect the device to IoT Platform. You can perform device-specific operations on the device. However, the information about the device is still retained in IoT Platform. You can use the [EnableThing](~~69603~~) API operation to connect the disabled device to IoT Platform again.
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DisableThingRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableThingResponse
 */
async function disableThingWithOptions(request: DisableThingRequest, runtime: Util.RuntimeOptions): DisableThingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableThing',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   After a device is disabled, you cannot connect the device to IoT Platform. You can perform device-specific operations on the device. However, the information about the device is still retained in IoT Platform. You can use the [EnableThing](~~69603~~) API operation to connect the disabled device to IoT Platform again.
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request DisableThingRequest
  * @return DisableThingResponse
 */
async function disableThing(request: DisableThingRequest): DisableThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableThingWithOptions(request, runtime);
}

model EnableDeviceTunnelRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model EnableDeviceTunnelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='577F07AF-7EFE-4B98-AEA2-634ED864BA01'),
  success?: boolean(name='Success', example='true'),
}

model EnableDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableDeviceTunnelResponseBody(name='body'),
}

async function enableDeviceTunnelWithOptions(request: EnableDeviceTunnelRequest, runtime: Util.RuntimeOptions): EnableDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableDeviceTunnel(request: EnableDeviceTunnelRequest): EnableDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDeviceTunnelWithOptions(request, runtime);
}

model EnableDeviceTunnelShareRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model EnableDeviceTunnelShareResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3DB31A1A-BD83-4155-AD2B-56AD041E372C'),
  success?: boolean(name='Success', example='true'),
}

model EnableDeviceTunnelShareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableDeviceTunnelShareResponseBody(name='body'),
}

async function enableDeviceTunnelShareWithOptions(request: EnableDeviceTunnelShareRequest, runtime: Util.RuntimeOptions): EnableDeviceTunnelShareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableDeviceTunnelShare',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableDeviceTunnelShare(request: EnableDeviceTunnelShareRequest): EnableDeviceTunnelShareResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDeviceTunnelShareWithOptions(request, runtime);
}

model EnableSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model EnableSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EK'),
  success?: boolean(name='Success', example='true'),
}

model EnableSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableSceneRuleResponseBody(name='body'),
}

async function enableSceneRuleWithOptions(request: EnableSceneRuleRequest, runtime: Util.RuntimeOptions): EnableSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSceneRule(request: EnableSceneRuleRequest): EnableSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSceneRuleWithOptions(request, runtime);
}

model EnableThingRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you provide this parameter, you do not need to provide the **ProductKey** or **DeviceName** parameters. As the GUID of the device, **IotId** corresponds to the combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model EnableThingResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model EnableThingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableThingResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request EnableThingRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnableThingResponse
 */
async function enableThingWithOptions(request: EnableThingRequest, runtime: Util.RuntimeOptions): EnableThingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableThing',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request EnableThingRequest
  * @return EnableThingResponse
 */
async function enableThing(request: EnableThingRequest): EnableThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableThingWithOptions(request, runtime);
}

model GenerateDeviceNameListURLRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
}

model GenerateDeviceNameListURLResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID of the bucket owner.

The OSS bucket stores the file.', example='cS8uRRy54Rsz****'),
    fileUrl?: string(name='FileUrl', description='The URL of the file that is stored in OSS.

After the device list file is uploaded, this parameter is used to call the [CreateOTAStaticUpgradeJob](~~147496~~) operation to create a static update batch.', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.csv'),
    host?: string(name='Host', description='The endpoint of OSS.', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com'),
    key?: string(name='Key', description='The full path of the file in OSS. You can call the OSS PostObject operation to upload the file to OSS.', example='ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.csv'),
    objectStorage?: string(name='ObjectStorage', description='The type of the object storage. Default value: OSS.', example='OSS'),
    policy?: string(name='Policy', description='The parameter that is used by OSS to verify form fields for the request.', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', description='The signature that is calculated based on **AccessKeySecret** and **Policy**. When you call an OSS operation, OSS uses the signature information to verify the POST request.', example='v6lViO4FBvfquajQjg20K5hK****'),
    utcCreate?: string(name='UtcCreate', description='The time when the URL of the file that you want to upload was generated. The time is displayed in UTC.', example='2019-11-04T06:21:54.607Z'),
  }(name='Data', description='The information returned if the call is successful. For more information, see the following parameters:'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GenerateDeviceNameListURLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateDeviceNameListURLResponseBody(name='body'),
}

/**
  * This operation can be used with other operations to upload a device list file. Procedure:
  * 1. Call this operation to generate the information of a device list file that you want to upload to OSS.  
  * The response parameters of this API operation include:
  * The following request parameters of the OSS [PostObject](/help/en/object-storage-service/latest/postobject) operation that is used to upload the device list file: **Key**, **AccessKeyId**, **Signature**, and **Policy**.  
  * 2. Use an [OSS SDK](/help/en/object-storage-service/latest/sdk-code-samples-overview) to call the [PostObject](/help/en/object-storage-service/latest/postobject) operation to upload the device list file within 1 minute after a response is returned. For more information about sample code, see the "Usage of response parameters" section in this topic.  
  * >  The parameter information that is returned by this operation is valid for 1 minute. You must upload the device list file within 1 minute.  3. After you upload the device list file, call the [CreateOTAStaticUpgradeJob](/help/en/iot-platform/latest/e1qtmo) operation of IoT Platform to create a static update batch within 60 minutes.  
  * If you upload device list files but you do not call the CreateOTAStaticUpgradeJob operation to create a static update batch, the system automatically deletes the uploaded files. The system deletes files on a regular basis.  
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account. 
  * ## Requirements
  * *   A device list file contains the names of devices. Separate multiple device names with line feeds. Each line contains only one device name. A device list file must be in the CSV format. The maximum size of a device list file is 5 MB.
  * *   Each device list file can contain up to 10,000 names for the devices in a product that is related to an update package. If the number of device names in a device list file exceeds the limit, an error occurs when you use the file to create a static update batch.
  *
  * @param request GenerateDeviceNameListURLRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GenerateDeviceNameListURLResponse
 */
async function generateDeviceNameListURLWithOptions(request: GenerateDeviceNameListURLRequest, runtime: Util.RuntimeOptions): GenerateDeviceNameListURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateDeviceNameListURL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation can be used with other operations to upload a device list file. Procedure:
  * 1. Call this operation to generate the information of a device list file that you want to upload to OSS.  
  * The response parameters of this API operation include:
  * The following request parameters of the OSS [PostObject](/help/en/object-storage-service/latest/postobject) operation that is used to upload the device list file: **Key**, **AccessKeyId**, **Signature**, and **Policy**.  
  * 2. Use an [OSS SDK](/help/en/object-storage-service/latest/sdk-code-samples-overview) to call the [PostObject](/help/en/object-storage-service/latest/postobject) operation to upload the device list file within 1 minute after a response is returned. For more information about sample code, see the "Usage of response parameters" section in this topic.  
  * >  The parameter information that is returned by this operation is valid for 1 minute. You must upload the device list file within 1 minute.  3. After you upload the device list file, call the [CreateOTAStaticUpgradeJob](/help/en/iot-platform/latest/e1qtmo) operation of IoT Platform to create a static update batch within 60 minutes.  
  * If you upload device list files but you do not call the CreateOTAStaticUpgradeJob operation to create a static update batch, the system automatically deletes the uploaded files. The system deletes files on a regular basis.  
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account. 
  * ## Requirements
  * *   A device list file contains the names of devices. Separate multiple device names with line feeds. Each line contains only one device name. A device list file must be in the CSV format. The maximum size of a device list file is 5 MB.
  * *   Each device list file can contain up to 10,000 names for the devices in a product that is related to an update package. If the number of device names in a device list file exceeds the limit, an error occurs when you use the file to create a static update batch.
  *
  * @param request GenerateDeviceNameListURLRequest
  * @return GenerateDeviceNameListURLResponse
 */
async function generateDeviceNameListURL(request: GenerateDeviceNameListURLRequest): GenerateDeviceNameListURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDeviceNameListURLWithOptions(request, runtime);
}

model GenerateFileUploadURLRequest {
  bizCode?: string(name='BizCode', example='DEVICE_JOB_FILE'),
  fileName?: string(name='FileName', example='file1'),
  fileSuffix?: string(name='FileSuffix', example='bin'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
}

model GenerateFileUploadURLResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    host?: string(name='Host', example='https://iotx-bucket-name.oss-***.aliyuncs.com'),
    key?: string(name='Key', example='subpath/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.suffix'),
    objectStorage?: string(name='ObjectStorage', example='OSS'),
    ossAccessKeyId?: string(name='OssAccessKeyId', example='cS8uRRy54Rsz****'),
    policy?: string(name='Policy', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', example='v6lViO4FBvfquajQjg20K5hK****'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GenerateFileUploadURLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateFileUploadURLResponseBody(name='body'),
}

async function generateFileUploadURLWithOptions(request: GenerateFileUploadURLRequest, runtime: Util.RuntimeOptions): GenerateFileUploadURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.fileName)) {
    query['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.fileSuffix)) {
    query['FileSuffix'] = request.fileSuffix;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateFileUploadURL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateFileUploadURL(request: GenerateFileUploadURLRequest): GenerateFileUploadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateFileUploadURLWithOptions(request, runtime);
}

model GenerateOTAUploadURLRequest {
  fileSuffix?: string(name='FileSuffix', description='The file name extension of the update package file. Valid values: bin, dav, apk, tar, gz, tar.gz, zip, and gzip.

Default value: bin.', example='apk'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
}

model GenerateOTAUploadURLResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    firmwareUrl?: string(name='FirmwareUrl', description='The URL of the update package file that is stored in OSS.

After the update package file is uploaded, this parameter is used to call the [CreateOTAFirmware](~~147311~~) operation to create an update package.', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com/ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
    host?: string(name='Host', description='The endpoint of OSS.', example='https://iotx-ota.oss-cn-shanghai.aliyuncs.com'),
    key?: string(name='Key', description='The full path of the file in OSS. The file is uploaded by calling the OSS PostObject operation.', example='ota/65dfcda0473be29836dfde585472****/ck2nfzljo00023g7kysg0****.bin'),
    OSSAccessKeyId?: string(name='OSSAccessKeyId', description='The AccessKey ID of the bucket owner.

This OSS bucket stores the update package file.', example='cS8uRRy54Rsz****'),
    objectStorage?: string(name='ObjectStorage', description='The type of object storage. Default value: OSS.', example='OSS'),
    policy?: string(name='Policy', description='The parameter that is used by OSS to verify form fields for the request.', example='eyJleHBpcmF****'),
    signature?: string(name='Signature', description='The signature that is calculated based on **AccessKeySecret** and **Policy**. When you call an OSS operation, OSS uses the signature information to verify the POST request.', example='v6lViO4FBvfquajQjg20K5hK****'),
    utcCreate?: string(name='UtcCreate', description='The time when the URL of the uploaded update package file was generated. The time is displayed in UTC.', example='2019-11-04T06:21:54.607Z'),
  }(name='Data', description='The information returned if the call is successful. For more information, see the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GenerateOTAUploadURLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GenerateOTAUploadURLResponseBody(name='body'),
}

/**
  * This operation can be used together with other operations to create an update package. Procedure:
  * 1\\. Call this API operation to generate the details of an update package file that you want to upload to OSS.
  * The following section describes the response parameters of this API operation:
  * *   The following request parameters of the OSS [PostObject](~~31988~~) operation that is used to upload the update package file: **Key**, **OSSAccessKeyId**, **Signature**, and **Policy**.
  * *   The following request parameter of the [CreateOTAFirmware](~~147311~~) operation that is used to create the update package: **FirmwareUrl**.
  * 2\\. Use an [OSS SDK](~~52834~~) to call the [PostObject](~~31988~~) operation to upload the update package file. For more information about sample code, see the "Usage of response parameters" section.
  * > The parameter information that is returned by this operation is valid for 1 minute. You must upload the update package file within 1 minute. The maximum size of the uploaded update package file is 1,000 MB.
  * 3\\. After the update package file is uploaded, call the [CreateOTAFirmware](~~147311~~) operation to create an update package within 60 minutes.
  * If update package files are uploaded but you do not call the CreateOTAFirmware operation to create update packages for the files, the uploaded files are automatically deleted by the system on a regular basis.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request GenerateOTAUploadURLRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GenerateOTAUploadURLResponse
 */
async function generateOTAUploadURLWithOptions(request: GenerateOTAUploadURLRequest, runtime: Util.RuntimeOptions): GenerateOTAUploadURLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fileSuffix)) {
    query['FileSuffix'] = request.fileSuffix;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateOTAUploadURL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation can be used together with other operations to create an update package. Procedure:
  * 1\\. Call this API operation to generate the details of an update package file that you want to upload to OSS.
  * The following section describes the response parameters of this API operation:
  * *   The following request parameters of the OSS [PostObject](~~31988~~) operation that is used to upload the update package file: **Key**, **OSSAccessKeyId**, **Signature**, and **Policy**.
  * *   The following request parameter of the [CreateOTAFirmware](~~147311~~) operation that is used to create the update package: **FirmwareUrl**.
  * 2\\. Use an [OSS SDK](~~52834~~) to call the [PostObject](~~31988~~) operation to upload the update package file. For more information about sample code, see the "Usage of response parameters" section.
  * > The parameter information that is returned by this operation is valid for 1 minute. You must upload the update package file within 1 minute. The maximum size of the uploaded update package file is 1,000 MB.
  * 3\\. After the update package file is uploaded, call the [CreateOTAFirmware](~~147311~~) operation to create an update package within 60 minutes.
  * If update package files are uploaded but you do not call the CreateOTAFirmware operation to create update packages for the files, the uploaded files are automatically deleted by the system on a regular basis.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request GenerateOTAUploadURLRequest
  * @return GenerateOTAUploadURLResponse
 */
async function generateOTAUploadURL(request: GenerateOTAUploadURLRequest): GenerateOTAUploadURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateOTAUploadURLWithOptions(request, runtime);
}

model GetDataAPIServiceDetailRequest {
  apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetDataAPIServiceDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiPath?: string(name='ApiPath', example='/device/getDeviceCountByStatus'),
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    createTime?: long(name='CreateTime', example='1557839468865'),
    dateFormat?: string(name='DateFormat', example='JSON'),
    description?: string(name='Description'),
    displayName?: string(name='DisplayName'),
    lastUpdateTime?: long(name='LastUpdateTime', example='1557839468865'),
    requestMethod?: string(name='RequestMethod', example='GET/POST'),
    requestProtocol?: string(name='RequestProtocol', example='HTTPS'),
    sqlTemplateDTO?: {
      originSql?: string(name='OriginSql', example='SELECT COUNT(*) FROM ${system.device} WHERE status = 1'),
      requestParams?: {
        requestParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example', example='0'),
          name?: string(name='Name', example='status'),
          required?: boolean(name='Required', example='true'),
          type?: string(name='Type', example='INTEGER'),
        }
      ](name='RequestParams')
      }(name='RequestParams'),
      responseParams?: {
        responseParams?: [ 
        {
          desc?: string(name='Desc'),
          example?: string(name='Example', example='100'),
          name?: string(name='Name', example='deviceCount'),
          required?: boolean(name='Required', example='true'),
          type?: string(name='Type', example='INTEGER'),
        }
      ](name='ResponseParams')
      }(name='ResponseParams'),
      templateSql?: string(name='TemplateSql', example='SELECT COUNT(*) as deviceCount FROM ${system.device} WHERE status = ${status}'),
    }(name='SqlTemplateDTO'),
    status?: int32(name='Status', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model GetDataAPIServiceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDataAPIServiceDetailResponseBody(name='body'),
}

async function getDataAPIServiceDetailWithOptions(request: GetDataAPIServiceDetailRequest, runtime: Util.RuntimeOptions): GetDataAPIServiceDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiSrn)) {
    body['ApiSrn'] = request.apiSrn;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDataAPIServiceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDataAPIServiceDetail(request: GetDataAPIServiceDetailRequest): GetDataAPIServiceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDataAPIServiceDetailWithOptions(request, runtime);
}

model GetDestinationRequest {
  destinationId?: long(name='DestinationId', example='1004'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model GetDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destination?: {
    configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
    destinationId?: string(name='DestinationId', example='1003'),
    isFailover?: boolean(name='IsFailover', example='false'),
    name?: string(name='Name', example='DataPurpose'),
    status?: string(name='Status', example='NORMAL'),
    type?: string(name='Type', example='REPUBLISH'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='Destination'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDestinationResponseBody(name='body'),
}

async function getDestinationWithOptions(request: GetDestinationRequest, runtime: Util.RuntimeOptions): GetDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDestination(request: GetDestinationRequest): GetDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDestinationWithOptions(request, runtime);
}

model GetDeviceShadowRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.****

>*   If the instance has an ID, you must specify the **IotInstanceId** parameter. If you do not specify this parameter, the call fails.
>*   If the instance does not have an **ID** or the **Overview** page is not displayed, you do not need to specify this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1T27vz****'),
}

model GetDeviceShadowResponseBody = {
  code?: string(name='Code', description='The error code that is returned if the call fails. For more information about error codes, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A56E345A-0978-4993-ACBA-3EF444ED187F'),
  shadowMessage?: string(name='ShadowMessage', description='The shadow information that is returned if the call is successful.

>  The structure of the shadow information varies based on the status of the device. For more information, see the [Overview](~~53930~~) topic of Device shadows.', example='{"method":"update","state":{"desired":{"color":"green"}},"version":1}'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceShadowResponseBody(name='body'),
}

/**
  * ## QPS limits
  * You can call this API operation up to 500 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetDeviceShadowRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDeviceShadowResponse
 */
async function getDeviceShadowWithOptions(request: GetDeviceShadowRequest, runtime: Util.RuntimeOptions): GetDeviceShadowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceShadow',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * You can call this API operation up to 500 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetDeviceShadowRequest
  * @return GetDeviceShadowResponse
 */
async function getDeviceShadow(request: GetDeviceShadowRequest): GetDeviceShadowResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceShadowWithOptions(request, runtime);
}

model GetDeviceStatusRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model GetDeviceStatusResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    status?: string(name='Status', description='The status of the device. Valid values:

*   **ONLINE**: The device is online.
*   **OFFLINE**: The device is offline.
*   **UNACTIVE**: The device is not activated.
*   **DISABLE**: The device is disabled.', example='ONLINE'),
    timestamp?: long(name='Timestamp', description='The time when the device status changed.', example='1557062301656'),
  }(name='Data', description='The device status returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceStatusResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetDeviceStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDeviceStatusResponse
 */
async function getDeviceStatusWithOptions(request: GetDeviceStatusRequest, runtime: Util.RuntimeOptions): GetDeviceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetDeviceStatusRequest
  * @return GetDeviceStatusResponse
 */
async function getDeviceStatus(request: GetDeviceStatusRequest): GetDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceStatusWithOptions(request, runtime);
}

model GetDeviceTunnelShareStatusRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model GetDeviceTunnelShareStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtOpened?: long(name='GmtOpened', example='1617941371000'),
    isOpen?: boolean(name='IsOpen', example='true'),
    password?: string(name='Password', example='848bbfa0e9a31e579502869920b4d4c********'),
    shareId?: string(name='ShareId', example='18f72f95cad34ca3aeabeeefcb******'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ACC1D51C-1A58-440E-92A7-71AB61C6595A'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceTunnelShareStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceTunnelShareStatusResponseBody(name='body'),
}

async function getDeviceTunnelShareStatusWithOptions(request: GetDeviceTunnelShareStatusRequest, runtime: Util.RuntimeOptions): GetDeviceTunnelShareStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceTunnelShareStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceTunnelShareStatus(request: GetDeviceTunnelShareStatusRequest): GetDeviceTunnelShareStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceTunnelShareStatusWithOptions(request, runtime);
}

model GetDeviceTunnelStatusRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1kqtIX****'),
}

model GetDeviceTunnelStatusResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='online'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='7CCFF08F-34D1-4FBD-ACA9-22D9364EA5A4'),
  success?: boolean(name='Success', example='true'),
}

model GetDeviceTunnelStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceTunnelStatusResponseBody(name='body'),
}

async function getDeviceTunnelStatusWithOptions(request: GetDeviceTunnelStatusRequest, runtime: Util.RuntimeOptions): GetDeviceTunnelStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceTunnelStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceTunnelStatus(request: GetDeviceTunnelStatusRequest): GetDeviceTunnelStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceTunnelStatusWithOptions(request, runtime);
}

model GetDownloadFileRequest {
  context?: map[string]any(name='Context', example='{"xxx";xxx}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
}

model GetDownloadFileShrinkRequest {
  contextShrink?: string(name='Context', example='{"xxx";xxx}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
}

model GetDownloadFileResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    asyncExecute?: boolean(name='AsyncExecute', example='true'),
    beginTime?: long(name='BeginTime', example='1658406464534'),
    csvFileName?: string(name='CsvFileName', example='test_download_flie'),
    csvUrl?: string(name='CsvUrl', example='https://xxxxx-data-download-sh.oss-cn-shanghai.aliyuncs.com/data/download/6B761BxxxxxxxxAAA0BF03D32C80E/62da39b9xxxxxx5a7b953376/download_file_name.csv?Expires=1658469132&amp;OSSAccessKeyId=xxxxxxxxx&amp;Signature=rRL%xxxxxxx%3D'),
    datasetId?: string(name='DatasetId', example='xxxxxx'),
    endTime?: long(name='EndTime', example='1658406465000'),
    header?: [ 
      {
        alias?: string(name='Alias', example='user_name_alias'),
        dimDateClass?: string(name='DimDateClass', example='DAY'),
        fieldName?: string(name='FieldName', example='user_name'),
        fieldType?: string(name='FieldType', example='INTEGER'),
        geoClass?: string(name='GeoClass', example='{xxx:xxxx}'),
        timeClass?: string(name='TimeClass', example='HOUR/DAY/MONTH'),
        typeClass?: string(name='TypeClass', example='date'),
      }
    ](name='Header'),
    longJobId?: string(name='LongJobId', example='62d949808bc742187xxxxxx'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    previewSize?: int32(name='PreviewSize', example='100'),
    querySetting?: {
      astExpr?: [ 
        {
          expr?: string(name='Expr', example='{"header":{"fieldName":"xxx"},"operator":"GreaterThanOrEqual","value":12345}'),
          exprType?: string(name='ExprType', example='binaryOp'),
        }
      ](name='AstExpr'),
      selectedHeaders?: [ 
        {
          alias?: string(name='Alias', example='user_name_alias'),
          dimDateClass?: string(name='DimDateClass', example='DAY'),
          fieldName?: string(name='FieldName', example='user_name'),
          fieldType?: string(name='FieldType', example='INTEGER'),
          geoClass?: string(name='GeoClass', example='{xxx:xxx}'),
          timeClass?: string(name='TimeClass', example='HOUR/DAY/MONTH'),
        }
      ](name='SelectedHeaders'),
    }(name='QuerySetting'),
    result?: [  map[string]any ](name='Result'),
    resultDataInString?: string(name='ResultDataInString', example='{"a":123}'),
    status?: int32(name='Status', example='1'),
    totalCount?: long(name='TotalCount', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='no authorization.'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09934****'),
  success?: boolean(name='Success', example='true'),
}

model GetDownloadFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDownloadFileResponseBody(name='body'),
}

async function getDownloadFileWithOptions(tmpReq: GetDownloadFileRequest, runtime: Util.RuntimeOptions): GetDownloadFileResponse {
  Util.validateModel(tmpReq);
  var request = new GetDownloadFileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.context)) {
    request.contextShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.context, 'Context', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.longJobId)) {
    query['LongJobId'] = request.longJobId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.contextShrink)) {
    body['Context'] = request.contextShrink;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetDownloadFile',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDownloadFile(request: GetDownloadFileRequest): GetDownloadFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDownloadFileWithOptions(request, runtime);
}

model GetEdgeDriverVersionRequest {
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver whose version information you want to query and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', description='The version number of the driver.', example='1.2.0'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model GetEdgeDriverVersionResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    argument?: string(name='Argument', description='The Java Virtual Machine (JVM) startup parameter.', example='-XX:+PrintGCDetails'),
    configCheckRule?: string(name='ConfigCheckRule', description='The rule for verifying configurations. The value is a JSON string in the following format:

`{"deviceConfig":{"required":false},"driverConfig":{"required":false}`

The JSON string contains the following parameters:

*   driverConfig: the rule for verifying the configuration of the driver when the driver is to be deployed in an edge instance.
*   deviceConfig: the rule for verifying the configurations of devices that use the driver when the driver is to be deployed in an edge instance.', example='{\\"deviceConfig\\":{\\"required\\":false},\\"driverConfig\\":{\\"required\\":false}}'),
    containerConfig?: string(name='ContainerConfig', description='The configuration of the container where the driver runs. The value is a JSON string. For more information about parameters in the JSON string, see the following parameter description of ContainerConfig.', example='{\\"devMappings\\":[],\\"hostNetworkMode\\":0,\\"portMappings\\":[],\\"privileged\\":1,\\"volumeMappings\\":[]}'),
    description?: string(name='Description', description='The description of the driver.'),
    driverConfig?: string(name='DriverConfig', description='The configuration of the driver. The value is a JSON string in the following format:

`{"format":"JSON","content":"{}"}`

The JSON string contains the following parameters:

*   format: the format of the driver configuration. Valid values: KV (key-value pair), JSON (JSON string), and FILE (configuration file).
*   content: the content of the driver configuration. If the format parameter is set to KV or JSON, the value of this parameter is the configuration content. If the format parameter is set to FILE, the value of this parameter is the URL of the configuration file stored in Object Storage Service (OSS).', example='[{\\"content\\":\\"{\\\\\\"defaultConfig\\\\\\":\\\\\\"this is default driver config demo\\\\\\"}\\",\\"format\\":\\"JSON\\"}]'),
    driverId?: string(name='DriverId', description='The ID of the driver.', example='fec565038d7544978d9aed5c1a******'),
    driverVersion?: string(name='DriverVersion', description='The version number of the driver.', example='1.2.0'),
    edgeVersion?: string(name='EdgeVersion', description='The earliest version of Link IoT Edge that is supported by the driver.', example='2.0.0'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The UNIX timestamp when the driver was created.', example='1581912859713'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The last UNIX timestamp when the driver was updated.', example='1581912859713'),
    sourceConfig?: string(name='SourceConfig', example='{\\"ossAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30******/ck3n3koe200003h6zfg******.zip\\",\\"temporaryOssAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30******/ck3n3koe200003h6zf******.zip?Expires\\u003d1575******\\u0026OSSAccessKeyId\\u003daS4MT0IYrP******\\u0026Signature\\u003dm6cpmcaB8rm3YfbkhTYgb0******\\"}'),
    versionState?: string(name='VersionState', description='The status of the driver version. Valid values:

*   0: The driver version was not published.
*   1: The driver version was published.', example='0'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6ECE664B-E670-47BA-A6AD-62B9F35E3A7B'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model GetEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeDriverVersionResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetEdgeDriverVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetEdgeDriverVersionResponse
 */
async function getEdgeDriverVersionWithOptions(request: GetEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): GetEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetEdgeDriverVersionRequest
  * @return GetEdgeDriverVersionResponse
 */
async function getEdgeDriverVersion(request: GetEdgeDriverVersionRequest): GetEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeDriverVersionWithOptions(request, runtime);
}

model GetEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance whose detailed information you want to query and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model GetEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    bizEnable?: boolean(name='BizEnable', description='Indicates whether the edge instance was enabled. Valid values:

*   true: enabled
*   false: disabled', example='true'),
    gmtCreate?: string(name='GmtCreate', description='The time when the edge instance was created.', example='2019-06-26 12:33:25'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The UNIX timestamp when the edge instance was created.', example='1581912859713'),
    gmtModified?: string(name='GmtModified', description='The last time when the edge instance was updated.', example='2019-06-26 12:33:25'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The last UNIX timestamp when the edge instance was updated.', example='1581912859713'),
    instanceId?: string(name='InstanceId', description='The ID of the edge instance.', example='F3APY0tPLhmgGtx0****'),
    latestDeploymentStatus?: int32(name='LatestDeploymentStatus', description='The status of the latest deployment task. Valid values:

*   0: The task was not started.
*   1: The task was being processed.
*   2: The task was successful.
*   3: The task failed.', example='2'),
    latestDeploymentType?: string(name='LatestDeploymentType', description='The type of the latest deployment task. Valid values:

*   deploy: deploys the edge instance.
*   reset: resets the edge instance.', example='deploy'),
    name?: string(name='Name', description='The name of the edge instance.'),
    roleArn?: string(name='RoleArn', description='The Alibaba Cloud Resource Name (ARN) of the RAM role.', example='acs:ram::1473922805******:role/aliyuniotaccessingfcrole'),
    roleAttachTime?: string(name='RoleAttachTime', description='The time when the RAM role was attached to IoT Platform.', example='2020-02-19 11:25:48'),
    roleAttachTimestamp?: long(name='RoleAttachTimestamp', description='The UNIX timestamp when the RAM role was attached to IoT Platform.', example='1581912859713'),
    roleName?: string(name='RoleName', description='The name of the RAM role.', example='AliyunIOTAccessingFCRole'),
    spec?: int32(name='Spec', description='The specifications of the edge instance. Valid values:

*   10: Lite Edition
*   20: Standard Edition
*   30: Pro Edition', example='30'),
    tags?: string(name='Tags', description='The tags of the edge instance. Each tag is a `key-value` pair. Multiple tags are separated with commas(,). Example: `k1:v1,k2:v2`.', example='k1:v1,k2:v2'),
    type?: string(name='Type', description='Indicates whether you own the edge instance or you are authorized to use the edge instance. Valid values:

*   0: You own the edge instance.
*   1: You are authorized to use the edge instance.', example='0'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16645053-546B-4D7C-832E-E519B0E23CF1'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model GetEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeInstanceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetEdgeInstanceResponse
 */
async function getEdgeInstanceWithOptions(request: GetEdgeInstanceRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetEdgeInstanceRequest
  * @return GetEdgeInstanceResponse
 */
async function getEdgeInstance(request: GetEdgeInstanceRequest): GetEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceWithOptions(request, runtime);
}

model GetEdgeInstanceDeploymentRequest {
  deploymentId?: string(name='DeploymentId', description='The ID of the deployment task. You can call the [QueryEdgeInstanceHistoricDeployment](~~135275~~) operation to query the ID of a deployment task.', example='9261e308a9504fde9b4cf8462b0b****'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance for which you want to query detailed information about a deployment task and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model GetEdgeInstanceDeploymentResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    deploymentId?: string(name='DeploymentId', description='The ID of the deployment task.', example='9261e308a9504fde9b4cf8462b0b****'),
    description?: string(name='Description', description='The description of the deployment task.', example='deploy_1561543948874'),
    gmtCompleted?: string(name='GmtCompleted', description='The time when the deployment task was complete.', example='2019-06-26 18:12:35'),
    gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', description='The UNIX timestamp when the deployment task was complete.', example='1581912859713'),
    gmtCreate?: string(name='GmtCreate', description='The time when the deployment task was created.', example='2019-06-26 18:12:29'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The UNIX timestamp when the deployment task was created.', example='1581912859713'),
    gmtModified?: string(name='GmtModified', description='The last time when the deployment task was modified.', example='2019-06-26 18:12:35'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The last UNIX timestamp when the deployment task was modified.', example='1581912859713'),
    status?: int32(name='Status', description='The status of the deployment task.

*   0: The task was not started.
*   1: The task was being processed.
*   2: The task was successful.
*   3: The task failed.', example='2'),
    taskList?: [ 
      {
        gatewayId?: string(name='GatewayId', description='The ID of the gateway.', example='jQWf3MVgQjMzcwsY****000101'),
        gmtCompleted?: string(name='GmtCompleted', description='The time when the deployment subtask was complete.', example='2019-06-26 18:12:35'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', description='The UNIX timestamp when the deployment subtask was complete.', example='1581912859713'),
        gmtCreate?: string(name='GmtCreate', description='The time when the deployment subtask was created.', example='2019-06-26 18:12:29'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The UNIX timestamp when the deployment subtask was created.', example='1581912859713'),
        gmtModified?: string(name='GmtModified', description='The last time when the deployment subtask was modified.', example='2019-06-26 18:12:35'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The last UNIX timestamp when the deployment subtask was modified.', example='1581912859713'),
        resourceSnapshotList?: [ 
          {
            gmtCompleted?: string(name='GmtCompleted', description='The time when the deployment task snapshot was complete.', example='2019-06-26 18:12:34'),
            gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', description='The UNIX timestamp when the deployment task snapshot was complete.', example='1581912859713'),
            gmtCreate?: string(name='GmtCreate', description='The time when the deployment task snapshot was created.', example='2019-06-26 18:12:29'),
            gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The UNIX timestamp when the deployment task snapshot was created.', example='1581912859713'),
            gmtModified?: string(name='GmtModified', description='The last time when the deployment task snapshot was modified.', example='2019-06-26 18:12:34'),
            gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The last UNIX timestamp when the deployment task snapshot was modified.', example='1581912859713'),
            log?: string(name='Log', description='The logs of resource deployment.', example='[{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":0,\\"level\\":\\"INFO\\",\\"message\\":\\"init success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543949858},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":8,\\"level\\":\\"INFO\\",\\"message\\":\\"assembly success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543951419},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":16,\\"level\\":\\"INFO\\",\\"message\\":\\"package success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543952591},{\\"resourceId\\":\\"device_config\\",\\"code\\":\\"0\\",\\"stage\\":32,\\"level\\":\\"INFO\\",\\"message\\":\\"download success\\",\\"resourceType\\":\\"DEVICE_CONFIG\\",\\"timestamp\\":1561543954149}]'),
            operateType?: int32(name='OperateType', description='The type of the operation.

*   0: deploys resources.
*   1: deletes resources.', example='0'),
            resourceId?: string(name='ResourceId', description='The ID of the resource.', example='device_config'),
            resourceName?: string(name='ResourceName', description='The name of the resource.', example='device_config'),
            resourceType?: string(name='ResourceType', description='The type of the resource.', example='device_config'),
            snapshotId?: string(name='SnapshotId', description='The ID of the deployment task snapshot.', example='ab576e84a43043d7840cbcebf4a5****'),
            stage?: int32(name='Stage', description='The stage of the snapshot task.

*   0: The snapshot task was in the initial state.
*   8: The snapshot task was being assembled.
*   16: The snapshot task was being packaged.
*   24: The snapshot task was being dispatched.
*   32: The snapshot task was complete.', example='32'),
            status?: int32(name='Status', description='The status of the snapshot task.

*   0: The snapshot task was not started.
*   1: The snapshot task was being processed.
*   2: The snapshot task was successful.
*   3: The snapshot task failed.', example='2'),
          }
        ](name='ResourceSnapshotList', description='The list of deployment task snapshots.'),
        stage?: int32(name='Stage', description='The stage of the deployment subtask.

*   0: The subtask was not started.
*   8: The subtask was being assembled.
*   16: The subtask was being packaged.
*   24: The subtask was being dispatched.
*   32: The subtask was complete.', example='32'),
        status?: int32(name='Status', description='The status of the deployment subtask.

*   0: The subtask was in the initial state.
*   1: The subtask was being processed.
*   2: The subtask was successful.
*   3: The subtask failed.', example='2'),
        taskId?: string(name='TaskId', description='The ID of the deployment subtask.', example='49ea651529014bf8b5645d5f9062****'),
      }
    ](name='TaskList', description='The list of deployment subtasks.'),
    type?: string(name='Type', description='The type of the deployment task.

*   deploy: deploys the edge instance.
*   reset: resets the edge instance.', example='deploy'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6B72291A-9492-445E-81D9-335D2D3E44C0'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model GetEdgeInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeInstanceDeploymentResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetEdgeInstanceDeploymentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetEdgeInstanceDeploymentResponse
 */
async function getEdgeInstanceDeploymentWithOptions(request: GetEdgeInstanceDeploymentRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deploymentId)) {
    query['DeploymentId'] = request.deploymentId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeInstanceDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetEdgeInstanceDeploymentRequest
  * @return GetEdgeInstanceDeploymentResponse
 */
async function getEdgeInstanceDeployment(request: GetEdgeInstanceDeploymentRequest): GetEdgeInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceDeploymentWithOptions(request, runtime);
}

model GetEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='8jKxIuMVT9rX********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  routeId?: long(name='RouteId', example='123456'),
}

model GetEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtCreate?: string(name='GmtCreate', example='2020-05-25 19:54:59'),
    gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1590407699000'),
    gmtModified?: string(name='GmtModified', example='2020-05-25 19:54:59'),
    gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1590407699000'),
    name?: string(name='Name', example='sample'),
    routeContext?: {
      qos?: string(name='Qos', example='1'),
      sourceApplicationName?: string(name='SourceApplicationName', example='le_object_detector'),
      sourceFcFunctionName?: string(name='SourceFcFunctionName', example='object_detector_app'),
      sourceFcServiceName?: string(name='SourceFcServiceName', example='EdgeFC'),
      targetApplicationName?: string(name='TargetApplicationName', example='le_object_detector'),
      targetFcFunctionName?: string(name='TargetFcFunctionName', example='lightSensorDataFilter'),
      targetFcServiceName?: string(name='TargetFcServiceName', example='EdgeFC'),
    }(name='RouteContext'),
    sourceData?: string(name='SourceData', example='#'),
    sourceType?: string(name='SourceType', example='device'),
    targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********'),
    targetType?: string(name='TargetType', example='IotHub'),
    topicFilter?: string(name='TopicFilter', example='all'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='8A248DEC-887C-4A37-8DE5-E128FFA3698D'),
  success?: boolean(name='Success', example='true'),
}

model GetEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function getEdgeInstanceMessageRoutingWithOptions(request: GetEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): GetEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getEdgeInstanceMessageRouting(request: GetEdgeInstanceMessageRoutingRequest): GetEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model GetGatewayBySubDeviceRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the sub-device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the sub-device. The ID is a unique identifier that is issued by IoT Platform to the sub-device.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model GetGatewayBySubDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', description='The DeviceName of the gateway.', example='gateway'),
    deviceSecret?: string(name='DeviceSecret', description='The DeviceSecret of the gateway.', example='dCYdTU3gw5Z77bsHjPk6lPHPVnBT****'),
    firmwareVersion?: string(name='FirmwareVersion', description='The firmware version number of the device.', example='V1.0.1'),
    gmtActive?: string(name='GmtActive', description='The activation time of the gateway. The time is displayed in GMT. The time is the local time of the region where the gateway resides.', example='2019-12-18 23:25:30'),
    gmtCreate?: string(name='GmtCreate', description='The creation time of the gateway. The time is displayed in GMT. The time is the local time of the region where the gateway resides.', example='2019-12-18 16:58:33'),
    gmtOnline?: string(name='GmtOnline', description='The last online time of the gateway. The time is displayed in GMT. The time is the local time of the region where the gateway resides.', example='2020-01-20 17:41:04'),
    ipAddress?: string(name='IpAddress', description='The IP address of the gateway.', example='106.**.1**.**'),
    nodeType?: string(name='NodeType', description='The node type. The value 1 indicates that the device is a gateway.', example='1'),
    productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the gateway belongs.', example='a1BwAGV****'),
    productName?: string(name='ProductName', description='The name of the product to which the gateway belongs.', example='LinkIoT'),
    status?: string(name='Status', description='The status of the gateway device. Valid values:

*   **online**: The device is online.
*   **offline**: The device is offline.
*   **unactive**: The device is not activated.
*   **disable**: The device is disabled.', example='online'),
    utcActive?: string(name='UtcActive', description='The activation time of the gateway. The time is displayed in UTC. The actual time of the region where the gateway resides is calculated based on the time zone of the region.', example='2019-12-18T15:25:30.176Z'),
    utcCreate?: string(name='UtcCreate', description='The creation time of the gateway. The time is displayed in UTC. The actual time of the region where the gateway resides is calculated based on the time zone of the region.', example='2019-12-18T08:58:33.000Z'),
    utcOnline?: string(name='UtcOnline', description='The last online time of the gateway. The time is displayed in UTC. The actual time of the region where the gateway resides is calculated based on the time zone of the region.', example='2020-01-20T09:41:04.879Z'),
    iotId?: string(name='iotId', description='The ID of the gateway device. The ID is the unique identifier that is issued by IoT Platform to the device.', example='WuyjPSDQE1L22z1d****000100'),
    region?: string(name='region', description='The region where the gateway resides. This region corresponds to the region that is displayed in the IoT Platform console.', example='cn-shanghai'),
  }(name='Data', description='The gateway details returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetGatewayBySubDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGatewayBySubDeviceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetGatewayBySubDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetGatewayBySubDeviceResponse
 */
async function getGatewayBySubDeviceWithOptions(request: GetGatewayBySubDeviceRequest, runtime: Util.RuntimeOptions): GetGatewayBySubDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayBySubDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetGatewayBySubDeviceRequest
  * @return GetGatewayBySubDeviceResponse
 */
async function getGatewayBySubDevice(request: GetGatewayBySubDeviceRequest): GetGatewayBySubDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayBySubDeviceWithOptions(request, runtime);
}

model GetLoraNodesTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  taskId?: string(name='TaskId', example='623***'),
}

model GetLoraNodesTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  successCount?: long(name='SuccessCount', example='100'),
  successDevEuis?: {
    successDevEui?: [ string ](name='SuccessDevEui')
  }(name='SuccessDevEuis'),
  taskId?: string(name='TaskId', example='625***'),
  taskState?: string(name='TaskState', example='RUNNING'),
  totalCount?: long(name='TotalCount', example='200'),
}

model GetLoraNodesTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetLoraNodesTaskResponseBody(name='body'),
}

async function getLoraNodesTaskWithOptions(request: GetLoraNodesTaskRequest, runtime: Util.RuntimeOptions): GetLoraNodesTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetLoraNodesTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLoraNodesTask(request: GetLoraNodesTaskRequest): GetLoraNodesTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLoraNodesTaskWithOptions(request, runtime);
}

model GetParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model GetParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dataSourceId?: long(name='DataSourceId', example='1003'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataParser'),
    parserId?: long(name='ParserId', example='1001'),
    script?: string(name='Script', example='var data = payload("json"); var h = data.items.Humidity.value; var t = data.items.Temperature.value; writeTsdb(1000,timestamp(),"temperature", t , {"deviceName":deviceName()}); writeTsdb(1000,timestamp(),"humidity", h , {"deviceName":deviceName()});'),
    scriptDraft?: string(name='ScriptDraft', example='var data = payload("json"); var h = data.items.Humidity.value; var t = data.items.Temperature.value; writeTsdb(1000,timestamp(),"temperature", t , {"deviceName":deviceName()}); writeTsdb(1000,timestamp(),"humidity", h , {"deviceName":deviceName()});'),
    status?: string(name='Status', example='STOP'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    utcModified?: string(name='UtcModified', example='2022-04-27T12:45:43.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetParserResponseBody(name='body'),
}

async function getParserWithOptions(request: GetParserRequest, runtime: Util.RuntimeOptions): GetParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getParser(request: GetParserRequest): GetParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getParserWithOptions(request, runtime);
}

model GetParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model GetParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSource?: {
    createUserId?: long(name='CreateUserId', example='11111111000000111'),
    dataSourceId?: long(name='DataSourceId', example='1001'),
    description?: string(name='Description'),
    name?: string(name='Name', example='DataSource'),
    utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
  }(name='DataSource'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model GetParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetParserDataSourceResponseBody(name='body'),
}

async function getParserDataSourceWithOptions(request: GetParserDataSourceRequest, runtime: Util.RuntimeOptions): GetParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getParserDataSource(request: GetParserDataSourceRequest): GetParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getParserDataSourceWithOptions(request, runtime);
}

model GetRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  ruleId?: long(name='RuleId', description='The ID of the rule that you want to query. You can log on to the IoT Platform console and choose **Rules** > **Data Forwarding** to view the rule ID. You can also call the [ListRule](~~69486~~) operation and view the rule ID in the response.', example='100000'),
}

model GetRuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='58D4CEC0-3E95-4DBE-AFC1-809D1400E52F'),
  ruleInfo?: {
    createUserId?: long(name='CreateUserId', description='The ID of the user who created the rule.', example='100000000000000'),
    created?: string(name='Created', description='The time when the rule was created. The time is displayed in UTC-6.', example='Thu Feb 28 14:14:33 CST 2019'),
    dataType?: string(name='DataType', description='The data type of the rule. Valid values: **JSON** and **BINARY** .', example='JSON'),
    id?: long(name='Id', description='The ID of the rule.', example='100000'),
    modified?: string(name='Modified', description='The time when the rule was last modified. The time is displayed in UTC-6.', example='Thu Feb 28 14:20:58 CST 2019'),
    name?: string(name='Name', description='The name of the rule.', example='iotrules'),
    productKey?: string(name='ProductKey', description='The ProductKey of the product to which the rule applies.', example='a1KiV******'),
    ruleDesc?: string(name='RuleDesc', description='The description of this rule.', example='rule1Desc'),
    select?: string(name='Select', description='The values of **Select** in the SQL statements of the rule.', example='deviceName() as deviceName'),
    shortTopic?: string(name='ShortTopic', description='The topic to which the rule applies. The topic does not include the ProductKey level. Format: `${deviceName}/topicShortName`. ${deviceName} indicates the name of the device, and topicShortName indicates the custom name of the topic.

>  For information about how to use the `+` or `#` wildcard in a topic, see [Topic wildcards](~~73731~~).', example='+/user/pm25data'),
    status?: string(name='Status', description='The status of the rule. Valid values:

*   **RUNNING**: Running
*   **STOP**: Stopped', example='STOP'),
    topic?: string(name='Topic', description='The complete topic to which the rule applies. Format: `${productKey}/${deviceName}/topicShortName`.

>  For information about how to use the `+` or `#` wildcard in a topic, see [Topic wildcards](~~73731~~).', example='/a1QsMlL44pp/+/user/pm25data'),
    topicType?: int32(name='TopicType', description='The type of the topic. This parameter is returned if you set the SQL statement for the rule. Valid values:

*   **0**: a basic communication topic or TSL communication topic.
*   **1**: a custom topic.
*   **2**: a device status topic.

If no SQL statement is set for the rule, the value **-1** is returned.', example='1'),
    utcCreated?: string(name='UtcCreated', description='The time when the rule was created. The time is displayed in UTC.', example='2019-02-28T06:14:33.000Z'),
    utcModified?: string(name='UtcModified', description='The time when the rule was last modified. The time is displayed in UTC.', example='2019-02-28T06:20:58.000Z'),
    where?: string(name='Where', description='The **Where** query condition in the SQL statements of the rule.', example='Temperature>35'),
  }(name='RuleInfo', description='The rule information returned if the call is successful. For more information, see RuleInfo.'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRuleResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetRuleResponse
 */
async function getRuleWithOptions(request: GetRuleRequest, runtime: Util.RuntimeOptions): GetRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetRuleRequest
  * @return GetRuleResponse
 */
async function getRule(request: GetRuleRequest): GetRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleWithOptions(request, runtime);
}

model GetRuleActionRequest {
  actionId?: long(name='ActionId', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='100001'),
  iotInstanceId?: string(name='IotInstanceId', description='The rule action ID that you want to query.

You can query the rule action ID by using the following methods:

*   Call the [CreateRuleAction](~~69586~~) operation and view the **ActionId** parameter in the response.
*   Call the [ListRuleActions](~~69517~~) operation and view the **Id** parameter in the response.', example='iot_instc_pu****_c*-v64********'),
}

model GetRuleActionResponseBody = {
  code?: string(name='Code', description='The error message returned if the call fails.', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='F2D0755D-F350-40FE-9A6D-491859DB5E5F'),
  ruleActionInfo?: {
    configuration?: string(name='Configuration', description='The ID of rule action.', example='{\\"topic\\":\\"/sys/a1zSA28****/device/thing/service/property/set\\",\\"topicType\\":0,\\"uid\\":\\"1231579*******\\"}'),
    errorActionFlag?: boolean(name='ErrorActionFlag', description='The type of the rule action. Valid values:

*   **REPUBLISH**: forwards data to another topic.
*   **OTS**: stores data to Tablestore.
*   **MNS**: sends data to Message Service (MNS).
*   **FC**: sends data to Function Compute.
*   **RDS**: Save to cloud databases.
*   **AMQP**: forwards data to an AMQP consumer group.', example='false'),
    id?: long(name='Id', description='The ID of the rule based on which the rule action is performed.', example='100001'),
    ruleId?: long(name='RuleId', example='152323'),
    type?: string(name='Type', description='The configurations of the rule action.', example='REPUBLISH'),
  }(name='RuleActionInfo', description='Indicates whether the rule action forwarded error operation data that failed to be forwarded to the destination cloud service. A data forwarding failure indicates that forwarding retries also failed.

*   **true**: forwards error operation data.
*   **false**: forwards normal data instead of error operation data.'),
  success?: boolean(name='Success', description='The rule action information returned if the call was successful. For more information, see the following parameters.', example='true'),
}

model GetRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRuleActionResponseBody(name='body'),
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request GetRuleActionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetRuleActionResponse
 */
async function getRuleActionWithOptions(request: GetRuleActionRequest, runtime: Util.RuntimeOptions): GetRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionId)) {
    query['ActionId'] = request.actionId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request GetRuleActionRequest
  * @return GetRuleActionResponse
 */
async function getRuleAction(request: GetRuleActionRequest): GetRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRuleActionWithOptions(request, runtime);
}

model GetSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model GetSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    gmtCreate?: long(name='GmtCreate', example='1584085921000'),
    gmtModified?: long(name='GmtModified', example='1579493552000'),
    ruleContent?: string(name='RuleContent', example='{\\"action\\":[{\\"params\\":{\\"productKey\\":\\"a19luLB****\\",\\"propertyItems\\":{\\"LightAdjustLevel\\":10},\\"deviceName\\":\\"test01\\"},\\"uri\\":\\"action/device/setProperty\\"}],\\"trigger\\":{\\"params\\":{\\"cron\\":\\"22 13 20 1 *\\",\\"cronType\\":\\"linux\\"},\\"uri\\":\\"trigger/timer\\"},\\"type\\":\\"IFTTT\\",\\"sid\\":\\"9df954b33c854d469a507ef8d6******\\"}'),
    ruleDescription?: string(name='RuleDescription'),
    ruleName?: string(name='RuleName', example='test'),
    ruleStatus?: int32(name='RuleStatus', example='0'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='1B6D50A7-F160-4D47-863C-EDEE25E26495'),
  success?: boolean(name='Success', example='true'),
}

model GetSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSceneRuleResponseBody(name='body'),
}

async function getSceneRuleWithOptions(request: GetSceneRuleRequest, runtime: Util.RuntimeOptions): GetSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSceneRule(request: GetSceneRuleRequest): GetSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSceneRuleWithOptions(request, runtime);
}

model GetShareSpeechModelAudioRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  shareTaskId?: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********'),
  speechModelCodeList?: [ string ](name='SpeechModelCodeList', example='WSD****'),
}

model GetShareSpeechModelAudioResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ string ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetShareSpeechModelAudioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShareSpeechModelAudioResponseBody(name='body'),
}

async function getShareSpeechModelAudioWithOptions(request: GetShareSpeechModelAudioRequest, runtime: Util.RuntimeOptions): GetShareSpeechModelAudioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.shareTaskId)) {
    body['ShareTaskId'] = request.shareTaskId;
  }
  if (!Util.isUnset(request.speechModelCodeList)) {
    body['SpeechModelCodeList'] = request.speechModelCodeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShareSpeechModelAudio',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getShareSpeechModelAudio(request: GetShareSpeechModelAudioRequest): GetShareSpeechModelAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getShareSpeechModelAudioWithOptions(request, runtime);
}

model GetShareTaskByDeviceOpenRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='y4u2weAIrpp****WHMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-v64********'),
  productKey?: string(name='ProductKey', example='a2Yw*****'),
}

model GetShareTaskByDeviceOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: string(name='Data', example='Md3ZiTL888K9llXDy7890***********'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetShareTaskByDeviceOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShareTaskByDeviceOpenResponseBody(name='body'),
}

async function getShareTaskByDeviceOpenWithOptions(request: GetShareTaskByDeviceOpenRequest, runtime: Util.RuntimeOptions): GetShareTaskByDeviceOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShareTaskByDeviceOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getShareTaskByDeviceOpen(request: GetShareTaskByDeviceOpenRequest): GetShareTaskByDeviceOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getShareTaskByDeviceOpenWithOptions(request, runtime);
}

model GetSoundCodeAudioRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  soundCodeList?: [ string ](name='SoundCodeList', example='Md3ZiTL888K9llXDy7890***********'),
}

model GetSoundCodeAudioResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    items?: [ string ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSoundCodeAudioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSoundCodeAudioResponseBody(name='body'),
}

async function getSoundCodeAudioWithOptions(request: GetSoundCodeAudioRequest, runtime: Util.RuntimeOptions): GetSoundCodeAudioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.soundCodeList)) {
    body['SoundCodeList'] = request.soundCodeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSoundCodeAudio',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSoundCodeAudio(request: GetSoundCodeAudioRequest): GetSoundCodeAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSoundCodeAudioWithOptions(request, runtime);
}

model GetSoundCodeScheduleRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model GetSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    description?: string(name='Description', example='test'),
    endDate?: string(name='EndDate', example='2022-03-28'),
    endTime?: string(name='EndTime', example='23:59'),
    gmtCreate?: long(name='GmtCreate', example='1620634297000'),
    name?: string(name='Name', example='test'),
    openType?: string(name='OpenType', example='INNER'),
    scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
    startDate?: string(name='StartDate', example='2022-03-28'),
    startTime?: string(name='StartTime', example='00:00'),
    status?: string(name='Status', example='WORKING'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='iot.soundcodeservice.NotSigned'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSoundCodeScheduleResponseBody(name='body'),
}

async function getSoundCodeScheduleWithOptions(request: GetSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): GetSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSoundCodeSchedule(request: GetSoundCodeScheduleRequest): GetSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSoundCodeScheduleWithOptions(request, runtime);
}

model GetSpeechDeviceDetailRequest {
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model GetSpeechDeviceDetailResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    availableSpace?: float(name='AvailableSpace', example='200'),
    deviceName?: string(name='DeviceName', example='test'),
    iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    speechListUpdateTime?: long(name='SpeechListUpdateTime', example='1620624606000'),
    status?: string(name='Status', example='ONLINE'),
    totalSpace?: float(name='TotalSpace', example='2000'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpeechDeviceDetailResponseBody(name='body'),
}

async function getSpeechDeviceDetailWithOptions(request: GetSpeechDeviceDetailRequest, runtime: Util.RuntimeOptions): GetSpeechDeviceDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSpeechDeviceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSpeechDeviceDetail(request: GetSpeechDeviceDetailRequest): GetSpeechDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpeechDeviceDetailWithOptions(request, runtime);
}

model GetSpeechLicenseDeviceStatisticsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
}

model GetSpeechLicenseDeviceStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    availableQuota?: int32(name='AvailableQuota', example='100'),
    expiredQuota?: int32(name='ExpiredQuota', example='100'),
    expiringQuota?: int32(name='ExpiringQuota', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechLicenseDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpeechLicenseDeviceStatisticsResponseBody(name='body'),
}

async function getSpeechLicenseDeviceStatisticsWithOptions(request: GetSpeechLicenseDeviceStatisticsRequest, runtime: Util.RuntimeOptions): GetSpeechLicenseDeviceStatisticsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetSpeechLicenseDeviceStatistics',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSpeechLicenseDeviceStatistics(request: GetSpeechLicenseDeviceStatisticsRequest): GetSpeechLicenseDeviceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpeechLicenseDeviceStatisticsWithOptions(request, runtime);
}

model GetSpeechVoiceResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    items?: [ 
    {
      label?: string(name='Label'),
      value?: string(name='Value', example='tongyong'),
      voiceList?: {
        items?: [ 
        {
          label?: string(name='Label'),
          value?: string(name='Value', example='Xiaoyun'),
        }
      ](name='Items')
      }(name='VoiceList'),
    }
  ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='F94F72A5-82F0-496F-9AC2-3DBCFF77608A'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechVoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSpeechVoiceResponseBody(name='body'),
}

async function getSpeechVoiceWithOptions(runtime: Util.RuntimeOptions): GetSpeechVoiceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetSpeechVoice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSpeechVoice(): GetSpeechVoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSpeechVoiceWithOptions(runtime);
}

model GetStudioAppTokenOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123*******'),
}

model GetStudioAppTokenOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    bizId?: string(name='BizId', example='a12*******'),
    bizType?: string(name='BizType', example='webApp'),
    isEnable?: string(name='IsEnable', example='YES'),
    token?: string(name='Token', example='25bf576a6c*******'),
    type?: string(name='Type', example='custom'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model GetStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetStudioAppTokenOpenResponseBody(name='body'),
}

async function getStudioAppTokenOpenWithOptions(request: GetStudioAppTokenOpenRequest, runtime: Util.RuntimeOptions): GetStudioAppTokenOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetStudioAppTokenOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getStudioAppTokenOpen(request: GetStudioAppTokenOpenRequest): GetStudioAppTokenOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStudioAppTokenOpenWithOptions(request, runtime);
}

model GetThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', description='The ProductKey of the product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='iot_instc_pu****_c*-v64********'),
  modelVersion?: string(name='ModelVersion', description='Specifies whether to retrieve a simplified TSL model.

*   **true**: retrieves a simplified TSL model.

    A simplified TSL model includes only the **identifier** and **dataType** attributes of properties, services, events, and related input or output parameters. Simplified TSL models can be used by device developers for reference.

*   **false**: retrieves the complete TSL model.

    A complete TSL model includes all the parameters and values of properties, services, and events. Complete TSL models can be used by cloud application developers for reference.

Default value: false.', example='v1.0.0'),
  productKey?: string(name='ProductKey', description='The version number of the TSL model to be queried.

If you do not specify this parameter, IoT Platform returns the draft TSL model that is unpublished.', example='a1BwAGV****'),
  simple?: boolean(name='Simple', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter, the default module is queried.', example='true'),
}

model GetThingModelTslResponseBody = {
  code?: string(name='Code', description='The error message returned if the call fails.', example='iot.system.SystemException'),
  data?: {
    tslStr?: string(name='TslStr', example='{\\"schema\\":\\"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json\\",\\"profile\\":{\\"productKey\\":\\"a14TeWI****\\"},\\"properties\\":[{\\"identifier\\":\\"Humidity\\"}]}'),
    tslUri?: string(name='TslUri', description='The string of the TSL model.', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119&OSSAccessKeyId=LTAIuFOwFSR9****&Signature=5i389hacjdj3t%2FnrHmQpEUfnxw****'),
  }(name='Data', description='The URI that is used to store the TSL data in Object Storage Service (OSS). The URI is valid for 60 minutes.'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='The TSL data returned if the call is successful.', example='true'),
}

model GetThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingModelTslResponseBody(name='body'),
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request GetThingModelTslRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetThingModelTslResponse
 */
async function getThingModelTslWithOptions(request: GetThingModelTslRequest, runtime: Util.RuntimeOptions): GetThingModelTslResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.simple)) {
    query['Simple'] = request.simple;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingModelTsl',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request GetThingModelTslRequest
  * @return GetThingModelTslResponse
 */
async function getThingModelTsl(request: GetThingModelTslRequest): GetThingModelTslResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingModelTslWithOptions(request, runtime);
}

model GetThingModelTslPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter, the default module is queried.', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', description='The version number of the TSL model.

You can call the [ListThingModelVersion](~~150318~~) operation to view the version numbers of the TSL model for a product.

If you do not specify this parameter, the last published TSL model version is returned.', example='v1.0.0'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

>  You cannot specify this parameter.', example='rg-acfm4l5tcwd****'),
  simple?: boolean(name='Simple', description='Specifies whether to retrieve a simplified TSL model.

*   true: retrieves a simplified TSL model. A simplified TSL model includes only the **identifier** and **dataType** attributes of properties, services, events, and related input or output parameters. Simplified TSL models can be used by device developers for reference.
*   false: retrieves the complete TSL model. A complete TSL model includes all the parameters and values of properties, services, and events. Complete TSL models can be used by cloud application developers for reference.

Default value: false.', example='true'),
}

model GetThingModelTslPublishedResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    tslStr?: string(name='TslStr', description='The string of the TSL model.', example='{\\"schema\\":\\"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json\\",\\"profile\\":{\\"productKey\\":\\"a14TeWI****\\"},\\"properties\\":[{\\"identifier\\":\\"Humidity\\"}]}'),
    tslUri?: string(name='TslUri', description='The URI that is used to store the TSL data in Object Storage Service (OSS). The URI is valid for 60 minutes.', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119&OSSAccessKeyId=LTAIuFOwFSR9****&Signature=5i389hacjdj3t%2FnrHmQpEUfnxw****'),
  }(name='Data', description='The returned data.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetThingModelTslPublishedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingModelTslPublishedResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingModelTslPublishedRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetThingModelTslPublishedResponse
 */
async function getThingModelTslPublishedWithOptions(request: GetThingModelTslPublishedRequest, runtime: Util.RuntimeOptions): GetThingModelTslPublishedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.simple)) {
    query['Simple'] = request.simple;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingModelTslPublished',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingModelTslPublishedRequest
  * @return GetThingModelTslPublishedResponse
 */
async function getThingModelTslPublished(request: GetThingModelTslPublishedRequest): GetThingModelTslPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingModelTslPublishedWithOptions(request, runtime);
}

model GetThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.

You can view the **ProductKey** on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1Q5XoY****'),
}

model GetThingScriptResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    scriptType?: string(name='ScriptType', description='The type of the script. Valid values:

*   JavaScript
*   Python\\_27: Python 2.7
*   PHP\\_72: PHP 7.2', example='JavaScript'),
    scriptUrl?: string(name='ScriptUrl', description='The URL of the script payload.', example='http://***'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetThingScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingScriptResponseBody(name='body'),
}

/**
  * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingScriptRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetThingScriptResponse
 */
async function getThingScriptWithOptions(request: GetThingScriptRequest, runtime: Util.RuntimeOptions): GetThingScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingScriptRequest
  * @return GetThingScriptResponse
 */
async function getThingScript(request: GetThingScriptRequest): GetThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingScriptWithOptions(request, runtime);
}

model GetThingTemplateRequest {
  categoryKey?: string(name='CategoryKey', description='The error message returned if the call fails.', example='Lighting'),
  iotInstanceId?: string(name='IotInstanceId', description='The identifier of the category that you want to query.

You can call the [ListThingTemplates](~~150316~~) operation and view all category keys in the response.', example='iot_instc_pu****_c*-v64********'),
  resourceGroupId?: string(name='ResourceGroupId', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='rg-acfm4l5tcwd****'),
}

model GetThingTemplateResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The TSL features returned if the call is successful. Format:

```

{
  "properties": [], //The list of properties
  "services": [], //The list of services
  "events": [], //The list of events
}
                                
```

For more information, see [TSL formats](~~73727~~).'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  thingModelJSON?: string(name='ThingModelJSON', example='{ "properties":[],"services":[], "events":[]}'),
}

model GetThingTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingTemplateResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetThingTemplateResponse
 */
async function getThingTemplateWithOptions(request: GetThingTemplateRequest, runtime: Util.RuntimeOptions): GetThingTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryKey)) {
    query['CategoryKey'] = request.categoryKey;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 2 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingTemplateRequest
  * @return GetThingTemplateResponse
 */
async function getThingTemplate(request: GetThingTemplateRequest): GetThingTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingTemplateWithOptions(request, runtime);
}

model GetThingTopoRequest {
  deviceName?: string(name='DeviceName', description='The name of the gateway device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the gateway device. The ID is the unique identifier that is issued by IoT Platform to the gateway device.

>  If you specify this parameter, you do not need to specify the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a unique identifier for the device, and corresponds to a combination of the **ProductKey** and **DeviceName** parameters. If you specify the **IotId** parameter and a combination of the **ProductKey** and **DeviceName** parameters at the same time, the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for public instances. However, this parameter is required for enterprise-edition instances.', example='iot_instc_pu****_c*-v64********'),
  pageNo?: int32(name='PageNo', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the gateway device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model GetThingTopoResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    list?: {
      deviceInfo?: [ 
      {
        deviceName?: string(name='DeviceName', description='The DeviceName of the sub-device.', example='light'),
        iotId?: string(name='IotId', description='The ID of the sub-device. The ID is the unique identifier that is issued by IoT Platform to the sub-device.', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', description='The ProductKey of the product to which the sub-device belongs.', example='a1BwAGV****'),
      }
    ](name='deviceInfo')
    }(name='List', description='The details of the sub-device. The details of the sub-device are included in the **deviceInfo** parameter.'),
    pageCount?: long(name='PageCount', description='The total number of pages returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
    total?: long(name='Total', description='The total number of entries returned.', example='1'),
  }(name='Data', description='The data returned if the call succeeds. For more information, see the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call succeeds.

*   **true**: The call succeeds.
*   **false**: The call failed.', example='true'),
}

model GetThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetThingTopoResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can initiate a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingTopoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetThingTopoResponse
 */
async function getThingTopoWithOptions(request: GetThingTopoRequest, runtime: Util.RuntimeOptions): GetThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can initiate a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request GetThingTopoRequest
  * @return GetThingTopoResponse
 */
async function getThingTopo(request: GetThingTopoRequest): GetThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getThingTopoWithOptions(request, runtime);
}

model GisQueryDeviceLocationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l'),
  thingList?: [ 
    {
      deviceName?: string(name='DeviceName', example='mock_device_name'),
      productKey?: string(name='ProductKey', example='g3r****Vjta'),
    }
  ](name='ThingList'),
}

model GisQueryDeviceLocationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      adcode?: long(name='Adcode', example='90000'),
      city?: string(name='City'),
      coordinateSystem?: int32(name='CoordinateSystem', example='1'),
      country?: string(name='Country'),
      deviceName?: string(name='DeviceName', example='mock_device_name'),
      ip?: string(name='Ip', example='127.0.0.1'),
      latitude?: float(name='Latitude', example='30.0'),
      longitude?: float(name='Longitude', example='120.0'),
      productKey?: string(name='ProductKey', example='g3r****Vjta'),
      province?: string(name='Province'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model GisQueryDeviceLocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GisQueryDeviceLocationResponseBody(name='body'),
}

async function gisQueryDeviceLocationWithOptions(request: GisQueryDeviceLocationRequest, runtime: Util.RuntimeOptions): GisQueryDeviceLocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.thingList)) {
    query['ThingList'] = request.thingList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GisQueryDeviceLocation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function gisQueryDeviceLocation(request: GisQueryDeviceLocationRequest): GisQueryDeviceLocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return gisQueryDeviceLocationWithOptions(request, runtime);
}

model GisSearchDeviceTraceRequest {
  deviceName?: string(name='DeviceName', example='mock_device_name'),
  endTime?: long(name='EndTime', example='1645071254000'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-a****13l'),
  mapMatch?: int32(name='MapMatch', example='0'),
  productKey?: string(name='ProductKey', example='g3r****Vjta'),
  startTime?: long(name='StartTime', example='1645071254000'),
}

model GisSearchDeviceTraceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    deviceName?: string(name='DeviceName', example='mock_device_name'),
    points?: [ 
      {
        locateTime?: long(name='LocateTime', example='1645071254000'),
        location?: string(name='Location', example='120.0,30.0'),
      }
    ](name='Points'),
    productKey?: string(name='ProductKey', example='g3r****Vjta'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model GisSearchDeviceTraceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GisSearchDeviceTraceResponseBody(name='body'),
}

async function gisSearchDeviceTraceWithOptions(request: GisSearchDeviceTraceRequest, runtime: Util.RuntimeOptions): GisSearchDeviceTraceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.mapMatch)) {
    query['MapMatch'] = request.mapMatch;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GisSearchDeviceTrace',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function gisSearchDeviceTrace(request: GisSearchDeviceTraceRequest): GisSearchDeviceTraceResponse {
  var runtime = new Util.RuntimeOptions{};
  return gisSearchDeviceTraceWithOptions(request, runtime);
}

model ImportDTDataRequest {
  DTInstanceId?: string(name='DTInstanceId'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-****001'),
  items?: [ 
    {
      deviceName?: string(name='DeviceName', example='Device1'),
      params?: string(name='Params', example='{"key1":12,"key2":56}'),
    }
  ](name='Items'),
  productKey?: string(name='ProductKey', example='dgb9****'),
}

model ImportDTDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model ImportDTDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportDTDataResponseBody(name='body'),
}

async function importDTDataWithOptions(request: ImportDTDataRequest, runtime: Util.RuntimeOptions): ImportDTDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DTInstanceId)) {
    query['DTInstanceId'] = request.DTInstanceId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    body['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportDTData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importDTData(request: ImportDTDataRequest): ImportDTDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDTDataWithOptions(request, runtime);
}

model ImportDeviceRequest {
  deviceName?: string(name='DeviceName', example='light'),
  deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  nickname?: string(name='Nickname'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  sn?: string(name='Sn', example='QC4******001'),
}

model ImportDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='light'),
    deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
    iotId?: string(name='IotId', example='1O4YPNtRqB2anumz2Canp4GB7*****'),
    nickname?: string(name='Nickname'),
    productKey?: string(name='ProductKey', example='a1BwAGV****'),
    sn?: string(name='Sn', example='QC4******001'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model ImportDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportDeviceResponseBody(name='body'),
}

async function importDeviceWithOptions(request: ImportDeviceRequest, runtime: Util.RuntimeOptions): ImportDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.deviceSecret)) {
    query['DeviceSecret'] = request.deviceSecret;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nickname)) {
    query['Nickname'] = request.nickname;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sn)) {
    query['Sn'] = request.sn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importDevice(request: ImportDeviceRequest): ImportDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return importDeviceWithOptions(request, runtime);
}

model ImportThingModelTslRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product. The identifier must be 1 to 30 characters in length, and can contain letters, digits, and underscores (\\_).

This parameter must be used in combination with the **FunctionBlockName** parameter. If you do not specify this parameter, the system imports the default module.', example='BatteryModule'),
  functionBlockName?: string(name='FunctionBlockName', description='The name of the custom module. The name must be 4 to 30 characters in length, and can contain letters, digits, and underscores (\\_).

This parameter must be used in combination with the **FunctionBlockId** parameter. If you do not specify this parameter, the system imports the default module.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

>  You cannot specify this parameter.', example='rg-acfm4l5tcwd****'),
  tslStr?: string(name='TslStr', description='The TSL model to be edited. The value is a JSON string. The TSL model defines the properties, services, and events of the product.

The value of the **TslStr** parameter must conform to the standard TSL data format. For more information, see [TSL data format](~~73727~~).

>  To import a TSL model, you must specify the **TslStr** parameter.', example='{"schema":"https://iotx-tsl.oss-ap-southeast-1.aliyuncs.com/schema.json","profile":{"productKey":"a14TeW****"},"properties":[]}'),
  tslUrl?: string(name='TslUrl', description='The URI that is used to store the TSL data in Object Storage Service (OSS).

>  This parameter does not take effect. To import a TSL model, you must specify the **TslStr** parameter.', example='https://iotx-pop-dsl.oss-cn-shanghai.aliyuncs.com/thing/a14TeWI****/model.json?Expires=1581947119...'),
}

model ImportThingModelTslResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ImportThingModelTslResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportThingModelTslResponseBody(name='body'),
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ImportThingModelTslRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportThingModelTslResponse
 */
async function importThingModelTslWithOptions(request: ImportThingModelTslRequest, runtime: Util.RuntimeOptions): ImportThingModelTslResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.functionBlockName)) {
    query['FunctionBlockName'] = request.functionBlockName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.tslStr)) {
    query['TslStr'] = request.tslStr;
  }
  if (!Util.isUnset(request.tslUrl)) {
    query['TslUrl'] = request.tslUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportThingModelTsl',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ImportThingModelTslRequest
  * @return ImportThingModelTslResponse
 */
async function importThingModelTsl(request: ImportThingModelTslRequest): ImportThingModelTslResponse {
  var runtime = new Util.RuntimeOptions{};
  return importThingModelTslWithOptions(request, runtime);
}

model InvokeDataAPIServiceRequest {
  apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  param?: [ 
    {
      listParamType?: string(name='ListParamType', example='VARCHAR'),
      listParamValue?: [ string ](name='ListParamValue', example='["1","2","3"]'),
      paramName?: string(name='ParamName', example='status'),
      paramType?: string(name='ParamType', example='VARCHAR'),
      paramValue?: string(name='ParamValue', example='1'),
    }
  ](name='Param'),
}

model InvokeDataAPIServiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    apiSrn?: string(name='ApiSrn', example='acs:iot:*:127103983461****:serveapi/device/getDeviceCountByStatus2'),
    fieldNameList?: {
      fieldNameList?: [ string ](name='FieldNameList')
    }(name='FieldNameList'),
    pageNo?: int32(name='PageNo', example='0'),
    pageSize?: int32(name='PageSize', example='1'),
    resultList?: {
      resultList?: [  map[string]any ](name='ResultList')
    }(name='ResultList'),
    totalSize?: int32(name='TotalSize', example='2'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E68FE5DC-4D7B-4987-B785-DF8C6F191F5D'),
  success?: boolean(name='Success', example='true'),
}

model InvokeDataAPIServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeDataAPIServiceResponseBody(name='body'),
}

async function invokeDataAPIServiceWithOptions(request: InvokeDataAPIServiceRequest, runtime: Util.RuntimeOptions): InvokeDataAPIServiceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.apiSrn)) {
    body['ApiSrn'] = request.apiSrn;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.param)) {
    body['Param'] = request.param;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvokeDataAPIService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invokeDataAPIService(request: InvokeDataAPIServiceRequest): InvokeDataAPIServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeDataAPIServiceWithOptions(request, runtime);
}

model InvokeThingServiceRequest {
  args?: string(name='Args', description='The input parameter of the service. The value is a JSON string. Example: **Args={"param1": 1}**.

If this parameter is left empty, set the value to **Args={}**.

> If the TSL data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.', example='{"param1":1}'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device to which the required service belongs.

> If you configure this parameter, you must specify a value for the **ProductKey** parameter.', example='light'),
  identifier?: string(name='Identifier', description='The identifier of the service.

You can use one of the following methods to view the **identifier** of the service:

*   Log on to the [IoT Platform console](https://iot.console.aliyun.com/). On the **Define Feature** tab of the product to which the device belongs, view the identifier.
*   Call the [QueryThingModel](~~150321~~) operation and view the identifier in the TSL information that is returned.

>  If a service named testService belongs to a custom module named testFb, you can set this parameter to ******testFb:testService******. The custom module is not the default module.', example='Set'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>The IotId parameter specifies a globally unique identifier (GUID) for the device. The value of the **IotId** parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for this parameter, you do not need to configure the **ProductKey** or **DeviceName** parameter. If you specify values for the **IotId**,**ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the elastic container instance. On the **Overview** page in the IoT Platform console, you can view the ID of the instance.****

>*   If your instance has an ID, you must specify the ID for the parameter. Otherwise, the call fails.********
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>If you configure this parameter, you must specify a value for the **DeviceName** parameter.', example='a1BwAGV****'),
}

model InvokeThingServiceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the message. IoT Platform sends the message to the device to call the service.', example='abcabcabc1234****'),
    result?: string(name='Result', description='The result of the synchronous call.

If you asynchronously call the service, this parameter is not returned.', example='{"param1":1}'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful. However, this value does not indicate that the service is implemented. To obtain the implementation result, view the logs of the device.
*   **false**: The call failed.', example='true'),
}

model InvokeThingServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeThingServiceResponseBody(name='body'),
}

/**
  * When you define a service in a Thing Specification Language (TSL) model, the mode in which the service is called is specified. When you call a service by using this operation, IoT Platform uses a call mode based on the value of the **Identifier** parameter.
  * *   Synchronous mode: IoT Platform sends a revert-remote procedure call (RRPC) request to a device. Then, the device synchronously returns an RRPC response. For more information about how to use an RRPC, see [What is RRPC?](~~90567~~)
  * *   Asynchronous mode: IoT Platform sends an RRPC request to a device. Then, the device asynchronously returns an RRPC response. For more information about topics, see [Device properties, events, and services](~~89301~~).
  * > If you set the Checksum Type parameter to **Verification-free** when you create a product, the asynchronous mode is used.
  * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
  * ```
  * {
  * 	"id": "58***89",
  * 	"code": 200,
  * 	"data": {},
  * 	"message": "success",
  * 	"localizedMsg": "localizedMsg"
  * }
  * ```
  * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and then return the ID.
  * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
  * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can configure the parameters that you want to include in the returned result. The data must be in the JSON format.
  * >*   The **message** and **localizedMsg** parameters are optional.
  * >*   Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
  * ## Limits
  * If you synchronously call a service, the timeout period is 8 seconds. If a server does not receive a response within 8 seconds, a timeout error occurs. No limit is imposed on the timeout period of asynchronous calls. 
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request InvokeThingServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InvokeThingServiceResponse
 */
async function invokeThingServiceWithOptions(request: InvokeThingServiceRequest, runtime: Util.RuntimeOptions): InvokeThingServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvokeThingService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you define a service in a Thing Specification Language (TSL) model, the mode in which the service is called is specified. When you call a service by using this operation, IoT Platform uses a call mode based on the value of the **Identifier** parameter.
  * *   Synchronous mode: IoT Platform sends a revert-remote procedure call (RRPC) request to a device. Then, the device synchronously returns an RRPC response. For more information about how to use an RRPC, see [What is RRPC?](~~90567~~)
  * *   Asynchronous mode: IoT Platform sends an RRPC request to a device. Then, the device asynchronously returns an RRPC response. For more information about topics, see [Device properties, events, and services](~~89301~~).
  * > If you set the Checksum Type parameter to **Verification-free** when you create a product, the asynchronous mode is used.
  * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
  * ```
  * {
  * 	"id": "58***89",
  * 	"code": 200,
  * 	"data": {},
  * 	"message": "success",
  * 	"localizedMsg": "localizedMsg"
  * }
  * ```
  * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and then return the ID.
  * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
  * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can configure the parameters that you want to include in the returned result. The data must be in the JSON format.
  * >*   The **message** and **localizedMsg** parameters are optional.
  * >*   Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
  * ## Limits
  * If you synchronously call a service, the timeout period is 8 seconds. If a server does not receive a response within 8 seconds, a timeout error occurs. No limit is imposed on the timeout period of asynchronous calls. 
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request InvokeThingServiceRequest
  * @return InvokeThingServiceResponse
 */
async function invokeThingService(request: InvokeThingServiceRequest): InvokeThingServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeThingServiceWithOptions(request, runtime);
}

model InvokeThingsServiceRequest {
  args?: string(name='Args', description='The input parameter of the service. The value is a JSON string. Example: **Args={"param1": 1}**.

If this parameter is left empty, set the value to **Args={}**.

>If the TSL data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.', example='{"param1":1}'),
  deviceName?: [ string ](name='DeviceName', example='device1'),
  identifier?: string(name='Identifier', description='The identifier of the service.

You can use one of the following methods to view the **identifier** of the service.

*   Log on to the IoT Platform console. On the **Define Feature** tab of the product to which the device belongs, you can view the identifier.
*   Call the [QueryThingModel](~~150321~~) operation and view the identifier in the TSL information that is returned.

>  If a service named testService belongs to a custom module named testFb, you can set this parameter to ******testFb:testService******. The custom module is not the default module.', example='Set'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.****

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
}

model InvokeThingsServiceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful. However, this value does not indicate that the service is implemented. To obtain the implementation result, view the logs of the device.
*   **false**: The call failed.', example='true'),
}

model InvokeThingsServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeThingsServiceResponseBody(name='body'),
}

/**
  * You can only asynchronously call this operation.
  * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
  * ```
  * {
  * 	"id": "58***89",
  * 	"code": 200,
  * 	"data": {},
  * 	"message": "success",
  * 	"localizedMsg": "localizedMsg"
  * }
  * ```
  * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and return the ID.
  * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
  * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can specify the parameters included in the returned result. The data must be in JSON format.
  * >*   The **message** and **localizedMsg** parameters are optional.
  * >*    Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request InvokeThingsServiceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InvokeThingsServiceResponse
 */
async function invokeThingsServiceWithOptions(request: InvokeThingsServiceRequest, runtime: Util.RuntimeOptions): InvokeThingsServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.args)) {
    query['Args'] = request.args;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvokeThingsService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can only asynchronously call this operation.
  * When the device receives the service call, the device returns a response to the service caller. When you configure the device, you must specify the response logic and response parameters. The data formats of response parameters must comply with the Alink protocol. Example:
  * ```
  * {
  * 	"id": "58***89",
  * 	"code": 200,
  * 	"data": {},
  * 	"message": "success",
  * 	"localizedMsg": "localizedMsg"
  * }
  * ```
  * > *   The **id** parameter specifies the unique identifier of the request. The ID is generated by IoT Platform. The device can obtain the ID from the request parameters and return the ID.
  * >*   The **code** parameter specifies the result of the service call. The value of the parameter is an integer.
  * >*   The **data** parameter specifies the result of the service call. This parameter is returned to the service caller. You can specify the parameters included in the returned result. The data must be in JSON format.
  * >*   The **message** and **localizedMsg** parameters are optional.
  * >*    Link SDK for C of IoT Platform provides an example on how to use a TSL model. For more information, see [Call device services](~~258239~~).
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request InvokeThingsServiceRequest
  * @return InvokeThingsServiceResponse
 */
async function invokeThingsService(request: InvokeThingsServiceRequest): InvokeThingsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeThingsServiceWithOptions(request, runtime);
}

model ListAnalyticsDataRequest {
  apiPath?: string(name='ApiPath', example='/iot-cn-npk1v******/system/query/hist_dev_cnt_stat'),
  condition?: [ 
    {
      betweenEnd?: string(name='BetweenEnd', example='5'),
      betweenStart?: string(name='BetweenStart', example='1'),
      fieldName?: string(name='FieldName', example='testCode'),
      operate?: string(name='Operate', example='='),
      value?: string(name='Value', example='4'),
    }
  ](name='Condition'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-npk1u******'),
  isoId?: string(name='IsoId', example='oxs_iso_id'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
}

model ListAnalyticsDataResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    count?: long(name='Count', example='3'),
    hasNext?: boolean(name='HasNext', example='false'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='100'),
    resultJson?: string(name='ResultJson'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='7EC5B624-AF1B-4C4D-BA82-A02BA1******'),
  success?: boolean(name='Success', example='false'),
}

model ListAnalyticsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAnalyticsDataResponseBody(name='body'),
}

async function listAnalyticsDataWithOptions(request: ListAnalyticsDataRequest, runtime: Util.RuntimeOptions): ListAnalyticsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiPath)) {
    query['ApiPath'] = request.apiPath;
  }
  if (!Util.isUnset(request.condition)) {
    query['Condition'] = request.condition;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isoId)) {
    query['IsoId'] = request.isoId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAnalyticsData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAnalyticsData(request: ListAnalyticsDataRequest): ListAnalyticsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAnalyticsDataWithOptions(request, runtime);
}

model ListDataSourceItemRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t***'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='thing'),
}

model ListDataSourceItemResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  dataSourceItems?: {
    dataSourceItem?: [ 
    {
      dataSourceItemId?: long(name='DataSourceItemId', example='129322'),
      deviceName?: string(name='DeviceName', example='lightDevice'),
      productKey?: string(name='ProductKey', example='aw3****'),
      scopeType?: string(name='ScopeType', example='PRODUCT'),
      topic?: string(name='Topic', example='/gyh***z/+/thing/event/property/post'),
    }
  ](name='dataSourceItem')
  }(name='DataSourceItems'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDataSourceItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDataSourceItemResponseBody(name='body'),
}

async function listDataSourceItemWithOptions(request: ListDataSourceItemRequest, runtime: Util.RuntimeOptions): ListDataSourceItemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDataSourceItem',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataSourceItem(request: ListDataSourceItemRequest): ListDataSourceItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDataSourceItemWithOptions(request, runtime);
}

model ListDestinationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='DataPurpose'),
  types?: [ string ](name='Types', example='["REPUBLISH", "OTS"]'),
}

model ListDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  destinations?: {
    destinations?: [ 
    {
      configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
      description?: string(name='Description'),
      destinationId?: long(name='DestinationId', example='1003'),
      isFailover?: boolean(name='IsFailover', example='false'),
      name?: string(name='Name', example='DataPurpose'),
      status?: string(name='Status', example='NORMAL'),
      type?: string(name='Type', example='REPUBLISH'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    }
  ](name='destinations')
  }(name='Destinations'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDestinationResponseBody(name='body'),
}

async function listDestinationWithOptions(request: ListDestinationRequest, runtime: Util.RuntimeOptions): ListDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  if (!Util.isUnset(request.types)) {
    query['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDestination(request: ListDestinationRequest): ListDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDestinationWithOptions(request, runtime);
}

model ListDeviceDistributeJobRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.

The **NextToken** or **CurrentPage** parameter specifies a condition for displaying the results. You can specify one of the two parameters. If you specify both parameters at the same time, the **NextToken parameter** is used.

For information about the **NextToken** parameter, see the description of the **NextToken** parameter.', example='1'),
  jobId?: string(name='JobId', description='The ID of the distribution task. The ID is globally unique.', example='UbmsMHmkqv0PiAG****010001'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve subsequent pages of the query results. The first time you perform a query operation, you do not need to specify this parameter.

The **NextToken** or **CurrentPage** parameter specifies a condition for displaying the results. You can specify one of the two parameters. If you specify both parameters at the same time, the **NextToken** parameter is used.



**Important**

The offset in the number of results is obtained by using the following formula: **PageSize** × (**CurrentPage** - 1).

If the offset is greater than 10,000, you must use the token that is returned in the previous query as the value of the **NextToken** parameter to obtain the value of the **Data** parameter. Otherwise, the current request is terminated and the value of the **Data** parameter cannot be returned.', example='TGlzdFJlc291***'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 200.', example='10'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1T27vz****'),
  status?: int32(name='Status', description='The status of the device distribution task.

*   **0**: The task is being initialized.
*   **1**: The task is running.
*   **2**: The task is completed. The status indicates that the distribution task is complete but does not indicate that all products and devices are distributed. To obtain distribution results, call the [QueryDeviceDistributeDetail](~~199533~~) operation.
*   **3**: The task is unexpectedly interrupted.', example='1'),
  targetUid?: string(name='TargetUid', description='The ID of the Alibaba Cloud account to which the devices are distributed.', example='198***'),
}

model ListDeviceDistributeJobResponseBody = {
  code?: string(name='Code', description='The error code that is returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    jobInfo?: {
      items?: [ 
      {
        gmtCreate?: long(name='GmtCreate', description='The time when the task was created.', example='1581595942000'),
        jobId?: string(name='JobId', description='The ID of the task.', example='UbmsMHmkqv0PiAG****010001'),
        productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
        sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance.', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName', description='The name of the source instance.'),
        sourceRegion?: string(name='SourceRegion', description='The region where the source instance resides.', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', description='The ID of the source Alibaba Cloud account.', example='198***'),
        status?: int32(name='Status', description='The status of the task.

*   **0**: The task is being initialized.
*   **1**: The task is running.
*   **2**: The task is completed. The status indicates that the distribution task is complete but does not indicate that all products and devices are distributed. To obtain distribution results, call the [QueryDeviceDistributeDetail](~~199533~~) operation.
*   **3**: The task is unexpectedly interrupted.', example='1'),
        strategy?: int32(name='Strategy', description='The distribution policy.

*   **0**: distributes devices to specified instances in a specified region. This is the default value.
*   **1**: configures instance IDs in multiple regions and distributes devices to the nearest regions based on the IP addresses of the devices.', example='0'),
        targetInstanceConfigs?: {
          targetInstanceConfigs?: [ 
          {
            targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='iot-cn-6ja***'),
            targetInstanceName?: string(name='TargetInstanceName', description='The name of the destination instance.'),
            targetRegion?: string(name='TargetRegion', description='The region where the destination instance resides.', example='cn-shanghai'),
          }
        ](name='targetInstanceConfigs')
        }(name='TargetInstanceConfigs', description='The IDs of the destination instances.

*   If the value of the **Strategy** parameter is **1**, multiple instance IDs exist.
*   If the value of the **Strategy** parameter is **0**, only one instance ID exists.'),
        targetUid?: string(name='TargetUid', description='The ID of the destination Alibaba Cloud account.', example='198***'),
        total?: int32(name='Total', description='The total number of devices in the distribution task.', example='5'),
      }
    ](name='items')
    }(name='JobInfo', description='The information about the task.'),
    nextToken?: string(name='NextToken', description='The token that is used to retrieve the subsequent pages of the query results. The value of this parameter can be used in the next query to obtain the subsequent pages of results. 

If the return value is empty, no subsequent page exists.', example='TGlzdFJlc291***'),
    total?: int32(name='Total', description='The total number of device distribution tasks.', example='10'),
  }(name='Data', description='The distribution tasks that are returned if the call is successful. For more information, see the **JobInfo** parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceDistributeJobResponseBody(name='body'),
}

/**
  * If you use an Enterprise Edition instance, you must specify the **IotInstanceId** parameter when you call this operation. Otherwise, the call fails.
  * ## QPS limits
  * You can call this API operation up to five times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListDeviceDistributeJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDeviceDistributeJobResponse
 */
async function listDeviceDistributeJobWithOptions(request: ListDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): ListDeviceDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.jobId)) {
    body['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you use an Enterprise Edition instance, you must specify the **IotInstanceId** parameter when you call this operation. Otherwise, the call fails.
  * ## QPS limits
  * You can call this API operation up to five times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListDeviceDistributeJobRequest
  * @return ListDeviceDistributeJobResponse
 */
async function listDeviceDistributeJob(request: ListDeviceDistributeJobRequest): ListDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceDistributeJobWithOptions(request, runtime);
}

model ListDistributedDeviceRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='mydevice'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 200.', example='5'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance to which the device belongs.

*   The IDs of public instances in different regions:

    *   China (Shanghai): iotx-oxssharez200.
    *   Japan (Tokyo): iotx-oxssharez300.
    *   Singapore (Singapore): iotx-oxssharez400.
    *   US (Silicon Valley): iotx-oxssharez500.
    *   US (Virginia): iotx-oxssharez600.
    *   Germany (Frankfurt): iotx-oxssharez700.

*   The IDs of Enterprise Edition instances:

    1\\. Log on to the IoT Platform console. Select a region from the drop-down list in the upper-left corner of the top navigation bar.

    2\\. On the **Overview** page, click the instance name. On the **Instance Details** page, view the instance ID in the **Basic Information** section.', example='iot-060***'),
  targetUid?: string(name='TargetUid', description='The ID of the Alibaba Cloud account. You can log on to the IoT Platform console, click the profile picture, and then view **Account ID** on the **Security Settings** page.', example='198***'),
}

model ListDistributedDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    info?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='mydevice'),
        gmtCreate?: long(name='GmtCreate', description='The time when the distribution task was created.', example='1581595942000'),
        gmtModified?: long(name='GmtModified', description='The time when the distribution task was modified.', example='1581595942222'),
        productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV***'),
        sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance.', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName', description='The name of the source instance.', example='myproInstance'),
        sourceRegion?: string(name='SourceRegion', description='The source region in which the device resides.', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', description='The ID of the Alibaba Cloud account that distributes the device.

You can only distribute devices across regions and instances by using the same Alibaba cloud account. The value of this parameter is the same as the value of the **TargetUid** parameter.', example='198***'),
        targetAliyunId?: string(name='TargetAliyunId', description='The Alibaba Cloud account to which the device is distributed.', example='io****@example.com'),
        targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='iot-cn-09k***'),
        targetInstanceName?: string(name='TargetInstanceName', description='The name of the destination instance.', example='newinstance'),
        targetRegion?: string(name='TargetRegion', description='The destination region to which the device is distributed.', example='cn-shenzhen'),
        targetUid?: string(name='TargetUid', description='The Alibaba Cloud account to which the device is distributed.

You can only distribute devices across regions and instances by using the same Alibaba cloud account. The value of this parameter is the same as the value of the **TargetUid** parameter.', example='198***'),
      }
    ](name='items')
    }(name='Info', description='The information about the device.'),
    total?: int32(name='Total', description='The total number of returned devices.', example='10'),
  }(name='Data', description='The products returned if the call is successful. For more information, see **Info**.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListDistributedDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributedDeviceResponseBody(name='body'),
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  * *   Multiple Alibaba Cloud accounts can run a maximum of 200 QPS at the same time.
  *
  * @param request ListDistributedDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDistributedDeviceResponse
 */
async function listDistributedDeviceWithOptions(request: ListDistributedDeviceRequest, runtime: Util.RuntimeOptions): ListDistributedDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    query['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributedDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  * *   Multiple Alibaba Cloud accounts can run a maximum of 200 QPS at the same time.
  *
  * @param request ListDistributedDeviceRequest
  * @return ListDistributedDeviceResponse
 */
async function listDistributedDevice(request: ListDistributedDeviceRequest): ListDistributedDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributedDeviceWithOptions(request, runtime);
}

model ListDistributedProductRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 200.', example='5'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.', example='a1BwAGV****'),
  sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance to which the product belongs.

*   The IDs of public instances in different regions:

    *   China (Shanghai): iotx-oxssharez200.
    *   Japan (Tokyo): iotx-oxssharez300.
    *   Singapore (Singapore): iotx-oxssharez400.
    *   US (Silicon Valley): iotx-oxssharez500.
    *   US (Virginia): iotx-oxssharez600.
    *   Germany (Frankfurt): iotx-oxssharez700.

*   To view the ID of an Enterprise Edition instance, perform the following steps:

    1\\. Log on to the [IoT Platform console](https://iot.console.aliyun.com/). In the top navigation bar, select the region where the instance resides from the drop-down list.

    2\\. On the **Overview** page, view the **ID** of the instance.', example='iot-060***'),
  targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance to which the product is distributed. For more information about instance IDs, see the description of the **SourceInstanceId** parameter.', example='iot-cn-6ja***'),
  targetUid?: string(name='TargetUid', description='The ID of the Alibaba Cloud account to which the product belongs. You can log on to the IoT Platform console, click the profile picture, and then view the **account ID** on the **Security Settings** page.', example='198***'),
}

model ListDistributedProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    info?: {
      items?: [ 
      {
        gmtCreate?: long(name='GmtCreate', description='The time when the distribution task was created.', example='1581595942'),
        productKey?: string(name='ProductKey', description='The **ProductKey** of the product.', example='a1BwAGV****'),
        sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance to which the product belongs.', example='iot-cn-6ja***'),
        sourceInstanceName?: string(name='SourceInstanceName', description='The name of the source instance to which the product belongs.', example='myproInstance'),
        sourceRegion?: string(name='SourceRegion', description='The source region to which the product belongs.', example='cn-shanghai'),
        sourceUid?: string(name='SourceUid', description='The ID of the Alibaba Cloud account that is used to distribute the product. You can distribute products across regions and instances only within the same Alibaba cloud account. The value of this parameter is the same as the value of the **TargetUid** parameter.', example='198***'),
        targetAliyunId?: string(name='TargetAliyunId', description='The name of the Alibaba Cloud account to which the product is distributed.', example='io****@example.com'),
        targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance to which the product is distributed.', example='iot-cn-09k***'),
        targetInstanceName?: string(name='TargetInstanceName', description='The name of the destination instance to which the product is distributed.', example='newinstance'),
        targetRegion?: string(name='TargetRegion', description='The destination region to which the product is distributed.', example='cn-shenzhen'),
        targetUid?: string(name='TargetUid', description='The ID of the Alibaba Cloud account to which the product is distributed.

You can distribute devices across regions and instances only within the same Alibaba cloud account. The value of this parameter is the same as the value of the **TargetUid** parameter.', example='198***'),
      }
    ](name='items')
    }(name='Info', description='The information about the product.'),
    total?: int32(name='Total', description='The total number of returned products.', example='10'),
  }(name='Data', description='The products returned if the call is successful. For more information, see the "**Info**" section of this topic.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListDistributedProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDistributedProductResponseBody(name='body'),
}

/**
  * You can call this operation only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * ## QPS limits
  * You can call this API operation up to five times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListDistributedProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListDistributedProductResponse
 */
async function listDistributedProductWithOptions(request: ListDistributedProductRequest, runtime: Util.RuntimeOptions): ListDistributedProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.sourceInstanceId)) {
    query['SourceInstanceId'] = request.sourceInstanceId;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    query['TargetInstanceId'] = request.targetInstanceId;
  }
  if (!Util.isUnset(request.targetUid)) {
    query['TargetUid'] = request.targetUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDistributedProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * ## QPS limits
  * You can call this API operation up to five times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListDistributedProductRequest
  * @return ListDistributedProductResponse
 */
async function listDistributedProduct(request: ListDistributedProductRequest): ListDistributedProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDistributedProductWithOptions(request, runtime);
}

model ListJobRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='IN_PROGRESS'),
}

model ListJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      description?: string(name='Description', example='TestDescription'),
      jobId?: string(name='JobId', example='Z20nyanW5****010001'),
      jobName?: string(name='JobName', example='MyTestJobOEfwJN'),
      scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
      status?: string(name='Status', example='COMPLETED'),
      type?: string(name='Type', example='CUSTOM_JOB'),
      utcCreate?: string(name='UtcCreate', example='2019-05-21T11:45:37.000Z'),
      utcModified?: string(name='UtcModified', example='2019-05-21T17:15:46.000Z'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='5'),
  requestId?: string(name='RequestId', example='BF449394-1C7D-4144-B7C4-9C3FA29F8B64'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='20'),
}

model ListJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListJobResponseBody(name='body'),
}

async function listJobWithOptions(request: ListJobRequest, runtime: Util.RuntimeOptions): ListJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listJob(request: ListJobRequest): ListJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobWithOptions(request, runtime);
}

model ListOTAFirmwareRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1.', example='1'),
  destVersion?: string(name='DestVersion', description='The version number of the OTA update package. If you specify this parameter, only the OTA update package of the specified version number is returned.', example='4.0.0'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='10'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the OTA update package belongs.

If you specify this parameter, IoT Platform returns the OTA update packages of the specified product. If you do not specify this parameter, IoT Platform returns the OTA update packages of the current Alibaba Cloud account.', example='a19mzPZ****'),
}

model ListOTAFirmwareResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', description='The number of the returned page.', example='1'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  firmwareInfo?: {
    simpleFirmwareInfo?: [ 
    {
      destVersion?: string(name='DestVersion', description='The version number of the OTA update package.', example='4.0.0'),
      firmwareDesc?: string(name='FirmwareDesc', description='The description of the OTA update package.', example='firmwareDesc'),
      firmwareId?: string(name='FirmwareId', description='The unique ID of the OTA update package.', example='UfuxnwygsuSkVE0VCN****0100'),
      firmwareName?: string(name='FirmwareName', description='The name of the OTA update package.', example='t3q5rkNm'),
      firmwareSign?: string(name='FirmwareSign', description='The signature of the OTA update package.', example='3d04ab6462633508606e5f3daac8****'),
      firmwareSize?: int32(name='FirmwareSize', description='The size of the update package. Unit: bytes.', example='924'),
      moduleName?: string(name='ModuleName', description='The name of the module.', example='module1234'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the OTA update package belongs.', example='a19mzPZ****'),
      productName?: string(name='ProductName', description='The name of the product to which the OTA update package belongs.', example='MyProduct'),
      signMethod?: string(name='SignMethod', description='The signature method of the OTA update package.', example='MD5'),
      srcVersion?: string(name='SrcVersion', description='The version number of the original update package to be updated.

>  The return value is null if you perform a full update.', example='V1.0.0'),
      status?: int32(name='Status', description='The status of the OTA update package. Valid values:

*   **0**: unverified
*   **1**: verified
*   **2**: verifying
*   **3**: failed to be verified', example='0'),
      type?: int32(name='Type', description='The type of the OTA update package. Valid values:

*   **0**: complete firmware
*   **1**: differential firmware', example='0'),
      utcCreate?: string(name='UtcCreate', description='The time when the update package was created. The time is displayed in UTC.', example='2019-12-28T02:42:22.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the update task was last modified. The time is displayed in UTC.', example='2019-12-28T02:42:22.000Z'),
    }
  ](name='SimpleFirmwareInfo')
  }(name='FirmwareInfo', description='The OTA update packages returned if the call is successful. For more information, see SimpleFirmwareInfo.'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of OTA update packages.', example='1'),
}

model ListOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAFirmwareResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAFirmwareRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListOTAFirmwareResponse
 */
async function listOTAFirmwareWithOptions(request: ListOTAFirmwareRequest, runtime: Util.RuntimeOptions): ListOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.destVersion)) {
    query['DestVersion'] = request.destVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAFirmwareRequest
  * @return ListOTAFirmwareResponse
 */
async function listOTAFirmware(request: ListOTAFirmwareRequest): ListOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAFirmwareWithOptions(request, runtime);
}

model ListOTAJobByDeviceRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1.', example='1'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light1'),
  firmwareId?: string(name='FirmwareId', description='The ID of the update package. The ID is the unique identifier for the update package.

An update package ID is returned when you call the [CreateOTAFirmware](~~147311~~) operation to create the update package. You can call the [ListOTAFirmware](~~147450~~) operation and view the update package ID in the response.', example='FJFx8JzpnhpIsKftRjjm03****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a19mzPZ****'),
}

model ListOTAJobByDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='MissingFirmwareId'),
  currentPage?: int32(name='CurrentPage', description='The number of the returned page.', example='1'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId', description='The ID of the update package.', example='FJFx8JzpnhpIsKftRjjm03****'),
      jobId?: string(name='JobId', description='The ID of the update batch.', example='HvKuBpuk3rdk6E92CP****'),
      jobStatus?: string(name='JobStatus', description='The status of the update batch. Valid values:

*   **IN_PROGRESS**: The update batch is running.
*   **COMPLETE**: The update batch is completed.
*   **CANCELED**: The update batch is canceled.', example='COMPLETED'),
      jobType?: string(name='JobType', description='The type of the task. Valid values:

*   **VERFIY_FIRMWARE**: update package verification.
*   **UPGRADE_FIRMWARE**: batch update.', example='UPGRADE_FIRMWARE'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the update package belongs.', example='a19mzPZ****'),
      selectionType?: string(name='SelectionType', description='The update policy of the update batch. Valid values:

*   DYNAMIC: dynamic update. This value is returned if you call the [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create an update batch.
*   STATIC: static update. This value is returned if you call the [CreateOTAStaticUpgradeJob](~~147496~~) API operation to create an update batch.', example='STATIC'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key', description='The key of each tag.', example='key1'),
          value?: string(name='Value', description='The value of the tag.', example='value1'),
        }
      ](name='OtaTagDTO')
      }(name='Tags', description='The tags of the update batch.'),
      targetSelection?: string(name='TargetSelection', description='The scope of the update. Valid values: 

- **ALL**: updates all devices.
- **SPECIFIC**: updates specified devices.
- **GRAY**: performs a phased update.

>  The value ALL is returned if you call the [CreateOTADynamicUpgradeJob](/help/en/iot-platform/latest/av6dui) API operation to create an update batch.', example='ALL'),
      utcCreate?: string(name='UtcCreate', description='The time when the update batch was created. The time is displayed in UTC.', example='2019-12-28T02:43:10.000Z'),
      utcEndTime?: string(name='UtcEndTime', description='The end time of the update batch. The time is displayed in UTC.

>  This parameter is returned only after the update batch is completed.', example='2019-12-29T02:43:10.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the task was last modified. The time is in UTC.', example='2019-12-29T02:43:10.000Z'),
      utcStartTime?: string(name='UtcStartTime', description='The start time of the update batch. The time is in the UTC format.', example='2019-12-29T02:43:10.000Z'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data', description='The update batch information returned if the call is successful. For more information, see the following **SimpleOTAJobInfo** parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.', example='FirmwareId is mandatory for this action'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of update packages returned.', example='1'),
}

model ListOTAJobByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAJobByDeviceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAJobByDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListOTAJobByDeviceResponse
 */
async function listOTAJobByDeviceWithOptions(request: ListOTAJobByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAJobByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAJobByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAJobByDeviceRequest
  * @return ListOTAJobByDeviceResponse
 */
async function listOTAJobByDevice(request: ListOTAJobByDeviceRequest): ListOTAJobByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAJobByDeviceWithOptions(request, runtime);
}

model ListOTAJobByFirmwareRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1.', example='1'),
  firmwareId?: string(name='FirmwareId', description='The ID of the update package.

An update package ID is returned when you call the [CreateOTAFirmware](~~147311~~) operation to create the update package.

You can call the [ListOTAFirmware](~~147450~~) operation and view the update package ID in the response.', example='FJFx8JzpnhpIsKftRjjm03****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 200.', example='10'),
}

model ListOTAJobByFirmwareResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', description='The number of the returned page.', example='1'),
  data?: {
    simpleOTAJobInfo?: [ 
    {
      firmwareId?: string(name='FirmwareId', description='The ID of the update package.', example='UfuxnwygsuSkVE0VCN****0100'),
      jobId?: string(name='JobId', description='The ID of the update batch.', example='HvKuBpuk3rdk6E92CP****0200'),
      jobStatus?: string(name='JobStatus', description='The status of the update batch.

*   **PLANNED**: The update batch is being planned. The batch is created, but the scheduled time has not arrived. This parameter is returned only if you perform a static update.
*   **IN_PROGRESS**: The update batch is running.
*   **COMPLETE**: The update batch is completed.
*   **CANCELED**: The update batch is canceled.', example='IN_PROGRESS'),
      jobType?: string(name='JobType', description='The type of the batch. Valid values:

*   **VERFIY_FIRMWARE**: update package verification.
*   **UPGRADE_FIRMWARE**: batch update.', example='UPGRADE_FIRMWARE'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the update package belongs.', example='a19mzPZ****'),
      selectionType?: string(name='SelectionType', description='The update policy of the update batch. Valid values:

*   **DYNAMIC**: dynamic update. This value is returned if you call the [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create an update batch.
*   **STATIC**: static update. This value is returned if you call the [CreateOTAStaticUpgradeJob](~~147496~~) API operation to create an update batch.', example='STATIC'),
      tags?: {
        otaTagDTO?: [ 
        {
          key?: string(name='Key', description='The key of each tag.', example='key1'),
          value?: string(name='Value', description='The value of the tag.', example='value1'),
        }
      ](name='OtaTagDTO')
      }(name='Tags', description='The tags of the update batch.'),
      targetSelection?: string(name='TargetSelection', description='The scope of the update batch. Valid values: 

- **ALL**: updates all devices.
- **SPECIFIC**: updates specified devices.
- **GRAY**: performs a phased update.

>  The value ALL is returned if you call the [CreateOTADynamicUpgradeJob](/help/en/iot-platform/latest/av6dui) API operation to create an update batch.', example='SPECIFIC'),
      utcCreate?: string(name='UtcCreate', description='The time when the update batch was created. The time is displayed in UTC.', example='2019-12-28T02:43:10.000Z'),
      utcEndTime?: string(name='UtcEndTime', description='The end time of the update batch. The time is displayed in UTC.

This parameter is returned only after the update batch is completed.', example='2019-12-29T02:43:10.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the update batch was last modified. The time is displayed in UTC.', example='2019-12-28T02:43:10.000Z'),
      utcStartTime?: string(name='UtcStartTime', description='The start time of the update batch. The time is displayed in UTC.', example='2019-12-28T02:43:10.000Z'),
    }
  ](name='SimpleOTAJobInfo')
  }(name='Data', description='The update batch information returned if the call is successful. For more information, see **SimpleOTATaskInfo**.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D58AC86-D5BF-4B39-834E-913E7F2C985D'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of update jobs returned.', example='1'),
}

model ListOTAJobByFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAJobByFirmwareResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAJobByFirmwareRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListOTAJobByFirmwareResponse
 */
async function listOTAJobByFirmwareWithOptions(request: ListOTAJobByFirmwareRequest, runtime: Util.RuntimeOptions): ListOTAJobByFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAJobByFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAJobByFirmwareRequest
  * @return ListOTAJobByFirmwareResponse
 */
async function listOTAJobByFirmware(request: ListOTAJobByFirmwareRequest): ListOTAJobByFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAJobByFirmwareWithOptions(request, runtime);
}

model ListOTAModuleByProductRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.', example='a1uctKe****'),
}

model ListOTAModuleByProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: [ 
    {
      aliasName?: string(name='AliasName', description='The alias of the OTA module.'),
      desc?: string(name='Desc', description='The description of the OTA module.'),
      gmtCreate?: string(name='GmtCreate', description='The time when the OTA module was created. The time is displayed in UTC.', example='2020-10-13T09:46Z'),
      gmtModified?: string(name='GmtModified', description='The last time when the OTA module was updated. The time is displayed in UTC.', example='2020-10-19T09:46Z'),
      moduleName?: string(name='ModuleName', description='The name of the OTA module.', example='barcodeScanner'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product.', example='aluctKe****'),
    }
  ](name='Data', description='The OTA modules returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListOTAModuleByProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAModuleByProductResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAModuleByProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListOTAModuleByProductResponse
 */
async function listOTAModuleByProductWithOptions(request: ListOTAModuleByProductRequest, runtime: Util.RuntimeOptions): ListOTAModuleByProductResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAModuleByProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAModuleByProductRequest
  * @return ListOTAModuleByProductResponse
 */
async function listOTAModuleByProduct(request: ListOTAModuleByProductRequest): ListOTAModuleByProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAModuleByProductWithOptions(request, runtime);
}

model ListOTAModuleVersionsByDeviceRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device to be queried.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='newdevice'),
  iotId?: string(name='IotId', description='The ID of the device. The device ID is issued by IoT Platform.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. A maximum of 200 entries can be displayed on each page.', example='10'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='aluctKe****'),
}

model ListOTAModuleVersionsByDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', description='The current page number.', example='1'),
  data?: {
    simpleOTAModuleInfo?: [ 
    {
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='newDevice'),
      iotId?: string(name='IotId', description='The ID of the device.', example='QjIFT***000101'),
      moduleName?: string(name='ModuleName', description='The name of the OTA module.', example='barcodeScanner'),
      moduleVersion?: string(name='ModuleVersion', description='The module version that was submitted by the device.', example='1.0'),
      productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='aluctKe****'),
    }
  ](name='SimpleOTAModuleInfo')
  }(name='Data', description='The module version information returned if the call is successful. The information was submitted by the device. For more information, see the **SimpleOTAModuleInfo** parameter in this table.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of module versions returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of module versions that was submitted by the device.', example='10'),
}

model ListOTAModuleVersionsByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAModuleVersionsByDeviceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAModuleVersionsByDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListOTAModuleVersionsByDeviceResponse
 */
async function listOTAModuleVersionsByDeviceWithOptions(request: ListOTAModuleVersionsByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAModuleVersionsByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAModuleVersionsByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAModuleVersionsByDeviceRequest
  * @return ListOTAModuleVersionsByDeviceResponse
 */
async function listOTAModuleVersionsByDevice(request: ListOTAModuleVersionsByDeviceRequest): ListOTAModuleVersionsByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAModuleVersionsByDeviceWithOptions(request, runtime);
}

model ListOTATaskByJobRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1.

> The product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter must be less than or equal to 100,000.', example='1'),
  deviceNames?: [ string ](name='DeviceNames', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  jobId?: string(name='JobId', description='The ID of the update batch. This ID uniquely identifies the update batch. You can obtain the ID from the value of the **JobId** parameter that is returned after you call the [CreateOTAVerifyJob](~~147480~~), [CreateOTAStaticUpgradeJob](~~147496~~), or [CreateOTADynamicUpgradeJob](~~147887~~) operation. You can also view the batch ID on the **Firmware Details** page of the IoT Platform console.', example='7glPHmaDYLAYMD1HHutT02****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.



> The product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter must be less than or equal to 100,000.', example='10'),
  taskStatus?: string(name='TaskStatus', description='If you specify a value for this parameter, only the update tasks that are in the specified state are queried. Valid values:

*   **CONFIRM**: The update task is pending confirmation.
*   **QUEUED**: The update notification is to be pushed.
*   **NOTIFIED**: The update notification is pushed to the device.
*   **IN_PROGRESS**: The update task is in progress.
*   **SUCCEEDED**: The update is successful.
*   **FAILED**: The update failed.
*   **CANCELED**: The update batch is canceled.

If you do not specify a value for this parameter, all update tasks of the specified batch are queried.', example='FAILED'),
}

model ListOTATaskByJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', description='The number of the returned page.', example='1'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion', description='The version of the destination over-the-air (OTA) update package.', example='1.0.1'),
      deviceName?: string(name='DeviceName', description='The name of the device.', example='testDevice2'),
      firmwareId?: string(name='FirmwareId', description='The ID of the update package.', example='q3j9OYBjUAZMv1hlMgdo03****'),
      iotId?: string(name='IotId', description='The ID of the device.', example='nadRdeffljdEndlfadgadfse****'),
      jobId?: string(name='JobId', description='The ID of the update batch.', example='7glPHmaDYLAYMD1HHutT02****'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1GUfrM****'),
      productName?: string(name='ProductName', description='The name of the product to which the device belongs.', example='MyProduct'),
      progress?: string(name='Progress', description='The current update progress.', example='0.00'),
      srcVersion?: string(name='SrcVersion', description='The firmware version before the update.', example='1.0.0'),
      taskDesc?: string(name='TaskDesc', description='The description of the update task. This parameter displays an error message if the device update times out or the update task is canceled.', example='report version is not conform'),
      taskId?: string(name='TaskId', description='The ID of the update task.', example='y3tOmCDNgpR8F9jnVEzC01****'),
      taskStatus?: string(name='TaskStatus', description='The update status of the device.

*   **CONFIRM**: The update task is pending confirmation.
*   **QUEUED**: The update notification is to be pushed.
*   **NOTIFIED**: The update notification is pushed to the device.
*   **IN_PROGRESS**: The update task is in progress.
*   **SUCCEEDED**: The update is successful.
*   **FAILED**: The update failed.
*   **CANCELED**: The update batch is canceled.', example='FAILED'),
      timeout?: string(name='Timeout', description='The timeout period of the device update. Unit: minutes.

>  If no timeout period is specified for the update batch, the return value is null.', example='1440'),
      utcCreate?: string(name='UtcCreate', description='The time when the update task was created. The time is displayed in UTC.', example='2019-11-04T03:38:22.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the update task was last modified. The time is displayed in UTC.', example='2019-11-04T03:38:22.000Z'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data', description='The update task information returned if the call is successful. For more information, see **SimpleOTATaskInfo**.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of update tasks.', example='2'),
}

model ListOTATaskByJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTATaskByJobResponseBody(name='body'),
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request ListOTATaskByJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListOTATaskByJobResponse
 */
async function listOTATaskByJobWithOptions(request: ListOTATaskByJobRequest, runtime: Util.RuntimeOptions): ListOTATaskByJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceNames)) {
    query['DeviceNames'] = request.deviceNames;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTATaskByJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS).
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request ListOTATaskByJobRequest
  * @return ListOTATaskByJobResponse
 */
async function listOTATaskByJob(request: ListOTATaskByJobRequest): ListOTATaskByJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTATaskByJobWithOptions(request, runtime);
}

model ListOTAUnfinishedTaskByDeviceRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

> If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device.

> If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='TfmUAeJjQQhCPH84UVNn0010c6****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-c3j***'),
  moduleName?: string(name='ModuleName', description='The name of the OTA module.

*   If you specify this parameter, update tasks of the specified module are queried.
*   If you do not specify this parameter, update tasks of all modules are queried.', example='WifiConfigModify'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

> If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a19mzPZ****'),
  taskStatus?: string(name='TaskStatus', description='The status of the update task.

*   **CONFIRM**: The update task is pending confirmation.
*   **QUEUED**: The update notification is to be pushed.
*   **NOTIFIED**: The update notification is pushed to the device.
*   **IN_PROGRESS**: The update task is in progress.', example='CONFIRM'),
}

model ListOTAUnfinishedTaskByDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    simpleOTATaskInfo?: [ 
    {
      destVersion?: string(name='DestVersion', description='The firmware version after the update.', example='1.0.1'),
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
      firmwareId?: string(name='FirmwareId', description='The ID of the update package.', example='q3j9OYBjUAZMv1hlMgdo03****'),
      iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.', example='nadRdeffljdEndlfadgadfse****'),
      jobId?: string(name='JobId', description='The ID of the update batch.', example='7glPHmaDYLAYMD1HHutT02****'),
      moduleName?: string(name='ModuleName', description='The name of the OTA module.', example='WifiConfigModify'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1GUfrM****'),
      productName?: string(name='ProductName', description='The name of the product to which the device belongs.', example='MyProduct'),
      srcVersion?: string(name='SrcVersion', description='The firmware version before the update.', example='1.0.0'),
      taskId?: string(name='TaskId', description='The ID of the update task.', example='y3tOmCDNgpR8F9jnVEzC01****'),
      taskStatus?: string(name='TaskStatus', description='The status of the update task.

*   **CONFIRM**: The update task is pending confirmation.
*   **QUEUED**: The update notification is to be pushed.
*   **NOTIFIED**: The update notification is pushed to the device.
*   **IN_PROGRESS**: The update task is in progress.', example='CONFIRM'),
      utcCreate?: string(name='UtcCreate', description='The time when the update task was created. The time is displayed in UTC.', example='2019-11-04T03:38:22.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the update task was last modified. The time is displayed in UTC.', example='2021-11-04T03:38:22.000Z'),
    }
  ](name='SimpleOTATaskInfo')
  }(name='Data', description='The update task information returned if the call is successful. For more information, see the following **SimpleOTATaskInfo**.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A59D3BE1-E9A3-43F3-9B50-B7C8DE165D9B'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListOTAUnfinishedTaskByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOTAUnfinishedTaskByDeviceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAUnfinishedTaskByDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListOTAUnfinishedTaskByDeviceResponse
 */
async function listOTAUnfinishedTaskByDeviceWithOptions(request: ListOTAUnfinishedTaskByDeviceRequest, runtime: Util.RuntimeOptions): ListOTAUnfinishedTaskByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOTAUnfinishedTaskByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListOTAUnfinishedTaskByDeviceRequest
  * @return ListOTAUnfinishedTaskByDeviceResponse
 */
async function listOTAUnfinishedTaskByDevice(request: ListOTAUnfinishedTaskByDeviceRequest): ListOTAUnfinishedTaskByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOTAUnfinishedTaskByDeviceWithOptions(request, runtime);
}

model ListParserRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t****'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='DataParser'),
}

model ListParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    parserList?: [ 
    {
      description?: string(name='Description'),
      name?: string(name='Name', example='DataParser'),
      parserId?: long(name='ParserId', example='1001'),
      status?: string(name='Status', example='STOP'),
      utcCreated?: string(name='UtcCreated', example='2022-03-21T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2022-03-25T12:45:43.000Z'),
    }
  ](name='ParserList')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParserResponseBody(name='body'),
}

async function listParserWithOptions(request: ListParserRequest, runtime: Util.RuntimeOptions): ListParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listParser(request: ListParserRequest): ListParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listParserWithOptions(request, runtime);
}

model ListParserDataSourceRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  searchName?: string(name='SearchName', example='DataSource'),
}

model ListParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    dataSource?: [ 
    {
      dataSourceId?: long(name='DataSourceId', example='1001'),
      description?: string(name='Description'),
      name?: string(name='Name', example='DataSource'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
    }
  ](name='DataSource')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='100'),
}

model ListParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParserDataSourceResponseBody(name='body'),
}

async function listParserDataSourceWithOptions(request: ListParserDataSourceRequest, runtime: Util.RuntimeOptions): ListParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.searchName)) {
    query['SearchName'] = request.searchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listParserDataSource(request: ListParserDataSourceRequest): ListParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listParserDataSourceWithOptions(request, runtime);
}

model ListParserDestinationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  isFailover?: boolean(name='IsFailover', example='false'),
  parserId?: long(name='ParserId', example='1002'),
}

model ListParserDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    destinations?: [ 
    {
      configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
      destinationId?: long(name='DestinationId', example='1003'),
      isFailover?: boolean(name='IsFailover', example='false'),
      name?: string(name='Name', example='DataPurpose'),
      type?: string(name='Type', example='REPUBLISH'),
      utcCreated?: string(name='UtcCreated', example='2022-03-27T12:45:43.000Z'),
      utcModified?: string(name='UtcModified', example='2022-05-27T12:45:43.000Z'),
    }
  ](name='destinations')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model ListParserDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListParserDestinationResponseBody(name='body'),
}

async function listParserDestinationWithOptions(request: ListParserDestinationRequest, runtime: Util.RuntimeOptions): ListParserDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isFailover)) {
    query['IsFailover'] = request.isFailover;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListParserDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listParserDestination(request: ListParserDestinationRequest): ListParserDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listParserDestinationWithOptions(request, runtime);
}

model ListProductByTagsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.



>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64***'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.', example='10'),
  productTag?: [ 
    {
      tagKey?: string(name='TagKey', description='The keys of the product tags.', example='room'),
      tagValue?: string(name='TagValue', description='The values of the product tags.', example='102'),
    }
  ](name='ProductTag'),
}

model ListProductByTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  productInfos?: {
    productInfo?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the product was created.', example='1545355537000'),
      description?: string(name='Description', description='The description of the product.', example='This is a test product.'),
      nodeType?: int32(name='NodeType', description='The node type of the product. Valid values:

*   **0**: device. Sub-devices cannot be attached to a device. A device can connect to IoT Platform directly or as a sub-device of a gateway.
*   **1**: gateway. Sub-devices can be attached to a gateway. A gateway can manage sub-devices, maintain the topological relationships with sub-devices, and synchronize the topological relationships to IoT Platform.', example='0'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a globally unique identifier (GUID) issued by IoT Platform to a new product.', example='a1BwAGV****'),
      productName?: string(name='ProductName', description='The name of the product.'),
    }
  ](name='ProductInfo')
  }(name='ProductInfos', description='The details of the products returned if the call is successful. The details are included in the **ProductInfo** parameter.

>  The returned product information is sorted in reverse-chronological order based on the time when the products were created.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListProductByTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductByTagsResponseBody(name='body'),
}

/**
  * ## Limits
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  * *   You can specify a tag key or a tag key-value pair for search.
  * *   If you specify multiple tags, the logical relationship among these tags is **OR**.
  *
  * @param request ListProductByTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProductByTagsResponse
 */
async function listProductByTagsWithOptions(request: ListProductByTagsRequest, runtime: Util.RuntimeOptions): ListProductByTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productTag)) {
    query['ProductTag'] = request.productTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductByTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  * *   You can specify a tag key or a tag key-value pair for search.
  * *   If you specify multiple tags, the logical relationship among these tags is **OR**.
  *
  * @param request ListProductByTagsRequest
  * @return ListProductByTagsResponse
 */
async function listProductByTags(request: ListProductByTagsRequest): ListProductByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductByTagsWithOptions(request, runtime);
}

model ListProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64***'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a GUID that is issued by IoT Platform to a product. You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
}

model ListProductTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of each tag.', example='room'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='102'),
    }
  ](name='ProductTag')
  }(name='Data', description='The product tags returned if the call succeeds. For more information, see the parameters that are included in the **ProductTag** parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductTagsResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListProductTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProductTagsResponse
 */
async function listProductTagsWithOptions(request: ListProductTagsRequest, runtime: Util.RuntimeOptions): ListProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListProductTagsRequest
  * @return ListProductTagsResponse
 */
async function listProductTags(request: ListProductTagsRequest): ListProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductTagsWithOptions(request, runtime);
}

model ListRuleRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Maximum value: 1000. Default value: 1.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.****

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.', example='2'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the rule belongs. You can log on to the [Resource Management](https://resourcemanager.console.aliyun.com/resource-groups) console to view the details of the resource group.

>You can configure this parameter only if you have activated Resource Management.

If you do not configure this parameter, all rules of the Alibaba Cloud account are queried.', example='rg-acfmxazb4ph****'),
}

model ListRuleResponseBody = {
  code?: string(name='Code', description='The error code that is returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    ruleInfo?: [ 
    {
      createUserId?: long(name='CreateUserId', description='The ID of the user who created the rule.', example='1231579085000000'),
      created?: string(name='Created', description='The time when the rule was created. The time is displayed in UTC-6.', example='Wed Feb 27 20:45:43 CST 2019'),
      dataType?: string(name='DataType', description='The data type of the rule. Valid values: **JSON** and **BINARY**.', example='JSON'),
      id?: long(name='Id', description='The ID of the rule.', example='151454'),
      modified?: string(name='Modified', description='The time when the rule was last modified. The time is displayed in UTC-6.', example='Wed Feb 27 20:45:43 CST 2019'),
      name?: string(name='Name', description='The name of the rule.', example='test123'),
      productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the rule applies.', example='a1KiV******'),
      ruleDesc?: string(name='RuleDesc', description='The description of the rule.', example='rule1Desc'),
      select?: string(name='Select', description='The content that follows the **Select** keyword in the SQL statement of the rule.', example='deviceName() as deviceName'),
      shortTopic?: string(name='ShortTopic', description='The topic to which the rule applies. The topic does not include the ProductKey level. Format: `${deviceName}/topicShortName`. ${deviceName} indicates the name of the device, and topicShortName indicates the custom name of the topic.

>  For information about how to use a plus sign (`+`) or a number sign (`#`) as a wildcard character in a topic, see [Topic wildcards](~~73731~~).', example='+/thing/event/property/post'),
      status?: string(name='Status', description='The status of the rule. Valid values:

*   **RUNNING**: The rule is running.
*   **STOP**: The rule is disabled.', example='STOP'),
      topic?: string(name='Topic', description='The topic to which the rule applies. Format: `${productKey}/${deviceName}/topicShortName`.

>  For information about how to use a plus sign (`+`) or a number sign (`#`) as a wildcard character in a topic, see [Topic wildcards](~~73731~~).', example='/a1T27vz****/+/thing/event/property/post'),
      utcCreated?: string(name='UtcCreated', description='The time when the device was created. The time is displayed in UTC.', example='2019-02-27T12:40:43.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the rule was last modified.', example='2019-02-27T12:45:43.000Z'),
      where?: string(name='Where', description='The **Where** query condition in the SQL statement of the rule.', example='Temperature>35'),
    }
  ](name='RuleInfo')
  }(name='Data', description='The rules returned if the call is successful. For more information, see the "**RuleInfo**" section of this topic.

>  The returned rules are sorted in reverse-chronological order based on the time when the rules were created.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call fails.'),
  page?: int32(name='Page', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1564B626-DE97-452D-9E9B-305888AC6105'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of pages returned.', example='25'),
}

model ListRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleResponseBody(name='body'),
}

/**
  * ## QPS limits
  * You can call this API operation up to 20 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRuleResponse
 */
async function listRuleWithOptions(request: ListRuleRequest, runtime: Util.RuntimeOptions): ListRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * You can call this API operation up to 20 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListRuleRequest
  * @return ListRuleResponse
 */
async function listRule(request: ListRuleRequest): ListRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleWithOptions(request, runtime);
}

model ListRuleActionsRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. On the **Overview** page in the IoT Platform console, you can view the **ID** of the instance.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If the **Overview** page or instance ID is not displayed in the IoT Platform console, you do not need to configure this parameter.

For more information about the instance, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', description='The ID of the rule.

You can log on to the IoT Platform console and go to the details page of the instance that you want to manage. On the instance details page, choose **Rules Engine** > **Data Forwarding** to obtain the rule ID. Alternatively, you can call the [ListRule](~~69486~~) operation to view the value of the **Id** parameter in the response.', example='10000'),
}

model ListRuleActionsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information about error codes, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='22254BDB-3DC1-4643-8D1B-EE0437EF09A9'),
  ruleActionList?: {
    ruleActionInfo?: [ 
    {
      configuration?: string(name='Configuration', description='The configurations of the data destination.', example='{\\"endPoint\\":\\"http://ShanghaiRegion.cn-shanghai.ots.aliyuncs.com\\",\\"instanceName\\":\\"ShanghaiRegion\\",\\"primaryKeys\\":[{\\"columnName\\":\\"temperature\\",\\"columnType\\":\\"INTEGER\\",\\"columnValue\\":\\"${deviceName}\\"}],\\"regionName\\":\\"cn-shanghai\\",\\"role\\":{\\"roleArn\\":\\"acs:ram::1231579085******:role/aliyuniotaccessingotsrole\\",\\"roleName\\":\\"AliyunIOTAccessingOTSRole\\"},\\"tableName\\":\\"iottest\\",\\"uid\\":\\"1231579085******\\"}'),
      errorActionFlag?: boolean(name='ErrorActionFlag', description='Indicates whether the data destination is used to receive the error operation data. The error operation data is data that failed to be forwarded two consecutive times.

*   **true**: This destination is used to receive error operation data.
*   **false**: This destination is not used to receive error operation data.', example='false'),
      id?: long(name='Id', description='The ID of the action in which data is forwarded to the destination.', example='139099'),
      ruleId?: long(name='RuleId', description='The ID of the rule based on which data is forwarded to the destination.', example='10000'),
      status?: string(name='Status', description='The status of the data forwarding action. Valid values:

*   **INIT**: The action is being configured.
*   **NORMAL**: The configuration is complete, and the action can run properly.
*   **INVALID**: The configuration data is invalid, and the action fails to run.
*   **SHORTCUT**: An exception occurs and the data forwarding action is stopped.', example='NORMAL'),
      type?: string(name='Type', description='The type of the action in which data is forwarded to a destination. Valid values:

*   **REPUBLISH**: Data is forwarded to a topic.
*   **OTS**: Data is stored in Tablestore.
*   **MNS**: Data is forwarded to Message Service (MNS).
*   **ONS**: Data is forwarded to Message Queue for Apache RocketMQ.
*   **TSDB**: Data is stored in Time Series Database.
*   **FC**: Data is forwarded to Function Compute.
*   **RDS**: Data is forwarded to ApsaraDB RDS.
*   **AMQP**: Data is forwarded to an Advanced Message Queuing Protocol (AMQP) consumer group.', example='OTS'),
    }
  ](name='RuleActionInfo')
  }(name='RuleActionList', description='If the call is successful, all configured data forwarding actions of the specified rule are returned. For more information about the returned data, see the following **RuleActionInfo** parameter.'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. 

- **true**: The call was successful.
- **false**: The call failed.', example='true'),
}

model ListRuleActionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRuleActionsResponseBody(name='body'),
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListRuleActionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRuleActionsResponse
 */
async function listRuleActionsWithOptions(request: ListRuleActionsRequest, runtime: Util.RuntimeOptions): ListRuleActionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRuleActions',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListRuleActionsRequest
  * @return ListRuleActionsResponse
 */
async function listRuleActions(request: ListRuleActionsRequest): ListRuleActionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleActionsWithOptions(request, runtime);
}

model ListTaskRequest {
  device?: map[string]any(name='Device', example='{}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='sGWotgRk***010001'),
  limit?: int32(name='Limit', example='10'),
  nextToken?: string(name='NextToken', example='22dhgg***'),
  status?: string(name='Status', example='QUEUED'),
}

model ListTaskShrinkRequest {
  deviceShrink?: string(name='Device', example='{}'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='sGWotgRk***010001'),
  limit?: int32(name='Limit', example='10'),
  nextToken?: string(name='NextToken', example='22dhgg***'),
  status?: string(name='Status', example='QUEUED'),
}

model ListTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    data?: [ 
    {
      deviceName?: string(name='DeviceName', example='mydevice'),
      iotId?: string(name='IotId', example='BDjhIC***i000101'),
      jobId?: string(name='JobId', example='sGWotg***010001'),
      jobName?: string(name='JobName', example='MyTestJobIax6Eq'),
      productKey?: string(name='ProductKey', example='a1S0OM***'),
      progress?: string(name='Progress', example='80'),
      status?: string(name='Status', example='SUCCEEDED'),
      taskId?: string(name='TaskId', example='MSnT9wl***q010101'),
      utcModified?: string(name='UtcModified', example='2019-05-21T13:03:56.000Z'),
      utcQueueTime?: string(name='UtcQueueTime', example='2019-05-21T13:03:53.000Z'),
    }
  ](name='data')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='223sdf***'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model ListTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTaskResponseBody(name='body'),
}

async function listTaskWithOptions(tmpReq: ListTaskRequest, runtime: Util.RuntimeOptions): ListTaskResponse {
  Util.validateModel(tmpReq);
  var request = new ListTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.device)) {
    request.deviceShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.device, 'Device', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.deviceShrink)) {
    query['Device'] = request.deviceShrink;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTask(request: ListTaskRequest): ListTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTaskWithOptions(request, runtime);
}

model ListThingModelVersionRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwAGV****'),
}

model ListThingModelVersionResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    modelVersions?: [ 
      {
        description?: string(name='Description', description='The description of the TSL model version.'),
        gmtCreate?: long(name='GmtCreate', description='The timestamp when the TSL model version was published. The time is displayed in UTC. Unit: milliseconds.', example='1579235657535'),
        modelVersion?: string(name='ModelVersion', description='The version number of the TSL model.', example='V1.0.0'),
      }
    ](name='ModelVersions', description='The list of TSL model versions. The versions are displayed in descending order based on the release time. The first version is the current version.'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListThingModelVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListThingModelVersionResponseBody(name='body'),
}

/**
  * You can manage TSL models by version. After you import a TSL model by calling the [ImportThingModelTsl](~~150320~~) operation, copy a TSL model by calling the [CopyThingModel](~~150322~~) operation, or edit a TSL model, you must publish the TSL model by calling the [PublishThingModel](~~150311~~) operation. Then, the TSL model can be used. Each time a TSL model of a product is published, a new version is generated.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListThingModelVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListThingModelVersionResponse
 */
async function listThingModelVersionWithOptions(request: ListThingModelVersionRequest, runtime: Util.RuntimeOptions): ListThingModelVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListThingModelVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can manage TSL models by version. After you import a TSL model by calling the [ImportThingModelTsl](~~150320~~) operation, copy a TSL model by calling the [CopyThingModel](~~150322~~) operation, or edit a TSL model, you must publish the TSL model by calling the [PublishThingModel](~~150311~~) operation. Then, the TSL model can be used. Each time a TSL model of a product is published, a new version is generated.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListThingModelVersionRequest
  * @return ListThingModelVersionResponse
 */
async function listThingModelVersion(request: ListThingModelVersionRequest): ListThingModelVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listThingModelVersionWithOptions(request, runtime);
}

model ListThingTemplatesRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model ListThingTemplatesResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: [ 
    {
      categoryKey?: string(name='CategoryKey', description='The identifier of the category.', example='lighting'),
      categoryName?: string(name='CategoryName', description='The name of the category.'),
    }
  ](name='Data', description='The list of standard categories returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ListThingTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListThingTemplatesResponseBody(name='body'),
}

/**
  * IoT Platform provides product categories that have defined TSL models, such as street lamps, vehicle location cards, and water immersion detectors.
  * When you call the [CreateProduct](~~69123~~) operation to create a product, you can set the CategoryKey parameter to specify a product category. The product that you create references the standardized TSL model of the specified category.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListThingTemplatesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListThingTemplatesResponse
 */
async function listThingTemplatesWithOptions(request: ListThingTemplatesRequest, runtime: Util.RuntimeOptions): ListThingTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListThingTemplates',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * IoT Platform provides product categories that have defined TSL models, such as street lamps, vehicle location cards, and water immersion detectors.
  * When you call the [CreateProduct](~~69123~~) operation to create a product, you can set the CategoryKey parameter to specify a product category. The product that you create references the standardized TSL model of the specified category.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ListThingTemplatesRequest
  * @return ListThingTemplatesResponse
 */
async function listThingTemplates(request: ListThingTemplatesRequest): ListThingTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listThingTemplatesWithOptions(request, runtime);
}

model NotifyAddThingTopoRequest {
  deviceListStr?: string(name='DeviceListStr', description='A JSON array of the sub-device identity information. You can use a combination of **ProductKey** and **DeviceName** or only **IotId** to specify a device, such as **\\[{"productKey":"a1BwAGxxx","deviceName":"device1"},{"IotId":"Q7uOhxxx"}]**.', example='[{"productKey":"a1BwAGV****","deviceName":"device1"},{"IotId":"Q7uOhVRdZRRlDnTLv****00100"}]'),
  gwDeviceName?: string(name='GwDeviceName', description='The DeviceName of the gateway.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='gateway'),
  gwIotId?: string(name='GwIotId', description='The ID of the gateway device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='vWxNur6BUApsqjv****4000100'),
  gwProductKey?: string(name='GwProductKey', description='The ProductKey of the product to which the gateway belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1T27vz****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model NotifyAddThingTopoResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the message that IoT Platform sends to the gateway. The message is used to notify the gateway to add a topology.', example='5443123'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model NotifyAddThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: NotifyAddThingTopoResponseBody(name='body'),
}

/**
  * A successful response indicates that the command to add topological relationships is sent to the gateway. It does not indicate that the topological relationships are added.
  * When you develop the gateway, you must subscribe to the topic that is used to send notifications when you add topological relationships. For more information about the topic and message format, see [Manage topological relationships](~~89299~~).
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request NotifyAddThingTopoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return NotifyAddThingTopoResponse
 */
async function notifyAddThingTopoWithOptions(request: NotifyAddThingTopoRequest, runtime: Util.RuntimeOptions): NotifyAddThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceListStr)) {
    query['DeviceListStr'] = request.deviceListStr;
  }
  if (!Util.isUnset(request.gwDeviceName)) {
    query['GwDeviceName'] = request.gwDeviceName;
  }
  if (!Util.isUnset(request.gwIotId)) {
    query['GwIotId'] = request.gwIotId;
  }
  if (!Util.isUnset(request.gwProductKey)) {
    query['GwProductKey'] = request.gwProductKey;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'NotifyAddThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A successful response indicates that the command to add topological relationships is sent to the gateway. It does not indicate that the topological relationships are added.
  * When you develop the gateway, you must subscribe to the topic that is used to send notifications when you add topological relationships. For more information about the topic and message format, see [Manage topological relationships](~~89299~~).
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request NotifyAddThingTopoRequest
  * @return NotifyAddThingTopoResponse
 */
async function notifyAddThingTopo(request: NotifyAddThingTopoRequest): NotifyAddThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return notifyAddThingTopoWithOptions(request, runtime);
}

model OpenIotServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenIotServiceResponseBody = {
  orderId?: string(name='OrderId', example='20671870***'),
  requestId?: string(name='RequestId', example='427DB0B3-9436-4A3C-B2BC-B961F95E9488'),
}

model OpenIotServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OpenIotServiceResponseBody(name='body'),
}

async function openIotServiceWithOptions(request: OpenIotServiceRequest, runtime: Util.RuntimeOptions): OpenIotServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenIotService',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openIotService(request: OpenIotServiceRequest): OpenIotServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openIotServiceWithOptions(request, runtime);
}

model PackageSoundCodeLabelBatchAudioRequest {
  batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model PackageSoundCodeLabelBatchAudioResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: string(name='Data', example='http://****.oss-cn-shanghai.aliyuncs.com/speech_test_audio/CPjUL8qUtOMoQmC******.wav?Expires=1620380723'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PackageSoundCodeLabelBatchAudioResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PackageSoundCodeLabelBatchAudioResponseBody(name='body'),
}

async function packageSoundCodeLabelBatchAudioWithOptions(request: PackageSoundCodeLabelBatchAudioRequest, runtime: Util.RuntimeOptions): PackageSoundCodeLabelBatchAudioResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchCode)) {
    body['BatchCode'] = request.batchCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PackageSoundCodeLabelBatchAudio',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function packageSoundCodeLabelBatchAudio(request: PackageSoundCodeLabelBatchAudioRequest): PackageSoundCodeLabelBatchAudioResponse {
  var runtime = new Util.RuntimeOptions{};
  return packageSoundCodeLabelBatchAudioWithOptions(request, runtime);
}

model PageQuerySharedSpeechOpenRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='sd34****'),
  shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
  status?: int32(name='Status', example='1'),
}

model PageQuerySharedSpeechOpenResponseBody = {
  code?: string(name='Code', example='String	iot.system.SystemException'),
  data?: {
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    resultData?: {
      data?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='identifying'),
        code?: string(name='Code', example='ws****'),
        speechRate?: int32(name='SpeechRate', example='50'),
        status?: int32(name='Status', example='1'),
        text?: string(name='Text', example='test'),
        voice?: string(name='Voice', example='Siyue'),
        volume?: int32(name='Volume', example='50'),
      }
    ](name='Data')
    }(name='ResultData'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model PageQuerySharedSpeechOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageQuerySharedSpeechOpenResponseBody(name='body'),
}

async function pageQuerySharedSpeechOpenWithOptions(request: PageQuerySharedSpeechOpenRequest, runtime: Util.RuntimeOptions): PageQuerySharedSpeechOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.shareTaskCode)) {
    body['ShareTaskCode'] = request.shareTaskCode;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageQuerySharedSpeechOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageQuerySharedSpeechOpen(request: PageQuerySharedSpeechOpenRequest): PageQuerySharedSpeechOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageQuerySharedSpeechOpenWithOptions(request, runtime);
}

model PageQuerySpeechBroadcastHourRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  pageSize?: int32(name='PageSize', example='10'),
  pageToken?: string(name='PageToken', example='TGlzdFJlc291cm****'),
  queryDateTimeHour?: string(name='QueryDateTimeHour', example='2020090919'),
  shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
}

model PageQuerySpeechBroadcastHourResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    pageToken?: string(name='PageToken', example='TGlzdFJlc291cm****'),
    resultData?: {
      data?: [ 
      {
        code?: int32(name='Code', example='0'),
        deviceName?: string(name='DeviceName', example='device1'),
        msg?: string(name='Msg'),
        productKey?: string(name='ProductKey', example='sd34****'),
        shareTaskCode?: string(name='ShareTaskCode', example='ebed9280_ba25_48df_80c2_****'),
        speechId?: string(name='SpeechId', example='42000011392021112380****'),
        speechs?: string(name='Speechs', example='["ANC","CDF"]'),
        startTime?: long(name='StartTime', example='1663210172207'),
      }
    ](name='Data')
    }(name='ResultData'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model PageQuerySpeechBroadcastHourResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageQuerySpeechBroadcastHourResponseBody(name='body'),
}

async function pageQuerySpeechBroadcastHourWithOptions(request: PageQuerySpeechBroadcastHourRequest, runtime: Util.RuntimeOptions): PageQuerySpeechBroadcastHourResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.queryDateTimeHour)) {
    query['QueryDateTimeHour'] = request.queryDateTimeHour;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.pageToken)) {
    body['PageToken'] = request.pageToken;
  }
  if (!Util.isUnset(request.shareTaskCode)) {
    body['ShareTaskCode'] = request.shareTaskCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageQuerySpeechBroadcastHour',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageQuerySpeechBroadcastHour(request: PageQuerySpeechBroadcastHourRequest): PageQuerySpeechBroadcastHourResponse {
  var runtime = new Util.RuntimeOptions{};
  return pageQuerySpeechBroadcastHourWithOptions(request, runtime);
}

model PrintByTemplateRequest {
  deviceName?: string(name='DeviceName', example='light'),
  historyPrintTopic?: boolean(name='HistoryPrintTopic', example='true'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  paramsJsonString?: string(name='ParamsJsonString'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  templateBizCode?: string(name='TemplateBizCode', example='test'),
}

model PrintByTemplateResponseBody = {
  code?: string(name='Code', example='iot.printservice.NotSigned'),
  data?: {
    deviceErrorCode?: string(name='DeviceErrorCode', example='2'),
    deviceErrorMessage?: string(name='DeviceErrorMessage', example='no paper'),
    id?: string(name='Id', example='NyWh5lw3*****RfL9LJUivhOhQV*****'),
    maxRetryCount?: int32(name='MaxRetryCount', example='2'),
    retryCount?: int32(name='RetryCount', example='0'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='print service not open'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PrintByTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PrintByTemplateResponseBody(name='body'),
}

async function printByTemplateWithOptions(request: PrintByTemplateRequest, runtime: Util.RuntimeOptions): PrintByTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.historyPrintTopic)) {
    body['HistoryPrintTopic'] = request.historyPrintTopic;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.paramsJsonString)) {
    body['ParamsJsonString'] = request.paramsJsonString;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.templateBizCode)) {
    body['TemplateBizCode'] = request.templateBizCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PrintByTemplate',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function printByTemplate(request: PrintByTemplateRequest): PrintByTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return printByTemplateWithOptions(request, runtime);
}

model PubRequest {
  contentType?: string(name='ContentType', description='The content type of the message when you use MQTT 5.0 for communication.

The content type is usually MIME, such as text or plain********.', example='text'),
  correlationData?: string(name='CorrelationData', description='The related data in the request/response communication mode when you use MQTT 5.0. You can specify this parameter as needed.

A message recipient can process the request based on the data.

>  You must convert the related data into binary data and perform Base64 encoding to generate a value of the string type.', example='aGVsbG8****'),
  deviceName?: string(name='DeviceName', description='The name of the MQTT cloud gateway.

>When you publish a message to an MQTT cloud gateway, you must specify this parameter.', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can obtain the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify this parameter. Otherwise, the call fails.
>*   If the **Overview** page or the instance ID is not displayed in the IoT Platform console, ignore this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  messageContent?: string(name='MessageContent', description='The body of the message that you want to publish.

To generate a message body, you must convert the raw message into binary data and perform Base64 encoding.', example='eyJ0ZXN0IjoidGFzayBwdWIgYnJvYWRjYXN0In0='),
  messageExpiryInterval?: long(name='MessageExpiryInterval'),
  payloadFormatIndicator?: int32(name='PayloadFormatIndicator', description='The payload identifier of the message when you use MQTT 5.0 for communication. Valid values:

*   **0**: The message is unknown byte data.
*   **1**: The payload of the message is UTF-8 encoded character data.', example='1'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device that receives the message belongs.', example='a1Q5XoY****'),
  qos?: int32(name='Qos', description='The quality of service (QoS) level of the message. Valid values:

*   **0**: The message is published at most once.
*   **1**: The message is published at least once. If a PUBACK response is not returned after you publish a QoS 1 message, the message is pushed to the device again when the device reconnects to IoT Platform.

Default value: **0**.

For more information about message communication, see [Limits](~~30527~~).', example='0'),
  responseTopic?: string(name='ResponseTopic', description='The response topic in the request/response communication mode when you use MQTT 5.0. For more information, see [MQTT 5.0](~~30540~~).', example='/a1Q5XoY****/device1/user/update'),
  retained?: boolean(name='Retained'),
  topicFullName?: string(name='TopicFullName', description='The custom topic for the device that receives the message.

*   Topic format: `/${productKey}/${deviceName}/user/${TopicShortName}`.
*   You must specify the **Subscribe** permission, or **Publish and Subscribe** permissions for the topic.

> Make sure that the device subscribes to the topic before you call the Pub operation. Otherwise, the device cannot receive the message.

You can view the custom topics of a product on the **Topic Categories** tab of the **Product Details** page, or by calling the [QueryProductTopic](~~69647~~) operation. You can view the topics to which the device subscribes on the **Topic List** tab of the **Device Details** page.', example='/a1Q5XoY****/device1/user/get'),
  userProp?: [ 
    {
      key?: string(name='Key', description='The custom property key that is specified when you use MQTT 5.0 for communication.

This parameter must be used together with the **UserProp.N.Value** parameter.', example='key1'),
      value?: string(name='Value', description='The custom property value that is specified when you use MQTT 5.0 for communication.

This parameter must be used together with the **UserProp.N.Key** parameter.', example='value1'),
    }
  ](name='UserProp'),
}

model PubResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  messageId?: string(name='MessageId', description='The message ID that is generated by IoT Platform when the message is sent.', example='889455942124347329'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model PubResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PubResponseBody(name='body'),
}

/**
  * This operation does not support device property settings and service invocations.
  * *   To set properties, call the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation.
  * *   To invoke a service, call the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
  * ## QPS limit
  * You can call this API operation up to 1,600 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request PubRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PubResponse
 */
async function pubWithOptions(request: PubRequest, runtime: Util.RuntimeOptions): PubResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.correlationData)) {
    query['CorrelationData'] = request.correlationData;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.messageExpiryInterval)) {
    query['MessageExpiryInterval'] = request.messageExpiryInterval;
  }
  if (!Util.isUnset(request.payloadFormatIndicator)) {
    query['PayloadFormatIndicator'] = request.payloadFormatIndicator;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.qos)) {
    query['Qos'] = request.qos;
  }
  if (!Util.isUnset(request.responseTopic)) {
    query['ResponseTopic'] = request.responseTopic;
  }
  if (!Util.isUnset(request.retained)) {
    query['Retained'] = request.retained;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  if (!Util.isUnset(request.userProp)) {
    query['UserProp'] = request.userProp;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.messageContent)) {
    body['MessageContent'] = request.messageContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Pub',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation does not support device property settings and service invocations.
  * *   To set properties, call the [SetDeviceProperty](~~69579~~) or [SetDevicesProperty](~~96243~~) operation.
  * *   To invoke a service, call the [InvokeThingService](~~69584~~) or [InvokeThingsService](~~96242~~) operation.
  * ## QPS limit
  * You can call this API operation up to 1,600 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request PubRequest
  * @return PubResponse
 */
async function pub(request: PubRequest): PubResponse {
  var runtime = new Util.RuntimeOptions{};
  return pubWithOptions(request, runtime);
}

model PubBroadcastRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify this parameter. Otherwise, the call fails.
>*   If the **Overview** page or an instance ID is not displayed in the IoT Platform console, ignore this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  messageContent?: string(name='MessageContent', description='The message body that you want to send. The maximum size of a message is 64 KB.

To generate a message body, you must convert the raw message into binary data and perform Base64 encoding.', example='aGVsbG93b3JsZA'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the devices belong.

A **ProductKey** is the unique identifier of a product in IoT Platform. You can view the information about all products within the current Alibaba Cloud account in the IoT Platform console or by calling the [QueryProductList](~~69271~~) operation.', example='aldeji3*****'),
  topicFullName?: string(name='TopicFullName', description='The name of the topic. This parameter is optional.

*   If you do not specify this parameter, the message is pushed to all online devices that have the specified **ProductKey**. Devices receive the message from the broadcast topic in the following format: `/sys/${productKey}/${deviceName}/broadcast/request/${MessageId}`. The **MessageId** variable is generated by IoT Platform.
*   If you specify this parameter, the message is pushed to the devices that have the specified **ProductKey** and subscribe to the specified topic. You must specify a broadcast topic by using the following syntax: `/broadcast/${productKey}/Custom field`. Replace **${productKey}** with the **ProductKey** of the devices that receive the message. For the custom field, you can specify a value based on your business requirements.

> *   When you develop devices, you need to only write code to define a broadcast topic. You do not need to create a topic in the IoT Platform console.
>*   A maximum of 1,000 devices can subscribe to a broadcast topic. If the number of devices exceeds the limit, you can divide the devices into groups. For example, you can divide 5,000 devices into five groups that contain 1,000 devices. In this case, you must call this operation five times and set the value of the custom field to group1, group2, group3, group4, and group5. Then, configure the devices. This way, each group of devices subscribes to the corresponding topic.', example='/broadcast/UPqSxj2vXXX/xxx'),
}

model PubBroadcastResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  messageId?: long(name='MessageId', description='The message ID that is generated by IoT Platform when the message is sent.', example='1234291569964771840'),
  requestId?: string(name='RequestId', description='The ID of the request. The ID is a unique identifier of the request.', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model PubBroadcastResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PubBroadcastResponseBody(name='body'),
}

/**
  * You can use the **TopicFullName** parameter in the **request** to specify the devices to which you want to broadcast messages. For more information, see the description about the **TopicFullName** parameter in this topic.
  * ## QPS limits
  * - Each Alibaba Cloud account can run only one query per second (QPS) to broadcast a message to devices that subscribe to a topic.
  * - Each Alibaba Cloud account can run only one query per minute (QPM) to broadcast a message to all online devices of a product.      >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request PubBroadcastRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PubBroadcastResponse
 */
async function pubBroadcastWithOptions(request: PubBroadcastRequest, runtime: Util.RuntimeOptions): PubBroadcastResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.messageContent)) {
    query['MessageContent'] = request.messageContent;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PubBroadcast',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use the **TopicFullName** parameter in the **request** to specify the devices to which you want to broadcast messages. For more information, see the description about the **TopicFullName** parameter in this topic.
  * ## QPS limits
  * - Each Alibaba Cloud account can run only one query per second (QPS) to broadcast a message to devices that subscribe to a topic.
  * - Each Alibaba Cloud account can run only one query per minute (QPM) to broadcast a message to all online devices of a product.      >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request PubBroadcastRequest
  * @return PubBroadcastResponse
 */
async function pubBroadcast(request: PubBroadcastRequest): PubBroadcastResponse {
  var runtime = new Util.RuntimeOptions{};
  return pubBroadcastWithOptions(request, runtime);
}

model PublishScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model PublishScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  syntaxErrorMsg?: string(name='SyntaxErrorMsg', example='script doesn\\"t contains transmit function'),
}

model PublishScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishScriptResponseBody(name='body'),
}

async function publishScriptWithOptions(request: PublishScriptRequest, runtime: Util.RuntimeOptions): PublishScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishScript(request: PublishScriptRequest): PublishScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishScriptWithOptions(request, runtime);
}

model PublishStudioAppRequest {
  appId?: string(name='AppId', example='a12*******'),
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123******'),
}

model PublishStudioAppResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model PublishStudioAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishStudioAppResponseBody(name='body'),
}

async function publishStudioAppWithOptions(request: PublishStudioAppRequest, runtime: Util.RuntimeOptions): PublishStudioAppResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PublishStudioApp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishStudioApp(request: PublishStudioAppRequest): PublishStudioAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishStudioAppWithOptions(request, runtime);
}

model PublishThingModelRequest {
  description?: string(name='Description', description='The description of the TSL model version.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  modelVersion?: string(name='ModelVersion', description='The version number of the TSL model.

The version number must be 1 to 16 characters in length and can contain letters, digits, and periods (.).', example='v1.0.0'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

>  You cannot specify this parameter.', example='rg-acfm4l5tcwd****'),
}

model PublishThingModelResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model PublishThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishThingModelResponseBody(name='body'),
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request PublishThingModelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PublishThingModelResponse
 */
async function publishThingModelWithOptions(request: PublishThingModelRequest, runtime: Util.RuntimeOptions): PublishThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request PublishThingModelRequest
  * @return PublishThingModelResponse
 */
async function publishThingModel(request: PublishThingModelRequest): PublishThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishThingModelWithOptions(request, runtime);
}

model PushSpeechRequest {
  deviceName?: string(name='DeviceName', example='a1BwAGV****'),
  groupId?: string(name='GroupId', example='4de2c367****8c585e5992**'),
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='light'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  pushMode?: string(name='PushMode', example='SINGLE_DEVICE'),
  speechCodeList?: [ string ](name='SpeechCodeList', example='4de2c367****8c585e5992**'),
}

model PushSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: string(name='Data', example='4de2c367****8c585e5992**'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model PushSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushSpeechResponseBody(name='body'),
}

async function pushSpeechWithOptions(request: PushSpeechRequest, runtime: Util.RuntimeOptions): PushSpeechResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.pushMode)) {
    body['PushMode'] = request.pushMode;
  }
  if (!Util.isUnset(request.speechCodeList)) {
    body['SpeechCodeList'] = request.speechCodeList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushSpeech(request: PushSpeechRequest): PushSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushSpeechWithOptions(request, runtime);
}

model QueryBatchRegisterDeviceStatusRequest {
  applyId?: long(name='ApplyId', description='The application ID. If the call of the [BatchRegisterDeviceWithApplyId](~~69514~~) or [BatchRegisterDevice](~~69473~~) operation is successful, the application ID is returned.', example='1295006'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.


**Important**

*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
*   If no **Overview** page or ID is generated for your instance, you do not need configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
}

model QueryBatchRegisterDeviceStatusResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).

>  X.509 certificates are available only for devices in the China (Shanghai) region. If devices do not reside in the China (Shanghai) region, you cannot generate X.509 certificates for the devices and the iot.device.RegionNotSupportX509 error code is returned.', example='iot.system.SystemException'),
  data?: {
    invalidDetailList?: {
      invalidDetailList?: [ 
      {
        deviceName?: string(name='DeviceName'),
        errorMsg?: string(name='ErrorMsg'),
        nickName?: string(name='NickName'),
      }
    ](name='invalidDetailList')
    }(name='InvalidDetailList'),
    invalidList?: {
      name?: [ string ](name='Name')
    }(name='InvalidList', description='*   If the value of the **Status** parameter is **CHECK_FAILED** or **CREATE_FAILED**, some devices failed to be created and the names of the devices that failed to be created are returned in this parameter.
*   If the value of the **Status** parameter is **CHECK_SUCCESS** or **CREATE_SUCCESS**, all devices are created and an empty array is returned in this parameter.'),
    status?: string(name='Status', description='The processing status and result. Valid values:

*   **CHECK**: The system is verifying device names.

*   **CHECK_SUCCESS**: All devices in the application form are verified.

*   **CHECK_FAILED**: All devices in the application form failed to be verified.

*   **CREATE**: The system is creating devices.

*   **CREATE_SUCCESS**: All devices in the application form are created.

> If the authentication type of the product to which the devices belong is X.509, all devices and the related X.509 certificates are created.

*   **CREATE_FAILED**: Some devices in the application form failed to be created.

> If a device or X.509 certificate fails to be created in the current batch when the authentication type is X.509, all devices fail to be created.', example='CREATE_SUCCESS'),
    validList?: {
      name?: [ string ](name='Name')
    }(name='ValidList', description='*   If the value of the **Status** parameter is **CHECK_FAILED** or **CREATE_FAILED**, some devices failed to be created and the names of the created devices are returned in this parameter.
*   If the value of the **Status** parameter is **CHECK_SUCCESS** or **CREATE_SUCCESS**, all devices are created and an empty array is returned in this parameter.'),
  }(name='Data', description='The status information returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryBatchRegisterDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBatchRegisterDeviceStatusResponseBody(name='body'),
}

/**
  * ## QPS limits
  * You can call this API operation up to 30 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryBatchRegisterDeviceStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryBatchRegisterDeviceStatusResponse
 */
async function queryBatchRegisterDeviceStatusWithOptions(request: QueryBatchRegisterDeviceStatusRequest, runtime: Util.RuntimeOptions): QueryBatchRegisterDeviceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBatchRegisterDeviceStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * You can call this API operation up to 30 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryBatchRegisterDeviceStatusRequest
  * @return QueryBatchRegisterDeviceStatusResponse
 */
async function queryBatchRegisterDeviceStatus(request: QueryBatchRegisterDeviceStatusRequest): QueryBatchRegisterDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBatchRegisterDeviceStatusWithOptions(request, runtime);
}

model QueryCertUrlByApplyIdRequest {
  applyId?: long(name='ApplyId', example='1234567'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QueryCertUrlByApplyIdResponseBody = {
  certUrl?: string(name='CertUrl', example='https://****'),
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryCertUrlByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCertUrlByApplyIdResponseBody(name='body'),
}

async function queryCertUrlByApplyIdWithOptions(request: QueryCertUrlByApplyIdRequest, runtime: Util.RuntimeOptions): QueryCertUrlByApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCertUrlByApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCertUrlByApplyId(request: QueryCertUrlByApplyIdRequest): QueryCertUrlByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCertUrlByApplyIdWithOptions(request, runtime);
}

model QueryClientIdsRequest {
  iotId?: string(name='IotId', description='The ID of the device. You can call the [QueryDeviceInfo](~~257184~~) operation to query the **IotId** parameter.', example='y4u2weAIrpp****WHMle1234'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-a****13l'),
}

model QueryClientIdsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='Success'),
  data?: {
    dynamicRegClientIds?: [ 
      {
        clientId?: string(name='ClientId', description='The ClientID of the device.', example='9rSzYt4js92********f000112'),
        createTime?: long(name='CreateTime', description='The time when the ClientID was created.', example='1636514022424'),
      }
    ](name='DynamicRegClientIds', description='The list of ClientIDs.'),
    iotId?: string(name='IotId', description='The ID of the device.', example='y4u2weAI********HMle1234'),
  }(name='Data', description='The ClientIDs returned if the call is successful. For more information, see **DynamicRegClientIds**.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryClientIdsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryClientIdsResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryClientIdsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryClientIdsResponse
 */
async function queryClientIdsWithOptions(request: QueryClientIdsRequest, runtime: Util.RuntimeOptions): QueryClientIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryClientIds',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryClientIdsRequest
  * @return QueryClientIdsResponse
 */
async function queryClientIds(request: QueryClientIdsRequest): QueryClientIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryClientIdsWithOptions(request, runtime);
}

model QueryConsumerGroupByGroupIdRequest {
  groupId?: string(name='GroupId', description='The ID of the consumer group. After you call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group, the consumer group ID is returned. You can call the [QueryConsumerGroupList](~~170419~~) operation to query the consumer group ID by group name. You can also go to the IoT Platform console,and choose **Rules** > **Server-side Subscription** > **Consumer Groups** to view the consumer group ID.', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
}

model QueryConsumerGroupByGroupIdResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    createTime?: string(name='CreateTime', description='The time when the consumer group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ss.SSSZ format. The time is displayed in UTC and accurate to milliseconds.', example='2020-05-20T00:05:20.000Z'),
    groupId?: string(name='GroupId', description='The ID of the consumer group.', example='nJRaJPn5U1JITGf******'),
    groupName?: string(name='GroupName', description='The name of the consumer group.'),
  }(name='Data', description='The details about the consumer group. This parameter is returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryConsumerGroupByGroupIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConsumerGroupByGroupIdResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryConsumerGroupByGroupIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryConsumerGroupByGroupIdResponse
 */
async function queryConsumerGroupByGroupIdWithOptions(request: QueryConsumerGroupByGroupIdRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupByGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConsumerGroupByGroupId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryConsumerGroupByGroupIdRequest
  * @return QueryConsumerGroupByGroupIdResponse
 */
async function queryConsumerGroupByGroupId(request: QueryConsumerGroupByGroupIdRequest): QueryConsumerGroupByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupByGroupIdWithOptions(request, runtime);
}

model QueryConsumerGroupListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1.', example='1'),
  fuzzy?: boolean(name='Fuzzy', description='Specifies whether to perform a fuzzy search. Valid values:

*   **true**: performs a fuzzy search. You must specify the **GroupName** parameter.
*   **false**: queries all consumer groups of the current account.

Default value: **false**.', example='false'),
  groupName?: string(name='GroupName', description='The name of the consumer group to be queried. This parameter is required if the **Fuzzy** parameter is set to **true**.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 1000.', example='2'),
  subBizCode?: string(name='SubBizCode'),
  type?: string(name='Type'),
}

model QueryConsumerGroupListResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', description='The number of the returned page.', example='1'),
  data?: {
    consumerGroupDTO?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the consumer group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ss.SSSZ format. The time is displayed in UTC and accurate to milliseconds.', example='2020-05-20T00:05:20.000Z'),
      groupId?: string(name='GroupId', description='The ID of the consumer group.', example='nJRaJPn5U1JITGf******'),
      groupName?: string(name='GroupName', description='The name of the consumer group.'),
    }
  ](name='ConsumerGroupDTO')
  }(name='Data', description='The details about the consumer group. This parameter is returned if the call is successful. For more information, see ConsumerGroupDTO.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  pageCount?: int32(name='PageCount', description='The total number of returned pages.', example='4'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of entries.', example='8'),
}

model QueryConsumerGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConsumerGroupListResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryConsumerGroupListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryConsumerGroupListResponse
 */
async function queryConsumerGroupListWithOptions(request: QueryConsumerGroupListRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.fuzzy)) {
    query['Fuzzy'] = request.fuzzy;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.subBizCode)) {
    query['SubBizCode'] = request.subBizCode;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConsumerGroupList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryConsumerGroupListRequest
  * @return QueryConsumerGroupListResponse
 */
async function queryConsumerGroupList(request: QueryConsumerGroupListRequest): QueryConsumerGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupListWithOptions(request, runtime);
}

model QueryConsumerGroupStatusRequest {
  groupId?: string(name='GroupId', description='The ID of the consumer group. After you call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group, the consumer group ID is returned. You can call the [QueryConsumerGroupList](~~170419~~) operation to query the consumer group ID by group name. You can also go to the IoT Platform console,and choose **Rules** > **Server-side Subscription** > **Consumer Groups** to view the consumer group ID.', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
}

model QueryConsumerGroupStatusResponseBody = {
  accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute', description='The message consumption rate. Unit: messages/minute.', example='10'),
  accumulationCount?: int32(name='AccumulationCount', description='The number of accumulated messages.', example='13'),
  clientConnectionStatusList?: {
    consumerGroupClientConnectionInfo?: [ 
    {
      accumulatedConsumeCountPerMinute?: int32(name='AccumulatedConsumeCountPerMinute', description='The consumption rate of accumulated messages on a single client of the consumer group. Unit: messages/minute.', example='10'),
      clientId?: string(name='ClientId', description='The ID of the client.', example='868575026******'),
      clientIpPort?: string(name='ClientIpPort', description='The IP address and port of the client.', example='192.168.1.2:36918'),
      onlineTime?: long(name='OnlineTime', description='The last time when the client was online. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1591240546649'),
      realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute', description='The consumption rate of real-time messages on a single client of the consumer group. Unit: messages/minute.', example='5'),
    }
  ](name='ConsumerGroupClientConnectionInfo')
  }(name='ClientConnectionStatusList', description='The details about the client. For more information, see **ConsumerGroupClientConnectionInfo**.'),
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](/help/en/iot-platform/latest/bce100).', example='iot.system.SystemException'),
  consumerSpeed?: int32(name='ConsumerSpeed', description='The message consumption rate of the consumer group. Unit: messages/minute.', example='14'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  lastConsumerTime?: string(name='LastConsumerTime', description='The time when the last message was consumed. The time is in the yyyy-MM-dd\\"T\\"HH:mm:ss.SSSZ format. The time is displayed in UTC and accurate to milliseconds.', example='2020-05-29T03:37:56.000Z'),
  realTimeConsumeCountPerMinute?: int32(name='RealTimeConsumeCountPerMinute', description='The consumption rate of real-time messages in the consumer group. Unit: messages/minute.', example='14'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryConsumerGroupStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryConsumerGroupStatusResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryConsumerGroupStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryConsumerGroupStatusResponse
 */
async function queryConsumerGroupStatusWithOptions(request: QueryConsumerGroupStatusRequest, runtime: Util.RuntimeOptions): QueryConsumerGroupStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryConsumerGroupStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryConsumerGroupStatusRequest
  * @return QueryConsumerGroupStatusResponse
 */
async function queryConsumerGroupStatus(request: QueryConsumerGroupStatusRequest): QueryConsumerGroupStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryConsumerGroupStatusWithOptions(request, runtime);
}

model QueryDetailSceneRuleLogRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: int32(name='EndTime', example='1581918482'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
  ruleId?: string(name='RuleId', example='e5dd1c7aa3994ecdbc88235979******'),
  startTime?: int32(name='StartTime', example='1581917582'),
  traceId?: string(name='TraceId', example='b662a9671581918480168107******'),
}

model QueryDetailSceneRuleLogResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    logList?: [ 
      {
        code?: string(name='Code', example='9201'),
        message?: string(name='Message', example='device offline, productKey: a1c3t****, deviceName: my_device1'),
        pkDn?: string(name='PkDn', example='a1c3t****/my_device1'),
      }
    ](name='LogList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='ED2DF141-B09A-4C8A-BAA5-30CCEE63036C'),
  success?: boolean(name='Success', example='true'),
}

model QueryDetailSceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDetailSceneRuleLogResponseBody(name='body'),
}

async function queryDetailSceneRuleLogWithOptions(request: QueryDetailSceneRuleLogRequest, runtime: Util.RuntimeOptions): QueryDetailSceneRuleLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.traceId)) {
    query['TraceId'] = request.traceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDetailSceneRuleLog',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDetailSceneRuleLog(request: QueryDetailSceneRuleLogRequest): QueryDetailSceneRuleLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDetailSceneRuleLogWithOptions(request, runtime);
}

model QueryDeviceRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of the query results. The first time you perform a query operation, you do not need to configure this parameter. You must specify the token that is obtained from the previous query for the **NextToken** parameter.

If the product of the value of the **PageSize** parameter and the value of the **CurrentPage** parameter is greater than 10,000, you must configure the **NextToken** parameter. Otherwise, data cannot be returned.


>If you configure the **NextToken** parameter, the product of the value of the **PageSize** parameter and the value of the **CurrentPage** parameter must be less than 1,000,000. Otherwise, data cannot be returned.', example='TGlzdFJlc291cm***'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
}

model QueryDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    deviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId', description='The ID of the device.

>  This parameter is deprecated. Do not use this parameter to identify a device. You can use the **IotId** parameter or a combination of the **ProductKey** and **DeviceName** parameters to identify a device.', example='dwnS41bhNxjslDAI****'),
      deviceName?: string(name='DeviceName', description='The name of the device.', example='light'),
      deviceSecret?: string(name='DeviceSecret', description='The DeviceSecret of the device.', example='sLefbFmN9SYfnWLJTePG893XNuRV****'),
      deviceStatus?: string(name='DeviceStatus', description='The status of the device. Valid values:

*   **ONLINE**: The device is online.
*   **OFFLINE**: The device is offline.
*   **UNACTIVE**: The device is not activated.
*   **DISABLE**: The device is deactivated.', example='ONLINE'),
      deviceType?: string(name='DeviceType', description='The category of the product to which the device belongs.

>  This parameter is not returned.', example='Lighting'),
      gmtCreate?: string(name='GmtCreate', description='The time when the device was created. The time is in the GMT format.', example='Wed, 20-Feb-2019 02:16:09 GMT'),
      gmtModified?: string(name='GmtModified', description='The time when the device information was last updated. The time is in the GMT format.', example='Wed, 20-Feb-2019 02:16:09 GMT'),
      iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname', description='The alias of the device.'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
      utcCreate?: string(name='UtcCreate', description='The time when the device was created. The time is displayed in UTC.', example='2019-02-20T02:16:09.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the device information was last updated. The time is displayed in UTC.', example='2019-02-20T02:16:09.000Z'),
    }
  ](name='DeviceInfo')
  }(name='Data', description='The device information returned if the call is successful. The details of the devices are included in the **DeviceInfo** parameter.

>  The returned device information is sorted in reverse chronological order based on the time when the devices were created.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the subsequent page of the query results. You can specify this parameter in the subsequent query to obtain the next page of results.

If the **NextToken** parameter is empty, no subsequent page exists.', example='TGlzdFJlc291cm***'),
  page?: int32(name='Page', description='The page number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of devices.', example='2'),
}

model QueryDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceResponseBody(name='body'),
}

/**
  * The QueryDevice operation can return up to one million devices each time you call the operation.
  * ## QPS limits
  * - You can call this API operation up to 50 times per second per account. >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  * - If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the queries per second (QPS) of this operation decreases. 
  * In this case, you can call this API operation up to two times per second per account.
  *
  * @param request QueryDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceResponse
 */
async function queryDeviceWithOptions(request: QueryDeviceRequest, runtime: Util.RuntimeOptions): QueryDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The QueryDevice operation can return up to one million devices each time you call the operation.
  * ## QPS limits
  * - You can call this API operation up to 50 times per second per account. >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  * - If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the queries per second (QPS) of this operation decreases. 
  * In this case, you can call this API operation up to two times per second per account.
  *
  * @param request QueryDeviceRequest
  * @return QueryDeviceResponse
 */
async function queryDevice(request: QueryDeviceRequest): QueryDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceWithOptions(request, runtime);
}

model QueryDeviceBySQLRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Instance Overview** page in the IoT Platform console.


**Important**

*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  SQL?: string(name='SQL', description='The SQL-like statement that you want to execute to query devices. For more information about specific requirements and examples, see the following section.', example='SELECT * FROM device where product_key = "a1*********" limit 100, 20'),
}

model QueryDeviceBySQLResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: [ 
    {
      activeTime?: string(name='ActiveTime', description='The time when the device was activated. The time is in the GMT format.', example='2020-04-04 16:38:18.607'),
      deviceName?: string(name='DeviceName', description='The name of the device.', example='light'),
      gmtCreate?: string(name='GmtCreate', description='The time when the device was created. The time is in the GMT format.', example='2020-04-04 16:38:17.000'),
      gmtModified?: string(name='GmtModified', description='The time when the device information was last updated. The time is in the GMT format.', example='2020-04-04 16:38:19.000'),
      groups?: [ 
        {
          groupId?: string(name='GroupId', description='The ID of the group.', example='a1d21d2fas'),
        }
      ](name='Groups', description='The information about the groups to which the device belongs.'),
      iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.', example='Q7uOhVRdZRRlDnTLv****00100'),
      nickname?: string(name='Nickname', description='The alias of the device.'),
      OTAModules?: [ 
        {
          firmwareVersion?: string(name='FirmwareVersion', description='The version number of each OTA module.', example='a1-dads2-dad2'),
          moduleName?: string(name='ModuleName', description='The name of the OTA module.', example='SomeSampleModule'),
        }
      ](name='OTAModules', description='The information about the firmware of each device module.'),
      productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
      status?: string(name='Status', description='The status of the device. Valid values:

*   **ONLINE**: The device is online.
*   **OFFLINE**: The device is offline.
*   **UNACTIVE**: The device is not activated.
*   **DISABLE**: The device is disabled.', example='ONLINE'),
      tags?: [ 
        {
          tagName?: string(name='TagName', description='The tag key.', example='Color'),
          tagValue?: string(name='TagValue', description='The tag value.', example='Red'),
        }
      ](name='Tags', description='The information about device tags.'),
    }
  ](name='Data', description='The device information returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  totalCount?: long(name='TotalCount', description='If you specify `SELECT count(*) FROM device` in the SQL-like statement, the number of rows that match the specified conditions is returned.', example='100'),
}

model QueryDeviceBySQLResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceBySQLResponseBody(name='body'),
}

/**
  * *   You can query devices on Enterprise Edition instances only in the China (Shanghai) and Japan (Tokyo) regions.
  * *   The QueryDeviceBySQL operation can return up to 10,000 devices each time you call the operation. For more information, see the "`Syntax of LIMIT clauses`" section of this topic.
  * ## QPS limits
  * You can call this API operation up to 10 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceBySQLRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceBySQLResponse
 */
async function queryDeviceBySQLWithOptions(request: QueryDeviceBySQLRequest, runtime: Util.RuntimeOptions): QueryDeviceBySQLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.SQL)) {
    query['SQL'] = request.SQL;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceBySQL',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can query devices on Enterprise Edition instances only in the China (Shanghai) and Japan (Tokyo) regions.
  * *   The QueryDeviceBySQL operation can return up to 10,000 devices each time you call the operation. For more information, see the "`Syntax of LIMIT clauses`" section of this topic.
  * ## QPS limits
  * You can call this API operation up to 10 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceBySQLRequest
  * @return QueryDeviceBySQLResponse
 */
async function queryDeviceBySQL(request: QueryDeviceBySQLRequest): QueryDeviceBySQLResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceBySQLWithOptions(request, runtime);
}

model QueryDeviceByStatusRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.


**Important**

*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the product belongs. You can view the resource group ID in the IoT Platform console.

>  If you specify this parameter, the system returns devices of the specified status in the resource group. If you do not specify this parameter, the system returns all devices of the specified status in the current account.', example='rg-acfm4l5tcwd***'),
  status?: int32(name='Status', description='The status of the devices. Valid values:

*   **0**: inactive
*   **1**: online
*   **3**: offline
*   **8**: disabled', example='1'),
}

model QueryDeviceByStatusResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
      deviceSecret?: string(name='DeviceSecret', description='The secret of the device.', example='sLefbFmN9SYfnWLJTePG893XNuRV****'),
      gmtCreate?: string(name='GmtCreate', description='The time when the device was created. The time is displayed in UTC.', example='2021-02-18 10:46:32'),
      gmtModified?: string(name='GmtModified', description='The time when the device information was last modified. The time is displayed in UTC.', example='2021-02-18 10:46:32'),
      iotId?: string(name='IotId', description='The ID of the device.', example='Av8NGHGtwPrH9BYGLMBi00****'),
      nickname?: string(name='Nickname', description='The alias of the device.', example='SensorInShanghai'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
      status?: string(name='Status', description='The status of the device. Valid values:

*   **UNACTIVE**: The device is not activated.
*   **ONLINE**: The device is online.
*   **OFFLINE**: The device is offline.
*   **DISABLE**: The device is disabled.', example='ONLINE'),
      utcCreate?: string(name='UtcCreate', description='The time when the device was created. The time is displayed in UTC.', example='2021-02-18T02:46:32.000Z'),
      utcModified?: string(name='UtcModified', description='The time when the device information was last modified. The time is displayed in UTC.', example='2021-02-18T02:46:32.000Z'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data', description='The device list information returned if the call succeeds. The **SimpleDeviceInfo** parameter includes the details of the devices.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  page?: int32(name='Page', description='The number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of devices returned.', example='2'),
}

model QueryDeviceByStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceByStatusResponseBody(name='body'),
}

/**
  * ## Limits
  * *   After the status of a device changes, the new status is applied within 10 seconds. After the new status is applied, you can search for the device by using the new status. Before the new status is applied, you can search for the device by using the previous status.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceByStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceByStatusResponse
 */
async function queryDeviceByStatusWithOptions(request: QueryDeviceByStatusRequest, runtime: Util.RuntimeOptions): QueryDeviceByStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceByStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   After the status of a device changes, the new status is applied within 10 seconds. After the new status is applied, you can search for the device by using the new status. Before the new status is applied, you can search for the device by using the previous status.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceByStatusRequest
  * @return QueryDeviceByStatusResponse
 */
async function queryDeviceByStatus(request: QueryDeviceByStatusRequest): QueryDeviceByStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceByStatusWithOptions(request, runtime);
}

model QueryDeviceByTagsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50. Default value: 10.', example='10'),
  tag?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the device tag.', example='room'),
      tagValue?: string(name='TagValue', description='The value of the device tag.', example='101'),
    }
  ](name='Tag'),
}

model QueryDeviceByTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light1'),
      iotId?: string(name='IotId', description='The ID of the device. The ID is the unique identifier that is issued by IoT Platform to the device.', example='Q7uOhVRdZRRlDnTLv****00100'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
      productName?: string(name='ProductName', description='The name of the product.', example='lamp'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data', description='The device information returned if the call succeeds. The **SimpleDeviceInfo** parameter includes the details of the devices.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  page?: int32(name='Page', description='The page number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of records.', example='1'),
}

model QueryDeviceByTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceByTagsResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can specify a maximum of 10 tags in a single call.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceByTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceByTagsResponse
 */
async function queryDeviceByTagsWithOptions(request: QueryDeviceByTagsRequest, runtime: Util.RuntimeOptions): QueryDeviceByTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceByTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can specify a maximum of 10 tags in a single call.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceByTagsRequest
  * @return QueryDeviceByTagsResponse
 */
async function queryDeviceByTags(request: QueryDeviceByTagsRequest): QueryDeviceByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceByTagsWithOptions(request, runtime);
}

model QueryDeviceCertRequest {
  deviceName?: string(name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryDeviceCertResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceCertInfo?: {
    certSN?: string(name='CertSN', example='636217374433****'),
    certificate?: string(name='Certificate', example='tXHf4ezGEHcwdyMwoCDHGBmk9avi****'),
    privateKey?: string(name='PrivateKey', example='CqXL5h5ysRTA4NxjABjj0010fa****'),
    status?: int32(name='Status', example='2'),
  }(name='DeviceCertInfo'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceCertResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceCertResponseBody(name='body'),
}

async function queryDeviceCertWithOptions(request: QueryDeviceCertRequest, runtime: Util.RuntimeOptions): QueryDeviceCertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceCert',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceCert(request: QueryDeviceCertRequest): QueryDeviceCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceCertWithOptions(request, runtime);
}

model QueryDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify a value for this parameter, you must configure the **ProductKey** parameter.', example='light'),
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not configure this parameter, the system queries the data of the default module.', example='BatteryModule'),
  identifier?: [ string ](name='Identifier', example='Temperature'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify a value for this parameter, you do not need to configure the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a GUID for the device. The value of the IotId parameter is equivalent to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify values for the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify a value for this parameter, you must configure the **DeviceName** parameter.', example='a1BwAGV****'),
}

model QueryDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    list?: {
      desiredPropertyInfo?: [ 
      {
        dataType?: string(name='DataType', description='The data type of the property.', example='int'),
        identifier?: string(name='Identifier', description='The identifier of the property.', example='Temperature'),
        name?: string(name='Name', description='The name of the property.', example='airconditioning'),
        time?: string(name='Time', description='The time when the desired value of the property was last modified. Unit: milliseconds.', example='1579335899000'),
        unit?: string(name='Unit', description='The unit of the property.', example='℃'),
        value?: string(name='Value', description='The desired value of the property.

>  If you call the [ClearDeviceDesiredProperty](~~477431~~) operation to delete the desired value of the property, the **Value** parameter is not returned.', example='34'),
        version?: long(name='Version', description='The version of the desired value.', example='1'),
      }
    ](name='DesiredPropertyInfo')
    }(name='List', description='The desired property information returned in the **DesiredPropertyInfo** parameter.'),
  }(name='Data', description='The data returned in the **List** parameter if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDesiredPropertyResponseBody(name='body'),
}

/**
  * *   The desired values of read-only properties cannot be queried.
  * *   You can query the desired values of up to 10 properties in a single call.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDesiredPropertyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceDesiredPropertyResponse
 */
async function queryDeviceDesiredPropertyWithOptions(request: QueryDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): QueryDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDesiredProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The desired values of read-only properties cannot be queried.
  * *   You can query the desired values of up to 10 properties in a single call.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDesiredPropertyRequest
  * @return QueryDeviceDesiredPropertyResponse
 */
async function queryDeviceDesiredProperty(request: QueryDeviceDesiredPropertyRequest): QueryDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDesiredPropertyWithOptions(request, runtime);
}

model QueryDeviceDetailRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify a value for this parameter, you must also specify a value for the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device.

>  If you specify a value for this parameter, you do not need to specify a value for the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a globally unique identifier (GUID) for the device. The value of the IotId parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for the **IotId** parameter and values for the **ProductKey** and **DeviceName** parameters, the value of the **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64***'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify a value for this parameter, you must also specify a value for the **DeviceName** parameter.', example='a1BwAGV****'),
}

model QueryDeviceDetailResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
    deviceSecret?: string(name='DeviceSecret', description='The DeviceSecret of the device.', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    firmwareVersion?: string(name='FirmwareVersion', description='The version number of the default OTA module of the device.

If you want to query the version information about other OTA modules, call the [ListOTAModuleVersionsByDevice](~~190622~~) operation. The version information is submitted by the device.', example='V1.0.0.0'),
    gmtActive?: string(name='GmtActive', description='The time when the device was activated. The time is in the GMT format.', example='2018-08-06 10:48:41'),
    gmtCreate?: string(name='GmtCreate', description='The time when the device was created. The time is in the GMT format.', example='2018-08-06 10:47:50'),
    gmtOnline?: string(name='GmtOnline', description='The most recent time when the device was online. The time is in the GMT format.', example='2018-08-06 13:43:12'),
    iotId?: string(name='IotId', description='The ID of the device. The ID is the unique identifier that is issued by IoT Platform to the device.', example='Q7uOhVRdZRRlDnTLv****00100'),
    ipAddress?: string(name='IpAddress', description='The IP address of the device.', example='10.0.0.1'),
    nickname?: string(name='Nickname', description='The alias of the device.', example='detectors_in_beijing'),
    nodeType?: int32(name='NodeType', description='The type of the node. Valid values:

*   **0**: device. Sub-devices cannot be attached to a device. A device can connect to IoT Platform directly or as a sub-device of a gateway.
*   **1**: gateway. Sub-devices can be attached to a gateway. A gateway can manage sub-devices, maintain the topological relationships with sub-devices, and synchronize the topological relationships to IoT Platform.', example='0'),
    owner?: boolean(name='Owner', description='Indicates whether the operation is called by the owner of the device.', example='true'),
    productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1rYuVF****'),
    productName?: string(name='ProductName', description='The name of the product to which the device belongs.', example='test'),
    region?: string(name='Region', description='The ID of the region where the device resides. The region is the same as the region where IoT Platform resides. You can view the region in the IoT Platform console.', example='cn-shanghai'),
    status?: string(name='Status', description='The device status. Valid values: Valid values:

*   **ONLINE**: The device is online.
*   **OFFLINE**: The device is offline.
*   **UNACTIVE**: The device is not activated.
*   **DISABLE**: The device is disabled.', example='ONLINE'),
    utcActive?: string(name='UtcActive', description='The time when the device was activated. The time is in the UTC format.', example='2018-08-06T02:48:41.000Z'),
    utcCreate?: string(name='UtcCreate', description='The time when the device was created. The time is in the UTC format.', example='2018-08-06T02:47:50.000Z'),
    utcOnline?: string(name='UtcOnline', description='The most recent time when the device was online. The time is in the UTC format.', example='2018-08-06T05:43:12.000Z'),
  }(name='Data', description='The device details returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDetailResponseBody(name='body'),
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceDetailResponse
 */
async function queryDeviceDetailWithOptions(request: QueryDeviceDetailRequest, runtime: Util.RuntimeOptions): QueryDeviceDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS).
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDetailRequest
  * @return QueryDeviceDetailResponse
 */
async function queryDeviceDetail(request: QueryDeviceDetailRequest): QueryDeviceDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDetailWithOptions(request, runtime);
}

model QueryDeviceDistributeDetailRequest {
  jobId?: string(name='JobId', description='The ID of the distribution task. The ID globally identifies the task.', example='UbmsMHmkqv0PiAG****010001'),
}

model QueryDeviceDistributeDetailResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  file?: string(name='File', description='The URL of the file that contains the distribution result. The URL indicates a storage location of the file in Object Storage Service (OSS). The URL is valid for 10 minutes.', example='https://iotx-***.oss-cn-shanghai.aliyuncs.com/job***/7u***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceDistributeDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDistributeDetailResponseBody(name='body'),
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDistributeDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceDistributeDetailResponse
 */
async function queryDeviceDistributeDetailWithOptions(request: QueryDeviceDistributeDetailRequest, runtime: Util.RuntimeOptions): QueryDeviceDistributeDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDistributeDetail',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDistributeDetailRequest
  * @return QueryDeviceDistributeDetailResponse
 */
async function queryDeviceDistributeDetail(request: QueryDeviceDistributeDetailRequest): QueryDeviceDistributeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDistributeDetailWithOptions(request, runtime);
}

model QueryDeviceDistributeJobRequest {
  jobId?: string(name='JobId', description='The ID of the distribution task. The ID globally identifies the task.', example='UbmsMHmkqv0PiAG****010001'),
}

model QueryDeviceDistributeJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    gmtCreate?: long(name='GmtCreate', description='The time when the task was created.', example='1581595942000'),
    jobId?: string(name='JobId', description='The ID of the distribution task.', example='UbmsMHmkqv0PiAG****010001'),
    productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
    sourceInstanceId?: string(name='SourceInstanceId', description='The ID of the source instance.', example='iot-cn-6ja***'),
    sourceUid?: string(name='SourceUid', description='The ID of the Alibaba Cloud account.', example='198***'),
    status?: int32(name='Status', description='The status of the distribution task.

*   **0**: The task is being initialized.
*   **1**: The task is being implemented.
*   **2**: The task is completed. This status only indicates that the distribution task is completed. This status does not indicate that all products and devices are distributed. To obtain distribution results, call the [QueryDeviceDistributeDetail](~~199533~~) operation.
*   **3**: The task is unexpectedly interrupted.', example='1'),
    strategy?: int32(name='Strategy', description='The distribution policy.

*   **0**: distributes devices to instances in a specified region.
*   **1**: configures instance IDs in multiple regions and distributes devices to the nearest regions based on the IP addresses of the devices.', example='0'),
    targetInstanceConfigs?: {
      targetInstanceConfigs?: [ 
      {
        targetInstanceId?: string(name='TargetInstanceId', description='The ID of the destination instance.', example='iot-cn-6ja***'),
      }
    ](name='targetInstanceConfigs')
    }(name='TargetInstanceConfigs', description='The IDs of the destination instances.

*   If the value of the **Strategy** parameter is **1**, multiple instance IDs exist.
*   If the value of the **Strategy** parameter is **0**, only one instance ID exists.'),
    targetUid?: string(name='TargetUid', example='198***'),
    total?: int32(name='Total', description='The total number of devices in the distribution task.', example='5'),
  }(name='Data', description='The task information returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceDistributeJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceDistributeJobResponseBody(name='body'),
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDistributeJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceDistributeJobResponse
 */
async function queryDeviceDistributeJobWithOptions(request: QueryDeviceDistributeJobRequest, runtime: Util.RuntimeOptions): QueryDeviceDistributeJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceDistributeJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This operation can be called only by using the following **endpoint**: `iot.cn-shanghai.aliyuncs.com`.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceDistributeJobRequest
  * @return QueryDeviceDistributeJobResponse
 */
async function queryDeviceDistributeJob(request: QueryDeviceDistributeJobRequest): QueryDeviceDistributeJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceDistributeJobWithOptions(request, runtime);
}

model QueryDeviceEventDataRequest {
  asc?: int32(name='Asc', description='The order in which you want to sort the returned event records. Valid values:

*   **0**: in reverse chronological order. This is the default value.
*   **1**: in chronological order.

>  If you do not configure this parameter, the default value **0** is used. The system sorts the returned event records in reverse chronological order.', example='0'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify a value for this parameter, you must also specify a value for the **ProductKey** parameter.', example='light'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a 13-digit timestamp in milliseconds. Example: 1516541900303.', example='1516541900303'),
  eventType?: string(name='EventType', description='The type of the event that you want to query. Valid values:

*   **info**: Information.
*   **alert**: Alert.
*   **error**: Error.', example='info'),
  identifier?: string(name='Identifier', description='The identifier of the event that you want to query. You can view the event identifier on the Define Feature tab of the Product Details page in the IoT Platform console. You can also call the [QueryThingModel](~~150321~~) operation and view the event identifier in the returned TSL data.

>  If the PowerOff event belongs to a custom module named testFb, this parameter is set to **testFb:PowerOff**.

If you do not specify this parameter, the system queries all event data of the default module and custom modules.', example='PowerOff'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify a value for this parameter, you do not need to specify a value for the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a globally unique identifier (GUID) for the device. The value of the IotId parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for the **IotId** parameter and values for the **ProductKey** and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify this parameter. Otherwise, the call fails.
>*   If the **Overview** page does not appear in the IoT Platform console or no ID is generated for your instance, you do not need to specify this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value is a 13-digit timestamp in milliseconds. Example: 1516538300303.

>  You can query the event data only of the most recent 30 days.', example='1516541900303'),
}

model QueryDeviceEventDataResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType', description='The type of the event. Valid values:

*   **info**: information.
*   **alert**: alert.
*   **error**: error.', example='info'),
        identifier?: string(name='Identifier', description='The identifier of the event.', example='PowerOff'),
        name?: string(name='Name', description='The name of the event.'),
        outputData?: string(name='OutputData', description='The output parameter of the event. The value is a string in the MAP format.', example='{"structArgs":{"structchildFLOATf71c20e":1.23}}'),
        time?: string(name='Time', description='The time when the event occurred. The value is a timestamp in milliseconds.', example='1579163099000'),
      }
    ](name='EventInfo')
    }(name='List', description='The array of events. Each element represents an event.'),
    nextTime?: long(name='NextTime', description='The start time of the event records on the next page. The value is a timestamp in milliseconds.  

- If the **Asc** parameter is set to 0, you can specify this value for the **EndTime** parameter when you call this operation again to query the next page of event records.
- If the **Asc** parameter is set to 1, you can specify this value for the **StartTime** parameter when you call this operation again to query the next page of event records.', example='1579163099000'),
    nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists.

*   **true**: The next page exists. The value of the **NextTime** parameter is returned. For more information, see the description of the **NextTime** parameter in this topic.
*   **false**: The next page does not exist.', example='true'),
  }(name='Data', description='The event records returned if the call succeeds.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceEventDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceEventDataResponseBody(name='body'),
}

/**
  * You can query only the event records that are generated in the previous 30 days.
  * >  The storage period of an event record is calculated from the day when the record is generated.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryDeviceEventDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceEventDataResponse
 */
async function queryDeviceEventDataWithOptions(request: QueryDeviceEventDataRequest, runtime: Util.RuntimeOptions): QueryDeviceEventDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceEventData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query only the event records that are generated in the previous 30 days.
  * >  The storage period of an event record is calculated from the day when the record is generated.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryDeviceEventDataRequest
  * @return QueryDeviceEventDataResponse
 */
async function queryDeviceEventData(request: QueryDeviceEventDataRequest): QueryDeviceEventDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventDataWithOptions(request, runtime);
}

model QueryDeviceFileRequest {
  deviceName?: string(name='DeviceName', description='The name of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  fileId?: string(name='FileId', description='The ID of the file. You can call the [QueryDeviceFileList](~~112001~~) operation and view the file ID in the response.', example='xL0G67MBLBDtkR7GCfT******'),
  iotId?: string(name='IotId', description='The ID of the device. The device ID is issued by IoT Platform.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model QueryDeviceFileResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    downloadUrl?: string(name='DownloadUrl', description='The download URL of the file.', example='http://iotx-file-store.oss-cn-shanghai.aliyuncs.com/device_file/A849E4E5CFF64804A18D9384AC9D****/aGEKIpp5NAGxdP2oo90000****/testFile3.txt?Expires=1553162075&OSSAccessKeyId=LTAIYLScbHiV****&Signature=%2F88xdEFPukJ****%2F8****%2Bdv3io%3D'),
    fileId?: string(name='FileId', description='The ID of the file.', example='6UCo1SqbqnQEoh9aKqDQ01****'),
    name?: string(name='Name', description='The name of the file.', example='testFile3.txt'),
    size?: string(name='Size', description='The size of the file. Unit: KB.', example='102400'),
    utcCreatedOn?: string(name='UtcCreatedOn', description='The time when the file was created.', example='2019-03-21T08:45:42.000Z'),
  }(name='Data', description='The file information returned if the call succeeds.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceFileResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceFileResponse
 */
async function queryDeviceFileWithOptions(request: QueryDeviceFileRequest, runtime: Util.RuntimeOptions): QueryDeviceFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.fileId)) {
    query['FileId'] = request.fileId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceFile',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceFileRequest
  * @return QueryDeviceFileResponse
 */
async function queryDeviceFile(request: QueryDeviceFileRequest): QueryDeviceFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileWithOptions(request, runtime);
}

model QueryDeviceFileListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The device ID is issued by IoT Platform.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 200. Default value: 10.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model QueryDeviceFileListResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', description='The number of the returned page.', example='1'),
  data?: {
    fileSummary?: [ 
    {
      fileId?: string(name='FileId', description='The ID of each file. The ID is the unique identifier for the file.', example='xL0G67MBLBDtkR7GCfT******'),
      name?: string(name='Name', description='The name of the file.', example='testFile2.txt'),
      size?: string(name='Size', description='The size of the file. Unit: KB.', example='1024000'),
      utcCreatedOn?: string(name='UtcCreatedOn', description='The time when the file was created.', example='2019-03-21T08:45:42.000Z'),
    }
  ](name='FileSummary')
  }(name='Data', description='The file list information returned if the call succeeds.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of files.', example='2'),
}

model QueryDeviceFileListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceFileListResponseBody(name='body'),
}

/**
  * ## Limits
  * *   The returned file information for this operation call does not contain download URLs. To obtain the download URL of a file, call [QueryDeviceFile](~~112002~~).
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceFileListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceFileListResponse
 */
async function queryDeviceFileListWithOptions(request: QueryDeviceFileListRequest, runtime: Util.RuntimeOptions): QueryDeviceFileListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceFileList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   The returned file information for this operation call does not contain download URLs. To obtain the download URL of a file, call [QueryDeviceFile](~~112002~~).
  * *   Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceFileListRequest
  * @return QueryDeviceFileListResponse
 */
async function queryDeviceFileList(request: QueryDeviceFileListRequest): QueryDeviceFileListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileListWithOptions(request, runtime);
}

model QueryDeviceGroupByDeviceRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='test456'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1SKk9K****'),
}

model QueryDeviceGroupByDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  groupInfos?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', description='The description of the group.', example='father desc'),
      groupId?: string(name='GroupId', description='The ID of the group.', example='6a3FF2XE2BKa****'),
      groupName?: string(name='GroupName', description='The name of the group.', example='father1543152336554'),
      groupType?: string(name='GroupType', description='The type of the group.', example='LINK_PLATFORM_DYNAMIC'),
      utcCreate?: string(name='UtcCreate', description='The time when the group was created.', example='2018-11-25T13:25:37.000Z'),
    }
  ](name='GroupInfo')
  }(name='GroupInfos', description='The group information returned if the call succeeds. For more information, see the following GroupInfo parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7941C8CD-7764-4A94-8CD9-E2762D4A73AC'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceGroupByDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupByDeviceResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can add a device to a maximum of 10 groups.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupByDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceGroupByDeviceResponse
 */
async function queryDeviceGroupByDeviceWithOptions(request: QueryDeviceGroupByDeviceRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupByDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupByDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can add a device to a maximum of 10 groups.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupByDeviceRequest
  * @return QueryDeviceGroupByDeviceResponse
 */
async function queryDeviceGroupByDevice(request: QueryDeviceGroupByDeviceRequest): QueryDeviceGroupByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupByDeviceWithOptions(request, runtime);
}

model QueryDeviceGroupByTagsRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10'),
  tag?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of each tag.', example='group'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='tag'),
    }
  ](name='Tag'),
}

model QueryDeviceGroupByTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    deviceGroup?: [ 
    {
      groupId?: string(name='GroupId', description='The ID of the group.', example='Z0ElGF5aqc0t****'),
      groupName?: string(name='GroupName', description='The name of the group.', example='test11'),
    }
  ](name='DeviceGroup')
  }(name='Data', description='The group information returned if the call succeeds.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  page?: int32(name='Page', description='The number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9599EE98-1642-4FCD-BFC4-039E458A4693'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of records.', example='1'),
}

model QueryDeviceGroupByTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupByTagsResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupByTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceGroupByTagsResponse
 */
async function queryDeviceGroupByTagsWithOptions(request: QueryDeviceGroupByTagsRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupByTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupByTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupByTagsRequest
  * @return QueryDeviceGroupByTagsResponse
 */
async function queryDeviceGroupByTags(request: QueryDeviceGroupByTagsRequest): QueryDeviceGroupByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupByTagsWithOptions(request, runtime);
}

model QueryDeviceGroupInfoRequest {
  groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.

You can call the [QueryDeviceGroupList](~~93356~~) operation to query the **GroupId** parameter.', example='tDQvBJqbUyHs****'),
  groupType?: string(name='GroupType', description='The type of the group.

Set the value to **LINK_PLATFORM_DYNAMIC**. This value indicates a dynamic group. If you do not specify this parameter, a static group is queried by default.', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
}

model QueryDeviceGroupInfoResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    deviceActive?: int32(name='DeviceActive', description='The number of activated devices.', example='1'),
    deviceCount?: int32(name='DeviceCount', description='The total number of devices.', example='10'),
    deviceOnline?: int32(name='DeviceOnline', description='The number of online devices.', example='0'),
    dynamicGroupExpression?: string(name='DynamicGroupExpression', description='The rule of the dynamic group. This parameter is returned if a dynamic group is queried.', example='product_key = "a1***" and name LIKE "test%"'),
    groupDesc?: string(name='GroupDesc', description='The description of the group.', example='usefulGroup'),
    groupId?: string(name='GroupId', description='The ID of the group.', example='tDQvBJqbUyHs****'),
    groupName?: string(name='GroupName', description='The name of the group.', example='aliyun'),
    utcCreate?: string(name='UtcCreate', description='The time when the group was created.', example='2018-09-14T14:35:51.000Z'),
  }(name='Data', description='The group details returned if the call succeeds. This parameter includes the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7411716B-A488-4EEB-9AA0-6DB05AD2491F'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceGroupInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupInfoResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceGroupInfoResponse
 */
async function queryDeviceGroupInfoWithOptions(request: QueryDeviceGroupInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupInfoRequest
  * @return QueryDeviceGroupInfoResponse
 */
async function queryDeviceGroupInfo(request: QueryDeviceGroupInfoRequest): QueryDeviceGroupInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupInfoWithOptions(request, runtime);
}

model QueryDeviceGroupListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  groupName?: string(name='GroupName', description='The name of the group.

*   If you specify this parameter, the system queries groups by group name. You can perform a fuzzy search by group name.
*   If you do not specify this parameter, the system queries all groups.', example='GroupName1'),
  groupTypes?: [ string ](name='GroupTypes', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of the entries to return on each page. Maximum value: 200. Default value: 10.', example='10'),
  superGroupId?: string(name='SuperGroupId', description='The ID of the parent group. If you need to query the subgroups of a parent group, specify this parameter.', example='8vDubXr4nUvZkNgk9mle010200'),
}

model QueryDeviceGroupListResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', description='The description of the group.', example='usefulGroup'),
      groupId?: string(name='GroupId', description='The ID of the group.', example='Kzt9FD8wje8o****'),
      groupName?: string(name='GroupName', description='The name of the group.', example='test1'),
      groupType?: string(name='GroupType', description='The type of the group.', example='LINK_PLATFORM_DYNAMIC'),
      utcCreate?: string(name='UtcCreate', description='The time when the group was created.', example='2018-10-09T02:58:34.000Z'),
    }
  ](name='GroupInfo')
  }(name='Data', description='The group information returned if the call succeeds. For more information, see the GroupInfo parameter.

>  The returned group information is sorted in reverse chronological order in which the groups are created.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='3'),
  pageSize?: int32(name='PageSize', description='The number of entries return on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BEFCA316-D6C7-470C-81ED-1FF4FFD4AA0D'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of records that were returned.', example='24'),
}

model QueryDeviceGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupListResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 100 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceGroupListResponse
 */
async function queryDeviceGroupListWithOptions(request: QueryDeviceGroupListRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupTypes)) {
    query['GroupTypes'] = request.groupTypes;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.superGroupId)) {
    query['SuperGroupId'] = request.superGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 100 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupListRequest
  * @return QueryDeviceGroupListResponse
 */
async function queryDeviceGroupList(request: QueryDeviceGroupListRequest): QueryDeviceGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupListWithOptions(request, runtime);
}

model QueryDeviceGroupTagListRequest {
  groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.', example='W16X8Tvdosec****'),
  groupType?: string(name='GroupType', description='The type of the group.

If you set the value to **LINK_PLATFORM_DYNAMIC**, a dynamic group is queried. If you do not specify this parameter, a static group is queried by default.', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model QueryDeviceGroupTagListResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    groupTagInfo?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='room1'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='bulb'),
    }
  ](name='GroupTagInfo')
  }(name='Data', description='The tag information returned if the call succeeds. For more information, see the following **GroupTagInfo** parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='214154FF-9D47-4E3F-AAAD-F4CE67F41060'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceGroupTagListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceGroupTagListResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupTagListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceGroupTagListResponse
 */
async function queryDeviceGroupTagListWithOptions(request: QueryDeviceGroupTagListRequest, runtime: Util.RuntimeOptions): QueryDeviceGroupTagListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceGroupTagList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceGroupTagListRequest
  * @return QueryDeviceGroupTagListResponse
 */
async function queryDeviceGroupTagList(request: QueryDeviceGroupTagListRequest): QueryDeviceGroupTagListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceGroupTagListWithOptions(request, runtime);
}

model QueryDeviceInfoRequest {
  deviceName?: string(name='DeviceName', description='The ID of the device.

> If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='light'),
  iotId?: string(name='IotId', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ProductKey of the product to which the device belongs.

> If you specify this parameter, you must also specify the **DeviceName** parameter.', example='iot-v64***'),
  productKey?: string(name='ProductKey', description='The DeviceName of the device.

> If you specify this parameter, you must also specify the **ProductKey** parameter.', example='a1BwAGV****'),
}

model QueryDeviceInfoResponseBody = {
  code?: string(name='Code', description='The error message returned if the call fails.', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', description='The DeviceSecret of the device.', example='light'),
    deviceSecret?: string(name='DeviceSecret', description='The ID of the device. The ID is the unique identifier that is issued by IoT Platform to the device.', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
    nickname?: string(name='Nickname', description='The ProductKey of the product to which the device belongs.', example='detectors_in_beijing'),
    productKey?: string(name='ProductKey', description='The DeviceName of the device.', example='a1rYuVF****'),
  }(name='Data', description='The alias of the device.'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='The information about the device returned if the call is successful.', example='true'),
}

model QueryDeviceInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceInfoResponseBody(name='body'),
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request QueryDeviceInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceInfoResponse
 */
async function queryDeviceInfoWithOptions(request: QueryDeviceInfoRequest, runtime: Util.RuntimeOptions): QueryDeviceInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request QueryDeviceInfoRequest
  * @return QueryDeviceInfoResponse
 */
async function queryDeviceInfo(request: QueryDeviceInfoRequest): QueryDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceInfoWithOptions(request, runtime);
}

model QueryDeviceListByDeviceGroupRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.', example='7DIgqIl1Ijnh****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model QueryDeviceListByDeviceGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      deviceName?: string(name='DeviceName', description='The name of each device.', example='ios_1207_08'),
      iotId?: string(name='IotId', description='The ID of the device. The ID is the unique identifier that is issued by IoT Platform to the device.', example='TfmUAeJjQQhCPH84UVNn0010c6****'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1hWjHD****'),
      productName?: string(name='ProductName', description='The ProductName of the product to which the device belongs.', example='WIFIdevice'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data', description='The device list information returned if the call succeeds. For more information, see the following **SimpleDeviceInfo** parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  page?: int32(name='Page', description='The number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B1A921D9-1061-4D45-9F12-EA6B0FDEDE30'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of devices.', example='3'),
}

model QueryDeviceListByDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceListByDeviceGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceListByDeviceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceListByDeviceGroupResponse
 */
async function queryDeviceListByDeviceGroupWithOptions(request: QueryDeviceListByDeviceGroupRequest, runtime: Util.RuntimeOptions): QueryDeviceListByDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceListByDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceListByDeviceGroupRequest
  * @return QueryDeviceListByDeviceGroupResponse
 */
async function queryDeviceListByDeviceGroup(request: QueryDeviceListByDeviceGroupRequest): QueryDeviceListByDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceListByDeviceGroupWithOptions(request, runtime);
}

model QueryDeviceOriginalEventDataRequest {
  asc?: int32(name='Asc', description='The sorting order of the returned event records. Value values:

*   0: descending.
*   1: ascending.', example='0'),
  deviceName?: string(name='DeviceName', description='The name of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a 13-digit timestamp in milliseconds.', example='1516541900303'),
  identifier?: string(name='Identifier', description='The event identifier that you want to query.

*   If low-level verification is applied, you can perform the following steps to view the **Identifier** of a device event: Log on to the IoT Platform console and go to the Define Feature tab of the Product Details page. You can also call the [QueryThingModel](~~150321~~) operation and view the service identifier in the returned TSL data.
*   If no verification is applied, the value must be the same as the value of the custom** identifier** that is submitted by the device.', example='PowerOff'),
  iotId?: string(name='IotId', description='The ID of the device. It is the unique identifier that IoT Platform generated for the device.

>  If you specify this parameter, you do not need to specify the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a unique identifier for the device, and corresponds to a combination of the **ProductKey** and **DeviceName** parameters. If you specify the **IotId** parameter and the combination of the **ProductKey** and **DeviceName** parameters at the same time, only the **IotId** parameter is used.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', description='The identifier of the next page. If the next page exists, this parameter is returned. In this case, you must add the value of the parameter to the next request.', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50. Default value: 10.', example='10'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
  startTime?: long(name='StartTime', description='The start of the time range to query. The value is a 13-digit timestamp in milliseconds.', example='1516538300303'),
}

model QueryDeviceOriginalEventDataResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      eventInfo?: [ 
      {
        eventType?: string(name='EventType', description='The type of the event. Valid values:

*   info: information.
*   alert: alert.
*   error: error.', example='info'),
        identifier?: string(name='Identifier', description='The identifier of the event.', example='PowerOff'),
        name?: string(name='Name', description='The name of the event.'),
        outputData?: string(name='OutputData', description='The output parameter of the event. The value is a string in the MAP format.', example='{"structArgs":{"structchildFLOATf71c20e":1.23}}'),
        time?: string(name='Time', description='The time when the event occurred. The value is a 13-digit timestamp in milliseconds.', example='1579163099000'),
      }
    ](name='EventInfo')
    }(name='List', description='The array of events. Each element represents an event. For more information about the details of the event, see the parameters of the **EventInfo** parameter.'),
    nextPageToken?: string(name='NextPageToken', description='The identifier of the next page.', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists.

*   **true**: The next page exists.
*   **false**: The next page does not exist.

If the value ******true** is returned, you can add the value of the **NextPageToken** parameter**** to the next request. This allows you to query the data that is not included in the current query.', example='true'),
  }(name='Data', description='The event records returned if the call succeeds.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call succeeds.

*   true: The call succeeded.
*   false: The call failed.', example='true'),
}

model QueryDeviceOriginalEventDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalEventDataResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can query only the event records that are generated in the last 30 days.
  * >  The storage period of an event record is calculated from the day when the record is generated.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalEventDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceOriginalEventDataResponse
 */
async function queryDeviceOriginalEventDataWithOptions(request: QueryDeviceOriginalEventDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalEventDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalEventData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can query only the event records that are generated in the last 30 days.
  * >  The storage period of an event record is calculated from the day when the record is generated.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalEventDataRequest
  * @return QueryDeviceOriginalEventDataResponse
 */
async function queryDeviceOriginalEventData(request: QueryDeviceOriginalEventDataRequest): QueryDeviceOriginalEventDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalEventDataWithOptions(request, runtime);
}

model QueryDeviceOriginalPropertyDataRequest {
  asc?: int32(name='Asc', description='The order in which you want to sort the returned property records. Valid values:

*   0: descending.
*   1: ascending.

>  The **start time** must be earlier than the **end time**. The system sorts the returned records based on the specified order.', example='0'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

> If you specify a value for this parameter, you must configure the **ProductKey** parameter.', example='light'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value must be a 13-digit timestamp.', example='1579249499000'),
  identifier?: string(name='Identifier', description='The identifier of the property.

*   If weak verification is used, you can perform the following steps to view the **Identifier** of a device property: Log on to the IoT Platform console and go to the Define Feature tab of the Product Details page. You can also call the [QueryThingModel](~~150321~~) operation and view the property identifier in the returned TSL data.
*   If no verification is used, the value must be the same as the custom **identifier** that is submitted by the device.', example='temperature'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

> The IotId parameter specifies a unique ID for the device. The value of the **IotId** parameter is equivalent to a combination of the values of the **ProductKey** and **DeviceName.N** parameters. If you specify the IotId parameter, you do not need to configure the **ProductKey** or **DeviceName.N** parameter. If you specify values for the **IotId**, **ProductKey**, and **DeviceName.N** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', description='The token that is used to retrieve the next page of the query results. If the next page exists, this parameter is returned. In this case, you must add the value of the parameter to the next request.', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', description='The maximum number of records that can be returned for each property. Maximum value: 100.

The number of records that are returned for an arbitrary property cannot exceed the limit.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.****



> If you specify a value for this parameter, you must configure the **DeviceName** parameter.', example='a1BwAGV****'),
  startTime?: long(name='StartTime', description='The start of the time range to query. The value must be a 13-digit timestamp.', example='1569249488000'),
}

model QueryDeviceOriginalPropertyDataResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', description='The time when the property was modified.', example='1516541885630'),
        value?: string(name='Value', description='The value of the property.', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List', description='The properties. Each element indicates a property.'),
    nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists. 

- **true**: The next page exists.
- **false**: The next page does not exist.

If **true** is returned for the **NextValid** parameter, you can add the value of the **NextPageToken** parameter to the next request. This way, you can query the data that is not included in the current query.', example='true'),
    nextPageToken?: string(name='nextPageToken', description='The token that is used to retrieve the next page of the query results.', example='Bo***x44Qx'),
  }(name='Data', description='The property records returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceOriginalPropertyDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalPropertyDataResponseBody(name='body'),
}

/**
  * You can query only the property records that are generated within the previous 30 days.
  * >  The data of a property is stored from the day when the data is generated.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalPropertyDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceOriginalPropertyDataResponse
 */
async function queryDeviceOriginalPropertyDataWithOptions(request: QueryDeviceOriginalPropertyDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalPropertyDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalPropertyData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query only the property records that are generated within the previous 30 days.
  * >  The data of a property is stored from the day when the data is generated.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalPropertyDataRequest
  * @return QueryDeviceOriginalPropertyDataResponse
 */
async function queryDeviceOriginalPropertyData(request: QueryDeviceOriginalPropertyDataRequest): QueryDeviceOriginalPropertyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalPropertyDataWithOptions(request, runtime);
}

model QueryDeviceOriginalPropertyStatusRequest {
  asc?: int32(name='Asc', description='The chronological order in which property data is queried. Valid values:

*   0: in reverse chronological order.
*   1: in chronological order.', example='0'),
  deviceName?: string(name='DeviceName', description='The name of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. It is the unique identifier that IoT Platform generated for the device.

>  If you specify this parameter, you do not need to specify the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a unique identifier for the device, and corresponds to a combination of the **ProductKey** and **DeviceName** parameters. If you specify the **IotId** parameter and a combination of the **ProductKey** and **DeviceName** parameters at the same time, the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', description='The identifier of the next page. If the next page exists, this parameter is returned. In this case, you must add the value of the parameter to the next request.', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50.', example='10'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model QueryDeviceOriginalPropertyStatusResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.common.InvalidPageParams'),
  data?: {
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier', description='The identifier of the property.', example='Temperture'),
        time?: long(name='Time', description='The time when the property was modified, in milliseconds.', example='1517553572362'),
        value?: string(name='Value', description='The value of the property.', example='26'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List', description='The array of property information. The information about each property is indicated by the **PropertyStatusInfo** parameter.'),
    nextPageToken?: string(name='NextPageToken', description='The identifier of the next page.', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists.

*   **true**: The next page exists.
*   **false**: The next page does not exist.

If the value ******true** is returned, you can add the value of the **NextPageToken** parameter**** to the next query. This allows you to query the data that is not returned by the current query.', example='true'),
  }(name='Data', description='The data returned if the call succeeds. For more information, see the parameters of the List parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call succeeds.

*   true: The call succeeded.
*   false: The call failed.', example='true'),
}

model QueryDeviceOriginalPropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalPropertyStatusResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalPropertyStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceOriginalPropertyStatusResponse
 */
async function queryDeviceOriginalPropertyStatusWithOptions(request: QueryDeviceOriginalPropertyStatusRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalPropertyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalPropertyStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalPropertyStatusRequest
  * @return QueryDeviceOriginalPropertyStatusResponse
 */
async function queryDeviceOriginalPropertyStatus(request: QueryDeviceOriginalPropertyStatusRequest): QueryDeviceOriginalPropertyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalPropertyStatusWithOptions(request, runtime);
}

model QueryDeviceOriginalServiceDataRequest {
  asc?: int32(name='Asc', description='The sorting order of the returned service call records. Valid values:

*   0: descending.
*   1: ascending.

>  **The start time** must be earlier than **the end time**. The system sorts the returned records based on the specified order.', example='0'),
  deviceName?: string(name='DeviceName', description='The name of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value must be a 13-digit timestamp.', example='1579249499000'),
  identifier?: string(name='Identifier', description='The identifier of the service.

*   If low-level verification is applied, you can perform the following steps to view the **Identifier** of a device event: Log on to the IoT Platform console and go to the Define Feature tab of the Product Details page. You can also call the [QueryThingModel](~~150321~~) operation and view the service identifier in the returned TSL data.
*   If no verification is applied, the value must be the same as the value of the custom** identifier** that is submitted by the device.', example='Set'),
  iotId?: string(name='IotId', description='The ID of the device. It is the unique identifier that IoT Platform generated for the device.

>  If you specify this parameter, you do not need to specify the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a unique identifier for the device, and corresponds to a combination of the **ProductKey** and **DeviceName** parameters. If you specify the **IotId** parameter and a combination of the **ProductKey** and **DeviceName** parameters at the same time, the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  nextPageToken?: string(name='NextPageToken', description='The identifier of the next page. The response to the first request contains this parameter, which will be added to the next request.', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.', example='10'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
  startTime?: long(name='StartTime', description='The start of the time range to query. The value must be a 13-digit timestamp.', example='1579249498000'),
}

model QueryDeviceOriginalServiceDataResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.device.InvalidIoTId'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier', description='The identifier of the service.', example='Set'),
        inputData?: string(name='InputData', description='The input parameter of the service. The value is a string in the MAP format. Syntax: key:value.', example='{\\"LightAdjustLevel\\":123}'),
        name?: string(name='Name', description='The service name.'),
        outputData?: string(name='OutputData', description='The output parameter of the service. The value is a string in the MAP format. Syntax: key:value.', example='{\\"code\\":200,\\"data\\":{},\\"id\\":\\"100686\\",\\"message\\":\\"success\\",\\"version\\":\\"1.0\\"}'),
        time?: string(name='Time', description='The time when the service was called.', example='1579249499000'),
      }
    ](name='ServiceInfo')
    }(name='List', description='The array of service call records. Each element represents a service call record. For more information about the details of a service, see the parameters that belong to the **ServiceInfo** parameter.'),
    nextPageToken?: string(name='NextPageToken', description='The identifier of the next page.', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists.

*   **true**: The next page exists.
*   **false**: The next page does not exist.

If the value ******true** is returned, you can add the value of the **NextPageToken** parameter**** to the next request. This allows you to query the data that is not included in the current query.', example='true'),
  }(name='Data', description='The service call records returned if the call succeeds.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call succeeds.

*   true: The call succeeded.
*   false: The call failed.', example='true'),
}

model QueryDeviceOriginalServiceDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceOriginalServiceDataResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You can query only the service call records that are generated in the last 30 days.
  * >  The storage period of a service call record is calculated from the day when the service is called.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalServiceDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceOriginalServiceDataResponse
 */
async function queryDeviceOriginalServiceDataWithOptions(request: QueryDeviceOriginalServiceDataRequest, runtime: Util.RuntimeOptions): QueryDeviceOriginalServiceDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceOriginalServiceData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You can query only the service call records that are generated in the last 30 days.
  * >  The storage period of a service call record is calculated from the day when the service is called.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceOriginalServiceDataRequest
  * @return QueryDeviceOriginalServiceDataResponse
 */
async function queryDeviceOriginalServiceData(request: QueryDeviceOriginalServiceDataRequest): QueryDeviceOriginalServiceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceOriginalServiceDataWithOptions(request, runtime);
}

model QueryDevicePropRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The device ID is issued by IoT Platform.

>  If you specify this parameter, you do not need to specify **ProductKey** or **DeviceName**. The **IotId** parameter specifies a globally unique identifier (GUID) of the device, which corresponds to a combination of **ProductKey** and **DeviceName**. If you specify both **IotId** and the combination of **ProductKey** and **DeviceName**, **IotId** takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.


**Important**

*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model QueryDevicePropResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  props?: string(name='Props', description='A JSON string returned if the call is successful. The JSON string includes the details of the device tags.', example='{"coordinate":"104.07086:30.549169"}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDevicePropResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDevicePropRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDevicePropResponse
 */
async function queryDevicePropWithOptions(request: QueryDevicePropRequest, runtime: Util.RuntimeOptions): QueryDevicePropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceProp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDevicePropRequest
  * @return QueryDevicePropResponse
 */
async function queryDeviceProp(request: QueryDevicePropRequest): QueryDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropWithOptions(request, runtime);
}

model QueryDevicePropertiesDataRequest {
  asc?: int32(name='Asc', description='The sorting order of the returned property records. Valid values:

*   **0**: in reverse chronological order. In this case, the time that is specified by the **StartTime** parameter must be later than the time that is specified by the **EndTime** parameter.
*   **1**: in chronological order. In this case, the time that is specified by the **StartTime** parameter must be earlier than the time that is specified by the **EndTime** parameter.', example='0'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='airconditioning'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a 13-digit timestamp in milliseconds, for example 1579249499000.', example='1579249499000'),
  identifier?: [ string ](name='Identifier', example='temperature'),
  iotId?: string(name='IotId', description='The ID of the device. The device ID is issued by IoT Platform.

>  The **IotId** parameter is a globally unique identifier (GUID), and corresponds to a combination of the **ProductKey** and **DeviceName** parameters. If you specify the **IotId** parameter and a combination of the **ProductKey** and **DeviceName** parameters at the same time, the **IotId** parameter is used.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The maximum number of records that is returned for each property. Maximum value: 100.

The number of records that are returned for an arbitrary property cannot exceed the limit.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
  startTime?: long(name='StartTime', description='The start of the time range to query. The value is a 13-digit timestamp in milliseconds, for example, 1579249499000.', example='1579249499000'),
}

model QueryDevicePropertiesDataResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  nextTime?: long(name='NextTime', description='The start time to query on the next page.

You can use the value of the **NextTime** parameter as the value of the **StartTime** parameter when you query the next page of results.', example='1579249499000'),
  nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists.

*   **true**: The next page exists.
*   **false**: The next page does not exist.

If the return value of the **NextValid** parameter is **true**, you can use the value of the **NextTime** parameter as the value of the **StartTime** parameter when you query the next page of results.', example='true'),
  propertyDataInfos?: {
    propertyDataInfo?: [ 
    {
      identifier?: string(name='Identifier', description='The identifier of the property.', example='temperature'),
      list?: {
        propertyInfo?: [ 
        {
          time?: long(name='Time', description='The time when the property was submitted. The value is a timestamp in milliseconds, such as 1579249499000.', example='1579249499000'),
          value?: string(name='Value', description='The value of the property.', example='21.3'),
        }
      ](name='PropertyInfo')
      }(name='List', description='The list of property records.'),
    }
  ](name='PropertyDataInfo')
  }(name='PropertyDataInfos', description='The list of property records returned if the call is successful. For more information, see **PropertyDataInfo**.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. 

- **true**: The call was successful.
- **false**: The call failed.', example='true'),
}

model QueryDevicePropertiesDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropertiesDataResponseBody(name='body'),
}

/**
  * When you call this operation to query property records within a specified period, the number of records for a property at a point in time may reach the limit.**** The limit is specified by the **PageSize** parameter. In this case, the query stops. Some records of other properties may be not returned.**** You can check whether all records of a property are returned based on the NextValid repsonse parameter: 
  * - If the value of the **NextValid** parameter is true, unretrieved records exist in the period that is indicated by the **NextTime** and **EndTime** parameter.  
  * You can use the value of the **NextTime** response parameter as the value of the StartTime request parameter and call this operation again to query the rest records. You can call this operation multiple times until the value of the **NextValid** parameter is false.  >  To retrieve all property records within a specified period, you can set the **PageSize** parameter to the maximum value. Then, call this operation multiple times until the value of the **NextValid** parameter is false.
  * - If the value of the **NextValid** parameter is false, all property records are returned.
  * ## Limits
  * *   A maximum of 10 properties can be queried at a time. A maximum of 100 records can be queried for each property.
  * *   You can query property data that is generated within the last 30 days.
  * > The storage period of a property record is calculated from the day when the property record was generated.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDevicePropertiesDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDevicePropertiesDataResponse
 */
async function queryDevicePropertiesDataWithOptions(request: QueryDevicePropertiesDataRequest, runtime: Util.RuntimeOptions): QueryDevicePropertiesDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePropertiesData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation to query property records within a specified period, the number of records for a property at a point in time may reach the limit.**** The limit is specified by the **PageSize** parameter. In this case, the query stops. Some records of other properties may be not returned.**** You can check whether all records of a property are returned based on the NextValid repsonse parameter: 
  * - If the value of the **NextValid** parameter is true, unretrieved records exist in the period that is indicated by the **NextTime** and **EndTime** parameter.  
  * You can use the value of the **NextTime** response parameter as the value of the StartTime request parameter and call this operation again to query the rest records. You can call this operation multiple times until the value of the **NextValid** parameter is false.  >  To retrieve all property records within a specified period, you can set the **PageSize** parameter to the maximum value. Then, call this operation multiple times until the value of the **NextValid** parameter is false.
  * - If the value of the **NextValid** parameter is false, all property records are returned.
  * ## Limits
  * *   A maximum of 10 properties can be queried at a time. A maximum of 100 records can be queried for each property.
  * *   You can query property data that is generated within the last 30 days.
  * > The storage period of a property record is calculated from the day when the property record was generated.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDevicePropertiesDataRequest
  * @return QueryDevicePropertiesDataResponse
 */
async function queryDevicePropertiesData(request: QueryDevicePropertiesDataRequest): QueryDevicePropertiesDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertiesDataWithOptions(request, runtime);
}

model QueryDevicePropertyDataRequest {
  asc?: int32(name='Asc', description='The order in which you want to sort the property records that are returned. Valid values:

*   **0**: reverse chronological order
*   **1**: chronological order', example='0'),
  deviceName?: string(name='DeviceName', description='The name of the device.

>If you specify a value for this parameter, you must also specify a value for the **ProductKey** parameter.', example='airconditioning'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value of the EndTime parameter must be greater than the value of the **StartTime** parameter. The value is a timestamp in milliseconds, for example, 1579249499000.', example='1579249499000'),
  identifier?: string(name='Identifier', description='The identifier of the property that you want to query.

You can view the property **identifier** on the Define Feature tab of the Product Details page in the IoT Platform console. You can also call the [QueryThingModel](~~150321~~) operation and view the property identifier in the returned TSL data.

>  If a property named temperature belongs to a custom module named testFb, set this parameter to **testFb:temperature**. The custom module is not the default module.', example='temperature'),
  iotId?: string(name='IotId', description='The ID of the device to which the property belongs.:

You can call the [QueryDeviceInfo](~~257184~~) operation to query the **ID** of the device.

>If you specify a value for this parameter, you do not need to specify a value for the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a globally unique identifier (GUID) for the device. The value of the IotId parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for the **IotId** parameter and values for the **ProductKey** and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not configure this parameter, the call fails.
*   If your instance has no **Overview** page or ID, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>If you specify a value for this parameter, you must also specify a value for the **DeviceName** parameter.', example='a1BwAGV****'),
  startTime?: long(name='StartTime', description='The start of the time range to query. The value of the StartTime parameter must be less than the value of the **EndTime** parameter. The value is a timestamp in milliseconds, for example, 1579249499000.', example='1579249499000'),
}

model QueryDevicePropertyDataResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', description='The time when the property was modified.', example='1516541885630'),
        value?: string(name='Value', description='The value of the property.', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List', description='The list of property records.'),
    nextTime?: long(name='NextTime', description='The start time of the property records on the next page. 

- If the **Asc** parameter is set to **0**, you can specify this value for the **EndTime** parameter when you call this operation again to query the next page of property records.
- If the **Asc** parameter is set to **1**, you can specify this value for the **StartTime** parameter when you call this operation again to query the next page of property records.', example='1579249499000'),
    nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists.

*   **true**: The next page exists. If the return value of the NextValid parameter is true, the value of the **NextTime** parameter is returned. For more information, see the description of the **NextTime** parameter in this topic.
*   **false**: The next page does not exist.', example='true'),
  }(name='Data', description='The property data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDevicePropertyDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropertyDataResponseBody(name='body'),
}

/**
  * If a device or a digital twin node has multiple properties, you can call this operation to query the data of the properties multiple times. You must specify a value for the **Identifier** parameter each time you call the operation. You can also call the [QueryDevicePropertiesData](~~99237~~) operation and specify multiple values for the **Identifier** parameter to query the data of the properties.
  * ## Limits
  * You can query only property data that is generated within the previous 30 days. 
  * >  The data of a property is stored from the day when the data is generated.
  *   
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryDevicePropertyDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDevicePropertyDataResponse
 */
async function queryDevicePropertyDataWithOptions(request: QueryDevicePropertyDataRequest, runtime: Util.RuntimeOptions): QueryDevicePropertyDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePropertyData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If a device or a digital twin node has multiple properties, you can call this operation to query the data of the properties multiple times. You must specify a value for the **Identifier** parameter each time you call the operation. You can also call the [QueryDevicePropertiesData](~~99237~~) operation and specify multiple values for the **Identifier** parameter to query the data of the properties.
  * ## Limits
  * You can query only property data that is generated within the previous 30 days. 
  * >  The data of a property is stored from the day when the data is generated.
  *   
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryDevicePropertyDataRequest
  * @return QueryDevicePropertyDataResponse
 */
async function queryDevicePropertyData(request: QueryDevicePropertyDataRequest): QueryDevicePropertyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertyDataWithOptions(request, runtime);
}

model QueryDevicePropertyStatusRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter, the system queries the data of the default module.', example='BatteryModule'),
  iotId?: string(name='IotId', description='The ID of the device or digital twin node whose property data you want to query.

*   You can call the [QueryDeviceInfo](~~257184~~) operation to query the **ID** of the device.
*   Log on to the IoT Platform console. On the **Twin Details** page, click the digital twin node to view its **ID**.

>If you specify this parameter, you do not need to specify the **ProductKey** and **DeviceName** parameters. The **IotId** parameter specifies a globally unique identifier (GUID) for the device. The value of the IotId parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or instance ID appears in the console, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
}

model QueryDevicePropertyStatusResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyStatusInfo?: [ 
      {
        dataType?: string(name='DataType', description='The data type of the property. Valid values:

*   **int**: integer
*   **float**: single-precision floating-point number
*   **double**: double-precision floating-point number
*   **enum**: enumeration
*   **bool**: Boolean
*   **text**: character
*   **date**: time (string-type UTC timestamp in milliseconds)
*   **array**: array
*   **struct**: structure', example='int'),
        identifier?: string(name='Identifier', description='The identifier of the property.', example='Temperature'),
        name?: string(name='Name', description='The name of the property.', example='temperature'),
        time?: string(name='Time', description='The time when the property was modified, in milliseconds.', example='1517553572362'),
        unit?: string(name='Unit', description='The unit of the property value.', example='°C'),
        value?: string(name='Value', description='The value of the property.', example='25'),
      }
    ](name='PropertyStatusInfo')
    }(name='List', description='The array of property information. The information about each property is indicated by the **PropertyStatusInfo** parameter.'),
  }(name='Data', description='The data returned if the call succeeds. For more information, see **List**.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDevicePropertyStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicePropertyStatusResponseBody(name='body'),
}

/**
  * To query the property data of a digital twin node, you must set the **IotId** parameter to the ID of the digital twin node.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 200 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryDevicePropertyStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDevicePropertyStatusResponse
 */
async function queryDevicePropertyStatusWithOptions(request: QueryDevicePropertyStatusRequest, runtime: Util.RuntimeOptions): QueryDevicePropertyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicePropertyStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * To query the property data of a digital twin node, you must set the **IotId** parameter to the ID of the digital twin node.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 200 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryDevicePropertyStatusRequest
  * @return QueryDevicePropertyStatusResponse
 */
async function queryDevicePropertyStatus(request: QueryDevicePropertyStatusRequest): QueryDevicePropertyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePropertyStatusWithOptions(request, runtime);
}

model QueryDeviceProvisioningRequest {
  deviceName?: string(name='DeviceName', example='testDevcieBwT3Un'),
  productKey?: string(name='ProductKey', example='a1ji*****'),
}

model QueryDeviceProvisioningResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    aliyunUid?: string(name='AliyunUid', example='io****@example.com'),
    deviceName?: string(name='DeviceName', example='testDevcieBwT3Un'),
    gmtCreate?: long(name='GmtCreate', example='1676297683000'),
    gmtModified?: long(name='GmtModified', example='1676297683000'),
    productKey?: string(name='ProductKey', example='a1ji*****'),
    sourceIotInstanceId?: string(name='SourceIotInstanceId', example='iot-6ja****'),
    sourceRegion?: string(name='SourceRegion', example='cn-shanghai'),
    targetIotInstanceId?: string(name='TargetIotInstanceId', example='iot-09k****'),
    targetRegion?: string(name='TargetRegion', example='ap-southeast-1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceProvisioningResponseBody(name='body'),
}

async function queryDeviceProvisioningWithOptions(request: QueryDeviceProvisioningRequest, runtime: Util.RuntimeOptions): QueryDeviceProvisioningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceProvisioning',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceProvisioning(request: QueryDeviceProvisioningRequest): QueryDeviceProvisioningResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceProvisioningWithOptions(request, runtime);
}

model QueryDeviceServiceDataRequest {
  asc?: int32(name='Asc', description='The sorting order of the returned service call records. Valid values:

*   **0**: reverse chronological order
*   **1**: chronological order', example='0'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

> If you specify a value for this parameter, you must configure the **ProductKey** parameter.', example='light'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a Unix timestamp. Unit: milliseconds. Example: 1579249499000.', example='1579249499000'),
  identifier?: string(name='Identifier', description='The identifier of the service. The **identifier** of the service that is called. You can view the service identifier on the Define Feature tab in the IoT Platform console. You can also call the [QueryThingModel](~~150321~~) operation to view the service identifier.

>  If a service named **testService** belongs to a custom module named **testFb**, you can set this parameter to **testFb:testService**. The custom module is not the default module.

If you do not specify a value for this parameter, the system queries all service data of the default module and custom modules.', example='Set'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

> The IotId parameter specifies a GUID for the device. The value of the **IotId** parameter is equivalent to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for this parameter, you do not need to configure the **ProductKey** or **DeviceName** parameter. If you specify values for the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 50.', example='10'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>If you specify a value for this parameter, you must configure the **DeviceName** parameter.', example='a1BwAGV****'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value is a Unix timestamp. Unit: milliseconds. Example: 1579249499000.', example='1579249499000'),
}

model QueryDeviceServiceDataResponseBody = {
  code?: string(name='Code', description='The error code that is returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    list?: {
      serviceInfo?: [ 
      {
        identifier?: string(name='Identifier', description='The identifier of the service.', example='Set'),
        inputData?: string(name='InputData', description='The input parameter of the service. The value is a string in the MAP format. Syntax: `key:value`.', example='{\\"LightAdjustLevel\\":123}'),
        name?: string(name='Name', description='The name of the service.'),
        outputData?: string(name='OutputData', description='The output parameter of the service. The value is a string in the MAP format. Syntax: `key:value`.', example='{\\"code\\":200,\\"data\\":{},\\"id\\":\\"100686\\",\\"message\\":\\"success\\",\\"version\\":\\"1.0\\"}'),
        time?: string(name='Time', description='The time when the service was called.', example='1579249499000'),
      }
    ](name='ServiceInfo')
    }(name='List', description='The array of service call records. Each element represents a service call record.'),
    nextTime?: long(name='NextTime', description='The start time of service call records on the next page. 

If you call the QueryDeviceServiceData operation to query the service call records on the next page, you must set the **StartTime** parameter to the value of this parameter.', example='1579335899000'),
    nextValid?: boolean(name='NextValid', description='Indicates whether the next page exists.

*   **true**
*   **false**

If the return value of the **NextValid** parameter is **true**, you can use the value of the **NextTime** parameter as the value of the **StartTime** parameter when you query the next page of results.', example='true'),
  }(name='Data', description='The service call records returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request. The ID uniquely identifies the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceServiceDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceServiceDataResponseBody(name='body'),
}

/**
  * You can query only the service call records of the previous 30 days.
  * >  The storage period of a service call record is calculated from the day when the service is called.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceServiceDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceServiceDataResponse
 */
async function queryDeviceServiceDataWithOptions(request: QueryDeviceServiceDataRequest, runtime: Util.RuntimeOptions): QueryDeviceServiceDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceServiceData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can query only the service call records of the previous 30 days.
  * >  The storage period of a service call record is calculated from the day when the service is called.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceServiceDataRequest
  * @return QueryDeviceServiceDataResponse
 */
async function queryDeviceServiceData(request: QueryDeviceServiceDataRequest): QueryDeviceServiceDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceServiceDataWithOptions(request, runtime);
}

model QueryDeviceSpeechRequest {
  iotId?: string(name='IotId', example='4de2c367****8c585e5992**'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QueryDeviceSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='ZFDZ'),
        size?: float(name='Size', example='16'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceSpeechResponseBody(name='body'),
}

async function queryDeviceSpeechWithOptions(request: QueryDeviceSpeechRequest, runtime: Util.RuntimeOptions): QueryDeviceSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceSpeech(request: QueryDeviceSpeechRequest): QueryDeviceSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceSpeechWithOptions(request, runtime);
}

model QueryDeviceStatisticsRequest {
  groupId?: string(name='GroupId', description='The ID of the group to which the devices belong.

*   If you specify this parameter, the statistics of the devices that are added to the group is returned. If you also specify **ProductKey**, the statistics of the devices that are created under the product and added to the group is returned.
*   If you do not specify this parameter and **ProductKey**, the statistics of all devices within the current account is returned.', example='W16X8Tvdosec****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the devices belong.

*   If you specify this parameter, the statistics of the devices under the product is returned. If you also specify **GroupId**, the statistics of the devices that are created under the product and added to the group is returned.
*   If you do not specify this parameter and **GroupId**, the statistics of all devices within the current account is returned.', example='a1BwAGV****'),
}

model QueryDeviceStatisticsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    activeCount?: long(name='activeCount', description='The number of activated devices.', example='10'),
    deviceCount?: long(name='deviceCount', description='The total number of devices.', example='100'),
    onlineCount?: long(name='onlineCount', description='The number of online devices.', example='10'),
  }(name='Data', description='The device statistics returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryDeviceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceStatisticsResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceStatisticsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceStatisticsResponse
 */
async function queryDeviceStatisticsWithOptions(request: QueryDeviceStatisticsRequest, runtime: Util.RuntimeOptions): QueryDeviceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceStatistics',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceStatisticsRequest
  * @return QueryDeviceStatisticsResponse
 */
async function queryDeviceStatistics(request: QueryDeviceStatisticsRequest): QueryDeviceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceStatisticsWithOptions(request, runtime);
}

model QueryDeviceSubTopicRequest {
  deviceName?: string(name='DeviceName', description='The name of the device.

You can use the IoT Platform console or call the [QueryDeviceInfo](~~257184~~) operation to view the information about the device.', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of an instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. If you do not specify the instance ID, the call fails.
>*   If the **Overview** page or instance ID is not displayed in the IoT Platform console, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current Alibaba Cloud account.', example='hf768****'),
}

model QueryDeviceSubTopicResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request. The ID uniquely identifies this request.', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  topicList?: [ 
    {
      timestamp?: long(name='Timestamp', description='The time when the device subscribed to a topic. Unit: milliseconds.', example='1662039965873'),
      topicName?: string(name='TopicName', description='The name of the topic.', example='/hf768****/device1/user/test'),
    }
  ](name='TopicList', description='The information about the topics to which the device has subscribed. This parameter is returned if the call was successful.'),
}

model QueryDeviceSubTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceSubTopicResponseBody(name='body'),
}

/**
  * ## QPS limits
  * You can call this operation up to 100 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceSubTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDeviceSubTopicResponse
 */
async function queryDeviceSubTopicWithOptions(request: QueryDeviceSubTopicRequest, runtime: Util.RuntimeOptions): QueryDeviceSubTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceSubTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * You can call this operation up to 100 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryDeviceSubTopicRequest
  * @return QueryDeviceSubTopicResponse
 */
async function queryDeviceSubTopic(request: QueryDeviceSubTopicRequest): QueryDeviceSubTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceSubTopicWithOptions(request, runtime);
}

model QueryDeviceTunnelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
}

model QueryDeviceTunnelResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    description?: string(name='Description'),
    deviceConnState?: string(name='DeviceConnState', example='CONNECTED'),
    deviceName?: string(name='DeviceName', example='light'),
    iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv***00100'),
    productKey?: string(name='ProductKey', example='a1rYuVF***'),
    productName?: string(name='ProductName', example='test'),
    sourceConnState?: string(name='SourceConnState', example='DISCONNECTED'),
    tunnelId?: string(name='TunnelId', example='d4098041-a560-***'),
    tunnelState?: string(name='TunnelState', example='OPEN'),
    udi?: string(name='Udi', example='reboot'),
    utcClosed?: string(name='UtcClosed', example='2021-09-22T12:44:12.000Z'),
    utcCreated?: string(name='UtcCreated', example='2021-09-22T12:44:12.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDeviceTunnelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceTunnelResponseBody(name='body'),
}

async function queryDeviceTunnelWithOptions(request: QueryDeviceTunnelRequest, runtime: Util.RuntimeOptions): QueryDeviceTunnelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tunnelId)) {
    query['TunnelId'] = request.tunnelId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceTunnel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceTunnel(request: QueryDeviceTunnelRequest): QueryDeviceTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceTunnelWithOptions(request, runtime);
}

model QueryDevicesHotStorageDataRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='device1'),
  endTime?: long(name='EndTime', example='1579249499000'),
  identifier?: string(name='Identifier', example='temperature'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  startTime?: long(name='StartTime', example='1579249499000'),
  userTopic?: string(name='UserTopic', example='user/a***/b***'),
}

model QueryDevicesHotStorageDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyInfo?: [ 
      {
        time?: string(name='Time', example='1516541885630'),
        value?: string(name='Value', example='2'),
      }
    ](name='PropertyInfo')
    }(name='List'),
    nextValid?: boolean(name='NextValid', example='true'),
    nextPageToken?: string(name='nextPageToken', example='Bo***x44Qx'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicesHotStorageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicesHotStorageDataResponseBody(name='body'),
}

async function queryDevicesHotStorageDataWithOptions(request: QueryDevicesHotStorageDataRequest, runtime: Util.RuntimeOptions): QueryDevicesHotStorageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.userTopic)) {
    query['UserTopic'] = request.userTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicesHotStorageData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicesHotStorageData(request: QueryDevicesHotStorageDataRequest): QueryDevicesHotStorageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesHotStorageDataWithOptions(request, runtime);
}

model QueryDevicesHotStorageDataStatusRequest {
  asc?: int32(name='Asc', example='0'),
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  userTopic?: string(name='UserTopic', example='user/a***/b***'),
}

model QueryDevicesHotStorageDataStatusResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      propertyStatusDataInfo?: [ 
      {
        identifier?: string(name='Identifier', example='Temperture'),
        time?: long(name='Time', example='1517553572362'),
        value?: string(name='Value', example='22'),
      }
    ](name='PropertyStatusDataInfo')
    }(name='List'),
    nextPageToken?: string(name='NextPageToken', example='Bo***x44Qx'),
    nextValid?: boolean(name='NextValid', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryDevicesHotStorageDataStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDevicesHotStorageDataStatusResponseBody(name='body'),
}

async function queryDevicesHotStorageDataStatusWithOptions(request: QueryDevicesHotStorageDataStatusRequest, runtime: Util.RuntimeOptions): QueryDevicesHotStorageDataStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.asc)) {
    query['Asc'] = request.asc;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextPageToken)) {
    query['NextPageToken'] = request.nextPageToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.userTopic)) {
    query['UserTopic'] = request.userTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDevicesHotStorageDataStatus',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDevicesHotStorageDataStatus(request: QueryDevicesHotStorageDataStatusRequest): QueryDevicesHotStorageDataStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicesHotStorageDataStatusWithOptions(request, runtime);
}

model QueryDynamicGroupDevicesRequest {
  currentPage?: int32(name='CurrentPage', example='2'),
  deviceName?: string(name='DeviceName', example='light'),
  fuzzyName?: boolean(name='FuzzyName', example='true'),
  groupId?: string(name='GroupId', example='tDQvBJqbUyHs***'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-***-v6***'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV***'),
  status?: string(name='Status', example='OFFLINE'),
}

model QueryDynamicGroupDevicesResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    simpleDeviceInfo?: [ 
    {
      activeTime?: string(name='ActiveTime', example='2018-08-06 10:48:41'),
      categoryKey?: string(name='CategoryKey', example='Lighting'),
      deviceName?: string(name='DeviceName', example='light'),
      iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
      lastOnlineTime?: string(name='LastOnlineTime', example='2018-08-06 13:43:12'),
      nickname?: string(name='Nickname', example='detectors_in_beijing'),
      nodeType?: int32(name='NodeType', example='0'),
      productKey?: string(name='ProductKey', example='a1rYuVF***'),
      productName?: string(name='ProductName', example='test'),
      status?: string(name='Status', example='ONLINE'),
      utcActiveTime?: string(name='UtcActiveTime', example='2018-08-06T02:48:41.000Z'),
      utcLastOnlineTime?: string(name='UtcLastOnlineTime', example='2018-08-06T05:43:12.000Z'),
    }
  ](name='SimpleDeviceInfo')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  nextToken?: string(name='NextToken', example='TGlzdFJlc291***'),
  page?: int32(name='Page', example='1'),
  pageCount?: int32(name='PageCount', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='24'),
}

model QueryDynamicGroupDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDynamicGroupDevicesResponseBody(name='body'),
}

async function queryDynamicGroupDevicesWithOptions(request: QueryDynamicGroupDevicesRequest, runtime: Util.RuntimeOptions): QueryDynamicGroupDevicesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.fuzzyName)) {
    query['FuzzyName'] = request.fuzzyName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDynamicGroupDevices',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDynamicGroupDevices(request: QueryDynamicGroupDevicesRequest): QueryDynamicGroupDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDynamicGroupDevicesWithOptions(request, runtime);
}

model QueryEdgeDriverRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1. If you specify a value smaller than 1, pages start from page 1.', example='1'),
  driverName?: string(name='DriverName', description='The name of the driver whose information is to be queried. If you want to query information about drivers with a specific name, set this parameter.', example='MyledDriver'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for public instances. However, this parameter is required for the instances that you have purchased.', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 30. Default value: 10. If you specify a value smaller than 1, a maximum of 10 entries are displayed on each page.', example='15'),
  type?: int32(name='Type', description='The type of the driver whose information is to be queried. Valid values:

*   0: official driver
*   1: custom driver', example='1'),
}

model QueryEdgeDriverResponseBody = {
  code?: string(name='Code', description='The error code. Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    driverList?: [ 
      {
        cpuArch?: string(name='CpuArch', description='The CPU architecture that the driver supports. Valid values:

*   ARMv7
*   ARMv7-HF
*   AArch64
*   x86-64
*   x86', example='x86-64'),
        driverId?: string(name='DriverId', description='The ID of the driver.', example='fec565038d7544978d9aed5c1a******'),
        driverName?: string(name='DriverName', description='The name of the driver.', example='MyLedDriver'),
        driverProtocol?: string(name='DriverProtocol', description='The communications protocol that the driver uses. Valid values:

*   modbus: Modbus protocol
*   opc-ua: OPC UA protocol
*   customize: custom protocol', example='customize'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The time when the driver was created. The time is displayed in UTC.', example='1581912859713'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The time when the driver was last modified. The time is displayed in UTC.', example='1581912859713'),
        isApply?: boolean(name='IsApply', example='false'),
        isBuiltIn?: boolean(name='IsBuiltIn', description='Indicates whether the driver is a built-in driver.

*   true: indicates that the driver is a built-in driver, that is, the driver code is pre-configured on the gateway device.
*   false: indicates that the driver is not a built-in driver.', example='false'),
        runtime?: string(name='Runtime', description='The language in which the driver is programmed. Valid values:

*   nodejs8: Node.js v8
*   python3: Python v3.5
*   c: C', example='c'),
        type?: int32(name='Type', description='The type of the driver. Valid values:

*   0: official driver
*   1: custom driver', example='1'),
      }
    ](name='DriverList', description='The information about each driver.'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='15'),
    total?: int32(name='Total', description='The total number of official or custom drivers found.

*   If the value of Type is 0, the value of this parameter is the total number of official drivers found.
*   If the value of Type is 1, the value of this parameter is the total number of custom drivers found.', example='1'),
  }(name='Data', description='The data returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E0BD540E-DCFE-4602-B6D1-D208E8594BF7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. true indicates that the call was successful. false indicates that the call failed.', example='true'),
}

model QueryEdgeDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeDriverResponseBody(name='body'),
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request QueryEdgeDriverRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryEdgeDriverResponse
 */
async function queryEdgeDriverWithOptions(request: QueryEdgeDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverName)) {
    query['DriverName'] = request.driverName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * A single Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users share the quota of the Alibaba Cloud account.
  *
  * @param request QueryEdgeDriverRequest
  * @return QueryEdgeDriverResponse
 */
async function queryEdgeDriver(request: QueryEdgeDriverRequest): QueryEdgeDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeDriverWithOptions(request, runtime);
}

model QueryEdgeDriverVersionRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from Page 1.', example='1'),
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver whose versions you want to query and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', description='The version number of the driver. To query information about a specific driver version, set this parameter to the specific version number.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 30. Default value: 10.', example='15'),
  versionState?: int32(name='VersionState', description='The status of the driver version. Valid values:

*   0: The driver version to be queried is not published.
*   1: The driver version to be queried is published.', example='0'),
}

model QueryEdgeDriverVersionResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    driverVersionList?: [ 
      {
        argument?: string(name='Argument', description='The Java Virtual Machine (JVM) startup parameter.', example='-XX:+PrintGCDetails'),
        configCheckRule?: string(name='ConfigCheckRule', description='The rule for verifying configurations. The value is a JSON string in the following format:

`{"deviceConfig":{"required":false},"driverConfig":{"required":false}`

The JSON string contains the following parameters:

*   driverConfig: the rule for verifying the configuration of the driver when the driver is to be deployed in an edge instance.
*   deviceConfig: the rule for verifying the configurations of devices that use the driver when the driver is to be deployed in an edge instance.', example='{\\"deviceConfig\\":{\\"required\\":false},\\"driverConfig\\":{\\"required\\":false}}'),
        containerConfig?: string(name='ContainerConfig', description='The configuration of the container where the driver runs. The value is a JSON string. For more information about parameters in the JSON string, see the following parameter description of ContainerConfig.', example='{\\"devMappings\\":[],\\"hostNetworkMode\\":0,\\"portMappings\\":[],\\"privileged\\":1,\\"volumeMappings\\":[]}'),
        description?: string(name='Description', description='The description of the driver.'),
        driverConfig?: string(name='DriverConfig', description='The configuration of the driver. The value is a JSON string in the following format:

`{"format":"JSON","content":"{}"}`

The JSON string contains the following parameters:

*   format: the format of the driver configuration. Valid values: KV (key-value pair), JSON (JSON string), and FILE (configuration file).
*   content: the content of the driver configuration. If the format parameter is set to KV or JSON, the value of this parameter is the configuration content. If the format parameter is set to FILE, the value of this parameter is the URL of the configuration file stored in Object Storage Service (OSS).', example='[{\\"content\\":\\"{\\\\\\"defaultConfig\\\\\\":\\\\\\"this is default driver config demo\\\\\\"}\\",\\"format\\":\\"JSON\\"}]'),
        driverId?: string(name='DriverId', description='The ID of the driver.', example='fec565038d7544978d9aed5c1a******'),
        driverVersion?: string(name='DriverVersion', description='The version number of the driver.', example='1.2.0'),
        edgeVersion?: string(name='EdgeVersion', description='The earliest version of Link IoT Edge that is supported by the driver.', example='2.0.0'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The UNIX timestamp when the driver was created.', example='1581912859713'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The last UNIX timestamp when the driver was updated.', example='1581912859713'),
        sourceConfig?: string(name='SourceConfig', example='{\\"ossAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb3******/ck3n3koe200003h6zf******.zip\\",\\"temporaryOssAddress\\":\\"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb3******/ck3n3koe200003h6zf******.zip?Expires\\u003d1575******\\u0026OSSAccessKeyId\\u003daS4MT0IYr******\\u0026Signature\\u003dm6cpmcaB8rm3YfbkhTYgb0W******\\"}'),
        versionState?: string(name='VersionState', description='The status of the driver version. Valid values:

*   0: The driver version was not published.
*   1: The driver version was published.', example='0'),
      }
    ](name='DriverVersionList', description='The information about each version of the driver.'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='15'),
    total?: int32(name='Total', description='The number of driver versions.', example='1'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABA0CD1F-4270-42FE-84AD-D612240196F7'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model QueryEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeDriverVersionResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeDriverVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryEdgeDriverVersionResponse
 */
async function queryEdgeDriverVersionWithOptions(request: QueryEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): QueryEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.versionState)) {
    query['VersionState'] = request.versionState;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeDriverVersionRequest
  * @return QueryEdgeDriverVersionResponse
 */
async function queryEdgeDriverVersion(request: QueryEdgeDriverVersionRequest): QueryEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeDriverVersionWithOptions(request, runtime);
}

model QueryEdgeInstanceRequest {
  currentPage?: int32(name='CurrentPage', description='The name of the edge instance.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The number of entries to return on each page. Maximum value: 30. Default value: 10. If you specify a value smaller than 1, the system uses 10.', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', description='The error code. Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).'),
  pageSize?: int32(name='PageSize', description='The number of the page from which the results are displayed. The minimum value is 1. If you specify a value smaller than 1, the system uses 1.', example='15'),
}

model QueryEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The error message returned if the call failed.', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The number of entries returned per page.', example='1'),
    instanceList?: [ 
      {
        bizEnable?: boolean(name='BizEnable', description='The time when the edge instance was created.', example='true'),
        gmtCreate?: string(name='GmtCreate', description='The name of the edge instance.', example='2019-07-17 14:34:28'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1581912859713'),
        gmtModified?: string(name='GmtModified', description='The type of the latest deployment task.

*   deploy: deploys the edge instance.
*   Reset: resets the edge instance.', example='2019-07-17 14:51:38'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1581912859713'),
        instanceId?: string(name='InstanceId', description='The name of the RAM role.', example='9iqyQAKDb2aYGVKa****'),
        latestDeploymentStatus?: int32(name='LatestDeploymentStatus', description='Indicates whether the edge instance was enabled.

*   true: enabled
*   false: disabled', example='1'),
        latestDeploymentType?: string(name='LatestDeploymentType', description='The status of the latest deployment task.

*   0: The task has not started.
*   1: The task is being processed.
*   2: The task was successful.
*   3: The task failed.', example='deploy'),
        name?: string(name='Name', example='test_le1'),
        roleArn?: string(name='RoleArn', description='The time when the RAM role was attached to IoT Platform.', example='acs:ram::1473922805******:role/aliyuniotaccessingfcrole'),
        roleAttachTime?: string(name='RoleAttachTime', description='The specification of the edge instance.

*   10: Lite Edition.
*   20: Standard Edition.
*   30: Pro Edition.', example='2020-02-19 11:25:48'),
        roleAttachTimestamp?: long(name='RoleAttachTimestamp', example='1581912859713'),
        roleName?: string(name='RoleName', description='The time when the edge instance was last updated.', example='AliyunIOTAccessingFCRole'),
        spec?: int32(name='Spec', description='The tags of the edge instance.', example='30'),
        tags?: string(name='Tags', description='The ID of the edge instance.', example='k1:v1,k2:v2'),
        type?: int32(name='Type', description='The Alibaba Cloud Resource Name (ARN) of the RAM role.', example='0'),
      }
    ](name='InstanceList', description='Indicates whether you own the edge instance or you are authorized to use the edge instance.

*   0: You own the edge instance.
*   1: You are authorized to use the edge instance.'),
    pageSize?: int32(name='PageSize', description='The number of edge instances.', example='2'),
    total?: int32(name='Total', description='A list of edge instances.', example='201'),
  }(name='Data', description='The page number of the returned page.'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.', example='request parameter error'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. true: indicates that the call was successful. false: indicates that the call failed.', example='199BBC5D-FC99-46CB-88E2-FB98E92446FA'),
  success?: boolean(name='Success', description='The data returned if the call was successful.', example='true'),
}

model QueryEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceResponseBody(name='body'),
}

/**
  * In addition to the preceding exclusive request parameters, you must specify common request parameters when calling this API operation. For more information about common request parameters, see [Common parameters](~~30561~~).
  *
  * @param request QueryEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryEdgeInstanceResponse
 */
async function queryEdgeInstanceWithOptions(request: QueryEdgeInstanceRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding exclusive request parameters, you must specify common request parameters when calling this API operation. For more information about common request parameters, see [Common parameters](~~30561~~).
  *
  * @param request QueryEdgeInstanceRequest
  * @return QueryEdgeInstanceResponse
 */
async function queryEdgeInstance(request: QueryEdgeInstanceRequest): QueryEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceWithOptions(request, runtime);
}

model QueryEdgeInstanceChannelRequest {
  channelName?: string(name='ChannelName', example='le_name0'),
  currentPage?: int32(name='CurrentPage', example='1'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
}

model QueryEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    channelList?: {
      channel?: [ 
      {
        channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
        channelName?: string(name='ChannelName', example='le_name0'),
        configList?: {
          config?: [ 
          {
            configId?: string(name='ConfigId', example='5d6016035c1a451daf174b1051******'),
            content?: string(name='Content', example='{\\"protocol\\":\\"TCP\\", \\"ip\\":\\"1.2.3.4\\", \\"port\\":1}'),
            format?: string(name='Format', example='JSON'),
            key?: string(name='Key', example='key1'),
          }
        ](name='Config')
        }(name='ConfigList'),
        gmtCreate?: string(name='GmtCreate', example='2020-03-16 23:06:52'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', example='1584371212000'),
        gmtModified?: string(name='GmtModified', example='2020-03-16 23:06:52'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', example='1584371212000'),
      }
    ](name='Channel')
    }(name='ChannelList'),
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='AA1EF007-0455-43C7-8E03-39D0BA20F4F5'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceChannelResponseBody(name='body'),
}

async function queryEdgeInstanceChannelWithOptions(request: QueryEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelName)) {
    query['ChannelName'] = request.channelName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceChannel(request: QueryEdgeInstanceChannelRequest): QueryEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceChannelWithOptions(request, runtime);
}

model QueryEdgeInstanceDeviceRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from Page 1.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to query and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='tG7sKuOQ7ylb7qS4****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 30. Default value: 10.', example='15'),
}

model QueryEdgeInstanceDeviceResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    deviceList?: [ 
      {
        deviceName?: string(name='DeviceName', description='The name of the device.', example='test_tmp_zdy'),
        driverId?: string(name='DriverId', description='The ID of the driver.', example='44c090ba7b104641a4b9bcf10241****'),
        iotId?: string(name='IotId', description='The ID of the device.', example='XSpPdtxzE6ebtCkx****000101'),
        productKey?: string(name='ProductKey', description='The key that uniquely identifies the product to which the device belongs.', example='a1p5QfE****'),
      }
    ](name='DeviceList', description='The list of device information.'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='15'),
    total?: int32(name='Total', description='The number of devices.', example='4'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AC76932E-E0C9-41EE-843D-B1CA3279B053'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model QueryEdgeInstanceDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceDeviceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryEdgeInstanceDeviceResponse
 */
async function queryEdgeInstanceDeviceWithOptions(request: QueryEdgeInstanceDeviceRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceDeviceRequest
  * @return QueryEdgeInstanceDeviceResponse
 */
async function queryEdgeInstanceDevice(request: QueryEdgeInstanceDeviceRequest): QueryEdgeInstanceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDeviceWithOptions(request, runtime);
}

model QueryEdgeInstanceDeviceByDriverRequest {
  channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
  currentPage?: int32(name='CurrentPage', example='1'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='15'),
}

model QueryEdgeInstanceDeviceByDriverResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    deviceList?: [ 
      {
        iotId?: string(name='IotId', example='Hathoyxglj9jpYPyw3WN******'),
      }
    ](name='DeviceList'),
    pageSize?: int32(name='PageSize', example='15'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C2AEE142-A9ED-46C5-9EA4-BF0817F0D556'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceDeviceByDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceDeviceByDriverResponseBody(name='body'),
}

async function queryEdgeInstanceDeviceByDriverWithOptions(request: QueryEdgeInstanceDeviceByDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDeviceByDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceDeviceByDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceDeviceByDriver(request: QueryEdgeInstanceDeviceByDriverRequest): QueryEdgeInstanceDeviceByDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDeviceByDriverWithOptions(request, runtime);
}

model QueryEdgeInstanceDriverRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from Page 1.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to query and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 30. Default value: 10.', example='10'),
}

model QueryEdgeInstanceDriverResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    driverList?: [ 
      {
        driverId?: string(name='DriverId', description='The ID of the driver.', example='9c1ae7bd59f1469abbdccc959228****'),
        driverVersion?: string(name='DriverVersion', description='The version number of the driver.', example='1.0.0'),
        gmtCreate?: string(name='GmtCreate', description='The time when the driver was created.', example='2019-06-26 17:22:25'),
        gmtModified?: string(name='GmtModified', description='The last time when the driver was updated.', example='2019-06-26 17:22:25'),
        orderId?: string(name='OrderId', description='The ID of the order.', example='11123458765423'),
      }
    ](name='DriverList', description='The list of drivers.'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='30'),
    total?: int32(name='Total', description='The number of drivers.', example='1'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='77F540BC-A0EF-46A4-ABDE-18644C69AAF5'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model QueryEdgeInstanceDriverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceDriverResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceDriverRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryEdgeInstanceDriverResponse
 */
async function queryEdgeInstanceDriverWithOptions(request: QueryEdgeInstanceDriverRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceDriverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceDriver',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceDriverRequest
  * @return QueryEdgeInstanceDriverResponse
 */
async function queryEdgeInstanceDriver(request: QueryEdgeInstanceDriverRequest): QueryEdgeInstanceDriverResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceDriverWithOptions(request, runtime);
}

model QueryEdgeInstanceGatewayRequest {
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to query and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model QueryEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  gatewayList?: [ 
    {
      deviceName?: string(name='DeviceName', description='The name of the gateway.', example='gateway_01'),
      edgeVersion?: string(name='EdgeVersion', description='The version number of Link IoT Edge.', example='v1.0.0'),
      iotId?: string(name='IotId', description='The ID of the gateway in IoT Platform.', example='LuD9x5hiRUdVemWU****000101'),
      productKey?: string(name='ProductKey', description='The key that uniquely identifies the product to which the gateway belongs.', example='a1mAdeG****'),
    }
  ](name='GatewayList', description='The data that is returned if the call was successful.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model QueryEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceGatewayResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceGatewayRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryEdgeInstanceGatewayResponse
 */
async function queryEdgeInstanceGatewayWithOptions(request: QueryEdgeInstanceGatewayRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceGateway',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceGatewayRequest
  * @return QueryEdgeInstanceGatewayResponse
 */
async function queryEdgeInstanceGateway(request: QueryEdgeInstanceGatewayRequest): QueryEdgeInstanceGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceGatewayWithOptions(request, runtime);
}

model QueryEdgeInstanceHistoricDeploymentRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from Page 1.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. If you do not specify the start time and end time, all the deployment task records of the edge instance are queried.', example='1561543998639'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to manage and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='PgEfYupSn6Pvhfkx****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 30. Default value: 10.', example='15'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. If you do not specify the start time and end time, all the deployment task records of the edge instance are queried.', example='1558951998639'),
}

model QueryEdgeInstanceHistoricDeploymentResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    deploymentList?: [ 
      {
        deploymentId?: string(name='DeploymentId', description='The ID of the deployment task.', example='e4803e566b424fa68e7f4b1c747c****'),
        description?: string(name='Description', description='The description of the deployment task.', example='deploy_1561694817061'),
        gmtCompleted?: string(name='GmtCompleted', description='The time when the deployment task was complete.', example='2019-06-28 12:07:16'),
        gmtCompletedTimestamp?: long(name='GmtCompletedTimestamp', description='The UNIX timestamp when the deployment task was complete.', example='1581912859713'),
        gmtCreate?: string(name='GmtCreate', description='The time when the deployment task was created.', example='2019-06-26 18:12:29'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp', description='The UNIX timestamp when the deployment task was created.', example='1581912859713'),
        gmtModified?: string(name='GmtModified', description='The last time when the deployment task was modified.', example='2019-06-28 12:07:16'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp', description='The last UNIX timestamp when the deployment task was modified.', example='1581912859713'),
        status?: int32(name='Status', description='The status of the deployment task.

*   0: The task was not started.
*   1: The task was being processed.
*   2: The task was successful.
*   3: The task failed.', example='2'),
        type?: string(name='Type', description='The type of the deployment task.

*   deploy: deploys the edge instance.
*   reset: resets the edge instance.', example='deploy'),
      }
    ](name='DeploymentList', description='The list of deployment tasks.'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    total?: int32(name='Total', description='The total number of deployment tasks.', example='6'),
  }(name='Data', description='The data that is returned if the call was successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989E4'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model QueryEdgeInstanceHistoricDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceHistoricDeploymentResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceHistoricDeploymentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryEdgeInstanceHistoricDeploymentResponse
 */
async function queryEdgeInstanceHistoricDeploymentWithOptions(request: QueryEdgeInstanceHistoricDeploymentRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceHistoricDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceHistoricDeployment',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryEdgeInstanceHistoricDeploymentRequest
  * @return QueryEdgeInstanceHistoricDeploymentResponse
 */
async function queryEdgeInstanceHistoricDeployment(request: QueryEdgeInstanceHistoricDeploymentRequest): QueryEdgeInstanceHistoricDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceHistoricDeploymentWithOptions(request, runtime);
}

model QueryEdgeInstanceMessageRoutingRequest {
  currentPage?: int32(name='CurrentPage'),
  instanceId?: string(name='InstanceId'),
  iotInstanceId?: string(name='IotInstanceId'),
  pageSize?: int32(name='PageSize'),
}

model QueryEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code'),
  data?: {
    currentPage?: int32(name='CurrentPage'),
    messageRouteList?: {
      messageRoute?: [ 
      {
        gmtCreate?: string(name='GmtCreate'),
        gmtCreateTimestamp?: long(name='GmtCreateTimestamp'),
        gmtModified?: string(name='GmtModified'),
        gmtModifiedTimestamp?: long(name='GmtModifiedTimestamp'),
        name?: string(name='Name'),
        routeContext?: {
          qos?: string(name='Qos'),
          sourceApplicationName?: string(name='SourceApplicationName'),
          sourceFcFunctionName?: string(name='SourceFcFunctionName'),
          sourceFcServiceName?: string(name='SourceFcServiceName'),
          targetApplicationName?: string(name='TargetApplicationName'),
          targetFcFunctionName?: string(name='TargetFcFunctionName'),
          targetFcServiceName?: string(name='TargetFcServiceName'),
        }(name='RouteContext'),
        routeId?: int32(name='RouteId'),
        sourceData?: string(name='SourceData'),
        sourceType?: string(name='SourceType'),
        targetData?: string(name='TargetData'),
        targetType?: string(name='TargetType'),
        topicFilter?: string(name='TopicFilter'),
      }
    ](name='MessageRoute')
    }(name='MessageRouteList'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function queryEdgeInstanceMessageRoutingWithOptions(request: QueryEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceMessageRouting(request: QueryEdgeInstanceMessageRoutingRequest): QueryEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model QueryEdgeInstanceSceneRuleRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  instanceId?: string(name='InstanceId', example='llL44UVXUqb9m5******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryEdgeInstanceSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1582004185000'),
        isExisted?: int32(name='IsExisted', example='1'),
        ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
        ruleName?: string(name='RuleName', example='test'),
        status?: int32(name='Status', example='1'),
      }
    ](name='RuleList'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4C3331B-0FA8-4A05-AFE2-54F698EDEAF7'),
  success?: boolean(name='Success', example='true'),
}

model QueryEdgeInstanceSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEdgeInstanceSceneRuleResponseBody(name='body'),
}

async function queryEdgeInstanceSceneRuleWithOptions(request: QueryEdgeInstanceSceneRuleRequest, runtime: Util.RuntimeOptions): QueryEdgeInstanceSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEdgeInstanceSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEdgeInstanceSceneRule(request: QueryEdgeInstanceSceneRuleRequest): QueryEdgeInstanceSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEdgeInstanceSceneRuleWithOptions(request, runtime);
}

model QueryImportedDeviceByApplyIdRequest {
  applyId?: long(name='ApplyId', example='1295006'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-1n8t****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryImportedDeviceByApplyIdResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  deviceList?: {
    device?: [ 
    {
      deviceName?: string(name='DeviceName', example='light'),
      deviceSecret?: string(name='DeviceSecret', example='b4d43f7******10ba5e5'),
      productKey?: string(name='ProductKey', example='a1BwAGV****'),
      sn?: string(name='Sn', example='QC4******001'),
    }
  ](name='device')
  }(name='DeviceList'),
  errorMessage?: string(name='ErrorMessage'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
  totalPage?: int32(name='TotalPage', example='100'),
}

model QueryImportedDeviceByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryImportedDeviceByApplyIdResponseBody(name='body'),
}

async function queryImportedDeviceByApplyIdWithOptions(request: QueryImportedDeviceByApplyIdRequest, runtime: Util.RuntimeOptions): QueryImportedDeviceByApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryImportedDeviceByApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryImportedDeviceByApplyId(request: QueryImportedDeviceByApplyIdRequest): QueryImportedDeviceByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryImportedDeviceByApplyIdWithOptions(request, runtime);
}

model QueryJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='450407b***'),
}

model QueryJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    description?: string(name='Description', example='jobDescription'),
    jobDocument?: string(name='JobDocument'),
    jobFile?: {
      fileUrl?: string(name='FileUrl', example='https://iotx-***.oss-cn-shanghai.aliyuncs.com/job***/7u***.sh?Expires=16***&OSSAccessKeyId=LTA***&Signature=TTTejn***'),
      sign?: string(name='Sign', example='TTTejn***'),
      signMethod?: string(name='SignMethod', example='SHA256'),
    }(name='JobFile'),
    jobId?: string(name='JobId', example='450407b***'),
    jobName?: string(name='JobName', example='tes'),
    rolloutConfig?: {
      maximumPerMinute?: int32(name='MaximumPerMinute', example='10'),
      messageQoS?: string(name='MessageQoS', example='Qos1'),
    }(name='RolloutConfig'),
    scheduledTime?: long(name='ScheduledTime', example='1557062301656'),
    status?: string(name='Status', example='CANCELLED'),
    targetConfig?: {
      targetDevices?: {
        targetDevices?: [ 
        {
          deviceName?: string(name='DeviceName', example='a1Ix***'),
          productKey?: string(name='ProductKey', example='nCwfSBzc***'),
        }
      ](name='targetDevices')
      }(name='TargetDevices'),
      targetGroup?: string(name='TargetGroup', example='1234'),
      targetProduct?: string(name='TargetProduct', example='nCwfSBzc***'),
      targetType?: string(name='TargetType', example='DEVICE_LIST'),
    }(name='TargetConfig'),
    timeoutConfig?: {
      inProgressTimeoutInMinutes?: int32(name='InProgressTimeoutInMinutes', example='5'),
    }(name='TimeoutConfig'),
    type?: string(name='Type', example='SET_PROPERTY'),
    utcCreate?: string(name='UtcCreate', example='2020-12-13T04:09:51.000Z'),
    utcModified?: string(name='UtcModified', example='2020-12-13T04:10:00.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A6BEAB33-03E6-4CE0-A94F-9E24C5512BAD'),
  success?: boolean(name='Success', example='true'),
}

model QueryJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryJobResponseBody(name='body'),
}

async function queryJobWithOptions(request: QueryJobRequest, runtime: Util.RuntimeOptions): QueryJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryJob(request: QueryJobRequest): QueryJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobWithOptions(request, runtime);
}

model QueryJobStatisticsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='sGWotgRkut***10001'),
}

model QueryJobStatisticsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    cancelled?: int32(name='Cancelled', example='3'),
    failed?: int32(name='Failed', example='1'),
    inProgress?: int32(name='InProgress', example='13'),
    queued?: int32(name='Queued', example='2'),
    rejected?: int32(name='Rejected', example='1'),
    sent?: int32(name='Sent', example='3'),
    succeeded?: int32(name='Succeeded', example='22'),
    timeOut?: int32(name='TimeOut', example='5'),
    total?: int32(name='Total', example='50'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model QueryJobStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryJobStatisticsResponseBody(name='body'),
}

async function queryJobStatisticsWithOptions(request: QueryJobStatisticsRequest, runtime: Util.RuntimeOptions): QueryJobStatisticsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryJobStatistics',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryJobStatistics(request: QueryJobStatisticsRequest): QueryJobStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobStatisticsWithOptions(request, runtime);
}

model QueryLicenseDeviceListRequest {
  endTime?: long(name='EndTime', example='1620934297000'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-ws4***'),
  licenseCode?: string(name='LicenseCode', example='720P'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  productKey?: string(name='ProductKey', example='es****'),
  startTime?: long(name='StartTime', example='1620634297000'),
}

model QueryLicenseDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      item?: [ 
      {
        deviceName?: string(name='DeviceName', example='device1'),
        expiryTime?: long(name='ExpiryTime', example='1690934297000'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        licenseCode?: string(name='LicenseCode', example='720P'),
        productKey?: string(name='ProductKey', example='es****'),
        productName?: string(name='ProductName'),
      }
    ](name='item')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='2'),
    total?: int32(name='Total', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', example='true'),
}

model QueryLicenseDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLicenseDeviceListResponseBody(name='body'),
}

async function queryLicenseDeviceListWithOptions(request: QueryLicenseDeviceListRequest, runtime: Util.RuntimeOptions): QueryLicenseDeviceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.pageId)) {
    query['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryLicenseDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLicenseDeviceList(request: QueryLicenseDeviceListRequest): QueryLicenseDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLicenseDeviceListWithOptions(request, runtime);
}

model QueryLoRaJoinPermissionsRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QueryLoRaJoinPermissionsResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  joinPermissions?: {
    joinPermission?: [ 
    {
      classMode?: string(name='ClassMode', example='A'),
      enabled?: boolean(name='Enabled', example='true'),
      joinPermissionId?: string(name='JoinPermissionId', example='80***'),
      joinPermissionName?: string(name='JoinPermissionName', example='ForTest'),
      joinPermissionType?: string(name='JoinPermissionType', example='LOCAL'),
      ownerAliyunPk?: string(name='OwnerAliyunPk', example='1375364789****'),
    }
  ](name='JoinPermission')
  }(name='JoinPermissions'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryLoRaJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryLoRaJoinPermissionsResponseBody(name='body'),
}

async function queryLoRaJoinPermissionsWithOptions(request: QueryLoRaJoinPermissionsRequest, runtime: Util.RuntimeOptions): QueryLoRaJoinPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryLoRaJoinPermissions',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryLoRaJoinPermissions(request: QueryLoRaJoinPermissionsRequest): QueryLoRaJoinPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLoRaJoinPermissionsWithOptions(request, runtime);
}

model QueryMessageInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t***'),
  uniMsgId?: string(name='UniMsgId', example='323455***'),
}

model QueryMessageInfoResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  message?: {
    generateTime?: long(name='GenerateTime', example='1624419431000'),
    messageContent?: string(name='MessageContent', example='eyJsYXN0VGltZSI6IjIwMjEtMDYtMjQgMTY6Mj**'),
    topicFullName?: string(name='TopicFullName', example='/a1Q5XoY****/device1/user/get'),
    uniMsgId?: string(name='UniMsgId', example='323455***'),
    userProperties?: [ 
      {
        key?: string(name='Key', example='key1'),
        value?: string(name='Value', example='value1'),
      }
    ](name='UserProperties'),
  }(name='Message'),
  requestId?: string(name='RequestId', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', example='true'),
}

model QueryMessageInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMessageInfoResponseBody(name='body'),
}

async function queryMessageInfoWithOptions(request: QueryMessageInfoRequest, runtime: Util.RuntimeOptions): QueryMessageInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.uniMsgId)) {
    query['UniMsgId'] = request.uniMsgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMessageInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryMessageInfo(request: QueryMessageInfoRequest): QueryMessageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMessageInfoWithOptions(request, runtime);
}

model QueryOTAFirmwareRequest {
  firmwareId?: string(name='FirmwareId', description='The unique ID of the OTA update package.

An update package ID is returned when you call the [CreateOTAFirmware](~~147311~~) operation to create the update package.

You can call the [ListOTAFirmware](~~147450~~) operation and view the update package ID in the response.', example='s8SSHiKjpBfrM3BSN0z803****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model QueryOTAFirmwareResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  firmwareInfo?: {
    destVersion?: string(name='DestVersion', description='The version number of the OTA update package.', example='4.0.0'),
    firmwareDesc?: string(name='FirmwareDesc', description='The description of the OTA update package.', example='modified-WiFi-module'),
    firmwareId?: string(name='FirmwareId', description='The unique ID of the OTA update package.', example='UfuxnwygsuSkVE0VCN****0100'),
    firmwareName?: string(name='FirmwareName', description='The name of the OTA update package.', example='t3q5rkNm'),
    firmwareSign?: string(name='FirmwareSign', description='The signature of the OTA update package.

>  This parameter is available if the OTA update package contains a single file.', example='3d04ab6462633508606e5f3daac8****'),
    firmwareSize?: int32(name='FirmwareSize', description='The size of the OTA update package file. Unit: bytes.

>  This parameter is available if the OTA update package contains a single file.', example='924'),
    firmwareUrl?: string(name='FirmwareUrl', description='The URL of the update package file that is stored in Object Storage Service (OSS).

>  This parameter is available if the OTA update package contains a single file.', example='https://ota-***.aliyuncs.com/ota/572ef2fd12ca4791a5b21a9eb948****/5E962CF83DB1495E8337E9C8A4D1****.bin?Expires=1577587360&OSSAccessKeyId=cS8uRRy54Rsz****&Signature=farzC8%2FVMN4HYdEtXvdiC2OevH****'),
    moduleName?: string(name='ModuleName', description='The name of the module.

OTA updates are based on the firmware modules of a device. For more information, see [Add a custom OTA module to an update package](~~202664~~).', example='WifiConfigModify'),
    multiFiles?: [ 
      {
        fileMd5?: string(name='FileMd5', description='The MD5 value of the OTA update package file.', example='3d04ab6462633508606e5f3d****'),
        name?: string(name='Name', description='The name of the OTA update package file.', example='firmware1'),
        signValue?: string(name='SignValue', description='The signature of the OTA update package file.', example='3d04ab6462633508606e5f3d****'),
        size?: int32(name='Size', description='The size of the OTA update package file. Unit: bytes.', example='200'),
        url?: string(name='Url', description='The URL of the update package file that is stored in Object Storage Service (OSS).', example='https://ota-***.aliyuncs.com/ota/572ef2fd12ca4791a5b21a9eb948****/5E962CF83DB1495E8337E9C8A4D1****.bin?Expires=1577587360&OSSAccessKeyId=cS8uRRy54Rsz****&Signature=farzC8%2FVMN4HYdEtXvdiC2OevH****'),
      }
    ](name='MultiFiles', description='The information about the OTA update package files. This parameter is available if the OTA update package contains multiple files.'),
    productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the OTA update package belongs.', example='a19mzPZ****'),
    productName?: string(name='ProductName', description='The name of the product to which the OTA update package belongs.', example='MyProduct'),
    signMethod?: string(name='SignMethod', description='The signature method of the OTA update package.', example='MD5'),
    srcVersion?: string(name='SrcVersion', description='The version number of the original update package to be updated.

>  This parameter is returned if you perform a delta update. For more information about update package types, see the description of the **Type** parameter.', example='1.0.0'),
    status?: int32(name='Status', description='The status of the OTA update package. Valid values:

*   **-1**: no verification is required
*   **0**: unverified
*   **1**: verified
*   **2**: verifying
*   **3**: failed to be verified', example='2'),
    type?: int32(name='Type', description='The type of the OTA update package. Valid values:

*   **0**: The uploaded file contains a full update package. IoT Platform pushes the full update package to a device for update.
*   **1**: The uploaded file contains only the differences between the latest update package and previous update package. IoT Platform pushes only the differences to a device for update.', example='0'),
    udi?: string(name='Udi', description='The custom information that was pushed to the device. The information can be up to 4,096 characters in length. No limit is applies to the content format.

After you add the update package and create an update task, IoT Platform sends the custom information to the specified device when IoT Platform pushes the update notification.'),
    utcCreate?: string(name='UtcCreate', description='The time when the OTA update package was created. The time is displayed in UTC.', example='2019-12-28T02:42:22.000Z'),
    utcModified?: string(name='UtcModified', description='The time when the update task was last modified. The time is displayed in UTC.', example='2019-12-28T02:42:41.000Z'),
    verifyProgress?: int32(name='VerifyProgress', description='The verification status of the OTA update package. Valid values:

*   **0**: unverified
*   **100**: verified
*   A value N between 0 and 100 indicates that the update task is N percent completed. You can check the response parameter **Status** to see the verification status.', example='0'),
  }(name='FirmwareInfo', description='The update package information returned if the call succeeds. For more information, see **FirmwareInfo**.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A01829CE-75A1-4920-B775-921146A1AB79'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryOTAFirmwareResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOTAFirmwareResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryOTAFirmwareRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryOTAFirmwareResponse
 */
async function queryOTAFirmwareWithOptions(request: QueryOTAFirmwareRequest, runtime: Util.RuntimeOptions): QueryOTAFirmwareResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firmwareId)) {
    query['FirmwareId'] = request.firmwareId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOTAFirmware',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryOTAFirmwareRequest
  * @return QueryOTAFirmwareResponse
 */
async function queryOTAFirmware(request: QueryOTAFirmwareRequest): QueryOTAFirmwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOTAFirmwareWithOptions(request, runtime);
}

model QueryOTAJobRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', description='The ID of the update batch.

After you call the [CreateOTAVerifyJob](~~147480~~), [CreateOTAStaticUpgradeJob](~~147496~~), or [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create the update batch, you can obtain the **JobId** parameter. You can also view the batch ID on the **Update Package Details** page of the IoT Platform console.', example='wahVIzGkCMuAUE2gDERM02****'),
}

model QueryOTAJobResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    destVersion?: string(name='DestVersion', description='The destination firmware version of the update.', example='1.0.1'),
    downloadProtocol?: string(name='DownloadProtocol', description='The download protocol of the update package.', example='HTTPS'),
    dynamicMode?: int32(name='DynamicMode', description='The mode of dynamic update. Valid values:

*   **1**: constantly updates the devices that meet the conditions.
*   **2**: updates only the devices that subsequently submit the latest firmware versions.

This parameter is returned only if you perform a dynamic update.', example='1'),
    firmwareId?: string(name='FirmwareId', description='The ID of the update package.', example='UfuxnwygsuSkVE0VCN****0100'),
    grayPercent?: string(name='GrayPercent', description='The phase ratio of the phased update.

This parameter is returned only if you perform a phased update.', example='50.00'),
    groupId?: string(name='GroupId', description='The ID of the device group to be updated.', example='CtjzCkNuOxUR***'),
    groupName?: string(name='GroupName', description='The name of the device group to be updated.', example='test'),
    jobDesc?: string(name='JobDesc', description='The description of the update batch.', example='batch upgrade'),
    jobId?: string(name='JobId', description='The ID of the update batch.', example='HvKuBpuk3rdk6E92CP****0200'),
    jobStatus?: string(name='JobStatus', description='The status of the update batch.

*   **PLANNED**: The update batch is being planned. The batch is created, but the scheduled time has not arrived. This parameter is returned only if you perform a static update.
*   **IN_PROGRESS**: The update batch is running.
*   **COMPLETED**: The update batch is completed.
*   **CANCELED**: The update batch is canceled.', example='IN_PROGRESS'),
    jobType?: string(name='JobType', description='The type of the batch. Valid values:

*   **VERFIY_FIRMWARE**: update package verification.
*   **UPGRADE_FIRMWARE**: batch update.', example='UPGRADE_FIRMWARE'),
    maximumPerMinute?: int32(name='MaximumPerMinute', description='The maximum number of devices to which the download URL of the update package is pushed per minute.', example='1000'),
    multiModuleMode?: boolean(name='MultiModuleMode', description='Specifies whether the device supports simultaneous updates of multiple modules.

*   **false** (default): no.
*   **true**: yes.

For more information, see [Overview](~~58328~~).', example='false'),
    name?: string(name='Name', description='The name of the update package.', example='Firmware2'),
    needConfirm?: boolean(name='NeedConfirm', description='Specifies whether to confirm the update by using your mobile app.', example='false'),
    needPush?: boolean(name='NeedPush', description='Specifies whether to automatically push update tasks from IoT Platform to devices.', example='true'),
    overwriteMode?: int32(name='OverwriteMode', description='Specifies whether to overwrite the previous update task. Valid values:

*   **1**: The previous update task is not overwritten. If a device already has an update task, the previous update task is implemented.
*   **2**: The previous update task is overwritten. Only the current update task is implemented.

The update task that is in progress is not overwritten.', example='1'),
    productKey?: string(name='ProductKey', description='The ProductKey of the product to which the update package belongs.', example='a19mzPZ****'),
    retryCount?: int32(name='RetryCount', description='The number of automatic retries after a device fails to be updated.

This parameter is returned if a retry policy is set when you create the update batch.', example='1'),
    retryInterval?: int32(name='RetryInterval', description='The automatic retry interval after a device fails to be updated. Unit: minutes.

This parameter is returned if a retry policy is set when you create the update batch.', example='60'),
    selectionType?: string(name='SelectionType', description='The update policy of the update batch. Valid values:

*   **DYNAMIC**: dynamic update. This value is returned if you call the [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create an update batch.
*   **STATIC**: static update. This value is returned if you call the [CreateOTAStaticUpgradeJob](~~147496~~) API operation to create an update batch.', example='STATIC'),
    srcVersions?: {
      srcVersion?: [ string ](name='SrcVersion')
    }(name='SrcVersions', description='The list of firmware versions to be updated.'),
    tags?: {
      otaTagDTO?: [ 
      {
        key?: string(name='Key', description='The key of each tag.', example='key1'),
        value?: string(name='Value', description='The value of the tag.', example='value1'),
      }
    ](name='OtaTagDTO')
    }(name='Tags', description='The tags of the update batch.'),
    targetSelection?: string(name='TargetSelection', description='The scope of the update batch. Valid values: 

- **ALL**: updates all devices.
- **SPECIFIC**: updates specified devices.
- **GRAY**: performs a phased update.

>  The value ALL is returned if you call the [CreateOTADynamicUpgradeJob](/help/en/iot-platform/latest/av6dui) API operation to create an update batch.', example='SPECIFIC'),
    timeoutInMinutes?: int32(name='TimeoutInMinutes', description='The timeout period of the device update. Unit: minutes.

This parameter is returned if the timeout period is set when you create the update batch.', example='5'),
    utcCreate?: string(name='UtcCreate', description='The time when the update batch was created. The time is displayed in UTC.', example='2019-12-28T02:43:10.000Z'),
    utcEndTime?: string(name='UtcEndTime', description='The end time of the update batch. The time is displayed in UTC.

This parameter is returned only after the update batch is completed.', example='2019-12-29T02:43:10.000Z'),
    utcModified?: string(name='UtcModified', description='The time when the update batch was last modified. The time is displayed in UTC.', example='2019-12-28T02:43:10.000Z'),
    utcScheduleFinishTime?: string(name='UtcScheduleFinishTime', description='The end time of the scheduled update batch. This parameter is returned only if the update batch is scheduled and the end time of the scheduled update batch is specified.', example='2019-12-30T02:43:10.000Z'),
    utcScheduleTime?: string(name='UtcScheduleTime', description='The start time of the scheduled update batch. This parameter is returned only for scheduled update batches.', example='2019-12-29T02:43:10.000Z'),
    utcStartTime?: string(name='UtcStartTime', description='The start time of the update batch. The time is displayed in UTC.', example='2019-12-28T02:43:10.000Z'),
  }(name='Data', description='The update batch information returned if the call is successful. For more information, see the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='30F1BB8D-EDBF-44FD-BBC0-BE97DEA73991'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryOTAJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOTAJobResponseBody(name='body'),
}

/**
  * After you call the [CreateOTAVerifyJob](~~147480~~), [CreateOTAStaticUpgradeJob](~~147496~~), or [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create an update batch, the **JobId** parameter is returned. You can use this parameter to query the details of the update batch.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryOTAJobRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryOTAJobResponse
 */
async function queryOTAJobWithOptions(request: QueryOTAJobRequest, runtime: Util.RuntimeOptions): QueryOTAJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOTAJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you call the [CreateOTAVerifyJob](~~147480~~), [CreateOTAStaticUpgradeJob](~~147496~~), or [CreateOTADynamicUpgradeJob](~~147887~~) API operation to create an update batch, the **JobId** parameter is returned. You can use this parameter to query the details of the update batch.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryOTAJobRequest
  * @return QueryOTAJobResponse
 */
async function queryOTAJob(request: QueryOTAJobRequest): QueryOTAJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOTAJobWithOptions(request, runtime);
}

model QueryPageByApplyIdRequest {
  applyId?: long(name='ApplyId', description='The ID of the application. You can view the application ID in the response of the [BatchRegisterDeviceWithApplyId](~~69514~~) or [BatchRegisterDevice](~~69473~~) operation.', example='1295006'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50. Default value: 10.', example='10'),
}

model QueryPageByApplyIdResponseBody = {
  applyDeviceList?: {
    applyDeviceInfo?: [ 
    {
      deviceId?: string(name='DeviceId', description='The ID of the device (expired).

>  This parameter is no longer used. Do not use this parameter to identify a device. You can use the **IotId** parameter or a combination of the **ProductKey** and **DeviceName** parameters to identify a device.', example='gQG2GJ2y10m6hIk8****'),
      deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
      deviceSecret?: string(name='DeviceSecret', description='The DeviceSecret of the device.', example='SkfeXXKrTgp1DbDxYr74mfJ5cnui****'),
      iotId?: string(name='IotId', description='The ID of the device. The ID is the unique identifier that is issued by IoT Platform to the device.', example='vWxNur6BUApsqjv9****000100'),
    }
  ](name='ApplyDeviceInfo')
  }(name='ApplyDeviceList', description='The registered device list information returned if the call succeeds. The **ApplyDeviceInfo** parameter includes the details of the registered devices.'),
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](/help/en/iot-platform/latest/bce100).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  page?: int32(name='Page', description='The page number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  total?: int32(name='Total', description='The total number of devices.', example='2'),
}

model QueryPageByApplyIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPageByApplyIdResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryPageByApplyIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryPageByApplyIdResponse
 */
async function queryPageByApplyIdWithOptions(request: QueryPageByApplyIdRequest, runtime: Util.RuntimeOptions): QueryPageByApplyIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applyId)) {
    query['ApplyId'] = request.applyId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPageByApplyId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryPageByApplyIdRequest
  * @return QueryPageByApplyIdResponse
 */
async function queryPageByApplyId(request: QueryPageByApplyIdRequest): QueryPageByApplyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPageByApplyIdWithOptions(request, runtime);
}

model QueryProductRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

> *   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>  *   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product that you want to query. A ProductKey is a GUID that is issued by IoT Platform to a product. You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
}

model QueryProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    aliyunCommodityCode?: string(name='AliyunCommodityCode', description='The type of the product. This parameter indicates whether a Thing Specification Language (TSL) model was used.

Valid values:

*   **iothub_senior**: A TSL model was used.
*   **iothub**: No TSL model was used.', example='iothub_senior'),
    authType?: string(name='AuthType', description='The authentication method that was used to connect the devices of the product to IoT Platform. Valid values:

*   **secret**: DeviceSecrets were used to authenticate the devices.
*   **id2**: IoT Internet Device ID was used to authenticate the devices.
*   **x509**: X.509 certificates were used to authenticate the devices.', example='secret'),
    categoryKey?: string(name='CategoryKey', description='The identifier of the category to which the product belongs.

This parameter is returned if the product uses the TSL model of a standard category that is pre-defined by IoT Platform.

This parameter is available if the AliyunCommodityCode parameter is set to iothub_senior.', example='Lighting'),
    categoryName?: string(name='CategoryName', description='The name of the product category.

This parameter is returned if the product uses the TSL model of a standard category that is pre-defined by IoT Platform.

This parameter is available if the AliyunCommodityCode parameter is set to iothub_senior.'),
    dataFormat?: int32(name='DataFormat', description='The data format that was used by a communication protocol to transmit data between the devices and IoT Platform. This parameter is available if the AliyunCommodityCode parameter is set to iothub_senior.

Valid values:

*   **0**: custom. A custom serial data format was used. In this case, the device can submit raw data, such as binary data streams. IoT Platform converts the raw data into standard Alink JSON data by using a specified data parsing script.
*   **1**: Alink JSON. Alink JSON data is transmitted between the devices and IoT Platform. Alink is a data exchange protocol that is pre-defined by IoT Platform.', example='1'),
    description?: string(name='Description', description='The description of the product.'),
    deviceCount?: int32(name='DeviceCount', description='The number of devices under the product.', example='0'),
    gmtCreate?: long(name='GmtCreate', description='The time when the product was created. The value is a timestamp in milliseconds.', example='1581595942000'),
    id2?: boolean(name='Id2', description='Indicates whether IoT Internet Device ID was enabled. Valid values:

*   **true**: IoT Internet Device ID was enabled.
*   **false**: IoT Internet Device ID was disabled.', example='false'),
    netType?: int32(name='NetType', description='The network connection method. Valid values:

*   **3**: Wi-Fi.
*   **6**: cellular network (2G/3G/4G/5G).
*   **7**: Ethernet.
*   **8**: others.', example='3'),
    nodeType?: int32(name='NodeType', description='The node type of the product. This parameter is available if the AliyunCommodityCode parameter is set to iothub_senior. Valid values:

*   **0**: device. Sub-devices cannot be attached to a device. A device can connect to IoT Platform directly or as a sub-device of a gateway.
*   **1**: gateway. Sub-devices can be attached to a gateway. A gateway can manage sub-devices, maintain the topological relationships with sub-devices, and synchronize the topological relationships to IoT Platform.', example='0'),
    owner?: boolean(name='Owner', description='Indicates whether the operation was called by the owner of the product.

*   **true**: yes.
*   **false**: no.', example='true'),
    productKey?: string(name='ProductKey', description='The ProductKey of the product. When you create a product, a ProductKey is the globally unique identifier (GUID) that is issued by IoT Platform to the product.', example='a1T27vz****'),
    productName?: string(name='ProductName', description='The name of the product.'),
    productSecret?: string(name='ProductSecret', description='The ProductSecret of the product.', example='U5tW7i44uilc****'),
    productStatus?: string(name='ProductStatus', description='The status of the product.

*   **DEVELOPMENT_STATUS**: The product is being developed.
*   **RELEASE_STATUS**: The product was published.', example='DEVELOPMENT_STATUS'),
    protocolType?: string(name='ProtocolType', description='The type of the protocol that was used by the sub-devices to connect with a gateway.

This parameter is available if the AliyunCommodityCode parameter is set to iothub_senior and the NodeType parameter is set to 1. Valid values:

*   **modbus**: Modbus.
*   **opc-ua**: OPC UA.
*   **customize**: custom protocol.
*   **ble**: BLE.
*   **zigbee**: ZigBee.', example='modbus'),
    validateType?: int32(name='ValidateType', description='The level of the data verification. Valid values:

*   **2**: no verification. IoT Platform does not verify the data. All data is forwarded.

    In the IoT Platform console, the data is not displayed on the TSL Data tab of the Device Details page.

*   **1**: low-level verification. IoT Platform verifies only the identifier and dataType fields of the data. All data is forwarded.

*   **0**: high-level verification. IoT Platform verifies all fields of the data. Only the data that passes the verification is forwarded.

    The products that were created before October 14, 2020 support only high-level verification.

The products that were created on October 14, 2020 or later support low-level verification or no verification.

After verification, you can view the data that passes or fails the verification.

*   In the IoT Platform console, the data is displayed on the **TSL Data** tab of the **Device Details** page. The data that fails the verification is not displayed.
*   You can view the data that fails the verification in the **checkFailedData** parameter of the forwarded data. For more information, see [Data formats](~~73736~~).', example='1'),
  }(name='Data', description='The product information returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryProductResponse
 */
async function queryProductWithOptions(request: QueryProductRequest, runtime: Util.RuntimeOptions): QueryProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryProductRequest
  * @return QueryProductResponse
 */
async function queryProduct(request: QueryProductRequest): QueryProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductWithOptions(request, runtime);
}

model QueryProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', example='a2YwD23****'),
}

model QueryProductCertInfoResponseBody = {
  code?: string(name='Code', example='MissingProductKey'),
  errorMessage?: string(name='ErrorMessage', example='ProductKey is mandatory for this action.'),
  productCertInfo?: {
    issueModel?: int32(name='IssueModel', example='1'),
  }(name='ProductCertInfo'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductCertInfoResponseBody(name='body'),
}

async function queryProductCertInfoWithOptions(request: QueryProductCertInfoRequest, runtime: Util.RuntimeOptions): QueryProductCertInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductCertInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProductCertInfo(request: QueryProductCertInfoRequest): QueryProductCertInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductCertInfoWithOptions(request, runtime);
}

model QueryProductListRequest {
  aliyunCommodityCode?: string(name='AliyunCommodityCode', description='The type of the product. Valid values:

*   **iothub_senior**: A Thing Specification Language (TSL) model is used for the product.
*   **iothub**: No TSL model is used for the product.

>  If you do not configure this parameter, all products are returned.', example='iothub_senior'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return.', example='1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.


> *   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
> *   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 200.', example='2'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the product belongs. You can log on to the [Resource Management](https://resourcemanager.console.aliyun.com/resource-groups) console to view the details of the resource group.

> You can specify a value for this parameter only if you have activated Resource Management.

If you leave this parameter empty, the information about all products in the current account is queried.', example='rg-acfmxazb4ph****'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    list?: {
      productInfo?: [ 
      {
        authType?: string(name='AuthType', description='The authentication method that was used to connect the devices of the product to IoT Platform. Valid values:

*   **secret**: DeviceSecrets were used to authenticate the devices.
*   **id2**: IoT Internet Device ID was used to authenticate the devices.
*   **x509**: X.509 certificates were used to authenticate the devices.', example='secret'),
        dataFormat?: int32(name='DataFormat', description='The data format that was used by a communication protocol to transmit data between the devices and IoT Platform. This parameter is available only if the AliyunCommodityCode parameter is set to iothub_senior.

Valid values:

*   **0**: custom. A custom serial data format was used. In this case, the device can submit raw data, such as binary data streams. IoT Platform converts the raw data into standard Alink JSON data by using a specified data parsing script.
*   **1**: Alink JSON. Alink JSON data is transmitted between the devices and IoT Platform. Alink is a data exchange protocol that is pre-defined by IoT Platform.', example='1'),
        description?: string(name='Description', description='The description of the product.', example='This is a test product.'),
        deviceCount?: int32(name='DeviceCount', description='The number of devices in the product.', example='128'),
        gmtCreate?: long(name='GmtCreate', description='The time when the product was created. The value is a timestamp in milliseconds.', example='1581595942000'),
        nodeType?: int32(name='NodeType', description='The node type of the product. This parameter is available only if the AliyunCommodityCode parameter is set to iothub_senior. Valid values:

*   **0**: device. Sub-devices cannot be attached to a device. A device can be directly connected to IoT Platform or connected to IoT Platform as a sub-device of a gateway.
*   **1**: gateway. Sub-devices can be attached to a gateway. A gateway can manage sub-devices, maintain topological relationships with sub-devices, and synchronize topological relationships to IoT Platform.', example='0'),
        productKey?: string(name='ProductKey', description='The ProductKey of the product. When you create a product, a ProductKey is a globally unique identifier (GUID) that is issued by IoT Platform to the product.', example='a1T27vz****'),
        productName?: string(name='ProductName', description='The name of the service.'),
      }
    ](name='ProductInfo')
    }(name='List', description='The details of the products.

>  The returned product information is sorted in reverse-chronological order based on the time when the products were created.'),
    pageCount?: int32(name='PageCount', description='The total number of returned pages.', example='92'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
    total?: int32(name='Total', description='The total number of products.', example='184'),
  }(name='Data', description='The product information returned if the call is successful. For more information, see the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4B4ECF2C-6222-42EC-A4B5-C12202E71CEA'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductListResponseBody(name='body'),
}

/**
  * ## QPS limits
  * *   Each Alibaba Cloud account can run up to 50 queries per second (QPS).
  * > The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  * *   If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the QPS of this operation decreases.
  *     In this case, each Alibaba Cloud account can run up to 2 QPS.
  *
  * @param request QueryProductListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryProductListResponse
 */
async function queryProductListWithOptions(request: QueryProductListRequest, runtime: Util.RuntimeOptions): QueryProductListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliyunCommodityCode)) {
    query['AliyunCommodityCode'] = request.aliyunCommodityCode;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * *   Each Alibaba Cloud account can run up to 50 queries per second (QPS).
  * > The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  * *   If the product of the value of the **CurrentPage** parameter and the value of the **PageSize** parameter is greater than or equal to 100,000, the QPS of this operation decreases.
  *     In this case, each Alibaba Cloud account can run up to 2 QPS.
  *
  * @param request QueryProductListRequest
  * @return QueryProductListResponse
 */
async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductListWithOptions(request, runtime);
}

model QueryProductTopicRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.', example='HMyB*******'),
}

model QueryProductTopicResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    productTopicInfo?: [ 
    {
      codec?: string(name='Codec'),
      desc?: string(name='Desc', description='The description of the topic category.', example='topicDesc'),
      enableProxySubscribe?: boolean(name='EnableProxySubscribe'),
      id?: string(name='Id', description='The ID of the topic category.', example='821****'),
      operation?: string(name='Operation', description='The operation that devices can perform on the topic category. Valid values:

*   **0**: Publish.
*   **1**: Subscribe.
*   **2**: Publish and Subscribe.', example='1'),
      productKey?: string(name='ProductKey', description='The ProductKey of the product.', example='HMyB***'),
      topicShortName?: string(name='TopicShortName', description='The topic category that does not include the \\_productKey\\_ and \\_deviceName\\_ levels.', example='/HMyB***/${deviceName}/user/get'),
    }
  ](name='ProductTopicInfo')
  }(name='Data', description='The list of topic categories returned if the call is successful. For more information, see **ProductTopicInfo**.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B953EAFF-CFF6-4FF8-BC94-8B89F018E4DD'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductTopicResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 3 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryProductTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryProductTopicResponse
 */
async function queryProductTopicWithOptions(request: QueryProductTopicRequest, runtime: Util.RuntimeOptions): QueryProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 3 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryProductTopicRequest
  * @return QueryProductTopicResponse
 */
async function queryProductTopic(request: QueryProductTopicRequest): QueryProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductTopicWithOptions(request, runtime);
}

model QueryProjectShareDeviceListRequest {
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QueryProjectShareDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        sharable?: long(name='Sharable', example='1'),
      }
    ](name='items')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model QueryProjectShareDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProjectShareDeviceListResponseBody(name='body'),
}

async function queryProjectShareDeviceListWithOptions(request: QueryProjectShareDeviceListRequest, runtime: Util.RuntimeOptions): QueryProjectShareDeviceListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryProjectShareDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProjectShareDeviceList(request: QueryProjectShareDeviceListRequest): QueryProjectShareDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProjectShareDeviceListWithOptions(request, runtime);
}

model QuerySceneRuleRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  ruleName?: string(name='RuleName', example='test'),
}

model QuerySceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    ruleList?: [ 
      {
        gmtCreate?: long(name='GmtCreate', example='1582004185000'),
        gmtModified?: long(name='GmtModified', example='1582098176000'),
        ruleDescription?: string(name='RuleDescription'),
        ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
        ruleName?: string(name='RuleName', example='test'),
        ruleStatus?: int32(name='RuleStatus', example='1'),
      }
    ](name='RuleList'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='D4C3331B-0FA8-4A05-AFE2-54F698EDEAF7'),
  success?: boolean(name='Success', example='true'),
}

model QuerySceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneRuleResponseBody(name='body'),
}

async function querySceneRuleWithOptions(request: QuerySceneRuleRequest, runtime: Util.RuntimeOptions): QuerySceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneRule(request: QuerySceneRuleRequest): QuerySceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySceneRuleWithOptions(request, runtime);
}

model QuerySchedulePeriodListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model QuerySchedulePeriodListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        description?: string(name='Description', example='test'),
        endTime?: string(name='EndTime', example='00:10'),
        periodCode?: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********'),
        soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
        startTime?: string(name='StartTime', example='00:00'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySchedulePeriodListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySchedulePeriodListResponseBody(name='body'),
}

async function querySchedulePeriodListWithOptions(request: QuerySchedulePeriodListRequest, runtime: Util.RuntimeOptions): QuerySchedulePeriodListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySchedulePeriodList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySchedulePeriodList(request: QuerySchedulePeriodListRequest): QuerySchedulePeriodListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySchedulePeriodListWithOptions(request, runtime);
}

model QueryShareTaskDeviceListRequest {
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  shareTaskId?: string(name='ShareTaskId', example='Md3ZiTL888K9llXDy7890***********'),
}

model QueryShareTaskDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        gmtAdded?: long(name='GmtAdded', example='1620624606000'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='items')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryShareTaskDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryShareTaskDeviceListResponseBody(name='body'),
}

async function queryShareTaskDeviceListWithOptions(request: QueryShareTaskDeviceListRequest, runtime: Util.RuntimeOptions): QueryShareTaskDeviceListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shareTaskId)) {
    body['ShareTaskId'] = request.shareTaskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryShareTaskDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryShareTaskDeviceList(request: QueryShareTaskDeviceListRequest): QueryShareTaskDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryShareTaskDeviceListWithOptions(request, runtime);
}

model QuerySolutionDeviceGroupPageRequest {
  fuzzyGroupName?: string(name='FuzzyGroupName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
}

model QuerySolutionDeviceGroupPageResponseBody = {
  code?: string(name='Code', example='iot.tcloud.ProjectNotFound'),
  data?: {
    list?: {
      itemName?: [ 
      {
        deviceCount?: long(name='DeviceCount', example='100'),
        gmtCreate?: long(name='GmtCreate', example='1356565656'),
        gmtModified?: long(name='GmtModified', example='1357865658'),
        groupDesc?: string(name='GroupDesc', example='description'),
        groupId?: string(name='GroupId', example='4de2c367****8c585e5992**'),
        groupName?: string(name='GroupName', example='test***'),
      }
    ](name='itemName')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='project not found'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySolutionDeviceGroupPageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySolutionDeviceGroupPageResponseBody(name='body'),
}

async function querySolutionDeviceGroupPageWithOptions(request: QuerySolutionDeviceGroupPageRequest, runtime: Util.RuntimeOptions): QuerySolutionDeviceGroupPageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fuzzyGroupName)) {
    query['FuzzyGroupName'] = request.fuzzyGroupName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    query['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    query['ProjectCode'] = request.projectCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySolutionDeviceGroupPage',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySolutionDeviceGroupPage(request: QuerySolutionDeviceGroupPageRequest): QuerySolutionDeviceGroupPageResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySolutionDeviceGroupPageWithOptions(request, runtime);
}

model QuerySoundCodeLabelBatchFailedResultRequest {
  batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model QuerySoundCodeLabelBatchFailedResultResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    items?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='sound code label exist'),
      label?: string(name='Label', example='test'),
      resultCode?: string(name='ResultCode', example='7541'),
    }
  ](name='Items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelBatchFailedResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeLabelBatchFailedResultResponseBody(name='body'),
}

async function querySoundCodeLabelBatchFailedResultWithOptions(request: QuerySoundCodeLabelBatchFailedResultRequest, runtime: Util.RuntimeOptions): QuerySoundCodeLabelBatchFailedResultResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchCode)) {
    body['BatchCode'] = request.batchCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeLabelBatchFailedResult',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeLabelBatchFailedResult(request: QuerySoundCodeLabelBatchFailedResultRequest): QuerySoundCodeLabelBatchFailedResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeLabelBatchFailedResultWithOptions(request, runtime);
}

model QuerySoundCodeLabelBatchListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model QuerySoundCodeLabelBatchListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
        description?: string(name='Description', example='test'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        status?: string(name='Status', example='RUNNING'),
        successNum?: int32(name='SuccessNum', example='1'),
        total?: int32(name='Total', example='20'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelBatchListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeLabelBatchListResponseBody(name='body'),
}

async function querySoundCodeLabelBatchListWithOptions(request: QuerySoundCodeLabelBatchListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeLabelBatchListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeLabelBatchList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeLabelBatchList(request: QuerySoundCodeLabelBatchListRequest): QuerySoundCodeLabelBatchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeLabelBatchListWithOptions(request, runtime);
}

model QuerySoundCodeLabelListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model QuerySoundCodeLabelListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        label?: string(name='Label', example='test'),
        soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeLabelListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeLabelListResponseBody(name='body'),
}

async function querySoundCodeLabelListWithOptions(request: QuerySoundCodeLabelListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeLabelListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeLabelList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeLabelList(request: QuerySoundCodeLabelListRequest): QuerySoundCodeLabelListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeLabelListWithOptions(request, runtime);
}

model QuerySoundCodeListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QuerySoundCodeListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        duration?: int32(name='Duration', example='2'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        name?: string(name='Name', example='test1'),
        openType?: string(name='OpenType', example='OPEN'),
        soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
        soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeListResponseBody(name='body'),
}

async function querySoundCodeListWithOptions(request: QuerySoundCodeListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeList(request: QuerySoundCodeListRequest): QuerySoundCodeListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeListWithOptions(request, runtime);
}

model QuerySoundCodeScheduleListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='20'),
  pageSize?: int32(name='PageSize', example='1'),
}

model QuerySoundCodeScheduleListResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        description?: string(name='Description', example='test'),
        endDate?: string(name='EndDate', example='2022-03-28'),
        endTime?: string(name='EndTime', example='23:59'),
        gmtCreate?: long(name='GmtCreate', example='1620634297000'),
        name?: string(name='Name', example='test'),
        openType?: string(name='OpenType', example='INNER'),
        scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
        startDate?: string(name='StartDate', example='2022-03-28'),
        startTime?: string(name='StartTime', example='00:00'),
        status?: string(name='Status', example='WORKING'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySoundCodeScheduleListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySoundCodeScheduleListResponseBody(name='body'),
}

async function querySoundCodeScheduleListWithOptions(request: QuerySoundCodeScheduleListRequest, runtime: Util.RuntimeOptions): QuerySoundCodeScheduleListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySoundCodeScheduleList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySoundCodeScheduleList(request: QuerySoundCodeScheduleListRequest): QuerySoundCodeScheduleListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySoundCodeScheduleListWithOptions(request, runtime);
}

model QuerySpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
}

model QuerySpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    audioFormat?: string(name='AudioFormat', example='wav'),
    bizCode?: string(name='BizCode', example='identifying'),
    enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
    soundCodeConfig?: {
      additionalDuration?: int32(name='AdditionalDuration', example='3'),
      soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
    }(name='SoundCodeConfig'),
    speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
    speechRate?: int32(name='SpeechRate', example='0'),
    speechType?: string(name='SpeechType', example='custom'),
    text?: string(name='Text', example='test'),
    voice?: string(name='Voice', example='Siyue'),
    volume?: int32(name='Volume', example='50'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechResponseBody(name='body'),
}

async function querySpeechWithOptions(request: QuerySpeechRequest, runtime: Util.RuntimeOptions): QuerySpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.speechCode)) {
    body['SpeechCode'] = request.speechCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeech(request: QuerySpeechRequest): QuerySpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechWithOptions(request, runtime);
}

model QuerySpeechDeviceRequest {
  availableSpace?: string(name='AvailableSpace', example='500'),
  availableSpaceScope?: string(name='AvailableSpaceScope', example='smaller'),
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
}

model QuerySpeechDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      items?: [ 
      {
        availableSpace?: float(name='AvailableSpace', example='200'),
        deviceName?: string(name='DeviceName', example='test'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechDeviceResponseBody(name='body'),
}

async function querySpeechDeviceWithOptions(request: QuerySpeechDeviceRequest, runtime: Util.RuntimeOptions): QuerySpeechDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.availableSpace)) {
    body['AvailableSpace'] = request.availableSpace;
  }
  if (!Util.isUnset(request.availableSpaceScope)) {
    body['AvailableSpaceScope'] = request.availableSpaceScope;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechDevice(request: QuerySpeechDeviceRequest): QuerySpeechDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechDeviceWithOptions(request, runtime);
}

model QuerySpeechLicenseAvailableQuotaRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
}

model QuerySpeechLicenseAvailableQuotaResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: long(name='Data', example='120'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechLicenseAvailableQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechLicenseAvailableQuotaResponseBody(name='body'),
}

async function querySpeechLicenseAvailableQuotaWithOptions(request: QuerySpeechLicenseAvailableQuotaRequest, runtime: Util.RuntimeOptions): QuerySpeechLicenseAvailableQuotaResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechLicenseAvailableQuota',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechLicenseAvailableQuota(request: QuerySpeechLicenseAvailableQuotaRequest): QuerySpeechLicenseAvailableQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechLicenseAvailableQuotaWithOptions(request, runtime);
}

model QuerySpeechLicenseDeviceListRequest {
  checkGroupId?: string(name='CheckGroupId', example='4de2c367****8c585e5992**'),
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  licenseStatusList?: [ string ](name='LicenseStatusList', example='NORMAL'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
}

model QuerySpeechLicenseDeviceListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceList?: {
      item?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        deviceStatus?: string(name='DeviceStatus', example='ONLINE'),
        expiryTime?: long(name='ExpiryTime', example='1620624606000'),
        inSpecifiedGroup?: boolean(name='InSpecifiedGroup', example='true'),
        iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
        licenseStatus?: string(name='LicenseStatus', example='NORMAL'),
        productKey?: string(name='ProductKey', example='a1BwAGV****'),
        productName?: string(name='ProductName', example='test'),
      }
    ](name='item')
    }(name='DeviceList'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechLicenseDeviceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechLicenseDeviceListResponseBody(name='body'),
}

async function querySpeechLicenseDeviceListWithOptions(request: QuerySpeechLicenseDeviceListRequest, runtime: Util.RuntimeOptions): QuerySpeechLicenseDeviceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    query['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkGroupId)) {
    body['CheckGroupId'] = request.checkGroupId;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.licenseStatusList)) {
    body['LicenseStatusList'] = request.licenseStatusList;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechLicenseDeviceList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechLicenseDeviceList(request: QuerySpeechLicenseDeviceListRequest): QuerySpeechLicenseDeviceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechLicenseDeviceListWithOptions(request, runtime);
}

model QuerySpeechListRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
}

model QuerySpeechListResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        audioFormat?: string(name='AudioFormat', example='wav'),
        bizCode?: string(name='BizCode', example='identifying'),
        speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode', example='identifying'),
            speechCode?: string(name='SpeechCode', example='4de2c367****8c585e5992**'),
            text?: string(name='Text', example='test'),
            voice?: string(name='Voice', example='Siyue'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType', example='custom'),
        text?: string(name='Text', example='test'),
        voice?: string(name='Voice', example='Siyue'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='100'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechListResponseBody(name='body'),
}

async function querySpeechListWithOptions(request: QuerySpeechListRequest, runtime: Util.RuntimeOptions): QuerySpeechListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechList(request: QuerySpeechListRequest): QuerySpeechListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechListWithOptions(request, runtime);
}

model QuerySpeechPushJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****'),
  jobCode?: string(name='JobCode', example='tBUm***********************QPGT'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectCode?: string(name='ProjectCode', example='0Ykj************************Av0I'),
  pushMode?: string(name='PushMode', example='ALL'),
  statusList?: [ string ](name='StatusList', example='RUNNING'),
}

model QuerySpeechPushJobResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        code?: string(name='Code', example='tBUm***********************QPGT'),
        createdTime?: long(name='CreatedTime', example='1620634297000'),
        deviceName?: string(name='DeviceName', example='test'),
        expiredTime?: long(name='ExpiredTime', example='1620634297000'),
        failDeviceNum?: int32(name='FailDeviceNum', example='1'),
        groupId?: string(name='GroupId', example='test_group'),
        groupName?: string(name='GroupName'),
        iotId?: string(name='IotId', example='0iOf*****************n001'),
        productKey?: string(name='ProductKey', example='den0ZLt****'),
        pushMode?: string(name='PushMode', example='ALL'),
        runningDeviceNum?: int32(name='RunningDeviceNum', example='2'),
        speechNum?: int32(name='SpeechNum', example='1'),
        speechStatus?: boolean(name='SpeechStatus', example='true'),
        status?: string(name='Status', example='RUNNING'),
        successDeviceNum?: int32(name='SuccessDeviceNum', example='1'),
        totalDeviceNum?: int32(name='TotalDeviceNum', example='3'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechPushJobResponseBody(name='body'),
}

async function querySpeechPushJobWithOptions(request: QuerySpeechPushJobRequest, runtime: Util.RuntimeOptions): QuerySpeechPushJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobCode)) {
    query['JobCode'] = request.jobCode;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.pushMode)) {
    body['PushMode'] = request.pushMode;
  }
  if (!Util.isUnset(request.statusList)) {
    body['StatusList'] = request.statusList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechPushJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechPushJob(request: QuerySpeechPushJobRequest): QuerySpeechPushJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechPushJobWithOptions(request, runtime);
}

model QuerySpeechPushJobDeviceRequest {
  deviceName?: string(name='DeviceName', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****'),
  jobCode?: string(name='JobCode', example='tBUm***********************QPGT'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  status?: string(name='Status', example='SUCCESS'),
}

model QuerySpeechPushJobDeviceResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        deviceName?: string(name='DeviceName', example='test'),
        errorCode?: string(name='ErrorCode', example='2'),
        errorMessage?: string(name='ErrorMessage', example='device storage limited'),
        gmtModified?: long(name='GmtModified', example='1620624606000'),
        status?: string(name='Status', example='SUCCESS'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechPushJobDeviceResponseBody(name='body'),
}

async function querySpeechPushJobDeviceWithOptions(request: QuerySpeechPushJobDeviceRequest, runtime: Util.RuntimeOptions): QuerySpeechPushJobDeviceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobCode)) {
    body['JobCode'] = request.jobCode;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechPushJobDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechPushJobDevice(request: QuerySpeechPushJobDeviceRequest): QuerySpeechPushJobDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechPushJobDeviceWithOptions(request, runtime);
}

model QuerySpeechPushJobSpeechRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-060*****'),
  jobCode?: string(name='JobCode', example='0Ykj************************Av0I'),
  pageId?: int32(name='PageId', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QuerySpeechPushJobSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    list?: {
      items?: [ 
      {
        bizCode?: string(name='BizCode', example='ZFDZ'),
        speechList?: {
          items?: [ 
          {
            bizCode?: string(name='BizCode', example='SYS_TONE_0'),
            text?: string(name='Text', example='1'),
            voice?: string(name='Voice', example='Xiaoyun'),
          }
        ](name='Items')
        }(name='SpeechList'),
        speechType?: string(name='SpeechType', example='CUSTOM'),
        text?: string(name='Text'),
        voice?: string(name='Voice', example='Xiaoyun'),
      }
    ](name='Items')
    }(name='List'),
    pageId?: int32(name='PageId', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model QuerySpeechPushJobSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySpeechPushJobSpeechResponseBody(name='body'),
}

async function querySpeechPushJobSpeechWithOptions(request: QuerySpeechPushJobSpeechRequest, runtime: Util.RuntimeOptions): QuerySpeechPushJobSpeechResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobCode)) {
    body['JobCode'] = request.jobCode;
  }
  if (!Util.isUnset(request.pageId)) {
    body['PageId'] = request.pageId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySpeechPushJobSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySpeechPushJobSpeech(request: QuerySpeechPushJobSpeechRequest): QuerySpeechPushJobSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySpeechPushJobSpeechWithOptions(request, runtime);
}

model QueryStudioAppDomainListOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model QueryStudioAppDomainListOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      domainInfo?: [ 
      {
        appId?: string(name='AppId', example='a12*******'),
        gmtCreate?: string(name='GmtCreate', example='1619598445000'),
        gmtModified?: string(name='GmtModified', example='1619598445000'),
        host?: string(name='Host', example='example.com'),
        id?: int32(name='Id', example='1548'),
        isBeian?: string(name='IsBeian', example='YES'),
        projectId?: string(name='ProjectId', example='a123********'),
        protocol?: string(name='Protocol', example='https'),
        tenantId?: string(name='TenantId', example='C70B541046F64EAAB*********'),
      }
    ](name='DomainInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppDomainListOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioAppDomainListOpenResponseBody(name='body'),
}

async function queryStudioAppDomainListOpenWithOptions(request: QueryStudioAppDomainListOpenRequest, runtime: Util.RuntimeOptions): QueryStudioAppDomainListOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioAppDomainListOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioAppDomainListOpen(request: QueryStudioAppDomainListOpenRequest): QueryStudioAppDomainListOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioAppDomainListOpenWithOptions(request, runtime);
}

model QueryStudioAppListRequest {
  fuzzyName?: string(name='FuzzyName', example='test1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='2'),
  projectId?: string(name='ProjectId', example='a123********'),
  types?: [ string ](name='Types', example='["webApp", "mobileApp"]'),
}

model QueryStudioAppListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      appInfo?: [ 
      {
        appId?: string(name='AppId', example='a123********'),
        appKey?: string(name='AppKey', example='322******'),
        appSecret?: string(name='AppSecret', example='a605*******'),
        description?: string(name='Description', example='This is a test.'),
        gmtCreate?: string(name='GmtCreate', example='2020-12-25 16:20:53'),
        gmtModified?: string(name='GmtModified', example='2021-04-10 15:06:23'),
        gmtRelease?: string(name='GmtRelease', example='2021-04-15 19:11:32'),
        name?: string(name='Name', example='test1'),
        projectId?: string(name='ProjectId', example='a123********'),
        type?: string(name='Type', example='webApp'),
      }
    ](name='AppInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
    totalPage?: int32(name='TotalPage', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioAppListResponseBody(name='body'),
}

async function queryStudioAppListWithOptions(request: QueryStudioAppListRequest, runtime: Util.RuntimeOptions): QueryStudioAppListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.fuzzyName)) {
    body['FuzzyName'] = request.fuzzyName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  if (!Util.isUnset(request.types)) {
    body['Types'] = request.types;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioAppList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioAppList(request: QueryStudioAppListRequest): QueryStudioAppListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioAppListWithOptions(request, runtime);
}

model QueryStudioAppPageListOpenRequest {
  appId?: string(name='AppId', example='a12*******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  isRelease?: boolean(name='IsRelease', example='false'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  projectId?: string(name='ProjectId', example='a12******'),
}

model QueryStudioAppPageListOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      pageInfo?: [ 
      {
        gmtCreate?: string(name='GmtCreate', example='2020-12-25T16:21Z'),
        gmtModified?: string(name='GmtModified', example='2021-05-08T17:18Z'),
        id?: int32(name='Id', example='49739'),
        isHidden?: int32(name='IsHidden', example='1'),
        isHome?: int32(name='IsHome', example='1'),
        isLoginPage?: int32(name='IsLoginPage', example='1'),
        name?: string(name='Name', example='test1'),
        pageId?: string(name='PageId', example='44920'),
        path?: string(name='Path', example='/page/44920'),
      }
    ](name='PageInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioAppPageListOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioAppPageListOpenResponseBody(name='body'),
}

async function queryStudioAppPageListOpenWithOptions(request: QueryStudioAppPageListOpenRequest, runtime: Util.RuntimeOptions): QueryStudioAppPageListOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.isRelease)) {
    body['IsRelease'] = request.isRelease;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioAppPageListOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioAppPageListOpen(request: QueryStudioAppPageListOpenRequest): QueryStudioAppPageListOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioAppPageListOpenWithOptions(request, runtime);
}

model QueryStudioProjectListRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test1'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
}

model QueryStudioProjectListResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    list?: {
      projectInfo?: [ 
      {
        description?: string(name='Description', example='This is a test project.'),
        gmtCreate?: long(name='GmtCreate', example='1611819839000'),
        gmtModified?: long(name='GmtModified', example='1611819860000'),
        name?: string(name='Name', example='test1'),
        projectId?: string(name='ProjectId', example='a123********'),
      }
    ](name='ProjectInfo')
    }(name='List'),
    pageNo?: int32(name='PageNo', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    total?: int32(name='Total', example='200'),
    totalPage?: int32(name='TotalPage', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model QueryStudioProjectListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryStudioProjectListResponseBody(name='body'),
}

async function queryStudioProjectListWithOptions(request: QueryStudioProjectListRequest, runtime: Util.RuntimeOptions): QueryStudioProjectListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryStudioProjectList',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryStudioProjectList(request: QueryStudioProjectListRequest): QueryStudioProjectListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryStudioProjectListWithOptions(request, runtime);
}

model QuerySubscribeRelationRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product that is specified for the subscription.', example='a1fyXVF****'),
  type?: string(name='Type', description='The type of the subscription. Valid values:

*   **MNS**
*   **AMQP**', example='AMQP'),
}

model QuerySubscribeRelationResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', description='The IDs of the consumer groups that are created in the AMQP subscription. This parameter is returned if the **Type** parameter is set to **AMQP**.'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', description='Indicates whether upstream device messages were pushed.

*   **true**: yes.
*   **false**: no.', example='true'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', description='Indicates whether messages about device lifecycle changes were pushed.

*   **true**: yes.
*   **false**: no.', example='true'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', description='Indicates whether messages about device status changes were pushed.

*   **true**: yes.
*   **false**: no.', example='true'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', description='Indicates whether messages about device tag changes were pushed. Valid values:

*   **true**: yes. This parameter takes effect only if the **Type** parameter is set to **AMQP**.
*   **false**: no.

Default value: **false**.', example='true'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', description='Indicates whether messages about topological relationship changes of devices were pushed.

*   **true**: yes. The value **true** is returned only when you query a gateway product.
*   **false**: no.', example='true'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', description='Indicates whether messages were pushed if a gateway detected new sub-devices.

*   **true**: yes. The value **true** is returned only when you query a gateway product.
*   **false**: no.', example='true'),
  mnsConfiguration?: string(name='MnsConfiguration', description='The configurations of the MNS queue. This parameter is returned if the **Type** parameter is set to **MNS**.

For more information, see the "Definition of the MnsConfiguration parameter" section.', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }'),
  otaEventFlag?: boolean(name='OtaEventFlag', description='Indicates whether notifications about the status of OTA update batches were pushed.

*   **true**: yes.
*   **false**: no.', example='true'),
  otaJobFlag?: boolean(name='OtaJobFlag', description='Indicates whether notifications about OTA batch updates were pushed. Valid values:

*   **true**: yes. This parameter takes effect only if the **Type** parameter is set to **AMQP**.
*   **false**: no.

Default value: **false**.', example='true'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', description='Indicates whether messages about the version numbers of OTA modules were pushed. Valid values:

*   **true**: yes. This parameter takes effect only if the **Type** parameter is set to **AMQP**.
*   **false**: no.

Default value: **false**.', example='true'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product that is specified for the subscription.', example='a1fyXVF****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  subscribeFlags?: string(name='SubscribeFlags', example='{     "jt808DeviceDataFlag": true }'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', description='Indicates whether upstream historical Thing Specification Language (TSL) data was pushed.

*   **true**: yes.
*   **false**: no.', example='true'),
  type?: string(name='Type', description='The type of the subscription. Valid values:

*   **MNS**
*   **AMQP**', example='AMQP'),
}

model QuerySubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySubscribeRelationResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QuerySubscribeRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QuerySubscribeRelationResponse
 */
async function querySubscribeRelationWithOptions(request: QuerySubscribeRelationRequest, runtime: Util.RuntimeOptions): QuerySubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QuerySubscribeRelationRequest
  * @return QuerySubscribeRelationResponse
 */
async function querySubscribeRelation(request: QuerySubscribeRelationRequest): QuerySubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySubscribeRelationWithOptions(request, runtime);
}

model QuerySummarySceneRuleLogRequest {
  currentPage?: int32(name='CurrentPage', example='1'),
  endTime?: int32(name='EndTime', example='1582373873'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  pageSize?: int32(name='PageSize', example='10'),
  ruleId?: string(name='RuleId', example='fec565038d7544978d9aed5c1a******'),
  startTime?: int32(name='StartTime', example='1582372973'),
  status?: string(name='Status', example='2'),
}

model QuerySummarySceneRuleLogResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    logList?: {
      logInfo?: [ 
      {
        logTime?: int32(name='LogTime', example='1582373706'),
        result?: string(name='Result', example='true'),
        traceId?: string(name='TraceId', example='a6a5b5df1582373508176121******'),
      }
    ](name='LogInfo')
    }(name='LogList'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='3'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='2279A994-3E7D-4EC6-BD17-FA0D0EC2EC77'),
  success?: boolean(name='Success', example='true'),
}

model QuerySummarySceneRuleLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySummarySceneRuleLogResponseBody(name='body'),
}

async function querySummarySceneRuleLogWithOptions(request: QuerySummarySceneRuleLogRequest, runtime: Util.RuntimeOptions): QuerySummarySceneRuleLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySummarySceneRuleLog',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySummarySceneRuleLog(request: QuerySummarySceneRuleLogRequest): QuerySummarySceneRuleLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySummarySceneRuleLogWithOptions(request, runtime);
}

model QuerySuperDeviceGroupRequest {
  groupId?: string(name='GroupId', description='The ID of the subgroup. The ID is the globally unique identifier (GUID) for the group.', example='DMoI2Kby5m62****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model QuerySuperDeviceGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    groupInfo?: [ 
    {
      groupDesc?: string(name='GroupDesc', description='The description of the parent group.', example='A test'),
      groupId?: string(name='GroupId', description='The ID of the parent group.', example='tDQvBJqbUyHskDse'),
      groupName?: string(name='GroupName', description='The name of the parent group.', example='IOTTEST'),
    }
  ](name='GroupInfo')
  }(name='Data', description='The parent group information returned if the call succeeds. For more information, see the following **GroupInfo** parameter.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7411716B-A488-4EEB-9AA0-6DB05AD2491F'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QuerySuperDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySuperDeviceGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QuerySuperDeviceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QuerySuperDeviceGroupResponse
 */
async function querySuperDeviceGroupWithOptions(request: QuerySuperDeviceGroupRequest, runtime: Util.RuntimeOptions): QuerySuperDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySuperDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QuerySuperDeviceGroupRequest
  * @return QuerySuperDeviceGroupResponse
 */
async function querySuperDeviceGroup(request: QuerySuperDeviceGroupRequest): QuerySuperDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySuperDeviceGroupWithOptions(request, runtime);
}

model QueryTaskRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  taskId?: string(name='TaskId', example='MSnT9***q010101'),
}

model QueryTaskResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    deviceName?: string(name='DeviceName', example='mydevice'),
    iotId?: string(name='IotId', example='BDjhI****01'),
    jobId?: string(name='JobId', example='sGWotgRkutxX*****'),
    jobName?: string(name='JobName', example='MyTestJobIax6Eq'),
    message?: string(name='Message', example='this is message about task execution'),
    productKey?: string(name='ProductKey', example='a1S****'),
    progress?: string(name='Progress', example='80'),
    status?: string(name='Status', example='SUCCEEDED'),
    statusDetail?: string(name='StatusDetail', example='{ "msg":"this is message reported by device" }'),
    taskId?: string(name='TaskId', example='MSnT9***q010101'),
    utcModified?: string(name='UtcModified', example='2019-05-21T13:03:56.000Z'),
    utcQueueTime?: string(name='UtcQueueTime', example='2019-05-21T13:03:53.000Z'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='512FF8FD-A97F-4AAF-B0A2-7BE3D3A19BB3'),
  success?: boolean(name='Success', example='true'),
}

model QueryTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTaskResponseBody(name='body'),
}

async function queryTaskWithOptions(request: QueryTaskRequest, runtime: Util.RuntimeOptions): QueryTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTask(request: QueryTaskRequest): QueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskWithOptions(request, runtime);
}

model QueryThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter, the default module is queried.', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  modelVersion?: string(name='ModelVersion', description='The version number of the TSL model.

You can call the [ListThingModelVersion](~~150318~~) operation to view the version numbers of the TSL model for a product.

If you do not specify this parameter, the TSL model that is in the draft status is queried. If you specify this parameter, the TSL model of the specified version is queried.', example='v1.0.0'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.

>  You cannot specify this parameter.', example='rg-acfm4l5tcwd****'),
}

model QueryThingModelResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    thingModelJson?: string(name='ThingModelJson', description='The features of the TSL model. The TSL data format of the default module is different from the TSL data format of a custom module.

For more information about the data format of the ThingModelJson parameter, see [Data structure of ThingModelJson](~~150457~~).'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.', example='a1BwAGV****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelResponseBody(name='body'),
}

/**
  * TSL features include properties, services, and events.
  * If you add custom modules to a TSL model and the value of the **FunctionBlockId** parameter is empty, you can obtain the TSL features of each custom module. If the value of the FunctionBlockId parameter is not empty, you can obtain the TSL features of a specified custom module.
  * For more information about the data format of the **ThingModelJson** parameter, see [Data structure of ThingModelJson](~~150457~~).
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryThingModelResponse
 */
async function queryThingModelWithOptions(request: QueryThingModelRequest, runtime: Util.RuntimeOptions): QueryThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * TSL features include properties, services, and events.
  * If you add custom modules to a TSL model and the value of the **FunctionBlockId** parameter is empty, you can obtain the TSL features of each custom module. If the value of the FunctionBlockId parameter is not empty, you can obtain the TSL features of a specified custom module.
  * For more information about the data format of the **ThingModelJson** parameter, see [Data structure of ThingModelJson](~~150457~~).
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelRequest
  * @return QueryThingModelResponse
 */
async function queryThingModel(request: QueryThingModelRequest): QueryThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelWithOptions(request, runtime);
}

model QueryThingModelExtendConfigRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter, the system exports the data of the default module.', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', description='The version number of the TSL model.

You can call the [ListThingModelVersion](~~150318~~) operation to view the version numbers of the TSL model for a product.

If you do not specify this parameter, the last published TSL version is returned.', example='v1.0.0'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.', example='a1T27vz****'),
  resourceGroupId?: string(name='ResourceGroupId', example='123***'),
}

model QueryThingModelExtendConfigResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    configuration?: string(name='Configuration', description='The information of the extended TSL parameters. For more information about the definition of extended parameters, see [CreateThingModel](~~150323~~).', example='{\\"profile\\":{\\"productKey\\":\\"a114x******\\"},\\"properties\\":[{\\"originalDataType\\":{\\"specs\\":{\\"registerCount\\":1,\\"reverseRegister\\":0,\\"swap16\\":0},\\"type\\":\\"bool\\"},\\"identifier\\":\\"WakeUpData\\",\\"registerAddress\\":\\"0x04\\",\\"scaling\\":1,\\"writeFunctionCode\\":0,\\"operateType\\":\\"inputStatus\\",\\"pollingTime\\":1000,\\"trigger\\":1}]}'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryThingModelExtendConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelExtendConfigResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelExtendConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryThingModelExtendConfigResponse
 */
async function queryThingModelExtendConfigWithOptions(request: QueryThingModelExtendConfigRequest, runtime: Util.RuntimeOptions): QueryThingModelExtendConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModelExtendConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelExtendConfigRequest
  * @return QueryThingModelExtendConfigResponse
 */
async function queryThingModelExtendConfig(request: QueryThingModelExtendConfigRequest): QueryThingModelExtendConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelExtendConfigWithOptions(request, runtime);
}

model QueryThingModelExtendConfigPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter, the default module is queried.', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', description='The version number of the TSL model. If you do not specify this parameter, the last published TSL model is returned.', example='v1.0.0'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwAGV****'),
}

model QueryThingModelExtendConfigPublishedResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    configuration?: string(name='Configuration', description='The information about the extended TSL parameters. For more information about the definition of extended parameters, see [CreateThingModel](~~150323~~).

For more information, see [Data structure of ThingModelJson](~~150457~~).', example='{\\"profile\\":{\\"productKey\\":\\"a114x******\\"},\\"properties\\":[{\\"originalDataType\\":{\\"specs\\":{\\"registerCount\\":1,\\"reverseRegister\\":0,\\"swap16\\":0},\\"type\\":\\"bool\\"},\\"identifier\\":\\"WakeUpData\\",\\"registerAddress\\":\\"0x04\\",\\"scaling\\":1,\\"writeFunctionCode\\":0,\\"operateType\\":\\"inputStatus\\",\\"pollingTime\\":1000,\\"trigger\\":1}]}'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryThingModelExtendConfigPublishedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelExtendConfigPublishedResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelExtendConfigPublishedRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryThingModelExtendConfigPublishedResponse
 */
async function queryThingModelExtendConfigPublishedWithOptions(request: QueryThingModelExtendConfigPublishedRequest, runtime: Util.RuntimeOptions): QueryThingModelExtendConfigPublishedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModelExtendConfigPublished',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelExtendConfigPublishedRequest
  * @return QueryThingModelExtendConfigPublishedResponse
 */
async function queryThingModelExtendConfigPublished(request: QueryThingModelExtendConfigPublishedRequest): QueryThingModelExtendConfigPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelExtendConfigPublishedWithOptions(request, runtime);
}

model QueryThingModelPublishedRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter, the default module is queried.', example='BatteryModule'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  modelVersion?: string(name='ModelVersion', description='The version number of the TSL model.

You can call the [ListThingModelVersion](~~150318~~) operation to view the version numbers of the TSL model for a product.

If you do not specify this parameter, the last published TSL model version is returned.', example='v1.0.0'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.', example='a1BwAGV****'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfm4l5tcwd***'),
}

model QueryThingModelPublishedResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    thingModelJson?: string(name='ThingModelJson', description='Define features for the TSL model. For more information about the data format of the ThingModelJson parameter, see [Data structure of ThingModelJson](~~150457~~).'),
  }(name='Data', description='The returned data.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product.', example='a1BwAGV****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryThingModelPublishedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryThingModelPublishedResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelPublishedRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryThingModelPublishedResponse
 */
async function queryThingModelPublishedWithOptions(request: QueryThingModelPublishedRequest, runtime: Util.RuntimeOptions): QueryThingModelPublishedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.modelVersion)) {
    query['ModelVersion'] = request.modelVersion;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryThingModelPublished',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryThingModelPublishedRequest
  * @return QueryThingModelPublishedResponse
 */
async function queryThingModelPublished(request: QueryThingModelPublishedRequest): QueryThingModelPublishedResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryThingModelPublishedWithOptions(request, runtime);
}

model QueryTopicConfigRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model QueryTopicConfigResponseBody = {
  code?: string(name='Code'),
  data?: {
    topicConfigInfo?: [ 
    {
      codec?: string(name='Codec'),
      description?: string(name='Description'),
      enableBroadcast?: boolean(name='EnableBroadcast'),
      enableProxySubscribe?: boolean(name='EnableProxySubscribe'),
      operation?: string(name='Operation'),
      productKey?: string(name='ProductKey'),
      topicFullName?: string(name='TopicFullName'),
    }
  ](name='TopicConfigInfo')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTopicConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopicConfigResponseBody(name='body'),
}

async function queryTopicConfigWithOptions(request: QueryTopicConfigRequest, runtime: Util.RuntimeOptions): QueryTopicConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopicConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryTopicConfig(request: QueryTopicConfigRequest): QueryTopicConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopicConfigWithOptions(request, runtime);
}

model QueryTopicReverseRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The region where your devices reside. The region you specify must match the region that is specified in the console. Example: cn-shanghai.

>  This parameter is no longer used as an operation-specific request parameter. It is included in common request parameters.', example='iot-cn-0pp1n8t****'),
  regionId?: string(name='RegionId', description='The destination topic that receives messages.', example='cn-shanghai'),
  topic?: string(name='Topic', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='/x7aWKW9***/testDataToDataHub/user/update'),
}

model QueryTopicReverseRouteTableResponseBody = {
  code?: string(name='Code', description='The error message returned if the call fails.', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The ID of the request.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='FCC27691-9151-4B93-9622-9C90F30542EC"'),
  srcTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='SrcTopics'),
  success?: boolean(name='Success', description='The list of source topics returned if the call is successful.', example='true'),
}

model QueryTopicReverseRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopicReverseRouteTableResponseBody(name='body'),
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request QueryTopicReverseRouteTableRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryTopicReverseRouteTableResponse
 */
async function queryTopicReverseRouteTableWithOptions(request: QueryTopicReverseRouteTableRequest, runtime: Util.RuntimeOptions): QueryTopicReverseRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopicReverseRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In addition to the preceding operation-specific request parameters, you must specify common request parameters when you call this operation. For more information, see [Common request parameters](~~30561~~).
  *
  * @param request QueryTopicReverseRouteTableRequest
  * @return QueryTopicReverseRouteTableResponse
 */
async function queryTopicReverseRouteTable(request: QueryTopicReverseRouteTableRequest): QueryTopicReverseRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopicReverseRouteTableWithOptions(request, runtime);
}

model QueryTopicRouteTableRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  topic?: string(name='Topic', description='The source topic that publishes messages.', example='/x7aWKW94bb8/testDataToDataHub/user/update'),
}

model QueryTopicRouteTableResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  dstTopics?: {
    topic?: [  map[string]any ](name='Topic')
  }(name='DstTopics', description='The list of destination topics returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryTopicRouteTableResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTopicRouteTableResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryTopicRouteTableRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryTopicRouteTableResponse
 */
async function queryTopicRouteTableWithOptions(request: QueryTopicRouteTableRequest, runtime: Util.RuntimeOptions): QueryTopicRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryTopicRouteTable',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request QueryTopicRouteTableRequest
  * @return QueryTopicRouteTableResponse
 */
async function queryTopicRouteTable(request: QueryTopicRouteTableRequest): QueryTopicRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTopicRouteTableWithOptions(request, runtime);
}

model QueryVehicleDeviceRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Instance Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-2w****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the gateway product to which the device belongs.', example='a1Bw****'),
}

model QueryVehicleDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see the "**Error codes**" section of this topic.', example='iot.system.SystemException'),
  data?: {
    createTime?: long(name='CreateTime', description='The timestamp when the device was created. Unit: milliseconds.', example='1557062301656'),
    deviceName?: string(name='DeviceName', description='The DeviceName of the device.', example='light'),
    iotId?: string(name='IotId', description='The ID is a unique identifier that is issued by IoT Platform to the device.', example='dm0001'),
    jtProtocolDeviceData?: {
      authCode?: string(name='AuthCode'),
      city?: string(name='City'),
      deviceId?: string(name='DeviceId'),
      deviceModel?: string(name='DeviceModel'),
      manufacturer?: string(name='Manufacturer'),
      province?: string(name='Province'),
      registerTime?: string(name='RegisterTime'),
      status?: string(name='Status'),
      vehicleColour?: string(name='VehicleColour'),
      vehicleNumber?: string(name='VehicleNumber'),
    }(name='JtProtocolDeviceData'),
    modifiedTime?: long(name='ModifiedTime', description='The timestamp when the device was last updated. Unit: milliseconds.', example='1657062301656'),
    productKey?: string(name='ProductKey', description='The **ProductKey** of the gateway product to which the device belongs.', example='a1BwAGV****'),
    protocol?: string(name='Protocol'),
  }(name='Data', description='The device information returned.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model QueryVehicleDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryVehicleDeviceResponseBody(name='body'),
}

/**
  * *   You can call this operation to query the information about a device of a JT/T 808 gateway product.
  * *   When you call this operation, you must specify a **ProductKey** and a **DeviceName**. Otherwise, the call fails.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryVehicleDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryVehicleDeviceResponse
 */
async function queryVehicleDeviceWithOptions(request: QueryVehicleDeviceRequest, runtime: Util.RuntimeOptions): QueryVehicleDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryVehicleDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation to query the information about a device of a JT/T 808 gateway product.
  * *   When you call this operation, you must specify a **ProductKey** and a **DeviceName**. Otherwise, the call fails.
  * ## QPS limits
  * You can call this API operation up to 50 times per second per account. 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request QueryVehicleDeviceRequest
  * @return QueryVehicleDeviceResponse
 */
async function queryVehicleDevice(request: QueryVehicleDeviceRequest): QueryVehicleDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryVehicleDeviceWithOptions(request, runtime);
}

model RRpcRequest {
  contentType?: string(name='ContentType', example='240'),
  deviceName?: string(name='DeviceName', description='The name of the device that receives the request.', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='aldfeSe****'),
  requestBase64Byte?: string(name='RequestBase64Byte', description='The string that is obtained by performing Base64 encoding on the message. Example: `dGhpcyBpcyBhbiBleGFtcGxl`.', example='dGhpcyBpcyBhbiBleGFtcGxl'),
  timeout?: int32(name='Timeout', description='The timeout period of a response. Unit: milliseconds. Valid values: 1000 to 8000.', example='1000'),
  topic?: string(name='Topic', description='The custom revert-RPC (RRPC) topic. Before you can use a custom RRPC topic, you must configure the device. For more information, see [Use custom topics](~~90570~~).

If you do not configure this parameter, the default RRPC topic is used.', example='/a1uZfYb****/A_Vol****/user/update'),
}

model RRpcResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  messageId?: long(name='MessageId', description='The ID of the request. The request ID is generated by IoT Platform after the request is sent.', example='889455942124347392'),
  payloadBase64Byte?: string(name='PayloadBase64Byte', description='The Base64 encoded payload that is returned by the device.', example='d29ybGQgaGVsbG8='),
  requestId?: string(name='RequestId', description='The ID of the request.', example='41C4265E-F05D-4E2E-AB09-E031F501AF7F'),
  rrpcCode?: string(name='RrpcCode', description='The response code returned if the call is successful. Valid values:

*   **UNKNOWN**: A system error occurred.
*   **SUCCESS**: The request is successful.
*   **TIMEOUT**: The request times out.
*   **OFFLINE**: The device is offline.
*   **HALFCONN**: The device is offline. If the status of the device is HALFCONN, the device is offline but does not remain offline for a full heartbeat cycle.', example='SUCCESS'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model RRpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RRpcResponseBody(name='body'),
}

/**
  * If the device fails to send a response within the timeout period after you call the operation, IoT Platform considers that the call fails even if the device receives the message. The timeout period is specified by the **Timeout** parameter.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 1000 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request RRpcRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RRpcResponse
 */
async function rRpcWithOptions(request: RRpcRequest, runtime: Util.RuntimeOptions): RRpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.requestBase64Byte)) {
    query['RequestBase64Byte'] = request.requestBase64Byte;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RRpc',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the device fails to send a response within the timeout period after you call the operation, IoT Platform considers that the call fails even if the device receives the message. The timeout period is specified by the **Timeout** parameter.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 1000 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request RRpcRequest
  * @return RRpcResponse
 */
async function rRpc(request: RRpcRequest): RRpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return rRpcWithOptions(request, runtime);
}

model ReBindLicenseDeviceRequest {
  deviceNameList?: [ string ](name='DeviceNameList', example='test'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-e3***'),
  licenseCode?: string(name='LicenseCode', example='LINK_SPEECH_COMMON_LICENSE'),
  productKey?: string(name='ProductKey', example='a2YwD23***'),
}

model ReBindLicenseDeviceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    checkProgressId?: string(name='CheckProgressId', example='123***'),
    failSum?: long(name='FailSum', example='2'),
    progress?: int32(name='Progress', example='100'),
    resultCsvFile?: string(name='ResultCsvFile', example='http://***'),
    successSum?: long(name='SuccessSum', example='10'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='AF71BF1D-B552-47CD-B34B-352557627992'),
  success?: boolean(name='Success', example='true'),
}

model ReBindLicenseDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReBindLicenseDeviceResponseBody(name='body'),
}

async function reBindLicenseDeviceWithOptions(request: ReBindLicenseDeviceRequest, runtime: Util.RuntimeOptions): ReBindLicenseDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceNameList)) {
    body['DeviceNameList'] = request.deviceNameList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReBindLicenseDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reBindLicenseDevice(request: ReBindLicenseDeviceRequest): ReBindLicenseDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return reBindLicenseDeviceWithOptions(request, runtime);
}

model RecognizeCarNumRequest {
  url?: string(name='Url', example='https://img.alicdn.com/***/i4/O1***f_***-582.png'),
}

model RecognizeCarNumResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model RecognizeCarNumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizeCarNumResponseBody(name='body'),
}

async function recognizeCarNumWithOptions(request: RecognizeCarNumRequest, runtime: Util.RuntimeOptions): RecognizeCarNumResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecognizeCarNum',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizeCarNum(request: RecognizeCarNumRequest): RecognizeCarNumResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizeCarNumWithOptions(request, runtime);
}

model RecognizePictureGeneralRequest {
  url?: string(name='Url', example='https://img.alicdn.com/***/i4/O1***f_***-582.png'),
}

model RecognizePictureGeneralResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='4C717018-B6D4-5EB0-8495-2A4FF08D58CA'),
  success?: boolean(name='Success', example='true'),
}

model RecognizePictureGeneralResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecognizePictureGeneralResponseBody(name='body'),
}

async function recognizePictureGeneralWithOptions(request: RecognizePictureGeneralRequest, runtime: Util.RuntimeOptions): RecognizePictureGeneralResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecognizePictureGeneral',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recognizePictureGeneral(request: RecognizePictureGeneralRequest): RecognizePictureGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return recognizePictureGeneralWithOptions(request, runtime);
}

model RefreshDeviceTunnelSharePasswordRequest {
  deviceName?: string(name='DeviceName', example='LEGatewayAuto_B3XM******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1Wmy******'),
}

model RefreshDeviceTunnelSharePasswordResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  password?: string(name='Password', example='5f5c96d7e792af75da33a81dc87982ea********'),
  requestId?: string(name='RequestId', example='46AF6619-EFF3-4B77-A90B-B9EAA0C6D1AF'),
  success?: boolean(name='Success', example='true'),
}

model RefreshDeviceTunnelSharePasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshDeviceTunnelSharePasswordResponseBody(name='body'),
}

async function refreshDeviceTunnelSharePasswordWithOptions(request: RefreshDeviceTunnelSharePasswordRequest, runtime: Util.RuntimeOptions): RefreshDeviceTunnelSharePasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshDeviceTunnelSharePassword',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshDeviceTunnelSharePassword(request: RefreshDeviceTunnelSharePasswordRequest): RefreshDeviceTunnelSharePasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDeviceTunnelSharePasswordWithOptions(request, runtime);
}

model RefreshStudioAppTokenOpenRequest {
  appId?: string(name='AppId', example='a12******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123*******'),
}

model RefreshStudioAppTokenOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    bizId?: string(name='BizId', example='a12*******'),
    bizType?: string(name='BizType', example='webApp'),
    isEnable?: string(name='IsEnable', example='YES'),
    token?: string(name='Token', example='cf245ddebd******'),
    type?: string(name='Type', example='custom'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model RefreshStudioAppTokenOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefreshStudioAppTokenOpenResponseBody(name='body'),
}

async function refreshStudioAppTokenOpenWithOptions(request: RefreshStudioAppTokenOpenRequest, runtime: Util.RuntimeOptions): RefreshStudioAppTokenOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RefreshStudioAppTokenOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshStudioAppTokenOpen(request: RefreshStudioAppTokenOpenRequest): RefreshStudioAppTokenOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshStudioAppTokenOpenWithOptions(request, runtime);
}

model RegisterDeviceRequest {
  appKey?: string(name='AppKey', description='The AppKey of the LoRaWAN device.

When you create a LoRaWAN device, set **LoraNodeType** to **USERDEFINED**. This parameter is required.', example='674f***'),
  devEui?: string(name='DevEui', description='The DevEUI of the LoRaWAN device.

This parameter is required when you create a LoRaWAN device.', example='e8SDdgeIlk3nED****'),
  deviceName?: string(name='DeviceName', description='The DeviceName of the device. The name must be 4 to 32 characters in length, and can contain letters, digits, hyphens (-), underscores (\\_), at signs (@), periods (.), and colons (:).

You can use a combination of the DeviceName and ProductKey parameters to identify a device.

>  If you do not specify this parameter, IoT Platform randomly generates a DeviceName.', example='light'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  joinEui?: string(name='JoinEui', description='The JoinEUI of the LoRaWAN device.

When you create a LoRaWAN device, set **LoraNodeType** to **USERDEFINED**. This parameter is required.', example='Ede4tde8erth****'),
  loraNodeType?: string(name='LoraNodeType', description='The type of the LoRaWAN device. Valid values:

*   **ALIYUNDEFINED**: The device is issued by Alibaba Cloud. You must specify **DevEui** and **PinCode**.
*   **USERDEFINED**: The device is user-defined. You must specify **DevEui**, **JoinEui**, and **AppKey**.', example='ALIYUNDEFINED'),
  nickname?: string(name='Nickname', description='The alias of the device. The alias must be 4 to 64 characters in length, and can contain letters, digits, and underscores (\\_).

>  If you do not specify this parameter, IoT Platform does not generate an alias for the device.'),
  pinCode?: string(name='PinCode', description='The PIN code of the LoRaWAN device. This parameter is used to verify the DevEUI.

When you create a LoRaWAN device, set **LoraNodeType** to **ALIYUNDEFINED**. This parameter is required.', example='DIe80dfeg*****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs. A ProductKey is a GUID that is issued by IoT Platform to a product.

You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
}

model RegisterDeviceResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    devEui?: string(name='DevEui', description='The DevEUI of the LoRaWAN device. This parameter is returned only when you create a LoRaWAN device.', example='e8SDdgeIlk3nED****'),
    deviceName?: string(name='DeviceName', description='The DeviceName of the device.

> Keep the information confidential.', example='light'),
    deviceSecret?: string(name='DeviceSecret', description='The DeviceSecret of the device.

> Keep the information confidential.', example='mz2Canp4GB7qRVf1OYPNtRqB2anu****'),
    iotId?: string(name='IotId', description='The ID of the device. The ID is the unique identifier that is issued by IoT Platform to the device.

> Keep the information confidential.', example='1O4YPNtRqB2anumz2Canp4GB7q****'),
    joinEui?: string(name='JoinEui', description='The JoinEUI of the LoRaWAN device. This parameter is returned only when you create a LoRaWAN device.', example='Ede4tde8erth****'),
    nickname?: string(name='Nickname', description='The alias of the device.

If you do not specify an alias for the device, this parameter is empty.'),
    productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1BwAGV****'),
  }(name='Data', description='The device information returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model RegisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RegisterDeviceResponseBody(name='body'),
}

/**
  * If you call this operation to register a device under a product, the device is added to the product in the IoT Platform console. After the device is registered, IoT Platform issues the IotId parameter to the device. This parameter is a globally unique identifier (GUID) of the device. To perform operations on a device, you must use the IotId parameter to identify the device.
  * You can also use a combination of the ProductKey and DeviceName parameters to identify a device. A ProductKey is issued by IoT Platform to a product when you create the product. A DeviceName is specified or randomly generated when you create a device. The IotId parameter has a higher priority than a combination of the ProductKey and DeviceName parameters.
  * For information about how to register multiple devices under a product at the same time, see [BatchRegisterDeviceWithApplyId](~~69514~~).
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request RegisterDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RegisterDeviceResponse
 */
async function registerDeviceWithOptions(request: RegisterDeviceRequest, runtime: Util.RuntimeOptions): RegisterDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.devEui)) {
    query['DevEui'] = request.devEui;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.joinEui)) {
    query['JoinEui'] = request.joinEui;
  }
  if (!Util.isUnset(request.loraNodeType)) {
    query['LoraNodeType'] = request.loraNodeType;
  }
  if (!Util.isUnset(request.nickname)) {
    query['Nickname'] = request.nickname;
  }
  if (!Util.isUnset(request.pinCode)) {
    query['PinCode'] = request.pinCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDevice',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you call this operation to register a device under a product, the device is added to the product in the IoT Platform console. After the device is registered, IoT Platform issues the IotId parameter to the device. This parameter is a globally unique identifier (GUID) of the device. To perform operations on a device, you must use the IotId parameter to identify the device.
  * You can also use a combination of the ProductKey and DeviceName parameters to identify a device. A ProductKey is issued by IoT Platform to a product when you create the product. A DeviceName is specified or randomly generated when you create a device. The IotId parameter has a higher priority than a combination of the ProductKey and DeviceName parameters.
  * For information about how to register multiple devices under a product at the same time, see [BatchRegisterDeviceWithApplyId](~~69514~~).
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 30 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request RegisterDeviceRequest
  * @return RegisterDeviceResponse
 */
async function registerDevice(request: RegisterDeviceRequest): RegisterDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceWithOptions(request, runtime);
}

model ReleaseEdgeDriverVersionRequest {
  driverId?: string(name='DriverId', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', example='1.2.0'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model ReleaseEdgeDriverVersionResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='3E56BFDF-3F00-495F-89A1-F891930DDB51'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseEdgeDriverVersionResponseBody(name='body'),
}

async function releaseEdgeDriverVersionWithOptions(request: ReleaseEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): ReleaseEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseEdgeDriverVersion(request: ReleaseEdgeDriverVersionRequest): ReleaseEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEdgeDriverVersionWithOptions(request, runtime);
}

model ReleaseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64***'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to be published.', example='a1BwAGV****'),
}

model ReleaseProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ReleaseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseProductResponseBody(name='body'),
}

/**
  * *   After a product is published, you cannot call the [CreateThingModel](~~150323~~), [UpdateThingModel](~~151240~~), [ImportThingModelTSL](~~150320~~), [PublishThingModel](~~150311~~), [DeleteThingModel](~~150312~~), or [CopyThingModel](~~150322~~) operation to edit the Thing Specification Language (TSL) model of the product. To edit the TSL model, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ReleaseProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReleaseProductResponse
 */
async function releaseProductWithOptions(request: ReleaseProductRequest, runtime: Util.RuntimeOptions): ReleaseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After a product is published, you cannot call the [CreateThingModel](~~150323~~), [UpdateThingModel](~~151240~~), [ImportThingModelTSL](~~150320~~), [PublishThingModel](~~150311~~), [DeleteThingModel](~~150312~~), or [CopyThingModel](~~150322~~) operation to edit the Thing Specification Language (TSL) model of the product. To edit the TSL model, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ReleaseProductRequest
  * @return ReleaseProductResponse
 */
async function releaseProduct(request: ReleaseProductRequest): ReleaseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseProductWithOptions(request, runtime);
}

model RemoveThingTopoRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify a value for this parameter, you must also specify a value for the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify a value for this parameter, you do not need to specify a value for the **ProductKey** or **DeviceName** parameter. The IotId parameter specifies a globally unique identifier (GUID) for the device. The value of the **IotId** parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for the **IotId** parameter and values for the **ProductKey** and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.


**Important**

*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.

>  If you specify a value for this parameter, you must also specify a value for the **DeviceName** parameter.', example='a1BwAGV****'),
}

model RemoveThingTopoResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: boolean(name='Data', description='Indicates whether the topological relationship was deleted.

*   **true**: The topological relationship was deleted.
*   **false**: The topological relationship failed to be deleted.', example='true'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model RemoveThingTopoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveThingTopoResponseBody(name='body'),
}

/**
  * *   If you specify a gateway, this operation removes the topological relationships between the gateway and all attached sub-devices.
  * *   If you specify a sub-device, this operation removes the topological relationship between the sub-device and the gateway to which the sub-device is attached.
  * # QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request RemoveThingTopoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveThingTopoResponse
 */
async function removeThingTopoWithOptions(request: RemoveThingTopoRequest, runtime: Util.RuntimeOptions): RemoveThingTopoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveThingTopo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If you specify a gateway, this operation removes the topological relationships between the gateway and all attached sub-devices.
  * *   If you specify a sub-device, this operation removes the topological relationship between the sub-device and the gateway to which the sub-device is attached.
  * # QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request RemoveThingTopoRequest
  * @return RemoveThingTopoResponse
 */
async function removeThingTopo(request: RemoveThingTopoRequest): RemoveThingTopoResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeThingTopoWithOptions(request, runtime);
}

model ReplaceEdgeInstanceGatewayRequest {
  currentGatewayId?: string(name='CurrentGatewayId', example='oTCJomvT95WPyPPQ5sje******'),
  instanceId?: string(name='InstanceId', example='G4TGWGYwpo8zwr******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  newGatewayId?: string(name='NewGatewayId', example='65SkFyhZcU5d3PO2Ri13******'),
}

model ReplaceEdgeInstanceGatewayResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='10E5C856-E0A1-4468-BE01-E540A8BA8819'),
  success?: boolean(name='Success', example='true'),
}

model ReplaceEdgeInstanceGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceEdgeInstanceGatewayResponseBody(name='body'),
}

async function replaceEdgeInstanceGatewayWithOptions(request: ReplaceEdgeInstanceGatewayRequest, runtime: Util.RuntimeOptions): ReplaceEdgeInstanceGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentGatewayId)) {
    query['CurrentGatewayId'] = request.currentGatewayId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.newGatewayId)) {
    query['NewGatewayId'] = request.newGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceEdgeInstanceGateway',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replaceEdgeInstanceGateway(request: ReplaceEdgeInstanceGatewayRequest): ReplaceEdgeInstanceGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceEdgeInstanceGatewayWithOptions(request, runtime);
}

model RerunJobRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****'),
  jobId?: string(name='JobId', example='450407b***'),
}

model RerunJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='A6BEAB33-03E6-4CE0-A94F-9E24C5512BAD'),
  success?: boolean(name='Success', example='true'),
}

model RerunJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RerunJobResponseBody(name='body'),
}

async function rerunJobWithOptions(request: RerunJobRequest, runtime: Util.RuntimeOptions): RerunJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RerunJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rerunJob(request: RerunJobRequest): RerunJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return rerunJobWithOptions(request, runtime);
}

model ResetConsumerGroupPositionRequest {
  groupId?: string(name='GroupId', description='The ID of the consumer group. After you call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group, the consumer group ID is returned. You can call the [QueryConsumerGroupList](~~170419~~) operation to query the consumer group ID by group name. You can also go to the IoT Platform console,and choose **Rules** > **Server-side Subscription** > **Consumer Groups** to view the consumer group ID.', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
}

model ResetConsumerGroupPositionResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ResetConsumerGroupPositionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetConsumerGroupPositionResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ResetConsumerGroupPositionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetConsumerGroupPositionResponse
 */
async function resetConsumerGroupPositionWithOptions(request: ResetConsumerGroupPositionRequest, runtime: Util.RuntimeOptions): ResetConsumerGroupPositionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetConsumerGroupPosition',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ResetConsumerGroupPositionRequest
  * @return ResetConsumerGroupPositionResponse
 */
async function resetConsumerGroupPosition(request: ResetConsumerGroupPositionRequest): ResetConsumerGroupPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetConsumerGroupPositionWithOptions(request, runtime);
}

model ResetThingRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify a value for this parameter, you must also specify a value for the **ProductKey** parameter.', example='device1'),
  iotId?: string(name='IotId', description='The ID of the device.

>  If you specify a value for this parameter, you do not need to specify a value for the **ProductKey** or **DeviceName** parameter. The **IotId** parameter specifies a globally unique identifier (GUID) for the device. The value of the IotId parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for the **IotId** parameter and values for the **ProductKey** and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='SR8FiTu1R9tlUR2V1bmi0010a5****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Instance overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify a value for this parameter, you must also specify a value for the **DeviceName** parameter.', example='a1KiV******'),
}

model ResetThingResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  jobId?: string(name='JobId', description='The ID of the device job.', example='450407b***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values: **true** indicates that the call was successful. **false** indicates that the call failed.', example='true'),
}

model ResetThingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetThingResponseBody(name='body'),
}

/**
  * *   After you use dynamic registration to obtain the device certificate information of a directly connected device and activate the device, you can call this operation to reset the dynamic registration status of the status to unregistered in the IoT Platform console. Then, you can use dynamic registration again to obtain the device certificate information. The device certificate information includes ProductKey, DeviceName, and DeviceSecret.
  * > This operation is called to reset the dynamic registration status instead of activation status of a device. After you call the operation to reset the dynamic registration status of a device, the status of the device in the IoT Platform console is not reset to inactive.
  * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request ResetThingRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetThingResponse
 */
async function resetThingWithOptions(request: ResetThingRequest, runtime: Util.RuntimeOptions): ResetThingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetThing',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After you use dynamic registration to obtain the device certificate information of a directly connected device and activate the device, you can call this operation to reset the dynamic registration status of the status to unregistered in the IoT Platform console. Then, you can use dynamic registration again to obtain the device certificate information. The device certificate information includes ProductKey, DeviceName, and DeviceSecret.
  * > This operation is called to reset the dynamic registration status instead of activation status of a device. After you call the operation to reset the dynamic registration status of a device, the status of the device in the IoT Platform console is not reset to inactive.
  * *   If you specify a gateway and the number of sub-devices that belong to the gateway exceeds 2,000, you can call this operation to create a device job to delete the topological relationships in an asynchronous manner. The operation returns the **JobId** parameter.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request ResetThingRequest
  * @return ResetThingResponse
 */
async function resetThing(request: ResetThingRequest): ResetThingResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetThingWithOptions(request, runtime);
}

model RetrySoundCodeLabelBatchRequest {
  batchCode?: string(name='BatchCode', example='Md3ZiTL888K9llXDy7890***********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model RetrySoundCodeLabelBatchResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model RetrySoundCodeLabelBatchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RetrySoundCodeLabelBatchResponseBody(name='body'),
}

async function retrySoundCodeLabelBatchWithOptions(request: RetrySoundCodeLabelBatchRequest, runtime: Util.RuntimeOptions): RetrySoundCodeLabelBatchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchCode)) {
    body['BatchCode'] = request.batchCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RetrySoundCodeLabelBatch',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function retrySoundCodeLabelBatch(request: RetrySoundCodeLabelBatchRequest): RetrySoundCodeLabelBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return retrySoundCodeLabelBatchWithOptions(request, runtime);
}

model ReupgradeOTATaskRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of an instance on the **Overview** page in the IoT Platform console.****

>*   If the instance has an ID, you must specify the **IotInstanceId** parameter. If you do not specify this parameter, the call fails.
>*   If the instance does not have an **ID** or no **Overview** page is displayed for the instance, you do not need to specify this parameter.

For more information, see [Instance overview](~~356505~~).', example='iot-v64***'),
  jobId?: string(name='JobId', description='The ID of the update batch.

After you call the [CreateOTAStaticUpgradeJob](~~147496~~) or [CreateOTADynamicUpgradeJob](~~147887~~) operation to create an update batch, the **JobId** parameter is returned.

You can also view the **batch ID** on the **Firmware Details** page in the IoT Platform console.', example='7glPHmaDYLAYMD1HHutT02****'),
  taskId?: [ string ](name='TaskId', example='y3tOmCDNgpR8F9jnVEzC01****'),
}

model ReupgradeOTATaskResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails.', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='291438BA-6E10-4C4C-B761-243B9A0D324F'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**
*   **false**', example='false'),
}

model ReupgradeOTATaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReupgradeOTATaskResponseBody(name='body'),
}

/**
  * If the update task requires confirmation, you must make sure that it has been confirmed before you call this operation. You can call the [ConfirmOTATask](~~254666~~) operation to confirm update tasks.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ReupgradeOTATaskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReupgradeOTATaskResponse
 */
async function reupgradeOTATaskWithOptions(request: ReupgradeOTATaskRequest, runtime: Util.RuntimeOptions): ReupgradeOTATaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReupgradeOTATask',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the update task requires confirmation, you must make sure that it has been confirmed before you call this operation. You can call the [ConfirmOTATask](~~254666~~) operation to confirm update tasks.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 20 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request ReupgradeOTATaskRequest
  * @return ReupgradeOTATaskResponse
 */
async function reupgradeOTATask(request: ReupgradeOTATaskRequest): ReupgradeOTATaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return reupgradeOTATaskWithOptions(request, runtime);
}

model SaveDevicePropRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

>  If you specify this parameter, you must also specify the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

>  If you specify this parameter, you do not need to specify the **ProductKey** or **DeviceName** parameters. The **IotId** parameter specifies a globally unique identifier (GUID) for the device. The value of the IotId parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. On the **Overview** page in the IoT Platform console, you can view the **ID** of the instance.


**Important**

*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
*   If the **Overview** page or instance ID is not displayed in the IoT Platform console, you do not need to configure this parameter.

For more information about the instance, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

>  If you specify this parameter, you must also specify the **DeviceName** parameter.', example='a1BwAGV****'),
  props?: string(name='Props', description='The tag that you want to specify for the device. You can specify multiple tags.

The tags must be JSON data in the **Key:Value** format. **Key** indicates the tag name, and **Value** indicates the tag value.

Separate multiple tags with commas (,). Example: **Props={"color":"red","shape":"round"}**


**Important**

*   The maximum size of the **Props** parameter is 5 KB.
*   `abc` is a **key** that is reserved by IoT Platform. You cannot set **Key** to abc. If you set `Key` to abc, the abc tag is automatically filtered when you query tags.', example='{"color":"red"}'),
}

model SaveDevicePropResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information about error codes, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model SaveDevicePropResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveDevicePropResponseBody(name='body'),
}

/**
  * *   A device can have a maximum of 100 tags.
  * *   You can modify or add a maximum of 100 tags at a time.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SaveDevicePropRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SaveDevicePropResponse
 */
async function saveDevicePropWithOptions(request: SaveDevicePropRequest, runtime: Util.RuntimeOptions): SaveDevicePropResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.props)) {
    query['Props'] = request.props;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveDeviceProp',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   A device can have a maximum of 100 tags.
  * *   You can modify or add a maximum of 100 tags at a time.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SaveDevicePropRequest
  * @return SaveDevicePropResponse
 */
async function saveDeviceProp(request: SaveDevicePropRequest): SaveDevicePropResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveDevicePropWithOptions(request, runtime);
}

model SaveScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
  scriptDraft?: string(name='ScriptDraft', example='var data = payload("json")'),
}

model SaveScriptResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model SaveScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveScriptResponseBody(name='body'),
}

async function saveScriptWithOptions(request: SaveScriptRequest, runtime: Util.RuntimeOptions): SaveScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  if (!Util.isUnset(request.scriptDraft)) {
    query['ScriptDraft'] = request.scriptDraft;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveScript(request: SaveScriptRequest): SaveScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveScriptWithOptions(request, runtime);
}

model SetDeviceDesiredPropertyRequest {
  deviceName?: string(name='DeviceName', description='The name of the device.

> If you specify a value for this parameter, you must also specify a value for the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

> The IotId parameter specifies a globally unique identifier (GUID) for the device. The value of the **IotId** parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for this parameter, you do not need to specify the **ProductKey** or **DeviceName** parameters. If you specify values for the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.****

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  items?: string(name='Items', description='The property value that you want to specify. The value of this parameter is a JSON string. Format: **Key:Value**. Example: {"Temperature":35}. You can specify up to 10 desired property values.

*   **Key** specifies the identifier of the property. You can view the property identifier on the **Define Feature**[ tab of the Product Details page in the IoT Platform console. You can also call the ](~~150321~~)QueryThingModel operation and view the property identifier in the returned TSL data.

    If the temperature property belongs to a custom module named testFb, this parameter is set to **{"testFb:temperature":35}**.

>The specified property must allow read/write access. If you specify a read-only property, the setting fails. The property identifier must be unique.

*   **Value** specifies the desired value of the property. The value must match the data type and value range that are defined for the property.

> If you set Value to null, the desired value of the property is cleared.', example='{"Temperature":35}'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

> If you configure this parameter, you must also specify a value for the **DeviceName** parameter.', example='a1BwAGV****'),
  versions?: string(name='Versions', description='The version number of the desired property value. The value of this parameter is a JSON string. Format: Key:Value. Example: {"Temperature":2}.

*   **Key** specifies the identifier of the property. You can view the property identifier on the Define Feature tab of the Product Details page in the IoT Platform console.

> The property identifier must be unique.

*   **Value** specifies the version number of the desired property value.

    The first time you specify a desired property value, set the Value parameter to 0. After you set the property value, the version number changes to 1. Each time you specify a desired property value, IoT Platform automatically increases the version number by 1. The second time that you specify a desired property value, the version number changes to 2. The third time that you specify a desired property value, set the version number to 2. After you specify the desired property value, the version number changes to 3.

> If the version number that you specify for this parameter is not the current version number, the server rejects the request. If you are not sure about the current version number, you do not need to specify a version number. However, you must enter a valid JSON object {}.', example='{"Temperature":2}'),
}

model SetDeviceDesiredPropertyResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the message that IoT Platform sends to the device to specify desired property values.', example='300511751'),
    versions?: string(name='Versions', description='The current version numbers of the desired property values.', example='{\\"Temperature\\":2}'),
  }(name='Data', description='The data returned if the call is successful. For more information, see the following parameters.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model SetDeviceDesiredPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDeviceDesiredPropertyResponseBody(name='body'),
}

/**
  * *   You cannot query the desired values of read-only properties.
  * *   You can specify up to 10 desired property values in a call.
  * *   After a device is created, the value of the **Version** parameter is 0. If you want to configure the **Version** parameter the first time you specify a desired property value, set the **Version** parameter to 0.
  * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDeviceDesiredPropertyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDeviceDesiredPropertyResponse
 */
async function setDeviceDesiredPropertyWithOptions(request: SetDeviceDesiredPropertyRequest, runtime: Util.RuntimeOptions): SetDeviceDesiredPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.versions)) {
    query['Versions'] = request.versions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceDesiredProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You cannot query the desired values of read-only properties.
  * *   You can specify up to 10 desired property values in a call.
  * *   After a device is created, the value of the **Version** parameter is 0. If you want to configure the **Version** parameter the first time you specify a desired property value, set the **Version** parameter to 0.
  * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDeviceDesiredPropertyRequest
  * @return SetDeviceDesiredPropertyResponse
 */
async function setDeviceDesiredProperty(request: SetDeviceDesiredPropertyRequest): SetDeviceDesiredPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceDesiredPropertyWithOptions(request, runtime);
}

model SetDeviceGroupTagsRequest {
  groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.', example='W16X8Tvdosec****'),
  groupType?: string(name='GroupType', description='The type of the group.

You do not need to configure this parameter.', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. On the **Overview** page in the IoT Platform console, you can view the **ID** of the instance.


>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If the **Overview** page or instance ID is not displayed in the IoT Platform console, you do not need to configure this parameter.

For more information about the instance, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  tagString?: string(name='TagString', description='The tag data in the JSON format. The TagString parameter specifies multiple tags in the format of key-value pairs. You must specify **tagKey** and **tagValue** for each tag.

*   **tagKey**: the tag key. The key must be 2 to 30 characters in length, and can contain letters, digits, and periods (.).
*   **tagValue**: the tag value. Each value can contain letters, digits, underscores (\\_), and hyphens (-). The value must be 1 to 128 characters in length.

Separate multiple tags with commas (,). Example: `[{"tagKey":"h1","tagValue":"rr"},{"tagKey":"7h","tagValue":"rr"}]`

If you specify a new value for an existing tag, the new tag value overwrites the original value.

If you want to delete a tag, you do not need to specify the key and value for the tag.

**

**Important** `abc` is a key that is reserved by IoT Platform. You cannot set **tagKey** to abc. If you set `tagKey` to abc, the abc tag is automatically filtered when you query tags.', example='[{"tagKey":"h1","tagValue":"rr"},{"tagKey":"7h","tagValue":"rr"}]'),
}

model SetDeviceGroupTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information about the error codes, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12CFDAF1-99D9-42E0-8C2F-F281DA5E8953'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model SetDeviceGroupTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDeviceGroupTagsResponseBody(name='body'),
}

/**
  * A device group can have a maximum of 100 tags.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDeviceGroupTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDeviceGroupTagsResponse
 */
async function setDeviceGroupTagsWithOptions(request: SetDeviceGroupTagsRequest, runtime: Util.RuntimeOptions): SetDeviceGroupTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.tagString)) {
    query['TagString'] = request.tagString;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceGroupTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A device group can have a maximum of 100 tags.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 50 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDeviceGroupTagsRequest
  * @return SetDeviceGroupTagsResponse
 */
async function setDeviceGroupTags(request: SetDeviceGroupTagsRequest): SetDeviceGroupTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceGroupTagsWithOptions(request, runtime);
}

model SetDevicePropertyRequest {
  deviceName?: string(name='DeviceName', description='The DeviceName of the device.

> If you configure this parameter, you must specify a value for the **ProductKey** parameter.', example='light'),
  iotId?: string(name='IotId', description='The ID of the device. The ID is a unique identifier that is issued by IoT Platform to the device.

> The IotId parameter specifies a globally unique identifier (GUID) for the device. The value of the **IotId** parameter corresponds to a combination of the values of the **ProductKey** and **DeviceName** parameters. If you specify a value for this parameter, you do not need to configure the **ProductKey** or **DeviceName** parameter. If you specify values for the **IotId**, **ProductKey**, and **DeviceName** parameters, the value of the **IotId** parameter takes precedence.', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the elastic container instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-v64*****'),
  items?: string(name='Items', description='The properties that you want to specify. The properties must be in the JSON format.

Each property consists of a **key-value pair in the key:value format**. Separate multiple properties with commas (,).

For example, you can configure the following properties for a smart lamp:

*   A switch property whose key is **Switch** and whose data type is **BOOLEAN**. The value is **1**. The value 1 indicates that the light is on.
*   A color property whose key is **Color** and whose data type is **STRING**. The value is **blue**.

In this case, you can specify the following properties in the JSON format:

`Items={"Switch":1,"Color":"blue"}`

>  If you specify properties for the custom module testFb, set the Items parameter to `{"testFb:Switch":1,"testFb:Color":"blue"}`. The testFb module is not the default module.', example='{"Switch":1,"Color":"blue"}'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.

> If you configure this parameter, you must also specify a value for the **DeviceName** parameter.', example='a1BwAGV****'),
}

model SetDevicePropertyResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the message that IoT Platform sends to the device.', example='abcabc123'),
  }(name='Data', description='The data returned if the call is successful.'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model SetDevicePropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDevicePropertyResponseBody(name='body'),
}

/**
  * After IoT Platform sends a request to configure device properties, the device receives and processes the request in an asynchronous manner. When you call this operation, a successful response indicates that IoT Platform sent a request. The response does not indicate that the device received and processed the request. After the device SDK responds to the request, the device properties are configured.
  * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDevicePropertyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDevicePropertyResponse
 */
async function setDevicePropertyWithOptions(request: SetDevicePropertyRequest, runtime: Util.RuntimeOptions): SetDevicePropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After IoT Platform sends a request to configure device properties, the device receives and processes the request in an asynchronous manner. When you call this operation, a successful response indicates that IoT Platform sent a request. The response does not indicate that the device received and processed the request. After the device SDK responds to the request, the device properties are configured.
  * > If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 500 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDevicePropertyRequest
  * @return SetDevicePropertyResponse
 */
async function setDeviceProperty(request: SetDevicePropertyRequest): SetDevicePropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicePropertyWithOptions(request, runtime);
}

model SetDevicesPropertyRequest {
  deviceName?: [ string ](name='DeviceName', example='light'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.****

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  items?: string(name='Items', description='The properties that you want to specify. The properties must be in the JSON format.

Each property consists of a **key-value pair in the key:value format**. Separate multiple properties with commas (,).

For example, you can configure the following properties for a smart lamp:

*   A switch property whose key is **Switch** and whose data type is **BOOLEAN**. The value is **1**. The value 1 indicates that the light is on.
*   A color property whose key is **Color** and whose data type is **STRING**. The value is **blue**.

In this case, you can specify the following properties in the JSON format:

`Items={"Switch":1,"Color":"blue"}`

>  If you configure properties for the custom module testFb, set the Items parameter to `{"testFb:Switch":1,"testFb:Color":"blue"}`. The testFb module is not the default module.', example='{"Switch":1,"Color":"blue"}'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1BwAGV****'),
}

model SetDevicesPropertyResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information about the error codes, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model SetDevicesPropertyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDevicesPropertyResponseBody(name='body'),
}

/**
  * If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDevicesPropertyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SetDevicesPropertyResponse
 */
async function setDevicesPropertyWithOptions(request: SetDevicesPropertyRequest, runtime: Util.RuntimeOptions): SetDevicesPropertyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDevicesProperty',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the Thing Specification Language (TSL) data is of the float or double type, the parameter values that correspond to the TSL data contain at least one decimal place. Examples: 10.0 and 11.1.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request SetDevicesPropertyRequest
  * @return SetDevicesPropertyResponse
 */
async function setDevicesProperty(request: SetDevicesPropertyRequest): SetDevicesPropertyResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicesPropertyWithOptions(request, runtime);
}

model SetEdgeInstanceDriverConfigsRequest {
  configs?: [ 
    {
      content?: string(name='Content', example='{"test":123}'),
      format?: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs'),
  driverId?: string(name='DriverId', example='021d154d2a2f4dd7a489773d9e04****'),
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model SetEdgeInstanceDriverConfigsResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='252C7754-F6A2-454B-9DE2-382A97FC0C3F'),
  success?: boolean(name='Success', example='true'),
}

model SetEdgeInstanceDriverConfigsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetEdgeInstanceDriverConfigsResponseBody(name='body'),
}

async function setEdgeInstanceDriverConfigsWithOptions(request: SetEdgeInstanceDriverConfigsRequest, runtime: Util.RuntimeOptions): SetEdgeInstanceDriverConfigsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetEdgeInstanceDriverConfigs',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setEdgeInstanceDriverConfigs(request: SetEdgeInstanceDriverConfigsRequest): SetEdgeInstanceDriverConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEdgeInstanceDriverConfigsWithOptions(request, runtime);
}

model SetProductCertInfoRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  issueModel?: int32(name='IssueModel', example='1'),
  productKey?: string(name='ProductKey', example='aS2dewS****'),
}

model SetProductCertInfoResponseBody = {
  code?: string(name='Code', example='MissingProductKey'),
  errorMessage?: string(name='ErrorMessage', example='ProductKey is mandatory for this action.'),
  requestId?: string(name='RequestId', example='57b144cf-09fc-4916-a272-a62902d5b207'),
  success?: boolean(name='Success', example='true'),
}

model SetProductCertInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetProductCertInfoResponseBody(name='body'),
}

async function setProductCertInfoWithOptions(request: SetProductCertInfoRequest, runtime: Util.RuntimeOptions): SetProductCertInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.issueModel)) {
    query['IssueModel'] = request.issueModel;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetProductCertInfo',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setProductCertInfo(request: SetProductCertInfoRequest): SetProductCertInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return setProductCertInfoWithOptions(request, runtime);
}

model SetStudioProjectCooperationRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  status?: string(name='Status', example='1'),
}

model SetStudioProjectCooperationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetStudioProjectCooperationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetStudioProjectCooperationResponseBody(name='body'),
}

async function setStudioProjectCooperationWithOptions(request: SetStudioProjectCooperationRequest, runtime: Util.RuntimeOptions): SetStudioProjectCooperationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetStudioProjectCooperation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setStudioProjectCooperation(request: SetStudioProjectCooperationRequest): SetStudioProjectCooperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return setStudioProjectCooperationWithOptions(request, runtime);
}

model SetupStudioAppAuthModeOpenRequest {
  appId?: string(name='AppId', example='a12*****'),
  authMode?: int32(name='AuthMode', example='1'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectId?: string(name='ProjectId', example='a123********'),
}

model SetupStudioAppAuthModeOpenResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    authMode?: int32(name='AuthMode', example='1'),
    tokenInfo?: {
      bizId?: string(name='BizId', example='a12********'),
      bizType?: string(name='BizType', example='webApp'),
      isEnable?: string(name='IsEnable', example='YES'),
      token?: string(name='Token', example='25bf576a6c6f**********'),
      type?: string(name='Type', example='custom'),
    }(name='TokenInfo'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model SetupStudioAppAuthModeOpenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetupStudioAppAuthModeOpenResponseBody(name='body'),
}

async function setupStudioAppAuthModeOpenWithOptions(request: SetupStudioAppAuthModeOpenRequest, runtime: Util.RuntimeOptions): SetupStudioAppAuthModeOpenResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appId)) {
    body['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.authMode)) {
    body['AuthMode'] = request.authMode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectId)) {
    body['ProjectId'] = request.projectId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetupStudioAppAuthModeOpen',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setupStudioAppAuthModeOpen(request: SetupStudioAppAuthModeOpenRequest): SetupStudioAppAuthModeOpenResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupStudioAppAuthModeOpenWithOptions(request, runtime);
}

model ShareSpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  combinationList?: [ string ](name='CombinationList', example='ZFBDZ'),
  deviceName?: string(name='DeviceName', example='test'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
}

model ShareSpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model ShareSpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShareSpeechByCombinationResponseBody(name='body'),
}

async function shareSpeechByCombinationWithOptions(request: ShareSpeechByCombinationRequest, runtime: Util.RuntimeOptions): ShareSpeechByCombinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.combinationList)) {
    body['CombinationList'] = request.combinationList;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ShareSpeechByCombination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function shareSpeechByCombination(request: ShareSpeechByCombinationRequest): ShareSpeechByCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return shareSpeechByCombinationWithOptions(request, runtime);
}

model SpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  combinationList?: [ string ](name='CombinationList', example='ZFBDZ'),
  deviceName?: string(name='DeviceName', example='test'),
  enforceFlag?: boolean(name='EnforceFlag', example='false'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
}

model SpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SpeechByCombinationResponseBody(name='body'),
}

async function speechByCombinationWithOptions(request: SpeechByCombinationRequest, runtime: Util.RuntimeOptions): SpeechByCombinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.combinationList)) {
    body['CombinationList'] = request.combinationList;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.enforceFlag)) {
    body['EnforceFlag'] = request.enforceFlag;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SpeechByCombination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function speechByCombination(request: SpeechByCombinationRequest): SpeechByCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return speechByCombinationWithOptions(request, runtime);
}

model SpeechBySynthesisRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  deviceName?: string(name='DeviceName', example='test'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
  speechRate?: int32(name='SpeechRate', example='0'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model SpeechBySynthesisResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SpeechBySynthesisResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SpeechBySynthesisResponseBody(name='body'),
}

async function speechBySynthesisWithOptions(request: SpeechBySynthesisRequest, runtime: Util.RuntimeOptions): SpeechBySynthesisResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SpeechBySynthesis',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function speechBySynthesis(request: SpeechBySynthesisRequest): SpeechBySynthesisResponse {
  var runtime = new Util.RuntimeOptions{};
  return speechBySynthesisWithOptions(request, runtime);
}

model StartParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model StartParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model StartParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartParserResponseBody(name='body'),
}

async function startParserWithOptions(request: StartParserRequest, runtime: Util.RuntimeOptions): StartParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startParser(request: StartParserRequest): StartParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return startParserWithOptions(request, runtime);
}

model StartRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', description='The ID of the rule that you want to enable. You can log on to the IoT Platform console and choose **Rules** > **Data Forwarding** to view the rule ID. You can also call the [ListRule](~~69486~~) operation and view the rule ID in the response.', example='100000'),
}

model StartRuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model StartRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartRuleResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You must verify that the rule has SQL statements configured before you start the rule. If you do not set an SQL statement when you create the rule, call the [UpdateRule](~~69513~~) operation to add an SQL statement and update the rule.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request StartRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartRuleResponse
 */
async function startRuleWithOptions(request: StartRuleRequest, runtime: Util.RuntimeOptions): StartRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You must verify that the rule has SQL statements configured before you start the rule. If you do not set an SQL statement when you create the rule, call the [UpdateRule](~~69513~~) operation to add an SQL statement and update the rule.
  * *   Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request StartRuleRequest
  * @return StartRuleResponse
 */
async function startRule(request: StartRuleRequest): StartRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return startRuleWithOptions(request, runtime);
}

model StopParserRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-n8t***'),
  parserId?: long(name='ParserId', example='1001'),
}

model StopParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model StopParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopParserResponseBody(name='body'),
}

async function stopParserWithOptions(request: StopParserRequest, runtime: Util.RuntimeOptions): StopParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopParser(request: StopParserRequest): StopParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopParserWithOptions(request, runtime);
}

model StopRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  ruleId?: long(name='RuleId', description='The ID of the rule that you want to disable. You can log on to the IoT Platform console and choose **Rules** > **Data Forwarding** to view the rule ID. You can also call the [ListRule](~~69486~~) operation and view the rule ID in the response.', example='100000'),
}

model StopRuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model StopRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopRuleResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request StopRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopRuleResponse
 */
async function stopRuleWithOptions(request: StopRuleRequest, runtime: Util.RuntimeOptions): StopRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request StopRuleRequest
  * @return StopRuleResponse
 */
async function stopRule(request: StopRuleRequest): StopRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopRuleWithOptions(request, runtime);
}

model SubscribeTopicRequest {
  deviceName?: string(name='DeviceName', description='The **DeviceName** of the device to which the topic belongs.', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot-06***'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the device belongs.', example='a1Q5XoY***'),
  topic?: [ string ](name='Topic', example='/a1Q5XoY***/device1/user/get'),
}

model SubscribeTopicResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model SubscribeTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubscribeTopicResponseBody(name='body'),
}

/**
  * *   The device that needs to subscribe to topics must be connected to IoT Platform and online.
  * *   You can call this operation to subscribe to the topics of a specified device. You can specify a maximum of 10 topics in a single call.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request SubscribeTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SubscribeTopicResponse
 */
async function subscribeTopicWithOptions(request: SubscribeTopicRequest, runtime: Util.RuntimeOptions): SubscribeTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubscribeTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The device that needs to subscribe to topics must be connected to IoT Platform and online.
  * *   You can call this operation to subscribe to the topics of a specified device. You can specify a maximum of 10 topics in a single call.
  * ## QPS limits
  * Each Alibaba Cloud account can run up to 10 queries per second (QPS). 
  * >  The RAM users of an Alibaba Cloud account share the quota of the Alibaba Cloud account.
  *
  * @param request SubscribeTopicRequest
  * @return SubscribeTopicResponse
 */
async function subscribeTopic(request: SubscribeTopicRequest): SubscribeTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return subscribeTopicWithOptions(request, runtime);
}

model SyncSpeechByCombinationRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  combinationList?: [ string ](name='CombinationList', example='ZFBDZ'),
  deviceName?: string(name='DeviceName', example='test'),
  enforceFlag?: boolean(name='EnforceFlag', example='false'),
  iotId?: string(name='IotId', example='Q7uOhVRdZRRlDnTLv****00100'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  speechId?: string(name='SpeechId', example='42000011392021112380********'),
}

model SyncSpeechByCombinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: {
    detail?: string(name='Detail', example='Bat_Pt:99 RSSI: -92'),
    deviceErrorCode?: string(name='DeviceErrorCode', example='1'),
    deviceErrorMessage?: string(name='DeviceErrorMessage', example='speech model not found'),
    id?: string(name='Id', example='42000011392021112380********'),
    maxRetryCount?: int32(name='MaxRetryCount', example='2'),
    retryCount?: int32(name='RetryCount', example='1'),
    success?: boolean(name='Success', example='true'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='An internal error occurred. Try again later.'),
  requestId?: string(name='RequestId', example='671D0F8F-FDC7-4B12-93FA-336C079C965A'),
  success?: boolean(name='Success', example='true'),
}

model SyncSpeechByCombinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncSpeechByCombinationResponseBody(name='body'),
}

async function syncSpeechByCombinationWithOptions(request: SyncSpeechByCombinationRequest, runtime: Util.RuntimeOptions): SyncSpeechByCombinationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.combinationList)) {
    body['CombinationList'] = request.combinationList;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.enforceFlag)) {
    body['EnforceFlag'] = request.enforceFlag;
  }
  if (!Util.isUnset(request.iotId)) {
    body['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    body['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.speechId)) {
    body['SpeechId'] = request.speechId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncSpeechByCombination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncSpeechByCombination(request: SyncSpeechByCombinationRequest): SyncSpeechByCombinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncSpeechByCombinationWithOptions(request, runtime);
}

model TestSpeechRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model TestSpeechShrinkRequest {
  audioFormat?: string(name='AudioFormat', example='wav'),
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfigShrink?: string(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechRate?: int32(name='SpeechRate', example='0'),
  speechType?: string(name='SpeechType', example='custom'),
  text?: string(name='Text', example='test'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model TestSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  data?: {
    items?: [ string ](name='items')
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage', example='speech solution has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model TestSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestSpeechResponseBody(name='body'),
}

async function testSpeechWithOptions(tmpReq: TestSpeechRequest, runtime: Util.RuntimeOptions): TestSpeechResponse {
  Util.validateModel(tmpReq);
  var request = new TestSpeechShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.soundCodeConfig)) {
    request.soundCodeConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.soundCodeConfig, 'SoundCodeConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.audioFormat)) {
    body['AudioFormat'] = request.audioFormat;
  }
  if (!Util.isUnset(request.enableSoundCode)) {
    body['EnableSoundCode'] = request.enableSoundCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.soundCodeConfigShrink)) {
    body['SoundCodeConfig'] = request.soundCodeConfigShrink;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.speechType)) {
    body['SpeechType'] = request.speechType;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'TestSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testSpeech(request: TestSpeechRequest): TestSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return testSpeechWithOptions(request, runtime);
}

model TestSwitchRequest {
  deviceName?: string(name='DeviceName'),
  iotInstanceId?: string(name='IotInstanceId'),
  productKey?: string(name='ProductKey'),
}

model TestSwitchResponseBody = {
  code?: string(name='Code'),
  errorMessage?: string(name='ErrorMessage'),
  iotId?: string(name='IotId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TestSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestSwitchResponseBody(name='body'),
}

async function testSwitchWithOptions(request: TestSwitchRequest, runtime: Util.RuntimeOptions): TestSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestSwitch',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testSwitch(request: TestSwitchRequest): TestSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return testSwitchWithOptions(request, runtime);
}

model TransformClientIdRequest {
  clientId?: string(name='ClientId', description='The ClientID of the device.', example='9rSz********UNMWj33f000112'),
  iotId?: string(name='IotId', description='The ID of the device.', example='BXPV9Ks3bxwM9fD****0000101'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-02****43'),
}

model TransformClientIdResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the call was successful. Other values indicate that errors occurred. For more information about error codes, see [Error codes](~~87387~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='89F22330-BAEE-****-****-41BA46D6E267'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model TransformClientIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TransformClientIdResponseBody(name='body'),
}

/**
  * You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request TransformClientIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TransformClientIdResponse
 */
async function transformClientIdWithOptions(request: TransformClientIdRequest, runtime: Util.RuntimeOptions): TransformClientIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TransformClientId',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the [QueryClientIds](~~371985~~) operation to view the ClientIDs of a device.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request TransformClientIdRequest
  * @return TransformClientIdResponse
 */
async function transformClientId(request: TransformClientIdRequest): TransformClientIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return transformClientIdWithOptions(request, runtime);
}

model TriggerSceneRuleRequest {
  instanceId?: string(name='InstanceId', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model TriggerSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA989EK'),
  success?: boolean(name='Success', example='true'),
}

model TriggerSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TriggerSceneRuleResponseBody(name='body'),
}

async function triggerSceneRuleWithOptions(request: TriggerSceneRuleRequest, runtime: Util.RuntimeOptions): TriggerSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TriggerSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function triggerSceneRule(request: TriggerSceneRuleRequest): TriggerSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerSceneRuleWithOptions(request, runtime);
}

model UnbindApplicationFromEdgeInstanceRequest {
  applicationId?: string(name='ApplicationId', example='361368ba5a094da9bf5625d092******'),
  instanceId?: string(name='InstanceId', example='Tb4r9k3GWHJFWv******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UnbindApplicationFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='5CA3B4EE-D865-47B0-91FD-BA7C2BC6BCC4'),
  success?: boolean(name='Success', example='true'),
}

model UnbindApplicationFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindApplicationFromEdgeInstanceResponseBody(name='body'),
}

async function unbindApplicationFromEdgeInstanceWithOptions(request: UnbindApplicationFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindApplicationFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindApplicationFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindApplicationFromEdgeInstance(request: UnbindApplicationFromEdgeInstanceRequest): UnbindApplicationFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindApplicationFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindDriverFromEdgeInstanceRequest {
  driverId?: string(name='DriverId', description='The ID of the driver that you want to unbind. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver that you want to unbind and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='9c1ae7bd59f1469abbdccc959228****'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance from which you want to unbind a driver and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
}

model UnbindDriverFromEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='28D159F4-980F-423D-95F0-F705E9DFC016'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model UnbindDriverFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindDriverFromEdgeInstanceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UnbindDriverFromEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnbindDriverFromEdgeInstanceResponse
 */
async function unbindDriverFromEdgeInstanceWithOptions(request: UnbindDriverFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindDriverFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindDriverFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UnbindDriverFromEdgeInstanceRequest
  * @return UnbindDriverFromEdgeInstanceResponse
 */
async function unbindDriverFromEdgeInstance(request: UnbindDriverFromEdgeInstanceRequest): UnbindDriverFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindDriverFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindLicenseProductRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot-s3***'),
  licenseCode?: string(name='LicenseCode', example='480P'),
  productKey?: string(name='ProductKey', example='gq62z***'),
}

model UnbindLicenseProductResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  data?: boolean(name='Data', example='true'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4F94B97-1D64-4080-BFD2-67461667AA43'),
  success?: boolean(name='Success', example='true'),
}

model UnbindLicenseProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindLicenseProductResponseBody(name='body'),
}

async function unbindLicenseProductWithOptions(request: UnbindLicenseProductRequest, runtime: Util.RuntimeOptions): UnbindLicenseProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.licenseCode)) {
    query['LicenseCode'] = request.licenseCode;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindLicenseProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindLicenseProduct(request: UnbindLicenseProductRequest): UnbindLicenseProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindLicenseProductWithOptions(request, runtime);
}

model UnbindRoleFromEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='BlYJyXZpLBtkmR******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UnbindRoleFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='270097AC-FFC3-4D2F-B48D-384BA1EA9962'),
  success?: boolean(name='Success', example='true'),
}

model UnbindRoleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindRoleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindRoleFromEdgeInstanceWithOptions(request: UnbindRoleFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindRoleFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindRoleFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindRoleFromEdgeInstance(request: UnbindRoleFromEdgeInstanceRequest): UnbindRoleFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindRoleFromEdgeInstanceWithOptions(request, runtime);
}

model UnbindSceneRuleFromEdgeInstanceRequest {
  instanceId?: string(name='InstanceId', example='llL44UVXUqb9m5******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
}

model UnbindSceneRuleFromEdgeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-AE58-68E7BAA909EK'),
  success?: boolean(name='Success', example='true'),
}

model UnbindSceneRuleFromEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindSceneRuleFromEdgeInstanceResponseBody(name='body'),
}

async function unbindSceneRuleFromEdgeInstanceWithOptions(request: UnbindSceneRuleFromEdgeInstanceRequest, runtime: Util.RuntimeOptions): UnbindSceneRuleFromEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnbindSceneRuleFromEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindSceneRuleFromEdgeInstance(request: UnbindSceneRuleFromEdgeInstanceRequest): UnbindSceneRuleFromEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindSceneRuleFromEdgeInstanceWithOptions(request, runtime);
}

model UpdateConsumerGroupRequest {
  groupId?: string(name='GroupId', description='The consumer group ID. After you call the [CreateConsumerGroup](~~170388~~) operation to create a consumer group, the consumer group ID is returned. You can call the [QueryConsumerGroupList](~~170419~~) operation to query the consumer group ID by group name. You can also go to the IoT Platform console,and choose **Rules** > **Server-side Subscription** > **Consumer Groups** to view the consumer group ID.', example='nJRaJPn5U1JITGf******'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  newGroupName?: string(name='NewGroupName', description='The new name of the consumer group. The name must be 4 to 30 characters in length and can contain letters, digits, and underscores (\\_).'),
}

model UpdateConsumerGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73B9DF43-7780-47DE-8BED-077729D28BD2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateConsumerGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateConsumerGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * *   You cannot modify the default consumer group provided by IoT Platform.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateConsumerGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateConsumerGroupResponse
 */
async function updateConsumerGroupWithOptions(request: UpdateConsumerGroupRequest, runtime: Util.RuntimeOptions): UpdateConsumerGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.newGroupName)) {
    query['NewGroupName'] = request.newGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConsumerGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   You cannot modify the default consumer group provided by IoT Platform.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateConsumerGroupRequest
  * @return UpdateConsumerGroupResponse
 */
async function updateConsumerGroup(request: UpdateConsumerGroupRequest): UpdateConsumerGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConsumerGroupWithOptions(request, runtime);
}

model UpdateDestinationRequest {
  configuration?: string(name='Configuration', example='{"topic":"/a1POX0c****/device1/user/get","topicType":1}'),
  description?: string(name='Description'),
  destinationId?: long(name='DestinationId', example='1002'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  name?: string(name='Name', example='DataPurpose'),
  type?: string(name='Type', example='REPUBLISH'),
}

model UpdateDestinationResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDestinationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDestinationResponseBody(name='body'),
}

async function updateDestinationWithOptions(request: UpdateDestinationRequest, runtime: Util.RuntimeOptions): UpdateDestinationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destinationId)) {
    query['DestinationId'] = request.destinationId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDestination',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDestination(request: UpdateDestinationRequest): UpdateDestinationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDestinationWithOptions(request, runtime);
}

model UpdateDeviceGroupRequest {
  groupDesc?: string(name='GroupDesc', description='The description of the group. The description must be 1 to 100 characters in length.', example='test2'),
  groupId?: string(name='GroupId', description='The ID of the group. The ID is the globally unique identifier (GUID) for the group.', example='W16X8Tvdosec****'),
  groupType?: string(name='GroupType', description='The type of the group.

If you set the value to **LINK_PLATFORM_DYNAMIC**, a dynamic group is queried. If you do not specify this parameter, a static group is queried by default.', example='LINK_PLATFORM_DYNAMIC'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
}

model UpdateDeviceGroupResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B78B4FD1-AE89-417B-AD55-367EBB0C6759'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateDeviceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeviceGroupResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateDeviceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateDeviceGroupResponse
 */
async function updateDeviceGroupWithOptions(request: UpdateDeviceGroupRequest, runtime: Util.RuntimeOptions): UpdateDeviceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupDesc)) {
    query['GroupDesc'] = request.groupDesc;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDeviceGroup',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateDeviceGroupRequest
  * @return UpdateDeviceGroupResponse
 */
async function updateDeviceGroup(request: UpdateDeviceGroupRequest): UpdateDeviceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceGroupWithOptions(request, runtime);
}

model UpdateDeviceShadowRequest {
  deltaUpdate?: boolean(name='DeltaUpdate', description='Specifies whether to perform an incremental update on the **desired** parameter. Valid values:

*   **true**: performs an incremental update.
*   **false**: performs a full update. This is the default value.', example='false'),
  deviceName?: string(name='DeviceName', description='The name of the device whose shadow information you want to modify.', example='device1'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the elastic container instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.****

>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
>*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product to which the device belongs.', example='a1T27vz****'),
  shadowMessage?: string(name='ShadowMessage', description='The information that you want to specify for the device shadow.

The information includes the following parameters:

*   **method**: the type of the operation. Data type: string. Set the value to **update**.

*   **state**: the status of the device shadow. Data type: string. The **desired** parameter specifies the expected shadow status.

*   **version**: the version of the device shadow. Data type: long.

    *   If versioning is not required, set this parameter to 0.
    *   If versioning is required, specify a version that is later than the current version.

**

**Important** If versioning is required, do not query the version of a device shadow in the IoT Platform console. If a large number of update and query operations are concurrently performed, multiple update operations may return the same version. In this case, the most recent update operation may first be completed. As a result, the current shadow information is not the latest shadow information. We recommend that you maintain the versions of device shadows on the on-premises device. When you call this operation, use an on-premises application to obtain the latest version of the device shadow.', example='{"method":"update","state":{"desired":{"color":"green"}},"version":2}'),
}

model UpdateDeviceShadowResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6754C0E7-A35D-4CC8-A684-45EB1F0008D9'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateDeviceShadowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDeviceShadowResponseBody(name='body'),
}

/**
  * ## QPS limits
  * You can call this API operation up to 500 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateDeviceShadowRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateDeviceShadowResponse
 */
async function updateDeviceShadowWithOptions(request: UpdateDeviceShadowRequest, runtime: Util.RuntimeOptions): UpdateDeviceShadowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deltaUpdate)) {
    query['DeltaUpdate'] = request.deltaUpdate;
  }
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.shadowMessage)) {
    query['ShadowMessage'] = request.shadowMessage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDeviceShadow',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * You can call this API operation up to 500 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateDeviceShadowRequest
  * @return UpdateDeviceShadowResponse
 */
async function updateDeviceShadow(request: UpdateDeviceShadowRequest): UpdateDeviceShadowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDeviceShadowWithOptions(request, runtime);
}

model UpdateEdgeDriverVersionRequest {
  argument?: string(name='Argument', description='The Java Virtual Machine (JVM) startup parameter.', example='-XX:+PrintGCDetails'),
  configCheckRule?: string(name='ConfigCheckRule', description='The rule for verifying configurations. Set this parameter to a JSON string in the following format:

`{"deviceConfig":{"required":false},"driverConfig":{"required":false}`

The JSON string contains the following parameters:

*   driverConfig: the rule for verifying the configuration of the driver when the driver is to be deployed in an edge instance.
*   deviceConfig: the rule for verifying the configurations of devices that use the driver when the driver is to be deployed in an edge instance.

`required`: A value of true indicates that the corresponding parameter is required. A value of false indicates that the corresponding parameter is optional.', example='{"deviceConfig":{"required":false},"driverConfig":{"required":false}}'),
  containerConfig?: string(name='ContainerConfig', description='The configuration of the container where the driver runs. Set this parameter to a JSON string. For more information about parameters in the JSON string, see the following parameter description of ContainerConfig.', example='{"privileged":1,"devMappings":[],"volumeMappings":[],"hostNetworkMode":0,"portMappings":[]}'),
  description?: string(name='Description', description='The description of the driver. The description can be a maximum of 256 bytes in length.'),
  driverConfig?: string(name='DriverConfig', description='The configuration of the driver. Set this parameter to a JSON string in the following format:

`{"format":"JSON","content":"{}"}`

The JSON string contains the following parameters:

*   format: the format of the driver configuration. Valid values: KV (key-value pair), JSON (JSON string), and FILE (configuration file).

*   content: the content of the driver configuration. If you set the format parameter to KV or JSON, set this parameter to the configuration content of the driver. If you set the format parameter to FILE, set this parameter to the URL of the driver configuration file stored in OSS.

>To obtain the URL of the driver configuration file stored in OSS, call the [CreateOssPreSignedAddress](~~155858~~) operation.', example='[{"format":"JSON","content":"{\\"defaultConfig\\":\\"this is default driver config demo\\"}"}]'),
  driverId?: string(name='DriverId', description='The ID of the driver. To obtain the driver ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Drivers** page, move the pointer over the name of the driver for which you want to update a driver version and obtain the driver ID.

You can also call the [QueryEdgeDriver](~~155776~~) operation to query the driver ID.', example='fec565038d7544978d9aed5c1a******'),
  driverVersion?: string(name='DriverVersion', description='The version number of the driver.', example='1.2.0'),
  edgeVersion?: string(name='EdgeVersion', description='The earliest version of Link IoT Edge that is supported by the driver. The driver can run on gateways of only this version and later. For example, if you set this parameter to 2.4.0, the driver can run on gateways of only version 2.4.0 and later.', example='2.0.0'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  sourceConfig?: string(name='SourceConfig', example='{"ossAddress":"http://nova-scene-daily.oss-cn-shanghai.aliyuncs.com/driver/a8d6e4acc6941ecea8f0cfb30c******/ck3n3koe200003h6zf******.zip"}'),
}

model UpdateEdgeDriverVersionResponseBody = {
  code?: string(name='Code', description='The return code of the operation. A value of Success indicates that the call was successful. Other values indicate that specific errors occurred. For more information, see [Error codes](~~135200~~).', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7757A782-6C24-4325-A663-C62857F32E87'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model UpdateEdgeDriverVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeDriverVersionResponseBody(name='body'),
}

/**
  * ## Limits
  * *   If a request parameter is not specified, the original value of the parameter will be cleared for the driver version.
  * *   You are not allowed to update a published driver version.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateEdgeDriverVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateEdgeDriverVersionResponse
 */
async function updateEdgeDriverVersionWithOptions(request: UpdateEdgeDriverVersionRequest, runtime: Util.RuntimeOptions): UpdateEdgeDriverVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.argument)) {
    query['Argument'] = request.argument;
  }
  if (!Util.isUnset(request.configCheckRule)) {
    query['ConfigCheckRule'] = request.configCheckRule;
  }
  if (!Util.isUnset(request.containerConfig)) {
    query['ContainerConfig'] = request.containerConfig;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.driverConfig)) {
    query['DriverConfig'] = request.driverConfig;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.driverVersion)) {
    query['DriverVersion'] = request.driverVersion;
  }
  if (!Util.isUnset(request.edgeVersion)) {
    query['EdgeVersion'] = request.edgeVersion;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.sourceConfig)) {
    query['SourceConfig'] = request.sourceConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeDriverVersion',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   If a request parameter is not specified, the original value of the parameter will be cleared for the driver version.
  * *   You are not allowed to update a published driver version.
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateEdgeDriverVersionRequest
  * @return UpdateEdgeDriverVersionResponse
 */
async function updateEdgeDriverVersion(request: UpdateEdgeDriverVersionRequest): UpdateEdgeDriverVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeDriverVersionWithOptions(request, runtime);
}

model UpdateEdgeInstanceRequest {
  bizEnable?: boolean(name='BizEnable', description='Specifies whether to enable the edge instance. Valid values:

*   true: enables the edge instance.
*   false: disables the edge instance.

If you do not set this parameter, this parameter is not updated.', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the edge instance. To obtain the instance ID, perform the following steps: Log on to the [Link IoT Edge console](https://iot.console.aliyun.com/le/instance/list). On the **Edge Instances** page, move the pointer over the name of the edge instance that you want to update and obtain the instance ID.

You can also call the [QueryEdgeInstance](~~135214~~) operation to query the instance ID.', example='F3APY0tPLhmgGtx0****'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the Internet of Things (IoT) service instance. This parameter is not required for the public instance but required for Enterprise Edition instances.', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', description='The name of the edge instance.

The name can be up to 20 characters in length and can contain letters, digits, underscores (\\_), and hyphens (-).', example='LinkIoTEdge_Node'),
  spec?: int32(name='Spec', description='The specifications of the edge instance. Valid values:

*   10: Lite Edition
*   20: Standard Edition
*   30: Pro Edition

If you do not set this parameter, this parameter is not updated.', example='10'),
  tags?: string(name='Tags', description='The tags of the edge instance. Each tag is a key-value pair. Multiple tags are separated with commas (,). Example: `k1:v1,k2:v2`.

*   Take note of the following limits on tag keys:

    *   Tag keys cannot be left empty.
    *   Tag keys must be unique in the edge instance.
    *   Tag keys support only letters.
    *   Each tag key can be up to 20 characters in length.

*   Take note of the following limits on tag values:

    *   Tag values cannot be left empty.
    *   A tag value can contain letters, digits, underscores (\\_), and hyphens (-).
    *   Each tag value can be up to 20 characters in length.

If you do not set this parameter, this parameter is not updated.', example='k1:v1,k2:v2'),
}

model UpdateEdgeInstanceResponseBody = {
  code?: string(name='Code', description='The return code of the operation.', example='Success'),
  errorMessage?: string(name='ErrorMessage', description='The error message that is returned if the call failed.', example='request parameter error'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='10CA6DAD-EBAF-4D3E-9309-9DB5B0FF48F2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. A value of true indicates that the call was successful. A value of false indicates that the call failed.', example='true'),
}

model UpdateEdgeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeInstanceResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateEdgeInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateEdgeInstanceResponse
 */
async function updateEdgeInstanceWithOptions(request: UpdateEdgeInstanceRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizEnable)) {
    query['BizEnable'] = request.bizEnable;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeInstance',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of five queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateEdgeInstanceRequest
  * @return UpdateEdgeInstanceResponse
 */
async function updateEdgeInstance(request: UpdateEdgeInstanceRequest): UpdateEdgeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceWithOptions(request, runtime);
}

model UpdateEdgeInstanceChannelRequest {
  channelId?: string(name='ChannelId', example='BE0BD49EF5EF4D119D09CC1B25******'),
  channelName?: string(name='ChannelName', example='le_name_update'),
  configs?: [ 
    {
      content?: string(name='Content', example='{"protocol":"TCP", "ip":"1.2.3.4", "port":122}'),
      format?: string(name='Format', example='JSON'),
      key?: string(name='Key', example='key1'),
    }
  ](name='Configs'),
  driverId?: string(name='DriverId', example='9c1ae7bd59f1469abbdccc9592******'),
  instanceId?: string(name='InstanceId', example='6GaTtvTj7vJhiS******'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
}

model UpdateEdgeInstanceChannelResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='60D75DC6-00BC-47B5-AB1B-0619B7830D7D'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceChannelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeInstanceChannelResponseBody(name='body'),
}

async function updateEdgeInstanceChannelWithOptions(request: UpdateEdgeInstanceChannelRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceChannelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelId)) {
    query['ChannelId'] = request.channelId;
  }
  if (!Util.isUnset(request.channelName)) {
    query['ChannelName'] = request.channelName;
  }
  if (!Util.isUnset(request.configs)) {
    query['Configs'] = request.configs;
  }
  if (!Util.isUnset(request.driverId)) {
    query['DriverId'] = request.driverId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeInstanceChannel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEdgeInstanceChannel(request: UpdateEdgeInstanceChannelRequest): UpdateEdgeInstanceChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceChannelWithOptions(request, runtime);
}

model UpdateEdgeInstanceMessageRoutingRequest {
  instanceId?: string(name='InstanceId', example='nF9oXo7kLRWQ********'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='le_lite1'),
  routeId?: long(name='RouteId', example='123456'),
  sourceData?: string(name='SourceData', example='#'),
  sourceType?: string(name='SourceType', example='device'),
  targetData?: string(name='TargetData', example='58c46749ac934db3925fe5********'),
  targetIotHubQos?: int32(name='TargetIotHubQos', example='1'),
  targetType?: string(name='TargetType', example='function'),
  topicFilter?: string(name='TopicFilter', example='all'),
}

model UpdateEdgeInstanceMessageRoutingResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='BBE0E0C7-913A-47B8-A255-F2C6038B5FD8'),
  success?: boolean(name='Success', example='true'),
}

model UpdateEdgeInstanceMessageRoutingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEdgeInstanceMessageRoutingResponseBody(name='body'),
}

async function updateEdgeInstanceMessageRoutingWithOptions(request: UpdateEdgeInstanceMessageRoutingRequest, runtime: Util.RuntimeOptions): UpdateEdgeInstanceMessageRoutingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.routeId)) {
    query['RouteId'] = request.routeId;
  }
  if (!Util.isUnset(request.sourceData)) {
    query['SourceData'] = request.sourceData;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.targetData)) {
    query['TargetData'] = request.targetData;
  }
  if (!Util.isUnset(request.targetIotHubQos)) {
    query['TargetIotHubQos'] = request.targetIotHubQos;
  }
  if (!Util.isUnset(request.targetType)) {
    query['TargetType'] = request.targetType;
  }
  if (!Util.isUnset(request.topicFilter)) {
    query['TopicFilter'] = request.topicFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEdgeInstanceMessageRouting',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEdgeInstanceMessageRouting(request: UpdateEdgeInstanceMessageRoutingRequest): UpdateEdgeInstanceMessageRoutingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEdgeInstanceMessageRoutingWithOptions(request, runtime);
}

model UpdateJobRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
  rolloutConfig?: map[string]any(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  timeoutConfig?: map[string]any(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
}

model UpdateJobShrinkRequest {
  description?: string(name='Description', example='jobDescription'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-cn-0pp1n8t****'),
  jobId?: string(name='JobId', example='XUbmsMHmkqv0PiAG****010001'),
  rolloutConfigShrink?: string(name='RolloutConfig', example='{"maximumPerMinute": 1000}'),
  timeoutConfigShrink?: string(name='TimeoutConfig', example='{"inProgressTimeoutInMinutes": 60}'),
}

model UpdateJobResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateJobResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateJobResponseBody(name='body'),
}

async function updateJobWithOptions(tmpReq: UpdateJobRequest, runtime: Util.RuntimeOptions): UpdateJobResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rolloutConfig)) {
    request.rolloutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rolloutConfig, 'RolloutConfig', 'json');
  }
  if (!Util.isUnset(tmpReq.timeoutConfig)) {
    request.timeoutConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.timeoutConfig, 'TimeoutConfig', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.rolloutConfigShrink)) {
    query['RolloutConfig'] = request.rolloutConfigShrink;
  }
  if (!Util.isUnset(request.timeoutConfigShrink)) {
    query['TimeoutConfig'] = request.timeoutConfigShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJob',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateJob(request: UpdateJobRequest): UpdateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateJobWithOptions(request, runtime);
}

model UpdateOTAModuleRequest {
  aliasName?: string(name='AliasName', description='The new alias of the OTA module. The alias must be 1 to 64 characters in length, and can contain letters, digits, periods(.), hyphens (-), and underscores (\\_).'),
  desc?: string(name='Desc', description='The new description of the OTA module. The description can be up to 100 characters in length.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  moduleName?: string(name='ModuleName', description='The name of the OTA module.', example='barcodeScanner'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the OTA module belongs.', example='a1Le6d0****'),
}

model UpdateOTAModuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='74C2BB8D-1D6F-41F5-AE68-6B2310883F63'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateOTAModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateOTAModuleResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateOTAModuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateOTAModuleResponse
 */
async function updateOTAModuleWithOptions(request: UpdateOTAModuleRequest, runtime: Util.RuntimeOptions): UpdateOTAModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliasName)) {
    query['AliasName'] = request.aliasName;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.moduleName)) {
    query['ModuleName'] = request.moduleName;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOTAModule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateOTAModuleRequest
  * @return UpdateOTAModuleResponse
 */
async function updateOTAModule(request: UpdateOTAModuleRequest): UpdateOTAModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOTAModuleWithOptions(request, runtime);
}

model UpdateParserRequest {
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-8t***'),
  name?: string(name='Name', example='DataParserTwo'),
  parserId?: long(name='ParserId', example='1001'),
}

model UpdateParserResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateParserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateParserResponseBody(name='body'),
}

async function updateParserWithOptions(request: UpdateParserRequest, runtime: Util.RuntimeOptions): UpdateParserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parserId)) {
    query['ParserId'] = request.parserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateParser',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateParser(request: UpdateParserRequest): UpdateParserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateParserWithOptions(request, runtime);
}

model UpdateParserDataSourceRequest {
  dataSourceId?: long(name='DataSourceId', example='1001'),
  description?: string(name='Description'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  name?: string(name='Name', example='DataSource'),
}

model UpdateParserDataSourceResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E4C0FF92-2A86-41DB-92D3-73B60310D25E'),
  success?: boolean(name='Success', example='true'),
}

model UpdateParserDataSourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateParserDataSourceResponseBody(name='body'),
}

async function updateParserDataSourceWithOptions(request: UpdateParserDataSourceRequest, runtime: Util.RuntimeOptions): UpdateParserDataSourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataSourceId)) {
    query['DataSourceId'] = request.dataSourceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateParserDataSource',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateParserDataSource(request: UpdateParserDataSourceRequest): UpdateParserDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateParserDataSourceWithOptions(request, runtime);
}

model UpdateProductRequest {
  description?: string(name='Description', description='The description of the product. The description must be 1 to 100 characters in length.'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the ID of the instance on the **Overview** page in the IoT Platform console.



**Important**

*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.****
*   If no **Overview** page or **ID** is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a GUID that is issued by IoT Platform to the product.****

You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current Alibaba Cloud account.', example='a1BwAGV****'),
  productName?: string(name='ProductName', description='The new product name that you want to use.

The name must be 4 to 30 characters in length, and can contain letters, digits, and underscores (\\_).


**Important** Each product name must be unique within the current Alibaba Cloud account.'),
}

model UpdateProductResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductResponseBody(name='body'),
}

/**
  * ## QPS limits
  * You can call this API operation up to 10 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateProductResponse
 */
async function updateProductWithOptions(request: UpdateProductRequest, runtime: Util.RuntimeOptions): UpdateProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productName)) {
    query['ProductName'] = request.productName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProduct',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## QPS limits
  * You can call this API operation up to 10 times per second per account.
  * >  The RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductRequest
  * @return UpdateProductResponse
 */
async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductWithOptions(request, runtime);
}

model UpdateProductFilterConfigRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a GUID that is issued by IoT Platform to a product.

You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
  propertyTimestampFilter?: boolean(name='PropertyTimestampFilter', description='Specifies whether to deduplicate messages based on the submission time of each property. Valid values:

*   **true**: deduplicates property messages that have the same timestamp.
*   **false**: does not deduplicate messages based on timestamps.', example='false'),
  propertyValueFilter?: boolean(name='PropertyValueFilter', description='Specifies whether to deduplicate messages based on the value of each property. Valid values:

*   **true**: deduplicates property messages that have the same property value.
*   **false**: does not deduplicate messages based on property values.', example='true'),
}

model UpdateProductFilterConfigResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateProductFilterConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductFilterConfigResponseBody(name='body'),
}

/**
  * ## Message deduplication rules
  * Based on the rules that you set, IoT Platform determines whether to use the rules engine or server-side subscriptions to forward property data that is submitted by devices to a specified destination.
  * The triggering conditions of rules are related by the logic AND relation. For example, if you set the PropertyValueFilter=true and PropertyTimestampFilter=true conditions, the rule to remove duplicate messages is triggered only when both of the conditions are met.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductFilterConfigRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateProductFilterConfigResponse
 */
async function updateProductFilterConfigWithOptions(request: UpdateProductFilterConfigRequest, runtime: Util.RuntimeOptions): UpdateProductFilterConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.propertyTimestampFilter)) {
    query['PropertyTimestampFilter'] = request.propertyTimestampFilter;
  }
  if (!Util.isUnset(request.propertyValueFilter)) {
    query['PropertyValueFilter'] = request.propertyValueFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductFilterConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Message deduplication rules
  * Based on the rules that you set, IoT Platform determines whether to use the rules engine or server-side subscriptions to forward property data that is submitted by devices to a specified destination.
  * The triggering conditions of rules are related by the logic AND relation. For example, if you set the PropertyValueFilter=true and PropertyTimestampFilter=true conditions, the rule to remove duplicate messages is triggered only when both of the conditions are met.
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS). 
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductFilterConfigRequest
  * @return UpdateProductFilterConfigResponse
 */
async function updateProductFilterConfig(request: UpdateProductFilterConfigRequest): UpdateProductFilterConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductFilterConfigWithOptions(request, runtime);
}

model UpdateProductTagsRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the **ID** of the instance on the **Overview** page in the IoT Platform console.


>*   If your instance has an ID, you must specify the ID for this parameter. Otherwise, the call fails.
>*   If no **Overview** page or ID is generated for your instance, you do not need to configure this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  productKey?: string(name='ProductKey', description='The ProductKey of the product. A ProductKey is a GUID that is issued by IoT Platform to a product. You can use the IoT Platform console or call the [QueryProductList](~~69271~~) operation to view the information about all products within the current account.', example='a1BwAGV****'),
  productTag?: [ 
    {
      tagKey?: string(name='TagKey', description='The keys of the product tags. Each key must be 1 to 30 characters in length, and can contain letters, digits, and periods (.).

>  Each tag key that you specify must already exist. Each tag value that you specify must be unique.', example='room'),
      tagValue?: string(name='TagValue', description='The new values of the product tags. Each tag value must be 1 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-).', example='202'),
    }
  ](name='ProductTag'),
}

model UpdateProductTagsResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the request fails.'),
  invalidProductTags?: {
    productTag?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='room'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='123'),
    }
  ](name='ProductTag')
  }(name='InvalidProductTags', description='The invalid product tags returned if the call fails. The details are included in the **ProductTag** parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**
*   **false**', example='true'),
}

model UpdateProductTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductTagsResponseBody(name='body'),
}

/**
  * You can update a maximum of 10 tags in a single call.
  * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateProductTagsResponse
 */
async function updateProductTagsWithOptions(request: UpdateProductTagsRequest, runtime: Util.RuntimeOptions): UpdateProductTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.productTag)) {
    query['ProductTag'] = request.productTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductTags',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can update a maximum of 10 tags in a single call.
  * > You must specify the tag keys and tag values. Otherwise, the call fails. For description about the tag values, see the "**Request parameters**" section of this topic.
  * ## QPS limits
  * Each Alibaba Cloud account can run a maximum of 500 queries per second (QPS). 
  * >  The Resource Access Management (RAM) users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductTagsRequest
  * @return UpdateProductTagsResponse
 */
async function updateProductTags(request: UpdateProductTagsRequest): UpdateProductTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductTagsWithOptions(request, runtime);
}

model UpdateProductTopicRequest {
  codec?: string(name='Codec'),
  desc?: string(name='Desc', description='The description of the topic category. The description must be 1 to 100 characters in length.', example='resubmit a test topic'),
  enableProxySubscribe?: boolean(name='EnableProxySubscribe'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot_instc_pu****_c*-v64********'),
  operation?: string(name='Operation', description='The operation permissions of the device on the topic category. Valid values:

*   **SUB**: Subscribe.
*   **PUB**: Publish.
*   **ALL**: Publish and Subscribe.', example='PUB'),
  topicId?: string(name='TopicId', description='The ID of the topic category that you want to modify.', example='821****'),
  topicShortName?: string(name='TopicShortName', description='The name of the user-defined category level that you want to set. By default, a topic category includes the following levels: \\_productkey\\_ and \\_devicename\\_. Separate the two levels with slashes (/). Format of a topic category: `productKey/deviceName/topicShortName`.

>  Each level can contain letters, digits, and underscores (\\_), and cannot be empty.', example='resubmit'),
}

model UpdateProductTopicResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FCC27691-9151-4B93-9622-9C90F30542EC'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateProductTopicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductTopicResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductTopicRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateProductTopicResponse
 */
async function updateProductTopicWithOptions(request: UpdateProductTopicRequest, runtime: Util.RuntimeOptions): UpdateProductTopicResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.codec)) {
    query['Codec'] = request.codec;
  }
  if (!Util.isUnset(request.desc)) {
    query['Desc'] = request.desc;
  }
  if (!Util.isUnset(request.enableProxySubscribe)) {
    query['EnableProxySubscribe'] = request.enableProxySubscribe;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.topicId)) {
    query['TopicId'] = request.topicId;
  }
  if (!Util.isUnset(request.topicShortName)) {
    query['TopicShortName'] = request.topicShortName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProductTopic',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateProductTopicRequest
  * @return UpdateProductTopicResponse
 */
async function updateProductTopic(request: UpdateProductTopicRequest): UpdateProductTopicResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateProductTopicWithOptions(request, runtime);
}

model UpdateRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  name?: string(name='Name', description='The name of the rule. The rule name must be 1 to 30 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-).', example='test_2'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product to which the rule applies.', example='aladaeW****'),
  ruleDesc?: string(name='RuleDesc', description='The description of the rule. The description can be up to 100 characters in length.', example='test'),
  ruleId?: long(name='RuleId', description='The ID of the rule that you want to modify. You can log on to the IoT Platform console and choose **Rules** > **Data Forwarding** to view the rule ID. You can also call the [ListRule](~~69486~~) operation and view the rule ID in the response.', example='100000'),
  select?: string(name='Select', description='The SQL SELECT statement to be executed. For more information, see [SQL expressions](~~30554~~).

>  Specify the content that follows the SELECT keyword for this parameter. For example, if the SELECT statement is `SELECT a,b,c`, specify `a,b,c` for this parameter.', example='deviceName() as deviceName, items.Humidity.value as Humidity, items.Temperature.value as Temperature'),
  shortTopic?: string(name='ShortTopic', description='The topic to which this rule is applied. Syntax: `${deviceName}/topicShortName`. `${deviceName}` specifies the name of the device, and `topicShortName` specifies the custom name of the topic.

*   Basic communication topics or Thing Specification Language (TSL)-based communication topics. Syntax: `${deviceName}/topicShortName`. You can replace `${deviceName}` with the `+` wildcard. The wildcard indicates that the topic applies to all devices under the product. Valid values of `topicShortName`:

    *   `/thing/event/property/post`: submits the property data of a device.

    *   `/thing/event/${tsl.event.identifier}/post`: submits the event data of a device. `${tsl.event.identifier}` specifies the identifier of an event in the TSL model.

    *   `/thing/lifecycle`: submits device lifecycle changes.

    *   `/thing/downlink/reply/message`: sends a response to a request from IoT Platform.

    *   `/thing/list/found`: submits the data when a gateway detects a new sub-device.

    *   `/thing/topo/lifecycle`: submits device topology changes.

    *   `/thing/event/property/history/post`: submits historical property data of a device.

    *   `/thing/event/${tsl.event.identifier}/post`: submits the historical event data of a device. `${tsl.event.identifier}` specifies the identifier of an event in the TSL.

    *   `/ota/upgrade`: submits OTA update statuses.

    *   `/ota/version/post`: submits OTA module versions.

    *   `/thing/deviceinfo/update`: submits device tag changes.

    *   `/edge/driver/${driver_id}/point_post`: submits pass-through data from Link IoT Edge. `${driver_id}` specifies the ID of the driver that a device uses to access Link IoT Edge.

        `${packageId}/${jobId}/ota/job/status`: submits the statuses of OTA update batches. This topic is a basic communication topic. `${packageId}` specifies the ID of the update package. `${jobId}` specifies the ID of the update batch.

*   Custom topics. Example: `${deviceName}/user/get`.

    You can call the [QueryProductTopic](~~69647~~) operation to view all custom topics of the product.

    When you specify a custom topic, you can use the `+` and `#` wildcards.

    *   You can replace `${deviceName}` with the `+` wildcard. The wildcard indicates that the topic applies to all devices under the product.

    *   You can replace the fields that follow ${deviceName} with `/user/#`. The `#` wildcard indicates that the topic applies whatever values are specified for the fields that follow`/user`.

        For more information about how to use wildcards, see [Wildcards in topics](~~85539~~).

*   Topic that is used to submit device status changes: `${deviceName}`.

    You can use the `+` wildcard. In this case, the status changes of all devices under the product are submitted.', example='+/thing/event/property/post'),
  topic?: string(name='Topic', description='The complete topic to which the rule applies.

If you specify this parameter, you do not need to specify the **ProductKey**, **ShortTopic**, and **TopicType** parameters.', example='/sys/g18l***/device1/thing/event/property/post'),
  topicType?: int32(name='TopicType', description='*   **0**: The topic is a basic communication topic or TSL-based communication topic.****
*   **1**: The topic is a custom topic.
*   **2**: The topic is used to submit device status changes. Syntax: `/as/mqtt/status/${productKey}/${deviceName}`.', example='1'),
  where?: string(name='Where', description='The condition that is used to trigger the rule. For more information, see [SQL expressions](~~30554~~).

>  Specify the content that follows the WHERE keyword for this parameter. For example, if the WHERE statement is `WHERE a>10`, specify `a>10` for this parameter.', example='Temperature>35'),
}

model UpdateRuleResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A2F243E-17FE-4846-BAB5-D02A25155AC4'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRuleResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateRuleResponse
 */
async function updateRuleWithOptions(request: UpdateRuleRequest, runtime: Util.RuntimeOptions): UpdateRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.ruleDesc)) {
    query['RuleDesc'] = request.ruleDesc;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.select)) {
    query['Select'] = request.select;
  }
  if (!Util.isUnset(request.shortTopic)) {
    query['ShortTopic'] = request.shortTopic;
  }
  if (!Util.isUnset(request.topic)) {
    query['Topic'] = request.topic;
  }
  if (!Util.isUnset(request.topicType)) {
    query['TopicType'] = request.topicType;
  }
  if (!Util.isUnset(request.where)) {
    query['Where'] = request.where;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateRuleRequest
  * @return UpdateRuleResponse
 */
async function updateRule(request: UpdateRuleRequest): UpdateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleWithOptions(request, runtime);
}

model UpdateRuleActionRequest {
  actionId?: long(name='ActionId', description='The ID of the rule action to be modified.

After you call the [CreateRuleAction](~~69586~~) operation to create a rule action, the rule action ID is returned. You can call the [ListRuleActions](~~69517~~) operation to view the rule action ID.', example='1000003'),
  configuration?: string(name='Configuration', description='The configurations of the rule action. The configurations for different rule action types are different. For more information about the configurations for different rule action types, see [CreateRuleAction](~~69586~~).', example='{"topic":"/a1iYSOl****/device5/user/get","topicType":1}'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  type?: string(name='Type', description='The type of the rule action. Valid values:

*   **MNS**: forwards topic data that is processed by the rules engine to MNS.
*   **FC**: forwards topic data that is processed by the rules engine to Function Compute for event computing.
*   **REPUBLISH**: forwards topic data that is processed by the rules engine to another IoT Platform topic.
*   **AMQP**: forwards data to an AMQP consumer group.
*   **OTS**: forwards topic data that is processed by the rules engine to Tablestore for NoSQL data storage.

> *   If you set the **DataType** parameter to **BINARY**, rules are created in the binary format. These rules cannot be used to forward data to Tablestore.
>*   Destination Alibaba Cloud services that are supported by the rules engine vary based on regions. For more information about the regions and destination cloud services that are supported by the rules engine, see [Regions and zones](~~85669~~).', example='REPUBLISH'),
}

model UpdateRuleActionResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateRuleActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRuleActionResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateRuleActionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateRuleActionResponse
 */
async function updateRuleActionWithOptions(request: UpdateRuleActionRequest, runtime: Util.RuntimeOptions): UpdateRuleActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionId)) {
    query['ActionId'] = request.actionId;
  }
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRuleAction',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 50 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateRuleActionRequest
  * @return UpdateRuleActionResponse
 */
async function updateRuleAction(request: UpdateRuleActionRequest): UpdateRuleActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRuleActionWithOptions(request, runtime);
}

model UpdateSceneRuleRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  ruleContent?: string(name='RuleContent'),
  ruleDescription?: string(name='RuleDescription'),
  ruleId?: string(name='RuleId', example='f041397879ad4d89822811d741******'),
  ruleName?: string(name='RuleName', example='test'),
}

model UpdateSceneRuleResponseBody = {
  code?: string(name='Code', example='Success'),
  errorMessage?: string(name='ErrorMessage', example='request parameter error'),
  requestId?: string(name='RequestId', example='C9D9C91B-1B3B-4D84-BE58-68E7B2A989EA'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSceneRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSceneRuleResponseBody(name='body'),
}

async function updateSceneRuleWithOptions(request: UpdateSceneRuleRequest, runtime: Util.RuntimeOptions): UpdateSceneRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.ruleContent)) {
    query['RuleContent'] = request.ruleContent;
  }
  if (!Util.isUnset(request.ruleDescription)) {
    query['RuleDescription'] = request.ruleDescription;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleName)) {
    query['RuleName'] = request.ruleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSceneRule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSceneRule(request: UpdateSceneRuleRequest): UpdateSceneRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSceneRuleWithOptions(request, runtime);
}

model UpdateSchedulePeriodRequest {
  description?: string(name='Description', example='test'),
  endTime?: string(name='EndTime', example='01:00'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  periodCode?: string(name='PeriodCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
  startTime?: string(name='StartTime', example='00:00'),
}

model UpdateSchedulePeriodResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSchedulePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSchedulePeriodResponseBody(name='body'),
}

async function updateSchedulePeriodWithOptions(request: UpdateSchedulePeriodRequest, runtime: Util.RuntimeOptions): UpdateSchedulePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.periodCode)) {
    body['PeriodCode'] = request.periodCode;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSchedulePeriod',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSchedulePeriod(request: UpdateSchedulePeriodRequest): UpdateSchedulePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSchedulePeriodWithOptions(request, runtime);
}

model UpdateSoundCodeRequest {
  duration?: int32(name='Duration', example='2'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
  soundCodeContent?: string(name='SoundCodeContent', example='www.taobao.com'),
}

model UpdateSoundCodeResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSoundCodeResponseBody(name='body'),
}

async function updateSoundCodeWithOptions(request: UpdateSoundCodeRequest, runtime: Util.RuntimeOptions): UpdateSoundCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.duration)) {
    body['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  if (!Util.isUnset(request.soundCodeContent)) {
    body['SoundCodeContent'] = request.soundCodeContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSoundCode',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSoundCode(request: UpdateSoundCodeRequest): UpdateSoundCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSoundCodeWithOptions(request, runtime);
}

model UpdateSoundCodeLabelRequest {
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  label?: string(name='Label', example='test'),
  soundCode?: string(name='SoundCode', example='Md3ZiTL888K9llXDy7890***********'),
}

model UpdateSoundCodeLabelResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeLabelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSoundCodeLabelResponseBody(name='body'),
}

async function updateSoundCodeLabelWithOptions(request: UpdateSoundCodeLabelRequest, runtime: Util.RuntimeOptions): UpdateSoundCodeLabelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.soundCode)) {
    body['SoundCode'] = request.soundCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSoundCodeLabel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSoundCodeLabel(request: UpdateSoundCodeLabelRequest): UpdateSoundCodeLabelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSoundCodeLabelWithOptions(request, runtime);
}

model UpdateSoundCodeScheduleRequest {
  description?: string(name='Description', example='test'),
  endDate?: string(name='EndDate', example='2022-03-31'),
  endTime?: string(name='EndTime', example='23:59'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  name?: string(name='Name', example='test'),
  scheduleCode?: string(name='ScheduleCode', example='Md3ZiTL888K9llXDy7890***********'),
  startDate?: string(name='StartDate', example='2022-03-31'),
  startTime?: string(name='StartTime', example='00:00'),
  status?: string(name='Status', example='WORKING'),
}

model UpdateSoundCodeScheduleResponseBody = {
  code?: string(name='Code', example='iot.soundcodeservice.NotSigned'),
  errorMessage?: string(name='ErrorMessage', example='sound code service has not been signed'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSoundCodeScheduleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSoundCodeScheduleResponseBody(name='body'),
}

async function updateSoundCodeScheduleWithOptions(request: UpdateSoundCodeScheduleRequest, runtime: Util.RuntimeOptions): UpdateSoundCodeScheduleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.scheduleCode)) {
    body['ScheduleCode'] = request.scheduleCode;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSoundCodeSchedule',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSoundCodeSchedule(request: UpdateSoundCodeScheduleRequest): UpdateSoundCodeScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSoundCodeScheduleWithOptions(request, runtime);
}

model UpdateSpeechRequest {
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfig?: map[string]any(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechCode?: string(name='SpeechCode', example='VlKzbj3XIZ****CeIHH6vR82JNCSzk**'),
  speechRate?: int32(name='SpeechRate', example='0'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model UpdateSpeechShrinkRequest {
  enableSoundCode?: boolean(name='EnableSoundCode', example='true'),
  iotInstanceId?: string(name='IotInstanceId', example='iot_instc_pu****_c*-v64********'),
  projectCode?: string(name='ProjectCode', example='4de2c367****8c585e5992**'),
  soundCodeConfigShrink?: string(name='SoundCodeConfig', example='{"SoundCodeContent": "www.taobao.com", "AdditionalDuration": 3}'),
  speechCode?: string(name='SpeechCode', example='VlKzbj3XIZ****CeIHH6vR82JNCSzk**'),
  speechRate?: int32(name='SpeechRate', example='0'),
  voice?: string(name='Voice', example='Siyue'),
  volume?: int32(name='Volume', example='50'),
}

model UpdateSpeechResponseBody = {
  code?: string(name='Code', example='iot.speechsolution.NotSigned'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='66FF51D3-***-49F1-B1A2-***'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSpeechResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSpeechResponseBody(name='body'),
}

async function updateSpeechWithOptions(tmpReq: UpdateSpeechRequest, runtime: Util.RuntimeOptions): UpdateSpeechResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateSpeechShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.soundCodeConfig)) {
    request.soundCodeConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.soundCodeConfig, 'SoundCodeConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.enableSoundCode)) {
    body['EnableSoundCode'] = request.enableSoundCode;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    body['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.projectCode)) {
    body['ProjectCode'] = request.projectCode;
  }
  if (!Util.isUnset(request.soundCodeConfigShrink)) {
    body['SoundCodeConfig'] = request.soundCodeConfigShrink;
  }
  if (!Util.isUnset(request.speechCode)) {
    body['SpeechCode'] = request.speechCode;
  }
  if (!Util.isUnset(request.speechRate)) {
    body['SpeechRate'] = request.speechRate;
  }
  if (!Util.isUnset(request.voice)) {
    body['Voice'] = request.voice;
  }
  if (!Util.isUnset(request.volume)) {
    body['Volume'] = request.volume;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSpeech',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSpeech(request: UpdateSpeechRequest): UpdateSpeechResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSpeechWithOptions(request, runtime);
}

model UpdateSubscribeRelationRequest {
  consumerGroupIds?: [ string ](name='ConsumerGroupIds', example='nJRaJPn5U1JITGfjBO9l00****'),
  deviceDataFlag?: boolean(name='DeviceDataFlag', description='Specifies whether to push upstream device messages. Valid values:

*   **true**: yes.
*   **false**: no.

Default value: **false**.', example='true'),
  deviceLifeCycleFlag?: boolean(name='DeviceLifeCycleFlag', description='Specifies whether to push messages about device lifecycle changes. Valid values:

*   **true**: yes.
*   **false**: no.

Default value: **false**.', example='true'),
  deviceStatusChangeFlag?: boolean(name='DeviceStatusChangeFlag', description='Specifies whether to push messages about device status changes. Valid values:

*   **true**: yes.
*   **false**: no.

Default value: **false**.', example='true'),
  deviceTagFlag?: boolean(name='DeviceTagFlag', description='Specifies whether to push messages about topological relationship changes of devices. Valid values:

*   **true**: yes. This parameter takes effect only if the **Type** parameter is set to **AMQP**.
*   **false**: no.

Default value: **false**.', example='true'),
  deviceTopoLifeCycleFlag?: boolean(name='DeviceTopoLifeCycleFlag', description='Specifies whether to push messages about topological relationship changes of devices. Valid values:

*   **true**: yes. This parameter is valid only for gateway products.
*   **false**: no.

Default value: **false**.', example='true'),
  foundDeviceListFlag?: boolean(name='FoundDeviceListFlag', description='Specifies whether to push messages if a gateway detects new sub-devices. Valid values:

*   **true**: yes. This parameter is valid only for gateway products.
*   **false**: no.

Default value: **false**.', example='true'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  mnsConfiguration?: string(name='MnsConfiguration', description='The configurations of the MNS queue. This parameter is required if the **Type** parameter is set to **AMQP**.

For more information, see the "Definition of the MnsConfiguration parameter" section.', example='{     "queueName": "mns-test-topic1",     "regionName": "cn-shanghai",     "role": {         "roleArn": "acs:ram::5645***:role/aliyuniotaccessingmnsrole",         "roleName": "AliyunIOTAccessingMNSRole"     } }'),
  otaEventFlag?: boolean(name='OtaEventFlag', description='Specifies whether to push notifications about the status of OTA update batches. Valid values:

*   **true**: yes.
*   **false**: no.

Default value: **false**.', example='true'),
  otaJobFlag?: boolean(name='OtaJobFlag', description='Specifies whether to push notifications about the statuses of OTA update batches. Valid values:

*   **true**: yes. This parameter takes effect only if the **Type** parameter is set to **AMQP**.
*   **false**: no.

Default value: **false**.', example='true'),
  otaVersionFlag?: boolean(name='OtaVersionFlag', description='Specifies whether to push messages about OTA module version numbers. Valid values:

*   **true**: yes. This parameter takes effect only if the **Type** parameter is set to **AMQP**.
*   **false**: no.

Default value: **false**.', example='true'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product that is specified for the subscription.', example='a1fyXVF****'),
  subscribeFlags?: string(name='SubscribeFlags', example='{     "jt808DeviceDataFlag": true }'),
  thingHistoryFlag?: boolean(name='ThingHistoryFlag', description='Specifies whether to push upstream historical Thing Specification Language (TSL) data. Valid values:

*   **true**: yes.
*   **false**: no.

Default value: **false**.', example='true'),
  type?: string(name='Type', description='The type of the subscription. Valid values:

*   **MNS**
*   **AMQP**', example='AMQP'),
}

model UpdateSubscribeRelationResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='21D327AF-A7DE-4E59-B5D1-ACAC8C024555'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateSubscribeRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateSubscribeRelationResponseBody(name='body'),
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateSubscribeRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateSubscribeRelationResponse
 */
async function updateSubscribeRelationWithOptions(request: UpdateSubscribeRelationRequest, runtime: Util.RuntimeOptions): UpdateSubscribeRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consumerGroupIds)) {
    query['ConsumerGroupIds'] = request.consumerGroupIds;
  }
  if (!Util.isUnset(request.deviceDataFlag)) {
    query['DeviceDataFlag'] = request.deviceDataFlag;
  }
  if (!Util.isUnset(request.deviceLifeCycleFlag)) {
    query['DeviceLifeCycleFlag'] = request.deviceLifeCycleFlag;
  }
  if (!Util.isUnset(request.deviceStatusChangeFlag)) {
    query['DeviceStatusChangeFlag'] = request.deviceStatusChangeFlag;
  }
  if (!Util.isUnset(request.deviceTagFlag)) {
    query['DeviceTagFlag'] = request.deviceTagFlag;
  }
  if (!Util.isUnset(request.deviceTopoLifeCycleFlag)) {
    query['DeviceTopoLifeCycleFlag'] = request.deviceTopoLifeCycleFlag;
  }
  if (!Util.isUnset(request.foundDeviceListFlag)) {
    query['FoundDeviceListFlag'] = request.foundDeviceListFlag;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.mnsConfiguration)) {
    query['MnsConfiguration'] = request.mnsConfiguration;
  }
  if (!Util.isUnset(request.otaEventFlag)) {
    query['OtaEventFlag'] = request.otaEventFlag;
  }
  if (!Util.isUnset(request.otaJobFlag)) {
    query['OtaJobFlag'] = request.otaJobFlag;
  }
  if (!Util.isUnset(request.otaVersionFlag)) {
    query['OtaVersionFlag'] = request.otaVersionFlag;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.subscribeFlags)) {
    query['SubscribeFlags'] = request.subscribeFlags;
  }
  if (!Util.isUnset(request.thingHistoryFlag)) {
    query['ThingHistoryFlag'] = request.thingHistoryFlag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSubscribeRelation',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * >  RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateSubscribeRelationRequest
  * @return UpdateSubscribeRelationResponse
 */
async function updateSubscribeRelation(request: UpdateSubscribeRelationRequest): UpdateSubscribeRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSubscribeRelationWithOptions(request, runtime);
}

model UpdateThingModelRequest {
  functionBlockId?: string(name='FunctionBlockId', description='The identifier of the custom TSL module. Each identifier is unique in a product.

If you do not specify this parameter or the **FunctionBlockName** parameter, the system updates the features of the default module.', example='BatteryModule'),
  functionBlockName?: string(name='FunctionBlockName', description='The name of the custom module. The name must be 4 to 30 characters in length, and can contain letters, digits, and underscores (\\_).

*   If you do not specify this parameter or the **FunctionBlockId** parameter, the system updates the features of the default module.
*   If you specify this parameter, the parameter must be used in combination with the **FunctionBlockId** parameter. You can modify the name of the specified custom module. The name corresponds to the value of the **FunctionBlockId** parameter.

>  You cannot modify the name of the default module.'),
  identifier?: string(name='Identifier', description='The identifier of the feature.

You can call the [GetThingModelTsl](~~150319~~) operation and view the identifier in the **TslStr** response parameter.', example='Temperature'),
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.

You can view the ProductKey on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1BwAGV****'),
  thingModelJson?: string(name='ThingModelJson', description='The updated details of the feature.

*   If you specify the **Identifier** parameter, you can define only the identifier of the feature.
*   If you do not specify the **Identifier** parameter, you can define a maximum of 50 input and output parameters for a service or event.

For more information about how to specify this parameter, see [Data structure of ThingModelJson](~~150457~~).'),
}

model UpdateThingModelResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateThingModelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateThingModelResponseBody(name='body'),
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   When you call this operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
  * *   You can call this operation to update only one feature. TSL features include properties, services, and events.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateThingModelRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateThingModelResponse
 */
async function updateThingModelWithOptions(request: UpdateThingModelRequest, runtime: Util.RuntimeOptions): UpdateThingModelResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.functionBlockId)) {
    query['FunctionBlockId'] = request.functionBlockId;
  }
  if (!Util.isUnset(request.functionBlockName)) {
    query['FunctionBlockName'] = request.functionBlockName;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.thingModelJson)) {
    query['ThingModelJson'] = request.thingModelJson;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateThingModel',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Limits
  * *   If a product is published, you must call the [CancelReleaseProduct](~~213875~~) operation to unpublish the product before you call this operation.
  * *   When you call this operation, you can use the [json-schema](https://github.com/everit-org/json-schema?spm=a2c4g.11186623.2.23.575832d9zD7fZb) library to verify the input parameters in **ThingModelJson**. For more information, see [Data structure of ThingModelJson](~~150457~~).
  * *   You can call this operation to update only one feature. TSL features include properties, services, and events.
  * *   Each Alibaba Cloud account can run a maximum of 5 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateThingModelRequest
  * @return UpdateThingModelResponse
 */
async function updateThingModel(request: UpdateThingModelRequest): UpdateThingModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateThingModelWithOptions(request, runtime);
}

model UpdateThingScriptRequest {
  iotInstanceId?: string(name='IotInstanceId', description='The ID of the instance. You can view the instance **ID** on the **Overview** page in the IoT Platform console.

>*   If your instance has an ID, you must configure this parameter. If you do not set this parameter, the call fails.
>*   If your instance has no **Overview** page or ID, you do not need to set this parameter.

For more information, see [Overview](~~356505~~).', example='iot-cn-0pp1n8t****'),
  productKey?: string(name='ProductKey', description='The **ProductKey** of the product.

You can view the **ProductKey** on the Product Details page of the IoT Platform console. You can also obtain the ProductKey by calling the [QueryProductList](~~69271~~) operation.', example='a1Q5XoY****'),
  scriptContent?: string(name='ScriptContent', description='The content of the script. You must specify this parameter.

For more information about script examples, see [What is data parsing](~~68702~~).', example='"function protocolToRawData(jsonObj) {return rawdata; }function rawDataToProtocol(rawData) {return jsonObj; }"'),
  scriptType?: string(name='ScriptType', description='The type of the script. Valid values:

*   JavaScript
*   Python\\_27: Python 2.7
*   PHP\\_72: PHP 7.2', example='JavaScript'),
}

model UpdateThingScriptResponseBody = {
  code?: string(name='Code', description='The error code returned if the call fails. For more information, see [Error codes](~~87387~~).', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage', description='The error message returned if the call fails.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BB71E443-4447-4024-A000-EDE09922891E'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model UpdateThingScriptResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateThingScriptResponseBody(name='body'),
}

/**
  * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateThingScriptRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateThingScriptResponse
 */
async function updateThingScriptWithOptions(request: UpdateThingScriptRequest, runtime: Util.RuntimeOptions): UpdateThingScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.scriptContent)) {
    query['ScriptContent'] = request.scriptContent;
  }
  if (!Util.isUnset(request.scriptType)) {
    query['ScriptType'] = request.scriptType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateThingScript',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   A data parsing script is used to convert the custom-formatted data to JSON data after the data is submitted by a device. You can write a script in JavaScript, Python 2.7, and PHP 7.2. For more information, see [Submit scripts for data parsing](~~149963~~).
  * *   Each Alibaba Cloud account can run a maximum of 10 queries per second (QPS).
  * > RAM users of an Alibaba Cloud account share the quota of the account.
  *
  * @param request UpdateThingScriptRequest
  * @return UpdateThingScriptResponse
 */
async function updateThingScript(request: UpdateThingScriptRequest): UpdateThingScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateThingScriptWithOptions(request, runtime);
}

model UpdateTopicConfigRequest {
  codec?: string(name='Codec'),
  description?: string(name='Description'),
  enableBroadcast?: boolean(name='EnableBroadcast', example='true'),
  enableProxySubscribe?: boolean(name='EnableProxySubscribe'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-0pp1n8t****'),
  operation?: string(name='Operation'),
  productKey?: string(name='ProductKey', example='a1Q5XoY****'),
  topicFullName?: string(name='TopicFullName', example='/broadcast/a1Q5XoY****/test'),
}

model UpdateTopicConfigResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTopicConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTopicConfigResponseBody(name='body'),
}

async function updateTopicConfigWithOptions(request: UpdateTopicConfigRequest, runtime: Util.RuntimeOptions): UpdateTopicConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.codec)) {
    query['Codec'] = request.codec;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableBroadcast)) {
    query['EnableBroadcast'] = request.enableBroadcast;
  }
  if (!Util.isUnset(request.enableProxySubscribe)) {
    query['EnableProxySubscribe'] = request.enableProxySubscribe;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.topicFullName)) {
    query['TopicFullName'] = request.topicFullName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTopicConfig',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTopicConfig(request: UpdateTopicConfigRequest): UpdateTopicConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTopicConfigWithOptions(request, runtime);
}

model WriteDevicesHotStorageDataRequest {
  deviceName?: string(name='DeviceName', example='device1'),
  iotId?: string(name='IotId', example='y4u2weAI********HMle1234'),
  iotInstanceId?: string(name='IotInstanceId', example='iot-2w****'),
  items?: string(name='Items', example='{ "Power": { "value": "on", "time": 1524448722000 }, "WF": { "value": 23.6, "time": 1524448722000 } }'),
  productKey?: string(name='ProductKey', example='a1BwAGV****'),
  userTopic?: string(name='UserTopic', example='user/a***/b***'),
}

model WriteDevicesHotStorageDataResponseBody = {
  code?: string(name='Code', example='iot.system.SystemException'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId', example='E55E50B7-40EE-4B6B-8BBE-D3ED55CCF565'),
  success?: boolean(name='Success', example='true'),
}

model WriteDevicesHotStorageDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: WriteDevicesHotStorageDataResponseBody(name='body'),
}

async function writeDevicesHotStorageDataWithOptions(request: WriteDevicesHotStorageDataRequest, runtime: Util.RuntimeOptions): WriteDevicesHotStorageDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deviceName)) {
    query['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.iotId)) {
    query['IotId'] = request.iotId;
  }
  if (!Util.isUnset(request.iotInstanceId)) {
    query['IotInstanceId'] = request.iotInstanceId;
  }
  if (!Util.isUnset(request.items)) {
    query['Items'] = request.items;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }
  if (!Util.isUnset(request.userTopic)) {
    query['UserTopic'] = request.userTopic;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'WriteDevicesHotStorageData',
    version = '2018-01-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function writeDevicesHotStorageData(request: WriteDevicesHotStorageDataRequest): WriteDevicesHotStorageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return writeDevicesHotStorageDataWithOptions(request, runtime);
}

